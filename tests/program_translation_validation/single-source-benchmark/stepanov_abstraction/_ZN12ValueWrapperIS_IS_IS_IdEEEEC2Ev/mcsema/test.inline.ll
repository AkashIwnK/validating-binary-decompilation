; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400680__init_type = type <{ [23 x i8] }>
%seg_4006a0__plt_type = type <{ [208 x i8] }>
%seg_400770__text_type = type <{ [24514 x i8] }>
%seg_406734__fini_type = type <{ [9 x i8] }>
%seg_406740__rodata_type = type <{ [24 x i8], [31 x i8], [62 x i8], [43 x i8], [43 x i8], [39 x i8], [20 x i8], [34 x i8], [18 x i8], [24 x i8], [15 x i8], [15 x i8], [15 x i8], [21 x i8], [15 x i8], [27 x i8], [15 x i8], [33 x i8], [15 x i8], [29 x i8], [15 x i8], [35 x i8], [25 x i8], [31 x i8], [37 x i8], [43 x i8], [39 x i8], [45 x i8], [25 x i8], [31 x i8], [37 x i8], [43 x i8], [39 x i8], [45 x i8], [21 x i8] }>
%seg_406b5c__eh_frame_hdr_type = type <{ [1556 x i8] }>
%seg_407170__eh_frame_type = type <{ [5488 x i8] }>
%seg_608de8__init_array_type = type <{ i64, i64, i64 }>
%seg_608ff0__got_type = type <{ i64, i64 }>
%seg_609000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_609078__data_type = type <{ [16 x i8] }>
%iterations_type = type <{ [8 x i8] }>
%init_value_type = type <{ [8 x i8] }>
%dpb_type = type <{ i64 }>
%dpe_type = type <{ i64 }>
%dMpb_type = type <{ i64 }>
%dMpe_type = type <{ i64 }>
%DVpb_type = type <{ i64 }>
%DVpe_type = type <{ i64 }>
%DVMpb_type = type <{ i64 }>
%DVMpe_type = type <{ i64 }>
%DV10pb_type = type <{ i64 }>
%DV10pe_type = type <{ i64 }>
%DV10Mpb_type = type <{ i64 }>
%DV10Mpe_type = type <{ i64 }>
%seg_609100__bss_type = type <{ [16 x i8] }>
%results_type = type <{ [8 x i8] }>
%current_test_type = type <{ [4 x i8] }>
%allocated_results_type = type <{ [4 x i8] }>
%start_time_type = type <{ [8 x i8] }>
%end_time_type = type <{ [8 x i8] }>
%data_type = type <{ [16000 x i8] }>
%VData_type = type <{ [16000 x i8] }>
%V10Data_type = type <{ [16000 x i8] }>
%dataMaster_type = type <{ [16000 x i8] }>
%VDataMaster_type = type <{ [16000 x i8] }>
%V10DataMaster_type = type <{ [16000 x i8] }>
%dPb_type = type <{ [8 x i8] }>
%dPe_type = type <{ [8 x i8] }>
%dMPb_type = type <{ [8 x i8] }>
%dMPe_type = type <{ [8 x i8] }>
%DVPb_type = type <{ [8 x i8] }>
%DVPe_type = type <{ [8 x i8] }>
%DVMPb_type = type <{ [8 x i8] }>
%DVMPe_type = type <{ [8 x i8] }>
%DV10Pb_type = type <{ [8 x i8] }>
%DV10Pe_type = type <{ [8 x i8] }>
%DV10MPb_type = type <{ [8 x i8] }>
%DV10MPe_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400680__init = internal constant %seg_400680__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05m\89 \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4006a0__plt = internal constant %seg_4006a0__plt_type <{ [208 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%b}>
@seg_400770__text = internal constant %seg_400770__text_type <{ [24514 x i8] c"UH\89\E5\E8W\00\00\00\E8\B2\00\00\00\E8\0D\01\00\00\E8h\01\00\00\E8\C3\01\00\00\E8\DE\01\00\00\E8\F9\01\00\00\E8\14\02\00\00\E8/\02\00\00\E8J\02\00\00\E8e\02\00\00\E8\80\02\00\00\E8\9B\02\00\00\E8\B6\02\00\00\E8\D1\02\00\00\E8\EC\02\00\00]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\B8\B0\CF`\00\00\00\00\00H\89E\F8\E9\00\00\00\00H\8BE\F8H\89\C7H\89E\F0\E8U\15\00\00H\B8\B0\CF`\00\00\00\00\00H\05\80>\00\00H\8B}\F0H\83\C7\08H9\C7H\89}\F8\0F\85\CB\FF\FF\FFH\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\B80\0Ea\00\00\00\00\00H\89E\F8\E9\00\00\00\00H\8BE\F8H\89\C7H\89E\F0\E8\D5\13\00\00H\B80\0Ea\00\00\00\00\00H\05\80>\00\00H\8B}\F0H\83\C7\08H9\C7H\89}\F8\0F\85\CB\FF\FF\FFH\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\B80\8Ba\00\00\00\00\00H\89E\F8\E9\00\00\00\00H\8BE\F8H\89\C7H\89E\F0\E8\95\14\00\00H\B80\8Ba\00\00\00\00\00H\05\80>\00\00H\8B}\F0H\83\C7\08H9\C7H\89}\F8\0F\85\CB\FF\FF\FFH\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\B8\B0\C9a\00\00\00\00\00H\89E\F8\E9\00\00\00\00H\8BE\F8H\89\C7H\89E\F0\E8\15\13\00\00H\B8\B0\C9a\00\00\00\00\00H\05\80>\00\00H\8B}\F0H\83\C7\08H9\C7H\89}\F8\0F\85\CB\FF\FF\FFH\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\BF0\08b\00\00\00\00\00H\8B4%\98\90`\00\E8\A5\12\00\00]\C3\0F\1F\00UH\89\E5H\BF8\08b\00\00\00\00\00H\8B4%\A0\90`\00\E8\85\12\00\00]\C3\0F\1F\00UH\89\E5H\BF@\08b\00\00\00\00\00H\8B4%\A8\90`\00\E8e\12\00\00]\C3\0F\1F\00UH\89\E5H\BFH\08b\00\00\00\00\00H\8B4%\B0\90`\00\E8E\12\00\00]\C3\0F\1F\00UH\89\E5H\BFP\08b\00\00\00\00\00H\8B4%\B8\90`\00\E8\05\12\00\00]\C3\0F\1F\00UH\89\E5H\BFX\08b\00\00\00\00\00H\8B4%\C0\90`\00\E8\E5\11\00\00]\C3\0F\1F\00UH\89\E5H\BF`\08b\00\00\00\00\00H\8B4%\C8\90`\00\E8\C5\11\00\00]\C3\0F\1F\00UH\89\E5H\BFh\08b\00\00\00\00\00H\8B4%\D0\90`\00\E8\A5\11\00\00]\C3\0F\1F\00UH\89\E5H\BFp\08b\00\00\00\00\00H\8B4%\D8\90`\00\E8e\11\00\00]\C3\0F\1F\00UH\89\E5H\BFx\08b\00\00\00\00\00H\8B4%\E0\90`\00\E8E\11\00\00]\C3\0F\1F\00UH\89\E5H\BF\80\08b\00\00\00\00\00H\8B4%\E8\90`\00\E8%\11\00\00]\C3\0F\1F\00UH\89\E5H\BF\88\08b\00\00\00\00\00H\8B4%\F0\90`\00\E8\05\11\00\00]\C3\0F\1F\001\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C00g@\00H\C7\C1\C0f@\00H\C7\C7`\12@\00\FF\15\F6\84 \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8\F8\90`\00H=\F8\90`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF\F8\90`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE\F8\90`\00UH\81\EE\F8\90`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF\F8\90`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=y\85 \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05g\85 \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC \F2\0F\11E\F8H\89}\F0H\83<%\10\91`\00\00\0F\84\14\00\00\00\8B\04%\18\91`\00;\04%\1C\91`\00\0F\8Cq\00\00\00\8B\04%\1C\91`\00\83\C0\0A\89\04%\1C\91`\00H\8B\0C%\10\91`\00Hc\14%\1C\91`\00H\C1\E2\04H\89\CFH\89\D6\E8\0C\FB\FF\FFH\89\04%\10\91`\00H\83<%\10\91`\00\00\0F\85%\00\00\00H\BFXg@\00\00\00\00\00\8B4%\1C\91`\00\B0\00\E8\9D\FA\FF\FF\BF\FF\FF\FF\FF\89E\EC\E8\F0\FA\FF\FF\E9\00\00\00\00\F2\0F\10E\F8H\8B\04%\10\91`\00Hc\0C%\18\91`\00H\C1\E1\04H\01\C8\F2\0F\11\00H\8BE\F0H\8B\0C%\10\91`\00Hc\14%\18\91`\00H\C1\E2\04H\01\D1H\89A\08\8B4%\18\91`\00\83\C6\01\894%\18\91`\00H\83\C4 ]\C3\0F\1FD\00\00UH\89\E5H\81\EC\80\00\00\00\0FW\C0\F2\0F\10\0DrZ\00\00H\89}\F8\89u\F4\89U\F0\89M\ECD\89E\E8\F2\0F*U\F4\F2\0F*]\F0\F2\0FY\D3\F2\0F^\D1\F2\0F\11U\D8\F2\0F\11E\D0\F2\0F\11E\C8\C7E\C4\0C\00\00\00\C7E\E4\00\00\00\00\8BE\E4;\04%\18\91`\00\0F\8DF\00\00\00H\8B\04%\10\91`\00HcM\E4H\C1\E1\04H\01\C8H\8Bx\08\E8\9E\F9\FF\FF\89\C2\89U\C0\8BU\C0;U\C4\0F\8E\06\00\00\00\8BE\C0\89E\C4\E9\00\00\00\00\8BE\E4\83\C0\01\89E\E4\E9\AA\FF\FF\FFH\BFwg@\00\00\00\00\00H\BA\B3g@\00\00\00\00\00\8BE\C4\83\E8\0C\89\C6\B0\00\E8a\F9\FF\FFH\BF\B5g@\00\00\00\00\00H\BA\B3g@\00\00\00\00\00\8Bu\C4\89E\BC\B0\00\E8@\F9\FF\FF\C7E\E4\00\00\00\00\89E\B8\8BE\E4;\04%\18\91`\00\0F\8D\EC\00\00\00H\BF\E0g@\00\00\00\00\00H\B9\DFg@\00\00\00\00\00\8Bu\E4HcE\C4H\8B\14%\10\91`\00LcE\E4I\C1\E0\04L\01\C2H\8BR\08H\89}\B0H\89\D7H\89E\A8H\89M\A0\89u\9C\E8\CD\F8\FF\FFH\8BM\A8H)\C1\89\CEH\8B\04%\10\91`\00HcM\E4H\C1\E1\04H\01\C8L\8B@\08H\8B\04%\10\91`\00HcM\E4H\C1\E1\04H\01\C8\F2\0F\10\00\F2\0F\10M\D8H\8B\04%\10\91`\00HcM\E4H\C1\E1\04H\01\C8\F2\0F^\08H\8B\04%\10\91`\00HcM\E4H\C1\E1\04H\01\C8\F2\0F\10\10H\8B\04%\10\91`\00\F2\0F^\10H\8B}\B0D\8BM\9C\89u\98D\89\CE\8BU\98H\8BM\A0\B0\03\E8K\F8\FF\FF\89E\94\8BE\E4\83\C0\01\89E\E4\E9\04\FF\FF\FF\C7E\E4\00\00\00\00\8BE\E4;\04%\18\91`\00\0F\8D/\00\00\00H\8B\04%\10\91`\00HcM\E4H\C1\E1\04H\01\C8\F2\0F\10\00\F2\0FXE\D0\F2\0F\11E\D0\8BE\E4\83\C0\01\89E\E4\E9\C1\FF\FF\FFH\BF\0Bh@\00\00\00\00\00H\8Bu\F8\F2\0F\10E\D0\B0\01\E8\DA\F7\FF\FF\83<%\18\91`\00\01\89E\90\0F\8E\9D\00\00\00\83}\E8\00\0F\84\93\00\00\00\C7E\E4\01\00\00\00\8BE\E4;\04%\18\91`\00\0F\8D@\00\00\00H\8B\04%\10\91`\00HcM\E4H\C1\E1\04H\01\C8\F2\0F\10\00H\8B\04%\10\91`\00\F2\0F^\00\E8\90\F7\FF\FF\F2\0FXE\C8\F2\0F\11E\C8\8BE\E4\83\C0\01\89E\E4\E9\B0\FF\FF\FFH\8Bu\F8\F2\0F\10E\C8\8B\04%\18\91`\00\83\E8\01\F2\0F*\C8\F2\0F^\C1H\89u\88\E8\04\F7\FF\FFH\BF2h@\00\00\00\00\00H\8Bu\88\B0\01\E8/\F7\FF\FF\89E\84\C7\04%\18\91`\00\00\00\00\00H\81\C4\80\00\00\00]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC`\0FW\C0H\89}\F8H\89u\F0\F2\0F\11E\E0\C7E\DC\0C\00\00\00\C7E\EC\00\00\00\00\8BE\EC;\04%\18\91`\00\0F\8DF\00\00\00H\8B\04%\10\91`\00HcM\ECH\C1\E1\04H\01\C8H\8Bx\08\E8\AE\F6\FF\FF\89\C2\89U\D8\8BU\D8;U\DC\0F\8E\06\00\00\00\8BE\D8\89E\DC\E9\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9\AA\FF\FF\FFH\BEFh@\00\00\00\00\00H\B9\B3g@\00\00\00\00\00H\8B}\F8\8BE\DC\83\E8\0C\89\C2\B0\00\E8\9D\F6\FF\FFH\BEhh@\00\00\00\00\00H\B9\B3g@\00\00\00\00\00H\8B}\F8\8BU\DC\89E\D4\B0\00\E8x\F6\FF\FF\C7E\EC\00\00\00\00\89E\D0\8BE\EC;\04%\18\91`\00\0F\8D\B9\00\00\00H\BEzh@\00\00\00\00\00I\B8\DFg@\00\00\00\00\00H\8B}\F8\8BU\ECHcE\DCH\8B\0C%\10\91`\00LcM\ECI\C1\E1\04L\01\C9H\8BI\08H\89}\C8H\89\CFH\89u\C0L\89E\B8H\89E\B0\89U\AC\E8\CD\F5\FF\FFH\8BM\B0H)\C1\89\CAH\8B\04%\10\91`\00HcM\ECH\C1\E1\04H\01\C8L\8BH\08H\8B\04%\10\91`\00HcM\ECH\C1\E1\04H\01\C8\F2\0F\10\00H\8B}\C8H\8Bu\C0D\8BU\AC\89U\A8D\89\D2\8BM\A8L\8BE\B8\B0\01\E8\B6\F5\FF\FF\89E\A4\8BE\EC\83\C0\01\89E\EC\E97\FF\FF\FF\C7E\EC\00\00\00\00\8BE\EC;\04%\18\91`\00\0F\8D/\00\00\00H\8B\04%\10\91`\00HcM\ECH\C1\E1\04H\01\C8\F2\0F\10\00\F2\0FXE\E0\F2\0F\11E\E0\8BE\EC\83\C0\01\89E\EC\E9\C1\FF\FF\FFH\BE\0Bh@\00\00\00\00\00H\8B}\F8H\8BU\F0\F2\0F\10E\E0\B0\01\E8A\F5\FF\FF\C7\04%\18\91`\00\00\00\00\00\89E\A0H\83\C4`]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5\E8\C7\F4\FF\FFH\89\04% \91`\00]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5\E8\A7\F4\FF\FF\F2\0F\10\05\17U\00\00H\89\04%(\91`\00H\8B\04%(\91`\00H+\04% \91`\00\F2H\0F*\C8\F2\0F^\C8\0F(\C1]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC@\02\00\00H\8DE\E0H\8DM\D8\0FW\C0\C7E\FC\00\00\00\00\89}\F8H\89u\F0\F2\0F\11E\E8\F2\0F\11E\D8H\89\C7H\89\CE\E8\C7\0A\00\00H\8D}\D0H\8Du\C8\0FW\C0\F2\0F\11E\C8\E8\D2\0A\00\00\83}\F8\01\0F\8E\14\00\00\00H\8BE\F0H\8Bx\08\E8{\F4\FF\FF\89\04%\88\90`\00\83}\F8\02\0F\8E\16\00\00\00H\8BE\F0H\8Bx\10\E8\DD\F3\FF\FF\F2\0F\11\04%\90\90`\00\F2\0F,\04%\90\90`\00\83\C0{\89\C7\E8\11\F4\FF\FFH\8B<%\98\90`\00H\8B4%\A0\90`\00\F2\0F\10\04%\90\90`\00\E8\93\0A\00\00H\8D}\C0H\BE\90\90`\00\00\00\00\00H\8B\0C%\B8\90`\00H\8B\14%\C0\90`\00H\89\95\E0\FD\FF\FFH\89\8D\D8\FD\FF\FF\E8\12\0A\00\00\F2\0F\10E\C0H\8B\BD\D8\FD\FF\FFH\8B\B5\E0\FD\FF\FF\E8\8A\0A\00\00H\8D}\B8H\BE\90\90`\00\00\00\00\00H\8B\0C%\D8\90`\00H\8B\14%\E0\90`\00H\89\95\D0\FD\FF\FFH\89\8D\C8\FD\FF\FF\E8\E9\09\00\00\F2\0F\10E\B8H\8B\BD\C8\FD\FF\FFH\8B\B5\D0\FD\FF\FF\E8\81\0A\00\00H\BA\A1h@\00\00\00\00\00H\8B<%\98\90`\00H\8B4%\A0\90`\00\F2\0F\10E\E8\E8\9D\0A\00\00H\BA\BFh@\00\00\00\00\00H\8B\0C%0\08b\00H\89M\B0H\8B\0C%8\08b\00H\89M\A8\F2\0F\10E\E8H\8B}\B0H\8Bu\A8\E8\C9\0A\00\00H\BA\E3h@\00\00\00\00\00H\8B<%\B8\90`\00H\8B4%\C0\90`\00H\8BM\E0H\89M\A0\F2\0F\10E\A0\E8\0D\0B\00\00H\BA\0Di@\00\00\00\00\00H\8B\0C%P\08b\00H\89M\98H\8B\0C%X\08b\00H\89M\90H\8BM\E0H\89M\88H\8B}\98H\8Bu\90\F2\0F\10E\88\E8Q\0B\00\00H\BA=i@\00\00\00\00\00H\8B<%\D8\90`\00H\8B4%\E0\90`\00H\8BM\D0H\89M\80\F2\0F\10E\80\E8\B5\0B\00\00H\BAii@\00\00\00\00\00H\8B\0C%p\08b\00H\89\8Dx\FF\FF\FFH\8B\0C%x\08b\00H\89\8Dp\FF\FF\FFH\8BM\D0H\89\8Dh\FF\FF\FFH\8B\BDx\FF\FF\FFH\8B\B5p\FF\FF\FF\F2\0F\10\85h\FF\FF\FF\E8\E7\0B\00\00\B8\D0\07\00\00D\8B\04%\88\90`\00\89\85\C4\FD\FF\FFD\89\C0\99D\8B\85\C4\FD\FF\FFA\F7\F8\89\04%\88\90`\00H\8B<%\A8\90`\00H\8B4%\B0\90`\00\E8:\0C\00\00H\8B<%\A8\90`\00H\8B4%\B0\90`\00H\8B\0C%\C8\90`\00H\89\CA\E8j\0C\00\00H\8B<%\A8\90`\00H\8B4%\B0\90`\00H\8B\14%\E8\90`\00\E8\AD\0C\00\00I\B8\92h@\00\00\00\00\00H\8B<%\A8\90`\00H\8B4%\B0\90`\00H\8B\14%\98\90`\00H\8B\0C%\A0\90`\00\F2\0F\10E\E8\E8\D9\0C\00\00I\B8\B0h@\00\00\00\00\00H\8B\0C%@\08b\00H\89\8D`\FF\FF\FFH\8B\0C%H\08b\00H\89\8DX\FF\FF\FFH\8B\0C%0\08b\00H\89\8DP\FF\FF\FFH\8B\0C%8\08b\00H\89\8DH\FF\FF\FF\F2\0F\10E\E8H\8B\BD`\FF\FF\FFH\8B\B5X\FF\FF\FFH\8B\95P\FF\FF\FFH\8B\8DH\FF\FF\FF\E8\ED\0C\00\00I\B8\D4h@\00\00\00\00\00H\8B<%\C8\90`\00H\8B4%\D0\90`\00H\8B\14%\B8\90`\00H\8B\0C%\C0\90`\00L\8BM\E0L\89\8D@\FF\FF\FF\F2\0F\10\85@\FF\FF\FF\E8[\0D\00\00I\B8\FEh@\00\00\00\00\00H\8B\0C%`\08b\00H\89\8D8\FF\FF\FFH\8B\0C%h\08b\00H\89\8D0\FF\FF\FFH\8B\0C%P\08b\00H\89\8D(\FF\FF\FFH\8B\0C%X\08b\00H\89\8D \FF\FF\FFH\8BM\E0H\89\8D\18\FF\FF\FFH\8B\BD8\FF\FF\FFH\8B\B50\FF\FF\FFH\8B\95(\FF\FF\FFH\8B\8D \FF\FF\FF\F2\0F\10\85\18\FF\FF\FF\E8a\0D\00\00I\B8.i@\00\00\00\00\00H\8B<%\E8\90`\00H\8B4%\F0\90`\00H\8B\14%\D8\90`\00H\8B\0C%\E0\90`\00L\8BM\D0L\89\8D\10\FF\FF\FF\F2\0F\10\85\10\FF\FF\FF\E8\CF\0D\00\00I\B8Zi@\00\00\00\00\00H\8B\0C%\80\08b\00H\89\8D\08\FF\FF\FFH\8B\0C%\88\08b\00H\89\8D\00\FF\FF\FFH\8B\0C%p\08b\00H\89\8D\F8\FE\FF\FFH\8B\0C%x\08b\00H\89\8D\F0\FE\FF\FFH\8BM\D0H\89\8D\E8\FE\FF\FFH\8B\BD\08\FF\FF\FFH\8B\B5\00\FF\FF\FFH\8B\95\F8\FE\FF\FFH\8B\8D\F0\FE\FF\FF\F2\0F\10\85\E8\FE\FF\FF\E8\D5\0D\00\00I\B8\8Ci@\00\00\00\00\00\8B\04%\88\90`\00\C1\E0\03\89\04%\88\90`\00H\8B<%\A8\90`\00H\8B4%\B0\90`\00H\8B\14%\98\90`\00H\8B\0C%\A0\90`\00\F2\0F\10E\E8\E8@\0E\00\00I\B8\A5i@\00\00\00\00\00H\8B\0C%@\08b\00H\89\8D\E0\FE\FF\FFH\8B\0C%H\08b\00H\89\8D\D8\FE\FF\FFH\8B\0C%0\08b\00H\89\8D\D0\FE\FF\FFH\8B\0C%8\08b\00H\89\8D\C8\FE\FF\FF\F2\0F\10E\E8H\8B\BD\E0\FE\FF\FFH\8B\B5\D8\FE\FF\FFH\8B\95\D0\FE\FF\FFH\8B\8D\C8\FE\FF\FF\E8T\0E\00\00I\B8\C4i@\00\00\00\00\00H\8B<%\C8\90`\00H\8B4%\D0\90`\00H\8B\14%\B8\90`\00H\8B\0C%\C0\90`\00L\8BM\E0L\89\8D\C0\FE\FF\FF\F2\0F\10\85\C0\FE\FF\FF\E8\C2\0E\00\00I\B8\E9i@\00\00\00\00\00H\8B\0C%`\08b\00H\89\8D\B8\FE\FF\FFH\8B\0C%h\08b\00H\89\8D\B0\FE\FF\FFH\8B\0C%P\08b\00H\89\8D\A8\FE\FF\FFH\8B\0C%X\08b\00H\89\8D\A0\FE\FF\FFH\8BM\E0H\89\8D\98\FE\FF\FFH\8B\BD\B8\FE\FF\FFH\8B\B5\B0\FE\FF\FFH\8B\95\A8\FE\FF\FFH\8B\8D\A0\FE\FF\FF\F2\0F\10\85\98\FE\FF\FF\E8\C8\0E\00\00I\B8\14j@\00\00\00\00\00H\8B<%\E8\90`\00H\8B4%\F0\90`\00H\8B\14%\D8\90`\00H\8B\0C%\E0\90`\00L\8BM\D0L\89\8D\90\FE\FF\FF\F2\0F\10\85\90\FE\FF\FF\E86\0F\00\00I\B8;j@\00\00\00\00\00H\8B\0C%\80\08b\00H\89\8D\88\FE\FF\FFH\8B\0C%\88\08b\00H\89\8D\80\FE\FF\FFH\8B\0C%p\08b\00H\89\8Dx\FE\FF\FFH\8B\0C%x\08b\00H\89\8Dp\FE\FF\FFH\8BM\D0H\89\8Dh\FE\FF\FFH\8B\BD\88\FE\FF\FFH\8B\B5\80\FE\FF\FFH\8B\95x\FE\FF\FFH\8B\8Dp\FE\FF\FF\F2\0F\10\85h\FE\FF\FF\E8<\0F\00\00I\B8hj@\00\00\00\00\00H\8B<%\A8\90`\00H\8B4%\B0\90`\00H\8B\14%\98\90`\00H\8B\0C%\A0\90`\00\F2\0F\10E\E8\E8\B8\0F\00\00I\B8\81j@\00\00\00\00\00H\8B\0C%@\08b\00H\89\8D`\FE\FF\FFH\8B\0C%H\08b\00H\89\8DX\FE\FF\FFH\8B\0C%0\08b\00H\89\8DP\FE\FF\FFH\8B\0C%8\08b\00H\89\8DH\FE\FF\FF\F2\0F\10E\E8H\8B\BD`\FE\FF\FFH\8B\B5X\FE\FF\FFH\8B\95P\FE\FF\FFH\8B\8DH\FE\FF\FF\E8\CC\0F\00\00I\B8\A0j@\00\00\00\00\00H\8B<%\C8\90`\00H\8B4%\D0\90`\00H\8B\14%\B8\90`\00H\8B\0C%\C0\90`\00L\8BM\E0L\89\8D@\FE\FF\FF\F2\0F\10\85@\FE\FF\FF\E8:\10\00\00I\B8\C5j@\00\00\00\00\00H\8B\0C%`\08b\00H\89\8D8\FE\FF\FFH\8B\0C%h\08b\00H\89\8D0\FE\FF\FFH\8B\0C%P\08b\00H\89\8D(\FE\FF\FFH\8B\0C%X\08b\00H\89\8D \FE\FF\FFH\8BM\E0H\89\8D\18\FE\FF\FFH\8B\BD8\FE\FF\FFH\8B\B50\FE\FF\FFH\8B\95(\FE\FF\FFH\8B\8D \FE\FF\FF\F2\0F\10\85\18\FE\FF\FF\E8@\10\00\00I\B8\F0j@\00\00\00\00\00H\8B<%\E8\90`\00H\8B4%\F0\90`\00H\8B\14%\D8\90`\00H\8B\0C%\E0\90`\00L\8BM\D0L\89\8D\10\FE\FF\FF\F2\0F\10\85\10\FE\FF\FF\E8\AE\10\00\00I\B8\17k@\00\00\00\00\00H\8B\0C%\80\08b\00H\89\8D\08\FE\FF\FFH\8B\0C%\88\08b\00H\89\8D\00\FE\FF\FFH\8B\0C%p\08b\00H\89\8D\F8\FD\FF\FFH\8B\0C%x\08b\00H\89\8D\F0\FD\FF\FFH\8BM\D0H\89\8D\E8\FD\FF\FFH\8B\BD\08\FE\FF\FFH\8B\B5\00\FE\FF\FFH\8B\95\F8\FD\FF\FFH\8B\8D\F0\FD\FF\FF\F2\0F\10\85\E8\FD\FF\FF\E8\B4\10\00\001\C0H\81\C4@\02\00\00]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\89>]\C3\0F\1F\80\00\00\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\89>]\C3\0F\1F\80\00\00\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\89>]\C3\0F\1F\80\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\89}\F8]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0\F2\0F\10\07\F2\0F\11\06]\C3f\90UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\A3G\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\89}\F8H\89u\F0\F2\0F\11E\E8H\8BE\F8H;E\F0\0F\84\1D\00\00\00\F2\0F\10E\E8H\8BE\F8H\89\C1H\83\C1\08H\89M\F8\F2\0F\11\00\E9\D5\FF\FF\FF]\C3f\90UH\89\E5\F2\0F\11E\F8H\89}\F0H\89u\E8H\8BE\F0H;E\E8\0F\84\1B\00\00\00H\8BE\F0H\89\C1H\83\C1\08H\89M\F0H\8BM\F8H\89\08\E9\D7\FF\FF\FF]\C3\0F\1F@\00UH\89\E5\F2\0F\11E\F8H\89}\F0H\89u\E8H\8BE\F0H;E\E8\0F\84\1B\00\00\00H\8BE\F0H\89\C1H\83\C1\08H\89M\F0H\8BM\F8H\89\08\E9\D7\FF\FF\FF]\C3\0F\1F@\00UH\89\E5H\83\EC0H\89}\F8H\89u\F0\F2\0F\11E\E8H\89U\E0\C7E\DC\00\00\00\00\8BE\DC;\04%\88\90`\00\0F\8D%\00\00\00H\8B}\F8H\8Bu\F0\F2\0F\10E\E8\E8>F\00\00\E89?\00\00\8BE\DC\83\C0\01\89E\DC\E9\CB\FF\FF\FFH\83\C40]\C3\0F\1FD\00\00UH\89\E5H\83\EC@H\89}\F8H\89u\F0\F2\0F\11E\E8H\89U\E0\C7E\DC\00\00\00\00\8BE\DC;\04%\88\90`\00\0F\8D5\00\00\00H\8BE\F8H\89E\D0H\8BE\F0H\89E\C8\F2\0F\10E\E8H\8B}\D0H\8Bu\C8\E8^E\00\00\E8\C9>\00\00\8BE\DC\83\C0\01\89E\DC\E9\BB\FF\FF\FFH\83\C4@]\C3\0F\1FD\00\00UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0\C7E\DC\00\00\00\00\8BE\DC;\04%\88\90`\00\0F\8D;\00\00\00H\8B}\F0H\8Bu\E8H\8BE\F8H\89E\D0\F2\0F\10E\D0\E8\86D\00\00H\8D}\C8\F2\0F\11E\C8\E8\B8?\00\00\E8S>\00\00\8BE\DC\83\C0\01\89E\DC\E9\B5\FF\FF\FFH\83\C4@]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00UH\89\E5H\83\ECPH\89}\F8H\89u\F0\F2\0F\11E\E8H\89U\E0\C7E\DC\00\00\00\00\8BE\DC;\04%\88\90`\00\0F\8DK\00\00\00H\8BE\F8H\89E\D0H\8BE\F0H\89E\C8H\8BE\E8H\89E\C0H\8B}\D0H\8Bu\C8\F2\0F\10E\C0\E8vC\00\00H\8D}\B8\F2\0F\11E\B8\E8(?\00\00\E8\C3=\00\00\8BE\DC\83\C0\01\89E\DC\E9\A5\FF\FF\FFH\83\C4P]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0\C7E\DC\00\00\00\00\8BE\DC;\04%\88\90`\00\0F\8D;\00\00\00H\8B}\F0H\8Bu\E8H\8BE\F8H\89E\D0\F2\0F\10E\D0\E8\86B\00\00H\8D}\C8\F2\0F\11E\C8\E8(=\00\00\E8C=\00\00\8BE\DC\83\C0\01\89E\DC\E9\B5\FF\FF\FFH\83\C4@]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00UH\89\E5H\83\ECPH\89}\F8H\89u\F0\F2\0F\11E\E8H\89U\E0\C7E\DC\00\00\00\00\8BE\DC;\04%\88\90`\00\0F\8DK\00\00\00H\8BE\F8H\89E\D0H\8BE\F0H\89E\C8H\8BE\E8H\89E\C0H\8B}\D0H\8Bu\C8\F2\0F\10E\C0\E8&<\00\00H\8D}\B8\F2\0F\11E\B8\E8\98<\00\00\E8\B3<\00\00\8BE\DC\83\C0\01\89E\DC\E9\A5\FF\FF\FFH\83\C4P]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8BE\F8H;E\F0\0F\84!\00\00\00\E8\DD\E5\FF\FF\F2\0F*\C0H\8BM\F8H\89\CAH\83\C2\08H\89U\F8\F2\0F\11\01\E9\D1\FF\FF\FFH\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\90UH\89\E5H\83\EC H\89}\F8H\89u\F0H\89U\E8H\8BE\F8H;E\F0\0F\846\00\00\00H\8D}\E0H\8BE\F8H\89\C1H\83\C1\08H\89M\F8H\89\C6\E8s\FB\FF\FFH\8BE\E8H\89\C1H\83\C1\08H\89M\E8H\8BM\E0H\89\08\E9\BC\FF\FF\FFH\83\C4 ]\C3f\90UH\89\E5H\83\EC H\89}\F8H\89u\F0H\89U\E8H\8BE\F8H;E\F0\0F\846\00\00\00H\8D}\E0H\8BE\F8H\89\C1H\83\C1\08H\89M\F8H\89\C6\E83\FB\FF\FFH\8BE\E8H\89\C1H\83\C1\08H\89M\E8H\8BM\E0H\89\08\E9\BC\FF\FF\FFH\83\C4 ]\C3f\90UH\89\E5H\83\EC@H\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F8H\8Bu\F0H\8BU\E8\E8\C7'\00\00H\8B}\E8H\8Bu\E0\E8\AA9\00\00H\8B}\E8H\8Bu\E0\E8\ED(\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8\8F \00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E8\C27\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8\15\22\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0H\89M\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F0H\8Bu\E8H\8BU\E0\E8\17\1C\00\00H\8B}\E0H\8Bu\D8\E8j6\00\00H\8B}\E0H\8Bu\D8\E8M\1D\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8\EF\14\00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E8\A24\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8\85\16\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0H\89M\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F0H\8Bu\E8H\8BU\E0\E8w\10\00\00H\8B}\E0H\8Bu\D8\E8J3\00\00H\8B}\E0H\8Bu\D8\E8\AD\11\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8o\07\00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E8\821\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8\05\09\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC@H\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F8H\8Bu\F0H\8BU\E8\E87$\00\00H\8B}\E8H\8Bu\E0\E8\CA/\00\00H\8B}\E8H\8Bu\E0\E8]%\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8\FF\1C\00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E82-\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8\85\1E\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0H\89M\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F0H\8Bu\E8H\8BU\E0\E8\87\18\00\00H\8B}\E0H\8Bu\D8\E8\8A+\00\00H\8B}\E0H\8Bu\D8\E8\BD\19\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8_\11\00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E8\02)\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8\F5\12\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0H\89M\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F0H\8Bu\E8H\8BU\E0\E8\E7\0C\00\00H\8B}\E0H\8Bu\D8\E8Z'\00\00H\8B}\E0H\8Bu\D8\E8\1D\0E\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8\DF\03\00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E8\D2$\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8u\05\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC@H\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F8H\8Bu\F0H\8BU\E8\E8\A7 \00\00H\8B}\E8H\8Bu\E0\E8\EA \00\00H\8B}\E8H\8Bu\E0\E8\CD!\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8o\19\00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E8\D2\19\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8\F5\1A\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0H\89M\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F0H\8Bu\E8H\8BU\E0\E8\F7\14\00\00H\8B}\E0H\8Bu\D8\E8:\15\00\00H\8B}\E0H\8Bu\D8\E8-\16\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8\CF\0D\00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E82\0E\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8e\0F\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0H\89M\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8D9\00\00\00H\8B}\F0H\8Bu\E8H\8BU\E0\E8W\09\00\00H\8B}\E0H\8Bu\D8\E8\9A\09\00\00H\8B}\E0H\8Bu\D8\E8\8D\0A\00\00\8BE\CC\83\C0\01\89E\CC\E9\B7\FF\FF\FFH\83\C4@]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\89}\F8H\89u\F0H\89U\E8H\89M\E0\F2\0F\11E\D8L\89E\D0\C7E\CC\00\00\00\00\8BE\CC;\04%\88\90`\00\0F\8Dq\00\00\00H\8BE\F8H\89E\C0H\8BE\F0H\89E\B8H\8BE\E8H\89E\B0H\8B}\C0H\8Bu\B8H\8BU\B0\E8O\00\00\00H\8BE\E8H\89E\A8H\8BE\E0H\89E\A0H\8B}\A8H\8Bu\A0\E8\B2\00\00\00H\8BE\E8H\89E\98H\8BE\E0H\89E\90H\8B}\98H\8Bu\90\E8\E5\01\00\00\8BE\CC\83\C0\01\89E\CC\E9\7F\FF\FF\FFH\83\C4p]\C3\90UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\89U\E8H\8D}\F8H\8Du\F0\E8\0F\03\00\00\A8\01\0F\85\05\00\00\00\E9C\00\00\00H\8D}\F81\F6\E8\B7\02\00\00H\8D}\E0H\89E\E0\E8\1A\03\00\00H\8D}\E81\F6H\89E\D0\E8\9B\02\00\00H\8D}\D8H\89E\D8\E8\FE\02\00\00H\8B}\D0H\8B\0FH\89\08\E9\A3\FF\FF\FFH\83\C40]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\8DE\F0H\8DM\F8H\89}\F8H\89u\F0H\89\C7H\89\CE\E8\DD\04\00\00\BA\02\00\00\00\89\D1H\89E\E0H\8BE\E0H\99H\F7\F9H\83\E8\01H\89E\E8H\83}\E8\00\0F\8CX\00\00\00H\8D}\F8H\8Bu\E8\E8\D9\04\00\00H\8D}\D0H\89E\D0\E8|\02\00\00H\8B\00H\89E\D8H\8B}\E0H\8BE\F8H\89E\C8H\8BU\E8H\8BE\D8H\89E\C0H\8Bu\C8\F2\0F\10E\C0\E8\CF\04\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\9D\FF\FF\FFH\8BE\E0H\83\E8\01H\89E\E8H\83}\E8\01\0F\8C\89\00\00\00H\8D}\F8H\8Bu\E8\E8j\04\00\00H\8D}\B0H\89E\B0\E8\0D\02\00\00H\8D}\F8H\8B\00H\89E\B8\E8\FD\01\00\00H\8D}\F8H\8Bu\E8H\89E\90\E8<\04\00\00H\8D}\A8H\89E\A8\E8\DF\01\00\001\C9\89\CAH\8Bu\90H\8B>H\898H\8B}\E8H\8BE\F8H\89E\A0H\8BE\B8H\89E\98H\8Bu\A0\F2\0F\10E\98\E8/\04\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9l\FF\FF\FFH\83\C4p]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\8Bu\F0H\89u\E0H\8B}\E8H\8Bu\E0\E83\00\00\00\A8\01\0F\85\1B\00\00\00H\BFDk@\00\00\00\00\00\8B4%\18\91`\00\B0\00\E8\B3\D7\FF\FF\89E\DCH\83\C40]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@H\8DE\F01\C9H\89}\F0H\89u\E8H\8Bu\F0H\89u\E0H\89\C7\89\CE\E8\98\00\00\00H\89E\D8H\8D}\F0H\8Du\E8\E8\C7\00\00\00\A8\01\0F\85\05\00\00\00\E9[\00\00\00H\8D}\F01\F6\E8o\00\00\00H\8D}\D0H\89E\D0\E8\D2\00\00\00H\8D}\E01\F6H\89E\C0\E8S\00\00\00H\8D}\C8H\89E\C8\E8\B6\00\00\00H\8B}\C0H\89\C6\E8\CA\00\00\00\A8\01\0F\85\05\00\00\00\E9\09\00\00\00\C6E\FF\00\E9\09\00\00\00\E9\8B\FF\FF\FF\C6E\FF\01\8AE\FF$\01\0F\B6\C0H\83\C4@]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC H\89}\F0\89u\ECH\8B}\F0H\8B?H\89}\F8H\8B}\F0\E8M\02\00\00H\8B}\F8H\89E\E0H\89\F8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H;7\0F\95\C0$\01\0F\B6\C0]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\89}\F8H\8B}\F8H\8B\07]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00$\01\0F\B6\C0H\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8\F2\0F\10\06H\8Bu\F0\F2\0F\10\0Ef\0F.\C8\0F\97\C0$\01\0F\B6\C0]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\8B}\F8H\8B\07H\83\C0\08H\89\07H\8BE\F8]\C3\0F\1F@\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H\8B?H)\FEH\C1\FE\03H\89\F0]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F0H\89u\E8H\8Bu\F0H\8B6H\89u\F8H\8Bu\E8H\C1\E6\03H\03u\F8H\89u\F8H\8BE\F8]\C3\0F\1F\00UH\89\E5H\81\EC\B0\00\00\00H\89u\F8\F2\0F\11E\F0H\89}\E8H\89U\E0H\8BU\E0H\89U\D0H\8BU\D0H\83\C2\01H\C1\E2\01H\89U\D8H\8BE\D8H;E\E8\0F\8D\D6\00\00\00H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8z\FF\FF\FFH\8D}\C8H\89E\C8\E8\1D\FD\FF\FFH\8D}\F8H\8Bu\D8H\89\85x\FF\FF\FF\E8Y\FF\FF\FFH\8D}\C0H\89E\C0\E8\FC\FC\FF\FFH\8B\BDx\FF\FF\FFH\89\C6\E8\0D\FD\FF\FF\A8\01\0F\85\05\00\00\00\E9\0C\00\00\00H\8BE\D8H\83\C0\01H\89E\D8H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8\10\FF\FF\FFH\8D}\B8H\89E\B8\E8\B3\FC\FF\FFH\8D}\F8H\8Bu\D0H\89\85p\FF\FF\FF\E8\EF\FE\FF\FFH\8D}\B0H\89E\B0\E8\92\FC\FF\FFH\8B\B5p\FF\FF\FFH\8B>H\898H\8BE\D8H\83\E8\01H\89E\D0H\8BE\D8H\03E\D8H\89E\D8\E9\1C\FF\FF\FFH\8BE\D8H;E\E8\0F\85[\00\00\00H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8\96\FE\FF\FFH\8D}\A8H\89E\A8\E89\FC\FF\FFH\8D}\F8H\8Bu\D0H\89\85h\FF\FF\FF\E8u\FE\FF\FFH\8D}\A0H\89E\A0\E8\18\FC\FF\FFH\8B\B5h\FF\FF\FFH\8B>H\898H\8BE\D8H\83\E8\01H\89E\D0\B8\02\00\00\00\89\C1H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D81\C0\88\C1H\8BU\D0H;U\E0\88\8Dg\FF\FF\FF\0F\8E,\00\00\00H\8D}\F8H\8Bu\D8\E8\0F\FE\FF\FFH\8D}\98H\89E\98\E8\B2\FB\FF\FFH\8Du\F0H\89\C7\E8\C6\FB\FF\FF\88\85g\FF\FF\FF\8A\85g\FF\FF\FF\A8\01\0F\85\05\00\00\00\E9m\00\00\00H\8D}\F8H\8Bu\D8\E8\D0\FD\FF\FFH\8D}\90H\89E\90\E8s\FB\FF\FFH\8D}\F8H\8Bu\D0H\89\85X\FF\FF\FF\E8\AF\FD\FF\FFH\8D}\88H\89E\88\E8R\FB\FF\FF\B9\02\00\00\00\89\CEH\8B\BDX\FF\FF\FFH\8B\17H\89\10H\8BE\D8H\89E\D0H\8BE\D0H\83\E8\01H\99H\F7\FEH\89E\D8\E9<\FF\FF\FFH\8D}\F8H\8Bu\D0\E8c\FD\FF\FFH\8D}\80H\89E\80\E8\06\FB\FF\FFH\8Bu\F0H\890H\81\C4\B0\00\00\00]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\89U\E8H\8BE\F8H;E\F0\0F\84)\00\00\00H\8BE\F8H\89\C1H\83\C1\08H\89M\F8H\8BM\E8H\89\CAH\83\C2\08H\89U\E8H\8B\00H\89\01\E9\C9\FF\FF\FF]\C3\0F\1F\80\00\00\00\00UH\89\E5H\83\EC@\B8\02\00\00\00\89\C1H\89}\F8H\89u\F0H\8Bu\F0H\8B}\F8H)\FEH\C1\FE\03H\89u\E0H\8BE\E0H\99H\F7\F9H\83\E8\01H\89E\E8H\83}\E8\00\0F\8C?\00\00\00H\8BE\F8H\8BM\E8H\8B\04\C8H\89E\D8H\8B}\E0H\8Bu\F8H\8BU\E8H\8BE\D8H\89E\D0\F2\0F\10E\D0\E8l\01\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\B6\FF\FF\FFH\8BE\E0H\83\E8\01H\89E\E8H\83}\E8\01\0F\8CR\00\00\001\C0\89\C2H\8BM\F8H\8Bu\E8H\8B\0C\F1H\89M\C8H\8BM\F8H\8Bu\F8H\8B}\E8H\8B\09H\89\0C\FEH\8B}\E8H\8Bu\F8H\8BM\C8H\89M\C0\F2\0F\10E\C0\E8\03\01\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\A3\FF\FF\FFH\83\C4@]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\83\EC H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E83\00\00\00\A8\01\0F\85\1B\00\00\00H\BFDk@\00\00\00\00\00\8B4%\18\91`\00\B0\00\E8\D3\CF\FF\FF\89E\ECH\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8Bu\F0H\89u\E0H\8Bu\F0H\83\C6\08H\89u\F0H\8BE\F0H;E\E8\0F\84D\00\00\00H\8BE\F0H\89\C1H\83\C1\08H\89M\F0H\8BM\E0H\89\CAH\83\C2\08H\89U\E0H\89\C7H\89\CE\E8\15\F9\FF\FF\A8\01\0F\85\05\00\00\00\E9\09\00\00\00\C6E\FF\00\E9\09\00\00\00\E9\AE\FF\FF\FF\C6E\FF\01\8AE\FF$\01\0F\B6\C0H\83\C4 ]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0H\8BU\E0H\89U\D0H\8BU\D0H\83\C2\01H\C1\E2\01H\89U\D8H\8BE\D8H;E\F0\0F\8D\7F\00\00\00H\8BE\E8H\8BM\D8H\83\E9\01H\C1\E1\03H\01\C8H\8BM\E8H\8BU\D8H\C1\E2\03H\01\D1H\89\C7H\89\CE\E8t\F8\FF\FF\A8\01\0F\85\05\00\00\00\E9\0C\00\00\00H\8BE\D8H\83\C0\01H\89E\D8H\8BE\E8H\8BM\D8H\83\E9\01H\8BU\E8H\8Bu\D0H\8B\04\C8H\89\04\F2H\8BE\D8H\83\E8\01H\89E\D0H\8BE\D8H\03E\D8H\89E\D8\E9s\FF\FF\FFH\8BE\D8H;E\F0\0F\85(\00\00\00H\8BE\E8H\8BM\D8H\83\E9\01H\8BU\E8H\8Bu\D0H\8B\04\C8H\89\04\F2H\8BE\D8H\83\E8\01H\89E\D0\B8\02\00\00\00\89\C1H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D81\C0\88\C1H\8BU\D0H;U\E0\88M\CF\0F\8E\1E\00\00\00H\8Du\F8H\8BE\E8H\8BM\D8H\C1\E1\03H\01\C8H\89\C7\E8\A1\F7\FF\FF\88E\CF\8AE\CF\A8\01\0F\85\05\00\00\00\E9@\00\00\00\B8\02\00\00\00\89\C1H\8BU\E8H\8Bu\D8H\8B}\E8L\8BE\D0H\8B\14\F2J\89\14\C7H\8BU\D8H\89U\D0H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D8\E9}\FF\FF\FFH\8BE\E8H\8BM\D0H\8BU\F8H\89\14\C8H\83\C4@]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\89U\E8H\8D}\F8H\8Du\F0\E8\0F\03\00\00\A8\01\0F\85\05\00\00\00\E9C\00\00\00H\8D}\F81\F6\E8\B7\02\00\00H\8D}\E0H\89E\E0\E8\1A\03\00\00H\8D}\E81\F6H\89E\D0\E8\9B\02\00\00H\8D}\D8H\89E\D8\E8\FE\02\00\00H\8B}\D0H\8B\0FH\89\08\E9\A3\FF\FF\FFH\83\C40]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECpH\8DE\F0H\8DM\F8H\89}\F8H\89u\F0H\89\C7H\89\CE\E8\FD\02\00\00\BA\02\00\00\00\89\D1H\89E\E0H\8BE\E0H\99H\F7\F9H\83\E8\01H\89E\E8H\83}\E8\00\0F\8CX\00\00\00H\8D}\F8H\8Bu\E8\E8\F9\02\00\00H\8D}\D0H\89E\D0\E8|\02\00\00H\8B\00H\89E\D8H\8B}\E0H\8BE\F8H\89E\C8H\8BU\E8H\8BE\D8H\89E\C0H\8Bu\C8\F2\0F\10E\C0\E8\EF\02\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\9D\FF\FF\FFH\8BE\E0H\83\E8\01H\89E\E8H\83}\E8\01\0F\8C\89\00\00\00H\8D}\F8H\8Bu\E8\E8\8A\02\00\00H\8D}\B0H\89E\B0\E8\0D\02\00\00H\8D}\F8H\8B\00H\89E\B8\E8\FD\01\00\00H\8D}\F8H\8Bu\E8H\89E\90\E8\5C\02\00\00H\8D}\A8H\89E\A8\E8\DF\01\00\001\C9\89\CAH\8Bu\90H\8B>H\898H\8B}\E8H\8BE\F8H\89E\A0H\8BE\B8H\89E\98H\8Bu\A0\F2\0F\10E\98\E8O\02\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9l\FF\FF\FFH\83\C4p]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\8Bu\F0H\89u\E0H\8B}\E8H\8Bu\E0\E83\00\00\00\A8\01\0F\85\1B\00\00\00H\BFDk@\00\00\00\00\00\8B4%\18\91`\00\B0\00\E8c\CB\FF\FF\89E\DCH\83\C40]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@H\8DE\F01\C9H\89}\F0H\89u\E8H\8Bu\F0H\89u\E0H\89\C7\89\CE\E8\98\00\00\00H\89E\D8H\8D}\F0H\8Du\E8\E8\C7\00\00\00\A8\01\0F\85\05\00\00\00\E9[\00\00\00H\8D}\F01\F6\E8o\00\00\00H\8D}\D0H\89E\D0\E8\D2\00\00\00H\8D}\E01\F6H\89E\C0\E8S\00\00\00H\8D}\C8H\89E\C8\E8\B6\00\00\00H\8B}\C0H\89\C6\E8*\F6\FF\FF\A8\01\0F\85\05\00\00\00\E9\09\00\00\00\C6E\FF\00\E9\09\00\00\00\E9\8B\FF\FF\FF\C6E\FF\01\8AE\FF$\01\0F\B6\C0H\83\C4@]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC H\89}\F0\89u\ECH\8B}\F0H\8B?H\89}\F8H\8B}\F0\E8m\00\00\00H\8B}\F8H\89E\E0H\89\F8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H;7\0F\95\C0$\01\0F\B6\C0]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\89}\F8H\8B}\F8H\8B\07]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00UH\89\E5H\89}\F8H\8B}\F8H\8B\07H\83\C0\08H\89\07H\8BE\F8]\C3\0F\1F@\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H\8B?H)\FEH\C1\FE\03H\89\F0]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F0H\89u\E8H\8Bu\F0H\8B6H\89u\F8H\8Bu\E8H\C1\E6\03H\03u\F8H\89u\F8H\8BE\F8]\C3\0F\1F\00UH\89\E5H\81\EC\B0\00\00\00H\89u\F8\F2\0F\11E\F0H\89}\E8H\89U\E0H\8BU\E0H\89U\D0H\8BU\D0H\83\C2\01H\C1\E2\01H\89U\D8H\8BE\D8H;E\E8\0F\8D\D6\00\00\00H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8z\FF\FF\FFH\8D}\C8H\89E\C8\E8\FD\FE\FF\FFH\8D}\F8H\8Bu\D8H\89\85x\FF\FF\FF\E8Y\FF\FF\FFH\8D}\C0H\89E\C0\E8\DC\FE\FF\FFH\8B\BDx\FF\FF\FFH\89\C6\E8M\F4\FF\FF\A8\01\0F\85\05\00\00\00\E9\0C\00\00\00H\8BE\D8H\83\C0\01H\89E\D8H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8\10\FF\FF\FFH\8D}\B8H\89E\B8\E8\93\FE\FF\FFH\8D}\F8H\8Bu\D0H\89\85p\FF\FF\FF\E8\EF\FE\FF\FFH\8D}\B0H\89E\B0\E8r\FE\FF\FFH\8B\B5p\FF\FF\FFH\8B>H\898H\8BE\D8H\83\E8\01H\89E\D0H\8BE\D8H\03E\D8H\89E\D8\E9\1C\FF\FF\FFH\8BE\D8H;E\E8\0F\85[\00\00\00H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8\96\FE\FF\FFH\8D}\A8H\89E\A8\E8\19\FE\FF\FFH\8D}\F8H\8Bu\D0H\89\85h\FF\FF\FF\E8u\FE\FF\FFH\8D}\A0H\89E\A0\E8\F8\FD\FF\FFH\8B\B5h\FF\FF\FFH\8B>H\898H\8BE\D8H\83\E8\01H\89E\D0\B8\02\00\00\00\89\C1H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D81\C0\88\C1H\8BU\D0H;U\E0\88\8Dg\FF\FF\FF\0F\8E,\00\00\00H\8D}\F8H\8Bu\D8\E8\0F\FE\FF\FFH\8D}\98H\89E\98\E8\92\FD\FF\FFH\8Du\F0H\89\C7\E8\06\F3\FF\FF\88\85g\FF\FF\FF\8A\85g\FF\FF\FF\A8\01\0F\85\05\00\00\00\E9m\00\00\00H\8D}\F8H\8Bu\D8\E8\D0\FD\FF\FFH\8D}\90H\89E\90\E8S\FD\FF\FFH\8D}\F8H\8Bu\D0H\89\85X\FF\FF\FF\E8\AF\FD\FF\FFH\8D}\88H\89E\88\E82\FD\FF\FF\B9\02\00\00\00\89\CEH\8B\BDX\FF\FF\FFH\8B\17H\89\10H\8BE\D8H\89E\D0H\8BE\D0H\83\E8\01H\99H\F7\FEH\89E\D8\E9<\FF\FF\FFH\8D}\F8H\8Bu\D0\E8c\FD\FF\FFH\8D}\80H\89E\80\E8\E6\FC\FF\FFH\8Bu\F0H\890H\81\C4\B0\00\00\00]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\89U\E8H\8BE\F8H;E\F0\0F\84)\00\00\00H\8BE\F8H\89\C1H\83\C1\08H\89M\F8H\8BM\E8H\89\CAH\83\C2\08H\89U\E8H\8B\00H\89\01\E9\C9\FF\FF\FF]\C3\0F\1F\80\00\00\00\00UH\89\E5H\83\EC@\B8\02\00\00\00\89\C1H\89}\F8H\89u\F0H\8Bu\F0H\8B}\F8H)\FEH\C1\FE\03H\89u\E0H\8BE\E0H\99H\F7\F9H\83\E8\01H\89E\E8H\83}\E8\00\0F\8C?\00\00\00H\8BE\F8H\8BM\E8H\8B\04\C8H\89E\D8H\8B}\E0H\8Bu\F8H\8BU\E8H\8BE\D8H\89E\D0\F2\0F\10E\D0\E8l\01\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\B6\FF\FF\FFH\8BE\E0H\83\E8\01H\89E\E8H\83}\E8\01\0F\8CR\00\00\001\C0\89\C2H\8BM\F8H\8Bu\E8H\8B\0C\F1H\89M\C8H\8BM\F8H\8Bu\F8H\8B}\E8H\8B\09H\89\0C\FEH\8B}\E8H\8Bu\F8H\8BM\C8H\89M\C0\F2\0F\10E\C0\E8\03\01\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\A3\FF\FF\FFH\83\C4@]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\83\EC H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E83\00\00\00\A8\01\0F\85\1B\00\00\00H\BFDk@\00\00\00\00\00\8B4%\18\91`\00\B0\00\E8c\C5\FF\FF\89E\ECH\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8Bu\F0H\89u\E0H\8Bu\F0H\83\C6\08H\89u\F0H\8BE\F0H;E\E8\0F\84D\00\00\00H\8BE\F0H\89\C1H\83\C1\08H\89M\F0H\8BM\E0H\89\CAH\83\C2\08H\89U\E0H\89\C7H\89\CE\E8U\F0\FF\FF\A8\01\0F\85\05\00\00\00\E9\09\00\00\00\C6E\FF\00\E9\09\00\00\00\E9\AE\FF\FF\FF\C6E\FF\01\8AE\FF$\01\0F\B6\C0H\83\C4 ]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@\F2\0F\11E\F8H\89}\F0H\89u\E8H\89U\E0H\8BU\E0H\89U\D0H\8BU\D0H\83\C2\01H\C1\E2\01H\89U\D8H\8BE\D8H;E\F0\0F\8D\7F\00\00\00H\8BE\E8H\8BM\D8H\83\E9\01H\C1\E1\03H\01\C8H\8BM\E8H\8BU\D8H\C1\E2\03H\01\D1H\89\C7H\89\CE\E8\B4\EF\FF\FF\A8\01\0F\85\05\00\00\00\E9\0C\00\00\00H\8BE\D8H\83\C0\01H\89E\D8H\8BE\E8H\8BM\D8H\83\E9\01H\8BU\E8H\8Bu\D0H\8B\04\C8H\89\04\F2H\8BE\D8H\83\E8\01H\89E\D0H\8BE\D8H\03E\D8H\89E\D8\E9s\FF\FF\FFH\8BE\D8H;E\F0\0F\85(\00\00\00H\8BE\E8H\8BM\D8H\83\E9\01H\8BU\E8H\8Bu\D0H\8B\04\C8H\89\04\F2H\8BE\D8H\83\E8\01H\89E\D0\B8\02\00\00\00\89\C1H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D81\C0\88\C1H\8BU\D0H;U\E0\88M\CF\0F\8E\1E\00\00\00H\8Du\F8H\8BE\E8H\8BM\D8H\C1\E1\03H\01\C8H\89\C7\E8\E1\EE\FF\FF\88E\CF\8AE\CF\A8\01\0F\85\05\00\00\00\E9@\00\00\00\B8\02\00\00\00\89\C1H\8BU\E8H\8Bu\D8H\8B}\E8L\8BE\D0H\8B\14\F2J\89\14\C7H\8BU\D8H\89U\D0H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D8\E9}\FF\FF\FFH\8BE\E8H\8BM\D0H\8BU\F8H\89\14\C8H\83\C4@]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\89U\E8H\8D}\F8H\8Du\F0\E8\FF\02\00\00\A8\01\0F\85\05\00\00\00\E9G\00\00\00H\8D}\F81\F6\E8\A7\02\00\00H\8D}\E0H\89E\E0\E8\0A\03\00\00H\8D}\E81\F6\F2\0F\10\00\F2\0F\11E\D0\E8\86\02\00\00H\8D}\D8H\89E\D8\E8\E9\02\00\00\F2\0F\10E\D0\F2\0F\11\00\E9\9F\FF\FF\FFH\83\C40]\C3\0F\1FD\00\00UH\89\E5H\83\EC`H\8DE\F0H\8DM\F8H\89}\F8H\89u\F0H\89\C7H\89\CE\E8\ED\02\00\00\BA\02\00\00\00\89\D1H\89E\E0H\8BE\E0H\99H\F7\F9H\83\E8\01H\89E\E8H\83}\E8\00\0F\8CR\00\00\00H\8D}\F8H\8Bu\E8\E8\E9\02\00\00H\8D}\D0H\89E\D0\E8l\02\00\00\F2\0F\10\00\F2\0F\11E\D8H\8B}\E0H\8BE\F8H\89E\C8H\8BU\E8\F2\0F\10E\D8H\8Bu\C8\E8\E5\02\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\A3\FF\FF\FFH\8BE\E0H\83\E8\01H\89E\E8H\83}\E8\01\0F\8C\87\00\00\00H\8D}\F8H\8Bu\E8\E8\80\02\00\00H\8D}\B8H\89E\B8\E8\03\02\00\00H\8D}\F8\F2\0F\10\00\F2\0F\11E\C0\E8\F1\01\00\00H\8D}\F8\F2\0F\10\00H\8Bu\E8\F2\0F\11E\A0\E8K\02\00\00H\8D}\B0H\89E\B0\E8\CE\01\00\001\C9\89\CA\F2\0F\10E\A0\F2\0F\11\00H\8B}\E8H\8BE\F8H\89E\A8\F2\0F\10E\C0H\8Bu\A8\E8G\02\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9n\FF\FF\FFH\83\C4`]\C3UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\8Bu\F0H\89u\E0H\8B}\E8H\8Bu\E0\E83\00\00\00\A8\01\0F\85\1B\00\00\00H\BFDk@\00\00\00\00\00\8B4%\18\91`\00\B0\00\E8\03\C1\FF\FF\89E\DCH\83\C40]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@H\8DE\F01\C9H\89}\F0H\89u\E8H\8Bu\F0H\89u\E0H\89\C7\89\CE\E8\98\00\00\00H\89E\D8H\8D}\F0H\8Du\E8\E8\C7\00\00\00\A8\01\0F\85\05\00\00\00\E9Z\00\00\00H\8D}\F01\F6\E8o\00\00\00H\8D}\D0H\89E\D0\E8\D2\00\00\00H\8D}\E01\F6\F2\0F\10\00\F2\0F\11E\C0\E8N\00\00\00H\8D}\C8H\89E\C8\E8\B1\00\00\00\F2\0F\10\00\F2\0F\10M\C0f\0F.\C1\0F\86\09\00\00\00\C6E\FF\00\E9\09\00\00\00\E9\8C\FF\FF\FF\C6E\FF\01\8AE\FF$\01\0F\B6\C0H\83\C4@]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00UH\89\E5H\83\EC H\89}\F0\89u\ECH\8B}\F0H\8B?H\89}\F8H\8B}\F0\E8m\00\00\00H\8B}\F8H\89E\E0H\89\F8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H;7\0F\95\C0$\01\0F\B6\C0]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\89}\F8H\8B}\F8H\8B\07]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00UH\89\E5H\89}\F8H\8B}\F8H\8B\07H\83\C0\08H\89\07H\8BE\F8]\C3\0F\1F@\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H\8B?H)\FEH\C1\FE\03H\89\F0]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F0H\89u\E8H\8Bu\F0H\8B6H\89u\F8H\8Bu\E8H\C1\E6\03H\03u\F8H\89u\F8H\8BE\F8]\C3\0F\1F\00UH\89\E5H\81\EC\B0\00\00\00H\89u\F8H\89}\F0H\89U\E8\F2\0F\11E\E0H\8BU\E8H\89U\D0H\8BU\D0H\83\C2\01H\C1\E2\01H\89U\D8H\8BE\D8H;E\F0\0F\8D\D9\00\00\00H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8z\FF\FF\FFH\8D}\C8H\89E\C8\E8\FD\FE\FF\FFH\8D}\F8\F2\0F\10\00H\8Bu\D8\F2\0F\11\85x\FF\FF\FF\E8T\FF\FF\FFH\8D}\C0H\89E\C0\E8\D7\FE\FF\FF\F2\0F\10\00\F2\0F\10\8Dx\FF\FF\FFf\0F.\C1\0F\86\0C\00\00\00H\8BE\D8H\83\C0\01H\89E\D8H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8\11\FF\FF\FFH\8D}\B8H\89E\B8\E8\94\FE\FF\FFH\8D}\F8\F2\0F\10\00H\8Bu\D0\F2\0F\11\85p\FF\FF\FF\E8\EB\FE\FF\FFH\8D}\B0H\89E\B0\E8n\FE\FF\FF\F2\0F\10\85p\FF\FF\FF\F2\0F\11\00H\8BE\D8H\83\E8\01H\89E\D0H\8BE\D8H\03E\D8H\89E\D8\E9\19\FF\FF\FFH\8BE\D8H;E\F0\0F\85_\00\00\00H\8D}\F8H\8BE\D8H\83\E8\01H\89\C6\E8\93\FE\FF\FFH\8D}\A8H\89E\A8\E8\16\FE\FF\FFH\8D}\F8\F2\0F\10\00H\8Bu\D0\F2\0F\11\85h\FF\FF\FF\E8m\FE\FF\FFH\8D}\A0H\89E\A0\E8\F0\FD\FF\FF\F2\0F\10\85h\FF\FF\FF\F2\0F\11\00H\8BE\D8H\83\E8\01H\89E\D0\B8\02\00\00\00\89\C1H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D81\C0\88\C1H\8BU\D0H;U\E8\88\8Dg\FF\FF\FF\0F\8E0\00\00\00H\8D}\F8H\8Bu\D8\E8\08\FE\FF\FFH\8D}\98H\89E\98\E8\8B\FD\FF\FF\F2\0F\10\00\F2\0F\10M\E0f\0F.\C8\0F\97\C1\88\8Dg\FF\FF\FF\8A\85g\FF\FF\FF\A8\01\0F\85\05\00\00\00\E9q\00\00\00H\8D}\F8H\8Bu\D8\E8\C5\FD\FF\FFH\8D}\90H\89E\90\E8H\FD\FF\FFH\8D}\F8\F2\0F\10\00H\8Bu\D0\F2\0F\11\85X\FF\FF\FF\E8\9F\FD\FF\FFH\8D}\88H\89E\88\E8\22\FD\FF\FF\B9\02\00\00\00\89\CE\F2\0F\10\85X\FF\FF\FF\F2\0F\11\00H\8BE\D8H\89E\D0H\8BE\D0H\83\E8\01H\99H\F7\FEH\89E\D8\E94\FF\FF\FFH\8D}\F8\F2\0F\10E\E0H\8Bu\D0\F2\0F\11\85P\FF\FF\FF\E8G\FD\FF\FFH\8D}\80H\89E\80\E8\CA\FC\FF\FF\F2\0F\10\85P\FF\FF\FF\F2\0F\11\00H\81\C4\B0\00\00\00]\C3\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\89U\E8H\8BE\F8H;E\F0\0F\84+\00\00\00H\8BE\F8H\89\C1H\83\C1\08H\89M\F8\F2\0F\10\00H\8BE\E8H\89\C1H\83\C1\08H\89M\E8\F2\0F\11\00\E9\C7\FF\FF\FF]\C3\0F\1FD\00\00UH\89\E5H\83\EC0\B8\02\00\00\00\89\C1H\89}\F8H\89u\F0H\8Bu\F0H\8B}\F8H)\FEH\C1\FE\03H\89u\E0H\8BE\E0H\99H\F7\F9H\83\E8\01H\89E\E8H\83}\E8\00\0F\8C9\00\00\00H\8BE\F8H\8BM\E8\F2\0F\10\04\C8\F2\0F\11E\D8H\8B}\E0H\8Bu\F8H\8BU\E8\F2\0F\10E\D8\E8R\01\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\BC\FF\FF\FFH\8BE\E0H\83\E8\01H\89E\E8H\83}\E8\01\0F\8CN\00\00\001\C0\89\C2H\8BM\F8H\8Bu\E8\F2\0F\10\04\F1\F2\0F\11E\D0H\8BM\F8\F2\0F\10\01H\8BM\F8H\8Bu\E8\F2\0F\11\04\F1H\8B}\E8H\8Bu\F8\F2\0F\10E\D0\E8\ED\00\00\00H\8BE\E8H\83\C0\FFH\89E\E8\E9\A7\FF\FF\FFH\83\C40]\C3f\0F\1FD\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E83\00\00\00\A8\01\0F\85\1B\00\00\00H\BFDk@\00\00\00\00\00\8B4%\18\91`\00\B0\00\E8\F3\BA\FF\FF\89E\ECH\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F0H\89u\E8H\8Bu\F0H\89u\E0H\8Bu\F0H\83\C6\08H\89u\F0H\8BE\F0H;E\E8\0F\84>\00\00\00H\8BE\F0H\89\C1H\83\C1\08H\89M\F0\F2\0F\10\00H\8BE\E0H\89\C1H\83\C1\08H\89M\E0\F2\0F\10\08f\0F.\C8\0F\86\09\00\00\00\C6E\FF\00\E9\09\00\00\00\E9\B4\FF\FF\FF\C6E\FF\01\8AE\FF$\01\0F\B6\C0]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\89U\E8\F2\0F\11E\E0H\8BU\E8H\89U\D0H\8BU\D0H\83\C2\01H\C1\E2\01H\89U\D8H\8BE\D8H;E\F8\0F\8Do\00\00\00H\8BE\F0H\8BM\D8H\83\E9\01\F2\0F\10\04\C8H\8BE\F0H\8BM\D8\F2\0F\10\0C\C8f\0F.\C8\0F\86\0C\00\00\00H\8BE\D8H\83\C0\01H\89E\D8H\8BE\F0H\8BM\D8H\83\E9\01\F2\0F\10\04\C8H\8BE\F0H\8BM\D0\F2\0F\11\04\C8H\8BE\D8H\83\E8\01H\89E\D0H\8BE\D8H\03E\D8H\89E\D8\E9\83\FF\FF\FFH\8BE\D8H;E\F8\0F\85*\00\00\00H\8BE\F0H\8BM\D8H\83\E9\01\F2\0F\10\04\C8H\8BE\F0H\8BM\D0\F2\0F\11\04\C8H\8BE\D8H\83\E8\01H\89E\D0\B8\02\00\00\00\89\C1H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D81\C0\88\C1H\8BU\D0H;U\E8\88M\CF\0F\8E\1C\00\00\00H\8BE\F0H\8BM\D8\F2\0F\10\04\C8\F2\0F\10M\E0f\0F.\C8\0F\97\C2\88U\CF\8AE\CF\A8\01\0F\85\05\00\00\00\E9B\00\00\00\B8\02\00\00\00\89\C1H\8BU\F0H\8Bu\D8\F2\0F\10\04\F2H\8BU\F0H\8Bu\D0\F2\0F\11\04\F2H\8BU\D8H\89U\D0H\8BU\D0H\83\EA\01H\89\D0H\99H\F7\F9H\89E\D8\E9}\FF\FF\FF\F2\0F\10E\E0H\8BE\F0H\8BM\D0\F2\0F\11\04\C8]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\83\EC`H\8DE\F0H\8DM\F8H\89}\F8H\89u\F0H\89\C7H\89\CE\E8M\E4\FF\FFH\83\F8\01\0F\8EX\01\00\00H\8D}\F8\E8\1A\E2\FF\FFH\8B\00H\89E\E8H\8BE\F8H\89E\E0H\8BE\F0H\89E\D8\E9\00\00\00\00H\8D}\D8\E85\01\00\00H\89\C7\E8\ED\E1\FF\FFH\8D}\E8H\89\C6\E8\01\E2\FF\FF\A8\01\0F\85\05\00\00\00\E9\05\00\00\00\E9\D1\FF\FF\FFH\8D}\E0H\8Du\D8\E8\22\01\00\00\A8\01\0F\85\05\00\00\00\E9\98\00\00\00\E9\00\00\00\00H\8D}\E0\E8\A7\E1\FF\FFH\8Du\E8H\89\C7\E8\BB\E1\FF\FF\A8\01\0F\85\05\00\00\00\E9\12\00\00\00H\8D}\E0\E8\85\E3\FF\FFH\89E\A8\E9\CC\FF\FF\FFH\8D}\E0H\8Du\D8\E8\CF\00\00\00\A8\01\0F\85\05\00\00\00\E9E\00\00\00H\8D}\D8\E8Y\E1\FF\FFH\8D}\E0H\8B\00H\89E\D0\E8I\E1\FF\FFH\8D}\D8H\89E\A0\E8<\E1\FF\FFH\8D}\E0H\8BM\A0H\8B\11H\89\10\E8)\E1\FF\FFH\8BM\D0H\89\08\E9\1A\FF\FF\FFH\8D}\D8\B8\01\00\00\00\89\C6H\8BM\F8H\89M\C8\E8U\E3\FF\FFH\89E\C0H\8B}\C8H\8Bu\C0\E8\A4\FE\FF\FFH\8D}\D8\BA\01\00\00\00\89\D6\E84\E3\FF\FFH\89E\B8H\8BE\F0H\89E\B0H\8B}\B8H\8Bu\B0\E8{\FE\FF\FFH\83\C4`]\C3\0F\1FD\00\00UH\89\E5H\89}\F8H\8B}\F8H\8B\07H\83\C0\F8H\89\07H\8BE\F8]\C3\0F\1F@\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H;7\0F\92\C0$\01\0F\B6\C0]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\8Bu\F0H\8B}\F8H)\FEH\C1\FE\03H\83\FE\01\0F\8E\F1\00\00\00H\8BE\F8H\8B\00H\89E\E8H\8BE\F8H\89E\E0H\8BE\F0H\89E\D8\E9\00\00\00\00H\8D}\E8H\8BE\D8H\83\C0\F8H\89E\D8H\89\C6\E8/\E0\FF\FF\A8\01\0F\85\05\00\00\00\E9\05\00\00\00\E9\D6\FF\FF\FFH\8BE\E0H;E\D8\0F\82\05\00\00\00\E9l\00\00\00\E9\00\00\00\00H\8Du\E8H\8B}\E0\E8\F8\DF\FF\FF\A8\01\0F\85\05\00\00\00\E9\11\00\00\00H\8BE\E0H\83\C0\08H\89E\E0\E9\D5\FF\FF\FFH\8BE\E0H;E\D8\0F\82\05\00\00\00\E9)\00\00\00H\8BE\D8H\8B\00H\89E\D0H\8BE\E0H\8BM\D8H\8B\00H\89\01H\8BE\E0H\8BM\D0H\89\08\E9R\FF\FF\FFH\8B}\F8H\8BE\D8H\83\C0\08H\89\C6\E8\FA\FE\FF\FFH\8BE\D8H\83\C0\08H\8Bu\F0H\89\C7\E8\E6\FE\FF\FFH\83\C40]\C3UH\89\E5H\83\EC`H\8DE\F0H\8DM\F8H\89}\F8H\89u\F0H\89\C7H\89\CE\E8\BD\EB\FF\FFH\83\F8\01\0F\8EX\01\00\00H\8D}\F8\E8j\EB\FF\FFH\8B\00H\89E\E8H\8BE\F8H\89E\E0H\8BE\F0H\89E\D8\E9\00\00\00\00H\8D}\D8\E85\01\00\00H\89\C7\E8=\EB\FF\FFH\8D}\E8H\89\C6\E8\B1\E0\FF\FF\A8\01\0F\85\05\00\00\00\E9\05\00\00\00\E9\D1\FF\FF\FFH\8D}\E0H\8Du\D8\E8\22\01\00\00\A8\01\0F\85\05\00\00\00\E9\98\00\00\00\E9\00\00\00\00H\8D}\E0\E8\F7\EA\FF\FFH\8Du\E8H\89\C7\E8k\E0\FF\FF\A8\01\0F\85\05\00\00\00\E9\12\00\00\00H\8D}\E0\E8\F5\EA\FF\FFH\89E\A8\E9\CC\FF\FF\FFH\8D}\E0H\8Du\D8\E8\CF\00\00\00\A8\01\0F\85\05\00\00\00\E9E\00\00\00H\8D}\D8\E8\A9\EA\FF\FFH\8D}\E0H\8B\00H\89E\D0\E8\99\EA\FF\FFH\8D}\D8H\89E\A0\E8\8C\EA\FF\FFH\8D}\E0H\8BM\A0H\8B\11H\89\10\E8y\EA\FF\FFH\8BM\D0H\89\08\E9\1A\FF\FF\FFH\8D}\D8\B8\01\00\00\00\89\C6H\8BM\F8H\89M\C8\E8\C5\EA\FF\FFH\89E\C0H\8B}\C8H\8Bu\C0\E8\A4\FE\FF\FFH\8D}\D8\BA\01\00\00\00\89\D6\E8\A4\EA\FF\FFH\89E\B8H\8BE\F0H\89E\B0H\8B}\B8H\8Bu\B0\E8{\FE\FF\FFH\83\C4`]\C3\0F\1FD\00\00UH\89\E5H\89}\F8H\8B}\F8H\8B\07H\83\C0\F8H\89\07H\8BE\F8]\C3\0F\1F@\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H;7\0F\92\C0$\01\0F\B6\C0]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\8Bu\F0H\8B}\F8H)\FEH\C1\FE\03H\83\FE\01\0F\8E\F1\00\00\00H\8BE\F8H\8B\00H\89E\E8H\8BE\F8H\89E\E0H\8BE\F0H\89E\D8\E9\00\00\00\00H\8D}\E8H\8BE\D8H\83\C0\F8H\89E\D8H\89\C6\E8\DF\DE\FF\FF\A8\01\0F\85\05\00\00\00\E9\05\00\00\00\E9\D6\FF\FF\FFH\8BE\E0H;E\D8\0F\82\05\00\00\00\E9l\00\00\00\E9\00\00\00\00H\8Du\E8H\8B}\E0\E8\A8\DE\FF\FF\A8\01\0F\85\05\00\00\00\E9\11\00\00\00H\8BE\E0H\83\C0\08H\89E\E0\E9\D5\FF\FF\FFH\8BE\E0H;E\D8\0F\82\05\00\00\00\E9)\00\00\00H\8BE\D8H\8B\00H\89E\D0H\8BE\E0H\8BM\D8H\8B\00H\89\01H\8BE\E0H\8BM\D0H\89\08\E9R\FF\FF\FFH\8B}\F8H\8BE\D8H\83\C0\08H\89\C6\E8\FA\FE\FF\FFH\8BE\D8H\83\C0\08H\8Bu\F0H\89\C7\E8\E6\FE\FF\FFH\83\C40]\C3UH\89\E5H\83\ECpH\8DE\F0H\8DM\F8H\89}\F8H\89u\F0H\89\C7H\89\CE\E8\1D\F3\FF\FFH\83\F8\01\0F\8Ej\01\00\00H\8D}\F8\E8\CA\F2\FF\FF\F2\0F\10\00\F2\0F\11E\E8H\8BE\F8H\89E\E0H\8BE\F0H\89E\D8\E9\00\00\00\00H\8D}\D8\F2\0F\10E\E8\F2\0F\11E\A8\E89\01\00\00H\89\C7\E8\91\F2\FF\FF\F2\0F\10\00\F2\0F\10M\A8f\0F.\C1\0F\86\05\00\00\00\E9\CD\FF\FF\FFH\8D}\E0H\8Du\D8\E8,\01\00\00\A8\01\0F\85\05\00\00\00\E9\A4\00\00\00\E9\00\00\00\00H\8D}\E0\E8Q\F2\FF\FF\F2\0F\10\00\F2\0F\10M\E8f\0F.\C8\0F\86\12\00\00\00H\8D}\E0\E8U\F2\FF\FFH\89E\A0\E9\D2\FF\FF\FFH\8D}\E0H\8Du\D8\E8\DF\00\00\00\A8\01\0F\85\05\00\00\00\E9W\00\00\00H\8D}\D8\E8\09\F2\FF\FFH\8D}\E0\F2\0F\10\00\F2\0F\11E\D0\E8\F7\F1\FF\FFH\8D}\D8\F2\0F\10\00\F2\0F\11E\98\E8\E5\F1\FF\FFH\8D}\E0\F2\0F\10E\98\F2\0F\11\00\F2\0F\10E\D0\F2\0F\11E\90\E8\C9\F1\FF\FF\F2\0F\10E\90\F2\0F\11\00\E9\0A\FF\FF\FFH\8D}\D8\B8\01\00\00\00\89\C6H\8BM\F8H\89M\C8\E8\13\F2\FF\FFH\89E\C0H\8B}\C8H\8Bu\C0\E8\92\FE\FF\FFH\8D}\D8\BA\01\00\00\00\89\D6\E8\F2\F1\FF\FFH\89E\B8H\8BE\F0H\89E\B0H\8B}\B8H\8Bu\B0\E8i\FE\FF\FFH\83\C4p]\C3\0F\1F\00UH\89\E5H\89}\F8H\8B}\F8H\8B\07H\83\C0\F8H\89\07H\8BE\F8]\C3\0F\1F@\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B6H\8B}\F0H;7\0F\92\C0$\01\0F\B6\C0]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\83\EC0H\89}\F8H\89u\F0H\8Bu\F0H\8B}\F8H)\FEH\C1\FE\03H\83\FE\01\0F\8E\F4\00\00\00H\8BE\F8\F2\0F\10\00\F2\0F\11E\E8H\8BE\F8H\89E\E0H\8BE\F0H\89E\D8\E9\00\00\00\00\F2\0F\10E\E8H\8BE\D8H\89\C1H\83\C1\F8H\89M\D8\F2\0F\10H\F8f\0F.\C8\0F\86\05\00\00\00\E9\D8\FF\FF\FFH\8BE\E0H;E\D8\0F\82\05\00\00\00\E9o\00\00\00\E9\00\00\00\00H\8BE\E0\F2\0F\10\00\F2\0F\10M\E8f\0F.\C8\0F\86\11\00\00\00H\8BE\E0H\83\C0\08H\89E\E0\E9\D8\FF\FF\FFH\8BE\E0H;E\D8\0F\82\05\00\00\00\E9/\00\00\00H\8BE\D8\F2\0F\10\00\F2\0F\11E\D0H\8BE\E0\F2\0F\10\00H\8BE\D8\F2\0F\11\00\F2\0F\10E\D0H\8BE\E0\F2\0F\11\00\E9Q\FF\FF\FFH\8B}\F8H\8BE\D8H\83\C0\08H\89\C6\E8\F7\FE\FF\FFH\8BE\D8H\83\C0\08H\8Bu\F0H\89\C7\E8\E3\FE\FF\FFH\83\C40]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC`H\8DE\E81\C9H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\89\C7\89\CE\E8\98\D8\FF\FFH\89E\E0H\8D}\E8H\8Du\F0\E8\C7\D8\FF\FF\A8\01\0F\85\05\00\00\00\E9\C7\00\00\00H\8D}\E8\E8\E1\D8\FF\FFH\8B\00H\89E\D8H\8BE\E8H\89E\D0H\8BE\D0H\89E\C8H\8D}\D0H\8Du\F8\E8\8D\D8\FF\FF1\C9\88\CA\A8\01\88U\BF\0F\85\05\00\00\00\E9 \00\00\00H\8D}\C8\E8\E0\F7\FF\FFH\89\C7\E8\98\D8\FF\FFH\8D}\D8H\89\C6\E8\AC\D8\FF\FF\88E\BF\8AE\BF\A8\01\0F\85\05\00\00\00\E92\00\00\00H\8D}\C8\E8p\D8\FF\FFH\8D}\D0H\89E\B0\E8c\D8\FF\FFH\8B}\B0H\8B\0FH\89\08H\8D}\D0\E8\90\F7\FF\FFH\89E\A8\E9}\FF\FF\FFH\8D}\D0\E8>\D8\FF\FFH\8D}\E81\F6H\8BM\D8H\89\08\E8\BC\D7\FF\FFH\89E\C0\E9\1F\FF\FF\FFH\83\C4`]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC@H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\8Bu\E8H\83\C6\08H\89u\E8H\8BE\E8H;E\F0\0F\84\96\00\00\00H\8BE\E8H\8B\00H\89E\E0H\8BE\E8H\89E\D8H\8BE\D8H\89E\D01\C0\88\C1H\8BU\D8H;U\F8\88M\CF\0F\84\1B\00\00\00H\8D}\E0H\8BE\D0H\83\C0\F8H\89E\D0H\89\C6\E8\B6\D7\FF\FF\88E\CF\8AE\CF\A8\01\0F\85\05\00\00\00\E9\1F\00\00\00H\8BE\D0H\8BM\D8H\8B\00H\89\01H\8BE\D8H\83\C0\F8H\89E\D8\E9\A1\FF\FF\FFH\8BE\D8H\8BM\E0H\89\08H\8BE\E8H\83\C0\08H\89E\E8\E9\5C\FF\FF\FFH\83\C4@]\C3f\90UH\89\E5H\83\EC`H\8DE\E81\C9H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\89\C7\89\CE\E8\F8\E2\FF\FFH\89E\E0H\8D}\E8H\8Du\F0\E8'\E3\FF\FF\A8\01\0F\85\05\00\00\00\E9\C7\00\00\00H\8D}\E8\E8A\E3\FF\FFH\8B\00H\89E\D8H\8BE\E8H\89E\D0H\8BE\D0H\89E\C8H\8D}\D0H\8Du\F8\E8\ED\E2\FF\FF1\C9\88\CA\A8\01\88U\BF\0F\85\05\00\00\00\E9 \00\00\00H\8D}\C8\E8\F0\F8\FF\FFH\89\C7\E8\F8\E2\FF\FFH\8D}\D8H\89\C6\E8l\D8\FF\FF\88E\BF\8AE\BF\A8\01\0F\85\05\00\00\00\E92\00\00\00H\8D}\C8\E8\D0\E2\FF\FFH\8D}\D0H\89E\B0\E8\C3\E2\FF\FFH\8B}\B0H\8B\0FH\89\08H\8D}\D0\E8\A0\F8\FF\FFH\89E\A8\E9}\FF\FF\FFH\8D}\D0\E8\9E\E2\FF\FFH\8D}\E81\F6H\8BM\D8H\89\08\E8\1C\E2\FF\FFH\89E\C0\E9\1F\FF\FF\FFH\83\C4`]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC@H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\8Bu\E8H\83\C6\08H\89u\E8H\8BE\E8H;E\F0\0F\84\96\00\00\00H\8BE\E8H\8B\00H\89E\E0H\8BE\E8H\89E\D8H\8BE\D8H\89E\D01\C0\88\C1H\8BU\D8H;U\F8\88M\CF\0F\84\1B\00\00\00H\8D}\E0H\8BE\D0H\83\C0\F8H\89E\D0H\89\C6\E8v\D7\FF\FF\88E\CF\8AE\CF\A8\01\0F\85\05\00\00\00\E9\1F\00\00\00H\8BE\D0H\8BM\D8H\8B\00H\89\01H\8BE\D8H\83\C0\F8H\89E\D8\E9\A1\FF\FF\FFH\8BE\D8H\8BM\E0H\89\08H\8BE\E8H\83\C0\08H\89E\E8\E9\5C\FF\FF\FFH\83\C4@]\C3f\90UH\89\E5H\83\ECpH\8DE\E81\C9H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\89\C7\89\CE\E8h\EB\FF\FFH\89E\E0H\8D}\E8H\8Du\F0\E8\97\EB\FF\FF\A8\01\0F\85\05\00\00\00\E9\E7\00\00\00H\8D}\E8\E8\B1\EB\FF\FF\F2\0F\10\00\F2\0F\11E\D8H\8BE\E8H\89E\D0H\8BE\D0H\89E\C8H\8D}\D0H\8Du\F8\E8[\EB\FF\FF1\C9\88\CA\A8\01\88U\BF\0F\85\05\00\00\00\E9.\00\00\00H\8D}\C8\F2\0F\10E\D8\F2\0F\11E\B0\E8\04\FA\FF\FFH\89\C7\E8\5C\EB\FF\FF\F2\0F\10\00\F2\0F\10M\B0f\0F.\C1\0F\97\C1\88M\BF\8AE\BF\A8\01\0F\85\05\00\00\00\E96\00\00\00H\8D}\C8\E80\EB\FF\FFH\8D}\D0\F2\0F\10\00\F2\0F\11E\A8\E8\1E\EB\FF\FF\F2\0F\10E\A8\F2\0F\11\00H\8D}\D0\E8\AC\F9\FF\FFH\89E\A0\E9k\FF\FF\FFH\8D}\D0\F2\0F\10E\D8\F2\0F\11E\98\E8\F0\EA\FF\FFH\8D}\E81\F6\F2\0F\10E\98\F2\0F\11\00\E8l\EA\FF\FFH\89E\C0\E9\FF\FE\FF\FFH\83\C4p]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\8Bu\E8H\83\C6\08H\89u\E8H\8BE\E8H;E\F0\0F\84\A4\00\00\00H\8BE\E8\F2\0F\10\00\F2\0F\11E\E0H\8BE\E8H\89E\D8H\8BE\D8H\89E\D01\C0\88\C1H\8BU\D8H;U\F8\88M\CF\0F\84#\00\00\00\F2\0F\10E\E0H\8BE\D0H\89\C1H\83\C1\F8H\89M\D0\F2\0F\10H\F8f\0F.\C8\0F\97\C2\88U\CF\8AE\CF\A8\01\0F\85\05\00\00\00\E9!\00\00\00H\8BE\D0\F2\0F\10\00H\8BE\D8\F2\0F\11\00H\8BE\D8H\83\C0\F8H\89E\D8\E9\97\FF\FF\FF\F2\0F\10E\E0H\8BE\D8\F2\0F\11\00H\8BE\E8H\83\C0\08H\89E\E8\E9N\FF\FF\FF]\C3f.\0F\1F\84\00\00\00\00\00f\90UH\89\E5H\83\EC0H\89}\F0H\89u\E8\F2\0F\11E\E0H\8D}\F0H\8Du\E8\E8\DE\D2\FF\FF\A8\01\0F\85\05\00\00\00\E96\00\00\00H\8D}\F01\F6\E8\86\D2\FF\FFH\8D}\D0H\89E\D0\E8\E9\D2\FF\FFH\8D}\E0H\89\C6\E8\CD\01\00\00\F2\0F\11E\D8H\8BE\D8H\89E\E0\E9\B0\FF\FF\FFH\8BE\E0H\89E\F8\F2\0F\10E\F8H\83\C40]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8k\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10\F2\0F\10\0DP\09\00\00\F2\0F\11E\F8\F2\0F\10E\F8\F2\0FY\0C%\90\90`\00f\0F.\C1\0F\85\0B\00\00\00\0F\8A\05\00\00\00\E9\1B\00\00\00H\BFIk@\00\00\00\00\00\8B4%\18\91`\00\B0\00\E8\B0\A8\FF\FF\89E\F4H\83\C4\10]\C3\0F\1F\80\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8\E8\0B\00\00\00H\83\C4\10]\C3\0F\1FD\00\00UH\89\E5H\89}\F8H\8B}\F8\F2\0F\10\07]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8#\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8Q\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8C\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8q\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8C\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8q\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8C\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8q\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8C\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8q\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8C\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8q\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8C\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8q\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8C\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8q\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC H\89}\F0H\89u\E8H\8B}\F0H\8Bu\E8\E8C\00\00\00H\8D}\F8H\8Du\E0\F2\0F\11E\E0\E8\81\00\00\00\F2\0F\10E\F8H\83\C4 ]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC H\8DE\F8H\8DM\E0H\89}\F0H\89u\E8H\8Bu\F0\F2\0F\10\06H\8Bu\E8\F2\0FX\06\F2\0F\11E\E0H\89\C7H\89\CE\E8x\BA\FF\FF\F2\0F\10E\F8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\89}\F8H\89u\F0H\8Bu\F8H\8B}\F0H\8B?H\89>]\C3\0F\1F@\00UH\89\E5H\83\EC0\F2\0F\11E\F0H\89}\E8H\89u\E0H\8BE\E8H;E\E0\0F\84-\00\00\00H\8D}\F0H\8BE\E8H\89\C1H\83\C1\08H\89M\E8H\89\C6\E8\12\FC\FF\FF\F2\0F\11E\D8H\8BE\D8H\89E\F0\E9\C5\FF\FF\FFH\8BE\F0H\89E\F8\F2\0F\10E\F8H\83\C40]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC0H\89}\F0H\89u\E8\F2\0F\11E\E0H\8D}\F0H\8Du\E8\E8\EE\D8\FF\FF\A8\01\0F\85\05\00\00\00\E96\00\00\00H\8D}\F01\F6\E8\96\D8\FF\FFH\8D}\D0H\89E\D0\E8\F9\D8\FF\FFH\8D}\E0H\89\C6\E8\CD\FE\FF\FF\F2\0F\11E\D8H\8BE\D8H\89E\E0\E9\B0\FF\FF\FFH\8BE\E0H\89E\F8\F2\0F\10E\F8H\83\C40]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0\F2\0F\11E\F0H\89}\E8H\89u\E0H\8BE\E8H;E\E0\0F\84-\00\00\00H\8D}\F0H\8BE\E8H\89\C1H\83\C1\08H\89M\E8H\89\C6\E8b\FE\FF\FF\F2\0F\11E\D8H\8BE\D8H\89E\F0\E9\C5\FF\FF\FFH\8BE\F0H\89E\F8\F2\0F\10E\F8H\83\C40]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC0H\89}\F8H\89u\F0\F2\0F\11E\E8H\8D}\F8H\8Du\F0\E8^\E2\FF\FF\A8\01\0F\85\05\00\00\00\E95\00\00\00H\8D}\F81\F6\F2\0F\10E\E8\F2\0F\11E\D8\E8\FC\E1\FF\FFH\8D}\E0H\89E\E0\E8_\E2\FF\FF\F2\0F\10E\D8\F2\0FX\00\F2\0F\11E\E8\E9\B1\FF\FF\FF\F2\0F\10E\E8H\83\C40]\C3\90UH\89\E5H\89}\F8H\89u\F0\F2\0F\11E\E8H\8BE\F8H;E\F0\0F\84\22\00\00\00\F2\0F\10E\E8H\8BE\F8H\89\C1H\83\C1\08H\89M\F8\F2\0FX\00\F2\0F\11E\E8\E9\D0\FF\FF\FF\F2\0F\10E\E8]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\13\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00UH\89\E5H\83\EC\10H\89}\F8H\89u\F0H\8B}\F8H\8Bu\F0\E8\B3\B6\FF\FFH\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00AWAVI\89\D7AUATL\8D%\16' \00UH\8D-\1E' \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\8F\9F\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_406734__fini = internal constant %seg_406734__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_406740__rodata = internal constant %seg_406740__rodata_type <{ [24 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\80\84.A\00\00\00\00\00@\9F@", [31 x i8] c"Could not allocate %d results\0A\00", [62 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00 \00", [43 x i8] c"number %*s time       per second   test0\0A\0A\00", [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", [34 x i8] c"\0Atest %*s description   absolute\0A\00", [18 x i8] c"number %*s time\0A\0A\00", [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", [15 x i8] c"insertion_sort ", [15 x i8] c"double pointer\00", [15 x i8] c"insertion_sort ", [21 x i8] c"double pointer_class\00", [15 x i8] c"insertion_sort ", [27 x i8] c"DoubleValueWrapper pointer\00", [15 x i8] c"insertion_sort ", [33 x i8] c"DoubleValueWrapper pointer_class\00", [15 x i8] c"insertion_sort ", [29 x i8] c"DoubleValueWrapper10 pointer\00", [15 x i8] c"insertion_sort ", [35 x i8] c"DoubleValueWrapper10 pointer_class\00", [25 x i8] c"quicksort double pointer\00", [31 x i8] c"quicksort double pointer_class\00", [37 x i8] c"quicksort DoubleValueWrapper pointer\00", [43 x i8] c"quicksort DoubleValueWrapper pointer_class\00", [39 x i8] c"quicksort DoubleValueWrapper10 pointer\00", [45 x i8] c"quicksort DoubleValueWrapper10 pointer_class\00", [25 x i8] c"heap_sort double pointer\00", [31 x i8] c"heap_sort double pointer_class\00", [37 x i8] c"heap_sort DoubleValueWrapper pointer\00", [43 x i8] c"heap_sort DoubleValueWrapper pointer_class\00", [39 x i8] c"heap_sort DoubleValueWrapper10 pointer\00", [45 x i8] c"heap_sort DoubleValueWrapper10 pointer_class\00", [21 x i8] c"sort test %i failed\0A\00" }>
@seg_406b5c__eh_frame_hdr = internal constant %seg_406b5c__eh_frame_hdr_type <{ [1556 x i8] c"\01\1B\03;\10\06\00\00\C1\00\00\00D\9B\FF\FFl\06\00\00\14\9C\FF\FF\94\06\00\00t\9C\FF\FF\B0\06\00\00\D4\9C\FF\FF\CC\06\00\004\9D\FF\FF\E8\06\00\00\94\9D\FF\FF\04\07\00\00\F4\9D\FF\FF \07\00\00\14\9E\FF\FF<\07\00\004\9E\FF\FFX\07\00\00T\9E\FF\FFt\07\00\00t\9E\FF\FF\90\07\00\00\94\9E\FF\FF\AC\07\00\00\B4\9E\FF\FF\C8\07\00\00\D4\9E\FF\FF\E4\07\00\00\F4\9E\FF\FF\00\08\00\00\14\9F\FF\FF\1C\08\00\004\9F\FF\FF8\08\00\00T\9F\FF\FFT\08\00\00t\9F\FF\FF,\06\00\00\A4\9F\FF\FFX\06\00\00d\A0\FF\FF\DC\09\00\00d\A1\FF\FF\F8\09\00\00\84\A4\FF\FF\14\0A\00\00\A4\A6\FF\FF0\0A\00\00\C4\A6\FF\FFL\0A\00\00\04\A7\FF\FFh\0A\00\00t\B0\FF\FFp\08\00\00\94\B0\FF\FF\8C\08\00\00\B4\B0\FF\FF\A8\08\00\00\D4\B0\FF\FF\C4\08\00\00\F4\B0\FF\FF\E0\08\00\00\14\B1\FF\FF\FC\08\00\004\B1\FF\FF\18\09\00\00T\B1\FF\FF4\09\00\00t\B1\FF\FFP\09\00\00\94\B1\FF\FFl\09\00\00\B4\B1\FF\FF\88\09\00\00\D4\B1\FF\FF\A4\09\00\00\F4\B1\FF\FF\C0\09\00\00\04\B2\FF\FF\84\0A\00\00$\B2\FF\FF\A0\0A\00\00T\B2\FF\FF\BC\0A\00\00\94\B2\FF\FF\D8\0A\00\00\D4\B2\FF\FF\F4\0A\00\00\14\B3\FF\FF\10\0B\00\00t\B3\FF\FF,\0B\00\00\E4\B3\FF\FFH\0B\00\00d\B4\FF\FFd\0B\00\00\F4\B4\FF\FF\80\0B\00\00t\B5\FF\FF\9C\0B\00\00\04\B6\FF\FF\B8\0B\00\00T\B6\FF\FF\D4\0B\00\00\B4\B6\FF\FF\F0\0B\00\00\14\B7\FF\FF\0C\0C\00\00\94\B7\FF\FF(\0C\00\00D\B8\FF\FFD\0C\00\00\C4\B8\FF\FF`\0C\00\00t\B9\FF\FF|\0C\00\00\F4\B9\FF\FF\98\0C\00\00\A4\BA\FF\FF\B4\0C\00\00$\BB\FF\FF\D0\0C\00\00\D4\BB\FF\FF\EC\0C\00\00T\BC\FF\FF\08\0D\00\00\04\BD\FF\FF$\0D\00\00\84\BD\FF\FF@\0D\00\004\BE\FF\FF\5C\0D\00\00\B4\BE\FF\FFx\0D\00\00d\BF\FF\FF\94\0D\00\00\E4\BF\FF\FF\B0\0D\00\00\94\C0\FF\FF\CC\0D\00\00\14\C1\FF\FF\E8\0D\00\00\C4\C1\FF\FF\04\0E\00\00D\C2\FF\FF \0E\00\00\94\C3\FF\FF<\0E\00\00\F4\C3\FF\FFX\0E\00\00\B4\C4\FF\FFt\0E\00\00\F4\C4\FF\FF\90\0E\00\00$\C5\FF\FF\AC\0E\00\00D\C5\FF\FF\C8\0E\00\00t\C5\FF\FF\E4\0E\00\00\A4\C5\FF\FF\00\0F\00\00\D4\C5\FF\FF\1C\0F\00\00\04\C6\FF\FF8\0F\00\004\C6\FF\FFT\0F\00\00d\C6\FF\FFp\0F\00\00\94\C6\FF\FF\8C\0F\00\00\C4\C6\FF\FF\A8\0F\00\00\F4\C6\FF\FF\C4\0F\00\00$\C7\FF\FF\E0\0F\00\00D\C7\FF\FF\FC\0F\00\00t\C7\FF\FF\18\10\00\00\A4\C7\FF\FF4\10\00\004\CA\FF\FFP\10\00\00\84\CA\FF\FFl\10\00\00\84\CB\FF\FF\88\10\00\00\D4\CB\FF\FF\A4\10\00\00d\CC\FF\FF\C0\10\00\00\14\CE\FF\FF\DC\10\00\00\94\CE\FF\FF\F8\10\00\00\E4\CF\FF\FF\14\11\00\00D\D0\FF\FF0\11\00\00\04\D1\FF\FFL\11\00\00D\D1\FF\FFh\11\00\00t\D1\FF\FF\84\11\00\00\94\D1\FF\FF\A0\11\00\00\B4\D1\FF\FF\BC\11\00\00\E4\D1\FF\FF\D8\11\00\00\14\D2\FF\FF\F4\11\00\00\A4\D4\FF\FF\10\12\00\00\F4\D4\FF\FF,\12\00\00\F4\D5\FF\FFH\12\00\00D\D6\FF\FFd\12\00\00\D4\D6\FF\FF\80\12\00\00\84\D8\FF\FF\9C\12\00\00\04\D9\FF\FF\B8\12\00\00D\DA\FF\FF\D4\12\00\00\A4\DA\FF\FF\F0\12\00\00d\DB\FF\FF\0C\13\00\00\A4\DB\FF\FF(\13\00\00\D4\DB\FF\FFD\13\00\00\F4\DB\FF\FF`\13\00\00\14\DC\FF\FF|\13\00\00D\DC\FF\FF\98\13\00\00t\DC\FF\FF\B4\13\00\00$\DF\FF\FF\D0\13\00\00t\DF\FF\FF\EC\13\00\00d\E0\FF\FF\08\14\00\00\B4\E0\FF\FF$\14\00\004\E1\FF\FF@\14\00\00\D4\E2\FF\FF\5C\14\00\00d\E4\FF\FFx\14\00\00\84\E4\FF\FF\94\14\00\00\B4\E4\FF\FF\B0\14\00\00\D4\E5\FF\FF\CC\14\00\00d\E7\FF\FF\E8\14\00\00\84\E7\FF\FF\04\15\00\00\B4\E7\FF\FF \15\00\00\D4\E8\FF\FF<\15\00\00t\EA\FF\FFX\15\00\00\94\EA\FF\FFt\15\00\00\C4\EA\FF\FF\90\15\00\00\F4\EB\FF\FF\AC\15\00\00\14\ED\FF\FF\C8\15\00\00\E4\ED\FF\FF\E4\15\00\00\04\EF\FF\FF\00\16\00\00\D4\EF\FF\FF\1C\16\00\00\14\F1\FF\FF8\16\00\00\F4\F1\FF\FFT\16\00\00t\F2\FF\FFp\16\00\00\94\F2\FF\FF\8C\16\00\00\F4\F2\FF\FF\A8\16\00\00\14\F3\FF\FF\C4\16\00\004\F3\FF\FF\E0\16\00\00T\F3\FF\FF\FC\16\00\00t\F3\FF\FF\18\17\00\00\94\F3\FF\FF4\17\00\00\B4\F3\FF\FFP\17\00\00\D4\F3\FF\FFl\17\00\00\F4\F3\FF\FF\88\17\00\00\14\F4\FF\FF\A4\17\00\00T\F4\FF\FF\C0\17\00\00\94\F4\FF\FF\DC\17\00\00\B4\F4\FF\FF\F8\17\00\00\F4\F4\FF\FF\14\18\00\00\14\F5\FF\FF0\18\00\00T\F5\FF\FFL\18\00\00t\F5\FF\FFh\18\00\00\B4\F5\FF\FF\84\18\00\00\D4\F5\FF\FF\A0\18\00\00\14\F6\FF\FF\BC\18\00\004\F6\FF\FF\D8\18\00\00t\F6\FF\FF\F4\18\00\00\94\F6\FF\FF\10\19\00\00\D4\F6\FF\FF,\19\00\00\F4\F6\FF\FFH\19\00\004\F7\FF\FFd\19\00\00T\F7\FF\FF\80\19\00\00\A4\F7\FF\FF\9C\19\00\00\C4\F7\FF\FF\B8\19\00\004\F8\FF\FF\D4\19\00\00\B4\F8\FF\FF\F0\19\00\00$\F9\FF\FF\0C\1A\00\00\94\F9\FF\FF(\1A\00\00\E4\F9\FF\FFD\1A\00\00\14\FA\FF\FF`\1A\00\00D\FA\FF\FF|\1A\00\00t\FA\FF\FF\98\1A\00\00\A4\FA\FF\FF\B4\1A\00\00\D4\FA\FF\FF\D0\1A\00\00\04\FB\FF\FF\EC\1A\00\004\FB\FF\FF\08\1B\00\00d\FB\FF\FF$\1B\00\00\D4\FB\FF\FFl\1B\00\00" }>
@seg_407170__eh_frame = internal constant %seg_407170__eh_frame_type <{ [5488 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00@\99\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00D\99\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\D0\94\FF\FF\D0\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00x\95\FF\FFV\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00tplh\03\00\00(\A8\FF\FF\1B\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\84\03\00\00,\A8\FF\FF\0A\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\A0\03\00\00\80\96\FF\FF\FB\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\BC\03\00\00d\97\FF\FF\18\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\D8\03\00\00h\9A\FF\FF\13\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\F4\03\00\00l\9C\FF\FF\13\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\10\04\00\00p\9C\FF\FF7\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00,\04\00\00\94\9C\FF\FFg\09\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00H\04\00\00x\A7\FF\FF\1E\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00d\04\00\00|\A7\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\80\04\00\00\90\A7\FF\FF>\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\9C\04\00\00\B4\A7\FF\FF<\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B8\04\00\00\D8\A7\FF\FF<\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\D4\04\00\00\FC\A7\FF\FF[\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\F0\04\00\00@\A8\FF\FFk\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\0C\05\00\00\94\A8\FF\FFq\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00(\05\00\00\F8\A8\FF\FF\81\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00D\05\00\00l\A9\FF\FFq\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00`\05\00\00\D0\A9\FF\FF\81\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00|\05\00\00D\AA\FF\FFE\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\98\05\00\00x\AA\FF\FF^\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B4\05\00\00\BC\AA\FF\FF^\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\D0\05\00\00\00\AB\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\EC\05\00\00d\AB\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\08\06\00\00\F8\AB\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00$\06\00\00\5C\AC\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00@\06\00\00\F0\AC\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\5C\06\00\00T\AD\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00x\06\00\00\E8\AD\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\94\06\00\00L\AE\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B0\06\00\00\E0\AE\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\CC\06\00\00D\AF\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E8\06\00\00\D8\AF\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\04\07\00\00<\B0\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00 \07\00\00\D0\B0\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00<\07\00\004\B1\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00X\07\00\00\C8\B1\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\07\00\00,\B2\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\07\00\00\C0\B2\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\07\00\00$\B3\FF\FF\AF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\07\00\00\B8\B3\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\07\00\00\1C\B4\FF\FFH\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\08\00\00P\B5\FF\FFV\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\08\00\00\94\B5\FF\FF\B3\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\08\00\008\B6\FF\FF4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\08\00\00\5C\B6\FF\FF$\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00p\08\00\00p\B6\FF\FF\11\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\08\00\00tl\09\00\00\14\B7\FF\FF(\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\88\09\00\00(\B7\FF\FF*\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\A4\09\00\00<\B7\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C0\09\00\00@\B7\FF\FF&\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\DC\09\00\00T\B7\FF\FF-\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\F8\09\00\00h\B7\FF\FF\8A\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\14\0A\00\00\DC\B9\FF\FFI\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\000\0A\00\00\10\BA\FF\FF\F4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00L\0A\00\00\F4\BA\FF\FFF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00h\0A\00\00(\BB\FF\FF\88\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\84\0A\00\00\9C\BB\FF\FF\A8\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\A0\0A\00\000\BD\FF\FFw\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\BC\0A\00\00\94\BD\FF\FFH\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\D8\0A\00\00\C8\BE\FF\FFV\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\F4\0A\00\00\0C\BF\FF\FF\B3\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\10\0B\00\00\B0\BF\FF\FF4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00,\0B\00\00\D4\BF\FF\FF$\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00H\0B\00\00\E8\BF\FF\FF\11\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00d\0B\00\00\EC\BF\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\80\0B\00\00\F0\BF\FF\FF&\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\9C\0B\00\00\04\C0\FF\FF-\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B8\0B\00\00\18\C0\FF\FF\8A\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\D4\0B\00\00\8C\C2\FF\FFI\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\F0\0B\00\00\C0\C2\FF\FF\F4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\0C\0C\00\00\A4\C3\FF\FFF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00(\0C\00\00\D8\C3\FF\FF\88\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00D\0C\00\00L\C4\FF\FF\A8\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00`\0C\00\00\E0\C5\FF\FF{\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00|\0C\00\00D\C6\FF\FF@\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\98\0C\00\00h\C7\FF\FFV\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B4\0C\00\00\AC\C7\FF\FF\B2\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\D0\0C\00\00P\C8\FF\FF4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\EC\0C\00\00t\C8\FF\FF$\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\08\0D\00\00\88\C8\FF\FF\11\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00$\0D\00\00\8C\C8\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00@\0D\00\00\90\C8\FF\FF&\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\5C\0D\00\00\A4\C8\FF\FF-\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00x\0D\00\00\B8\C8\FF\FF\AB\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\94\0D\00\00L\CB\FF\FFK\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B0\0D\00\00\80\CB\FF\FF\EA\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\CC\0D\00\00T\CC\FF\FFF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E8\0D\00\00\88\CC\FF\FFz\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\04\0E\00\00\EC\CC\FF\FF\94\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00 \0E\00\00p\CE\FF\FF\8B\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00<\0E\00\00\E4\CF\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00X\0E\00\00\E8\CF\FF\FF$\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\0E\00\00\FC\CF\FF\FF \01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\0E\00\00\00\D1\FF\FF\8B\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\0E\00\00t\D2\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\0E\00\00x\D2\FF\FF$\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\0E\00\00\8C\D2\FF\FF \01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\0F\00\00\90\D3\FF\FF\9D\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\0F\00\00\14\D5\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\0F\00\00\18\D5\FF\FF$\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\0F\00\00,\D5\FF\FF#\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00p\0F\00\00@\D6\FF\FF\13\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\0F\00\00D\D7\FF\FF\CE\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\A8\0F\00\00\F8\D7\FF\FF\13\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C4\0F\00\00\FC\D8\FF\FF\CE\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E0\0F\00\00\B0\D9\FF\FF3\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\FC\0F\00\00\D4\DA\FF\FF\D4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\18\10\00\00\98\DB\FF\FFx\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\004\10\00\00\FC\DB\FF\FF\1B\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00P\10\00\00\00\DC\FF\FFY\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00l`\DC\FF\FF\1B\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00L\11\00\00d\DC\FF\FF\12\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00h\11\00\00hd\12\00\00,\DD\FF\FF:\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\80\12\00\00P\DD\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\9C\12\00\00T\DD\FF\FF:\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B8\12\00\00x\DD\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\D4\12\00\00|\DD\FF\FF:\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\F0\12\00\00\A0\DD\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\0C\13\00\00\A4\DD\FF\FF:\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00(\13\00\00\C8\DD\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00D\13\00\00\CC\DD\FF\FFC\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00`\13\00\00\00\DE\FF\FF\1C\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00|\13\00\00\04\DE\FF\FFc\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\98\13\00\00X\DE\FF\FFx\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B4\13\00\00\BC\DE\FF\FFc\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\D0\13\00\00\10\DF\FF\FFo\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\EC\13\00\00d\DF\FF\FFH\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\08\14\00\00\98\DF\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00$\14\00\00\AC\DF\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00@\14\00\00\C0\DF\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\5C\14\00\00\D4\DF\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00x\14\00\00\E8\DF\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\94\14\00\00\FC\DF\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\B0\14\00\00\10\E0\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\CC\14\00\00$\E0\FF\FF#\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00\E8\14\00\008\E0\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\000\15\00\00`\E0\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_608de8__init_array = internal global %seg_608de8__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400bb0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp to i64), i64 ptrtoint (void ()* @callback_sub_400b80___do_global_dtors_aux to i64) }>
@seg_608ff0__got = internal global %seg_608ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_609000__got_plt = internal global %seg_609000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @exp to i64), i64 ptrtoint (i64 (i64)* @atof to i64), i64 ptrtoint (i64 ()* @clock to i64), i64 ptrtoint (i64 (i64)* @strlen to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64)* @log to i64), i64 ptrtoint (i64 (i64)* @srand to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), i64 ptrtoint (i64 (i64, i64)* @realloc to i64), i64 ptrtoint (i64 (i64)* @atoi to i64), i64 ptrtoint (i64 (i64)* @exit to i64), i64 ptrtoint (i64 ()* @rand to i64) }>
@seg_609078__data = internal global %seg_609078__data_type zeroinitializer
@iterations = global %iterations_type <{ [8 x i8] c"@\0D\03\00\00\00\00\00" }>
@init_value = global %init_value_type <{ [8 x i8] c"\00\00\00\00\00\00\08@" }>
@dpb = global %dpb_type <{ i64 ptrtoint (%data_type* @data to i64) }>
@dpe = global %dpe_type <{ i64 ptrtoint (%VData_type* @VData to i64) }>
@dMpb = global %dMpb_type <{ i64 ptrtoint (%dataMaster_type* @dataMaster to i64) }>
@dMpe = global %dMpe_type <{ i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64) }>
@DVpb = global %DVpb_type <{ i64 ptrtoint (%VData_type* @VData to i64) }>
@DVpe = global %DVpe_type <{ i64 ptrtoint (%V10Data_type* @V10Data to i64) }>
@DVMpb = global %DVMpb_type <{ i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64) }>
@DVMpe = global %DVMpe_type <{ i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64) }>
@DV10pb = global %DV10pb_type <{ i64 ptrtoint (%V10Data_type* @V10Data to i64) }>
@DV10pe = global %DV10pe_type <{ i64 ptrtoint (%dataMaster_type* @dataMaster to i64) }>
@DV10Mpb = global %DV10Mpb_type <{ i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64) }>
@DV10Mpe = global %DV10Mpe_type <{ i64 ptrtoint (%dPb_type* @dPb to i64) }>
@seg_609100__bss = internal global %seg_609100__bss_type zeroinitializer
@results = global %results_type zeroinitializer
@current_test = global %current_test_type zeroinitializer
@allocated_results = global %allocated_results_type zeroinitializer
@start_time = global %start_time_type zeroinitializer
@end_time = global %end_time_type zeroinitializer
@data = global %data_type zeroinitializer
@VData = global %VData_type zeroinitializer
@V10Data = global %V10Data_type zeroinitializer
@dataMaster = global %dataMaster_type zeroinitializer
@VDataMaster = global %VDataMaster_type zeroinitializer
@V10DataMaster = global %V10DataMaster_type zeroinitializer
@dPb = global %dPb_type zeroinitializer
@dPe = global %dPe_type zeroinitializer
@dMPb = global %dMPb_type zeroinitializer
@dMPe = global %dMPe_type zeroinitializer
@DVPb = global %DVPb_type zeroinitializer
@DVPe = global %DVPe_type zeroinitializer
@DVMPb = global %DVMPb_type zeroinitializer
@DVMPe = global %DVMPe_type zeroinitializer
@DV10Pb = global %DV10Pb_type zeroinitializer
@DV10Pe = global %DV10Pe_type zeroinitializer
@DV10MPb = global %DV10MPb_type zeroinitializer
@DV10MPe = global %DV10MPe_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400bb0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400b80___do_global_dtors_aux_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_406730___libc_csu_fini_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4066c0___libc_csu_init_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppIdE14PointerWrapperIT_ERS2_i_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplIdE12ValueWrapperIT_ERKS2_S4__wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIPddEEvT_S2__wrapper
@21 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__wrapper
@22 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__wrapper
@23 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@24 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__wrapper
@25 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__wrapper
@26 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__wrapper
@27 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_wrapper
@28 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__wrapper
@29 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@30 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__wrapper
@31 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@32 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__wrapper
@33 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__wrapper
@34 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__wrapper
@35 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@36 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@37 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__wrapper
@38 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_wrapper
@39 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIdEC2IdEERKT__wrapper
@40 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@41 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_wrapper
@42 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdS1_EEvT_S2_T0__wrapper
@43 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5__wrapper
@44 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_wrapper
@45 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIdEC2Ev_wrapper
@46 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_wrapper
@47 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__wrapper
@48 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_wrapper
@49 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@50 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@51 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@52 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3__wrapper
@53 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2Ev_wrapper
@54 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_wrapper
@55 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__wrapper
@56 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__wrapper
@57 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_wrapper
@58 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_wrapper
@59 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z9check_sumd_wrapper
@60 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@61 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__wrapper
@62 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__wrapper
@63 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__wrapper
@64 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper
@65 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@66 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper
@67 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__wrapper
@68 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@69 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@70 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__wrapper
@71 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@72 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_wrapper
@73 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__wrapper
@74 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__wrapper
@75 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__wrapper
@76 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@77 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_wrapper
@78 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@79 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIPddEEvT_S2_T0__wrapper
@80 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@81 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper
@82 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv_wrapper
@83 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppIdER14PointerWrapperIT_ES3__wrapper
@84 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIPddEET0_T_S3_S2__wrapper
@85 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIPdEEbT_S2__wrapper
@86 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__wrapper
@87 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__wrapper
@88 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__wrapper
@89 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@90 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13record_resultdPKc_wrapper
@91 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_wrapper
@92 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__wrapper
@93 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__wrapper
@94 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@95 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2IdEERKT__wrapper
@96 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper
@97 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIPdEvT_S1__wrapper
@98 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIPddEEvT_S2__wrapper
@99 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__wrapper
@100 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_wrapper
@101 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z17summarize_simplefP8_IO_FILEPKc_wrapper
@102 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__wrapper
@103 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__wrapper
@104 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@105 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_wrapper
@106 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@107 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__wrapper
@108 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT__wrapper
@109 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@110 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__wrapper
@111 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_wrapper
@112 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@113 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__wrapper
@114 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneIdEbRK14PointerWrapperIT_ES4__wrapper
@115 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__wrapper
@116 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z5timerv_wrapper
@117 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIPddEEvlT_lT0__wrapper
@118 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__wrapper
@119 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@120 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__wrapper
@121 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_wrapper
@122 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@123 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark11fill_randomIPddEEvT_S2__wrapper
@124 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmIdER14PointerWrapperIT_ES3__wrapper
@125 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper
@126 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_wrapper
@127 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__wrapper
@128 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper
@129 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_wrapper
@130 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__wrapper
@131 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__wrapper
@132 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_wrapper
@133 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperIdEEvT_S2__wrapper
@134 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__wrapper
@135 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltIdEbRK14PointerWrapperIT_ES4__wrapper
@136 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__wrapper
@137 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z11start_timerv_wrapper
@138 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIPddEvT_S1_T0_PKc_wrapper
@139 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__wrapper
@140 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__wrapper
@141 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__wrapper
@142 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperIdEdeEv_wrapper
@143 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__wrapper
@144 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@145 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__wrapper
@146 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__wrapper
@147 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@148 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperIdEC2EPd_wrapper
@149 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__wrapper
@150 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__wrapper
@151 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIPddEEvT_S2__wrapper
@152 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_wrapper
@153 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z9summarizePKciiii_wrapper
@154 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2Ev_wrapper
@155 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__wrapper
@156 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__wrapper
@157 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__wrapper
@158 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__wrapper
@159 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@160 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__wrapper
@161 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper
@162 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIdEcvT_IdEEv_wrapper
@163 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper
@164 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@165 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_wrapper
@166 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__wrapper
@167 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__wrapper
@168 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__wrapper
@169 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_wrapper
@170 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__wrapper
@171 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_wrapper
@172 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__wrapper
@173 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__wrapper
@174 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiIdElR14PointerWrapperIT_ES3__wrapper
@175 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__wrapper
@176 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltIdEbRK12ValueWrapperIT_ES4__wrapper
@177 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplIdE14PointerWrapperIT_ERS2_l_wrapper
@178 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__wrapper
@179 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atoi(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @log(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @rand() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exp(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atof(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @realloc(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strlen(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @srand(i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4032d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 16
  %33 = load i64, i64* %RDI
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 24
  %39 = load i64, i64* %RSI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 16
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RSI, align 8, !tbaa !2428
  %49 = load i64, i64* %RSI
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %RSI
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 24
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %RSI, align 8, !tbaa !2428
  %66 = load i64, i64* %RSI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = shl i64 %66, 2
  %70 = icmp slt i64 %69, 0
  %71 = shl i64 %69, 1
  store i64 %71, i64* %RSI, align 8, !tbaa !2428
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %73 = zext i1 %70 to i8
  store i8 %73, i8* %72, align 1, !tbaa !2432
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %75 = trunc i64 %71 to i32
  %76 = and i32 %75, 254
  %77 = call i32 @llvm.ctpop.i32(i32 %76) #16
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  store i8 %80, i8* %74, align 1, !tbaa !2432
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %81, align 1, !tbaa !2432
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %83 = icmp eq i64 %71, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %82, align 1, !tbaa !2432
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %86 = lshr i64 %71, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %85, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %88, align 1, !tbaa !2432
  %89 = load i64, i64* %RSI
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94
  %96 = add i64 %95, %89
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %89
  %98 = icmp ult i64 %96, %95
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 %95, %89
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %89, 63
  %122 = lshr i64 %95, 63
  %123 = xor i64 %118, %121
  %124 = xor i64 %118, %122
  %125 = add nuw nsw i64 %123, %124
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %127, i8* %128, align 1, !tbaa !2451
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 8
  %131 = load i64, i64* %RSI
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 8
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 1
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %144 = load i64, i64* %143, align 8, !tbaa !2428
  %145 = add i64 %144, 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RBP, align 8, !tbaa !2428
  store i64 %145, i64* %143, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 1
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %152 = load i64, i64* %151, align 8, !tbaa !2428
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %150, align 8, !tbaa !2428
  %155 = add i64 %152, 8
  store i64 %155, i64* %151, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403130__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403130:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_403160__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a30___cxx_global_var_init_21(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%DVMPe_type* @DVMPe to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4522
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_400bc0__Z13record_resultdPKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400bc0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ESI = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %38 to %"class.std::bitset"*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %40 to %union.vec128_t*
  %41 = load i64, i64* %RBP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = load i64, i64* %RSP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  store i64 %48, i64* %RBP, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = sub i64 %51, 32
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  %55 = icmp ult i64 %51, 32
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %56, i8* %57, align 1, !tbaa !2433
  %58 = trunc i64 %54 to i32
  %59 = and i32 %58, 255
  %60 = call i32 @llvm.ctpop.i32(i32 %59) #16
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %63, i8* %64, align 1, !tbaa !2447
  %65 = xor i64 32, %51
  %66 = xor i64 %65, %54
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %69, i8* %70, align 1, !tbaa !2448
  %71 = icmp eq i64 %54, 0
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %72, i8* %73, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = trunc i64 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %75, i8* %76, align 1, !tbaa !2450
  %77 = lshr i64 %51, 63
  %78 = xor i64 %74, %77
  %79 = add nuw nsw i64 %78, %77
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %81, i8* %82, align 1, !tbaa !2451
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 8
  %85 = bitcast %union.vec128_t* %XMM0 to i8*
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  store i64 %87, i64* %PC
  %88 = bitcast i8* %85 to double*
  %89 = load double, double* %88, align 1
  %90 = inttoptr i64 %84 to double*
  store double %89, double* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %RDI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 9
  store i64 %98, i64* %PC
  %99 = load i64, i64* bitcast (%results_type* @results to i64*)
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %100, align 1, !tbaa !2433
  %101 = trunc i64 %99 to i32
  %102 = and i32 %101, 255
  %103 = call i32 @llvm.ctpop.i32(i32 %102) #16
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %106, i8* %107, align 1, !tbaa !2447
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %108, align 1, !tbaa !2448
  %109 = icmp eq i64 %99, 0
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %110, i8* %111, align 1, !tbaa !2449
  %112 = lshr i64 %99, 63
  %113 = trunc i64 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %113, i8* %114, align 1, !tbaa !2450
  %115 = lshr i64 %99, 63
  %116 = xor i64 %112, %115
  %117 = add nuw nsw i64 %116, %115
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %119, i8* %120, align 1, !tbaa !2451
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 26
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 6
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 6
  store i64 %126, i64* %PC
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %128 = load i8, i8* %127, align 1, !tbaa !2449
  store i8 %128, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = icmp ne i8 %128, 0
  %131 = select i1 %130, i64 %122, i64 %124
  store i64 %131, i64* %129, align 8, !tbaa !2428
  %132 = load i8, i8* %BRANCH_TAKEN
  %133 = icmp eq i8 %132, 1
  br i1 %133, label %block_400bf4, label %block_400be0

block_400bf4:                                     ; preds = %block_400be0, %block_400bc0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400bc0 ], [ %2, %block_400be0 ]
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 7
  store i64 %135, i64* %PC
  %136 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*)
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = load i64, i64* %RAX
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = trunc i64 %138 to i32
  %142 = add i32 10, %141
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = icmp ult i32 %142, %141
  %145 = icmp ult i32 %142, 10
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = and i32 %142, 255
  %150 = call i32 @llvm.ctpop.i32(i32 %149) #16
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %153, i8* %154, align 1, !tbaa !2447
  %155 = xor i64 10, %138
  %156 = trunc i64 %155 to i32
  %157 = xor i32 %156, %142
  %158 = lshr i32 %157, 4
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i32 %142, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i32 %142, 31
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i32 %141, 31
  %169 = xor i32 %165, %168
  %170 = add nuw nsw i32 %169, %165
  %171 = icmp eq i32 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i32, i32* %EAX
  %175 = zext i32 %174 to i64
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 7
  store i64 %177, i64* %PC
  store i32 %174, i32* bitcast (%allocated_results_type* @allocated_results to i32*)
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 8
  store i64 %179, i64* %PC
  %180 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %180, i64* %RCX, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 8
  store i64 %182, i64* %PC
  %183 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*)
  %184 = sext i32 %183 to i64
  store i64 %184, i64* %RDX, align 8, !tbaa !2428
  %185 = load i64, i64* %RDX
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 4
  store i64 %187, i64* %PC
  %188 = shl i64 %185, 3
  %189 = icmp slt i64 %188, 0
  %190 = shl i64 %188, 1
  store i64 %190, i64* %RDX, align 8, !tbaa !2428
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %192 = zext i1 %189 to i8
  store i8 %192, i8* %191, align 1, !tbaa !2432
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %194 = trunc i64 %190 to i32
  %195 = and i32 %194, 254
  %196 = call i32 @llvm.ctpop.i32(i32 %195) #16
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  store i8 %199, i8* %193, align 1, !tbaa !2432
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %200, align 1, !tbaa !2432
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %202 = icmp eq i64 %190, 0
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %201, align 1, !tbaa !2432
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %205 = lshr i64 %190, 63
  %206 = trunc i64 %205 to i8
  store i8 %206, i8* %204, align 1, !tbaa !2432
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %207, align 1, !tbaa !2432
  %208 = load i64, i64* %RCX
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 3
  store i64 %210, i64* %PC
  store i64 %208, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RDX
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 3
  store i64 %213, i64* %PC
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %214 = load i64, i64* %PC
  %215 = sub i64 %214, 1263
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 5
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !2428
  %222 = add i64 %221, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 %217, i64* %223
  store i64 %222, i64* %220, align 8, !tbaa !2428
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %215, i64* %224, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = call %struct.Memory* @ext_6208d8_realloc(%struct.State* %0, i64 %225, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RAX
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 8
  store i64 %229, i64* %PC
  store i64 %227, i64* bitcast (%results_type* @results to i64*)
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 9
  store i64 %231, i64* %PC
  %232 = load i64, i64* bitcast (%results_type* @results to i64*)
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %233, align 1, !tbaa !2433
  %234 = trunc i64 %232 to i32
  %235 = and i32 %234, 255
  %236 = call i32 @llvm.ctpop.i32(i32 %235) #16
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %239, i8* %240, align 1, !tbaa !2447
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %241, align 1, !tbaa !2448
  %242 = icmp eq i64 %232, 0
  %243 = zext i1 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %243, i8* %244, align 1, !tbaa !2449
  %245 = lshr i64 %232, 63
  %246 = trunc i64 %245 to i8
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %246, i8* %247, align 1, !tbaa !2450
  %248 = lshr i64 %232, 63
  %249 = xor i64 %245, %248
  %250 = add nuw nsw i64 %249, %248
  %251 = icmp eq i64 %250, 2
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %252, i8* %253, align 1, !tbaa !2451
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 43
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 6
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 6
  store i64 %259, i64* %PC
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %261 = load i8, i8* %260, align 1, !tbaa !2449
  %262 = icmp eq i8 %261, 0
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = select i1 %262, i64 %255, i64 %257
  store i64 %265, i64* %264, align 8, !tbaa !2428
  %266 = load i8, i8* %BRANCH_TAKEN
  %267 = icmp eq i8 %266, 1
  %268 = load i64, i64* %PC
  br i1 %267, label %block_400c60, label %block_400c3b

block_400c60:                                     ; preds = %block_400bf4
  %269 = add i64 %268, 5
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 5
  store i64 %271, i64* %PC
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %269, i64* %272, align 8, !tbaa !2428
  br label %block_400c65

block_400c65:                                     ; preds = %block_400be0, %block_400c60
  %MEMORY.1 = phi %struct.Memory* [ %226, %block_400c60 ], [ %2, %block_400be0 ]
  %273 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 8
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = inttoptr i64 %275 to double*
  %279 = load double, double* %278
  %280 = bitcast i8* %273 to double*
  store double %279, double* %280, align 1, !tbaa !2452
  %281 = getelementptr inbounds i8, i8* %273, i64 8
  %282 = bitcast i8* %281 to double*
  store double 0.000000e+00, double* %282, align 1, !tbaa !2452
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 8
  store i64 %284, i64* %PC
  %285 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 8
  store i64 %287, i64* %PC
  %288 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %289 = sext i32 %288 to i64
  store i64 %289, i64* %RCX, align 8, !tbaa !2428
  %290 = load i64, i64* %RCX
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 4
  store i64 %292, i64* %PC
  %293 = shl i64 %290, 3
  %294 = icmp slt i64 %293, 0
  %295 = shl i64 %293, 1
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %297 = zext i1 %294 to i8
  store i8 %297, i8* %296, align 1, !tbaa !2432
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %299 = trunc i64 %295 to i32
  %300 = and i32 %299, 254
  %301 = call i32 @llvm.ctpop.i32(i32 %300) #16
  %302 = trunc i32 %301 to i8
  %303 = and i8 %302, 1
  %304 = xor i8 %303, 1
  store i8 %304, i8* %298, align 1, !tbaa !2432
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %305, align 1, !tbaa !2432
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %307 = icmp eq i64 %295, 0
  %308 = zext i1 %307 to i8
  store i8 %308, i8* %306, align 1, !tbaa !2432
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %310 = lshr i64 %295, 63
  %311 = trunc i64 %310 to i8
  store i8 %311, i8* %309, align 1, !tbaa !2432
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %312, align 1, !tbaa !2432
  %313 = load i64, i64* %RAX
  %314 = load i64, i64* %RCX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 3
  store i64 %316, i64* %PC
  %317 = add i64 %314, %313
  store i64 %317, i64* %RAX, align 8, !tbaa !2428
  %318 = icmp ult i64 %317, %313
  %319 = icmp ult i64 %317, %314
  %320 = or i1 %318, %319
  %321 = zext i1 %320 to i8
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %321, i8* %322, align 1, !tbaa !2433
  %323 = trunc i64 %317 to i32
  %324 = and i32 %323, 255
  %325 = call i32 @llvm.ctpop.i32(i32 %324) #16
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = xor i8 %327, 1
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %328, i8* %329, align 1, !tbaa !2447
  %330 = xor i64 %314, %313
  %331 = xor i64 %330, %317
  %332 = lshr i64 %331, 4
  %333 = trunc i64 %332 to i8
  %334 = and i8 %333, 1
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %334, i8* %335, align 1, !tbaa !2448
  %336 = icmp eq i64 %317, 0
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %337, i8* %338, align 1, !tbaa !2449
  %339 = lshr i64 %317, 63
  %340 = trunc i64 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %340, i8* %341, align 1, !tbaa !2450
  %342 = lshr i64 %313, 63
  %343 = lshr i64 %314, 63
  %344 = xor i64 %339, %342
  %345 = xor i64 %339, %343
  %346 = add nuw nsw i64 %344, %345
  %347 = icmp eq i64 %346, 2
  %348 = zext i1 %347 to i8
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %348, i8* %349, align 1, !tbaa !2451
  %350 = load i64, i64* %RAX
  %351 = bitcast %union.vec128_t* %XMM0 to i8*
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 4
  store i64 %353, i64* %PC
  %354 = bitcast i8* %351 to double*
  %355 = load double, double* %354, align 1
  %356 = inttoptr i64 %350 to double*
  store double %355, double* %356
  %357 = load i64, i64* %RBP
  %358 = sub i64 %357, 16
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %358 to i64*
  %362 = load i64, i64* %361
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 8
  store i64 %364, i64* %PC
  %365 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %365, i64* %RCX, align 8, !tbaa !2428
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 8
  store i64 %367, i64* %PC
  %368 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %369 = sext i32 %368 to i64
  store i64 %369, i64* %RDX, align 8, !tbaa !2428
  %370 = load i64, i64* %RDX
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 4
  store i64 %372, i64* %PC
  %373 = shl i64 %370, 3
  %374 = icmp slt i64 %373, 0
  %375 = shl i64 %373, 1
  store i64 %375, i64* %RDX, align 8, !tbaa !2428
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %377 = zext i1 %374 to i8
  store i8 %377, i8* %376, align 1, !tbaa !2432
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %379 = trunc i64 %375 to i32
  %380 = and i32 %379, 254
  %381 = call i32 @llvm.ctpop.i32(i32 %380) #16
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  store i8 %384, i8* %378, align 1, !tbaa !2432
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %385, align 1, !tbaa !2432
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %387 = icmp eq i64 %375, 0
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %386, align 1, !tbaa !2432
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %390 = lshr i64 %375, 63
  %391 = trunc i64 %390 to i8
  store i8 %391, i8* %389, align 1, !tbaa !2432
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %392, align 1, !tbaa !2432
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %RDX
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = add i64 %394, %393
  store i64 %397, i64* %RCX, align 8, !tbaa !2428
  %398 = icmp ult i64 %397, %393
  %399 = icmp ult i64 %397, %394
  %400 = or i1 %398, %399
  %401 = zext i1 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %401, i8* %402, align 1, !tbaa !2433
  %403 = trunc i64 %397 to i32
  %404 = and i32 %403, 255
  %405 = call i32 @llvm.ctpop.i32(i32 %404) #16
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = xor i64 %394, %393
  %411 = xor i64 %410, %397
  %412 = lshr i64 %411, 4
  %413 = trunc i64 %412 to i8
  %414 = and i8 %413, 1
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = icmp eq i64 %397, 0
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %417, i8* %418, align 1, !tbaa !2449
  %419 = lshr i64 %397, 63
  %420 = trunc i64 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = lshr i64 %393, 63
  %423 = lshr i64 %394, 63
  %424 = xor i64 %419, %422
  %425 = xor i64 %419, %423
  %426 = add nuw nsw i64 %424, %425
  %427 = icmp eq i64 %426, 2
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %428, i8* %429, align 1, !tbaa !2451
  %430 = load i64, i64* %RCX
  %431 = add i64 %430, 8
  %432 = load i64, i64* %RAX
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 4
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %431 to i64*
  store i64 %432, i64* %435
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 7
  store i64 %437, i64* %PC
  %438 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %RSI, align 8, !tbaa !2428
  %440 = load i64, i64* %RSI
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 3
  store i64 %442, i64* %PC
  %443 = trunc i64 %440 to i32
  %444 = add i32 1, %443
  %445 = zext i32 %444 to i64
  store i64 %445, i64* %RSI, align 8, !tbaa !2428
  %446 = icmp ult i32 %444, %443
  %447 = icmp ult i32 %444, 1
  %448 = or i1 %446, %447
  %449 = zext i1 %448 to i8
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %449, i8* %450, align 1, !tbaa !2433
  %451 = and i32 %444, 255
  %452 = call i32 @llvm.ctpop.i32(i32 %451) #16
  %453 = trunc i32 %452 to i8
  %454 = and i8 %453, 1
  %455 = xor i8 %454, 1
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %455, i8* %456, align 1, !tbaa !2447
  %457 = xor i64 1, %440
  %458 = trunc i64 %457 to i32
  %459 = xor i32 %458, %444
  %460 = lshr i32 %459, 4
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %462, i8* %463, align 1, !tbaa !2448
  %464 = icmp eq i32 %444, 0
  %465 = zext i1 %464 to i8
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %465, i8* %466, align 1, !tbaa !2449
  %467 = lshr i32 %444, 31
  %468 = trunc i32 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %468, i8* %469, align 1, !tbaa !2450
  %470 = lshr i32 %443, 31
  %471 = xor i32 %467, %470
  %472 = add nuw nsw i32 %471, %467
  %473 = icmp eq i32 %472, 2
  %474 = zext i1 %473 to i8
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %474, i8* %475, align 1, !tbaa !2451
  %476 = load i32, i32* %ESI
  %477 = zext i32 %476 to i64
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 7
  store i64 %479, i64* %PC
  store i32 %476, i32* bitcast (%current_test_type* @current_test to i32*)
  %480 = load i64, i64* %RSP
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 4
  store i64 %482, i64* %PC
  %483 = add i64 32, %480
  store i64 %483, i64* %RSP, align 8, !tbaa !2428
  %484 = icmp ult i64 %483, %480
  %485 = icmp ult i64 %483, 32
  %486 = or i1 %484, %485
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %487, i8* %488, align 1, !tbaa !2433
  %489 = trunc i64 %483 to i32
  %490 = and i32 %489, 255
  %491 = call i32 @llvm.ctpop.i32(i32 %490) #16
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = xor i8 %493, 1
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %494, i8* %495, align 1, !tbaa !2447
  %496 = xor i64 32, %480
  %497 = xor i64 %496, %483
  %498 = lshr i64 %497, 4
  %499 = trunc i64 %498 to i8
  %500 = and i8 %499, 1
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %500, i8* %501, align 1, !tbaa !2448
  %502 = icmp eq i64 %483, 0
  %503 = zext i1 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %503, i8* %504, align 1, !tbaa !2449
  %505 = lshr i64 %483, 63
  %506 = trunc i64 %505 to i8
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %506, i8* %507, align 1, !tbaa !2450
  %508 = lshr i64 %480, 63
  %509 = xor i64 %505, %508
  %510 = add nuw nsw i64 %509, %505
  %511 = icmp eq i64 %510, 2
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %512, i8* %513, align 1, !tbaa !2451
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 1
  store i64 %515, i64* %PC
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %517 = load i64, i64* %516, align 8, !tbaa !2428
  %518 = add i64 %517, 8
  %519 = inttoptr i64 %517 to i64*
  %520 = load i64, i64* %519
  store i64 %520, i64* %RBP, align 8, !tbaa !2428
  store i64 %518, i64* %516, align 8, !tbaa !2428
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 1
  store i64 %522, i64* %PC
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %525 = load i64, i64* %524, align 8, !tbaa !2428
  %526 = inttoptr i64 %525 to i64*
  %527 = load i64, i64* %526
  store i64 %527, i64* %523, align 8, !tbaa !2428
  %528 = add i64 %525, 8
  store i64 %528, i64* %524, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400c3b:                                     ; preds = %block_400bf4
  %529 = add i64 %268, 10
  store i64 %529, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 24), i64* %RDI, align 8, !tbaa !2428
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 7
  store i64 %531, i64* %PC
  %532 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*)
  %533 = zext i32 %532 to i64
  store i64 %533, i64* %RSI, align 8, !tbaa !2428
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 2
  store i64 %535, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %536 = load i64, i64* %PC
  %537 = sub i64 %536, 1374
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 5
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 5
  store i64 %541, i64* %PC
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %543 = load i64, i64* %542, align 8, !tbaa !2428
  %544 = add i64 %543, -8
  %545 = inttoptr i64 %544 to i64*
  store i64 %539, i64* %545
  store i64 %544, i64* %542, align 8, !tbaa !2428
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %537, i64* %546, align 8, !tbaa !2428
  %547 = load i64, i64* %PC
  %548 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %547, %struct.Memory* %226)
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 5
  store i64 %550, i64* %PC
  store i64 4294967295, i64* %RDI, align 8, !tbaa !2428
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 20
  %553 = load i32, i32* %EAX
  %554 = zext i32 %553 to i64
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 3
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %552 to i32*
  store i32 %553, i32* %557
  %558 = load i64, i64* %PC
  %559 = sub i64 %558, 1291
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 5
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 5
  store i64 %563, i64* %PC
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %565 = load i64, i64* %564, align 8, !tbaa !2428
  %566 = add i64 %565, -8
  %567 = inttoptr i64 %566 to i64*
  store i64 %561, i64* %567
  store i64 %566, i64* %564, align 8, !tbaa !2428
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %559, i64* %568, align 8, !tbaa !2428
  %569 = load i64, i64* %PC
  %570 = call %struct.Memory* @ext_620950_exit(%struct.State* %0, i64 %569, %struct.Memory* %548)
  %571 = load i64, i64* %PC
  %572 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %571, %struct.Memory* %570)
  ret %struct.Memory* %572

block_400be0:                                     ; preds = %block_400bc0
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 7
  store i64 %574, i64* %PC
  %575 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %RAX, align 8, !tbaa !2428
  %577 = load i32, i32* %EAX
  %578 = zext i32 %577 to i64
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 7
  store i64 %580, i64* %PC
  %581 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*)
  %582 = sub i32 %577, %581
  %583 = icmp ult i32 %577, %581
  %584 = zext i1 %583 to i8
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %584, i8* %585, align 1, !tbaa !2433
  %586 = and i32 %582, 255
  %587 = call i32 @llvm.ctpop.i32(i32 %586) #16
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  %590 = xor i8 %589, 1
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %590, i8* %591, align 1, !tbaa !2447
  %592 = xor i32 %581, %577
  %593 = xor i32 %592, %582
  %594 = lshr i32 %593, 4
  %595 = trunc i32 %594 to i8
  %596 = and i8 %595, 1
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %596, i8* %597, align 1, !tbaa !2448
  %598 = icmp eq i32 %582, 0
  %599 = zext i1 %598 to i8
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %599, i8* %600, align 1, !tbaa !2449
  %601 = lshr i32 %582, 31
  %602 = trunc i32 %601 to i8
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %602, i8* %603, align 1, !tbaa !2450
  %604 = lshr i32 %577, 31
  %605 = lshr i32 %581, 31
  %606 = xor i32 %605, %604
  %607 = xor i32 %601, %604
  %608 = add nuw nsw i32 %607, %606
  %609 = icmp eq i32 %608, 2
  %610 = zext i1 %609 to i8
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %610, i8* %611, align 1, !tbaa !2451
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 119
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 6
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 6
  store i64 %617, i64* %PC
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %619 = load i8, i8* %618, align 1, !tbaa !2450
  %620 = icmp ne i8 %619, 0
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %622 = load i8, i8* %621, align 1, !tbaa !2451
  %623 = icmp ne i8 %622, 0
  %624 = xor i1 %620, %623
  %625 = zext i1 %624 to i8
  store i8 %625, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %627 = select i1 %624, i64 %613, i64 %615
  store i64 %627, i64* %626, align 8, !tbaa !2428
  %628 = load i8, i8* %BRANCH_TAKEN
  %629 = icmp eq i8 %628, 1
  br i1 %629, label %block_400c65, label %block_400bf4
}

; Function Attrs: noinline
define %struct.Memory* @sub_4066c0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4066c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_608de8__init_array_type* @seg_608de8__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_608de8__init_array_type* @seg_608de8__init_array to i64), i64 16), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2433
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2447
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2448
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2449
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2450
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2451
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2433
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2447
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2448
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2449
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2450
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2451
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2432
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2432
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2432
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2432
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2432
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2432
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 24684
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400680__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2433
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2447
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2449
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2450
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2451
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2448
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2449
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_406716, label %block_4066f6

block_406716:                                     ; preds = %block_406700, %block_4066c0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_4066c0 ], [ %387, %block_406700 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2433
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2448
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2449
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2450
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2451
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4066f6:                                     ; preds = %block_4066c0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2433
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2447
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2450
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2448
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_406700

block_406700:                                     ; preds = %block_406700, %block_4066f6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_4066f6 ], [ %387, %block_406700 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2433
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2447
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2451
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2433
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2447
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2448
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2449
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2450
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2451
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2449
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_406700, label %block_406716
}

; Function Attrs: noinline
define %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4062b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %27 to %union.vec128_t*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = sub i64 %38, 32
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 32
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2433
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #16
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2447
  %52 = xor i64 32, %38
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2450
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2451
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 8
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 32
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  store i64 %75, i64* %RCX, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 24
  %86 = load i64, i64* %RSI
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %85 to i64*
  store i64 %86, i64* %89
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 16
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %RSI, align 8, !tbaa !2428
  %96 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %97 = load i64, i64* %RSI
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to double*
  %101 = load double, double* %100
  %102 = bitcast i8* %96 to double*
  store double %101, double* %102, align 1, !tbaa !2452
  %103 = getelementptr inbounds i8, i8* %96, i64 8
  %104 = bitcast i8* %103 to double*
  store double 0.000000e+00, double* %104, align 1, !tbaa !2452
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 24
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %106 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %RSI, align 8, !tbaa !2428
  %111 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %112 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %113 = load i64, i64* %RSI
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = bitcast i8* %112 to double*
  %117 = load double, double* %116, align 1
  %118 = getelementptr inbounds i8, i8* %112, i64 8
  %119 = bitcast i8* %118 to i64*
  %120 = load i64, i64* %119, align 1
  %121 = inttoptr i64 %113 to double*
  %122 = load double, double* %121
  %123 = fadd double %117, %122
  %124 = bitcast i8* %111 to double*
  store double %123, double* %124, align 1, !tbaa !2452
  %125 = getelementptr inbounds i8, i8* %111, i64 8
  %126 = bitcast i8* %125 to i64*
  store i64 %120, i64* %126, align 1, !tbaa !2452
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 32
  %129 = bitcast %union.vec128_t* %XMM0 to i8*
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 5
  store i64 %131, i64* %PC
  %132 = bitcast i8* %129 to double*
  %133 = load double, double* %132, align 1
  %134 = inttoptr i64 %128 to double*
  store double %133, double* %134
  %135 = load i64, i64* %RAX
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 3
  store i64 %137, i64* %PC
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %138 = load i64, i64* %RCX
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  store i64 %138, i64* %RSI, align 8, !tbaa !2428
  %141 = load i64, i64* %PC
  %142 = sub i64 %141, 17795
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %148 = load i64, i64* %147, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %144, i64* %150
  store i64 %149, i64* %147, align 8, !tbaa !2428
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %142, i64* %151, align 8, !tbaa !2428
  %152 = load i64, i64* %PC
  %153 = call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %152, %struct.Memory* %2)
  %154 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 8
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 5
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to double*
  %160 = load double, double* %159
  %161 = bitcast i8* %154 to double*
  store double %160, double* %161, align 1, !tbaa !2452
  %162 = getelementptr inbounds i8, i8* %154, i64 8
  %163 = bitcast i8* %162 to double*
  store double 0.000000e+00, double* %163, align 1, !tbaa !2452
  %164 = load i64, i64* %RSP
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = add i64 32, %164
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  %168 = icmp ult i64 %167, %164
  %169 = icmp ult i64 %167, 32
  %170 = or i1 %168, %169
  %171 = zext i1 %170 to i8
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %171, i8* %172, align 1, !tbaa !2433
  %173 = trunc i64 %167 to i32
  %174 = and i32 %173, 255
  %175 = call i32 @llvm.ctpop.i32(i32 %174) #16
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  %178 = xor i8 %177, 1
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %178, i8* %179, align 1, !tbaa !2447
  %180 = xor i64 32, %164
  %181 = xor i64 %180, %167
  %182 = lshr i64 %181, 4
  %183 = trunc i64 %182 to i8
  %184 = and i8 %183, 1
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = icmp eq i64 %167, 0
  %187 = zext i1 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %167, 63
  %190 = trunc i64 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %190, i8* %191, align 1, !tbaa !2450
  %192 = lshr i64 %164, 63
  %193 = xor i64 %189, %192
  %194 = add nuw nsw i64 %193, %189
  %195 = icmp eq i64 %194, 2
  %196 = zext i1 %195 to i8
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %196, i8* %197, align 1, !tbaa !2451
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 1
  store i64 %199, i64* %PC
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %201 = load i64, i64* %200, align 8, !tbaa !2428
  %202 = add i64 %201, 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RBP, align 8, !tbaa !2428
  store i64 %202, i64* %200, align 8, !tbaa !2428
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 1
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %209 = load i64, i64* %208, align 8, !tbaa !2428
  %210 = inttoptr i64 %209 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %207, align 8, !tbaa !2428
  %212 = add i64 %209, 8
  store i64 %212, i64* %208, align 8, !tbaa !2428
  ret %struct.Memory* %153
}

; Function Attrs: noinline
define %struct.Memory* @sub_405940__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405940:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %ECX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %ESI = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 96
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 96
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2433
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = xor i64 96, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2448
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2449
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2450
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2451
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %88 = load i64, i64* %RCX
  %89 = load i32, i32* %ECX
  %90 = zext i32 %89 to i64
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = xor i64 %90, %88
  %94 = trunc i64 %93 to i32
  %95 = and i64 %93, 4294967295
  store i64 %95, i64* %RCX, align 8, !tbaa !2428
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %96, align 1, !tbaa !2433
  %97 = and i32 %94, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2447
  %103 = icmp eq i32 %94, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2449
  %106 = lshr i32 %94, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2450
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %109, align 1, !tbaa !2451
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %110, align 1, !tbaa !2448
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 8
  %113 = load i64, i64* %RDI
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %112 to i64*
  store i64 %113, i64* %116
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 16
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 8
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RSI, align 8, !tbaa !2428
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 24
  %131 = load i64, i64* %RSI
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RAX
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 3
  store i64 %137, i64* %PC
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %138 = load i32, i32* %ECX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 2
  store i64 %141, i64* %PC
  %142 = and i64 %139, 4294967295
  store i64 %142, i64* %RSI, align 8, !tbaa !2428
  %143 = load i64, i64* %PC
  %144 = sub i64 %143, 7427
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %150 = load i64, i64* %149, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %146, i64* %152
  store i64 %151, i64* %149, align 8, !tbaa !2428
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %153, align 8, !tbaa !2428
  %154 = load i64, i64* %PC
  %155 = call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %154, %struct.Memory* %2)
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 32
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %157 to i64*
  store i64 %158, i64* %161
  br label %block_40596c

block_4059f7:                                     ; preds = %block_4059e7
  %162 = load i64, i64* %RBP
  %163 = sub i64 %162, 56
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  %166 = load i64, i64* %PC
  %167 = sub i64 %166, 7467
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 5
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %173 = load i64, i64* %172, align 8, !tbaa !2428
  %174 = add i64 %173, -8
  %175 = inttoptr i64 %174 to i64*
  store i64 %169, i64* %175
  store i64 %174, i64* %172, align 8, !tbaa !2428
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %167, i64* %176, align 8, !tbaa !2428
  %177 = load i64, i64* %PC
  %178 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %177, %struct.Memory* %MEMORY.0)
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 48
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  store i64 %180, i64* %RDI, align 8, !tbaa !2428
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 80
  %185 = load i64, i64* %RAX
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 4
  store i64 %187, i64* %PC
  %188 = inttoptr i64 %184 to i64*
  store i64 %185, i64* %188
  %189 = load i64, i64* %PC
  %190 = sub i64 %189, 7480
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 5
  store i64 %194, i64* %PC
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %196 = load i64, i64* %195, align 8, !tbaa !2428
  %197 = add i64 %196, -8
  %198 = inttoptr i64 %197 to i64*
  store i64 %192, i64* %198
  store i64 %197, i64* %195, align 8, !tbaa !2428
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %190, i64* %199, align 8, !tbaa !2428
  %200 = load i64, i64* %PC
  %201 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %200, %struct.Memory* %178)
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 80
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206
  store i64 %207, i64* %RDI, align 8, !tbaa !2428
  %208 = load i64, i64* %RDI
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 3
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %RCX, align 8, !tbaa !2428
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %RCX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 48
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 4
  store i64 %221, i64* %PC
  store i64 %219, i64* %RDI, align 8, !tbaa !2428
  %222 = load i64, i64* %PC
  %223 = sub i64 %222, 1883
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 5
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %225, i64* %231
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %232, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = call %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %233, %struct.Memory* %201)
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 88
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %236 to i64*
  store i64 %237, i64* %240
  %241 = load i64, i64* %PC
  %242 = sub i64 %241, 126
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 5
  store i64 %244, i64* %PC
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %242, i64* %245, align 8, !tbaa !2428
  br label %block_4059a6

block_4059f2:                                     ; preds = %block_4059e7
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 55
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 5
  store i64 %249, i64* %PC
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %247, i64* %250, align 8, !tbaa !2428
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 48
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  store i64 %252, i64* %RDI, align 8, !tbaa !2428
  %255 = load i64, i64* %PC
  %256 = sub i64 %255, 7517
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 5
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 5
  store i64 %260, i64* %PC
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %262 = load i64, i64* %261, align 8, !tbaa !2428
  %263 = add i64 %262, -8
  %264 = inttoptr i64 %263 to i64*
  store i64 %258, i64* %264
  store i64 %263, i64* %261, align 8, !tbaa !2428
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %256, i64* %265, align 8, !tbaa !2428
  %266 = load i64, i64* %PC
  %267 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %266, %struct.Memory* %MEMORY.0)
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 24
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 4
  store i64 %271, i64* %PC
  store i64 %269, i64* %RDI, align 8, !tbaa !2428
  %272 = load i64, i64* %RSI
  %273 = load i32, i32* %ESI
  %274 = zext i32 %273 to i64
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 2
  store i64 %276, i64* %PC
  %277 = xor i64 %274, %272
  %278 = trunc i64 %277 to i32
  %279 = and i64 %277, 4294967295
  store i64 %279, i64* %RSI, align 8, !tbaa !2428
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %280, align 1, !tbaa !2433
  %281 = and i32 %278, 255
  %282 = call i32 @llvm.ctpop.i32(i32 %281) #16
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %285, i8* %286, align 1, !tbaa !2447
  %287 = icmp eq i32 %278, 0
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %288, i8* %289, align 1, !tbaa !2449
  %290 = lshr i32 %278, 31
  %291 = trunc i32 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %293, align 1, !tbaa !2451
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %294, align 1, !tbaa !2448
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 40
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %296 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %RCX, align 8, !tbaa !2428
  %301 = load i64, i64* %RAX
  %302 = load i64, i64* %RCX
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 3
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %301 to i64*
  store i64 %302, i64* %305
  %306 = load i64, i64* %PC
  %307 = sub i64 %306, 7647
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 5
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %313 = load i64, i64* %312, align 8, !tbaa !2428
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 %309, i64* %315
  store i64 %314, i64* %312, align 8, !tbaa !2428
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %307, i64* %316, align 8, !tbaa !2428
  %317 = load i64, i64* %PC
  %318 = call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %317, %struct.Memory* %267)
  %319 = load i64, i64* %RBP
  %320 = sub i64 %319, 64
  %321 = load i64, i64* %RAX
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 4
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %320 to i64*
  store i64 %321, i64* %324
  %325 = load i64, i64* %PC
  %326 = sub i64 %325, 220
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %326, i64* %329, align 8, !tbaa !2428
  br label %block_40596c

block_4059e7:                                     ; preds = %block_4059c2, %block_4059c7
  %MEMORY.0 = phi %struct.Memory* [ %566, %block_4059c7 ], [ %390, %block_4059c2 ]
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 65
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 3
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i8*
  %335 = load i8, i8* %334
  store i8 %335, i8* %AL, align 1, !tbaa !2432
  %336 = load i8, i8* %AL
  %337 = zext i8 %336 to i64
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 2
  store i64 %339, i64* %PC
  %340 = and i64 1, %337
  %341 = trunc i64 %340 to i8
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %342, align 1, !tbaa !2433
  %343 = trunc i64 %340 to i32
  %344 = and i32 %343, 255
  %345 = call i32 @llvm.ctpop.i32(i32 %344) #16
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %348, i8* %349, align 1, !tbaa !2447
  %350 = icmp eq i8 %341, 0
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %351, i8* %352, align 1, !tbaa !2449
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %353, align 1, !tbaa !2450
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %354, align 1, !tbaa !2451
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %355, align 1, !tbaa !2448
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 11
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 6
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 6
  store i64 %361, i64* %PC
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %363 = load i8, i8* %362, align 1, !tbaa !2449
  %364 = icmp eq i8 %363, 0
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %367 = select i1 %364, i64 %357, i64 %359
  store i64 %367, i64* %366, align 8, !tbaa !2428
  %368 = load i8, i8* %BRANCH_TAKEN
  %369 = icmp eq i8 %368, 1
  br i1 %369, label %block_4059f7, label %block_4059f2

block_4059a6:                                     ; preds = %block_405986, %block_4059f7
  %MEMORY.1 = phi %struct.Memory* [ %590, %block_405986 ], [ %234, %block_4059f7 ]
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 48
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 4
  store i64 %373, i64* %PC
  store i64 %371, i64* %RDI, align 8, !tbaa !2428
  %374 = load i64, i64* %RBP
  %375 = sub i64 %374, 8
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 4
  store i64 %377, i64* %PC
  store i64 %375, i64* %RSI, align 8, !tbaa !2428
  %378 = load i64, i64* %PC
  %379 = sub i64 %378, 7438
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 5
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %385 = load i64, i64* %384, align 8, !tbaa !2428
  %386 = add i64 %385, -8
  %387 = inttoptr i64 %386 to i64*
  store i64 %381, i64* %387
  store i64 %386, i64* %384, align 8, !tbaa !2428
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %379, i64* %388, align 8, !tbaa !2428
  %389 = load i64, i64* %PC
  %390 = call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %389, %struct.Memory* %MEMORY.1)
  %391 = load i64, i64* %RCX
  %392 = load i32, i32* %ECX
  %393 = zext i32 %392 to i64
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 2
  store i64 %395, i64* %PC
  %396 = xor i64 %393, %391
  %397 = trunc i64 %396 to i32
  %398 = and i64 %396, 4294967295
  store i64 %398, i64* %RCX, align 8, !tbaa !2428
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %399, align 1, !tbaa !2433
  %400 = and i32 %397, 255
  %401 = call i32 @llvm.ctpop.i32(i32 %400) #16
  %402 = trunc i32 %401 to i8
  %403 = and i8 %402, 1
  %404 = xor i8 %403, 1
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %404, i8* %405, align 1, !tbaa !2447
  %406 = icmp eq i32 %397, 0
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %407, i8* %408, align 1, !tbaa !2449
  %409 = lshr i32 %397, 31
  %410 = trunc i32 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %410, i8* %411, align 1, !tbaa !2450
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %412, align 1, !tbaa !2451
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %413, align 1, !tbaa !2448
  %414 = load i8, i8* %CL
  %415 = zext i8 %414 to i64
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 2
  store i64 %417, i64* %PC
  store i8 %414, i8* %DL, align 1, !tbaa !2432
  %418 = load i8, i8* %AL
  %419 = zext i8 %418 to i64
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 2
  store i64 %421, i64* %PC
  %422 = and i64 1, %419
  %423 = trunc i64 %422 to i8
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %424, align 1, !tbaa !2433
  %425 = trunc i64 %422 to i32
  %426 = and i32 %425, 255
  %427 = call i32 @llvm.ctpop.i32(i32 %426) #16
  %428 = trunc i32 %427 to i8
  %429 = and i8 %428, 1
  %430 = xor i8 %429, 1
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %430, i8* %431, align 1, !tbaa !2447
  %432 = icmp eq i8 %423, 0
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %433, i8* %434, align 1, !tbaa !2449
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %435, align 1, !tbaa !2450
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %436, align 1, !tbaa !2451
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %437, align 1, !tbaa !2448
  %438 = load i64, i64* %RBP
  %439 = sub i64 %438, 65
  %440 = load i8, i8* %DL
  %441 = zext i8 %440 to i64
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 3
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %439 to i8*
  store i8 %440, i8* %444
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 11
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 6
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 6
  store i64 %450, i64* %PC
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %452 = load i8, i8* %451, align 1, !tbaa !2449
  %453 = icmp eq i8 %452, 0
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %456 = select i1 %453, i64 %446, i64 %448
  store i64 %456, i64* %455, align 8, !tbaa !2428
  %457 = load i8, i8* %BRANCH_TAKEN
  %458 = icmp eq i8 %457, 1
  br i1 %458, label %block_4059c7, label %block_4059c2

block_40596c:                                     ; preds = %block_4059f2, %block_405940
  %MEMORY.2 = phi %struct.Memory* [ %155, %block_405940 ], [ %318, %block_4059f2 ]
  %459 = load i64, i64* %RBP
  %460 = sub i64 %459, 24
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 4
  store i64 %462, i64* %PC
  store i64 %460, i64* %RDI, align 8, !tbaa !2428
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 16
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 4
  store i64 %466, i64* %PC
  store i64 %464, i64* %RSI, align 8, !tbaa !2428
  %467 = load i64, i64* %PC
  %468 = sub i64 %467, 7380
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 5
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 5
  store i64 %472, i64* %PC
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %474 = load i64, i64* %473, align 8, !tbaa !2428
  %475 = add i64 %474, -8
  %476 = inttoptr i64 %475 to i64*
  store i64 %470, i64* %476
  store i64 %475, i64* %473, align 8, !tbaa !2428
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %468, i64* %477, align 8, !tbaa !2428
  %478 = load i64, i64* %PC
  %479 = call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %478, %struct.Memory* %MEMORY.2)
  %480 = load i8, i8* %AL
  %481 = zext i8 %480 to i64
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 2
  store i64 %483, i64* %PC
  %484 = and i64 1, %481
  %485 = trunc i64 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %486, align 1, !tbaa !2433
  %487 = trunc i64 %484 to i32
  %488 = and i32 %487, 255
  %489 = call i32 @llvm.ctpop.i32(i32 %488) #16
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = xor i8 %491, 1
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %492, i8* %493, align 1, !tbaa !2447
  %494 = icmp eq i8 %485, 0
  %495 = zext i1 %494 to i8
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %495, i8* %496, align 1, !tbaa !2449
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %497, align 1, !tbaa !2450
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %498, align 1, !tbaa !2451
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %499, align 1, !tbaa !2448
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 11
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 6
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 6
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %507 = load i8, i8* %506, align 1, !tbaa !2449
  %508 = icmp eq i8 %507, 0
  %509 = zext i1 %508 to i8
  store i8 %509, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %511 = select i1 %508, i64 %501, i64 %503
  store i64 %511, i64* %510, align 8, !tbaa !2428
  %512 = load i8, i8* %BRANCH_TAKEN
  %513 = icmp eq i8 %512, 1
  br i1 %513, label %block_405986, label %block_405981

block_4059c7:                                     ; preds = %block_4059a6
  %514 = load i64, i64* %RBP
  %515 = sub i64 %514, 56
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  store i64 %515, i64* %RDI, align 8, !tbaa !2428
  %518 = load i64, i64* %PC
  %519 = sub i64 %518, 1803
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 5
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 5
  store i64 %523, i64* %PC
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %525 = load i64, i64* %524, align 8, !tbaa !2428
  %526 = add i64 %525, -8
  %527 = inttoptr i64 %526 to i64*
  store i64 %521, i64* %527
  store i64 %526, i64* %524, align 8, !tbaa !2428
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %519, i64* %528, align 8, !tbaa !2428
  %529 = load i64, i64* %PC
  %530 = call %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %529, %struct.Memory* %390)
  %531 = load i64, i64* %RAX
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 3
  store i64 %533, i64* %PC
  store i64 %531, i64* %RDI, align 8, !tbaa !2428
  %534 = load i64, i64* %PC
  %535 = sub i64 %534, 7427
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 5
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 5
  store i64 %539, i64* %PC
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %541 = load i64, i64* %540, align 8, !tbaa !2428
  %542 = add i64 %541, -8
  %543 = inttoptr i64 %542 to i64*
  store i64 %537, i64* %543
  store i64 %542, i64* %540, align 8, !tbaa !2428
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %535, i64* %544, align 8, !tbaa !2428
  %545 = load i64, i64* %PC
  %546 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %545, %struct.Memory* %530)
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 40
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 4
  store i64 %550, i64* %PC
  store i64 %548, i64* %RDI, align 8, !tbaa !2428
  %551 = load i64, i64* %RAX
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 3
  store i64 %553, i64* %PC
  store i64 %551, i64* %RSI, align 8, !tbaa !2428
  %554 = load i64, i64* %PC
  %555 = sub i64 %554, 10127
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 5
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 5
  store i64 %559, i64* %PC
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %561 = load i64, i64* %560, align 8, !tbaa !2428
  %562 = add i64 %561, -8
  %563 = inttoptr i64 %562 to i64*
  store i64 %557, i64* %563
  store i64 %562, i64* %560, align 8, !tbaa !2428
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %555, i64* %564, align 8, !tbaa !2428
  %565 = load i64, i64* %PC
  %566 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %565, %struct.Memory* %546)
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 65
  %569 = load i8, i8* %AL
  %570 = zext i8 %569 to i64
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 3
  store i64 %572, i64* %PC
  %573 = inttoptr i64 %568 to i8*
  store i8 %569, i8* %573
  br label %block_4059e7

block_405986:                                     ; preds = %block_40596c
  %574 = load i64, i64* %RBP
  %575 = sub i64 %574, 24
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 4
  store i64 %577, i64* %PC
  store i64 %575, i64* %RDI, align 8, !tbaa !2428
  %578 = load i64, i64* %PC
  %579 = sub i64 %578, 7354
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 5
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 5
  store i64 %583, i64* %PC
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %585 = load i64, i64* %584, align 8, !tbaa !2428
  %586 = add i64 %585, -8
  %587 = inttoptr i64 %586 to i64*
  store i64 %581, i64* %587
  store i64 %586, i64* %584, align 8, !tbaa !2428
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %579, i64* %588, align 8, !tbaa !2428
  %589 = load i64, i64* %PC
  %590 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %589, %struct.Memory* %479)
  %591 = load i64, i64* %RAX
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 3
  store i64 %593, i64* %PC
  %594 = inttoptr i64 %591 to i64*
  %595 = load i64, i64* %594
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = load i64, i64* %RBP
  %597 = sub i64 %596, 40
  %598 = load i64, i64* %RAX
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 4
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %597 to i64*
  store i64 %598, i64* %601
  %602 = load i64, i64* %RBP
  %603 = sub i64 %602, 24
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 4
  store i64 %605, i64* %PC
  %606 = inttoptr i64 %603 to i64*
  %607 = load i64, i64* %606
  store i64 %607, i64* %RAX, align 8, !tbaa !2428
  %608 = load i64, i64* %RBP
  %609 = sub i64 %608, 48
  %610 = load i64, i64* %RAX
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %609 to i64*
  store i64 %610, i64* %613
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 48
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 4
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i64*
  %619 = load i64, i64* %618
  store i64 %619, i64* %RAX, align 8, !tbaa !2428
  %620 = load i64, i64* %RBP
  %621 = sub i64 %620, 56
  %622 = load i64, i64* %RAX
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 4
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %621 to i64*
  store i64 %622, i64* %625
  br label %block_4059a6

block_4059c2:                                     ; preds = %block_4059a6
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 37
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 5
  store i64 %629, i64* %PC
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %627, i64* %630, align 8, !tbaa !2428
  br label %block_4059e7

block_405981:                                     ; preds = %block_40596c
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 204
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %632, i64* %635, align 8, !tbaa !2428
  %636 = load i64, i64* %RSP
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 4
  store i64 %638, i64* %PC
  %639 = add i64 96, %636
  store i64 %639, i64* %RSP, align 8, !tbaa !2428
  %640 = icmp ult i64 %639, %636
  %641 = icmp ult i64 %639, 96
  %642 = or i1 %640, %641
  %643 = zext i1 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %643, i8* %644, align 1, !tbaa !2433
  %645 = trunc i64 %639 to i32
  %646 = and i32 %645, 255
  %647 = call i32 @llvm.ctpop.i32(i32 %646) #16
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  %650 = xor i8 %649, 1
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %650, i8* %651, align 1, !tbaa !2447
  %652 = xor i64 96, %636
  %653 = xor i64 %652, %639
  %654 = lshr i64 %653, 4
  %655 = trunc i64 %654 to i8
  %656 = and i8 %655, 1
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %656, i8* %657, align 1, !tbaa !2448
  %658 = icmp eq i64 %639, 0
  %659 = zext i1 %658 to i8
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %659, i8* %660, align 1, !tbaa !2449
  %661 = lshr i64 %639, 63
  %662 = trunc i64 %661 to i8
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %662, i8* %663, align 1, !tbaa !2450
  %664 = lshr i64 %636, 63
  %665 = xor i64 %661, %664
  %666 = add nuw nsw i64 %665, %661
  %667 = icmp eq i64 %666, 2
  %668 = zext i1 %667 to i8
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %668, i8* %669, align 1, !tbaa !2451
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 1
  store i64 %671, i64* %PC
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %673 = load i64, i64* %672, align 8, !tbaa !2428
  %674 = add i64 %673, 8
  %675 = inttoptr i64 %673 to i64*
  %676 = load i64, i64* %675
  store i64 %676, i64* %RBP, align 8, !tbaa !2428
  store i64 %674, i64* %672, align 8, !tbaa !2428
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 1
  store i64 %678, i64* %PC
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %681 = load i64, i64* %680, align 8, !tbaa !2428
  %682 = inttoptr i64 %681 to i64*
  %683 = load i64, i64* %682
  store i64 %683, i64* %679, align 8, !tbaa !2428
  %684 = add i64 %681, 8
  store i64 %684, i64* %680, align 8, !tbaa !2428
  ret %struct.Memory* %479
}

; Function Attrs: noinline
define %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401df0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %25 to %union.vec128_t*
  %26 = load i64, i64* %RBP
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 1
  store i64 %28, i64* %PC
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %30 = load i64, i64* %29, align 8, !tbaa !2428
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %26, i64* %32
  store i64 %31, i64* %29, align 8, !tbaa !2428
  %33 = load i64, i64* %RSP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC
  store i64 %33, i64* %RBP, align 8, !tbaa !2428
  %36 = load i64, i64* %RBP
  %37 = sub i64 %36, 8
  %38 = bitcast %union.vec128_t* %XMM0 to i8*
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 5
  store i64 %40, i64* %PC
  %41 = bitcast i8* %38 to double*
  %42 = load double, double* %41, align 1
  %43 = inttoptr i64 %37 to double*
  store double %42, double* %43
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 16
  %46 = load i64, i64* %RDI
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 24
  %52 = load i64, i64* %RSI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55
  br label %block_401e01

block_401e0f:                                     ; preds = %block_401e01
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 16
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %57 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %RAX, align 8, !tbaa !2428
  %62 = load i64, i64* %RAX
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 3
  store i64 %64, i64* %PC
  store i64 %62, i64* %RCX, align 8, !tbaa !2428
  %65 = load i64, i64* %RCX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = add i64 8, %65
  store i64 %68, i64* %RCX, align 8, !tbaa !2428
  %69 = icmp ult i64 %68, %65
  %70 = icmp ult i64 %68, 8
  %71 = or i1 %69, %70
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2433
  %74 = trunc i64 %68 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = xor i64 8, %65
  %82 = xor i64 %81, %68
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = icmp eq i64 %68, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = lshr i64 %68, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = lshr i64 %65, 63
  %94 = xor i64 %90, %93
  %95 = add nuw nsw i64 %94, %90
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %97, i8* %98, align 1, !tbaa !2451
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 16
  %101 = load i64, i64* %RCX
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %100 to i64*
  store i64 %101, i64* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 8
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %106 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = load i64, i64* %RAX
  %112 = load i64, i64* %RCX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 3
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %115
  %116 = load i64, i64* %PC
  %117 = sub i64 %116, 36
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  store i64 %119, i64* %PC
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %117, i64* %120, align 8, !tbaa !2428
  br label %block_401e01

block_401e2a:                                     ; preds = %block_401e01
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 1
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, 8
  %126 = inttoptr i64 %124 to i64*
  %127 = load i64, i64* %126
  store i64 %127, i64* %RBP, align 8, !tbaa !2428
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 1
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %132 = load i64, i64* %131, align 8, !tbaa !2428
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %130, align 8, !tbaa !2428
  %135 = add i64 %132, 8
  store i64 %135, i64* %131, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401e01:                                     ; preds = %block_401e0f, %block_401df0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401df0 ], [ %MEMORY.0, %block_401e0f ]
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 16
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = load i64, i64* %RAX
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 24
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i64*
  %148 = load i64, i64* %147
  %149 = sub i64 %142, %148
  %150 = icmp ugt i64 %148, %142
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2433
  %153 = trunc i64 %149 to i32
  %154 = and i32 %153, 255
  %155 = call i32 @llvm.ctpop.i32(i32 %154) #16
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  %158 = xor i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %158, i8* %159, align 1, !tbaa !2447
  %160 = xor i64 %148, %142
  %161 = xor i64 %160, %149
  %162 = lshr i64 %161, 4
  %163 = trunc i64 %162 to i8
  %164 = and i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %164, i8* %165, align 1, !tbaa !2448
  %166 = icmp eq i64 %149, 0
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %167, i8* %168, align 1, !tbaa !2449
  %169 = lshr i64 %149, 63
  %170 = trunc i64 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2450
  %172 = lshr i64 %142, 63
  %173 = lshr i64 %148, 63
  %174 = xor i64 %173, %172
  %175 = xor i64 %169, %172
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %178, i8* %179, align 1, !tbaa !2451
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 33
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 6
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 6
  store i64 %185, i64* %PC
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %187 = load i8, i8* %186, align 1, !tbaa !2449
  store i8 %187, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %189 = icmp ne i8 %187, 0
  %190 = select i1 %189, i64 %181, i64 %183
  store i64 %190, i64* %188, align 8, !tbaa !2428
  %191 = load i8, i8* %BRANCH_TAKEN
  %192 = icmp eq i8 %191, 1
  br i1 %192, label %block_401e2a, label %block_401e0f
}

; Function Attrs: noinline
define %struct.Memory* @sub_403300__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403300:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RAX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 5
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RCX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 7
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RDX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 9
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RSI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 11
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDI = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 13
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSP = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 15
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RBP = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 176
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 176
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2433
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = xor i64 176, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2451
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = load i64, i64* %RSI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = bitcast %union.vec128_t* %XMM0 to i8*
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 5
  store i64 %95, i64* %PC
  %96 = bitcast i8* %93 to double*
  %97 = load double, double* %96, align 1
  %98 = inttoptr i64 %92 to double*
  store double %97, double* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 24
  %101 = load i64, i64* %RDI
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %100 to i64*
  store i64 %101, i64* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %RDX
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %106 to i64*
  store i64 %107, i64* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 32
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %RDX, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 48
  %119 = load i64, i64* %RDX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 48
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RDX, align 8, !tbaa !2428
  %129 = load i64, i64* %RDX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 1, %129
  store i64 %132, i64* %RDX, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 1
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 1, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %RDX
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = shl i64 %163, 1
  %167 = icmp slt i64 %163, 0
  %168 = icmp slt i64 %166, 0
  %169 = xor i1 %167, %168
  store i64 %166, i64* %RDX, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %171 = zext i1 %167 to i8
  store i8 %171, i8* %170, align 1, !tbaa !2432
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %173 = trunc i64 %166 to i32
  %174 = and i32 %173, 254
  %175 = call i32 @llvm.ctpop.i32(i32 %174) #16
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  %178 = xor i8 %177, 1
  store i8 %178, i8* %172, align 1, !tbaa !2432
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %179, align 1, !tbaa !2432
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %181 = icmp eq i64 %166, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %180, align 1, !tbaa !2432
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %184 = lshr i64 %166, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %183, align 1, !tbaa !2432
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %187 = zext i1 %169 to i8
  store i8 %187, i8* %186, align 1, !tbaa !2432
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 40
  %190 = load i64, i64* %RDX
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %189 to i64*
  store i64 %190, i64* %193
  br label %block_403334

block_403418:                                     ; preds = %block_403334
  %194 = sub i64 %538, 40
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RAX
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 24
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  %206 = sub i64 %199, %205
  %207 = icmp ugt i64 %205, %199
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %208, i8* %209, align 1, !tbaa !2433
  %210 = trunc i64 %206 to i32
  %211 = and i32 %210, 255
  %212 = call i32 @llvm.ctpop.i32(i32 %211) #16
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = xor i8 %214, 1
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %215, i8* %216, align 1, !tbaa !2447
  %217 = xor i64 %205, %199
  %218 = xor i64 %217, %206
  %219 = lshr i64 %218, 4
  %220 = trunc i64 %219 to i8
  %221 = and i8 %220, 1
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %221, i8* %222, align 1, !tbaa !2448
  %223 = icmp eq i64 %206, 0
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %224, i8* %225, align 1, !tbaa !2449
  %226 = lshr i64 %206, 63
  %227 = trunc i64 %226 to i8
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %227, i8* %228, align 1, !tbaa !2450
  %229 = lshr i64 %199, 63
  %230 = lshr i64 %205, 63
  %231 = xor i64 %230, %229
  %232 = xor i64 %226, %229
  %233 = add nuw nsw i64 %232, %231
  %234 = icmp eq i64 %233, 2
  %235 = zext i1 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %235, i8* %236, align 1, !tbaa !2451
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 97
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 6
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 6
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2449
  %245 = icmp eq i8 %244, 0
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %248 = select i1 %245, i64 %238, i64 %240
  store i64 %248, i64* %247, align 8, !tbaa !2428
  %249 = load i8, i8* %BRANCH_TAKEN
  %250 = icmp eq i8 %249, 1
  br i1 %250, label %block_403481, label %block_403426

block_4034f3:                                     ; preds = %block_4034e0
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 8
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  store i64 %252, i64* %RDI, align 8, !tbaa !2428
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 40
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to i64*
  %260 = load i64, i64* %259
  store i64 %260, i64* %RSI, align 8, !tbaa !2428
  %261 = load i64, i64* %PC
  %262 = sub i64 %261, 555
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 5
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 5
  store i64 %266, i64* %PC
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %268 = load i64, i64* %267, align 8, !tbaa !2428
  %269 = add i64 %268, -8
  %270 = inttoptr i64 %269 to i64*
  store i64 %264, i64* %270
  store i64 %269, i64* %267, align 8, !tbaa !2428
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %262, i64* %271, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %272, %struct.Memory* %MEMORY.3)
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 112
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 4
  store i64 %277, i64* %PC
  store i64 %275, i64* %RDI, align 8, !tbaa !2428
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 112
  %280 = load i64, i64* %RAX
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %279 to i64*
  store i64 %280, i64* %283
  %284 = load i64, i64* %PC
  %285 = sub i64 %284, 1160
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 5
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 5
  store i64 %289, i64* %PC
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %291 = load i64, i64* %290, align 8, !tbaa !2428
  %292 = add i64 %291, -8
  %293 = inttoptr i64 %292 to i64*
  store i64 %287, i64* %293
  store i64 %292, i64* %290, align 8, !tbaa !2428
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %285, i64* %294, align 8, !tbaa !2428
  %295 = load i64, i64* %PC
  %296 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %295, %struct.Memory* %273)
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 8
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  store i64 %298, i64* %RDI, align 8, !tbaa !2428
  %301 = load i64, i64* %RBP
  %302 = sub i64 %301, 48
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %302 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %RSI, align 8, !tbaa !2428
  %307 = load i64, i64* %RBP
  %308 = sub i64 %307, 168
  %309 = load i64, i64* %RAX
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 7
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %308 to i64*
  store i64 %309, i64* %312
  %313 = load i64, i64* %PC
  %314 = sub i64 %313, 588
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 5
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 5
  store i64 %318, i64* %PC
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %320 = load i64, i64* %319, align 8, !tbaa !2428
  %321 = add i64 %320, -8
  %322 = inttoptr i64 %321 to i64*
  store i64 %316, i64* %322
  store i64 %321, i64* %319, align 8, !tbaa !2428
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %314, i64* %323, align 8, !tbaa !2428
  %324 = load i64, i64* %PC
  %325 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %324, %struct.Memory* %296)
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 120
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC
  store i64 %327, i64* %RDI, align 8, !tbaa !2428
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 120
  %332 = load i64, i64* %RAX
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 4
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %331 to i64*
  store i64 %332, i64* %335
  %336 = load i64, i64* %PC
  %337 = sub i64 %336, 1193
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 5
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 5
  store i64 %341, i64* %PC
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %343 = load i64, i64* %342, align 8, !tbaa !2428
  %344 = add i64 %343, -8
  %345 = inttoptr i64 %344 to i64*
  store i64 %339, i64* %345
  store i64 %344, i64* %342, align 8, !tbaa !2428
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %337, i64* %346, align 8, !tbaa !2428
  %347 = load i64, i64* %PC
  %348 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %347, %struct.Memory* %325)
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 5
  store i64 %350, i64* %PC
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %351 = load i32, i32* %ECX
  %352 = zext i32 %351 to i64
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 2
  store i64 %354, i64* %PC
  %355 = and i64 %352, 4294967295
  store i64 %355, i64* %RSI, align 8, !tbaa !2428
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 168
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 7
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360
  store i64 %361, i64* %RDI, align 8, !tbaa !2428
  %362 = load i64, i64* %RDI
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 3
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %362 to i64*
  %366 = load i64, i64* %365
  store i64 %366, i64* %RDX, align 8, !tbaa !2428
  %367 = load i64, i64* %RAX
  %368 = load i64, i64* %RDX
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 3
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %367 to i64*
  store i64 %368, i64* %371
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 40
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %373 to i64*
  %377 = load i64, i64* %376
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 48
  %380 = load i64, i64* %RAX
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 4
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %379 to i64*
  store i64 %380, i64* %383
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 48
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 4
  store i64 %387, i64* %PC
  %388 = inttoptr i64 %385 to i64*
  %389 = load i64, i64* %388
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = load i64, i64* %RAX
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = sub i64 %390, 1
  store i64 %393, i64* %RAX, align 8, !tbaa !2428
  %394 = icmp ult i64 %390, 1
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2433
  %397 = trunc i64 %393 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2447
  %404 = xor i64 1, %390
  %405 = xor i64 %404, %393
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = icmp eq i64 %393, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i64 %393, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = lshr i64 %390, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %416
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2451
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 2
  store i64 %423, i64* %PC
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %426 = load i64, i64* %425, align 8, !tbaa !2428
  %427 = ashr i64 %426, 63
  store i64 %427, i64* %424, align 8, !tbaa !2428
  %428 = load i64, i64* %RSI
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 3
  store i64 %430, i64* %PC
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %432 = load i64, i64* %431, align 8, !tbaa !2428
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %434 = load i64, i64* %433, align 8, !tbaa !2428
  %435 = sext i64 %428 to i128
  %436 = and i128 %435, -18446744073709551616
  %437 = zext i64 %434 to i128
  %438 = shl nuw i128 %437, 64
  %439 = zext i64 %432 to i128
  %440 = or i128 %438, %439
  %441 = zext i64 %428 to i128
  %442 = or i128 %436, %441
  %443 = sdiv i128 %440, %442
  %444 = trunc i128 %443 to i64
  %445 = and i128 %443, 18446744073709551615
  %446 = sext i64 %444 to i128
  %447 = and i128 %446, -18446744073709551616
  %448 = or i128 %447, %445
  %449 = icmp eq i128 %443, %448
  br i1 %449, label %454, label %450

; <label>:450:                                    ; preds = %block_4034f3
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %452 = load i64, i64* %451, align 8, !tbaa !2428
  %453 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %452, %struct.Memory* %348) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:454:                                    ; preds = %block_4034f3
  %455 = srem i128 %440, %442
  %456 = trunc i128 %455 to i64
  store i64 %444, i64* %431, align 8, !tbaa !2428
  store i64 %456, i64* %433, align 8, !tbaa !2428
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %457, align 1, !tbaa !2433
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %458, align 1, !tbaa !2447
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %459, align 1, !tbaa !2448
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %460, align 1, !tbaa !2449
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %461, align 1, !tbaa !2450
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %462, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %450, %454
  %463 = phi %struct.Memory* [ %453, %450 ], [ %348, %454 ]
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 40
  %466 = load i64, i64* %RAX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = inttoptr i64 %465 to i64*
  store i64 %466, i64* %469
  %470 = load i64, i64* %PC
  %471 = sub i64 %470, 191
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 5
  store i64 %473, i64* %PC
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %471, i64* %474, align 8, !tbaa !2428
  br label %block_40349c

block_403334:                                     ; preds = %block_4033ac, %block_403300
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_403300 ], [ %787, %block_4033ac ]
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 40
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i64*
  %480 = load i64, i64* %479
  store i64 %480, i64* %RAX, align 8, !tbaa !2428
  %481 = load i64, i64* %RAX
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 24
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i64*
  %487 = load i64, i64* %486
  %488 = sub i64 %481, %487
  %489 = icmp ugt i64 %487, %481
  %490 = zext i1 %489 to i8
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %490, i8* %491, align 1, !tbaa !2433
  %492 = trunc i64 %488 to i32
  %493 = and i32 %492, 255
  %494 = call i32 @llvm.ctpop.i32(i32 %493) #16
  %495 = trunc i32 %494 to i8
  %496 = and i8 %495, 1
  %497 = xor i8 %496, 1
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %497, i8* %498, align 1, !tbaa !2447
  %499 = xor i64 %487, %481
  %500 = xor i64 %499, %488
  %501 = lshr i64 %500, 4
  %502 = trunc i64 %501 to i8
  %503 = and i8 %502, 1
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %503, i8* %504, align 1, !tbaa !2448
  %505 = icmp eq i64 %488, 0
  %506 = zext i1 %505 to i8
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %506, i8* %507, align 1, !tbaa !2449
  %508 = lshr i64 %488, 63
  %509 = trunc i64 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %509, i8* %510, align 1, !tbaa !2450
  %511 = lshr i64 %481, 63
  %512 = lshr i64 %487, 63
  %513 = xor i64 %512, %511
  %514 = xor i64 %508, %511
  %515 = add nuw nsw i64 %514, %513
  %516 = icmp eq i64 %515, 2
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %517, i8* %518, align 1, !tbaa !2451
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 220
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 6
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 6
  store i64 %524, i64* %PC
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %526 = load i8, i8* %525, align 1, !tbaa !2450
  %527 = icmp ne i8 %526, 0
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %529 = load i8, i8* %528, align 1, !tbaa !2451
  %530 = icmp ne i8 %529, 0
  %531 = xor i1 %527, %530
  %532 = xor i1 %531, true
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %535 = select i1 %531, i64 %522, i64 %520
  store i64 %535, i64* %534, align 8, !tbaa !2428
  %536 = load i8, i8* %BRANCH_TAKEN
  %537 = icmp eq i8 %536, 1
  %538 = load i64, i64* %RBP
  br i1 %537, label %block_403418, label %block_403342

block_4034ee:                                     ; preds = %block_4034e0
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 114
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 5
  store i64 %542, i64* %PC
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %540, i64* %543, align 8, !tbaa !2428
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  store i64 %545, i64* %RDI, align 8, !tbaa !2428
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 48
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 4
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i64*
  %553 = load i64, i64* %552
  store i64 %553, i64* %RSI, align 8, !tbaa !2428
  %554 = load i64, i64* %PC
  %555 = sub i64 %554, 664
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 5
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 5
  store i64 %559, i64* %PC
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %561 = load i64, i64* %560, align 8, !tbaa !2428
  %562 = add i64 %561, -8
  %563 = inttoptr i64 %562 to i64*
  store i64 %557, i64* %563
  store i64 %562, i64* %560, align 8, !tbaa !2428
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %555, i64* %564, align 8, !tbaa !2428
  %565 = load i64, i64* %PC
  %566 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %565, %struct.Memory* %MEMORY.3)
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 128
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 4
  store i64 %570, i64* %PC
  store i64 %568, i64* %RDI, align 8, !tbaa !2428
  %571 = load i64, i64* %RBP
  %572 = sub i64 %571, 128
  %573 = load i64, i64* %RAX
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 4
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %572 to i64*
  store i64 %573, i64* %576
  %577 = load i64, i64* %PC
  %578 = sub i64 %577, 1269
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 5
  store i64 %582, i64* %PC
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %584 = load i64, i64* %583, align 8, !tbaa !2428
  %585 = add i64 %584, -8
  %586 = inttoptr i64 %585 to i64*
  store i64 %580, i64* %586
  store i64 %585, i64* %583, align 8, !tbaa !2428
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %578, i64* %587, align 8, !tbaa !2428
  %588 = load i64, i64* %PC
  %589 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %588, %struct.Memory* %566)
  %590 = load i64, i64* %RBP
  %591 = sub i64 %590, 16
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 4
  store i64 %593, i64* %PC
  %594 = inttoptr i64 %591 to i64*
  %595 = load i64, i64* %594
  store i64 %595, i64* %RSI, align 8, !tbaa !2428
  %596 = load i64, i64* %RAX
  %597 = load i64, i64* %RSI
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 3
  store i64 %599, i64* %PC
  %600 = inttoptr i64 %596 to i64*
  store i64 %597, i64* %600
  %601 = load i64, i64* %RSP
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 7
  store i64 %603, i64* %PC
  %604 = add i64 176, %601
  store i64 %604, i64* %RSP, align 8, !tbaa !2428
  %605 = icmp ult i64 %604, %601
  %606 = icmp ult i64 %604, 176
  %607 = or i1 %605, %606
  %608 = zext i1 %607 to i8
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %608, i8* %609, align 1, !tbaa !2433
  %610 = trunc i64 %604 to i32
  %611 = and i32 %610, 255
  %612 = call i32 @llvm.ctpop.i32(i32 %611) #16
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = xor i8 %614, 1
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %615, i8* %616, align 1, !tbaa !2447
  %617 = xor i64 176, %601
  %618 = xor i64 %617, %604
  %619 = lshr i64 %618, 4
  %620 = trunc i64 %619 to i8
  %621 = and i8 %620, 1
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %621, i8* %622, align 1, !tbaa !2448
  %623 = icmp eq i64 %604, 0
  %624 = zext i1 %623 to i8
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %624, i8* %625, align 1, !tbaa !2449
  %626 = lshr i64 %604, 63
  %627 = trunc i64 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %627, i8* %628, align 1, !tbaa !2450
  %629 = lshr i64 %601, 63
  %630 = xor i64 %626, %629
  %631 = add nuw nsw i64 %630, %626
  %632 = icmp eq i64 %631, 2
  %633 = zext i1 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %633, i8* %634, align 1, !tbaa !2451
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 1
  store i64 %636, i64* %PC
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %638 = load i64, i64* %637, align 8, !tbaa !2428
  %639 = add i64 %638, 8
  %640 = inttoptr i64 %638 to i64*
  %641 = load i64, i64* %640
  store i64 %641, i64* %RBP, align 8, !tbaa !2428
  store i64 %639, i64* %637, align 8, !tbaa !2428
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 1
  store i64 %643, i64* %PC
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %646 = load i64, i64* %645, align 8, !tbaa !2428
  %647 = inttoptr i64 %646 to i64*
  %648 = load i64, i64* %647
  store i64 %648, i64* %644, align 8, !tbaa !2428
  %649 = add i64 %646, 8
  store i64 %649, i64* %645, align 8, !tbaa !2428
  ret %struct.Memory* %589

block_40339b:                                     ; preds = %block_403342
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 17
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 5
  store i64 %653, i64* %PC
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %651, i64* %654, align 8, !tbaa !2428
  br label %block_4033ac

block_4033ac:                                     ; preds = %block_4033a0, %block_40339b
  %MEMORY.1 = phi %struct.Memory* [ %1560, %block_4033a0 ], [ %1560, %block_40339b ]
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 8
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  store i64 %656, i64* %RDI, align 8, !tbaa !2428
  %659 = load i64, i64* %RBP
  %660 = sub i64 %659, 40
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 4
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i64*
  %664 = load i64, i64* %663
  store i64 %664, i64* %RAX, align 8, !tbaa !2428
  %665 = load i64, i64* %RAX
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 4
  store i64 %667, i64* %PC
  %668 = sub i64 %665, 1
  store i64 %668, i64* %RAX, align 8, !tbaa !2428
  %669 = icmp ult i64 %665, 1
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %670, i8* %671, align 1, !tbaa !2433
  %672 = trunc i64 %668 to i32
  %673 = and i32 %672, 255
  %674 = call i32 @llvm.ctpop.i32(i32 %673) #16
  %675 = trunc i32 %674 to i8
  %676 = and i8 %675, 1
  %677 = xor i8 %676, 1
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %677, i8* %678, align 1, !tbaa !2447
  %679 = xor i64 1, %665
  %680 = xor i64 %679, %668
  %681 = lshr i64 %680, 4
  %682 = trunc i64 %681 to i8
  %683 = and i8 %682, 1
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %683, i8* %684, align 1, !tbaa !2448
  %685 = icmp eq i64 %668, 0
  %686 = zext i1 %685 to i8
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %686, i8* %687, align 1, !tbaa !2449
  %688 = lshr i64 %668, 63
  %689 = trunc i64 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %689, i8* %690, align 1, !tbaa !2450
  %691 = lshr i64 %665, 63
  %692 = xor i64 %688, %691
  %693 = add nuw nsw i64 %692, %691
  %694 = icmp eq i64 %693, 2
  %695 = zext i1 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %695, i8* %696, align 1, !tbaa !2451
  %697 = load i64, i64* %RAX
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 3
  store i64 %699, i64* %PC
  store i64 %697, i64* %RSI, align 8, !tbaa !2428
  %700 = load i64, i64* %PC
  %701 = sub i64 %700, 235
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 5
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 5
  store i64 %705, i64* %PC
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %707 = load i64, i64* %706, align 8, !tbaa !2428
  %708 = add i64 %707, -8
  %709 = inttoptr i64 %708 to i64*
  store i64 %703, i64* %709
  store i64 %708, i64* %706, align 8, !tbaa !2428
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %701, i64* %710, align 8, !tbaa !2428
  %711 = load i64, i64* %PC
  %712 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %711, %struct.Memory* %MEMORY.1)
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 72
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 4
  store i64 %716, i64* %PC
  store i64 %714, i64* %RDI, align 8, !tbaa !2428
  %717 = load i64, i64* %RBP
  %718 = sub i64 %717, 72
  %719 = load i64, i64* %RAX
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 4
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %718 to i64*
  store i64 %719, i64* %722
  %723 = load i64, i64* %PC
  %724 = sub i64 %723, 840
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 5
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  store i64 %728, i64* %PC
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %730 = load i64, i64* %729, align 8, !tbaa !2428
  %731 = add i64 %730, -8
  %732 = inttoptr i64 %731 to i64*
  store i64 %726, i64* %732
  store i64 %731, i64* %729, align 8, !tbaa !2428
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %724, i64* %733, align 8, !tbaa !2428
  %734 = load i64, i64* %PC
  %735 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %734, %struct.Memory* %712)
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 8
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 4
  store i64 %739, i64* %PC
  store i64 %737, i64* %RDI, align 8, !tbaa !2428
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 48
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RSI, align 8, !tbaa !2428
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 144
  %748 = load i64, i64* %RAX
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 7
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %747 to i64*
  store i64 %748, i64* %751
  %752 = load i64, i64* %PC
  %753 = sub i64 %752, 268
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 5
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  store i64 %757, i64* %PC
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %759 = load i64, i64* %758, align 8, !tbaa !2428
  %760 = add i64 %759, -8
  %761 = inttoptr i64 %760 to i64*
  store i64 %755, i64* %761
  store i64 %760, i64* %758, align 8, !tbaa !2428
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %762, align 8, !tbaa !2428
  %763 = load i64, i64* %PC
  %764 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %763, %struct.Memory* %735)
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 80
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  store i64 %766, i64* %RDI, align 8, !tbaa !2428
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 80
  %771 = load i64, i64* %RAX
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 4
  store i64 %773, i64* %PC
  %774 = inttoptr i64 %770 to i64*
  store i64 %771, i64* %774
  %775 = load i64, i64* %PC
  %776 = sub i64 %775, 873
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 5
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 5
  store i64 %780, i64* %PC
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %782 = load i64, i64* %781, align 8, !tbaa !2428
  %783 = add i64 %782, -8
  %784 = inttoptr i64 %783 to i64*
  store i64 %778, i64* %784
  store i64 %783, i64* %781, align 8, !tbaa !2428
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %776, i64* %785, align 8, !tbaa !2428
  %786 = load i64, i64* %PC
  %787 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %786, %struct.Memory* %764)
  %788 = load i64, i64* %RBP
  %789 = sub i64 %788, 144
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 7
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i64*
  %793 = load i64, i64* %792
  store i64 %793, i64* %RSI, align 8, !tbaa !2428
  %794 = load i64, i64* %RSI
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i64*
  %798 = load i64, i64* %797
  store i64 %798, i64* %RDI, align 8, !tbaa !2428
  %799 = load i64, i64* %RAX
  %800 = load i64, i64* %RDI
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 3
  store i64 %802, i64* %PC
  %803 = inttoptr i64 %799 to i64*
  store i64 %800, i64* %803
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 40
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i64*
  %809 = load i64, i64* %808
  store i64 %809, i64* %RAX, align 8, !tbaa !2428
  %810 = load i64, i64* %RAX
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC
  %813 = sub i64 %810, 1
  store i64 %813, i64* %RAX, align 8, !tbaa !2428
  %814 = icmp ult i64 %810, 1
  %815 = zext i1 %814 to i8
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %815, i8* %816, align 1, !tbaa !2433
  %817 = trunc i64 %813 to i32
  %818 = and i32 %817, 255
  %819 = call i32 @llvm.ctpop.i32(i32 %818) #16
  %820 = trunc i32 %819 to i8
  %821 = and i8 %820, 1
  %822 = xor i8 %821, 1
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %822, i8* %823, align 1, !tbaa !2447
  %824 = xor i64 1, %810
  %825 = xor i64 %824, %813
  %826 = lshr i64 %825, 4
  %827 = trunc i64 %826 to i8
  %828 = and i8 %827, 1
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %828, i8* %829, align 1, !tbaa !2448
  %830 = icmp eq i64 %813, 0
  %831 = zext i1 %830 to i8
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %831, i8* %832, align 1, !tbaa !2449
  %833 = lshr i64 %813, 63
  %834 = trunc i64 %833 to i8
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %834, i8* %835, align 1, !tbaa !2450
  %836 = lshr i64 %810, 63
  %837 = xor i64 %833, %836
  %838 = add nuw nsw i64 %837, %836
  %839 = icmp eq i64 %838, 2
  %840 = zext i1 %839 to i8
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %840, i8* %841, align 1, !tbaa !2451
  %842 = load i64, i64* %RBP
  %843 = sub i64 %842, 48
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 4
  store i64 %846, i64* %PC
  %847 = inttoptr i64 %843 to i64*
  store i64 %844, i64* %847
  %848 = load i64, i64* %RBP
  %849 = sub i64 %848, 40
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 4
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %849 to i64*
  %853 = load i64, i64* %852
  store i64 %853, i64* %RAX, align 8, !tbaa !2428
  %854 = load i64, i64* %RAX
  %855 = load i64, i64* %RBP
  %856 = sub i64 %855, 40
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 4
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i64*
  %860 = load i64, i64* %859
  %861 = add i64 %860, %854
  store i64 %861, i64* %RAX, align 8, !tbaa !2428
  %862 = icmp ult i64 %861, %854
  %863 = icmp ult i64 %861, %860
  %864 = or i1 %862, %863
  %865 = zext i1 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %865, i8* %866, align 1, !tbaa !2433
  %867 = trunc i64 %861 to i32
  %868 = and i32 %867, 255
  %869 = call i32 @llvm.ctpop.i32(i32 %868) #16
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = xor i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %872, i8* %873, align 1, !tbaa !2447
  %874 = xor i64 %860, %854
  %875 = xor i64 %874, %861
  %876 = lshr i64 %875, 4
  %877 = trunc i64 %876 to i8
  %878 = and i8 %877, 1
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %878, i8* %879, align 1, !tbaa !2448
  %880 = icmp eq i64 %861, 0
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %881, i8* %882, align 1, !tbaa !2449
  %883 = lshr i64 %861, 63
  %884 = trunc i64 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %884, i8* %885, align 1, !tbaa !2450
  %886 = lshr i64 %854, 63
  %887 = lshr i64 %860, 63
  %888 = xor i64 %883, %886
  %889 = xor i64 %883, %887
  %890 = add nuw nsw i64 %888, %889
  %891 = icmp eq i64 %890, 2
  %892 = zext i1 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %892, i8* %893, align 1, !tbaa !2451
  %894 = load i64, i64* %RBP
  %895 = sub i64 %894, 40
  %896 = load i64, i64* %RAX
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 4
  store i64 %898, i64* %PC
  %899 = inttoptr i64 %895 to i64*
  store i64 %896, i64* %899
  %900 = load i64, i64* %PC
  %901 = sub i64 %900, 223
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 5
  store i64 %903, i64* %PC
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %901, i64* %904, align 8, !tbaa !2428
  br label %block_403334

block_40349c:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.2 = phi %struct.Memory* [ %1207, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %463, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %905 = load i64, i64* %RAX
  %906 = load i32, i32* %EAX
  %907 = zext i32 %906 to i64
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 2
  store i64 %909, i64* %PC
  %910 = xor i64 %907, %905
  %911 = trunc i64 %910 to i32
  %912 = and i64 %910, 4294967295
  store i64 %912, i64* %RAX, align 8, !tbaa !2428
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %913, align 1, !tbaa !2433
  %914 = and i32 %911, 255
  %915 = call i32 @llvm.ctpop.i32(i32 %914) #16
  %916 = trunc i32 %915 to i8
  %917 = and i8 %916, 1
  %918 = xor i8 %917, 1
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %918, i8* %919, align 1, !tbaa !2447
  %920 = icmp eq i32 %911, 0
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %921, i8* %922, align 1, !tbaa !2449
  %923 = lshr i32 %911, 31
  %924 = trunc i32 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %924, i8* %925, align 1, !tbaa !2450
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %926, align 1, !tbaa !2451
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %927, align 1, !tbaa !2448
  %928 = load i8, i8* %AL
  %929 = zext i8 %928 to i64
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 2
  store i64 %931, i64* %PC
  store i8 %928, i8* %CL, align 1, !tbaa !2432
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 48
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 4
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to i64*
  %937 = load i64, i64* %936
  store i64 %937, i64* %RDX, align 8, !tbaa !2428
  %938 = load i64, i64* %RDX
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 32
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 4
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i64*
  %944 = load i64, i64* %943
  %945 = sub i64 %938, %944
  %946 = icmp ugt i64 %944, %938
  %947 = zext i1 %946 to i8
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %947, i8* %948, align 1, !tbaa !2433
  %949 = trunc i64 %945 to i32
  %950 = and i32 %949, 255
  %951 = call i32 @llvm.ctpop.i32(i32 %950) #16
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  %954 = xor i8 %953, 1
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %954, i8* %955, align 1, !tbaa !2447
  %956 = xor i64 %944, %938
  %957 = xor i64 %956, %945
  %958 = lshr i64 %957, 4
  %959 = trunc i64 %958 to i8
  %960 = and i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %960, i8* %961, align 1, !tbaa !2448
  %962 = icmp eq i64 %945, 0
  %963 = zext i1 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %963, i8* %964, align 1, !tbaa !2449
  %965 = lshr i64 %945, 63
  %966 = trunc i64 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2450
  %968 = lshr i64 %938, 63
  %969 = lshr i64 %944, 63
  %970 = xor i64 %969, %968
  %971 = xor i64 %965, %968
  %972 = add nuw nsw i64 %971, %970
  %973 = icmp eq i64 %972, 2
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %974, i8* %975, align 1, !tbaa !2451
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 153
  %978 = load i8, i8* %CL
  %979 = zext i8 %978 to i64
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 6
  store i64 %981, i64* %PC
  %982 = inttoptr i64 %977 to i8*
  store i8 %978, i8* %982
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 50
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 6
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 6
  store i64 %988, i64* %PC
  %989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %990 = load i8, i8* %989, align 1, !tbaa !2449
  %991 = icmp ne i8 %990, 0
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %993 = load i8, i8* %992, align 1, !tbaa !2450
  %994 = icmp ne i8 %993, 0
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %996 = load i8, i8* %995, align 1, !tbaa !2451
  %997 = icmp ne i8 %996, 0
  %998 = xor i1 %994, %997
  %999 = or i1 %991, %998
  %1000 = zext i1 %999 to i8
  store i8 %1000, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1002 = select i1 %999, i64 %984, i64 %986
  store i64 %1002, i64* %1001, align 8, !tbaa !2428
  %1003 = load i8, i8* %BRANCH_TAKEN
  %1004 = icmp eq i8 %1003, 1
  br i1 %1004, label %block_4034e0, label %block_4034b4

block_4034e0:                                     ; preds = %block_4034b4, %block_40349c
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_40349c ], [ %1110, %block_4034b4 ]
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 153
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 6
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1006 to i8*
  %1010 = load i8, i8* %1009
  store i8 %1010, i8* %AL, align 1, !tbaa !2432
  %1011 = load i8, i8* %AL
  %1012 = zext i8 %1011 to i64
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 2
  store i64 %1014, i64* %PC
  %1015 = and i64 1, %1012
  %1016 = trunc i64 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1017, align 1, !tbaa !2433
  %1018 = trunc i64 %1015 to i32
  %1019 = and i32 %1018, 255
  %1020 = call i32 @llvm.ctpop.i32(i32 %1019) #16
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = xor i8 %1022, 1
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1023, i8* %1024, align 1, !tbaa !2447
  %1025 = icmp eq i8 %1016, 0
  %1026 = zext i1 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1026, i8* %1027, align 1, !tbaa !2449
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1028, align 1, !tbaa !2450
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1029, align 1, !tbaa !2451
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1030, align 1, !tbaa !2448
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 11
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 6
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 6
  store i64 %1036, i64* %PC
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1038 = load i8, i8* %1037, align 1, !tbaa !2449
  %1039 = icmp eq i8 %1038, 0
  %1040 = zext i1 %1039 to i8
  store i8 %1040, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1042 = select i1 %1039, i64 %1032, i64 %1034
  store i64 %1042, i64* %1041, align 8, !tbaa !2428
  %1043 = load i8, i8* %BRANCH_TAKEN
  %1044 = icmp eq i8 %1043, 1
  br i1 %1044, label %block_4034f3, label %block_4034ee

block_4034b4:                                     ; preds = %block_40349c
  %1045 = load i64, i64* %RBP
  %1046 = sub i64 %1045, 8
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 4
  store i64 %1048, i64* %PC
  store i64 %1046, i64* %RDI, align 8, !tbaa !2428
  %1049 = load i64, i64* %RBP
  %1050 = sub i64 %1049, 40
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 4
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RSI, align 8, !tbaa !2428
  %1055 = load i64, i64* %PC
  %1056 = sub i64 %1055, 492
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 5
  store i64 %1060, i64* %PC
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1062 = load i64, i64* %1061, align 8, !tbaa !2428
  %1063 = add i64 %1062, -8
  %1064 = inttoptr i64 %1063 to i64*
  store i64 %1058, i64* %1064
  store i64 %1063, i64* %1061, align 8, !tbaa !2428
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1065, align 8, !tbaa !2428
  %1066 = load i64, i64* %PC
  %1067 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1066, %struct.Memory* %MEMORY.2)
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 104
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 4
  store i64 %1071, i64* %PC
  store i64 %1069, i64* %RDI, align 8, !tbaa !2428
  %1072 = load i64, i64* %RBP
  %1073 = sub i64 %1072, 104
  %1074 = load i64, i64* %RAX
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1073 to i64*
  store i64 %1074, i64* %1077
  %1078 = load i64, i64* %PC
  %1079 = sub i64 %1078, 1097
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 5
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 5
  store i64 %1083, i64* %PC
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1085 = load i64, i64* %1084, align 8, !tbaa !2428
  %1086 = add i64 %1085, -8
  %1087 = inttoptr i64 %1086 to i64*
  store i64 %1081, i64* %1087
  store i64 %1086, i64* %1084, align 8, !tbaa !2428
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1079, i64* %1088, align 8, !tbaa !2428
  %1089 = load i64, i64* %PC
  %1090 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1089, %struct.Memory* %1067)
  %1091 = load i64, i64* %RBP
  %1092 = sub i64 %1091, 16
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 4
  store i64 %1094, i64* %PC
  store i64 %1092, i64* %RSI, align 8, !tbaa !2428
  %1095 = load i64, i64* %RAX
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 3
  store i64 %1097, i64* %PC
  store i64 %1095, i64* %RDI, align 8, !tbaa !2428
  %1098 = load i64, i64* %PC
  %1099 = sub i64 %1098, 1077
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 5
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 5
  store i64 %1103, i64* %PC
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1105 = load i64, i64* %1104, align 8, !tbaa !2428
  %1106 = add i64 %1105, -8
  %1107 = inttoptr i64 %1106 to i64*
  store i64 %1101, i64* %1107
  store i64 %1106, i64* %1104, align 8, !tbaa !2428
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1099, i64* %1108, align 8, !tbaa !2428
  %1109 = load i64, i64* %PC
  %1110 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %1109, %struct.Memory* %1090)
  %1111 = load i64, i64* %RBP
  %1112 = sub i64 %1111, 153
  %1113 = load i8, i8* %AL
  %1114 = zext i8 %1113 to i64
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 6
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1112 to i8*
  store i8 %1113, i8* %1117
  br label %block_4034e0

block_403481:                                     ; preds = %block_403426, %block_403418
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_403418 ], [ %1346, %block_403426 ]
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 5
  store i64 %1119, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %1120 = load i32, i32* %EAX
  %1121 = zext i32 %1120 to i64
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 2
  store i64 %1123, i64* %PC
  %1124 = and i64 %1121, 4294967295
  store i64 %1124, i64* %RCX, align 8, !tbaa !2428
  %1125 = load i64, i64* %RBP
  %1126 = sub i64 %1125, 48
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 4
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1126 to i64*
  %1130 = load i64, i64* %1129
  store i64 %1130, i64* %RDX, align 8, !tbaa !2428
  %1131 = load i64, i64* %RDX
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 4
  store i64 %1133, i64* %PC
  %1134 = sub i64 %1131, 1
  store i64 %1134, i64* %RDX, align 8, !tbaa !2428
  %1135 = icmp ult i64 %1131, 1
  %1136 = zext i1 %1135 to i8
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1136, i8* %1137, align 1, !tbaa !2433
  %1138 = trunc i64 %1134 to i32
  %1139 = and i32 %1138, 255
  %1140 = call i32 @llvm.ctpop.i32(i32 %1139) #16
  %1141 = trunc i32 %1140 to i8
  %1142 = and i8 %1141, 1
  %1143 = xor i8 %1142, 1
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1143, i8* %1144, align 1, !tbaa !2447
  %1145 = xor i64 1, %1131
  %1146 = xor i64 %1145, %1134
  %1147 = lshr i64 %1146, 4
  %1148 = trunc i64 %1147 to i8
  %1149 = and i8 %1148, 1
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1149, i8* %1150, align 1, !tbaa !2448
  %1151 = icmp eq i64 %1134, 0
  %1152 = zext i1 %1151 to i8
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1152, i8* %1153, align 1, !tbaa !2449
  %1154 = lshr i64 %1134, 63
  %1155 = trunc i64 %1154 to i8
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1155, i8* %1156, align 1, !tbaa !2450
  %1157 = lshr i64 %1131, 63
  %1158 = xor i64 %1154, %1157
  %1159 = add nuw nsw i64 %1158, %1157
  %1160 = icmp eq i64 %1159, 2
  %1161 = zext i1 %1160 to i8
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1161, i8* %1162, align 1, !tbaa !2451
  %1163 = load i64, i64* %RDX
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 3
  store i64 %1165, i64* %PC
  store i64 %1163, i64* %RAX, align 8, !tbaa !2428
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 2
  store i64 %1167, i64* %PC
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1170 = load i64, i64* %1169, align 8, !tbaa !2428
  %1171 = ashr i64 %1170, 63
  store i64 %1171, i64* %1168, align 8, !tbaa !2428
  %1172 = load i64, i64* %RCX
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 3
  store i64 %1174, i64* %PC
  %1175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1176 = load i64, i64* %1175, align 8, !tbaa !2428
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1178 = load i64, i64* %1177, align 8, !tbaa !2428
  %1179 = sext i64 %1172 to i128
  %1180 = and i128 %1179, -18446744073709551616
  %1181 = zext i64 %1178 to i128
  %1182 = shl nuw i128 %1181, 64
  %1183 = zext i64 %1176 to i128
  %1184 = or i128 %1182, %1183
  %1185 = zext i64 %1172 to i128
  %1186 = or i128 %1180, %1185
  %1187 = sdiv i128 %1184, %1186
  %1188 = trunc i128 %1187 to i64
  %1189 = and i128 %1187, 18446744073709551615
  %1190 = sext i64 %1188 to i128
  %1191 = and i128 %1190, -18446744073709551616
  %1192 = or i128 %1191, %1189
  %1193 = icmp eq i128 %1187, %1192
  br i1 %1193, label %1198, label %1194

; <label>:1194:                                   ; preds = %block_403481
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1196 = load i64, i64* %1195, align 8, !tbaa !2428
  %1197 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1196, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:1198:                                   ; preds = %block_403481
  %1199 = srem i128 %1184, %1186
  %1200 = trunc i128 %1199 to i64
  store i64 %1188, i64* %1175, align 8, !tbaa !2428
  store i64 %1200, i64* %1177, align 8, !tbaa !2428
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1201, align 1, !tbaa !2433
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1202, align 1, !tbaa !2447
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1203, align 1, !tbaa !2448
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1204, align 1, !tbaa !2449
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1205, align 1, !tbaa !2450
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1206, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %1194, %1198
  %1207 = phi %struct.Memory* [ %1197, %1194 ], [ %MEMORY.4, %1198 ]
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 40
  %1210 = load i64, i64* %RAX
  %1211 = load i64, i64* %PC
  %1212 = add i64 %1211, 4
  store i64 %1212, i64* %PC
  %1213 = inttoptr i64 %1209 to i64*
  store i64 %1210, i64* %1213
  br label %block_40349c

block_403426:                                     ; preds = %block_403418
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 8
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 4
  store i64 %1217, i64* %PC
  store i64 %1215, i64* %RDI, align 8, !tbaa !2428
  %1218 = load i64, i64* %RBP
  %1219 = sub i64 %1218, 40
  %1220 = load i64, i64* %PC
  %1221 = add i64 %1220, 4
  store i64 %1221, i64* %PC
  %1222 = inttoptr i64 %1219 to i64*
  %1223 = load i64, i64* %1222
  store i64 %1223, i64* %RAX, align 8, !tbaa !2428
  %1224 = load i64, i64* %RAX
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 4
  store i64 %1226, i64* %PC
  %1227 = sub i64 %1224, 1
  store i64 %1227, i64* %RAX, align 8, !tbaa !2428
  %1228 = icmp ult i64 %1224, 1
  %1229 = zext i1 %1228 to i8
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1229, i8* %1230, align 1, !tbaa !2433
  %1231 = trunc i64 %1227 to i32
  %1232 = and i32 %1231, 255
  %1233 = call i32 @llvm.ctpop.i32(i32 %1232) #16
  %1234 = trunc i32 %1233 to i8
  %1235 = and i8 %1234, 1
  %1236 = xor i8 %1235, 1
  %1237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1236, i8* %1237, align 1, !tbaa !2447
  %1238 = xor i64 1, %1224
  %1239 = xor i64 %1238, %1227
  %1240 = lshr i64 %1239, 4
  %1241 = trunc i64 %1240 to i8
  %1242 = and i8 %1241, 1
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1242, i8* %1243, align 1, !tbaa !2448
  %1244 = icmp eq i64 %1227, 0
  %1245 = zext i1 %1244 to i8
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1245, i8* %1246, align 1, !tbaa !2449
  %1247 = lshr i64 %1227, 63
  %1248 = trunc i64 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1248, i8* %1249, align 1, !tbaa !2450
  %1250 = lshr i64 %1224, 63
  %1251 = xor i64 %1247, %1250
  %1252 = add nuw nsw i64 %1251, %1250
  %1253 = icmp eq i64 %1252, 2
  %1254 = zext i1 %1253 to i8
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1254, i8* %1255, align 1, !tbaa !2451
  %1256 = load i64, i64* %RAX
  %1257 = load i64, i64* %PC
  %1258 = add i64 %1257, 3
  store i64 %1258, i64* %PC
  store i64 %1256, i64* %RSI, align 8, !tbaa !2428
  %1259 = load i64, i64* %PC
  %1260 = sub i64 %1259, 357
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 5
  %1263 = load i64, i64* %PC
  %1264 = add i64 %1263, 5
  store i64 %1264, i64* %PC
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1266 = load i64, i64* %1265, align 8, !tbaa !2428
  %1267 = add i64 %1266, -8
  %1268 = inttoptr i64 %1267 to i64*
  store i64 %1262, i64* %1268
  store i64 %1267, i64* %1265, align 8, !tbaa !2428
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1260, i64* %1269, align 8, !tbaa !2428
  %1270 = load i64, i64* %PC
  %1271 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1270, %struct.Memory* %MEMORY.0)
  %1272 = load i64, i64* %RBP
  %1273 = sub i64 %1272, 88
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 4
  store i64 %1275, i64* %PC
  store i64 %1273, i64* %RDI, align 8, !tbaa !2428
  %1276 = load i64, i64* %RBP
  %1277 = sub i64 %1276, 88
  %1278 = load i64, i64* %RAX
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 4
  store i64 %1280, i64* %PC
  %1281 = inttoptr i64 %1277 to i64*
  store i64 %1278, i64* %1281
  %1282 = load i64, i64* %PC
  %1283 = sub i64 %1282, 962
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 5
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 5
  store i64 %1287, i64* %PC
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1289 = load i64, i64* %1288, align 8, !tbaa !2428
  %1290 = add i64 %1289, -8
  %1291 = inttoptr i64 %1290 to i64*
  store i64 %1285, i64* %1291
  store i64 %1290, i64* %1288, align 8, !tbaa !2428
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1283, i64* %1292, align 8, !tbaa !2428
  %1293 = load i64, i64* %PC
  %1294 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1293, %struct.Memory* %1271)
  %1295 = load i64, i64* %RBP
  %1296 = sub i64 %1295, 8
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 4
  store i64 %1298, i64* %PC
  store i64 %1296, i64* %RDI, align 8, !tbaa !2428
  %1299 = load i64, i64* %RBP
  %1300 = sub i64 %1299, 48
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 4
  store i64 %1302, i64* %PC
  %1303 = inttoptr i64 %1300 to i64*
  %1304 = load i64, i64* %1303
  store i64 %1304, i64* %RSI, align 8, !tbaa !2428
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 152
  %1307 = load i64, i64* %RAX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 7
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1306 to i64*
  store i64 %1307, i64* %1310
  %1311 = load i64, i64* %PC
  %1312 = sub i64 %1311, 390
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 5
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 5
  store i64 %1316, i64* %PC
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1318 = load i64, i64* %1317, align 8, !tbaa !2428
  %1319 = add i64 %1318, -8
  %1320 = inttoptr i64 %1319 to i64*
  store i64 %1314, i64* %1320
  store i64 %1319, i64* %1317, align 8, !tbaa !2428
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1312, i64* %1321, align 8, !tbaa !2428
  %1322 = load i64, i64* %PC
  %1323 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1322, %struct.Memory* %1294)
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 96
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 4
  store i64 %1327, i64* %PC
  store i64 %1325, i64* %RDI, align 8, !tbaa !2428
  %1328 = load i64, i64* %RBP
  %1329 = sub i64 %1328, 96
  %1330 = load i64, i64* %RAX
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 4
  store i64 %1332, i64* %PC
  %1333 = inttoptr i64 %1329 to i64*
  store i64 %1330, i64* %1333
  %1334 = load i64, i64* %PC
  %1335 = sub i64 %1334, 995
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 5
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 5
  store i64 %1339, i64* %PC
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1341 = load i64, i64* %1340, align 8, !tbaa !2428
  %1342 = add i64 %1341, -8
  %1343 = inttoptr i64 %1342 to i64*
  store i64 %1337, i64* %1343
  store i64 %1342, i64* %1340, align 8, !tbaa !2428
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1335, i64* %1344, align 8, !tbaa !2428
  %1345 = load i64, i64* %PC
  %1346 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1345, %struct.Memory* %1323)
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 152
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 7
  store i64 %1350, i64* %PC
  %1351 = inttoptr i64 %1348 to i64*
  %1352 = load i64, i64* %1351
  store i64 %1352, i64* %RSI, align 8, !tbaa !2428
  %1353 = load i64, i64* %RSI
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 3
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1353 to i64*
  %1357 = load i64, i64* %1356
  store i64 %1357, i64* %RDI, align 8, !tbaa !2428
  %1358 = load i64, i64* %RAX
  %1359 = load i64, i64* %RDI
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 3
  store i64 %1361, i64* %PC
  %1362 = inttoptr i64 %1358 to i64*
  store i64 %1359, i64* %1362
  %1363 = load i64, i64* %RBP
  %1364 = sub i64 %1363, 40
  %1365 = load i64, i64* %PC
  %1366 = add i64 %1365, 4
  store i64 %1366, i64* %PC
  %1367 = inttoptr i64 %1364 to i64*
  %1368 = load i64, i64* %1367
  store i64 %1368, i64* %RAX, align 8, !tbaa !2428
  %1369 = load i64, i64* %RAX
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 4
  store i64 %1371, i64* %PC
  %1372 = sub i64 %1369, 1
  store i64 %1372, i64* %RAX, align 8, !tbaa !2428
  %1373 = icmp ult i64 %1369, 1
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1374, i8* %1375, align 1, !tbaa !2433
  %1376 = trunc i64 %1372 to i32
  %1377 = and i32 %1376, 255
  %1378 = call i32 @llvm.ctpop.i32(i32 %1377) #16
  %1379 = trunc i32 %1378 to i8
  %1380 = and i8 %1379, 1
  %1381 = xor i8 %1380, 1
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1381, i8* %1382, align 1, !tbaa !2447
  %1383 = xor i64 1, %1369
  %1384 = xor i64 %1383, %1372
  %1385 = lshr i64 %1384, 4
  %1386 = trunc i64 %1385 to i8
  %1387 = and i8 %1386, 1
  %1388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1387, i8* %1388, align 1, !tbaa !2448
  %1389 = icmp eq i64 %1372, 0
  %1390 = zext i1 %1389 to i8
  %1391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1390, i8* %1391, align 1, !tbaa !2449
  %1392 = lshr i64 %1372, 63
  %1393 = trunc i64 %1392 to i8
  %1394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1393, i8* %1394, align 1, !tbaa !2450
  %1395 = lshr i64 %1369, 63
  %1396 = xor i64 %1392, %1395
  %1397 = add nuw nsw i64 %1396, %1395
  %1398 = icmp eq i64 %1397, 2
  %1399 = zext i1 %1398 to i8
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1399, i8* %1400, align 1, !tbaa !2451
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 48
  %1403 = load i64, i64* %RAX
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 4
  store i64 %1405, i64* %PC
  %1406 = inttoptr i64 %1402 to i64*
  store i64 %1403, i64* %1406
  br label %block_403481

block_403342:                                     ; preds = %block_403334
  %1407 = sub i64 %538, 8
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 4
  store i64 %1409, i64* %PC
  store i64 %1407, i64* %RDI, align 8, !tbaa !2428
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 40
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 4
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i64*
  %1415 = load i64, i64* %1414
  store i64 %1415, i64* %RAX, align 8, !tbaa !2428
  %1416 = load i64, i64* %RAX
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 4
  store i64 %1418, i64* %PC
  %1419 = sub i64 %1416, 1
  store i64 %1419, i64* %RAX, align 8, !tbaa !2428
  %1420 = icmp ult i64 %1416, 1
  %1421 = zext i1 %1420 to i8
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1421, i8* %1422, align 1, !tbaa !2433
  %1423 = trunc i64 %1419 to i32
  %1424 = and i32 %1423, 255
  %1425 = call i32 @llvm.ctpop.i32(i32 %1424) #16
  %1426 = trunc i32 %1425 to i8
  %1427 = and i8 %1426, 1
  %1428 = xor i8 %1427, 1
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1428, i8* %1429, align 1, !tbaa !2447
  %1430 = xor i64 1, %1416
  %1431 = xor i64 %1430, %1419
  %1432 = lshr i64 %1431, 4
  %1433 = trunc i64 %1432 to i8
  %1434 = and i8 %1433, 1
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1434, i8* %1435, align 1, !tbaa !2448
  %1436 = icmp eq i64 %1419, 0
  %1437 = zext i1 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1437, i8* %1438, align 1, !tbaa !2449
  %1439 = lshr i64 %1419, 63
  %1440 = trunc i64 %1439 to i8
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1440, i8* %1441, align 1, !tbaa !2450
  %1442 = lshr i64 %1416, 63
  %1443 = xor i64 %1439, %1442
  %1444 = add nuw nsw i64 %1443, %1442
  %1445 = icmp eq i64 %1444, 2
  %1446 = zext i1 %1445 to i8
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1446, i8* %1447, align 1, !tbaa !2451
  %1448 = load i64, i64* %RAX
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 3
  store i64 %1450, i64* %PC
  store i64 %1448, i64* %RSI, align 8, !tbaa !2428
  %1451 = load i64, i64* %PC
  %1452 = sub i64 %1451, 129
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 5
  %1455 = load i64, i64* %PC
  %1456 = add i64 %1455, 5
  store i64 %1456, i64* %PC
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1458 = load i64, i64* %1457, align 8, !tbaa !2428
  %1459 = add i64 %1458, -8
  %1460 = inttoptr i64 %1459 to i64*
  store i64 %1454, i64* %1460
  store i64 %1459, i64* %1457, align 8, !tbaa !2428
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1452, i64* %1461, align 8, !tbaa !2428
  %1462 = load i64, i64* %PC
  %1463 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1462, %struct.Memory* %MEMORY.0)
  %1464 = load i64, i64* %RBP
  %1465 = sub i64 %1464, 56
  %1466 = load i64, i64* %PC
  %1467 = add i64 %1466, 4
  store i64 %1467, i64* %PC
  store i64 %1465, i64* %RDI, align 8, !tbaa !2428
  %1468 = load i64, i64* %RBP
  %1469 = sub i64 %1468, 56
  %1470 = load i64, i64* %RAX
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 4
  store i64 %1472, i64* %PC
  %1473 = inttoptr i64 %1469 to i64*
  store i64 %1470, i64* %1473
  %1474 = load i64, i64* %PC
  %1475 = sub i64 %1474, 734
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 5
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 5
  store i64 %1479, i64* %PC
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1481 = load i64, i64* %1480, align 8, !tbaa !2428
  %1482 = add i64 %1481, -8
  %1483 = inttoptr i64 %1482 to i64*
  store i64 %1477, i64* %1483
  store i64 %1482, i64* %1480, align 8, !tbaa !2428
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1475, i64* %1484, align 8, !tbaa !2428
  %1485 = load i64, i64* %PC
  %1486 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1485, %struct.Memory* %1463)
  %1487 = load i64, i64* %RBP
  %1488 = sub i64 %1487, 8
  %1489 = load i64, i64* %PC
  %1490 = add i64 %1489, 4
  store i64 %1490, i64* %PC
  store i64 %1488, i64* %RDI, align 8, !tbaa !2428
  %1491 = load i64, i64* %RBP
  %1492 = sub i64 %1491, 40
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 4
  store i64 %1494, i64* %PC
  %1495 = inttoptr i64 %1492 to i64*
  %1496 = load i64, i64* %1495
  store i64 %1496, i64* %RSI, align 8, !tbaa !2428
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 136
  %1499 = load i64, i64* %RAX
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 7
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1498 to i64*
  store i64 %1499, i64* %1502
  %1503 = load i64, i64* %PC
  %1504 = sub i64 %1503, 162
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 5
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 5
  store i64 %1508, i64* %PC
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1510 = load i64, i64* %1509, align 8, !tbaa !2428
  %1511 = add i64 %1510, -8
  %1512 = inttoptr i64 %1511 to i64*
  store i64 %1506, i64* %1512
  store i64 %1511, i64* %1509, align 8, !tbaa !2428
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1504, i64* %1513, align 8, !tbaa !2428
  %1514 = load i64, i64* %PC
  %1515 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1514, %struct.Memory* %1486)
  %1516 = load i64, i64* %RBP
  %1517 = sub i64 %1516, 64
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 4
  store i64 %1519, i64* %PC
  store i64 %1517, i64* %RDI, align 8, !tbaa !2428
  %1520 = load i64, i64* %RBP
  %1521 = sub i64 %1520, 64
  %1522 = load i64, i64* %RAX
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 4
  store i64 %1524, i64* %PC
  %1525 = inttoptr i64 %1521 to i64*
  store i64 %1522, i64* %1525
  %1526 = load i64, i64* %PC
  %1527 = sub i64 %1526, 767
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 5
  %1530 = load i64, i64* %PC
  %1531 = add i64 %1530, 5
  store i64 %1531, i64* %PC
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1533 = load i64, i64* %1532, align 8, !tbaa !2428
  %1534 = add i64 %1533, -8
  %1535 = inttoptr i64 %1534 to i64*
  store i64 %1529, i64* %1535
  store i64 %1534, i64* %1532, align 8, !tbaa !2428
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1527, i64* %1536, align 8, !tbaa !2428
  %1537 = load i64, i64* %PC
  %1538 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1537, %struct.Memory* %1515)
  %1539 = load i64, i64* %RBP
  %1540 = sub i64 %1539, 136
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 7
  store i64 %1542, i64* %PC
  %1543 = inttoptr i64 %1540 to i64*
  %1544 = load i64, i64* %1543
  store i64 %1544, i64* %RDI, align 8, !tbaa !2428
  %1545 = load i64, i64* %RAX
  %1546 = load i64, i64* %PC
  %1547 = add i64 %1546, 3
  store i64 %1547, i64* %PC
  store i64 %1545, i64* %RSI, align 8, !tbaa !2428
  %1548 = load i64, i64* %PC
  %1549 = sub i64 %1548, 750
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 5
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 5
  store i64 %1553, i64* %PC
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1555 = load i64, i64* %1554, align 8, !tbaa !2428
  %1556 = add i64 %1555, -8
  %1557 = inttoptr i64 %1556 to i64*
  store i64 %1551, i64* %1557
  store i64 %1556, i64* %1554, align 8, !tbaa !2428
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1549, i64* %1558, align 8, !tbaa !2428
  %1559 = load i64, i64* %PC
  %1560 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %1559, %struct.Memory* %1538)
  %1561 = load i8, i8* %AL
  %1562 = zext i8 %1561 to i64
  %1563 = load i64, i64* %PC
  %1564 = add i64 %1563, 2
  store i64 %1564, i64* %PC
  %1565 = and i64 1, %1562
  %1566 = trunc i64 %1565 to i8
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1567, align 1, !tbaa !2433
  %1568 = trunc i64 %1565 to i32
  %1569 = and i32 %1568, 255
  %1570 = call i32 @llvm.ctpop.i32(i32 %1569) #16
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  %1573 = xor i8 %1572, 1
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1573, i8* %1574, align 1, !tbaa !2447
  %1575 = icmp eq i8 %1566, 0
  %1576 = zext i1 %1575 to i8
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1576, i8* %1577, align 1, !tbaa !2449
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1578, align 1, !tbaa !2450
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1579, align 1, !tbaa !2451
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1580, align 1, !tbaa !2448
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 11
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 6
  %1585 = load i64, i64* %PC
  %1586 = add i64 %1585, 6
  store i64 %1586, i64* %PC
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1588 = load i8, i8* %1587, align 1, !tbaa !2449
  %1589 = icmp eq i8 %1588, 0
  %1590 = zext i1 %1589 to i8
  store i8 %1590, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1592 = select i1 %1589, i64 %1582, i64 %1584
  store i64 %1592, i64* %1591, align 8, !tbaa !2428
  %1593 = load i8, i8* %BRANCH_TAKEN
  %1594 = icmp eq i8 %1593, 1
  br i1 %1594, label %block_4033a0, label %block_40339b

block_4033a0:                                     ; preds = %block_403342
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 40
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 4
  store i64 %1598, i64* %PC
  %1599 = inttoptr i64 %1596 to i64*
  %1600 = load i64, i64* %1599
  store i64 %1600, i64* %RAX, align 8, !tbaa !2428
  %1601 = load i64, i64* %RAX
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 4
  store i64 %1603, i64* %PC
  %1604 = add i64 1, %1601
  store i64 %1604, i64* %RAX, align 8, !tbaa !2428
  %1605 = icmp ult i64 %1604, %1601
  %1606 = icmp ult i64 %1604, 1
  %1607 = or i1 %1605, %1606
  %1608 = zext i1 %1607 to i8
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1608, i8* %1609, align 1, !tbaa !2433
  %1610 = trunc i64 %1604 to i32
  %1611 = and i32 %1610, 255
  %1612 = call i32 @llvm.ctpop.i32(i32 %1611) #16
  %1613 = trunc i32 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = xor i8 %1614, 1
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1615, i8* %1616, align 1, !tbaa !2447
  %1617 = xor i64 1, %1601
  %1618 = xor i64 %1617, %1604
  %1619 = lshr i64 %1618, 4
  %1620 = trunc i64 %1619 to i8
  %1621 = and i8 %1620, 1
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1621, i8* %1622, align 1, !tbaa !2448
  %1623 = icmp eq i64 %1604, 0
  %1624 = zext i1 %1623 to i8
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1624, i8* %1625, align 1, !tbaa !2449
  %1626 = lshr i64 %1604, 63
  %1627 = trunc i64 %1626 to i8
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1627, i8* %1628, align 1, !tbaa !2450
  %1629 = lshr i64 %1601, 63
  %1630 = xor i64 %1626, %1629
  %1631 = add nuw nsw i64 %1630, %1626
  %1632 = icmp eq i64 %1631, 2
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1633, i8* %1634, align 1, !tbaa !2451
  %1635 = load i64, i64* %RBP
  %1636 = sub i64 %1635, 40
  %1637 = load i64, i64* %RAX
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 4
  store i64 %1639, i64* %PC
  %1640 = inttoptr i64 %1636 to i64*
  store i64 %1637, i64* %1640
  br label %block_4033ac
}

; Function Attrs: noinline
define %struct.Memory* @sub_404c90__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404c90:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %47 to %union.vec128_t*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = load i64, i64* %RBP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 1
  store i64 %52, i64* %PC
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %54 = load i64, i64* %53, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %50, i64* %56
  store i64 %55, i64* %53, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RBP, align 8, !tbaa !2428
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 24
  %74 = load i64, i64* %RDX
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %73 to i64*
  store i64 %74, i64* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 32
  %80 = bitcast %union.vec128_t* %XMM0 to i8*
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC
  %83 = bitcast i8* %80 to double*
  %84 = load double, double* %83, align 1
  %85 = inttoptr i64 %79 to double*
  store double %84, double* %85
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 24
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %87 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %RDX, align 8, !tbaa !2428
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 48
  %94 = load i64, i64* %RDX
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %93 to i64*
  store i64 %94, i64* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 48
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %99 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %RDX, align 8, !tbaa !2428
  %104 = load i64, i64* %RDX
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC
  %107 = add i64 1, %104
  store i64 %107, i64* %RDX, align 8, !tbaa !2428
  %108 = icmp ult i64 %107, %104
  %109 = icmp ult i64 %107, 1
  %110 = or i1 %108, %109
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %111, i8* %112, align 1, !tbaa !2433
  %113 = trunc i64 %107 to i32
  %114 = and i32 %113, 255
  %115 = call i32 @llvm.ctpop.i32(i32 %114) #16
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %118, i8* %119, align 1, !tbaa !2447
  %120 = xor i64 1, %104
  %121 = xor i64 %120, %107
  %122 = lshr i64 %121, 4
  %123 = trunc i64 %122 to i8
  %124 = and i8 %123, 1
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %124, i8* %125, align 1, !tbaa !2448
  %126 = icmp eq i64 %107, 0
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %127, i8* %128, align 1, !tbaa !2449
  %129 = lshr i64 %107, 63
  %130 = trunc i64 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = lshr i64 %104, 63
  %133 = xor i64 %129, %132
  %134 = add nuw nsw i64 %133, %129
  %135 = icmp eq i64 %134, 2
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %136, i8* %137, align 1, !tbaa !2451
  %138 = load i64, i64* %RDX
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = shl i64 %138, 1
  %142 = icmp slt i64 %138, 0
  %143 = icmp slt i64 %141, 0
  %144 = xor i1 %142, %143
  store i64 %141, i64* %RDX, align 8, !tbaa !2428
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %146 = zext i1 %142 to i8
  store i8 %146, i8* %145, align 1, !tbaa !2432
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %148 = trunc i64 %141 to i32
  %149 = and i32 %148, 254
  %150 = call i32 @llvm.ctpop.i32(i32 %149) #16
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  store i8 %153, i8* %147, align 1, !tbaa !2432
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %154, align 1, !tbaa !2432
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %156 = icmp eq i64 %141, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %155, align 1, !tbaa !2432
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %159 = lshr i64 %141, 63
  %160 = trunc i64 %159 to i8
  store i8 %160, i8* %158, align 1, !tbaa !2432
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %162 = zext i1 %144 to i8
  store i8 %162, i8* %161, align 1, !tbaa !2432
  %163 = load i64, i64* %RBP
  %164 = sub i64 %163, 40
  %165 = load i64, i64* %RDX
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %164 to i64*
  store i64 %165, i64* %168
  br label %block_404cbd

block_404cff:                                     ; preds = %block_404cf3, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %MEMORY.0 = phi %struct.Memory* [ %883, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %883, %block_404cf3 ]
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 40
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RCX, align 8, !tbaa !2428
  %181 = load i64, i64* %RCX
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 4
  store i64 %183, i64* %PC
  %184 = sub i64 %181, 1
  store i64 %184, i64* %RCX, align 8, !tbaa !2428
  %185 = icmp ult i64 %181, 1
  %186 = zext i1 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %186, i8* %187, align 1, !tbaa !2433
  %188 = trunc i64 %184 to i32
  %189 = and i32 %188, 255
  %190 = call i32 @llvm.ctpop.i32(i32 %189) #16
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  %193 = xor i8 %192, 1
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %193, i8* %194, align 1, !tbaa !2447
  %195 = xor i64 1, %181
  %196 = xor i64 %195, %184
  %197 = lshr i64 %196, 4
  %198 = trunc i64 %197 to i8
  %199 = and i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %199, i8* %200, align 1, !tbaa !2448
  %201 = icmp eq i64 %184, 0
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %202, i8* %203, align 1, !tbaa !2449
  %204 = lshr i64 %184, 63
  %205 = trunc i64 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %205, i8* %206, align 1, !tbaa !2450
  %207 = lshr i64 %181, 63
  %208 = xor i64 %204, %207
  %209 = add nuw nsw i64 %208, %207
  %210 = icmp eq i64 %209, 2
  %211 = zext i1 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %211, i8* %212, align 1, !tbaa !2451
  %213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %RCX
  %216 = mul i64 %215, 8
  %217 = add i64 %216, %214
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 5
  store i64 %219, i64* %PC
  %220 = inttoptr i64 %217 to double*
  %221 = load double, double* %220
  %222 = bitcast i8* %213 to double*
  store double %221, double* %222, align 1, !tbaa !2452
  %223 = getelementptr inbounds i8, i8* %213, i64 8
  %224 = bitcast i8* %223 to double*
  store double 0.000000e+00, double* %224, align 1, !tbaa !2452
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 16
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 48
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RCX, align 8, !tbaa !2428
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %RCX
  %239 = mul i64 %238, 8
  %240 = add i64 %239, %237
  %241 = bitcast %union.vec128_t* %XMM0 to i8*
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 5
  store i64 %243, i64* %PC
  %244 = bitcast i8* %241 to double*
  %245 = load double, double* %244, align 1
  %246 = inttoptr i64 %240 to double*
  store double %245, double* %246
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 40
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 4
  store i64 %250, i64* %PC
  %251 = inttoptr i64 %248 to i64*
  %252 = load i64, i64* %251
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  %253 = load i64, i64* %RAX
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC
  %256 = sub i64 %253, 1
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = icmp ult i64 %253, 1
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %258, i8* %259, align 1, !tbaa !2433
  %260 = trunc i64 %256 to i32
  %261 = and i32 %260, 255
  %262 = call i32 @llvm.ctpop.i32(i32 %261) #16
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %265, i8* %266, align 1, !tbaa !2447
  %267 = xor i64 1, %253
  %268 = xor i64 %267, %256
  %269 = lshr i64 %268, 4
  %270 = trunc i64 %269 to i8
  %271 = and i8 %270, 1
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %271, i8* %272, align 1, !tbaa !2448
  %273 = icmp eq i64 %256, 0
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %274, i8* %275, align 1, !tbaa !2449
  %276 = lshr i64 %256, 63
  %277 = trunc i64 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %277, i8* %278, align 1, !tbaa !2450
  %279 = lshr i64 %253, 63
  %280 = xor i64 %276, %279
  %281 = add nuw nsw i64 %280, %279
  %282 = icmp eq i64 %281, 2
  %283 = zext i1 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %283, i8* %284, align 1, !tbaa !2451
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 48
  %287 = load i64, i64* %RAX
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 4
  store i64 %289, i64* %PC
  %290 = inttoptr i64 %286 to i64*
  store i64 %287, i64* %290
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 40
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 4
  store i64 %294, i64* %PC
  %295 = inttoptr i64 %292 to i64*
  %296 = load i64, i64* %295
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = load i64, i64* %RAX
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 40
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 4
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i64*
  %303 = load i64, i64* %302
  %304 = add i64 %303, %297
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = icmp ult i64 %304, %297
  %306 = icmp ult i64 %304, %303
  %307 = or i1 %305, %306
  %308 = zext i1 %307 to i8
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %308, i8* %309, align 1, !tbaa !2433
  %310 = trunc i64 %304 to i32
  %311 = and i32 %310, 255
  %312 = call i32 @llvm.ctpop.i32(i32 %311) #16
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  %315 = xor i8 %314, 1
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %315, i8* %316, align 1, !tbaa !2447
  %317 = xor i64 %303, %297
  %318 = xor i64 %317, %304
  %319 = lshr i64 %318, 4
  %320 = trunc i64 %319 to i8
  %321 = and i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %321, i8* %322, align 1, !tbaa !2448
  %323 = icmp eq i64 %304, 0
  %324 = zext i1 %323 to i8
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %324, i8* %325, align 1, !tbaa !2449
  %326 = lshr i64 %304, 63
  %327 = trunc i64 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %327, i8* %328, align 1, !tbaa !2450
  %329 = lshr i64 %297, 63
  %330 = lshr i64 %303, 63
  %331 = xor i64 %326, %329
  %332 = xor i64 %326, %330
  %333 = add nuw nsw i64 %331, %332
  %334 = icmp eq i64 %333, 2
  %335 = zext i1 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %335, i8* %336, align 1, !tbaa !2451
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 40
  %339 = load i64, i64* %RAX
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %338 to i64*
  store i64 %339, i64* %342
  %343 = load i64, i64* %PC
  %344 = sub i64 %343, 120
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %344, i64* %347, align 8, !tbaa !2428
  br label %block_404cbd

block_404cbd:                                     ; preds = %block_404cff, %block_404c90
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_404c90 ], [ %MEMORY.0, %block_404cff ]
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 40
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 8
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i64*
  %360 = load i64, i64* %359
  %361 = sub i64 %354, %360
  %362 = icmp ugt i64 %360, %354
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %363, i8* %364, align 1, !tbaa !2433
  %365 = trunc i64 %361 to i32
  %366 = and i32 %365, 255
  %367 = call i32 @llvm.ctpop.i32(i32 %366) #16
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %370, i8* %371, align 1, !tbaa !2447
  %372 = xor i64 %360, %354
  %373 = xor i64 %372, %361
  %374 = lshr i64 %373, 4
  %375 = trunc i64 %374 to i8
  %376 = and i8 %375, 1
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %376, i8* %377, align 1, !tbaa !2448
  %378 = icmp eq i64 %361, 0
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %379, i8* %380, align 1, !tbaa !2449
  %381 = lshr i64 %361, 63
  %382 = trunc i64 %381 to i8
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %382, i8* %383, align 1, !tbaa !2450
  %384 = lshr i64 %354, 63
  %385 = lshr i64 %360, 63
  %386 = xor i64 %385, %384
  %387 = xor i64 %381, %384
  %388 = add nuw nsw i64 %387, %386
  %389 = icmp eq i64 %388, 2
  %390 = zext i1 %389 to i8
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %390, i8* %391, align 1, !tbaa !2451
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 117
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 6
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 6
  store i64 %397, i64* %PC
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %399 = load i8, i8* %398, align 1, !tbaa !2450
  %400 = icmp ne i8 %399, 0
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %402 = load i8, i8* %401, align 1, !tbaa !2451
  %403 = icmp ne i8 %402, 0
  %404 = xor i1 %400, %403
  %405 = xor i1 %404, true
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %408 = select i1 %404, i64 %395, i64 %393
  store i64 %408, i64* %407, align 8, !tbaa !2428
  %409 = load i8, i8* %BRANCH_TAKEN
  %410 = icmp eq i8 %409, 1
  %411 = load i64, i64* %RBP
  br i1 %410, label %block_404d3a, label %block_404ccb

block_404d72:                                     ; preds = %block_404d3a, %block_404d48
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_404d3a ], [ %MEMORY.1, %block_404d48 ]
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 5
  store i64 %413, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %414 = load i32, i32* %EAX
  %415 = zext i32 %414 to i64
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 2
  store i64 %417, i64* %PC
  %418 = and i64 %415, 4294967295
  store i64 %418, i64* %RCX, align 8, !tbaa !2428
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 48
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 4
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %RDX, align 8, !tbaa !2428
  %425 = load i64, i64* %RDX
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 4
  store i64 %427, i64* %PC
  %428 = sub i64 %425, 1
  store i64 %428, i64* %RDX, align 8, !tbaa !2428
  %429 = icmp ult i64 %425, 1
  %430 = zext i1 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %430, i8* %431, align 1, !tbaa !2433
  %432 = trunc i64 %428 to i32
  %433 = and i32 %432, 255
  %434 = call i32 @llvm.ctpop.i32(i32 %433) #16
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = xor i8 %436, 1
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %437, i8* %438, align 1, !tbaa !2447
  %439 = xor i64 1, %425
  %440 = xor i64 %439, %428
  %441 = lshr i64 %440, 4
  %442 = trunc i64 %441 to i8
  %443 = and i8 %442, 1
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %443, i8* %444, align 1, !tbaa !2448
  %445 = icmp eq i64 %428, 0
  %446 = zext i1 %445 to i8
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %446, i8* %447, align 1, !tbaa !2449
  %448 = lshr i64 %428, 63
  %449 = trunc i64 %448 to i8
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %449, i8* %450, align 1, !tbaa !2450
  %451 = lshr i64 %425, 63
  %452 = xor i64 %448, %451
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2451
  %457 = load i64, i64* %RDX
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC
  store i64 %457, i64* %RAX, align 8, !tbaa !2428
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 2
  store i64 %461, i64* %PC
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %464 = load i64, i64* %463, align 8, !tbaa !2428
  %465 = ashr i64 %464, 63
  store i64 %465, i64* %462, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 3
  store i64 %468, i64* %PC
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %470 = load i64, i64* %469, align 8, !tbaa !2428
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %472 = load i64, i64* %471, align 8, !tbaa !2428
  %473 = sext i64 %466 to i128
  %474 = and i128 %473, -18446744073709551616
  %475 = zext i64 %472 to i128
  %476 = shl nuw i128 %475, 64
  %477 = zext i64 %470 to i128
  %478 = or i128 %476, %477
  %479 = zext i64 %466 to i128
  %480 = or i128 %474, %479
  %481 = sdiv i128 %478, %480
  %482 = trunc i128 %481 to i64
  %483 = and i128 %481, 18446744073709551615
  %484 = sext i64 %482 to i128
  %485 = and i128 %484, -18446744073709551616
  %486 = or i128 %485, %483
  %487 = icmp eq i128 %481, %486
  br i1 %487, label %492, label %488

; <label>:488:                                    ; preds = %block_404d72
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %490 = load i64, i64* %489, align 8, !tbaa !2428
  %491 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %490, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

; <label>:492:                                    ; preds = %block_404d72
  %493 = srem i128 %478, %480
  %494 = trunc i128 %493 to i64
  store i64 %482, i64* %469, align 8, !tbaa !2428
  store i64 %494, i64* %471, align 8, !tbaa !2428
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %495, align 1, !tbaa !2433
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %496, align 1, !tbaa !2447
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %497, align 1, !tbaa !2448
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %498, align 1, !tbaa !2449
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %499, align 1, !tbaa !2450
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %500, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2: ; preds = %488, %492
  %501 = phi %struct.Memory* [ %491, %488 ], [ %MEMORY.2, %492 ]
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 40
  %504 = load i64, i64* %RAX
  %505 = load i64, i64* %PC
  %506 = add i64 %505, 4
  store i64 %506, i64* %PC
  %507 = inttoptr i64 %503 to i64*
  store i64 %504, i64* %507
  br label %block_404d8d

block_404dce:                                     ; preds = %block_404dbe
  %508 = add i64 %1160, 5
  store i64 %508, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %509 = load i32, i32* %EAX
  %510 = zext i32 %509 to i64
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 2
  store i64 %512, i64* %PC
  %513 = and i64 %510, 4294967295
  store i64 %513, i64* %RCX, align 8, !tbaa !2428
  %514 = load i64, i64* %RBP
  %515 = sub i64 %514, 16
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %RDX, align 8, !tbaa !2428
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 40
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i64*
  %525 = load i64, i64* %524
  store i64 %525, i64* %RSI, align 8, !tbaa !2428
  %526 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %527 = load i64, i64* %RDX
  %528 = load i64, i64* %RSI
  %529 = mul i64 %528, 8
  %530 = add i64 %529, %527
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 5
  store i64 %532, i64* %PC
  %533 = inttoptr i64 %530 to double*
  %534 = load double, double* %533
  %535 = bitcast i8* %526 to double*
  store double %534, double* %535, align 1, !tbaa !2452
  %536 = getelementptr inbounds i8, i8* %526, i64 8
  %537 = bitcast i8* %536 to double*
  store double 0.000000e+00, double* %537, align 1, !tbaa !2452
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 16
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i64*
  %543 = load i64, i64* %542
  store i64 %543, i64* %RDX, align 8, !tbaa !2428
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 48
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RSI, align 8, !tbaa !2428
  %550 = load i64, i64* %RDX
  %551 = load i64, i64* %RSI
  %552 = mul i64 %551, 8
  %553 = add i64 %552, %550
  %554 = bitcast %union.vec128_t* %XMM0 to i8*
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 5
  store i64 %556, i64* %PC
  %557 = bitcast i8* %554 to double*
  %558 = load double, double* %557, align 1
  %559 = inttoptr i64 %553 to double*
  store double %558, double* %559
  %560 = load i64, i64* %RBP
  %561 = sub i64 %560, 40
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 4
  store i64 %563, i64* %PC
  %564 = inttoptr i64 %561 to i64*
  %565 = load i64, i64* %564
  store i64 %565, i64* %RDX, align 8, !tbaa !2428
  %566 = load i64, i64* %RBP
  %567 = sub i64 %566, 48
  %568 = load i64, i64* %RDX
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 4
  store i64 %570, i64* %PC
  %571 = inttoptr i64 %567 to i64*
  store i64 %568, i64* %571
  %572 = load i64, i64* %RBP
  %573 = sub i64 %572, 48
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 4
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %573 to i64*
  %577 = load i64, i64* %576
  store i64 %577, i64* %RDX, align 8, !tbaa !2428
  %578 = load i64, i64* %RDX
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC
  %581 = sub i64 %578, 1
  store i64 %581, i64* %RDX, align 8, !tbaa !2428
  %582 = icmp ult i64 %578, 1
  %583 = zext i1 %582 to i8
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %583, i8* %584, align 1, !tbaa !2433
  %585 = trunc i64 %581 to i32
  %586 = and i32 %585, 255
  %587 = call i32 @llvm.ctpop.i32(i32 %586) #16
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  %590 = xor i8 %589, 1
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %590, i8* %591, align 1, !tbaa !2447
  %592 = xor i64 1, %578
  %593 = xor i64 %592, %581
  %594 = lshr i64 %593, 4
  %595 = trunc i64 %594 to i8
  %596 = and i8 %595, 1
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %596, i8* %597, align 1, !tbaa !2448
  %598 = icmp eq i64 %581, 0
  %599 = zext i1 %598 to i8
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %599, i8* %600, align 1, !tbaa !2449
  %601 = lshr i64 %581, 63
  %602 = trunc i64 %601 to i8
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %602, i8* %603, align 1, !tbaa !2450
  %604 = lshr i64 %578, 63
  %605 = xor i64 %601, %604
  %606 = add nuw nsw i64 %605, %604
  %607 = icmp eq i64 %606, 2
  %608 = zext i1 %607 to i8
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %608, i8* %609, align 1, !tbaa !2451
  %610 = load i64, i64* %RDX
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 3
  store i64 %612, i64* %PC
  store i64 %610, i64* %RAX, align 8, !tbaa !2428
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 2
  store i64 %614, i64* %PC
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %617 = load i64, i64* %616, align 8, !tbaa !2428
  %618 = ashr i64 %617, 63
  store i64 %618, i64* %615, align 8, !tbaa !2428
  %619 = load i64, i64* %RCX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 3
  store i64 %621, i64* %PC
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %623 = load i64, i64* %622, align 8, !tbaa !2428
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %625 = load i64, i64* %624, align 8, !tbaa !2428
  %626 = sext i64 %619 to i128
  %627 = and i128 %626, -18446744073709551616
  %628 = zext i64 %625 to i128
  %629 = shl nuw i128 %628, 64
  %630 = zext i64 %623 to i128
  %631 = or i128 %629, %630
  %632 = zext i64 %619 to i128
  %633 = or i128 %627, %632
  %634 = sdiv i128 %631, %633
  %635 = trunc i128 %634 to i64
  %636 = and i128 %634, 18446744073709551615
  %637 = sext i64 %635 to i128
  %638 = and i128 %637, -18446744073709551616
  %639 = or i128 %638, %636
  %640 = icmp eq i128 %634, %639
  br i1 %640, label %645, label %641

; <label>:641:                                    ; preds = %block_404dce
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %643 = load i64, i64* %642, align 8, !tbaa !2428
  %644 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %643, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:645:                                    ; preds = %block_404dce
  %646 = srem i128 %631, %633
  %647 = trunc i128 %646 to i64
  store i64 %635, i64* %622, align 8, !tbaa !2428
  store i64 %647, i64* %624, align 8, !tbaa !2428
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %648, align 1, !tbaa !2433
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %649, align 1, !tbaa !2447
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %650, align 1, !tbaa !2448
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %651, align 1, !tbaa !2449
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %652, align 1, !tbaa !2450
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %653, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %641, %645
  %654 = phi %struct.Memory* [ %644, %641 ], [ %MEMORY.4, %645 ]
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 40
  %657 = load i64, i64* %RAX
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 4
  store i64 %659, i64* %PC
  %660 = inttoptr i64 %656 to i64*
  store i64 %657, i64* %660
  %661 = load i64, i64* %PC
  %662 = sub i64 %661, 126
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 5
  store i64 %664, i64* %PC
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %662, i64* %665, align 8, !tbaa !2428
  br label %block_404d8d

block_404d8d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2
  %MEMORY.3 = phi %struct.Memory* [ %501, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ], [ %654, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %666 = load i64, i64* %RAX
  %667 = load i32, i32* %EAX
  %668 = zext i32 %667 to i64
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 2
  store i64 %670, i64* %PC
  %671 = xor i64 %668, %666
  %672 = trunc i64 %671 to i32
  %673 = and i64 %671, 4294967295
  store i64 %673, i64* %RAX, align 8, !tbaa !2428
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %674, align 1, !tbaa !2433
  %675 = and i32 %672, 255
  %676 = call i32 @llvm.ctpop.i32(i32 %675) #16
  %677 = trunc i32 %676 to i8
  %678 = and i8 %677, 1
  %679 = xor i8 %678, 1
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %679, i8* %680, align 1, !tbaa !2447
  %681 = icmp eq i32 %672, 0
  %682 = zext i1 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %682, i8* %683, align 1, !tbaa !2449
  %684 = lshr i32 %672, 31
  %685 = trunc i32 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %685, i8* %686, align 1, !tbaa !2450
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %687, align 1, !tbaa !2451
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %688, align 1, !tbaa !2448
  %689 = load i8, i8* %AL
  %690 = zext i8 %689 to i64
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 2
  store i64 %692, i64* %PC
  store i8 %689, i8* %CL, align 1, !tbaa !2432
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 48
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697
  store i64 %698, i64* %RDX, align 8, !tbaa !2428
  %699 = load i64, i64* %RDX
  %700 = load i64, i64* %RBP
  %701 = sub i64 %700, 24
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 4
  store i64 %703, i64* %PC
  %704 = inttoptr i64 %701 to i64*
  %705 = load i64, i64* %704
  %706 = sub i64 %699, %705
  %707 = icmp ugt i64 %705, %699
  %708 = zext i1 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %708, i8* %709, align 1, !tbaa !2433
  %710 = trunc i64 %706 to i32
  %711 = and i32 %710, 255
  %712 = call i32 @llvm.ctpop.i32(i32 %711) #16
  %713 = trunc i32 %712 to i8
  %714 = and i8 %713, 1
  %715 = xor i8 %714, 1
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %715, i8* %716, align 1, !tbaa !2447
  %717 = xor i64 %705, %699
  %718 = xor i64 %717, %706
  %719 = lshr i64 %718, 4
  %720 = trunc i64 %719 to i8
  %721 = and i8 %720, 1
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %721, i8* %722, align 1, !tbaa !2448
  %723 = icmp eq i64 %706, 0
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %724, i8* %725, align 1, !tbaa !2449
  %726 = lshr i64 %706, 63
  %727 = trunc i64 %726 to i8
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %727, i8* %728, align 1, !tbaa !2450
  %729 = lshr i64 %699, 63
  %730 = lshr i64 %705, 63
  %731 = xor i64 %730, %729
  %732 = xor i64 %726, %729
  %733 = add nuw nsw i64 %732, %731
  %734 = icmp eq i64 %733, 2
  %735 = zext i1 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %735, i8* %736, align 1, !tbaa !2451
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 49
  %739 = load i8, i8* %CL
  %740 = zext i8 %739 to i64
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 3
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %738 to i8*
  store i8 %739, i8* %743
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 34
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 6
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 6
  store i64 %749, i64* %PC
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %751 = load i8, i8* %750, align 1, !tbaa !2449
  %752 = icmp ne i8 %751, 0
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %754 = load i8, i8* %753, align 1, !tbaa !2450
  %755 = icmp ne i8 %754, 0
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %757 = load i8, i8* %756, align 1, !tbaa !2451
  %758 = icmp ne i8 %757, 0
  %759 = xor i1 %755, %758
  %760 = or i1 %752, %759
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %763 = select i1 %760, i64 %745, i64 %747
  store i64 %763, i64* %762, align 8, !tbaa !2428
  %764 = load i8, i8* %BRANCH_TAKEN
  %765 = icmp eq i8 %764, 1
  br i1 %765, label %block_404dbe, label %block_404da2

block_404ccb:                                     ; preds = %block_404cbd
  %766 = sub i64 %411, 16
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i64*
  %770 = load i64, i64* %769
  store i64 %770, i64* %RAX, align 8, !tbaa !2428
  %771 = load i64, i64* %RBP
  %772 = sub i64 %771, 40
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 4
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %772 to i64*
  %776 = load i64, i64* %775
  store i64 %776, i64* %RCX, align 8, !tbaa !2428
  %777 = load i64, i64* %RCX
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 4
  store i64 %779, i64* %PC
  %780 = sub i64 %777, 1
  store i64 %780, i64* %RCX, align 8, !tbaa !2428
  %781 = icmp ult i64 %777, 1
  %782 = zext i1 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %782, i8* %783, align 1, !tbaa !2433
  %784 = trunc i64 %780 to i32
  %785 = and i32 %784, 255
  %786 = call i32 @llvm.ctpop.i32(i32 %785) #16
  %787 = trunc i32 %786 to i8
  %788 = and i8 %787, 1
  %789 = xor i8 %788, 1
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %789, i8* %790, align 1, !tbaa !2447
  %791 = xor i64 1, %777
  %792 = xor i64 %791, %780
  %793 = lshr i64 %792, 4
  %794 = trunc i64 %793 to i8
  %795 = and i8 %794, 1
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %795, i8* %796, align 1, !tbaa !2448
  %797 = icmp eq i64 %780, 0
  %798 = zext i1 %797 to i8
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %798, i8* %799, align 1, !tbaa !2449
  %800 = lshr i64 %780, 63
  %801 = trunc i64 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %801, i8* %802, align 1, !tbaa !2450
  %803 = lshr i64 %777, 63
  %804 = xor i64 %800, %803
  %805 = add nuw nsw i64 %804, %803
  %806 = icmp eq i64 %805, 2
  %807 = zext i1 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %807, i8* %808, align 1, !tbaa !2451
  %809 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %810 = load i64, i64* %RAX
  %811 = load i64, i64* %RCX
  %812 = mul i64 %811, 8
  %813 = add i64 %812, %810
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 5
  store i64 %815, i64* %PC
  %816 = inttoptr i64 %813 to double*
  %817 = load double, double* %816
  %818 = bitcast i8* %809 to double*
  store double %817, double* %818, align 1, !tbaa !2452
  %819 = getelementptr inbounds i8, i8* %809, i64 8
  %820 = bitcast i8* %819 to double*
  store double 0.000000e+00, double* %820, align 1, !tbaa !2452
  %821 = load i64, i64* %RBP
  %822 = sub i64 %821, 16
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 4
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %822 to i64*
  %826 = load i64, i64* %825
  store i64 %826, i64* %RAX, align 8, !tbaa !2428
  %827 = load i64, i64* %RBP
  %828 = sub i64 %827, 40
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 4
  store i64 %830, i64* %PC
  %831 = inttoptr i64 %828 to i64*
  %832 = load i64, i64* %831
  store i64 %832, i64* %RCX, align 8, !tbaa !2428
  %833 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %834 = load i64, i64* %RAX
  %835 = load i64, i64* %RCX
  %836 = mul i64 %835, 8
  %837 = add i64 %836, %834
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 5
  store i64 %839, i64* %PC
  %840 = inttoptr i64 %837 to double*
  %841 = load double, double* %840
  %842 = bitcast i8* %833 to double*
  store double %841, double* %842, align 1, !tbaa !2452
  %843 = getelementptr inbounds i8, i8* %833, i64 8
  %844 = bitcast i8* %843 to double*
  store double 0.000000e+00, double* %844, align 1, !tbaa !2452
  %845 = bitcast %union.vec128_t* %XMM1 to i8*
  %846 = bitcast %union.vec128_t* %XMM0 to i8*
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 4
  store i64 %848, i64* %PC
  %849 = bitcast i8* %845 to double*
  %850 = load double, double* %849, align 1
  %851 = bitcast i8* %846 to double*
  %852 = load double, double* %851, align 1
  %853 = fcmp uno double %850, %852
  br i1 %853, label %854, label %866

; <label>:854:                                    ; preds = %block_404ccb
  %855 = fadd double %850, %852
  %856 = bitcast double %855 to i64
  %857 = and i64 %856, 9221120237041090560
  %858 = icmp eq i64 %857, 9218868437227405312
  %859 = and i64 %856, 2251799813685247
  %860 = icmp ne i64 %859, 0
  %861 = and i1 %858, %860
  br i1 %861, label %862, label %872

; <label>:862:                                    ; preds = %854
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %864 = load i64, i64* %863, align 8, !tbaa !2428
  %865 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %864, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:866:                                    ; preds = %block_404ccb
  %867 = fcmp ogt double %850, %852
  br i1 %867, label %872, label %868

; <label>:868:                                    ; preds = %866
  %869 = fcmp olt double %850, %852
  br i1 %869, label %872, label %870

; <label>:870:                                    ; preds = %868
  %871 = fcmp oeq double %850, %852
  br i1 %871, label %872, label %879

; <label>:872:                                    ; preds = %870, %868, %866, %854
  %873 = phi i8 [ 0, %866 ], [ 0, %868 ], [ 1, %870 ], [ 1, %854 ]
  %874 = phi i8 [ 0, %866 ], [ 0, %868 ], [ 0, %870 ], [ 1, %854 ]
  %875 = phi i8 [ 0, %866 ], [ 1, %868 ], [ 0, %870 ], [ 1, %854 ]
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %873, i8* %876, align 1, !tbaa !2432
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %874, i8* %877, align 1, !tbaa !2432
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %875, i8* %878, align 1, !tbaa !2432
  br label %879

; <label>:879:                                    ; preds = %872, %870
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %880, align 1, !tbaa !2432
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %881, align 1, !tbaa !2432
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %882, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %862, %879
  %883 = phi %struct.Memory* [ %865, %862 ], [ %MEMORY.1, %879 ]
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 18
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 6
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 6
  store i64 %889, i64* %PC
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %891 = load i8, i8* %890, align 1, !tbaa !2433
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %893 = load i8, i8* %892, align 1, !tbaa !2449
  %894 = or i8 %893, %891
  %895 = icmp ne i8 %894, 0
  %896 = zext i1 %895 to i8
  store i8 %896, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %898 = select i1 %895, i64 %885, i64 %887
  store i64 %898, i64* %897, align 8, !tbaa !2428
  %899 = load i8, i8* %BRANCH_TAKEN
  %900 = icmp eq i8 %899, 1
  br i1 %900, label %block_404cff, label %block_404cf3

block_404dc9:                                     ; preds = %block_404dbe
  %901 = add i64 %1160, 71
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 5
  store i64 %903, i64* %PC
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %901, i64* %904, align 8, !tbaa !2428
  %905 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 32
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to double*
  %911 = load double, double* %910
  %912 = bitcast i8* %905 to double*
  store double %911, double* %912, align 1, !tbaa !2452
  %913 = getelementptr inbounds i8, i8* %905, i64 8
  %914 = bitcast i8* %913 to double*
  store double 0.000000e+00, double* %914, align 1, !tbaa !2452
  %915 = load i64, i64* %RBP
  %916 = sub i64 %915, 16
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 4
  store i64 %918, i64* %PC
  %919 = inttoptr i64 %916 to i64*
  %920 = load i64, i64* %919
  store i64 %920, i64* %RAX, align 8, !tbaa !2428
  %921 = load i64, i64* %RBP
  %922 = sub i64 %921, 48
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 4
  store i64 %924, i64* %PC
  %925 = inttoptr i64 %922 to i64*
  %926 = load i64, i64* %925
  store i64 %926, i64* %RCX, align 8, !tbaa !2428
  %927 = load i64, i64* %RAX
  %928 = load i64, i64* %RCX
  %929 = mul i64 %928, 8
  %930 = add i64 %929, %927
  %931 = bitcast %union.vec128_t* %XMM0 to i8*
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC
  %934 = bitcast i8* %931 to double*
  %935 = load double, double* %934, align 1
  %936 = inttoptr i64 %930 to double*
  store double %935, double* %936
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 1
  store i64 %938, i64* %PC
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %940 = load i64, i64* %939, align 8, !tbaa !2428
  %941 = add i64 %940, 8
  %942 = inttoptr i64 %940 to i64*
  %943 = load i64, i64* %942
  store i64 %943, i64* %RBP, align 8, !tbaa !2428
  store i64 %941, i64* %939, align 8, !tbaa !2428
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 1
  store i64 %945, i64* %PC
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %948 = load i64, i64* %947, align 8, !tbaa !2428
  %949 = inttoptr i64 %948 to i64*
  %950 = load i64, i64* %949
  store i64 %950, i64* %946, align 8, !tbaa !2428
  %951 = add i64 %948, 8
  store i64 %951, i64* %947, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_404cf3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %952 = load i64, i64* %RBP
  %953 = sub i64 %952, 40
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 4
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %953 to i64*
  %957 = load i64, i64* %956
  store i64 %957, i64* %RAX, align 8, !tbaa !2428
  %958 = load i64, i64* %RAX
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 4
  store i64 %960, i64* %PC
  %961 = add i64 1, %958
  store i64 %961, i64* %RAX, align 8, !tbaa !2428
  %962 = icmp ult i64 %961, %958
  %963 = icmp ult i64 %961, 1
  %964 = or i1 %962, %963
  %965 = zext i1 %964 to i8
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %965, i8* %966, align 1, !tbaa !2433
  %967 = trunc i64 %961 to i32
  %968 = and i32 %967, 255
  %969 = call i32 @llvm.ctpop.i32(i32 %968) #16
  %970 = trunc i32 %969 to i8
  %971 = and i8 %970, 1
  %972 = xor i8 %971, 1
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %972, i8* %973, align 1, !tbaa !2447
  %974 = xor i64 1, %958
  %975 = xor i64 %974, %961
  %976 = lshr i64 %975, 4
  %977 = trunc i64 %976 to i8
  %978 = and i8 %977, 1
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %978, i8* %979, align 1, !tbaa !2448
  %980 = icmp eq i64 %961, 0
  %981 = zext i1 %980 to i8
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %981, i8* %982, align 1, !tbaa !2449
  %983 = lshr i64 %961, 63
  %984 = trunc i64 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %984, i8* %985, align 1, !tbaa !2450
  %986 = lshr i64 %958, 63
  %987 = xor i64 %983, %986
  %988 = add nuw nsw i64 %987, %983
  %989 = icmp eq i64 %988, 2
  %990 = zext i1 %989 to i8
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %990, i8* %991, align 1, !tbaa !2451
  %992 = load i64, i64* %RBP
  %993 = sub i64 %992, 40
  %994 = load i64, i64* %RAX
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 4
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %993 to i64*
  store i64 %994, i64* %997
  br label %block_404cff

block_404d48:                                     ; preds = %block_404d3a
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 16
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 4
  store i64 %1001, i64* %PC
  %1002 = inttoptr i64 %999 to i64*
  %1003 = load i64, i64* %1002
  store i64 %1003, i64* %RAX, align 8, !tbaa !2428
  %1004 = load i64, i64* %RBP
  %1005 = sub i64 %1004, 40
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 4
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1005 to i64*
  %1009 = load i64, i64* %1008
  store i64 %1009, i64* %RCX, align 8, !tbaa !2428
  %1010 = load i64, i64* %RCX
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 4
  store i64 %1012, i64* %PC
  %1013 = sub i64 %1010, 1
  store i64 %1013, i64* %RCX, align 8, !tbaa !2428
  %1014 = icmp ult i64 %1010, 1
  %1015 = zext i1 %1014 to i8
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1015, i8* %1016, align 1, !tbaa !2433
  %1017 = trunc i64 %1013 to i32
  %1018 = and i32 %1017, 255
  %1019 = call i32 @llvm.ctpop.i32(i32 %1018) #16
  %1020 = trunc i32 %1019 to i8
  %1021 = and i8 %1020, 1
  %1022 = xor i8 %1021, 1
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1022, i8* %1023, align 1, !tbaa !2447
  %1024 = xor i64 1, %1010
  %1025 = xor i64 %1024, %1013
  %1026 = lshr i64 %1025, 4
  %1027 = trunc i64 %1026 to i8
  %1028 = and i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1028, i8* %1029, align 1, !tbaa !2448
  %1030 = icmp eq i64 %1013, 0
  %1031 = zext i1 %1030 to i8
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1031, i8* %1032, align 1, !tbaa !2449
  %1033 = lshr i64 %1013, 63
  %1034 = trunc i64 %1033 to i8
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1034, i8* %1035, align 1, !tbaa !2450
  %1036 = lshr i64 %1010, 63
  %1037 = xor i64 %1033, %1036
  %1038 = add nuw nsw i64 %1037, %1036
  %1039 = icmp eq i64 %1038, 2
  %1040 = zext i1 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1040, i8* %1041, align 1, !tbaa !2451
  %1042 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1043 = load i64, i64* %RAX
  %1044 = load i64, i64* %RCX
  %1045 = mul i64 %1044, 8
  %1046 = add i64 %1045, %1043
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 5
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1046 to double*
  %1050 = load double, double* %1049
  %1051 = bitcast i8* %1042 to double*
  store double %1050, double* %1051, align 1, !tbaa !2452
  %1052 = getelementptr inbounds i8, i8* %1042, i64 8
  %1053 = bitcast i8* %1052 to double*
  store double 0.000000e+00, double* %1053, align 1, !tbaa !2452
  %1054 = load i64, i64* %RBP
  %1055 = sub i64 %1054, 16
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 4
  store i64 %1057, i64* %PC
  %1058 = inttoptr i64 %1055 to i64*
  %1059 = load i64, i64* %1058
  store i64 %1059, i64* %RAX, align 8, !tbaa !2428
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 48
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 4
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i64*
  %1065 = load i64, i64* %1064
  store i64 %1065, i64* %RCX, align 8, !tbaa !2428
  %1066 = load i64, i64* %RAX
  %1067 = load i64, i64* %RCX
  %1068 = mul i64 %1067, 8
  %1069 = add i64 %1068, %1066
  %1070 = bitcast %union.vec128_t* %XMM0 to i8*
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 5
  store i64 %1072, i64* %PC
  %1073 = bitcast i8* %1070 to double*
  %1074 = load double, double* %1073, align 1
  %1075 = inttoptr i64 %1069 to double*
  store double %1074, double* %1075
  %1076 = load i64, i64* %RBP
  %1077 = sub i64 %1076, 40
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 4
  store i64 %1079, i64* %PC
  %1080 = inttoptr i64 %1077 to i64*
  %1081 = load i64, i64* %1080
  store i64 %1081, i64* %RAX, align 8, !tbaa !2428
  %1082 = load i64, i64* %RAX
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 4
  store i64 %1084, i64* %PC
  %1085 = sub i64 %1082, 1
  store i64 %1085, i64* %RAX, align 8, !tbaa !2428
  %1086 = icmp ult i64 %1082, 1
  %1087 = zext i1 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1087, i8* %1088, align 1, !tbaa !2433
  %1089 = trunc i64 %1085 to i32
  %1090 = and i32 %1089, 255
  %1091 = call i32 @llvm.ctpop.i32(i32 %1090) #16
  %1092 = trunc i32 %1091 to i8
  %1093 = and i8 %1092, 1
  %1094 = xor i8 %1093, 1
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1094, i8* %1095, align 1, !tbaa !2447
  %1096 = xor i64 1, %1082
  %1097 = xor i64 %1096, %1085
  %1098 = lshr i64 %1097, 4
  %1099 = trunc i64 %1098 to i8
  %1100 = and i8 %1099, 1
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1100, i8* %1101, align 1, !tbaa !2448
  %1102 = icmp eq i64 %1085, 0
  %1103 = zext i1 %1102 to i8
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1103, i8* %1104, align 1, !tbaa !2449
  %1105 = lshr i64 %1085, 63
  %1106 = trunc i64 %1105 to i8
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1106, i8* %1107, align 1, !tbaa !2450
  %1108 = lshr i64 %1082, 63
  %1109 = xor i64 %1105, %1108
  %1110 = add nuw nsw i64 %1109, %1108
  %1111 = icmp eq i64 %1110, 2
  %1112 = zext i1 %1111 to i8
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1112, i8* %1113, align 1, !tbaa !2451
  %1114 = load i64, i64* %RBP
  %1115 = sub i64 %1114, 48
  %1116 = load i64, i64* %RAX
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 4
  store i64 %1118, i64* %PC
  %1119 = inttoptr i64 %1115 to i64*
  store i64 %1116, i64* %1119
  br label %block_404d72

block_404dbe:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_404d8d
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_404d8d ], [ %1233, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %1120 = load i64, i64* %RBP
  %1121 = sub i64 %1120, 49
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 3
  store i64 %1123, i64* %PC
  %1124 = inttoptr i64 %1121 to i8*
  %1125 = load i8, i8* %1124
  store i8 %1125, i8* %AL, align 1, !tbaa !2432
  %1126 = load i8, i8* %AL
  %1127 = zext i8 %1126 to i64
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 2
  store i64 %1129, i64* %PC
  %1130 = and i64 1, %1127
  %1131 = trunc i64 %1130 to i8
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1132, align 1, !tbaa !2433
  %1133 = trunc i64 %1130 to i32
  %1134 = and i32 %1133, 255
  %1135 = call i32 @llvm.ctpop.i32(i32 %1134) #16
  %1136 = trunc i32 %1135 to i8
  %1137 = and i8 %1136, 1
  %1138 = xor i8 %1137, 1
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1138, i8* %1139, align 1, !tbaa !2447
  %1140 = icmp eq i8 %1131, 0
  %1141 = zext i1 %1140 to i8
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1141, i8* %1142, align 1, !tbaa !2449
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1143, align 1, !tbaa !2450
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1144, align 1, !tbaa !2451
  %1145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1145, align 1, !tbaa !2448
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 11
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 6
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 6
  store i64 %1151, i64* %PC
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1153 = load i8, i8* %1152, align 1, !tbaa !2449
  %1154 = icmp eq i8 %1153, 0
  %1155 = zext i1 %1154 to i8
  store i8 %1155, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1157 = select i1 %1154, i64 %1147, i64 %1149
  store i64 %1157, i64* %1156, align 8, !tbaa !2428
  %1158 = load i8, i8* %BRANCH_TAKEN
  %1159 = icmp eq i8 %1158, 1
  %1160 = load i64, i64* %PC
  br i1 %1159, label %block_404dce, label %block_404dc9

block_404da2:                                     ; preds = %block_404d8d
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 16
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 4
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i64*
  %1166 = load i64, i64* %1165
  store i64 %1166, i64* %RAX, align 8, !tbaa !2428
  %1167 = load i64, i64* %RBP
  %1168 = sub i64 %1167, 40
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 4
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1168 to i64*
  %1172 = load i64, i64* %1171
  store i64 %1172, i64* %RCX, align 8, !tbaa !2428
  %1173 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1174 = load i64, i64* %RAX
  %1175 = load i64, i64* %RCX
  %1176 = mul i64 %1175, 8
  %1177 = add i64 %1176, %1174
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 5
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1177 to double*
  %1181 = load double, double* %1180
  %1182 = bitcast i8* %1173 to double*
  store double %1181, double* %1182, align 1, !tbaa !2452
  %1183 = getelementptr inbounds i8, i8* %1173, i64 8
  %1184 = bitcast i8* %1183 to double*
  store double 0.000000e+00, double* %1184, align 1, !tbaa !2452
  %1185 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 32
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 5
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to double*
  %1191 = load double, double* %1190
  %1192 = bitcast i8* %1185 to double*
  store double %1191, double* %1192, align 1, !tbaa !2452
  %1193 = getelementptr inbounds i8, i8* %1185, i64 8
  %1194 = bitcast i8* %1193 to double*
  store double 0.000000e+00, double* %1194, align 1, !tbaa !2452
  %1195 = bitcast %union.vec128_t* %XMM1 to i8*
  %1196 = bitcast %union.vec128_t* %XMM0 to i8*
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %PC
  %1199 = bitcast i8* %1195 to double*
  %1200 = load double, double* %1199, align 1
  %1201 = bitcast i8* %1196 to double*
  %1202 = load double, double* %1201, align 1
  %1203 = fcmp uno double %1200, %1202
  br i1 %1203, label %1204, label %1216

; <label>:1204:                                   ; preds = %block_404da2
  %1205 = fadd double %1200, %1202
  %1206 = bitcast double %1205 to i64
  %1207 = and i64 %1206, 9221120237041090560
  %1208 = icmp eq i64 %1207, 9218868437227405312
  %1209 = and i64 %1206, 2251799813685247
  %1210 = icmp ne i64 %1209, 0
  %1211 = and i1 %1208, %1210
  br i1 %1211, label %1212, label %1222

; <label>:1212:                                   ; preds = %1204
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1214 = load i64, i64* %1213, align 8, !tbaa !2428
  %1215 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1214, %struct.Memory* %MEMORY.3) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1216:                                   ; preds = %block_404da2
  %1217 = fcmp ogt double %1200, %1202
  br i1 %1217, label %1222, label %1218

; <label>:1218:                                   ; preds = %1216
  %1219 = fcmp olt double %1200, %1202
  br i1 %1219, label %1222, label %1220

; <label>:1220:                                   ; preds = %1218
  %1221 = fcmp oeq double %1200, %1202
  br i1 %1221, label %1222, label %1229

; <label>:1222:                                   ; preds = %1220, %1218, %1216, %1204
  %1223 = phi i8 [ 0, %1216 ], [ 0, %1218 ], [ 1, %1220 ], [ 1, %1204 ]
  %1224 = phi i8 [ 0, %1216 ], [ 0, %1218 ], [ 0, %1220 ], [ 1, %1204 ]
  %1225 = phi i8 [ 0, %1216 ], [ 1, %1218 ], [ 0, %1220 ], [ 1, %1204 ]
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1223, i8* %1226, align 1, !tbaa !2432
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1224, i8* %1227, align 1, !tbaa !2432
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1225, i8* %1228, align 1, !tbaa !2432
  br label %1229

; <label>:1229:                                   ; preds = %1222, %1220
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1230, align 1, !tbaa !2432
  %1231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1231, align 1, !tbaa !2432
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1232, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1212, %1229
  %1233 = phi %struct.Memory* [ %1215, %1212 ], [ %MEMORY.3, %1229 ]
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 3
  store i64 %1235, i64* %PC
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1237 = load i8, i8* %1236, align 1, !tbaa !2433
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1239 = load i8, i8* %1238, align 1, !tbaa !2449
  %1240 = or i8 %1239, %1237
  %1241 = icmp eq i8 %1240, 0
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* %DL, align 1, !tbaa !2432
  %1243 = load i64, i64* %RBP
  %1244 = sub i64 %1243, 49
  %1245 = load i8, i8* %DL
  %1246 = zext i8 %1245 to i64
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 3
  store i64 %1248, i64* %PC
  %1249 = inttoptr i64 %1244 to i8*
  store i8 %1245, i8* %1249
  br label %block_404dbe

block_404d3a:                                     ; preds = %block_404cbd
  %1250 = sub i64 %411, 40
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 4
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1250 to i64*
  %1254 = load i64, i64* %1253
  store i64 %1254, i64* %RAX, align 8, !tbaa !2428
  %1255 = load i64, i64* %RAX
  %1256 = load i64, i64* %RBP
  %1257 = sub i64 %1256, 8
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 4
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1257 to i64*
  %1261 = load i64, i64* %1260
  %1262 = sub i64 %1255, %1261
  %1263 = icmp ugt i64 %1261, %1255
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1264, i8* %1265, align 1, !tbaa !2433
  %1266 = trunc i64 %1262 to i32
  %1267 = and i32 %1266, 255
  %1268 = call i32 @llvm.ctpop.i32(i32 %1267) #16
  %1269 = trunc i32 %1268 to i8
  %1270 = and i8 %1269, 1
  %1271 = xor i8 %1270, 1
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1271, i8* %1272, align 1, !tbaa !2447
  %1273 = xor i64 %1261, %1255
  %1274 = xor i64 %1273, %1262
  %1275 = lshr i64 %1274, 4
  %1276 = trunc i64 %1275 to i8
  %1277 = and i8 %1276, 1
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1277, i8* %1278, align 1, !tbaa !2448
  %1279 = icmp eq i64 %1262, 0
  %1280 = zext i1 %1279 to i8
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1280, i8* %1281, align 1, !tbaa !2449
  %1282 = lshr i64 %1262, 63
  %1283 = trunc i64 %1282 to i8
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1283, i8* %1284, align 1, !tbaa !2450
  %1285 = lshr i64 %1255, 63
  %1286 = lshr i64 %1261, 63
  %1287 = xor i64 %1286, %1285
  %1288 = xor i64 %1282, %1285
  %1289 = add nuw nsw i64 %1288, %1287
  %1290 = icmp eq i64 %1289, 2
  %1291 = zext i1 %1290 to i8
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1291, i8* %1292, align 1, !tbaa !2451
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 48
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 6
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 6
  store i64 %1298, i64* %PC
  %1299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1300 = load i8, i8* %1299, align 1, !tbaa !2449
  %1301 = icmp eq i8 %1300, 0
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1304 = select i1 %1301, i64 %1294, i64 %1296
  store i64 %1304, i64* %1303, align 8, !tbaa !2428
  %1305 = load i8, i8* %BRANCH_TAKEN
  %1306 = icmp eq i8 %1305, 1
  br i1 %1306, label %block_404d72, label %block_404d48
}

; Function Attrs: noinline
define %struct.Memory* @sub_405d50__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405d50:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 9
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ESI = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = load i64, i64* %RBP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 1
  store i64 %34, i64* %PC
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %36 = load i64, i64* %35, align 8, !tbaa !2428
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %32, i64* %38
  store i64 %37, i64* %35, align 8, !tbaa !2428
  %39 = load i64, i64* %RSP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 3
  store i64 %41, i64* %PC
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC
  %45 = sub i64 %42, 48
  store i64 %45, i64* %RSP, align 8, !tbaa !2428
  %46 = icmp ult i64 %42, 48
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %47, i8* %48, align 1, !tbaa !2433
  %49 = trunc i64 %45 to i32
  %50 = and i32 %49, 255
  %51 = call i32 @llvm.ctpop.i32(i32 %50) #16
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = xor i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = xor i64 48, %42
  %57 = xor i64 %56, %45
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = icmp eq i64 %45, 0
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = lshr i64 %45, 63
  %66 = trunc i64 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = lshr i64 %42, 63
  %69 = xor i64 %65, %68
  %70 = add nuw nsw i64 %69, %68
  %71 = icmp eq i64 %70, 2
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %72, i8* %73, align 1, !tbaa !2451
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 16
  %76 = load i64, i64* %RDI
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 24
  %82 = load i64, i64* %RSI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %81 to i64*
  store i64 %82, i64* %85
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 32
  %88 = bitcast %union.vec128_t* %XMM0 to i8*
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  %91 = bitcast i8* %88 to double*
  %92 = load double, double* %91, align 1
  %93 = inttoptr i64 %87 to double*
  store double %92, double* %93
  br label %block_405d65

block_405d7f:                                     ; preds = %block_405d65
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 16
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RSI
  %99 = load i32, i32* %ESI
  %100 = zext i32 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 2
  store i64 %102, i64* %PC
  %103 = xor i64 %100, %98
  %104 = trunc i64 %103 to i32
  %105 = and i64 %103, 4294967295
  store i64 %105, i64* %RSI, align 8, !tbaa !2428
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %106, align 1, !tbaa !2433
  %107 = and i32 %104, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = icmp eq i32 %104, 0
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i32 %104, 31
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %117, i8* %118, align 1, !tbaa !2450
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %119, align 1, !tbaa !2451
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %120, align 1, !tbaa !2448
  %121 = load i64, i64* %PC
  %122 = sub i64 %121, 11637
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 5
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 5
  store i64 %126, i64* %PC
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %128 = load i64, i64* %127, align 8, !tbaa !2428
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %124, i64* %130
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %131, align 8, !tbaa !2428
  %132 = load i64, i64* %PC
  %133 = call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %132, %struct.Memory* %298)
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 48
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 48
  %140 = load i64, i64* %RAX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %PC
  %145 = sub i64 %144, 11538
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 5
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 5
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %151 = load i64, i64* %150, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %147, i64* %153
  store i64 %152, i64* %150, align 8, !tbaa !2428
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %145, i64* %154, align 8, !tbaa !2428
  %155 = load i64, i64* %PC
  %156 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %155, %struct.Memory* %133)
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 32
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  store i64 %158, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %RAX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 3
  store i64 %163, i64* %PC
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 466
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %171 = load i64, i64* %170, align 8, !tbaa !2428
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 %167, i64* %173
  store i64 %172, i64* %170, align 8, !tbaa !2428
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %165, i64* %174, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = call %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* %0, i64 %175, %struct.Memory* %156)
  %177 = load i64, i64* %RBP
  %178 = sub i64 %177, 40
  %179 = bitcast %union.vec128_t* %XMM0 to i8*
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 5
  store i64 %181, i64* %PC
  %182 = bitcast i8* %179 to double*
  %183 = load double, double* %182, align 1
  %184 = inttoptr i64 %178 to double*
  store double %183, double* %184
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 40
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i64*
  %190 = load i64, i64* %189
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 32
  %193 = load i64, i64* %RAX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %192 to i64*
  store i64 %193, i64* %196
  %197 = load i64, i64* %PC
  %198 = sub i64 %197, 75
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %198, i64* %201, align 8, !tbaa !2428
  br label %block_405d65

block_405d7a:                                     ; preds = %block_405d65
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 59
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %203, i64* %206, align 8, !tbaa !2428
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 32
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 8
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %214 to i64*
  store i64 %215, i64* %218
  %219 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 8
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to double*
  %225 = load double, double* %224
  %226 = bitcast i8* %219 to double*
  store double %225, double* %226, align 1, !tbaa !2452
  %227 = getelementptr inbounds i8, i8* %219, i64 8
  %228 = bitcast i8* %227 to double*
  store double 0.000000e+00, double* %228, align 1, !tbaa !2452
  %229 = load i64, i64* %RSP
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC
  %232 = add i64 48, %229
  store i64 %232, i64* %RSP, align 8, !tbaa !2428
  %233 = icmp ult i64 %232, %229
  %234 = icmp ult i64 %232, 48
  %235 = or i1 %233, %234
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %236, i8* %237, align 1, !tbaa !2433
  %238 = trunc i64 %232 to i32
  %239 = and i32 %238, 255
  %240 = call i32 @llvm.ctpop.i32(i32 %239) #16
  %241 = trunc i32 %240 to i8
  %242 = and i8 %241, 1
  %243 = xor i8 %242, 1
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %243, i8* %244, align 1, !tbaa !2447
  %245 = xor i64 48, %229
  %246 = xor i64 %245, %232
  %247 = lshr i64 %246, 4
  %248 = trunc i64 %247 to i8
  %249 = and i8 %248, 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %249, i8* %250, align 1, !tbaa !2448
  %251 = icmp eq i64 %232, 0
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %252, i8* %253, align 1, !tbaa !2449
  %254 = lshr i64 %232, 63
  %255 = trunc i64 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %255, i8* %256, align 1, !tbaa !2450
  %257 = lshr i64 %229, 63
  %258 = xor i64 %254, %257
  %259 = add nuw nsw i64 %258, %254
  %260 = icmp eq i64 %259, 2
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %261, i8* %262, align 1, !tbaa !2451
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 1
  store i64 %264, i64* %PC
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %266 = load i64, i64* %265, align 8, !tbaa !2428
  %267 = add i64 %266, 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268
  store i64 %269, i64* %RBP, align 8, !tbaa !2428
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 1
  store i64 %271, i64* %PC
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %274 = load i64, i64* %273, align 8, !tbaa !2428
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  store i64 %276, i64* %272, align 8, !tbaa !2428
  %277 = add i64 %274, 8
  store i64 %277, i64* %273, align 8, !tbaa !2428
  ret %struct.Memory* %298

block_405d65:                                     ; preds = %block_405d7f, %block_405d50
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_405d50 ], [ %176, %block_405d7f ]
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 16
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 4
  store i64 %281, i64* %PC
  store i64 %279, i64* %RDI, align 8, !tbaa !2428
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 24
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 4
  store i64 %285, i64* %PC
  store i64 %283, i64* %RSI, align 8, !tbaa !2428
  %286 = load i64, i64* %PC
  %287 = sub i64 %286, 11549
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 5
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 5
  store i64 %291, i64* %PC
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %293 = load i64, i64* %292, align 8, !tbaa !2428
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  store i64 %289, i64* %295
  store i64 %294, i64* %292, align 8, !tbaa !2428
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %287, i64* %296, align 8, !tbaa !2428
  %297 = load i64, i64* %PC
  %298 = call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %297, %struct.Memory* %MEMORY.0)
  %299 = load i8, i8* %AL
  %300 = zext i8 %299 to i64
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = and i64 1, %300
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %305, align 1, !tbaa !2433
  %306 = trunc i64 %303 to i32
  %307 = and i32 %306, 255
  %308 = call i32 @llvm.ctpop.i32(i32 %307) #16
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %311, i8* %312, align 1, !tbaa !2447
  %313 = icmp eq i8 %304, 0
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %314, i8* %315, align 1, !tbaa !2449
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %316, align 1, !tbaa !2450
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %317, align 1, !tbaa !2451
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %318, align 1, !tbaa !2448
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 11
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 6
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 6
  store i64 %324, i64* %PC
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %326 = load i8, i8* %325, align 1, !tbaa !2449
  %327 = icmp eq i8 %326, 0
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %330 = select i1 %327, i64 %320, i64 %322
  store i64 %330, i64* %329, align 8, !tbaa !2428
  %331 = load i8, i8* %BRANCH_TAKEN
  %332 = icmp eq i8 %331, 1
  br i1 %332, label %block_405d7f, label %block_405d7a
}

; Function Attrs: noinline
define %struct.Memory* @sub_401200__Z11start_timerv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401200:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %PC
  %26 = sub i64 %25, 2868
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 5
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %26, i64* %35, align 8, !tbaa !2428
  %36 = load i64, i64* %PC
  %37 = call %struct.Memory* @ext_6208a0_clock(%struct.State* %0, i64 %36, %struct.Memory* %2)
  %38 = load i64, i64* %RAX
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 8
  store i64 %40, i64* %PC
  store i64 %38, i64* bitcast (%start_time_type* @start_time to i64*)
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, 8
  %46 = inttoptr i64 %44 to i64*
  %47 = load i64, i64* %46
  store i64 %47, i64* %RBP, align 8, !tbaa !2428
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 1
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %37
}

; Function Attrs: noinline
define %struct.Memory* @sub_4065d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4065d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_406600__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_402990__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402990:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_4029b8

block_402a01:                                     ; preds = %block_4029b8
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4029c8:                                     ; preds = %block_4029b8
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 16
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 24
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 8364
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 24
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 32
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 8431
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_404ad0__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 24
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 32
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 8658
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_4029b8

block_4029b8:                                     ; preds = %block_4029c8, %block_402990
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402990 ], [ %249, %block_4029c8 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_402a01, label %block_4029c8
}

; Function Attrs: noinline
define %struct.Memory* @sub_406540__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406540:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_406570__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bf0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402bf0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = bitcast %union.vec128_t* %XMM0 to i8*
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC
  %82 = bitcast i8* %79 to double*
  %83 = load double, double* %82, align 1
  %84 = inttoptr i64 %78 to double*
  store double %83, double* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %RDI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 24
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RDX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 40
  %105 = load i64, i64* %RCX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402c18

block_402c61:                                     ; preds = %block_402c18
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402c28:                                     ; preds = %block_402c18
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 24
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 32
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 2396
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 32
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 2463
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_4035e0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 32
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 40
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2706
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_402c18

block_402c18:                                     ; preds = %block_402c28, %block_402bf0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402bf0 ], [ %249, %block_402c28 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_402c61, label %block_402c28
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f10__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405f10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405f30__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a70___cxx_global_var_init_23(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%DV10Pe_type* @DV10Pe to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4426
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_404460__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404460:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %34 to %"class.std::bitset"*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %36 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %35, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %36 to %union.vec128_t*
  %37 = load i64, i64* %RBP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC
  store i64 %44, i64* %RBP, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = sub i64 %47, 96
  store i64 %50, i64* %RSP, align 8, !tbaa !2428
  %51 = icmp ult i64 %47, 96
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %50 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 96, %47
  %62 = xor i64 %61, %50
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %50, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %50, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %47, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2451
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 8
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  store i64 %84, i64* %RCX, align 8, !tbaa !2428
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RDI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  store i64 %99, i64* %RDI, align 8, !tbaa !2428
  %102 = load i64, i64* %RCX
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 754
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 5
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 5
  store i64 %110, i64* %PC
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %112 = load i64, i64* %111, align 8, !tbaa !2428
  %113 = add i64 %112, -8
  %114 = inttoptr i64 %113 to i64*
  store i64 %108, i64* %114
  store i64 %113, i64* %111, align 8, !tbaa !2428
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %106, i64* %115, align 8, !tbaa !2428
  %116 = load i64, i64* %PC
  %117 = call %struct.Memory* @sub_404770__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* %0, i64 %116, %struct.Memory* %2)
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  store i64 %119, i64* %PC
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  %120 = load i32, i32* %EDX
  %121 = zext i32 %120 to i64
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = and i64 %121, 4294967295
  store i64 %124, i64* %RCX, align 8, !tbaa !2428
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 32
  %127 = load i64, i64* %RAX
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 32
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 2
  store i64 %138, i64* %PC
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %141 = load i64, i64* %140, align 8, !tbaa !2428
  %142 = ashr i64 %141, 63
  store i64 %142, i64* %139, align 8, !tbaa !2428
  %143 = load i64, i64* %RCX
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 3
  store i64 %145, i64* %PC
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %147 = load i64, i64* %146, align 8, !tbaa !2428
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %149 = load i64, i64* %148, align 8, !tbaa !2428
  %150 = sext i64 %143 to i128
  %151 = and i128 %150, -18446744073709551616
  %152 = zext i64 %149 to i128
  %153 = shl nuw i128 %152, 64
  %154 = zext i64 %147 to i128
  %155 = or i128 %153, %154
  %156 = zext i64 %143 to i128
  %157 = or i128 %151, %156
  %158 = sdiv i128 %155, %157
  %159 = trunc i128 %158 to i64
  %160 = and i128 %158, 18446744073709551615
  %161 = sext i64 %159 to i128
  %162 = and i128 %161, -18446744073709551616
  %163 = or i128 %162, %160
  %164 = icmp eq i128 %158, %163
  br i1 %164, label %169, label %165

; <label>:165:                                    ; preds = %block_404460
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %167 = load i64, i64* %166, align 8, !tbaa !2428
  %168 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %167, %struct.Memory* %117) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:169:                                    ; preds = %block_404460
  %170 = srem i128 %155, %157
  %171 = trunc i128 %170 to i64
  store i64 %159, i64* %146, align 8, !tbaa !2428
  store i64 %171, i64* %148, align 8, !tbaa !2428
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %172, align 1, !tbaa !2433
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %173, align 1, !tbaa !2447
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %174, align 1, !tbaa !2448
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %175, align 1, !tbaa !2449
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %176, align 1, !tbaa !2450
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %165, %169
  %178 = phi %struct.Memory* [ %168, %165 ], [ %117, %169 ]
  %179 = load i64, i64* %RAX
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC
  %182 = sub i64 %179, 1
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = icmp ult i64 %179, 1
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %184, i8* %185, align 1, !tbaa !2433
  %186 = trunc i64 %182 to i32
  %187 = and i32 %186, 255
  %188 = call i32 @llvm.ctpop.i32(i32 %187) #16
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %191, i8* %192, align 1, !tbaa !2447
  %193 = xor i64 1, %179
  %194 = xor i64 %193, %182
  %195 = lshr i64 %194, 4
  %196 = trunc i64 %195 to i8
  %197 = and i8 %196, 1
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %197, i8* %198, align 1, !tbaa !2448
  %199 = icmp eq i64 %182, 0
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %200, i8* %201, align 1, !tbaa !2449
  %202 = lshr i64 %182, 63
  %203 = trunc i64 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %203, i8* %204, align 1, !tbaa !2450
  %205 = lshr i64 %179, 63
  %206 = xor i64 %202, %205
  %207 = add nuw nsw i64 %206, %205
  %208 = icmp eq i64 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2451
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 24
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 4
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %212 to i64*
  store i64 %213, i64* %216
  br label %block_40449f

block_4044fc:                                     ; preds = %block_40449f
  %217 = sub i64 %808, 32
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC
  %220 = inttoptr i64 %217 to i64*
  %221 = load i64, i64* %220
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  %225 = sub i64 %222, 1
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = icmp ult i64 %222, 1
  %227 = zext i1 %226 to i8
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %227, i8* %228, align 1, !tbaa !2433
  %229 = trunc i64 %225 to i32
  %230 = and i32 %229, 255
  %231 = call i32 @llvm.ctpop.i32(i32 %230) #16
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %234, i8* %235, align 1, !tbaa !2447
  %236 = xor i64 1, %222
  %237 = xor i64 %236, %225
  %238 = lshr i64 %237, 4
  %239 = trunc i64 %238 to i8
  %240 = and i8 %239, 1
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %240, i8* %241, align 1, !tbaa !2448
  %242 = icmp eq i64 %225, 0
  %243 = zext i1 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %243, i8* %244, align 1, !tbaa !2449
  %245 = lshr i64 %225, 63
  %246 = trunc i64 %245 to i8
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %246, i8* %247, align 1, !tbaa !2450
  %248 = lshr i64 %222, 63
  %249 = xor i64 %245, %248
  %250 = add nuw nsw i64 %249, %248
  %251 = icmp eq i64 %250, 2
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %252, i8* %253, align 1, !tbaa !2451
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 24
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  br label %block_404508

block_40459a:                                     ; preds = %block_404508
  %260 = load i64, i64* %RSP
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 4
  store i64 %262, i64* %PC
  %263 = add i64 96, %260
  store i64 %263, i64* %RSP, align 8, !tbaa !2428
  %264 = icmp ult i64 %263, %260
  %265 = icmp ult i64 %263, 96
  %266 = or i1 %264, %265
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %267, i8* %268, align 1, !tbaa !2433
  %269 = trunc i64 %263 to i32
  %270 = and i32 %269, 255
  %271 = call i32 @llvm.ctpop.i32(i32 %270) #16
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %274, i8* %275, align 1, !tbaa !2447
  %276 = xor i64 96, %260
  %277 = xor i64 %276, %263
  %278 = lshr i64 %277, 4
  %279 = trunc i64 %278 to i8
  %280 = and i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %280, i8* %281, align 1, !tbaa !2448
  %282 = icmp eq i64 %263, 0
  %283 = zext i1 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %283, i8* %284, align 1, !tbaa !2449
  %285 = lshr i64 %263, 63
  %286 = trunc i64 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %286, i8* %287, align 1, !tbaa !2450
  %288 = lshr i64 %260, 63
  %289 = xor i64 %285, %288
  %290 = add nuw nsw i64 %289, %285
  %291 = icmp eq i64 %290, 2
  %292 = zext i1 %291 to i8
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %292, i8* %293, align 1, !tbaa !2451
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 1
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %RBP, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 1
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %305 = load i64, i64* %304, align 8, !tbaa !2428
  %306 = inttoptr i64 %305 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %303, align 8, !tbaa !2428
  %308 = add i64 %305, 8
  store i64 %308, i64* %304, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404513:                                     ; preds = %block_404508
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 8
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  store i64 %310, i64* %RDI, align 8, !tbaa !2428
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 24
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i64*
  %318 = load i64, i64* %317
  store i64 %318, i64* %RSI, align 8, !tbaa !2428
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 645
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 5
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  store i64 %324, i64* %PC
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = add i64 %326, -8
  %328 = inttoptr i64 %327 to i64*
  store i64 %322, i64* %328
  store i64 %327, i64* %325, align 8, !tbaa !2428
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %320, i64* %329, align 8, !tbaa !2428
  %330 = load i64, i64* %PC
  %331 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %330, %struct.Memory* %MEMORY.1)
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 72
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 4
  store i64 %335, i64* %PC
  store i64 %333, i64* %RDI, align 8, !tbaa !2428
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 72
  %338 = load i64, i64* %RAX
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC
  %341 = inttoptr i64 %337 to i64*
  store i64 %338, i64* %341
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 520
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 5
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 5
  store i64 %347, i64* %PC
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %349 = load i64, i64* %348, align 8, !tbaa !2428
  %350 = add i64 %349, -8
  %351 = inttoptr i64 %350 to i64*
  store i64 %345, i64* %351
  store i64 %350, i64* %348, align 8, !tbaa !2428
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %343, i64* %352, align 8, !tbaa !2428
  %353 = load i64, i64* %PC
  %354 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %353, %struct.Memory* %331)
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 8
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC
  store i64 %356, i64* %RDI, align 8, !tbaa !2428
  %359 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %360 = load i64, i64* %RAX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to double*
  %364 = load double, double* %363
  %365 = bitcast i8* %359 to double*
  store double %364, double* %365, align 1, !tbaa !2452
  %366 = getelementptr inbounds i8, i8* %359, i64 8
  %367 = bitcast i8* %366 to double*
  store double 0.000000e+00, double* %367, align 1, !tbaa !2452
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 64
  %370 = bitcast %union.vec128_t* %XMM0 to i8*
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 5
  store i64 %372, i64* %PC
  %373 = bitcast i8* %370 to double*
  %374 = load double, double* %373, align 1
  %375 = inttoptr i64 %369 to double*
  store double %374, double* %375
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 502
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 5
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 5
  store i64 %381, i64* %PC
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %383 = load i64, i64* %382, align 8, !tbaa !2428
  %384 = add i64 %383, -8
  %385 = inttoptr i64 %384 to i64*
  store i64 %379, i64* %385
  store i64 %384, i64* %382, align 8, !tbaa !2428
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %377, i64* %386, align 8, !tbaa !2428
  %387 = load i64, i64* %PC
  %388 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %387, %struct.Memory* %354)
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 8
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  store i64 %390, i64* %RDI, align 8, !tbaa !2428
  %393 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %394 = load i64, i64* %RAX
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 4
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to double*
  %398 = load double, double* %397
  %399 = bitcast i8* %393 to double*
  store double %398, double* %399, align 1, !tbaa !2452
  %400 = getelementptr inbounds i8, i8* %393, i64 8
  %401 = bitcast i8* %400 to double*
  store double 0.000000e+00, double* %401, align 1, !tbaa !2452
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 24
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %RSI, align 8, !tbaa !2428
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 96
  %410 = bitcast %union.vec128_t* %XMM0 to i8*
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 5
  store i64 %412, i64* %PC
  %413 = bitcast i8* %410 to double*
  %414 = load double, double* %413, align 1
  %415 = inttoptr i64 %409 to double*
  store double %414, double* %415
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 592
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 5
  store i64 %421, i64* %PC
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %423 = load i64, i64* %422, align 8, !tbaa !2428
  %424 = add i64 %423, -8
  %425 = inttoptr i64 %424 to i64*
  store i64 %419, i64* %425
  store i64 %424, i64* %422, align 8, !tbaa !2428
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %426, align 8, !tbaa !2428
  %427 = load i64, i64* %PC
  %428 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %427, %struct.Memory* %388)
  %429 = load i64, i64* %RBP
  %430 = sub i64 %429, 80
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 4
  store i64 %432, i64* %PC
  store i64 %430, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 80
  %435 = load i64, i64* %RAX
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC
  %438 = inttoptr i64 %434 to i64*
  store i64 %435, i64* %438
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 467
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 5
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 5
  store i64 %444, i64* %PC
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %446 = load i64, i64* %445, align 8, !tbaa !2428
  %447 = add i64 %446, -8
  %448 = inttoptr i64 %447 to i64*
  store i64 %442, i64* %448
  store i64 %447, i64* %445, align 8, !tbaa !2428
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %440, i64* %449, align 8, !tbaa !2428
  %450 = load i64, i64* %PC
  %451 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %450, %struct.Memory* %428)
  %452 = load i64, i64* %RCX
  %453 = load i32, i32* %ECX
  %454 = zext i32 %453 to i64
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 2
  store i64 %456, i64* %PC
  %457 = xor i64 %454, %452
  %458 = trunc i64 %457 to i32
  %459 = and i64 %457, 4294967295
  store i64 %459, i64* %RCX, align 8, !tbaa !2428
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %460, align 1, !tbaa !2433
  %461 = and i32 %458, 255
  %462 = call i32 @llvm.ctpop.i32(i32 %461) #16
  %463 = trunc i32 %462 to i8
  %464 = and i8 %463, 1
  %465 = xor i8 %464, 1
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %465, i8* %466, align 1, !tbaa !2447
  %467 = icmp eq i32 %458, 0
  %468 = zext i1 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %468, i8* %469, align 1, !tbaa !2449
  %470 = lshr i32 %458, 31
  %471 = trunc i32 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %471, i8* %472, align 1, !tbaa !2450
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %473, align 1, !tbaa !2451
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %474, align 1, !tbaa !2448
  %475 = load i32, i32* %ECX
  %476 = zext i32 %475 to i64
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 2
  store i64 %478, i64* %PC
  %479 = and i64 %476, 4294967295
  store i64 %479, i64* %RDX, align 8, !tbaa !2428
  %480 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 96
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 5
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to double*
  %486 = load double, double* %485
  %487 = bitcast i8* %480 to double*
  store double %486, double* %487, align 1, !tbaa !2452
  %488 = getelementptr inbounds i8, i8* %480, i64 8
  %489 = bitcast i8* %488 to double*
  store double 0.000000e+00, double* %489, align 1, !tbaa !2452
  %490 = load i64, i64* %RAX
  %491 = bitcast %union.vec128_t* %XMM0 to i8*
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = bitcast i8* %491 to double*
  %495 = load double, double* %494, align 1
  %496 = inttoptr i64 %490 to double*
  store double %495, double* %496
  %497 = load i64, i64* %RBP
  %498 = sub i64 %497, 24
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 4
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %498 to i64*
  %502 = load i64, i64* %501
  store i64 %502, i64* %RDI, align 8, !tbaa !2428
  %503 = load i64, i64* %RBP
  %504 = sub i64 %503, 8
  %505 = load i64, i64* %PC
  %506 = add i64 %505, 4
  store i64 %506, i64* %PC
  %507 = inttoptr i64 %504 to i64*
  %508 = load i64, i64* %507
  store i64 %508, i64* %RAX, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 88
  %511 = load i64, i64* %RAX
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 4
  store i64 %513, i64* %PC
  %514 = inttoptr i64 %510 to i64*
  store i64 %511, i64* %514
  %515 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 64
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 5
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to double*
  %521 = load double, double* %520
  %522 = bitcast i8* %515 to double*
  store double %521, double* %522, align 1, !tbaa !2452
  %523 = getelementptr inbounds i8, i8* %515, i64 8
  %524 = bitcast i8* %523 to double*
  store double 0.000000e+00, double* %524, align 1, !tbaa !2452
  %525 = load i64, i64* %RBP
  %526 = sub i64 %525, 88
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 4
  store i64 %528, i64* %PC
  %529 = inttoptr i64 %526 to i64*
  %530 = load i64, i64* %529
  store i64 %530, i64* %RSI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 588
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_4047d0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* %0, i64 %542, %struct.Memory* %451)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 24
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  %553 = add i64 -1, %550
  store i64 %553, i64* %RAX, align 8, !tbaa !2428
  %554 = icmp ult i64 %553, %550
  %555 = icmp ult i64 %553, -1
  %556 = or i1 %554, %555
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %557, i8* %558, align 1, !tbaa !2433
  %559 = trunc i64 %553 to i32
  %560 = and i32 %559, 255
  %561 = call i32 @llvm.ctpop.i32(i32 %560) #16
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %564, i8* %565, align 1, !tbaa !2447
  %566 = xor i64 -1, %550
  %567 = xor i64 %566, %553
  %568 = lshr i64 %567, 4
  %569 = trunc i64 %568 to i8
  %570 = and i8 %569, 1
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %570, i8* %571, align 1, !tbaa !2448
  %572 = icmp eq i64 %553, 0
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %573, i8* %574, align 1, !tbaa !2449
  %575 = lshr i64 %553, 63
  %576 = trunc i64 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %576, i8* %577, align 1, !tbaa !2450
  %578 = lshr i64 %550, 63
  %579 = xor i64 %575, %578
  %580 = xor i64 %575, 1
  %581 = add nuw nsw i64 %579, %580
  %582 = icmp eq i64 %581, 2
  %583 = zext i1 %582 to i8
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %583, i8* %584, align 1, !tbaa !2451
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 24
  %587 = load i64, i64* %RAX
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %586 to i64*
  store i64 %587, i64* %590
  %591 = load i64, i64* %PC
  %592 = sub i64 %591, 141
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 5
  store i64 %594, i64* %PC
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %592, i64* %595, align 8, !tbaa !2428
  br label %block_404508

block_4044aa:                                     ; preds = %block_40449f
  %596 = sub i64 %808, 8
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 4
  store i64 %598, i64* %PC
  store i64 %596, i64* %RDI, align 8, !tbaa !2428
  %599 = load i64, i64* %RBP
  %600 = sub i64 %599, 24
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %600 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %RSI, align 8, !tbaa !2428
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 750
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 5
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 5
  store i64 %610, i64* %PC
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %612 = load i64, i64* %611, align 8, !tbaa !2428
  %613 = add i64 %612, -8
  %614 = inttoptr i64 %613 to i64*
  store i64 %608, i64* %614
  store i64 %613, i64* %611, align 8, !tbaa !2428
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %606, i64* %615, align 8, !tbaa !2428
  %616 = load i64, i64* %PC
  %617 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %616, %struct.Memory* %MEMORY.0)
  %618 = load i64, i64* %RBP
  %619 = sub i64 %618, 48
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  store i64 %619, i64* %RDI, align 8, !tbaa !2428
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 48
  %624 = load i64, i64* %RAX
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 4
  store i64 %626, i64* %PC
  %627 = inttoptr i64 %623 to i64*
  store i64 %624, i64* %627
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 625
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 5
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 5
  store i64 %633, i64* %PC
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %635 = load i64, i64* %634, align 8, !tbaa !2428
  %636 = add i64 %635, -8
  %637 = inttoptr i64 %636 to i64*
  store i64 %631, i64* %637
  store i64 %636, i64* %634, align 8, !tbaa !2428
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %629, i64* %638, align 8, !tbaa !2428
  %639 = load i64, i64* %PC
  %640 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %639, %struct.Memory* %617)
  %641 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %642 = load i64, i64* %RAX
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 4
  store i64 %644, i64* %PC
  %645 = inttoptr i64 %642 to double*
  %646 = load double, double* %645
  %647 = bitcast i8* %641 to double*
  store double %646, double* %647, align 1, !tbaa !2452
  %648 = getelementptr inbounds i8, i8* %641, i64 8
  %649 = bitcast i8* %648 to double*
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %650 = load i64, i64* %RBP
  %651 = sub i64 %650, 40
  %652 = bitcast %union.vec128_t* %XMM0 to i8*
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 5
  store i64 %654, i64* %PC
  %655 = bitcast i8* %652 to double*
  %656 = load double, double* %655, align 1
  %657 = inttoptr i64 %651 to double*
  store double %656, double* %657
  %658 = load i64, i64* %RBP
  %659 = sub i64 %658, 32
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 4
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %659 to i64*
  %663 = load i64, i64* %662
  store i64 %663, i64* %RDI, align 8, !tbaa !2428
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 8
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 4
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %665 to i64*
  %669 = load i64, i64* %668
  store i64 %669, i64* %RAX, align 8, !tbaa !2428
  %670 = load i64, i64* %RBP
  %671 = sub i64 %670, 56
  %672 = load i64, i64* %RAX
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 4
  store i64 %674, i64* %PC
  %675 = inttoptr i64 %671 to i64*
  store i64 %672, i64* %675
  %676 = load i64, i64* %RBP
  %677 = sub i64 %676, 24
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 4
  store i64 %679, i64* %PC
  %680 = inttoptr i64 %677 to i64*
  %681 = load i64, i64* %680
  store i64 %681, i64* %RDX, align 8, !tbaa !2428
  %682 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 40
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 5
  store i64 %686, i64* %PC
  %687 = inttoptr i64 %684 to double*
  %688 = load double, double* %687
  %689 = bitcast i8* %682 to double*
  store double %688, double* %689, align 1, !tbaa !2452
  %690 = getelementptr inbounds i8, i8* %682, i64 8
  %691 = bitcast i8* %690 to double*
  store double 0.000000e+00, double* %691, align 1, !tbaa !2452
  %692 = load i64, i64* %RBP
  %693 = sub i64 %692, 56
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 4
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %693 to i64*
  %697 = load i64, i64* %696
  store i64 %697, i64* %RSI, align 8, !tbaa !2428
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 746
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 5
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 5
  store i64 %703, i64* %PC
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %705 = load i64, i64* %704, align 8, !tbaa !2428
  %706 = add i64 %705, -8
  %707 = inttoptr i64 %706 to i64*
  store i64 %701, i64* %707
  store i64 %706, i64* %704, align 8, !tbaa !2428
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %699, i64* %708, align 8, !tbaa !2428
  %709 = load i64, i64* %PC
  %710 = call %struct.Memory* @sub_4047d0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* %0, i64 %709, %struct.Memory* %640)
  %711 = load i64, i64* %RBP
  %712 = sub i64 %711, 24
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 4
  store i64 %714, i64* %PC
  %715 = inttoptr i64 %712 to i64*
  %716 = load i64, i64* %715
  store i64 %716, i64* %RAX, align 8, !tbaa !2428
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = add i64 -1, %717
  store i64 %720, i64* %RAX, align 8, !tbaa !2428
  %721 = icmp ult i64 %720, %717
  %722 = icmp ult i64 %720, -1
  %723 = or i1 %721, %722
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %724, i8* %725, align 1, !tbaa !2433
  %726 = trunc i64 %720 to i32
  %727 = and i32 %726, 255
  %728 = call i32 @llvm.ctpop.i32(i32 %727) #16
  %729 = trunc i32 %728 to i8
  %730 = and i8 %729, 1
  %731 = xor i8 %730, 1
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %731, i8* %732, align 1, !tbaa !2447
  %733 = xor i64 -1, %717
  %734 = xor i64 %733, %720
  %735 = lshr i64 %734, 4
  %736 = trunc i64 %735 to i8
  %737 = and i8 %736, 1
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %737, i8* %738, align 1, !tbaa !2448
  %739 = icmp eq i64 %720, 0
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %740, i8* %741, align 1, !tbaa !2449
  %742 = lshr i64 %720, 63
  %743 = trunc i64 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %743, i8* %744, align 1, !tbaa !2450
  %745 = lshr i64 %717, 63
  %746 = xor i64 %742, %745
  %747 = xor i64 %742, 1
  %748 = add nuw nsw i64 %746, %747
  %749 = icmp eq i64 %748, 2
  %750 = zext i1 %749 to i8
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %750, i8* %751, align 1, !tbaa !2451
  %752 = load i64, i64* %RBP
  %753 = sub i64 %752, 24
  %754 = load i64, i64* %RAX
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 4
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %753 to i64*
  store i64 %754, i64* %757
  %758 = load i64, i64* %PC
  %759 = sub i64 %758, 88
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  store i64 %761, i64* %PC
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %759, i64* %762, align 8, !tbaa !2428
  br label %block_40449f

block_40449f:                                     ; preds = %block_4044aa, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %178, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %710, %block_4044aa ]
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 24
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 5
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %764 to i64*
  %768 = load i64, i64* %767
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %769, align 1, !tbaa !2433
  %770 = trunc i64 %768 to i32
  %771 = and i32 %770, 255
  %772 = call i32 @llvm.ctpop.i32(i32 %771) #16
  %773 = trunc i32 %772 to i8
  %774 = and i8 %773, 1
  %775 = xor i8 %774, 1
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %775, i8* %776, align 1, !tbaa !2447
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %777, align 1, !tbaa !2448
  %778 = icmp eq i64 %768, 0
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %779, i8* %780, align 1, !tbaa !2449
  %781 = lshr i64 %768, 63
  %782 = trunc i64 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %782, i8* %783, align 1, !tbaa !2450
  %784 = lshr i64 %768, 63
  %785 = xor i64 %781, %784
  %786 = add nuw nsw i64 %785, %784
  %787 = icmp eq i64 %786, 2
  %788 = zext i1 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %788, i8* %789, align 1, !tbaa !2451
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 88
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 6
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 6
  store i64 %795, i64* %PC
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %797 = load i8, i8* %796, align 1, !tbaa !2450
  %798 = icmp ne i8 %797, 0
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %800 = load i8, i8* %799, align 1, !tbaa !2451
  %801 = icmp ne i8 %800, 0
  %802 = xor i1 %798, %801
  %803 = zext i1 %802 to i8
  store i8 %803, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %805 = select i1 %802, i64 %791, i64 %793
  store i64 %805, i64* %804, align 8, !tbaa !2428
  %806 = load i8, i8* %BRANCH_TAKEN
  %807 = icmp eq i8 %806, 1
  %808 = load i64, i64* %RBP
  br i1 %807, label %block_4044fc, label %block_4044aa

block_404508:                                     ; preds = %block_404513, %block_4044fc
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4044fc ], [ %543, %block_404513 ]
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 24
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 5
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %810 to i64*
  %814 = load i64, i64* %813
  %815 = sub i64 %814, 1
  %816 = icmp ult i64 %814, 1
  %817 = zext i1 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %817, i8* %818, align 1, !tbaa !2433
  %819 = trunc i64 %815 to i32
  %820 = and i32 %819, 255
  %821 = call i32 @llvm.ctpop.i32(i32 %820) #16
  %822 = trunc i32 %821 to i8
  %823 = and i8 %822, 1
  %824 = xor i8 %823, 1
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %824, i8* %825, align 1, !tbaa !2447
  %826 = xor i64 %814, 1
  %827 = xor i64 %826, %815
  %828 = lshr i64 %827, 4
  %829 = trunc i64 %828 to i8
  %830 = and i8 %829, 1
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %830, i8* %831, align 1, !tbaa !2448
  %832 = icmp eq i64 %815, 0
  %833 = zext i1 %832 to i8
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %833, i8* %834, align 1, !tbaa !2449
  %835 = lshr i64 %815, 63
  %836 = trunc i64 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %836, i8* %837, align 1, !tbaa !2450
  %838 = lshr i64 %814, 63
  %839 = xor i64 %835, %838
  %840 = add nuw nsw i64 %839, %838
  %841 = icmp eq i64 %840, 2
  %842 = zext i1 %841 to i8
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %842, i8* %843, align 1, !tbaa !2451
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 141
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 6
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 6
  store i64 %849, i64* %PC
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %851 = load i8, i8* %850, align 1, !tbaa !2450
  %852 = icmp ne i8 %851, 0
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %854 = load i8, i8* %853, align 1, !tbaa !2451
  %855 = icmp ne i8 %854, 0
  %856 = xor i1 %852, %855
  %857 = zext i1 %856 to i8
  store i8 %857, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %859 = select i1 %856, i64 %845, i64 %847
  store i64 %859, i64* %858, align 8, !tbaa !2428
  %860 = load i8, i8* %BRANCH_TAKEN
  %861 = icmp eq i8 %860, 1
  br i1 %861, label %block_40459a, label %block_404513
}

; Function Attrs: noinline
define %struct.Memory* @sub_405fb0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405fb0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 72
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_406010__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 118
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_406050__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_403280__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403280:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %RAX
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = add i64 8, %45
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = icmp ult i64 %48, %45
  %50 = icmp ult i64 %48, 8
  %51 = or i1 %49, %50
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %48 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 8, %45
  %62 = xor i64 %61, %48
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %48, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %48, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %45, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %70
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2451
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %RAX
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 1
  store i64 %91, i64* %PC
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = add i64 %93, 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %92, align 8, !tbaa !2428
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 1
  store i64 %98, i64* %PC
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %101 = load i64, i64* %100, align 8, !tbaa !2428
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %99, align 8, !tbaa !2428
  %104 = add i64 %101, 8
  store i64 %104, i64* %100, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404c10__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404c10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RCX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %35 to %union.vec128_t*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %RDI
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %51
  %52 = load i64, i64* %RBP
  %53 = sub i64 %52, 24
  %54 = load i64, i64* %RSI
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 4
  store i64 %56, i64* %PC
  %57 = inttoptr i64 %53 to i64*
  store i64 %54, i64* %57
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 16
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 32
  %66 = load i64, i64* %RSI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 16
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  %76 = load i64, i64* %RSI
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = add i64 8, %76
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %80 = icmp ult i64 %79, %76
  %81 = icmp ult i64 %79, 8
  %82 = or i1 %80, %81
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %83, i8* %84, align 1, !tbaa !2433
  %85 = trunc i64 %79 to i32
  %86 = and i32 %85, 255
  %87 = call i32 @llvm.ctpop.i32(i32 %86) #16
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %90, i8* %91, align 1, !tbaa !2447
  %92 = xor i64 8, %76
  %93 = xor i64 %92, %79
  %94 = lshr i64 %93, 4
  %95 = trunc i64 %94 to i8
  %96 = and i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %96, i8* %97, align 1, !tbaa !2448
  %98 = icmp eq i64 %79, 0
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %99, i8* %100, align 1, !tbaa !2449
  %101 = lshr i64 %79, 63
  %102 = trunc i64 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %102, i8* %103, align 1, !tbaa !2450
  %104 = lshr i64 %76, 63
  %105 = xor i64 %101, %104
  %106 = add nuw nsw i64 %105, %101
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %108, i8* %109, align 1, !tbaa !2451
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 16
  %112 = load i64, i64* %RSI
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %115
  br label %block_404c30

block_404c7c:                                     ; preds = %block_404c30
  %116 = sub i64 %182, 1
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i8*
  store i8 1, i8* %119
  br label %block_404c80

block_404c77:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %120 = load i64, i64* %PC
  %121 = sub i64 %120, 71
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 5
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  br label %block_404c30

block_404c30:                                     ; preds = %block_404c77, %block_404c10
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_404c10 ], [ %346, %block_404c77 ]
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 16
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i64*
  %130 = load i64, i64* %129
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = load i64, i64* %RAX
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 24
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136
  %138 = sub i64 %131, %137
  %139 = icmp ugt i64 %137, %131
  %140 = zext i1 %139 to i8
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %140, i8* %141, align 1, !tbaa !2433
  %142 = trunc i64 %138 to i32
  %143 = and i32 %142, 255
  %144 = call i32 @llvm.ctpop.i32(i32 %143) #16
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %147, i8* %148, align 1, !tbaa !2447
  %149 = xor i64 %137, %131
  %150 = xor i64 %149, %138
  %151 = lshr i64 %150, 4
  %152 = trunc i64 %151 to i8
  %153 = and i8 %152, 1
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %153, i8* %154, align 1, !tbaa !2448
  %155 = icmp eq i64 %138, 0
  %156 = zext i1 %155 to i8
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %156, i8* %157, align 1, !tbaa !2449
  %158 = lshr i64 %138, 63
  %159 = trunc i64 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %159, i8* %160, align 1, !tbaa !2450
  %161 = lshr i64 %131, 63
  %162 = lshr i64 %137, 63
  %163 = xor i64 %162, %161
  %164 = xor i64 %158, %161
  %165 = add nuw nsw i64 %164, %163
  %166 = icmp eq i64 %165, 2
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %167, i8* %168, align 1, !tbaa !2451
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 68
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 6
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 6
  store i64 %174, i64* %PC
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %176 = load i8, i8* %175, align 1, !tbaa !2449
  store i8 %176, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %178 = icmp ne i8 %176, 0
  %179 = select i1 %178, i64 %170, i64 %172
  store i64 %179, i64* %177, align 8, !tbaa !2428
  %180 = load i8, i8* %BRANCH_TAKEN
  %181 = icmp eq i8 %180, 1
  %182 = load i64, i64* %RBP
  br i1 %181, label %block_404c7c, label %block_404c3e

block_404c6e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 1
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC
  %187 = inttoptr i64 %184 to i8*
  store i8 0, i8* %187
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 14
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 5
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %189, i64* %192, align 8, !tbaa !2428
  br label %block_404c80

block_404c3e:                                     ; preds = %block_404c30
  %193 = sub i64 %182, 16
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = load i64, i64* %RAX
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  store i64 %198, i64* %RCX, align 8, !tbaa !2428
  %201 = load i64, i64* %RCX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = add i64 8, %201
  store i64 %204, i64* %RCX, align 8, !tbaa !2428
  %205 = icmp ult i64 %204, %201
  %206 = icmp ult i64 %204, 8
  %207 = or i1 %205, %206
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %208, i8* %209, align 1, !tbaa !2433
  %210 = trunc i64 %204 to i32
  %211 = and i32 %210, 255
  %212 = call i32 @llvm.ctpop.i32(i32 %211) #16
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = xor i8 %214, 1
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %215, i8* %216, align 1, !tbaa !2447
  %217 = xor i64 8, %201
  %218 = xor i64 %217, %204
  %219 = lshr i64 %218, 4
  %220 = trunc i64 %219 to i8
  %221 = and i8 %220, 1
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %221, i8* %222, align 1, !tbaa !2448
  %223 = icmp eq i64 %204, 0
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %224, i8* %225, align 1, !tbaa !2449
  %226 = lshr i64 %204, 63
  %227 = trunc i64 %226 to i8
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %227, i8* %228, align 1, !tbaa !2450
  %229 = lshr i64 %201, 63
  %230 = xor i64 %226, %229
  %231 = add nuw nsw i64 %230, %226
  %232 = icmp eq i64 %231, 2
  %233 = zext i1 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %233, i8* %234, align 1, !tbaa !2451
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 16
  %237 = load i64, i64* %RCX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %236 to i64*
  store i64 %237, i64* %240
  %241 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %242 = load i64, i64* %RAX
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 4
  store i64 %244, i64* %PC
  %245 = inttoptr i64 %242 to double*
  %246 = load double, double* %245
  %247 = bitcast i8* %241 to double*
  store double %246, double* %247, align 1, !tbaa !2452
  %248 = getelementptr inbounds i8, i8* %241, i64 8
  %249 = bitcast i8* %248 to double*
  store double 0.000000e+00, double* %249, align 1, !tbaa !2452
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 32
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 8, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 8
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2447
  %275 = xor i64 8, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 32
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %300 = load i64, i64* %RAX
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to double*
  %304 = load double, double* %303
  %305 = bitcast i8* %299 to double*
  store double %304, double* %305, align 1, !tbaa !2452
  %306 = getelementptr inbounds i8, i8* %299, i64 8
  %307 = bitcast i8* %306 to double*
  store double 0.000000e+00, double* %307, align 1, !tbaa !2452
  %308 = bitcast %union.vec128_t* %XMM1 to i8*
  %309 = bitcast %union.vec128_t* %XMM0 to i8*
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC
  %312 = bitcast i8* %308 to double*
  %313 = load double, double* %312, align 1
  %314 = bitcast i8* %309 to double*
  %315 = load double, double* %314, align 1
  %316 = fcmp uno double %313, %315
  br i1 %316, label %317, label %329

; <label>:317:                                    ; preds = %block_404c3e
  %318 = fadd double %313, %315
  %319 = bitcast double %318 to i64
  %320 = and i64 %319, 9221120237041090560
  %321 = icmp eq i64 %320, 9218868437227405312
  %322 = and i64 %319, 2251799813685247
  %323 = icmp ne i64 %322, 0
  %324 = and i1 %321, %323
  br i1 %324, label %325, label %335

; <label>:325:                                    ; preds = %317
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %327 = load i64, i64* %326, align 8, !tbaa !2428
  %328 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %327, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:329:                                    ; preds = %block_404c3e
  %330 = fcmp ogt double %313, %315
  br i1 %330, label %335, label %331

; <label>:331:                                    ; preds = %329
  %332 = fcmp olt double %313, %315
  br i1 %332, label %335, label %333

; <label>:333:                                    ; preds = %331
  %334 = fcmp oeq double %313, %315
  br i1 %334, label %335, label %342

; <label>:335:                                    ; preds = %333, %331, %329, %317
  %336 = phi i8 [ 0, %329 ], [ 0, %331 ], [ 1, %333 ], [ 1, %317 ]
  %337 = phi i8 [ 0, %329 ], [ 0, %331 ], [ 0, %333 ], [ 1, %317 ]
  %338 = phi i8 [ 0, %329 ], [ 1, %331 ], [ 0, %333 ], [ 1, %317 ]
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %336, i8* %339, align 1, !tbaa !2432
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %337, i8* %340, align 1, !tbaa !2432
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %338, i8* %341, align 1, !tbaa !2432
  br label %342

; <label>:342:                                    ; preds = %335, %333
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %343, align 1, !tbaa !2432
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %344, align 1, !tbaa !2432
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %345, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %325, %342
  %346 = phi %struct.Memory* [ %328, %325 ], [ %MEMORY.0, %342 ]
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 15
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %354 = load i8, i8* %353, align 1, !tbaa !2433
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %356 = load i8, i8* %355, align 1, !tbaa !2449
  %357 = or i8 %356, %354
  %358 = icmp ne i8 %357, 0
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %361 = select i1 %358, i64 %348, i64 %350
  store i64 %361, i64* %360, align 8, !tbaa !2428
  %362 = load i8, i8* %BRANCH_TAKEN
  %363 = icmp eq i8 %362, 1
  br i1 %363, label %block_404c77, label %block_404c6e

block_404c80:                                     ; preds = %block_404c6e, %block_404c7c
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_404c7c ], [ %346, %block_404c6e ]
  %364 = load i64, i64* %RBP
  %365 = sub i64 %364, 1
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 3
  store i64 %367, i64* %PC
  %368 = inttoptr i64 %365 to i8*
  %369 = load i8, i8* %368
  store i8 %369, i8* %AL, align 1, !tbaa !2432
  %370 = load i8, i8* %AL
  %371 = zext i8 %370 to i64
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 2
  store i64 %373, i64* %PC
  %374 = and i64 1, %371
  %375 = trunc i64 %374 to i8
  store i8 %375, i8* %AL, align 1, !tbaa !2432
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %376, align 1, !tbaa !2433
  %377 = trunc i64 %374 to i32
  %378 = and i32 %377, 255
  %379 = call i32 @llvm.ctpop.i32(i32 %378) #16
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %382, i8* %383, align 1, !tbaa !2447
  %384 = icmp eq i8 %375, 0
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %385, i8* %386, align 1, !tbaa !2449
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %387, align 1, !tbaa !2450
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %388, align 1, !tbaa !2451
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %389, align 1, !tbaa !2448
  %390 = load i8, i8* %AL
  %391 = zext i8 %390 to i64
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = and i64 %391, 255
  store i64 %394, i64* %RAX, align 8, !tbaa !2428
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 1
  store i64 %396, i64* %PC
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %398 = load i64, i64* %397, align 8, !tbaa !2428
  %399 = add i64 %398, 8
  %400 = inttoptr i64 %398 to i64*
  %401 = load i64, i64* %400
  store i64 %401, i64* %RBP, align 8, !tbaa !2428
  store i64 %399, i64* %397, align 8, !tbaa !2428
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 1
  store i64 %403, i64* %PC
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %406 = load i64, i64* %405, align 8, !tbaa !2428
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  store i64 %408, i64* %404, align 8, !tbaa !2428
  %409 = add i64 %406, 8
  store i64 %409, i64* %405, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_4023a0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4023a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = bitcast %union.vec128_t* %XMM0 to i8*
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC
  %82 = bitcast i8* %79 to double*
  %83 = load double, double* %82, align 1
  %84 = inttoptr i64 %78 to double*
  store double %83, double* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %RDI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 24
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RDX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 40
  %105 = load i64, i64* %RCX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_4023c8

block_402411:                                     ; preds = %block_4023c8
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4023d8:                                     ; preds = %block_4023c8
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 24
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 32
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 7196
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 32
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 13935
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_405a60__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 32
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 40
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 7506
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_4023c8

block_4023c8:                                     ; preds = %block_4023d8, %block_4023a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4023a0 ], [ %249, %block_4023d8 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_402411, label %block_4023d8
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a10___cxx_global_var_init_20(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%DVMPb_type* @DVMPb to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4554
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401cd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f40__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401f40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 64
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 64
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2433
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i64 64, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2451
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = bitcast %union.vec128_t* %XMM0 to i8*
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 5
  store i64 %77, i64* %PC
  %78 = bitcast i8* %75 to double*
  %79 = load double, double* %78, align 1
  %80 = inttoptr i64 %74 to double*
  store double %79, double* %80
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 16
  %83 = load i64, i64* %RDI
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %86
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 24
  %89 = load i64, i64* %RSI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 32
  %95 = load i64, i64* %RDX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 36
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 7
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  store i32 0, i32* %103
  br label %block_401f60

block_401f70:                                     ; preds = %block_401f60
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 16
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 24
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 8
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 48
  %124 = load i64, i64* %RAX
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %123 to i64*
  store i64 %124, i64* %127
  %128 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 48
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to double*
  %134 = load double, double* %133
  %135 = bitcast i8* %128 to double*
  store double %134, double* %135, align 1, !tbaa !2452
  %136 = getelementptr inbounds i8, i8* %128, i64 8
  %137 = bitcast i8* %136 to double*
  store double 0.000000e+00, double* %137, align 1, !tbaa !2452
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 17547
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %141, i64* %147
  store i64 %146, i64* %144, align 8, !tbaa !2428
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %139, i64* %148, align 8, !tbaa !2428
  %149 = load i64, i64* %PC
  %150 = call %struct.Memory* @sub_406410__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* %0, i64 %149, %struct.Memory* %MEMORY.0)
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 56
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 56
  %157 = bitcast %union.vec128_t* %XMM0 to i8*
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  %160 = bitcast i8* %157 to double*
  %161 = load double, double* %160, align 1
  %162 = inttoptr i64 %156 to double*
  store double %161, double* %162
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 16317
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  store i64 %168, i64* %PC
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %166, i64* %172
  store i64 %171, i64* %169, align 8, !tbaa !2428
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %164, i64* %173, align 8, !tbaa !2428
  %174 = load i64, i64* %PC
  %175 = call %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* %0, i64 %174, %struct.Memory* %150)
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 15960
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 5
  store i64 %181, i64* %PC
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %183 = load i64, i64* %182, align 8, !tbaa !2428
  %184 = add i64 %183, -8
  %185 = inttoptr i64 %184 to i64*
  store i64 %179, i64* %185
  store i64 %184, i64* %182, align 8, !tbaa !2428
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %177, i64* %186, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* %0, i64 %187, %struct.Memory* %175)
  %189 = load i64, i64* %RBP
  %190 = sub i64 %189, 36
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 3
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %190 to i32*
  %194 = load i32, i32* %193
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = load i64, i64* %RAX
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 3
  store i64 %198, i64* %PC
  %199 = trunc i64 %196 to i32
  %200 = add i32 1, %199
  %201 = zext i32 %200 to i64
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = icmp ult i32 %200, %199
  %203 = icmp ult i32 %200, 1
  %204 = or i1 %202, %203
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %205, i8* %206, align 1, !tbaa !2433
  %207 = and i32 %200, 255
  %208 = call i32 @llvm.ctpop.i32(i32 %207) #16
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %211, i8* %212, align 1, !tbaa !2447
  %213 = xor i64 1, %196
  %214 = trunc i64 %213 to i32
  %215 = xor i32 %214, %200
  %216 = lshr i32 %215, 4
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %218, i8* %219, align 1, !tbaa !2448
  %220 = icmp eq i32 %200, 0
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %221, i8* %222, align 1, !tbaa !2449
  %223 = lshr i32 %200, 31
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %224, i8* %225, align 1, !tbaa !2450
  %226 = lshr i32 %199, 31
  %227 = xor i32 %223, %226
  %228 = add nuw nsw i32 %227, %223
  %229 = icmp eq i32 %228, 2
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %230, i8* %231, align 1, !tbaa !2451
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 36
  %234 = load i32, i32* %EAX
  %235 = zext i32 %234 to i64
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %233 to i32*
  store i32 %234, i32* %238
  %239 = load i64, i64* %PC
  %240 = sub i64 %239, 70
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %240, i64* %243, align 8, !tbaa !2428
  br label %block_401f60

block_401fab:                                     ; preds = %block_401f60
  %244 = load i64, i64* %RSP
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = add i64 64, %244
  store i64 %247, i64* %RSP, align 8, !tbaa !2428
  %248 = icmp ult i64 %247, %244
  %249 = icmp ult i64 %247, 64
  %250 = or i1 %248, %249
  %251 = zext i1 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %251, i8* %252, align 1, !tbaa !2433
  %253 = trunc i64 %247 to i32
  %254 = and i32 %253, 255
  %255 = call i32 @llvm.ctpop.i32(i32 %254) #16
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  %258 = xor i8 %257, 1
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %258, i8* %259, align 1, !tbaa !2447
  %260 = xor i64 64, %244
  %261 = xor i64 %260, %247
  %262 = lshr i64 %261, 4
  %263 = trunc i64 %262 to i8
  %264 = and i8 %263, 1
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %264, i8* %265, align 1, !tbaa !2448
  %266 = icmp eq i64 %247, 0
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %267, i8* %268, align 1, !tbaa !2449
  %269 = lshr i64 %247, 63
  %270 = trunc i64 %269 to i8
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %270, i8* %271, align 1, !tbaa !2450
  %272 = lshr i64 %244, 63
  %273 = xor i64 %269, %272
  %274 = add nuw nsw i64 %273, %269
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %276, i8* %277, align 1, !tbaa !2451
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 1
  store i64 %279, i64* %PC
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %281 = load i64, i64* %280, align 8, !tbaa !2428
  %282 = add i64 %281, 8
  %283 = inttoptr i64 %281 to i64*
  %284 = load i64, i64* %283
  store i64 %284, i64* %RBP, align 8, !tbaa !2428
  store i64 %282, i64* %280, align 8, !tbaa !2428
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 1
  store i64 %286, i64* %PC
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %289 = load i64, i64* %288, align 8, !tbaa !2428
  %290 = inttoptr i64 %289 to i64*
  %291 = load i64, i64* %290
  store i64 %291, i64* %287, align 8, !tbaa !2428
  %292 = add i64 %289, 8
  store i64 %292, i64* %288, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401f60:                                     ; preds = %block_401f70, %block_401f40
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401f40 ], [ %188, %block_401f70 ]
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 36
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 3
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i32*
  %298 = load i32, i32* %297
  %299 = zext i32 %298 to i64
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = load i32, i32* %EAX
  %301 = zext i32 %300 to i64
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 7
  store i64 %303, i64* %PC
  %304 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %305 = sub i32 %300, %304
  %306 = icmp ult i32 %300, %304
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %307, i8* %308, align 1, !tbaa !2433
  %309 = and i32 %305, 255
  %310 = call i32 @llvm.ctpop.i32(i32 %309) #16
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %313, i8* %314, align 1, !tbaa !2447
  %315 = xor i32 %304, %300
  %316 = xor i32 %315, %305
  %317 = lshr i32 %316, 4
  %318 = trunc i32 %317 to i8
  %319 = and i8 %318, 1
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %319, i8* %320, align 1, !tbaa !2448
  %321 = icmp eq i32 %305, 0
  %322 = zext i1 %321 to i8
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %322, i8* %323, align 1, !tbaa !2449
  %324 = lshr i32 %305, 31
  %325 = trunc i32 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %325, i8* %326, align 1, !tbaa !2450
  %327 = lshr i32 %300, 31
  %328 = lshr i32 %304, 31
  %329 = xor i32 %328, %327
  %330 = xor i32 %324, %327
  %331 = add nuw nsw i32 %330, %329
  %332 = icmp eq i32 %331, 2
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %333, i8* %334, align 1, !tbaa !2451
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 65
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 6
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 6
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %342 = load i8, i8* %341, align 1, !tbaa !2450
  %343 = icmp ne i8 %342, 0
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %345 = load i8, i8* %344, align 1, !tbaa !2451
  %346 = icmp ne i8 %345, 0
  %347 = xor i1 %343, %346
  %348 = xor i1 %347, true
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %351 = select i1 %347, i64 %338, i64 %336
  store i64 %351, i64* %350, align 8, !tbaa !2428
  %352 = load i8, i8* %BRANCH_TAKEN
  %353 = icmp eq i8 %352, 1
  br i1 %353, label %block_401fab, label %block_401f70
}

; Function Attrs: noinline
define %struct.Memory* @sub_402420__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402420:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402448

block_4024c9:                                     ; preds = %block_402448
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402458:                                     ; preds = %block_402448
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 5364
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 13479
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_405940__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 5770
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_402448

block_402448:                                     ; preds = %block_402458, %block_402420
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402420 ], [ %333, %block_402458 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_4024c9, label %block_402458
}

; Function Attrs: noinline
define %struct.Memory* @sub_402600__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402600:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402628

block_402671:                                     ; preds = %block_402628
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402638:                                     ; preds = %block_402628
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 16
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 24
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 9276
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 24
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 32
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 12239
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 24
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 32
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 9570
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_402628

block_402628:                                     ; preds = %block_402638, %block_402600
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402600 ], [ %249, %block_402638 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_402671, label %block_402638
}

; Function Attrs: noinline
define %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403c60:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = sub i64 %31, 32
  store i64 %34, i64* %RSP, align 8, !tbaa !2428
  %35 = icmp ult i64 %31, 32
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %36, i8* %37, align 1, !tbaa !2433
  %38 = trunc i64 %34 to i32
  %39 = and i32 %38, 255
  %40 = call i32 @llvm.ctpop.i32(i32 %39) #16
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %43, i8* %44, align 1, !tbaa !2447
  %45 = xor i64 32, %31
  %46 = xor i64 %45, %34
  %47 = lshr i64 %46, 4
  %48 = trunc i64 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2448
  %51 = icmp eq i64 %34, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i64 %34, 63
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2450
  %57 = lshr i64 %31, 63
  %58 = xor i64 %54, %57
  %59 = add nuw nsw i64 %58, %57
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2451
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 16
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 20
  %71 = load i32, i32* %ESI
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RDI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 3
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %82 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %RDI, align 8, !tbaa !2428
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RDI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 114
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 5
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 5
  store i64 %104, i64* %PC
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %106 = load i64, i64* %105, align 8, !tbaa !2428
  %107 = add i64 %106, -8
  %108 = inttoptr i64 %107 to i64*
  store i64 %102, i64* %108
  store i64 %107, i64* %105, align 8, !tbaa !2428
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %100, i64* %109, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = call %struct.Memory* @sub_403cf0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %110, %struct.Memory* %2)
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 8
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i64*
  %117 = load i64, i64* %116
  store i64 %117, i64* %RDI, align 8, !tbaa !2428
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 32
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RDI
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 3
  store i64 %126, i64* %PC
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %127 = load i64, i64* %RSP
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = add i64 32, %127
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %131 = icmp ult i64 %130, %127
  %132 = icmp ult i64 %130, 32
  %133 = or i1 %131, %132
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %134, i8* %135, align 1, !tbaa !2433
  %136 = trunc i64 %130 to i32
  %137 = and i32 %136, 255
  %138 = call i32 @llvm.ctpop.i32(i32 %137) #16
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %141, i8* %142, align 1, !tbaa !2447
  %143 = xor i64 32, %127
  %144 = xor i64 %143, %130
  %145 = lshr i64 %144, 4
  %146 = trunc i64 %145 to i8
  %147 = and i8 %146, 1
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %147, i8* %148, align 1, !tbaa !2448
  %149 = icmp eq i64 %130, 0
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %150, i8* %151, align 1, !tbaa !2449
  %152 = lshr i64 %130, 63
  %153 = trunc i64 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %153, i8* %154, align 1, !tbaa !2450
  %155 = lshr i64 %127, 63
  %156 = xor i64 %152, %155
  %157 = add nuw nsw i64 %156, %152
  %158 = icmp eq i64 %157, 2
  %159 = zext i1 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %159, i8* %160, align 1, !tbaa !2451
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %164 = load i64, i64* %163, align 8, !tbaa !2428
  %165 = add i64 %164, 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %RBP, align 8, !tbaa !2428
  store i64 %165, i64* %163, align 8, !tbaa !2428
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 1
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %172 = load i64, i64* %171, align 8, !tbaa !2428
  %173 = inttoptr i64 %172 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %170, align 8, !tbaa !2428
  %175 = add i64 %172, 8
  store i64 %175, i64* %171, align 8, !tbaa !2428
  ret %struct.Memory* %111
}

; Function Attrs: noinline
define %struct.Memory* @sub_4055f0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4055f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RBP
  %36 = sub i64 %35, 8
  %37 = load i64, i64* %RDI
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %40
  %41 = load i64, i64* %RBP
  %42 = sub i64 %41, 16
  %43 = load i64, i64* %RSI
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = load i64, i64* %RSI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 16
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = load i64, i64* %RSI
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68
  %70 = sub i64 %64, %69
  %71 = icmp ugt i64 %69, %64
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2433
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = xor i64 %69, %64
  %82 = xor i64 %81, %70
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = icmp eq i64 %70, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = lshr i64 %70, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = lshr i64 %64, 63
  %94 = lshr i64 %69, 63
  %95 = xor i64 %94, %93
  %96 = xor i64 %90, %93
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2451
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %104 = load i8, i8* %103, align 1, !tbaa !2433
  store i8 %104, i8* %AL, align 1, !tbaa !2432
  %105 = load i8, i8* %AL
  %106 = zext i8 %105 to i64
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 2
  store i64 %108, i64* %PC
  %109 = and i64 1, %106
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %AL, align 1, !tbaa !2432
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = icmp eq i8 %110, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %122, align 1, !tbaa !2450
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %123, align 1, !tbaa !2451
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %124, align 1, !tbaa !2448
  %125 = load i8, i8* %AL
  %126 = zext i8 %125 to i64
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = and i64 %126, 255
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 1
  store i64 %131, i64* %PC
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %133 = load i64, i64* %132, align 8, !tbaa !2428
  %134 = add i64 %133, 8
  %135 = inttoptr i64 %133 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RBP, align 8, !tbaa !2428
  store i64 %134, i64* %132, align 8, !tbaa !2428
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 1
  store i64 %138, i64* %PC
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %141 = load i64, i64* %140, align 8, !tbaa !2428
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %139, align 8, !tbaa !2428
  %144 = add i64 %141, 8
  store i64 %144, i64* %140, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405ff0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405ff0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401e30__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401e30:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %25 to %union.vec128_t*
  %26 = load i64, i64* %RBP
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 1
  store i64 %28, i64* %PC
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %30 = load i64, i64* %29, align 8, !tbaa !2428
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %26, i64* %32
  store i64 %31, i64* %29, align 8, !tbaa !2428
  %33 = load i64, i64* %RSP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC
  store i64 %33, i64* %RBP, align 8, !tbaa !2428
  %36 = load i64, i64* %RBP
  %37 = sub i64 %36, 8
  %38 = bitcast %union.vec128_t* %XMM0 to i8*
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 5
  store i64 %40, i64* %PC
  %41 = bitcast i8* %38 to double*
  %42 = load double, double* %41, align 1
  %43 = inttoptr i64 %37 to double*
  store double %42, double* %43
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 16
  %46 = load i64, i64* %RDI
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 24
  %52 = load i64, i64* %RSI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55
  br label %block_401e41

block_401e4f:                                     ; preds = %block_401e41
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 16
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %57 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %RAX, align 8, !tbaa !2428
  %62 = load i64, i64* %RAX
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 3
  store i64 %64, i64* %PC
  store i64 %62, i64* %RCX, align 8, !tbaa !2428
  %65 = load i64, i64* %RCX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = add i64 8, %65
  store i64 %68, i64* %RCX, align 8, !tbaa !2428
  %69 = icmp ult i64 %68, %65
  %70 = icmp ult i64 %68, 8
  %71 = or i1 %69, %70
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2433
  %74 = trunc i64 %68 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = xor i64 8, %65
  %82 = xor i64 %81, %68
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = icmp eq i64 %68, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = lshr i64 %68, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = lshr i64 %65, 63
  %94 = xor i64 %90, %93
  %95 = add nuw nsw i64 %94, %90
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %97, i8* %98, align 1, !tbaa !2451
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 16
  %101 = load i64, i64* %RCX
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %100 to i64*
  store i64 %101, i64* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 8
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %106 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = load i64, i64* %RAX
  %112 = load i64, i64* %RCX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 3
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %115
  %116 = load i64, i64* %PC
  %117 = sub i64 %116, 36
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  store i64 %119, i64* %PC
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %117, i64* %120, align 8, !tbaa !2428
  br label %block_401e41

block_401e6a:                                     ; preds = %block_401e41
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 1
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, 8
  %126 = inttoptr i64 %124 to i64*
  %127 = load i64, i64* %126
  store i64 %127, i64* %RBP, align 8, !tbaa !2428
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 1
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %132 = load i64, i64* %131, align 8, !tbaa !2428
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %130, align 8, !tbaa !2428
  %135 = add i64 %132, 8
  store i64 %135, i64* %131, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401e41:                                     ; preds = %block_401e4f, %block_401e30
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e30 ], [ %MEMORY.0, %block_401e4f ]
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 16
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = load i64, i64* %RAX
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 24
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i64*
  %148 = load i64, i64* %147
  %149 = sub i64 %142, %148
  %150 = icmp ugt i64 %148, %142
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2433
  %153 = trunc i64 %149 to i32
  %154 = and i32 %153, 255
  %155 = call i32 @llvm.ctpop.i32(i32 %154) #16
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  %158 = xor i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %158, i8* %159, align 1, !tbaa !2447
  %160 = xor i64 %148, %142
  %161 = xor i64 %160, %149
  %162 = lshr i64 %161, 4
  %163 = trunc i64 %162 to i8
  %164 = and i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %164, i8* %165, align 1, !tbaa !2448
  %166 = icmp eq i64 %149, 0
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %167, i8* %168, align 1, !tbaa !2449
  %169 = lshr i64 %149, 63
  %170 = trunc i64 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2450
  %172 = lshr i64 %142, 63
  %173 = lshr i64 %148, 63
  %174 = xor i64 %173, %172
  %175 = xor i64 %169, %172
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %178, i8* %179, align 1, !tbaa !2451
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 33
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 6
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 6
  store i64 %185, i64* %PC
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %187 = load i8, i8* %186, align 1, !tbaa !2449
  store i8 %187, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %189 = icmp ne i8 %187, 0
  %190 = select i1 %189, i64 %181, i64 %183
  store i64 %190, i64* %188, align 8, !tbaa !2428
  %191 = load i8, i8* %BRANCH_TAKEN
  %192 = icmp eq i8 %191, 1
  br i1 %192, label %block_401e6a, label %block_401e4f
}

; Function Attrs: noinline
define %struct.Memory* @sub_401fc0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401fc0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 80
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 80
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2433
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i64 80, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2451
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = load i64, i64* %RDI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %RSI
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 4
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = bitcast %union.vec128_t* %XMM0 to i8*
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = bitcast i8* %87 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %86 to double*
  store double %91, double* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 32
  %95 = load i64, i64* %RDX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 36
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 7
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  store i32 0, i32* %103
  br label %block_401fe0

block_401ff0:                                     ; preds = %block_401fe0
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 8
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 48
  %112 = load i64, i64* %RAX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %115
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 16
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 56
  %124 = load i64, i64* %RAX
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %123 to i64*
  store i64 %124, i64* %127
  %128 = load i64, i64* %RBP
  %129 = sub i64 %128, 24
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = inttoptr i64 %129 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 64
  %136 = load i64, i64* %RAX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %135 to i64*
  store i64 %136, i64* %139
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 48
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 4
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %RDI, align 8, !tbaa !2428
  %146 = load i64, i64* %RBP
  %147 = sub i64 %146, 56
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 4
  store i64 %149, i64* %PC
  %150 = inttoptr i64 %147 to i64*
  %151 = load i64, i64* %150
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to double*
  %158 = load double, double* %157
  %159 = bitcast i8* %152 to double*
  store double %158, double* %159, align 1, !tbaa !2452
  %160 = getelementptr inbounds i8, i8* %152, i64 8
  %161 = bitcast i8* %160 to double*
  store double 0.000000e+00, double* %161, align 1, !tbaa !2452
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 17275
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %169 = load i64, i64* %168, align 8, !tbaa !2428
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %165, i64* %171
  store i64 %170, i64* %168, align 8, !tbaa !2428
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %163, i64* %172, align 8, !tbaa !2428
  %173 = load i64, i64* %PC
  %174 = call %struct.Memory* @sub_406390__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* %0, i64 %173, %struct.Memory* %MEMORY.0)
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 72
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  store i64 %176, i64* %RDI, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 72
  %181 = bitcast %union.vec128_t* %XMM0 to i8*
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 5
  store i64 %183, i64* %PC
  %184 = bitcast i8* %181 to double*
  %185 = load double, double* %184, align 1
  %186 = inttoptr i64 %180 to double*
  store double %185, double* %186
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 16173
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* %0, i64 %198, %struct.Memory* %174)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 15816
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 5
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %203, i64* %209
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %201, i64* %210, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* %0, i64 %211, %struct.Memory* %199)
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 36
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %214 to i32*
  %218 = load i32, i32* %217
  %219 = zext i32 %218 to i64
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = load i64, i64* %RAX
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 3
  store i64 %222, i64* %PC
  %223 = trunc i64 %220 to i32
  %224 = add i32 1, %223
  %225 = zext i32 %224 to i64
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = icmp ult i32 %224, %223
  %227 = icmp ult i32 %224, 1
  %228 = or i1 %226, %227
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %229, i8* %230, align 1, !tbaa !2433
  %231 = and i32 %224, 255
  %232 = call i32 @llvm.ctpop.i32(i32 %231) #16
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %235, i8* %236, align 1, !tbaa !2447
  %237 = xor i64 1, %220
  %238 = trunc i64 %237 to i32
  %239 = xor i32 %238, %224
  %240 = lshr i32 %239, 4
  %241 = trunc i32 %240 to i8
  %242 = and i8 %241, 1
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %242, i8* %243, align 1, !tbaa !2448
  %244 = icmp eq i32 %224, 0
  %245 = zext i1 %244 to i8
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %245, i8* %246, align 1, !tbaa !2449
  %247 = lshr i32 %224, 31
  %248 = trunc i32 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %248, i8* %249, align 1, !tbaa !2450
  %250 = lshr i32 %223, 31
  %251 = xor i32 %247, %250
  %252 = add nuw nsw i32 %251, %247
  %253 = icmp eq i32 %252, 2
  %254 = zext i1 %253 to i8
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %254, i8* %255, align 1, !tbaa !2451
  %256 = load i64, i64* %RBP
  %257 = sub i64 %256, 36
  %258 = load i32, i32* %EAX
  %259 = zext i32 %258 to i64
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %257 to i32*
  store i32 %258, i32* %262
  %263 = load i64, i64* %PC
  %264 = sub i64 %263, 86
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 5
  store i64 %266, i64* %PC
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %264, i64* %267, align 8, !tbaa !2428
  br label %block_401fe0

block_40203b:                                     ; preds = %block_401fe0
  %268 = load i64, i64* %RSP
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = add i64 80, %268
  store i64 %271, i64* %RSP, align 8, !tbaa !2428
  %272 = icmp ult i64 %271, %268
  %273 = icmp ult i64 %271, 80
  %274 = or i1 %272, %273
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %275, i8* %276, align 1, !tbaa !2433
  %277 = trunc i64 %271 to i32
  %278 = and i32 %277, 255
  %279 = call i32 @llvm.ctpop.i32(i32 %278) #16
  %280 = trunc i32 %279 to i8
  %281 = and i8 %280, 1
  %282 = xor i8 %281, 1
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %282, i8* %283, align 1, !tbaa !2447
  %284 = xor i64 80, %268
  %285 = xor i64 %284, %271
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %288, i8* %289, align 1, !tbaa !2448
  %290 = icmp eq i64 %271, 0
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %291, i8* %292, align 1, !tbaa !2449
  %293 = lshr i64 %271, 63
  %294 = trunc i64 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %294, i8* %295, align 1, !tbaa !2450
  %296 = lshr i64 %268, 63
  %297 = xor i64 %293, %296
  %298 = add nuw nsw i64 %297, %293
  %299 = icmp eq i64 %298, 2
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %300, i8* %301, align 1, !tbaa !2451
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 1
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %305 = load i64, i64* %304, align 8, !tbaa !2428
  %306 = add i64 %305, 8
  %307 = inttoptr i64 %305 to i64*
  %308 = load i64, i64* %307
  store i64 %308, i64* %RBP, align 8, !tbaa !2428
  store i64 %306, i64* %304, align 8, !tbaa !2428
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 1
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %313 = load i64, i64* %312, align 8, !tbaa !2428
  %314 = inttoptr i64 %313 to i64*
  %315 = load i64, i64* %314
  store i64 %315, i64* %311, align 8, !tbaa !2428
  %316 = add i64 %313, 8
  store i64 %316, i64* %312, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401fe0:                                     ; preds = %block_401ff0, %block_401fc0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401fc0 ], [ %212, %block_401ff0 ]
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 36
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %RAX, align 8, !tbaa !2428
  %324 = load i32, i32* %EAX
  %325 = zext i32 %324 to i64
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 7
  store i64 %327, i64* %PC
  %328 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %329 = sub i32 %324, %328
  %330 = icmp ult i32 %324, %328
  %331 = zext i1 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %331, i8* %332, align 1, !tbaa !2433
  %333 = and i32 %329, 255
  %334 = call i32 @llvm.ctpop.i32(i32 %333) #16
  %335 = trunc i32 %334 to i8
  %336 = and i8 %335, 1
  %337 = xor i8 %336, 1
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %337, i8* %338, align 1, !tbaa !2447
  %339 = xor i32 %328, %324
  %340 = xor i32 %339, %329
  %341 = lshr i32 %340, 4
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %343, i8* %344, align 1, !tbaa !2448
  %345 = icmp eq i32 %329, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i32 %329, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2450
  %351 = lshr i32 %324, 31
  %352 = lshr i32 %328, 31
  %353 = xor i32 %352, %351
  %354 = xor i32 %348, %351
  %355 = add nuw nsw i32 %354, %353
  %356 = icmp eq i32 %355, 2
  %357 = zext i1 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %357, i8* %358, align 1, !tbaa !2451
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 81
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 6
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 6
  store i64 %364, i64* %PC
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %366 = load i8, i8* %365, align 1, !tbaa !2450
  %367 = icmp ne i8 %366, 0
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %369 = load i8, i8* %368, align 1, !tbaa !2451
  %370 = icmp ne i8 %369, 0
  %371 = xor i1 %367, %370
  %372 = xor i1 %371, true
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %375 = select i1 %371, i64 %362, i64 %360
  store i64 %375, i64* %374, align 8, !tbaa !2428
  %376 = load i8, i8* %BRANCH_TAKEN
  %377 = icmp eq i8 %376, 1
  br i1 %377, label %block_40203b, label %block_401ff0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400bb0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400bb0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400b40_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_403100__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403100:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_403130__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_403d70__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403d70:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RAX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 5
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RCX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 7
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RDX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 9
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RSI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 11
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDI = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 13
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSP = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 15
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RBP = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 176
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 176
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2433
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = xor i64 176, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2451
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = load i64, i64* %RSI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = bitcast %union.vec128_t* %XMM0 to i8*
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 5
  store i64 %95, i64* %PC
  %96 = bitcast i8* %93 to double*
  %97 = load double, double* %96, align 1
  %98 = inttoptr i64 %92 to double*
  store double %97, double* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 24
  %101 = load i64, i64* %RDI
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %100 to i64*
  store i64 %101, i64* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %RDX
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %106 to i64*
  store i64 %107, i64* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 32
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %RDX, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 48
  %119 = load i64, i64* %RDX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 48
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RDX, align 8, !tbaa !2428
  %129 = load i64, i64* %RDX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 1, %129
  store i64 %132, i64* %RDX, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 1
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 1, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %RDX
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = shl i64 %163, 1
  %167 = icmp slt i64 %163, 0
  %168 = icmp slt i64 %166, 0
  %169 = xor i1 %167, %168
  store i64 %166, i64* %RDX, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %171 = zext i1 %167 to i8
  store i8 %171, i8* %170, align 1, !tbaa !2432
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %173 = trunc i64 %166 to i32
  %174 = and i32 %173, 254
  %175 = call i32 @llvm.ctpop.i32(i32 %174) #16
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  %178 = xor i8 %177, 1
  store i8 %178, i8* %172, align 1, !tbaa !2432
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %179, align 1, !tbaa !2432
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %181 = icmp eq i64 %166, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %180, align 1, !tbaa !2432
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %184 = lshr i64 %166, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %183, align 1, !tbaa !2432
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %187 = zext i1 %169 to i8
  store i8 %187, i8* %186, align 1, !tbaa !2432
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 40
  %190 = load i64, i64* %RDX
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %189 to i64*
  store i64 %190, i64* %193
  br label %block_403da4

block_403e96:                                     ; preds = %block_403e88
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 8
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 4
  store i64 %197, i64* %PC
  store i64 %195, i64* %RDI, align 8, !tbaa !2428
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 40
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  %207 = sub i64 %204, 1
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = icmp ult i64 %204, 1
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %209, i8* %210, align 1, !tbaa !2433
  %211 = trunc i64 %207 to i32
  %212 = and i32 %211, 255
  %213 = call i32 @llvm.ctpop.i32(i32 %212) #16
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %216, i8* %217, align 1, !tbaa !2447
  %218 = xor i64 1, %204
  %219 = xor i64 %218, %207
  %220 = lshr i64 %219, 4
  %221 = trunc i64 %220 to i8
  %222 = and i8 %221, 1
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %222, i8* %223, align 1, !tbaa !2448
  %224 = icmp eq i64 %207, 0
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %225, i8* %226, align 1, !tbaa !2449
  %227 = lshr i64 %207, 63
  %228 = trunc i64 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %228, i8* %229, align 1, !tbaa !2450
  %230 = lshr i64 %204, 63
  %231 = xor i64 %227, %230
  %232 = add nuw nsw i64 %231, %230
  %233 = icmp eq i64 %232, 2
  %234 = zext i1 %233 to i8
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %234, i8* %235, align 1, !tbaa !2451
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %239 = load i64, i64* %PC
  %240 = sub i64 %239, 357
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 5
  store i64 %244, i64* %PC
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %246 = load i64, i64* %245, align 8, !tbaa !2428
  %247 = add i64 %246, -8
  %248 = inttoptr i64 %247 to i64*
  store i64 %242, i64* %248
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %240, i64* %249, align 8, !tbaa !2428
  %250 = load i64, i64* %PC
  %251 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %250, %struct.Memory* %MEMORY.4)
  %252 = load i64, i64* %RBP
  %253 = sub i64 %252, 88
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC
  store i64 %253, i64* %RDI, align 8, !tbaa !2428
  %256 = load i64, i64* %RBP
  %257 = sub i64 %256, 88
  %258 = load i64, i64* %RAX
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 4
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %257 to i64*
  store i64 %258, i64* %261
  %262 = load i64, i64* %PC
  %263 = sub i64 %262, 482
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 5
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %265, i64* %271
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %263, i64* %272, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %273, %struct.Memory* %251)
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  store i64 %276, i64* %RDI, align 8, !tbaa !2428
  %279 = load i64, i64* %RBP
  %280 = sub i64 %279, 48
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %280 to i64*
  %284 = load i64, i64* %283
  store i64 %284, i64* %RSI, align 8, !tbaa !2428
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 152
  %287 = load i64, i64* %RAX
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 7
  store i64 %289, i64* %PC
  %290 = inttoptr i64 %286 to i64*
  store i64 %287, i64* %290
  %291 = load i64, i64* %PC
  %292 = sub i64 %291, 390
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 5
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 5
  store i64 %296, i64* %PC
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %298 = load i64, i64* %297, align 8, !tbaa !2428
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %294, i64* %300
  store i64 %299, i64* %297, align 8, !tbaa !2428
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %292, i64* %301, align 8, !tbaa !2428
  %302 = load i64, i64* %PC
  %303 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %302, %struct.Memory* %274)
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 96
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  store i64 %305, i64* %RDI, align 8, !tbaa !2428
  %308 = load i64, i64* %RBP
  %309 = sub i64 %308, 96
  %310 = load i64, i64* %RAX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %309 to i64*
  store i64 %310, i64* %313
  %314 = load i64, i64* %PC
  %315 = sub i64 %314, 515
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 5
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 5
  store i64 %319, i64* %PC
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %321 = load i64, i64* %320, align 8, !tbaa !2428
  %322 = add i64 %321, -8
  %323 = inttoptr i64 %322 to i64*
  store i64 %317, i64* %323
  store i64 %322, i64* %320, align 8, !tbaa !2428
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %315, i64* %324, align 8, !tbaa !2428
  %325 = load i64, i64* %PC
  %326 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %325, %struct.Memory* %303)
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 152
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 7
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i64*
  %332 = load i64, i64* %331
  store i64 %332, i64* %RSI, align 8, !tbaa !2428
  %333 = load i64, i64* %RSI
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 3
  store i64 %335, i64* %PC
  %336 = inttoptr i64 %333 to i64*
  %337 = load i64, i64* %336
  store i64 %337, i64* %RDI, align 8, !tbaa !2428
  %338 = load i64, i64* %RAX
  %339 = load i64, i64* %RDI
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 3
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %338 to i64*
  store i64 %339, i64* %342
  %343 = load i64, i64* %RBP
  %344 = sub i64 %343, 40
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 4
  store i64 %346, i64* %PC
  %347 = inttoptr i64 %344 to i64*
  %348 = load i64, i64* %347
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = load i64, i64* %RAX
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = sub i64 %349, 1
  store i64 %352, i64* %RAX, align 8, !tbaa !2428
  %353 = icmp ult i64 %349, 1
  %354 = zext i1 %353 to i8
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %354, i8* %355, align 1, !tbaa !2433
  %356 = trunc i64 %352 to i32
  %357 = and i32 %356, 255
  %358 = call i32 @llvm.ctpop.i32(i32 %357) #16
  %359 = trunc i32 %358 to i8
  %360 = and i8 %359, 1
  %361 = xor i8 %360, 1
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %361, i8* %362, align 1, !tbaa !2447
  %363 = xor i64 1, %349
  %364 = xor i64 %363, %352
  %365 = lshr i64 %364, 4
  %366 = trunc i64 %365 to i8
  %367 = and i8 %366, 1
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %367, i8* %368, align 1, !tbaa !2448
  %369 = icmp eq i64 %352, 0
  %370 = zext i1 %369 to i8
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %370, i8* %371, align 1, !tbaa !2449
  %372 = lshr i64 %352, 63
  %373 = trunc i64 %372 to i8
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %373, i8* %374, align 1, !tbaa !2450
  %375 = lshr i64 %349, 63
  %376 = xor i64 %372, %375
  %377 = add nuw nsw i64 %376, %375
  %378 = icmp eq i64 %377, 2
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %379, i8* %380, align 1, !tbaa !2451
  %381 = load i64, i64* %RBP
  %382 = sub i64 %381, 48
  %383 = load i64, i64* %RAX
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %382 to i64*
  store i64 %383, i64* %386
  br label %block_403ef1

block_403db2:                                     ; preds = %block_403da4
  %387 = sub i64 %1370, 8
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  store i64 %387, i64* %RDI, align 8, !tbaa !2428
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 40
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i64, i64* %RAX
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC
  %399 = sub i64 %396, 1
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = icmp ult i64 %396, 1
  %401 = zext i1 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %401, i8* %402, align 1, !tbaa !2433
  %403 = trunc i64 %399 to i32
  %404 = and i32 %403, 255
  %405 = call i32 @llvm.ctpop.i32(i32 %404) #16
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = xor i64 1, %396
  %411 = xor i64 %410, %399
  %412 = lshr i64 %411, 4
  %413 = trunc i64 %412 to i8
  %414 = and i8 %413, 1
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = icmp eq i64 %399, 0
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %417, i8* %418, align 1, !tbaa !2449
  %419 = lshr i64 %399, 63
  %420 = trunc i64 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = lshr i64 %396, 63
  %423 = xor i64 %419, %422
  %424 = add nuw nsw i64 %423, %422
  %425 = icmp eq i64 %424, 2
  %426 = zext i1 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %426, i8* %427, align 1, !tbaa !2451
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 3
  store i64 %430, i64* %PC
  store i64 %428, i64* %RSI, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  %432 = sub i64 %431, 129
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 5
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %438 = load i64, i64* %437, align 8, !tbaa !2428
  %439 = add i64 %438, -8
  %440 = inttoptr i64 %439 to i64*
  store i64 %434, i64* %440
  store i64 %439, i64* %437, align 8, !tbaa !2428
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %432, i64* %441, align 8, !tbaa !2428
  %442 = load i64, i64* %PC
  %443 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %442, %struct.Memory* %MEMORY.4)
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 56
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC
  store i64 %445, i64* %RDI, align 8, !tbaa !2428
  %448 = load i64, i64* %RBP
  %449 = sub i64 %448, 56
  %450 = load i64, i64* %RAX
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %449 to i64*
  store i64 %450, i64* %453
  %454 = load i64, i64* %PC
  %455 = sub i64 %454, 254
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 5
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 5
  store i64 %459, i64* %PC
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %461 = load i64, i64* %460, align 8, !tbaa !2428
  %462 = add i64 %461, -8
  %463 = inttoptr i64 %462 to i64*
  store i64 %457, i64* %463
  store i64 %462, i64* %460, align 8, !tbaa !2428
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %455, i64* %464, align 8, !tbaa !2428
  %465 = load i64, i64* %PC
  %466 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %465, %struct.Memory* %443)
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 8
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC
  store i64 %468, i64* %RDI, align 8, !tbaa !2428
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 40
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475
  store i64 %476, i64* %RSI, align 8, !tbaa !2428
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 136
  %479 = load i64, i64* %RAX
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 7
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %478 to i64*
  store i64 %479, i64* %482
  %483 = load i64, i64* %PC
  %484 = sub i64 %483, 162
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 5
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  store i64 %488, i64* %PC
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %490 = load i64, i64* %489, align 8, !tbaa !2428
  %491 = add i64 %490, -8
  %492 = inttoptr i64 %491 to i64*
  store i64 %486, i64* %492
  store i64 %491, i64* %489, align 8, !tbaa !2428
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %484, i64* %493, align 8, !tbaa !2428
  %494 = load i64, i64* %PC
  %495 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %494, %struct.Memory* %466)
  %496 = load i64, i64* %RBP
  %497 = sub i64 %496, 64
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 4
  store i64 %499, i64* %PC
  store i64 %497, i64* %RDI, align 8, !tbaa !2428
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 64
  %502 = load i64, i64* %RAX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %PC
  %507 = sub i64 %506, 287
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 5
  store i64 %511, i64* %PC
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %513 = load i64, i64* %512, align 8, !tbaa !2428
  %514 = add i64 %513, -8
  %515 = inttoptr i64 %514 to i64*
  store i64 %509, i64* %515
  store i64 %514, i64* %512, align 8, !tbaa !2428
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %507, i64* %516, align 8, !tbaa !2428
  %517 = load i64, i64* %PC
  %518 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %517, %struct.Memory* %495)
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 136
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i64*
  %524 = load i64, i64* %523
  store i64 %524, i64* %RDI, align 8, !tbaa !2428
  %525 = load i64, i64* %RAX
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  store i64 %525, i64* %RSI, align 8, !tbaa !2428
  %528 = load i64, i64* %PC
  %529 = sub i64 %528, 2990
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 5
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  store i64 %533, i64* %PC
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %535 = load i64, i64* %534, align 8, !tbaa !2428
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %531, i64* %537
  store i64 %536, i64* %534, align 8, !tbaa !2428
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %529, i64* %538, align 8, !tbaa !2428
  %539 = load i64, i64* %PC
  %540 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %539, %struct.Memory* %518)
  %541 = load i8, i8* %AL
  %542 = zext i8 %541 to i64
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 2
  store i64 %544, i64* %PC
  %545 = and i64 1, %542
  %546 = trunc i64 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %547, align 1, !tbaa !2433
  %548 = trunc i64 %545 to i32
  %549 = and i32 %548, 255
  %550 = call i32 @llvm.ctpop.i32(i32 %549) #16
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  %553 = xor i8 %552, 1
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %553, i8* %554, align 1, !tbaa !2447
  %555 = icmp eq i8 %546, 0
  %556 = zext i1 %555 to i8
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %556, i8* %557, align 1, !tbaa !2449
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %558, align 1, !tbaa !2450
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %559, align 1, !tbaa !2451
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %560, align 1, !tbaa !2448
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 11
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 6
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 6
  store i64 %566, i64* %PC
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %568 = load i8, i8* %567, align 1, !tbaa !2449
  %569 = icmp eq i8 %568, 0
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %572 = select i1 %569, i64 %562, i64 %564
  store i64 %572, i64* %571, align 8, !tbaa !2428
  %573 = load i8, i8* %BRANCH_TAKEN
  %574 = icmp eq i8 %573, 1
  br i1 %574, label %block_403e10, label %block_403e0b

block_403f50:                                     ; preds = %block_403f24, %block_403f0c
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_403f0c ], [ %1092, %block_403f24 ]
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 153
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 6
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i8*
  %580 = load i8, i8* %579
  store i8 %580, i8* %AL, align 1, !tbaa !2432
  %581 = load i8, i8* %AL
  %582 = zext i8 %581 to i64
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 2
  store i64 %584, i64* %PC
  %585 = and i64 1, %582
  %586 = trunc i64 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %587, align 1, !tbaa !2433
  %588 = trunc i64 %585 to i32
  %589 = and i32 %588, 255
  %590 = call i32 @llvm.ctpop.i32(i32 %589) #16
  %591 = trunc i32 %590 to i8
  %592 = and i8 %591, 1
  %593 = xor i8 %592, 1
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %593, i8* %594, align 1, !tbaa !2447
  %595 = icmp eq i8 %586, 0
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %596, i8* %597, align 1, !tbaa !2449
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %598, align 1, !tbaa !2450
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %599, align 1, !tbaa !2451
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %600, align 1, !tbaa !2448
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 11
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 6
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 6
  store i64 %606, i64* %PC
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %608 = load i8, i8* %607, align 1, !tbaa !2449
  %609 = icmp eq i8 %608, 0
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %612 = select i1 %609, i64 %602, i64 %604
  store i64 %612, i64* %611, align 8, !tbaa !2428
  %613 = load i8, i8* %BRANCH_TAKEN
  %614 = icmp eq i8 %613, 1
  br i1 %614, label %block_403f63, label %block_403f5e

block_403f0c:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.1 = phi %struct.Memory* [ %1189, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %1583, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %615 = load i64, i64* %RAX
  %616 = load i32, i32* %EAX
  %617 = zext i32 %616 to i64
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 2
  store i64 %619, i64* %PC
  %620 = xor i64 %617, %615
  %621 = trunc i64 %620 to i32
  %622 = and i64 %620, 4294967295
  store i64 %622, i64* %RAX, align 8, !tbaa !2428
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %623, align 1, !tbaa !2433
  %624 = and i32 %621, 255
  %625 = call i32 @llvm.ctpop.i32(i32 %624) #16
  %626 = trunc i32 %625 to i8
  %627 = and i8 %626, 1
  %628 = xor i8 %627, 1
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %628, i8* %629, align 1, !tbaa !2447
  %630 = icmp eq i32 %621, 0
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %631, i8* %632, align 1, !tbaa !2449
  %633 = lshr i32 %621, 31
  %634 = trunc i32 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %634, i8* %635, align 1, !tbaa !2450
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %636, align 1, !tbaa !2451
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %637, align 1, !tbaa !2448
  %638 = load i8, i8* %AL
  %639 = zext i8 %638 to i64
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 2
  store i64 %641, i64* %PC
  store i8 %638, i8* %CL, align 1, !tbaa !2432
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 48
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RDX, align 8, !tbaa !2428
  %648 = load i64, i64* %RDX
  %649 = load i64, i64* %RBP
  %650 = sub i64 %649, 32
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 4
  store i64 %652, i64* %PC
  %653 = inttoptr i64 %650 to i64*
  %654 = load i64, i64* %653
  %655 = sub i64 %648, %654
  %656 = icmp ugt i64 %654, %648
  %657 = zext i1 %656 to i8
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %657, i8* %658, align 1, !tbaa !2433
  %659 = trunc i64 %655 to i32
  %660 = and i32 %659, 255
  %661 = call i32 @llvm.ctpop.i32(i32 %660) #16
  %662 = trunc i32 %661 to i8
  %663 = and i8 %662, 1
  %664 = xor i8 %663, 1
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %664, i8* %665, align 1, !tbaa !2447
  %666 = xor i64 %654, %648
  %667 = xor i64 %666, %655
  %668 = lshr i64 %667, 4
  %669 = trunc i64 %668 to i8
  %670 = and i8 %669, 1
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %670, i8* %671, align 1, !tbaa !2448
  %672 = icmp eq i64 %655, 0
  %673 = zext i1 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %673, i8* %674, align 1, !tbaa !2449
  %675 = lshr i64 %655, 63
  %676 = trunc i64 %675 to i8
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %676, i8* %677, align 1, !tbaa !2450
  %678 = lshr i64 %648, 63
  %679 = lshr i64 %654, 63
  %680 = xor i64 %679, %678
  %681 = xor i64 %675, %678
  %682 = add nuw nsw i64 %681, %680
  %683 = icmp eq i64 %682, 2
  %684 = zext i1 %683 to i8
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %684, i8* %685, align 1, !tbaa !2451
  %686 = load i64, i64* %RBP
  %687 = sub i64 %686, 153
  %688 = load i8, i8* %CL
  %689 = zext i8 %688 to i64
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 6
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %687 to i8*
  store i8 %688, i8* %692
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 50
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 6
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 6
  store i64 %698, i64* %PC
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %700 = load i8, i8* %699, align 1, !tbaa !2449
  %701 = icmp ne i8 %700, 0
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %703 = load i8, i8* %702, align 1, !tbaa !2450
  %704 = icmp ne i8 %703, 0
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %706 = load i8, i8* %705, align 1, !tbaa !2451
  %707 = icmp ne i8 %706, 0
  %708 = xor i1 %704, %707
  %709 = or i1 %701, %708
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %712 = select i1 %709, i64 %694, i64 %696
  store i64 %712, i64* %711, align 8, !tbaa !2428
  %713 = load i8, i8* %BRANCH_TAKEN
  %714 = icmp eq i8 %713, 1
  br i1 %714, label %block_403f50, label %block_403f24

block_403e1c:                                     ; preds = %block_403e10, %block_403e0b
  %MEMORY.2 = phi %struct.Memory* [ %540, %block_403e10 ], [ %540, %block_403e0b ]
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 8
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  store i64 %716, i64* %RDI, align 8, !tbaa !2428
  %719 = load i64, i64* %RBP
  %720 = sub i64 %719, 40
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 4
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i64*
  %724 = load i64, i64* %723
  store i64 %724, i64* %RAX, align 8, !tbaa !2428
  %725 = load i64, i64* %RAX
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = sub i64 %725, 1
  store i64 %728, i64* %RAX, align 8, !tbaa !2428
  %729 = icmp ult i64 %725, 1
  %730 = zext i1 %729 to i8
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %730, i8* %731, align 1, !tbaa !2433
  %732 = trunc i64 %728 to i32
  %733 = and i32 %732, 255
  %734 = call i32 @llvm.ctpop.i32(i32 %733) #16
  %735 = trunc i32 %734 to i8
  %736 = and i8 %735, 1
  %737 = xor i8 %736, 1
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %737, i8* %738, align 1, !tbaa !2447
  %739 = xor i64 1, %725
  %740 = xor i64 %739, %728
  %741 = lshr i64 %740, 4
  %742 = trunc i64 %741 to i8
  %743 = and i8 %742, 1
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %743, i8* %744, align 1, !tbaa !2448
  %745 = icmp eq i64 %728, 0
  %746 = zext i1 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %746, i8* %747, align 1, !tbaa !2449
  %748 = lshr i64 %728, 63
  %749 = trunc i64 %748 to i8
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %749, i8* %750, align 1, !tbaa !2450
  %751 = lshr i64 %725, 63
  %752 = xor i64 %748, %751
  %753 = add nuw nsw i64 %752, %751
  %754 = icmp eq i64 %753, 2
  %755 = zext i1 %754 to i8
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %755, i8* %756, align 1, !tbaa !2451
  %757 = load i64, i64* %RAX
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 3
  store i64 %759, i64* %PC
  store i64 %757, i64* %RSI, align 8, !tbaa !2428
  %760 = load i64, i64* %PC
  %761 = sub i64 %760, 235
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 5
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 5
  store i64 %765, i64* %PC
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %767 = load i64, i64* %766, align 8, !tbaa !2428
  %768 = add i64 %767, -8
  %769 = inttoptr i64 %768 to i64*
  store i64 %763, i64* %769
  store i64 %768, i64* %766, align 8, !tbaa !2428
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %761, i64* %770, align 8, !tbaa !2428
  %771 = load i64, i64* %PC
  %772 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %771, %struct.Memory* %MEMORY.2)
  %773 = load i64, i64* %RBP
  %774 = sub i64 %773, 72
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 4
  store i64 %776, i64* %PC
  store i64 %774, i64* %RDI, align 8, !tbaa !2428
  %777 = load i64, i64* %RBP
  %778 = sub i64 %777, 72
  %779 = load i64, i64* %RAX
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 4
  store i64 %781, i64* %PC
  %782 = inttoptr i64 %778 to i64*
  store i64 %779, i64* %782
  %783 = load i64, i64* %PC
  %784 = sub i64 %783, 360
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 5
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 5
  store i64 %788, i64* %PC
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %790 = load i64, i64* %789, align 8, !tbaa !2428
  %791 = add i64 %790, -8
  %792 = inttoptr i64 %791 to i64*
  store i64 %786, i64* %792
  store i64 %791, i64* %789, align 8, !tbaa !2428
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %784, i64* %793, align 8, !tbaa !2428
  %794 = load i64, i64* %PC
  %795 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %794, %struct.Memory* %772)
  %796 = load i64, i64* %RBP
  %797 = sub i64 %796, 8
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 4
  store i64 %799, i64* %PC
  store i64 %797, i64* %RDI, align 8, !tbaa !2428
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 48
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = inttoptr i64 %801 to i64*
  %805 = load i64, i64* %804
  store i64 %805, i64* %RSI, align 8, !tbaa !2428
  %806 = load i64, i64* %RBP
  %807 = sub i64 %806, 144
  %808 = load i64, i64* %RAX
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 7
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %807 to i64*
  store i64 %808, i64* %811
  %812 = load i64, i64* %PC
  %813 = sub i64 %812, 268
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 5
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %819 = load i64, i64* %818, align 8, !tbaa !2428
  %820 = add i64 %819, -8
  %821 = inttoptr i64 %820 to i64*
  store i64 %815, i64* %821
  store i64 %820, i64* %818, align 8, !tbaa !2428
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %813, i64* %822, align 8, !tbaa !2428
  %823 = load i64, i64* %PC
  %824 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %823, %struct.Memory* %795)
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 80
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 4
  store i64 %828, i64* %PC
  store i64 %826, i64* %RDI, align 8, !tbaa !2428
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 80
  %831 = load i64, i64* %RAX
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 4
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %830 to i64*
  store i64 %831, i64* %834
  %835 = load i64, i64* %PC
  %836 = sub i64 %835, 393
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 5
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 5
  store i64 %840, i64* %PC
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %842 = load i64, i64* %841, align 8, !tbaa !2428
  %843 = add i64 %842, -8
  %844 = inttoptr i64 %843 to i64*
  store i64 %838, i64* %844
  store i64 %843, i64* %841, align 8, !tbaa !2428
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %836, i64* %845, align 8, !tbaa !2428
  %846 = load i64, i64* %PC
  %847 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %846, %struct.Memory* %824)
  %848 = load i64, i64* %RBP
  %849 = sub i64 %848, 144
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 7
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %849 to i64*
  %853 = load i64, i64* %852
  store i64 %853, i64* %RSI, align 8, !tbaa !2428
  %854 = load i64, i64* %RSI
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 3
  store i64 %856, i64* %PC
  %857 = inttoptr i64 %854 to i64*
  %858 = load i64, i64* %857
  store i64 %858, i64* %RDI, align 8, !tbaa !2428
  %859 = load i64, i64* %RAX
  %860 = load i64, i64* %RDI
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 3
  store i64 %862, i64* %PC
  %863 = inttoptr i64 %859 to i64*
  store i64 %860, i64* %863
  %864 = load i64, i64* %RBP
  %865 = sub i64 %864, 40
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 4
  store i64 %867, i64* %PC
  %868 = inttoptr i64 %865 to i64*
  %869 = load i64, i64* %868
  store i64 %869, i64* %RAX, align 8, !tbaa !2428
  %870 = load i64, i64* %RAX
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 4
  store i64 %872, i64* %PC
  %873 = sub i64 %870, 1
  store i64 %873, i64* %RAX, align 8, !tbaa !2428
  %874 = icmp ult i64 %870, 1
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %875, i8* %876, align 1, !tbaa !2433
  %877 = trunc i64 %873 to i32
  %878 = and i32 %877, 255
  %879 = call i32 @llvm.ctpop.i32(i32 %878) #16
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %882, i8* %883, align 1, !tbaa !2447
  %884 = xor i64 1, %870
  %885 = xor i64 %884, %873
  %886 = lshr i64 %885, 4
  %887 = trunc i64 %886 to i8
  %888 = and i8 %887, 1
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %888, i8* %889, align 1, !tbaa !2448
  %890 = icmp eq i64 %873, 0
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %891, i8* %892, align 1, !tbaa !2449
  %893 = lshr i64 %873, 63
  %894 = trunc i64 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %894, i8* %895, align 1, !tbaa !2450
  %896 = lshr i64 %870, 63
  %897 = xor i64 %893, %896
  %898 = add nuw nsw i64 %897, %896
  %899 = icmp eq i64 %898, 2
  %900 = zext i1 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %900, i8* %901, align 1, !tbaa !2451
  %902 = load i64, i64* %RBP
  %903 = sub i64 %902, 48
  %904 = load i64, i64* %RAX
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 4
  store i64 %906, i64* %PC
  %907 = inttoptr i64 %903 to i64*
  store i64 %904, i64* %907
  %908 = load i64, i64* %RBP
  %909 = sub i64 %908, 40
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 4
  store i64 %911, i64* %PC
  %912 = inttoptr i64 %909 to i64*
  %913 = load i64, i64* %912
  store i64 %913, i64* %RAX, align 8, !tbaa !2428
  %914 = load i64, i64* %RAX
  %915 = load i64, i64* %RBP
  %916 = sub i64 %915, 40
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 4
  store i64 %918, i64* %PC
  %919 = inttoptr i64 %916 to i64*
  %920 = load i64, i64* %919
  %921 = add i64 %920, %914
  store i64 %921, i64* %RAX, align 8, !tbaa !2428
  %922 = icmp ult i64 %921, %914
  %923 = icmp ult i64 %921, %920
  %924 = or i1 %922, %923
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %925, i8* %926, align 1, !tbaa !2433
  %927 = trunc i64 %921 to i32
  %928 = and i32 %927, 255
  %929 = call i32 @llvm.ctpop.i32(i32 %928) #16
  %930 = trunc i32 %929 to i8
  %931 = and i8 %930, 1
  %932 = xor i8 %931, 1
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %932, i8* %933, align 1, !tbaa !2447
  %934 = xor i64 %920, %914
  %935 = xor i64 %934, %921
  %936 = lshr i64 %935, 4
  %937 = trunc i64 %936 to i8
  %938 = and i8 %937, 1
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %938, i8* %939, align 1, !tbaa !2448
  %940 = icmp eq i64 %921, 0
  %941 = zext i1 %940 to i8
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %941, i8* %942, align 1, !tbaa !2449
  %943 = lshr i64 %921, 63
  %944 = trunc i64 %943 to i8
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %944, i8* %945, align 1, !tbaa !2450
  %946 = lshr i64 %914, 63
  %947 = lshr i64 %920, 63
  %948 = xor i64 %943, %946
  %949 = xor i64 %943, %947
  %950 = add nuw nsw i64 %948, %949
  %951 = icmp eq i64 %950, 2
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %952, i8* %953, align 1, !tbaa !2451
  %954 = load i64, i64* %RBP
  %955 = sub i64 %954, 40
  %956 = load i64, i64* %RAX
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 4
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %955 to i64*
  store i64 %956, i64* %959
  %960 = load i64, i64* %PC
  %961 = sub i64 %960, 223
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 5
  store i64 %963, i64* %PC
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %961, i64* %964, align 8, !tbaa !2428
  br label %block_403da4

block_403e0b:                                     ; preds = %block_403db2
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 17
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %966, i64* %969, align 8, !tbaa !2428
  br label %block_403e1c

block_403e88:                                     ; preds = %block_403da4
  %970 = sub i64 %1370, 40
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 4
  store i64 %972, i64* %PC
  %973 = inttoptr i64 %970 to i64*
  %974 = load i64, i64* %973
  store i64 %974, i64* %RAX, align 8, !tbaa !2428
  %975 = load i64, i64* %RAX
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 24
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 4
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i64*
  %981 = load i64, i64* %980
  %982 = sub i64 %975, %981
  %983 = icmp ugt i64 %981, %975
  %984 = zext i1 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %984, i8* %985, align 1, !tbaa !2433
  %986 = trunc i64 %982 to i32
  %987 = and i32 %986, 255
  %988 = call i32 @llvm.ctpop.i32(i32 %987) #16
  %989 = trunc i32 %988 to i8
  %990 = and i8 %989, 1
  %991 = xor i8 %990, 1
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %991, i8* %992, align 1, !tbaa !2447
  %993 = xor i64 %981, %975
  %994 = xor i64 %993, %982
  %995 = lshr i64 %994, 4
  %996 = trunc i64 %995 to i8
  %997 = and i8 %996, 1
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %997, i8* %998, align 1, !tbaa !2448
  %999 = icmp eq i64 %982, 0
  %1000 = zext i1 %999 to i8
  %1001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1000, i8* %1001, align 1, !tbaa !2449
  %1002 = lshr i64 %982, 63
  %1003 = trunc i64 %1002 to i8
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1003, i8* %1004, align 1, !tbaa !2450
  %1005 = lshr i64 %975, 63
  %1006 = lshr i64 %981, 63
  %1007 = xor i64 %1006, %1005
  %1008 = xor i64 %1002, %1005
  %1009 = add nuw nsw i64 %1008, %1007
  %1010 = icmp eq i64 %1009, 2
  %1011 = zext i1 %1010 to i8
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1011, i8* %1012, align 1, !tbaa !2451
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 97
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 6
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 6
  store i64 %1018, i64* %PC
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1020 = load i8, i8* %1019, align 1, !tbaa !2449
  %1021 = icmp eq i8 %1020, 0
  %1022 = zext i1 %1021 to i8
  store i8 %1022, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1024 = select i1 %1021, i64 %1014, i64 %1016
  store i64 %1024, i64* %1023, align 8, !tbaa !2428
  %1025 = load i8, i8* %BRANCH_TAKEN
  %1026 = icmp eq i8 %1025, 1
  br i1 %1026, label %block_403ef1, label %block_403e96

block_403f24:                                     ; preds = %block_403f0c
  %1027 = load i64, i64* %RBP
  %1028 = sub i64 %1027, 8
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 4
  store i64 %1030, i64* %PC
  store i64 %1028, i64* %RDI, align 8, !tbaa !2428
  %1031 = load i64, i64* %RBP
  %1032 = sub i64 %1031, 40
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 4
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1032 to i64*
  %1036 = load i64, i64* %1035
  store i64 %1036, i64* %RSI, align 8, !tbaa !2428
  %1037 = load i64, i64* %PC
  %1038 = sub i64 %1037, 492
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 5
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 5
  store i64 %1042, i64* %PC
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1044 = load i64, i64* %1043, align 8, !tbaa !2428
  %1045 = add i64 %1044, -8
  %1046 = inttoptr i64 %1045 to i64*
  store i64 %1040, i64* %1046
  store i64 %1045, i64* %1043, align 8, !tbaa !2428
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1038, i64* %1047, align 8, !tbaa !2428
  %1048 = load i64, i64* %PC
  %1049 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %1048, %struct.Memory* %MEMORY.1)
  %1050 = load i64, i64* %RBP
  %1051 = sub i64 %1050, 104
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 4
  store i64 %1053, i64* %PC
  store i64 %1051, i64* %RDI, align 8, !tbaa !2428
  %1054 = load i64, i64* %RBP
  %1055 = sub i64 %1054, 104
  %1056 = load i64, i64* %RAX
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 4
  store i64 %1058, i64* %PC
  %1059 = inttoptr i64 %1055 to i64*
  store i64 %1056, i64* %1059
  %1060 = load i64, i64* %PC
  %1061 = sub i64 %1060, 617
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 5
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 5
  store i64 %1065, i64* %PC
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1067 = load i64, i64* %1066, align 8, !tbaa !2428
  %1068 = add i64 %1067, -8
  %1069 = inttoptr i64 %1068 to i64*
  store i64 %1063, i64* %1069
  store i64 %1068, i64* %1066, align 8, !tbaa !2428
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1061, i64* %1070, align 8, !tbaa !2428
  %1071 = load i64, i64* %PC
  %1072 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %1071, %struct.Memory* %1049)
  %1073 = load i64, i64* %RBP
  %1074 = sub i64 %1073, 16
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC
  store i64 %1074, i64* %RSI, align 8, !tbaa !2428
  %1077 = load i64, i64* %RAX
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 3
  store i64 %1079, i64* %PC
  store i64 %1077, i64* %RDI, align 8, !tbaa !2428
  %1080 = load i64, i64* %PC
  %1081 = sub i64 %1080, 3317
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 5
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 5
  store i64 %1085, i64* %PC
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1087 = load i64, i64* %1086, align 8, !tbaa !2428
  %1088 = add i64 %1087, -8
  %1089 = inttoptr i64 %1088 to i64*
  store i64 %1083, i64* %1089
  store i64 %1088, i64* %1086, align 8, !tbaa !2428
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1081, i64* %1090, align 8, !tbaa !2428
  %1091 = load i64, i64* %PC
  %1092 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %1091, %struct.Memory* %1072)
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 153
  %1095 = load i8, i8* %AL
  %1096 = zext i8 %1095 to i64
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 6
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1094 to i8*
  store i8 %1095, i8* %1099
  br label %block_403f50

block_403ef1:                                     ; preds = %block_403e88, %block_403e96
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_403e88 ], [ %326, %block_403e96 ]
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 5
  store i64 %1101, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %1102 = load i32, i32* %EAX
  %1103 = zext i32 %1102 to i64
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 2
  store i64 %1105, i64* %PC
  %1106 = and i64 %1103, 4294967295
  store i64 %1106, i64* %RCX, align 8, !tbaa !2428
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 48
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 4
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i64*
  %1112 = load i64, i64* %1111
  store i64 %1112, i64* %RDX, align 8, !tbaa !2428
  %1113 = load i64, i64* %RDX
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 4
  store i64 %1115, i64* %PC
  %1116 = sub i64 %1113, 1
  store i64 %1116, i64* %RDX, align 8, !tbaa !2428
  %1117 = icmp ult i64 %1113, 1
  %1118 = zext i1 %1117 to i8
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1118, i8* %1119, align 1, !tbaa !2433
  %1120 = trunc i64 %1116 to i32
  %1121 = and i32 %1120, 255
  %1122 = call i32 @llvm.ctpop.i32(i32 %1121) #16
  %1123 = trunc i32 %1122 to i8
  %1124 = and i8 %1123, 1
  %1125 = xor i8 %1124, 1
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1125, i8* %1126, align 1, !tbaa !2447
  %1127 = xor i64 1, %1113
  %1128 = xor i64 %1127, %1116
  %1129 = lshr i64 %1128, 4
  %1130 = trunc i64 %1129 to i8
  %1131 = and i8 %1130, 1
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1131, i8* %1132, align 1, !tbaa !2448
  %1133 = icmp eq i64 %1116, 0
  %1134 = zext i1 %1133 to i8
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1134, i8* %1135, align 1, !tbaa !2449
  %1136 = lshr i64 %1116, 63
  %1137 = trunc i64 %1136 to i8
  %1138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1137, i8* %1138, align 1, !tbaa !2450
  %1139 = lshr i64 %1113, 63
  %1140 = xor i64 %1136, %1139
  %1141 = add nuw nsw i64 %1140, %1139
  %1142 = icmp eq i64 %1141, 2
  %1143 = zext i1 %1142 to i8
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1143, i8* %1144, align 1, !tbaa !2451
  %1145 = load i64, i64* %RDX
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 3
  store i64 %1147, i64* %PC
  store i64 %1145, i64* %RAX, align 8, !tbaa !2428
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 2
  store i64 %1149, i64* %PC
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1152 = load i64, i64* %1151, align 8, !tbaa !2428
  %1153 = ashr i64 %1152, 63
  store i64 %1153, i64* %1150, align 8, !tbaa !2428
  %1154 = load i64, i64* %RCX
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 3
  store i64 %1156, i64* %PC
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1158 = load i64, i64* %1157, align 8, !tbaa !2428
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1160 = load i64, i64* %1159, align 8, !tbaa !2428
  %1161 = sext i64 %1154 to i128
  %1162 = and i128 %1161, -18446744073709551616
  %1163 = zext i64 %1160 to i128
  %1164 = shl nuw i128 %1163, 64
  %1165 = zext i64 %1158 to i128
  %1166 = or i128 %1164, %1165
  %1167 = zext i64 %1154 to i128
  %1168 = or i128 %1162, %1167
  %1169 = sdiv i128 %1166, %1168
  %1170 = trunc i128 %1169 to i64
  %1171 = and i128 %1169, 18446744073709551615
  %1172 = sext i64 %1170 to i128
  %1173 = and i128 %1172, -18446744073709551616
  %1174 = or i128 %1173, %1171
  %1175 = icmp eq i128 %1169, %1174
  br i1 %1175, label %1180, label %1176

; <label>:1176:                                   ; preds = %block_403ef1
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1178 = load i64, i64* %1177, align 8, !tbaa !2428
  %1179 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1178, %struct.Memory* %MEMORY.3) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:1180:                                   ; preds = %block_403ef1
  %1181 = srem i128 %1166, %1168
  %1182 = trunc i128 %1181 to i64
  store i64 %1170, i64* %1157, align 8, !tbaa !2428
  store i64 %1182, i64* %1159, align 8, !tbaa !2428
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1183, align 1, !tbaa !2433
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1184, align 1, !tbaa !2447
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1185, align 1, !tbaa !2448
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1186, align 1, !tbaa !2449
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1187, align 1, !tbaa !2450
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1188, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %1176, %1180
  %1189 = phi %struct.Memory* [ %1179, %1176 ], [ %MEMORY.3, %1180 ]
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 40
  %1192 = load i64, i64* %RAX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 4
  store i64 %1194, i64* %PC
  %1195 = inttoptr i64 %1191 to i64*
  store i64 %1192, i64* %1195
  br label %block_403f0c

block_403f5e:                                     ; preds = %block_403f50
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 114
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 5
  store i64 %1199, i64* %PC
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1197, i64* %1200, align 8, !tbaa !2428
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 8
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 4
  store i64 %1204, i64* %PC
  store i64 %1202, i64* %RDI, align 8, !tbaa !2428
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 48
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 4
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i64*
  %1210 = load i64, i64* %1209
  store i64 %1210, i64* %RSI, align 8, !tbaa !2428
  %1211 = load i64, i64* %PC
  %1212 = sub i64 %1211, 664
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 5
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 5
  store i64 %1216, i64* %PC
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1218 = load i64, i64* %1217, align 8, !tbaa !2428
  %1219 = add i64 %1218, -8
  %1220 = inttoptr i64 %1219 to i64*
  store i64 %1214, i64* %1220
  store i64 %1219, i64* %1217, align 8, !tbaa !2428
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1212, i64* %1221, align 8, !tbaa !2428
  %1222 = load i64, i64* %PC
  %1223 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %1222, %struct.Memory* %MEMORY.0)
  %1224 = load i64, i64* %RBP
  %1225 = sub i64 %1224, 128
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 4
  store i64 %1227, i64* %PC
  store i64 %1225, i64* %RDI, align 8, !tbaa !2428
  %1228 = load i64, i64* %RBP
  %1229 = sub i64 %1228, 128
  %1230 = load i64, i64* %RAX
  %1231 = load i64, i64* %PC
  %1232 = add i64 %1231, 4
  store i64 %1232, i64* %PC
  %1233 = inttoptr i64 %1229 to i64*
  store i64 %1230, i64* %1233
  %1234 = load i64, i64* %PC
  %1235 = sub i64 %1234, 789
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 5
  %1238 = load i64, i64* %PC
  %1239 = add i64 %1238, 5
  store i64 %1239, i64* %PC
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1241 = load i64, i64* %1240, align 8, !tbaa !2428
  %1242 = add i64 %1241, -8
  %1243 = inttoptr i64 %1242 to i64*
  store i64 %1237, i64* %1243
  store i64 %1242, i64* %1240, align 8, !tbaa !2428
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1235, i64* %1244, align 8, !tbaa !2428
  %1245 = load i64, i64* %PC
  %1246 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %1245, %struct.Memory* %1223)
  %1247 = load i64, i64* %RBP
  %1248 = sub i64 %1247, 16
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 4
  store i64 %1250, i64* %PC
  %1251 = inttoptr i64 %1248 to i64*
  %1252 = load i64, i64* %1251
  store i64 %1252, i64* %RSI, align 8, !tbaa !2428
  %1253 = load i64, i64* %RAX
  %1254 = load i64, i64* %RSI
  %1255 = load i64, i64* %PC
  %1256 = add i64 %1255, 3
  store i64 %1256, i64* %PC
  %1257 = inttoptr i64 %1253 to i64*
  store i64 %1254, i64* %1257
  %1258 = load i64, i64* %RSP
  %1259 = load i64, i64* %PC
  %1260 = add i64 %1259, 7
  store i64 %1260, i64* %PC
  %1261 = add i64 176, %1258
  store i64 %1261, i64* %RSP, align 8, !tbaa !2428
  %1262 = icmp ult i64 %1261, %1258
  %1263 = icmp ult i64 %1261, 176
  %1264 = or i1 %1262, %1263
  %1265 = zext i1 %1264 to i8
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1265, i8* %1266, align 1, !tbaa !2433
  %1267 = trunc i64 %1261 to i32
  %1268 = and i32 %1267, 255
  %1269 = call i32 @llvm.ctpop.i32(i32 %1268) #16
  %1270 = trunc i32 %1269 to i8
  %1271 = and i8 %1270, 1
  %1272 = xor i8 %1271, 1
  %1273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1272, i8* %1273, align 1, !tbaa !2447
  %1274 = xor i64 176, %1258
  %1275 = xor i64 %1274, %1261
  %1276 = lshr i64 %1275, 4
  %1277 = trunc i64 %1276 to i8
  %1278 = and i8 %1277, 1
  %1279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1278, i8* %1279, align 1, !tbaa !2448
  %1280 = icmp eq i64 %1261, 0
  %1281 = zext i1 %1280 to i8
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1281, i8* %1282, align 1, !tbaa !2449
  %1283 = lshr i64 %1261, 63
  %1284 = trunc i64 %1283 to i8
  %1285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1284, i8* %1285, align 1, !tbaa !2450
  %1286 = lshr i64 %1258, 63
  %1287 = xor i64 %1283, %1286
  %1288 = add nuw nsw i64 %1287, %1283
  %1289 = icmp eq i64 %1288, 2
  %1290 = zext i1 %1289 to i8
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1290, i8* %1291, align 1, !tbaa !2451
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 1
  store i64 %1293, i64* %PC
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1295 = load i64, i64* %1294, align 8, !tbaa !2428
  %1296 = add i64 %1295, 8
  %1297 = inttoptr i64 %1295 to i64*
  %1298 = load i64, i64* %1297
  store i64 %1298, i64* %RBP, align 8, !tbaa !2428
  store i64 %1296, i64* %1294, align 8, !tbaa !2428
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 1
  store i64 %1300, i64* %PC
  %1301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1303 = load i64, i64* %1302, align 8, !tbaa !2428
  %1304 = inttoptr i64 %1303 to i64*
  %1305 = load i64, i64* %1304
  store i64 %1305, i64* %1301, align 8, !tbaa !2428
  %1306 = add i64 %1303, 8
  store i64 %1306, i64* %1302, align 8, !tbaa !2428
  ret %struct.Memory* %1246

block_403da4:                                     ; preds = %block_403e1c, %block_403d70
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_403d70 ], [ %847, %block_403e1c ]
  %1307 = load i64, i64* %RBP
  %1308 = sub i64 %1307, 40
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 4
  store i64 %1310, i64* %PC
  %1311 = inttoptr i64 %1308 to i64*
  %1312 = load i64, i64* %1311
  store i64 %1312, i64* %RAX, align 8, !tbaa !2428
  %1313 = load i64, i64* %RAX
  %1314 = load i64, i64* %RBP
  %1315 = sub i64 %1314, 24
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 4
  store i64 %1317, i64* %PC
  %1318 = inttoptr i64 %1315 to i64*
  %1319 = load i64, i64* %1318
  %1320 = sub i64 %1313, %1319
  %1321 = icmp ugt i64 %1319, %1313
  %1322 = zext i1 %1321 to i8
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1322, i8* %1323, align 1, !tbaa !2433
  %1324 = trunc i64 %1320 to i32
  %1325 = and i32 %1324, 255
  %1326 = call i32 @llvm.ctpop.i32(i32 %1325) #16
  %1327 = trunc i32 %1326 to i8
  %1328 = and i8 %1327, 1
  %1329 = xor i8 %1328, 1
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1329, i8* %1330, align 1, !tbaa !2447
  %1331 = xor i64 %1319, %1313
  %1332 = xor i64 %1331, %1320
  %1333 = lshr i64 %1332, 4
  %1334 = trunc i64 %1333 to i8
  %1335 = and i8 %1334, 1
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1335, i8* %1336, align 1, !tbaa !2448
  %1337 = icmp eq i64 %1320, 0
  %1338 = zext i1 %1337 to i8
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1338, i8* %1339, align 1, !tbaa !2449
  %1340 = lshr i64 %1320, 63
  %1341 = trunc i64 %1340 to i8
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1341, i8* %1342, align 1, !tbaa !2450
  %1343 = lshr i64 %1313, 63
  %1344 = lshr i64 %1319, 63
  %1345 = xor i64 %1344, %1343
  %1346 = xor i64 %1340, %1343
  %1347 = add nuw nsw i64 %1346, %1345
  %1348 = icmp eq i64 %1347, 2
  %1349 = zext i1 %1348 to i8
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1349, i8* %1350, align 1, !tbaa !2451
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 220
  %1353 = load i64, i64* %PC
  %1354 = add i64 %1353, 6
  %1355 = load i64, i64* %PC
  %1356 = add i64 %1355, 6
  store i64 %1356, i64* %PC
  %1357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1358 = load i8, i8* %1357, align 1, !tbaa !2450
  %1359 = icmp ne i8 %1358, 0
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1361 = load i8, i8* %1360, align 1, !tbaa !2451
  %1362 = icmp ne i8 %1361, 0
  %1363 = xor i1 %1359, %1362
  %1364 = xor i1 %1363, true
  %1365 = zext i1 %1364 to i8
  store i8 %1365, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1367 = select i1 %1363, i64 %1354, i64 %1352
  store i64 %1367, i64* %1366, align 8, !tbaa !2428
  %1368 = load i8, i8* %BRANCH_TAKEN
  %1369 = icmp eq i8 %1368, 1
  %1370 = load i64, i64* %RBP
  br i1 %1369, label %block_403e88, label %block_403db2

block_403f63:                                     ; preds = %block_403f50
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 8
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 4
  store i64 %1374, i64* %PC
  store i64 %1372, i64* %RDI, align 8, !tbaa !2428
  %1375 = load i64, i64* %RBP
  %1376 = sub i64 %1375, 40
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 4
  store i64 %1378, i64* %PC
  %1379 = inttoptr i64 %1376 to i64*
  %1380 = load i64, i64* %1379
  store i64 %1380, i64* %RSI, align 8, !tbaa !2428
  %1381 = load i64, i64* %PC
  %1382 = sub i64 %1381, 555
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 5
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 5
  store i64 %1386, i64* %PC
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1388 = load i64, i64* %1387, align 8, !tbaa !2428
  %1389 = add i64 %1388, -8
  %1390 = inttoptr i64 %1389 to i64*
  store i64 %1384, i64* %1390
  store i64 %1389, i64* %1387, align 8, !tbaa !2428
  %1391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1382, i64* %1391, align 8, !tbaa !2428
  %1392 = load i64, i64* %PC
  %1393 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %1392, %struct.Memory* %MEMORY.0)
  %1394 = load i64, i64* %RBP
  %1395 = sub i64 %1394, 112
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 4
  store i64 %1397, i64* %PC
  store i64 %1395, i64* %RDI, align 8, !tbaa !2428
  %1398 = load i64, i64* %RBP
  %1399 = sub i64 %1398, 112
  %1400 = load i64, i64* %RAX
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 4
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1399 to i64*
  store i64 %1400, i64* %1403
  %1404 = load i64, i64* %PC
  %1405 = sub i64 %1404, 680
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 5
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 5
  store i64 %1409, i64* %PC
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1411 = load i64, i64* %1410, align 8, !tbaa !2428
  %1412 = add i64 %1411, -8
  %1413 = inttoptr i64 %1412 to i64*
  store i64 %1407, i64* %1413
  store i64 %1412, i64* %1410, align 8, !tbaa !2428
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1405, i64* %1414, align 8, !tbaa !2428
  %1415 = load i64, i64* %PC
  %1416 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %1415, %struct.Memory* %1393)
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 8
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 4
  store i64 %1420, i64* %PC
  store i64 %1418, i64* %RDI, align 8, !tbaa !2428
  %1421 = load i64, i64* %RBP
  %1422 = sub i64 %1421, 48
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1422 to i64*
  %1426 = load i64, i64* %1425
  store i64 %1426, i64* %RSI, align 8, !tbaa !2428
  %1427 = load i64, i64* %RBP
  %1428 = sub i64 %1427, 168
  %1429 = load i64, i64* %RAX
  %1430 = load i64, i64* %PC
  %1431 = add i64 %1430, 7
  store i64 %1431, i64* %PC
  %1432 = inttoptr i64 %1428 to i64*
  store i64 %1429, i64* %1432
  %1433 = load i64, i64* %PC
  %1434 = sub i64 %1433, 588
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 5
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 5
  store i64 %1438, i64* %PC
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1440 = load i64, i64* %1439, align 8, !tbaa !2428
  %1441 = add i64 %1440, -8
  %1442 = inttoptr i64 %1441 to i64*
  store i64 %1436, i64* %1442
  store i64 %1441, i64* %1439, align 8, !tbaa !2428
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1434, i64* %1443, align 8, !tbaa !2428
  %1444 = load i64, i64* %PC
  %1445 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %1444, %struct.Memory* %1416)
  %1446 = load i64, i64* %RBP
  %1447 = sub i64 %1446, 120
  %1448 = load i64, i64* %PC
  %1449 = add i64 %1448, 4
  store i64 %1449, i64* %PC
  store i64 %1447, i64* %RDI, align 8, !tbaa !2428
  %1450 = load i64, i64* %RBP
  %1451 = sub i64 %1450, 120
  %1452 = load i64, i64* %RAX
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 4
  store i64 %1454, i64* %PC
  %1455 = inttoptr i64 %1451 to i64*
  store i64 %1452, i64* %1455
  %1456 = load i64, i64* %PC
  %1457 = sub i64 %1456, 713
  %1458 = load i64, i64* %PC
  %1459 = add i64 %1458, 5
  %1460 = load i64, i64* %PC
  %1461 = add i64 %1460, 5
  store i64 %1461, i64* %PC
  %1462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1463 = load i64, i64* %1462, align 8, !tbaa !2428
  %1464 = add i64 %1463, -8
  %1465 = inttoptr i64 %1464 to i64*
  store i64 %1459, i64* %1465
  store i64 %1464, i64* %1462, align 8, !tbaa !2428
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1457, i64* %1466, align 8, !tbaa !2428
  %1467 = load i64, i64* %PC
  %1468 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %1467, %struct.Memory* %1445)
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 5
  store i64 %1470, i64* %PC
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %1471 = load i32, i32* %ECX
  %1472 = zext i32 %1471 to i64
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 2
  store i64 %1474, i64* %PC
  %1475 = and i64 %1472, 4294967295
  store i64 %1475, i64* %RSI, align 8, !tbaa !2428
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 168
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 7
  store i64 %1479, i64* %PC
  %1480 = inttoptr i64 %1477 to i64*
  %1481 = load i64, i64* %1480
  store i64 %1481, i64* %RDI, align 8, !tbaa !2428
  %1482 = load i64, i64* %RDI
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 3
  store i64 %1484, i64* %PC
  %1485 = inttoptr i64 %1482 to i64*
  %1486 = load i64, i64* %1485
  store i64 %1486, i64* %RDX, align 8, !tbaa !2428
  %1487 = load i64, i64* %RAX
  %1488 = load i64, i64* %RDX
  %1489 = load i64, i64* %PC
  %1490 = add i64 %1489, 3
  store i64 %1490, i64* %PC
  %1491 = inttoptr i64 %1487 to i64*
  store i64 %1488, i64* %1491
  %1492 = load i64, i64* %RBP
  %1493 = sub i64 %1492, 40
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 4
  store i64 %1495, i64* %PC
  %1496 = inttoptr i64 %1493 to i64*
  %1497 = load i64, i64* %1496
  store i64 %1497, i64* %RAX, align 8, !tbaa !2428
  %1498 = load i64, i64* %RBP
  %1499 = sub i64 %1498, 48
  %1500 = load i64, i64* %RAX
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 4
  store i64 %1502, i64* %PC
  %1503 = inttoptr i64 %1499 to i64*
  store i64 %1500, i64* %1503
  %1504 = load i64, i64* %RBP
  %1505 = sub i64 %1504, 48
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 4
  store i64 %1507, i64* %PC
  %1508 = inttoptr i64 %1505 to i64*
  %1509 = load i64, i64* %1508
  store i64 %1509, i64* %RAX, align 8, !tbaa !2428
  %1510 = load i64, i64* %RAX
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 4
  store i64 %1512, i64* %PC
  %1513 = sub i64 %1510, 1
  store i64 %1513, i64* %RAX, align 8, !tbaa !2428
  %1514 = icmp ult i64 %1510, 1
  %1515 = zext i1 %1514 to i8
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1515, i8* %1516, align 1, !tbaa !2433
  %1517 = trunc i64 %1513 to i32
  %1518 = and i32 %1517, 255
  %1519 = call i32 @llvm.ctpop.i32(i32 %1518) #16
  %1520 = trunc i32 %1519 to i8
  %1521 = and i8 %1520, 1
  %1522 = xor i8 %1521, 1
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1522, i8* %1523, align 1, !tbaa !2447
  %1524 = xor i64 1, %1510
  %1525 = xor i64 %1524, %1513
  %1526 = lshr i64 %1525, 4
  %1527 = trunc i64 %1526 to i8
  %1528 = and i8 %1527, 1
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1528, i8* %1529, align 1, !tbaa !2448
  %1530 = icmp eq i64 %1513, 0
  %1531 = zext i1 %1530 to i8
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1531, i8* %1532, align 1, !tbaa !2449
  %1533 = lshr i64 %1513, 63
  %1534 = trunc i64 %1533 to i8
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1534, i8* %1535, align 1, !tbaa !2450
  %1536 = lshr i64 %1510, 63
  %1537 = xor i64 %1533, %1536
  %1538 = add nuw nsw i64 %1537, %1536
  %1539 = icmp eq i64 %1538, 2
  %1540 = zext i1 %1539 to i8
  %1541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1540, i8* %1541, align 1, !tbaa !2451
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 2
  store i64 %1543, i64* %PC
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1546 = load i64, i64* %1545, align 8, !tbaa !2428
  %1547 = ashr i64 %1546, 63
  store i64 %1547, i64* %1544, align 8, !tbaa !2428
  %1548 = load i64, i64* %RSI
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 3
  store i64 %1550, i64* %PC
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1552 = load i64, i64* %1551, align 8, !tbaa !2428
  %1553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1554 = load i64, i64* %1553, align 8, !tbaa !2428
  %1555 = sext i64 %1548 to i128
  %1556 = and i128 %1555, -18446744073709551616
  %1557 = zext i64 %1554 to i128
  %1558 = shl nuw i128 %1557, 64
  %1559 = zext i64 %1552 to i128
  %1560 = or i128 %1558, %1559
  %1561 = zext i64 %1548 to i128
  %1562 = or i128 %1556, %1561
  %1563 = sdiv i128 %1560, %1562
  %1564 = trunc i128 %1563 to i64
  %1565 = and i128 %1563, 18446744073709551615
  %1566 = sext i64 %1564 to i128
  %1567 = and i128 %1566, -18446744073709551616
  %1568 = or i128 %1567, %1565
  %1569 = icmp eq i128 %1563, %1568
  br i1 %1569, label %1574, label %1570

; <label>:1570:                                   ; preds = %block_403f63
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1572 = load i64, i64* %1571, align 8, !tbaa !2428
  %1573 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1572, %struct.Memory* %1468) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:1574:                                   ; preds = %block_403f63
  %1575 = srem i128 %1560, %1562
  %1576 = trunc i128 %1575 to i64
  store i64 %1564, i64* %1551, align 8, !tbaa !2428
  store i64 %1576, i64* %1553, align 8, !tbaa !2428
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1577, align 1, !tbaa !2433
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1578, align 1, !tbaa !2447
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1579, align 1, !tbaa !2448
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1580, align 1, !tbaa !2449
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1581, align 1, !tbaa !2450
  %1582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1582, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %1570, %1574
  %1583 = phi %struct.Memory* [ %1573, %1570 ], [ %1468, %1574 ]
  %1584 = load i64, i64* %RBP
  %1585 = sub i64 %1584, 40
  %1586 = load i64, i64* %RAX
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 4
  store i64 %1588, i64* %PC
  %1589 = inttoptr i64 %1585 to i64*
  store i64 %1586, i64* %1589
  %1590 = load i64, i64* %PC
  %1591 = sub i64 %1590, 191
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 5
  store i64 %1593, i64* %PC
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1591, i64* %1594, align 8, !tbaa !2428
  br label %block_403f0c

block_403e10:                                     ; preds = %block_403db2
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 40
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 4
  store i64 %1598, i64* %PC
  %1599 = inttoptr i64 %1596 to i64*
  %1600 = load i64, i64* %1599
  store i64 %1600, i64* %RAX, align 8, !tbaa !2428
  %1601 = load i64, i64* %RAX
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 4
  store i64 %1603, i64* %PC
  %1604 = add i64 1, %1601
  store i64 %1604, i64* %RAX, align 8, !tbaa !2428
  %1605 = icmp ult i64 %1604, %1601
  %1606 = icmp ult i64 %1604, 1
  %1607 = or i1 %1605, %1606
  %1608 = zext i1 %1607 to i8
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1608, i8* %1609, align 1, !tbaa !2433
  %1610 = trunc i64 %1604 to i32
  %1611 = and i32 %1610, 255
  %1612 = call i32 @llvm.ctpop.i32(i32 %1611) #16
  %1613 = trunc i32 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = xor i8 %1614, 1
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1615, i8* %1616, align 1, !tbaa !2447
  %1617 = xor i64 1, %1601
  %1618 = xor i64 %1617, %1604
  %1619 = lshr i64 %1618, 4
  %1620 = trunc i64 %1619 to i8
  %1621 = and i8 %1620, 1
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1621, i8* %1622, align 1, !tbaa !2448
  %1623 = icmp eq i64 %1604, 0
  %1624 = zext i1 %1623 to i8
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1624, i8* %1625, align 1, !tbaa !2449
  %1626 = lshr i64 %1604, 63
  %1627 = trunc i64 %1626 to i8
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1627, i8* %1628, align 1, !tbaa !2450
  %1629 = lshr i64 %1601, 63
  %1630 = xor i64 %1626, %1629
  %1631 = add nuw nsw i64 %1630, %1626
  %1632 = icmp eq i64 %1631, 2
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1633, i8* %1634, align 1, !tbaa !2451
  %1635 = load i64, i64* %RBP
  %1636 = sub i64 %1635, 40
  %1637 = load i64, i64* %RAX
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 4
  store i64 %1639, i64* %PC
  %1640 = inttoptr i64 %1636 to i64*
  store i64 %1637, i64* %1640
  br label %block_403e1c
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a50___cxx_global_var_init_22(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%DV10Pb_type* @DV10Pb to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4458
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_400970___cxx_global_var_init_15(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400970:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%dPe_type* @dPe to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4746
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4047a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 16
  %33 = load i64, i64* %RDI
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 24
  %39 = load i64, i64* %RSI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 16
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RSI, align 8, !tbaa !2428
  %49 = load i64, i64* %RSI
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %RSI
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 24
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %RSI, align 8, !tbaa !2428
  %66 = load i64, i64* %RSI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = shl i64 %66, 2
  %70 = icmp slt i64 %69, 0
  %71 = shl i64 %69, 1
  store i64 %71, i64* %RSI, align 8, !tbaa !2428
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %73 = zext i1 %70 to i8
  store i8 %73, i8* %72, align 1, !tbaa !2432
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %75 = trunc i64 %71 to i32
  %76 = and i32 %75, 254
  %77 = call i32 @llvm.ctpop.i32(i32 %76) #16
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  store i8 %80, i8* %74, align 1, !tbaa !2432
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %81, align 1, !tbaa !2432
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %83 = icmp eq i64 %71, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %82, align 1, !tbaa !2432
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %86 = lshr i64 %71, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %85, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %88, align 1, !tbaa !2432
  %89 = load i64, i64* %RSI
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94
  %96 = add i64 %95, %89
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %89
  %98 = icmp ult i64 %96, %95
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 %95, %89
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %89, 63
  %122 = lshr i64 %95, 63
  %123 = xor i64 %118, %121
  %124 = xor i64 %118, %122
  %125 = add nuw nsw i64 %123, %124
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %127, i8* %128, align 1, !tbaa !2451
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 8
  %131 = load i64, i64* %RSI
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 8
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 1
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %144 = load i64, i64* %143, align 8, !tbaa !2428
  %145 = add i64 %144, 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RBP, align 8, !tbaa !2428
  store i64 %145, i64* %143, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 1
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %152 = load i64, i64* %151, align 8, !tbaa !2428
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %150, align 8, !tbaa !2428
  %155 = add i64 %152, 8
  store i64 %155, i64* %151, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ab0___cxx_global_var_init_25(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400ab0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%DV10MPe_type* @DV10MPe to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4362
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403250:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %26 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %25, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %26 to %"class.std::bitset"*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %32 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %31, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %32 to %union.vec128_t*
  %33 = load i64, i64* %RBP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !2428
  %38 = add i64 %37, -8
  %39 = inttoptr i64 %38 to i64*
  store i64 %33, i64* %39
  store i64 %38, i64* %36, align 8, !tbaa !2428
  %40 = load i64, i64* %RSP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 8
  %45 = load i64, i64* %RDI
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 16
  %51 = load i64, i64* %RSI
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54
  %55 = load i64, i64* %RBP
  %56 = sub i64 %55, 8
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %62 = load i64, i64* %RSI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %62 to double*
  %66 = load double, double* %65
  %67 = bitcast i8* %61 to double*
  store double %66, double* %67, align 1, !tbaa !2452
  %68 = getelementptr inbounds i8, i8* %61, i64 8
  %69 = bitcast i8* %68 to double*
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 16
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  %76 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %77 = load i64, i64* %RSI
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to double*
  %81 = load double, double* %80
  %82 = bitcast i8* %76 to double*
  store double %81, double* %82, align 1, !tbaa !2452
  %83 = getelementptr inbounds i8, i8* %76, i64 8
  %84 = bitcast i8* %83 to double*
  store double 0.000000e+00, double* %84, align 1, !tbaa !2452
  %85 = bitcast %union.vec128_t* %XMM1 to i8*
  %86 = bitcast %union.vec128_t* %XMM0 to i8*
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = bitcast i8* %85 to double*
  %90 = load double, double* %89, align 1
  %91 = bitcast i8* %86 to double*
  %92 = load double, double* %91, align 1
  %93 = fcmp uno double %90, %92
  br i1 %93, label %94, label %106

; <label>:94:                                     ; preds = %block_403250
  %95 = fadd double %90, %92
  %96 = bitcast double %95 to i64
  %97 = and i64 %96, 9221120237041090560
  %98 = icmp eq i64 %97, 9218868437227405312
  %99 = and i64 %96, 2251799813685247
  %100 = icmp ne i64 %99, 0
  %101 = and i1 %98, %100
  br i1 %101, label %102, label %112

; <label>:102:                                    ; preds = %94
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %104 = load i64, i64* %103, align 8, !tbaa !2428
  %105 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %104, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:106:                                    ; preds = %block_403250
  %107 = fcmp ogt double %90, %92
  br i1 %107, label %112, label %108

; <label>:108:                                    ; preds = %106
  %109 = fcmp olt double %90, %92
  br i1 %109, label %112, label %110

; <label>:110:                                    ; preds = %108
  %111 = fcmp oeq double %90, %92
  br i1 %111, label %112, label %119

; <label>:112:                                    ; preds = %110, %108, %106, %94
  %113 = phi i8 [ 0, %106 ], [ 0, %108 ], [ 1, %110 ], [ 1, %94 ]
  %114 = phi i8 [ 0, %106 ], [ 0, %108 ], [ 0, %110 ], [ 1, %94 ]
  %115 = phi i8 [ 0, %106 ], [ 1, %108 ], [ 0, %110 ], [ 1, %94 ]
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %116, align 1, !tbaa !2432
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %114, i8* %117, align 1, !tbaa !2432
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %118, align 1, !tbaa !2432
  br label %119

; <label>:119:                                    ; preds = %112, %110
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %120, align 1, !tbaa !2432
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2432
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %122, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %102, %119
  %123 = phi %struct.Memory* [ %105, %102 ], [ %2, %119 ]
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %127 = load i8, i8* %126, align 1, !tbaa !2433
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %129 = load i8, i8* %128, align 1, !tbaa !2449
  %130 = or i8 %129, %127
  %131 = icmp eq i8 %130, 0
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %AL, align 1, !tbaa !2432
  %133 = load i8, i8* %AL
  %134 = zext i8 %133 to i64
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 2
  store i64 %136, i64* %PC
  %137 = and i64 1, %134
  %138 = trunc i64 %137 to i8
  store i8 %138, i8* %AL, align 1, !tbaa !2432
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %139, align 1, !tbaa !2433
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = call i32 @llvm.ctpop.i32(i32 %141) #16
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %145, i8* %146, align 1, !tbaa !2447
  %147 = icmp eq i8 %138, 0
  %148 = zext i1 %147 to i8
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %148, i8* %149, align 1, !tbaa !2449
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %150, align 1, !tbaa !2450
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %151, align 1, !tbaa !2451
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %152, align 1, !tbaa !2448
  %153 = load i8, i8* %AL
  %154 = zext i8 %153 to i64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 3
  store i64 %156, i64* %PC
  %157 = and i64 %154, 255
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 1
  store i64 %159, i64* %PC
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %161 = load i64, i64* %160, align 8, !tbaa !2428
  %162 = add i64 %161, 8
  %163 = inttoptr i64 %161 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %RBP, align 8, !tbaa !2428
  store i64 %162, i64* %160, align 8, !tbaa !2428
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 1
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %169 = load i64, i64* %168, align 8, !tbaa !2428
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %167, align 8, !tbaa !2428
  %172 = add i64 %169, 8
  store i64 %172, i64* %168, align 8, !tbaa !2428
  ret %struct.Memory* %123
}

; Function Attrs: noinline
define %struct.Memory* @sub_404230__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404230:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %RAX = bitcast %union.anon* %19 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 5
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RCX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 7
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RDX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 9
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RSI = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 11
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 13
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSP = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 15
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RBP = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 17
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %R8 = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 64
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 64
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2433
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = xor i64 64, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2451
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = bitcast %union.vec128_t* %XMM0 to i8*
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = bitcast i8* %87 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %86 to double*
  store double %91, double* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %RDI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 24
  %101 = load i64, i64* %RSI
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %100 to i64*
  store i64 %101, i64* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %RDX
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %106 to i64*
  store i64 %107, i64* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 32
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %RDX, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 48
  %119 = load i64, i64* %RDX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 48
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RDX, align 8, !tbaa !2428
  %129 = load i64, i64* %RDX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 1, %129
  store i64 %132, i64* %RDX, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 1
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 1, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %RDX
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = shl i64 %163, 1
  %167 = icmp slt i64 %163, 0
  %168 = icmp slt i64 %166, 0
  %169 = xor i1 %167, %168
  store i64 %166, i64* %RDX, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %171 = zext i1 %167 to i8
  store i8 %171, i8* %170, align 1, !tbaa !2432
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %173 = trunc i64 %166 to i32
  %174 = and i32 %173, 254
  %175 = call i32 @llvm.ctpop.i32(i32 %174) #16
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  %178 = xor i8 %177, 1
  store i8 %178, i8* %172, align 1, !tbaa !2432
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %179, align 1, !tbaa !2432
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %181 = icmp eq i64 %166, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %180, align 1, !tbaa !2432
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %184 = lshr i64 %166, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %183, align 1, !tbaa !2432
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %187 = zext i1 %169 to i8
  store i8 %187, i8* %186, align 1, !tbaa !2432
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 40
  %190 = load i64, i64* %RDX
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %189 to i64*
  store i64 %190, i64* %193
  br label %block_404261

block_40437d:                                     ; preds = %block_404372
  %194 = add i64 %509, 69
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  store i64 %196, i64* %PC
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %194, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 24
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 48
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 4
  store i64 %207, i64* %PC
  %208 = inttoptr i64 %205 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %RCX, align 8, !tbaa !2428
  %210 = load i64, i64* %RBP
  %211 = sub i64 %210, 8
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i64*
  %215 = load i64, i64* %214
  store i64 %215, i64* %RDX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RCX
  %218 = mul i64 %217, 8
  %219 = add i64 %218, %216
  %220 = load i64, i64* %RDX
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %219 to i64*
  store i64 %220, i64* %223
  %224 = load i64, i64* %RSP
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = add i64 64, %224
  store i64 %227, i64* %RSP, align 8, !tbaa !2428
  %228 = icmp ult i64 %227, %224
  %229 = icmp ult i64 %227, 64
  %230 = or i1 %228, %229
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %231, i8* %232, align 1, !tbaa !2433
  %233 = trunc i64 %227 to i32
  %234 = and i32 %233, 255
  %235 = call i32 @llvm.ctpop.i32(i32 %234) #16
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = xor i8 %237, 1
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %238, i8* %239, align 1, !tbaa !2447
  %240 = xor i64 64, %224
  %241 = xor i64 %240, %227
  %242 = lshr i64 %241, 4
  %243 = trunc i64 %242 to i8
  %244 = and i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %244, i8* %245, align 1, !tbaa !2448
  %246 = icmp eq i64 %227, 0
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %247, i8* %248, align 1, !tbaa !2449
  %249 = lshr i64 %227, 63
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %250, i8* %251, align 1, !tbaa !2450
  %252 = lshr i64 %224, 63
  %253 = xor i64 %249, %252
  %254 = add nuw nsw i64 %253, %249
  %255 = icmp eq i64 %254, 2
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %256, i8* %257, align 1, !tbaa !2451
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 1
  store i64 %259, i64* %PC
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = add i64 %261, 8
  %263 = inttoptr i64 %261 to i64*
  %264 = load i64, i64* %263
  store i64 %264, i64* %RBP, align 8, !tbaa !2428
  store i64 %262, i64* %260, align 8, !tbaa !2428
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 1
  store i64 %266, i64* %PC
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = inttoptr i64 %269 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %267, align 8, !tbaa !2428
  %272 = add i64 %269, 8
  store i64 %272, i64* %268, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_404324:                                     ; preds = %block_4042ee, %block_4042fc
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_4042ee ], [ %MEMORY.4, %block_4042fc ]
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 5
  store i64 %274, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %275 = load i32, i32* %EAX
  %276 = zext i32 %275 to i64
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 2
  store i64 %278, i64* %PC
  %279 = and i64 %276, 4294967295
  store i64 %279, i64* %RCX, align 8, !tbaa !2428
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 48
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 4
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %RDX, align 8, !tbaa !2428
  %286 = load i64, i64* %RDX
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = sub i64 %286, 1
  store i64 %289, i64* %RDX, align 8, !tbaa !2428
  %290 = icmp ult i64 %286, 1
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2433
  %293 = trunc i64 %289 to i32
  %294 = and i32 %293, 255
  %295 = call i32 @llvm.ctpop.i32(i32 %294) #16
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %298, i8* %299, align 1, !tbaa !2447
  %300 = xor i64 1, %286
  %301 = xor i64 %300, %289
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2448
  %306 = icmp eq i64 %289, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2449
  %309 = lshr i64 %289, 63
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2450
  %312 = lshr i64 %286, 63
  %313 = xor i64 %309, %312
  %314 = add nuw nsw i64 %313, %312
  %315 = icmp eq i64 %314, 2
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %316, i8* %317, align 1, !tbaa !2451
  %318 = load i64, i64* %RDX
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  store i64 %318, i64* %RAX, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 2
  store i64 %322, i64* %PC
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %325 = load i64, i64* %324, align 8, !tbaa !2428
  %326 = ashr i64 %325, 63
  store i64 %326, i64* %323, align 8, !tbaa !2428
  %327 = load i64, i64* %RCX
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 3
  store i64 %329, i64* %PC
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %331 = load i64, i64* %330, align 8, !tbaa !2428
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %333 = load i64, i64* %332, align 8, !tbaa !2428
  %334 = sext i64 %327 to i128
  %335 = and i128 %334, -18446744073709551616
  %336 = zext i64 %333 to i128
  %337 = shl nuw i128 %336, 64
  %338 = zext i64 %331 to i128
  %339 = or i128 %337, %338
  %340 = zext i64 %327 to i128
  %341 = or i128 %335, %340
  %342 = sdiv i128 %339, %341
  %343 = trunc i128 %342 to i64
  %344 = and i128 %342, 18446744073709551615
  %345 = sext i64 %343 to i128
  %346 = and i128 %345, -18446744073709551616
  %347 = or i128 %346, %344
  %348 = icmp eq i128 %342, %347
  br i1 %348, label %353, label %349

; <label>:349:                                    ; preds = %block_404324
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %351 = load i64, i64* %350, align 8, !tbaa !2428
  %352 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %351, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:353:                                    ; preds = %block_404324
  %354 = srem i128 %339, %341
  %355 = trunc i128 %354 to i64
  store i64 %343, i64* %330, align 8, !tbaa !2428
  store i64 %355, i64* %332, align 8, !tbaa !2428
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %356, align 1, !tbaa !2433
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %357, align 1, !tbaa !2447
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %358, align 1, !tbaa !2448
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %359, align 1, !tbaa !2449
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %360, align 1, !tbaa !2450
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %361, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %349, %353
  %362 = phi %struct.Memory* [ %352, %349 ], [ %MEMORY.0, %353 ]
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 40
  %365 = load i64, i64* %RAX
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 4
  store i64 %367, i64* %PC
  %368 = inttoptr i64 %364 to i64*
  store i64 %365, i64* %368
  br label %block_40433f

block_40433f:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.1 = phi %struct.Memory* [ %362, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %1374, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %369 = load i64, i64* %RAX
  %370 = load i32, i32* %EAX
  %371 = zext i32 %370 to i64
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 2
  store i64 %373, i64* %PC
  %374 = xor i64 %371, %369
  %375 = trunc i64 %374 to i32
  %376 = and i64 %374, 4294967295
  store i64 %376, i64* %RAX, align 8, !tbaa !2428
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %377, align 1, !tbaa !2433
  %378 = and i32 %375, 255
  %379 = call i32 @llvm.ctpop.i32(i32 %378) #16
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %382, i8* %383, align 1, !tbaa !2447
  %384 = icmp eq i32 %375, 0
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %385, i8* %386, align 1, !tbaa !2449
  %387 = lshr i32 %375, 31
  %388 = trunc i32 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %388, i8* %389, align 1, !tbaa !2450
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %390, align 1, !tbaa !2451
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %391, align 1, !tbaa !2448
  %392 = load i8, i8* %AL
  %393 = zext i8 %392 to i64
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 2
  store i64 %395, i64* %PC
  store i8 %392, i8* %CL, align 1, !tbaa !2432
  %396 = load i64, i64* %RBP
  %397 = sub i64 %396, 48
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 4
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i64*
  %401 = load i64, i64* %400
  store i64 %401, i64* %RDX, align 8, !tbaa !2428
  %402 = load i64, i64* %RDX
  %403 = load i64, i64* %RBP
  %404 = sub i64 %403, 32
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 4
  store i64 %406, i64* %PC
  %407 = inttoptr i64 %404 to i64*
  %408 = load i64, i64* %407
  %409 = sub i64 %402, %408
  %410 = icmp ugt i64 %408, %402
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %411, i8* %412, align 1, !tbaa !2433
  %413 = trunc i64 %409 to i32
  %414 = and i32 %413, 255
  %415 = call i32 @llvm.ctpop.i32(i32 %414) #16
  %416 = trunc i32 %415 to i8
  %417 = and i8 %416, 1
  %418 = xor i8 %417, 1
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %418, i8* %419, align 1, !tbaa !2447
  %420 = xor i64 %408, %402
  %421 = xor i64 %420, %409
  %422 = lshr i64 %421, 4
  %423 = trunc i64 %422 to i8
  %424 = and i8 %423, 1
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %424, i8* %425, align 1, !tbaa !2448
  %426 = icmp eq i64 %409, 0
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %427, i8* %428, align 1, !tbaa !2449
  %429 = lshr i64 %409, 63
  %430 = trunc i64 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %430, i8* %431, align 1, !tbaa !2450
  %432 = lshr i64 %402, 63
  %433 = lshr i64 %408, 63
  %434 = xor i64 %433, %432
  %435 = xor i64 %429, %432
  %436 = add nuw nsw i64 %435, %434
  %437 = icmp eq i64 %436, 2
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %438, i8* %439, align 1, !tbaa !2451
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 49
  %442 = load i8, i8* %CL
  %443 = zext i8 %442 to i64
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 3
  store i64 %445, i64* %PC
  %446 = inttoptr i64 %441 to i8*
  store i8 %442, i8* %446
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 36
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 6
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 6
  store i64 %452, i64* %PC
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %454 = load i8, i8* %453, align 1, !tbaa !2449
  %455 = icmp ne i8 %454, 0
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %457 = load i8, i8* %456, align 1, !tbaa !2450
  %458 = icmp ne i8 %457, 0
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %460 = load i8, i8* %459, align 1, !tbaa !2451
  %461 = icmp ne i8 %460, 0
  %462 = xor i1 %458, %461
  %463 = or i1 %455, %462
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %466 = select i1 %463, i64 %448, i64 %450
  store i64 %466, i64* %465, align 8, !tbaa !2428
  %467 = load i8, i8* %BRANCH_TAKEN
  %468 = icmp eq i8 %467, 1
  br i1 %468, label %block_404372, label %block_404354

block_404372:                                     ; preds = %block_404354, %block_40433f
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_40433f ], [ %945, %block_404354 ]
  %469 = load i64, i64* %RBP
  %470 = sub i64 %469, 49
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 3
  store i64 %472, i64* %PC
  %473 = inttoptr i64 %470 to i8*
  %474 = load i8, i8* %473
  store i8 %474, i8* %AL, align 1, !tbaa !2432
  %475 = load i8, i8* %AL
  %476 = zext i8 %475 to i64
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 2
  store i64 %478, i64* %PC
  %479 = and i64 1, %476
  %480 = trunc i64 %479 to i8
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %481, align 1, !tbaa !2433
  %482 = trunc i64 %479 to i32
  %483 = and i32 %482, 255
  %484 = call i32 @llvm.ctpop.i32(i32 %483) #16
  %485 = trunc i32 %484 to i8
  %486 = and i8 %485, 1
  %487 = xor i8 %486, 1
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %487, i8* %488, align 1, !tbaa !2447
  %489 = icmp eq i8 %480, 0
  %490 = zext i1 %489 to i8
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %490, i8* %491, align 1, !tbaa !2449
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %492, align 1, !tbaa !2450
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %493, align 1, !tbaa !2451
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %494, align 1, !tbaa !2448
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 11
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 6
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 6
  store i64 %500, i64* %PC
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %502 = load i8, i8* %501, align 1, !tbaa !2449
  %503 = icmp eq i8 %502, 0
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %506 = select i1 %503, i64 %496, i64 %498
  store i64 %506, i64* %505, align 8, !tbaa !2428
  %507 = load i8, i8* %BRANCH_TAKEN
  %508 = icmp eq i8 %507, 1
  %509 = load i64, i64* %PC
  br i1 %508, label %block_404382, label %block_40437d

block_4042fc:                                     ; preds = %block_4042ee
  %510 = load i64, i64* %RBP
  %511 = sub i64 %510, 24
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 4
  store i64 %513, i64* %PC
  %514 = inttoptr i64 %511 to i64*
  %515 = load i64, i64* %514
  store i64 %515, i64* %RAX, align 8, !tbaa !2428
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 40
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 4
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i64*
  %521 = load i64, i64* %520
  store i64 %521, i64* %RCX, align 8, !tbaa !2428
  %522 = load i64, i64* %RCX
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 4
  store i64 %524, i64* %PC
  %525 = sub i64 %522, 1
  store i64 %525, i64* %RCX, align 8, !tbaa !2428
  %526 = icmp ult i64 %522, 1
  %527 = zext i1 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %527, i8* %528, align 1, !tbaa !2433
  %529 = trunc i64 %525 to i32
  %530 = and i32 %529, 255
  %531 = call i32 @llvm.ctpop.i32(i32 %530) #16
  %532 = trunc i32 %531 to i8
  %533 = and i8 %532, 1
  %534 = xor i8 %533, 1
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %534, i8* %535, align 1, !tbaa !2447
  %536 = xor i64 1, %522
  %537 = xor i64 %536, %525
  %538 = lshr i64 %537, 4
  %539 = trunc i64 %538 to i8
  %540 = and i8 %539, 1
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %540, i8* %541, align 1, !tbaa !2448
  %542 = icmp eq i64 %525, 0
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %543, i8* %544, align 1, !tbaa !2449
  %545 = lshr i64 %525, 63
  %546 = trunc i64 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %546, i8* %547, align 1, !tbaa !2450
  %548 = lshr i64 %522, 63
  %549 = xor i64 %545, %548
  %550 = add nuw nsw i64 %549, %548
  %551 = icmp eq i64 %550, 2
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %552, i8* %553, align 1, !tbaa !2451
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 24
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 4
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i64*
  %559 = load i64, i64* %558
  store i64 %559, i64* %RDX, align 8, !tbaa !2428
  %560 = load i64, i64* %RBP
  %561 = sub i64 %560, 48
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 4
  store i64 %563, i64* %PC
  %564 = inttoptr i64 %561 to i64*
  %565 = load i64, i64* %564
  store i64 %565, i64* %RSI, align 8, !tbaa !2428
  %566 = load i64, i64* %RAX
  %567 = load i64, i64* %RCX
  %568 = mul i64 %567, 8
  %569 = add i64 %568, %566
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = load i64, i64* %RDX
  %575 = load i64, i64* %RSI
  %576 = mul i64 %575, 8
  %577 = add i64 %576, %574
  %578 = load i64, i64* %RAX
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %577 to i64*
  store i64 %578, i64* %581
  %582 = load i64, i64* %RBP
  %583 = sub i64 %582, 40
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 4
  store i64 %585, i64* %PC
  %586 = inttoptr i64 %583 to i64*
  %587 = load i64, i64* %586
  store i64 %587, i64* %RAX, align 8, !tbaa !2428
  %588 = load i64, i64* %RAX
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 4
  store i64 %590, i64* %PC
  %591 = sub i64 %588, 1
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = icmp ult i64 %588, 1
  %593 = zext i1 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %593, i8* %594, align 1, !tbaa !2433
  %595 = trunc i64 %591 to i32
  %596 = and i32 %595, 255
  %597 = call i32 @llvm.ctpop.i32(i32 %596) #16
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  %600 = xor i8 %599, 1
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %600, i8* %601, align 1, !tbaa !2447
  %602 = xor i64 1, %588
  %603 = xor i64 %602, %591
  %604 = lshr i64 %603, 4
  %605 = trunc i64 %604 to i8
  %606 = and i8 %605, 1
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %606, i8* %607, align 1, !tbaa !2448
  %608 = icmp eq i64 %591, 0
  %609 = zext i1 %608 to i8
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %609, i8* %610, align 1, !tbaa !2449
  %611 = lshr i64 %591, 63
  %612 = trunc i64 %611 to i8
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %612, i8* %613, align 1, !tbaa !2450
  %614 = lshr i64 %588, 63
  %615 = xor i64 %611, %614
  %616 = add nuw nsw i64 %615, %614
  %617 = icmp eq i64 %616, 2
  %618 = zext i1 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %618, i8* %619, align 1, !tbaa !2451
  %620 = load i64, i64* %RBP
  %621 = sub i64 %620, 48
  %622 = load i64, i64* %RAX
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 4
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %621 to i64*
  store i64 %622, i64* %625
  br label %block_404324

block_40426f:                                     ; preds = %block_404261
  %626 = sub i64 %1449, 24
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 4
  store i64 %628, i64* %PC
  %629 = inttoptr i64 %626 to i64*
  %630 = load i64, i64* %629
  store i64 %630, i64* %RAX, align 8, !tbaa !2428
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 40
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %632 to i64*
  %636 = load i64, i64* %635
  store i64 %636, i64* %RCX, align 8, !tbaa !2428
  %637 = load i64, i64* %RCX
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 4
  store i64 %639, i64* %PC
  %640 = sub i64 %637, 1
  store i64 %640, i64* %RCX, align 8, !tbaa !2428
  %641 = icmp ult i64 %637, 1
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %642, i8* %643, align 1, !tbaa !2433
  %644 = trunc i64 %640 to i32
  %645 = and i32 %644, 255
  %646 = call i32 @llvm.ctpop.i32(i32 %645) #16
  %647 = trunc i32 %646 to i8
  %648 = and i8 %647, 1
  %649 = xor i8 %648, 1
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %649, i8* %650, align 1, !tbaa !2447
  %651 = xor i64 1, %637
  %652 = xor i64 %651, %640
  %653 = lshr i64 %652, 4
  %654 = trunc i64 %653 to i8
  %655 = and i8 %654, 1
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %655, i8* %656, align 1, !tbaa !2448
  %657 = icmp eq i64 %640, 0
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %658, i8* %659, align 1, !tbaa !2449
  %660 = lshr i64 %640, 63
  %661 = trunc i64 %660 to i8
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %661, i8* %662, align 1, !tbaa !2450
  %663 = lshr i64 %637, 63
  %664 = xor i64 %660, %663
  %665 = add nuw nsw i64 %664, %663
  %666 = icmp eq i64 %665, 2
  %667 = zext i1 %666 to i8
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %667, i8* %668, align 1, !tbaa !2451
  %669 = load i64, i64* %RCX
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 4
  store i64 %671, i64* %PC
  %672 = shl i64 %669, 2
  %673 = icmp slt i64 %672, 0
  %674 = shl i64 %672, 1
  store i64 %674, i64* %RCX, align 8, !tbaa !2428
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %676 = zext i1 %673 to i8
  store i8 %676, i8* %675, align 1, !tbaa !2432
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %678 = trunc i64 %674 to i32
  %679 = and i32 %678, 254
  %680 = call i32 @llvm.ctpop.i32(i32 %679) #16
  %681 = trunc i32 %680 to i8
  %682 = and i8 %681, 1
  %683 = xor i8 %682, 1
  store i8 %683, i8* %677, align 1, !tbaa !2432
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %684, align 1, !tbaa !2432
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %686 = icmp eq i64 %674, 0
  %687 = zext i1 %686 to i8
  store i8 %687, i8* %685, align 1, !tbaa !2432
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %689 = lshr i64 %674, 63
  %690 = trunc i64 %689 to i8
  store i8 %690, i8* %688, align 1, !tbaa !2432
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %691, align 1, !tbaa !2432
  %692 = load i64, i64* %RAX
  %693 = load i64, i64* %RCX
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 3
  store i64 %695, i64* %PC
  %696 = add i64 %693, %692
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = icmp ult i64 %696, %692
  %698 = icmp ult i64 %696, %693
  %699 = or i1 %697, %698
  %700 = zext i1 %699 to i8
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %700, i8* %701, align 1, !tbaa !2433
  %702 = trunc i64 %696 to i32
  %703 = and i32 %702, 255
  %704 = call i32 @llvm.ctpop.i32(i32 %703) #16
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  %707 = xor i8 %706, 1
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %707, i8* %708, align 1, !tbaa !2447
  %709 = xor i64 %693, %692
  %710 = xor i64 %709, %696
  %711 = lshr i64 %710, 4
  %712 = trunc i64 %711 to i8
  %713 = and i8 %712, 1
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %713, i8* %714, align 1, !tbaa !2448
  %715 = icmp eq i64 %696, 0
  %716 = zext i1 %715 to i8
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %716, i8* %717, align 1, !tbaa !2449
  %718 = lshr i64 %696, 63
  %719 = trunc i64 %718 to i8
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %719, i8* %720, align 1, !tbaa !2450
  %721 = lshr i64 %692, 63
  %722 = lshr i64 %693, 63
  %723 = xor i64 %718, %721
  %724 = xor i64 %718, %722
  %725 = add nuw nsw i64 %723, %724
  %726 = icmp eq i64 %725, 2
  %727 = zext i1 %726 to i8
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %727, i8* %728, align 1, !tbaa !2451
  %729 = load i64, i64* %RBP
  %730 = sub i64 %729, 24
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC
  %733 = inttoptr i64 %730 to i64*
  %734 = load i64, i64* %733
  store i64 %734, i64* %RCX, align 8, !tbaa !2428
  %735 = load i64, i64* %RBP
  %736 = sub i64 %735, 40
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 4
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %736 to i64*
  %740 = load i64, i64* %739
  store i64 %740, i64* %RDX, align 8, !tbaa !2428
  %741 = load i64, i64* %RDX
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = shl i64 %741, 2
  %745 = icmp slt i64 %744, 0
  %746 = shl i64 %744, 1
  store i64 %746, i64* %RDX, align 8, !tbaa !2428
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %748 = zext i1 %745 to i8
  store i8 %748, i8* %747, align 1, !tbaa !2432
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %750 = trunc i64 %746 to i32
  %751 = and i32 %750, 254
  %752 = call i32 @llvm.ctpop.i32(i32 %751) #16
  %753 = trunc i32 %752 to i8
  %754 = and i8 %753, 1
  %755 = xor i8 %754, 1
  store i8 %755, i8* %749, align 1, !tbaa !2432
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %756, align 1, !tbaa !2432
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %758 = icmp eq i64 %746, 0
  %759 = zext i1 %758 to i8
  store i8 %759, i8* %757, align 1, !tbaa !2432
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %761 = lshr i64 %746, 63
  %762 = trunc i64 %761 to i8
  store i8 %762, i8* %760, align 1, !tbaa !2432
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %763, align 1, !tbaa !2432
  %764 = load i64, i64* %RCX
  %765 = load i64, i64* %RDX
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 3
  store i64 %767, i64* %PC
  %768 = add i64 %765, %764
  store i64 %768, i64* %RCX, align 8, !tbaa !2428
  %769 = icmp ult i64 %768, %764
  %770 = icmp ult i64 %768, %765
  %771 = or i1 %769, %770
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %772, i8* %773, align 1, !tbaa !2433
  %774 = trunc i64 %768 to i32
  %775 = and i32 %774, 255
  %776 = call i32 @llvm.ctpop.i32(i32 %775) #16
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = xor i8 %778, 1
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %779, i8* %780, align 1, !tbaa !2447
  %781 = xor i64 %765, %764
  %782 = xor i64 %781, %768
  %783 = lshr i64 %782, 4
  %784 = trunc i64 %783 to i8
  %785 = and i8 %784, 1
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %785, i8* %786, align 1, !tbaa !2448
  %787 = icmp eq i64 %768, 0
  %788 = zext i1 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %788, i8* %789, align 1, !tbaa !2449
  %790 = lshr i64 %768, 63
  %791 = trunc i64 %790 to i8
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %791, i8* %792, align 1, !tbaa !2450
  %793 = lshr i64 %764, 63
  %794 = lshr i64 %765, 63
  %795 = xor i64 %790, %793
  %796 = xor i64 %790, %794
  %797 = add nuw nsw i64 %795, %796
  %798 = icmp eq i64 %797, 2
  %799 = zext i1 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %799, i8* %800, align 1, !tbaa !2451
  %801 = load i64, i64* %RAX
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 3
  store i64 %803, i64* %PC
  store i64 %801, i64* %RDI, align 8, !tbaa !2428
  %804 = load i64, i64* %RCX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC
  store i64 %804, i64* %RSI, align 8, !tbaa !2428
  %807 = load i64, i64* %PC
  %808 = sub i64 %807, 4167
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 5
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 5
  store i64 %812, i64* %PC
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %814 = load i64, i64* %813, align 8, !tbaa !2428
  %815 = add i64 %814, -8
  %816 = inttoptr i64 %815 to i64*
  store i64 %810, i64* %816
  store i64 %815, i64* %813, align 8, !tbaa !2428
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %808, i64* %817, align 8, !tbaa !2428
  %818 = load i64, i64* %PC
  %819 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %818, %struct.Memory* %MEMORY.4)
  %820 = load i8, i8* %AL
  %821 = zext i8 %820 to i64
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 2
  store i64 %823, i64* %PC
  %824 = and i64 1, %821
  %825 = trunc i64 %824 to i8
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %826, align 1, !tbaa !2433
  %827 = trunc i64 %824 to i32
  %828 = and i32 %827, 255
  %829 = call i32 @llvm.ctpop.i32(i32 %828) #16
  %830 = trunc i32 %829 to i8
  %831 = and i8 %830, 1
  %832 = xor i8 %831, 1
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %832, i8* %833, align 1, !tbaa !2447
  %834 = icmp eq i8 %825, 0
  %835 = zext i1 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %835, i8* %836, align 1, !tbaa !2449
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %837, align 1, !tbaa !2450
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %838, align 1, !tbaa !2451
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %839, align 1, !tbaa !2448
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 11
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 6
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 6
  store i64 %845, i64* %PC
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %847 = load i8, i8* %846, align 1, !tbaa !2449
  %848 = icmp eq i8 %847, 0
  %849 = zext i1 %848 to i8
  store i8 %849, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %851 = select i1 %848, i64 %841, i64 %843
  store i64 %851, i64* %850, align 8, !tbaa !2428
  %852 = load i8, i8* %BRANCH_TAKEN
  %853 = icmp eq i8 %852, 1
  br i1 %853, label %block_4042a9, label %block_4042a4

block_404354:                                     ; preds = %block_40433f
  %854 = load i64, i64* %RBP
  %855 = sub i64 %854, 8
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 4
  store i64 %857, i64* %PC
  store i64 %855, i64* %RSI, align 8, !tbaa !2428
  %858 = load i64, i64* %RBP
  %859 = sub i64 %858, 24
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 4
  store i64 %861, i64* %PC
  %862 = inttoptr i64 %859 to i64*
  %863 = load i64, i64* %862
  store i64 %863, i64* %RAX, align 8, !tbaa !2428
  %864 = load i64, i64* %RBP
  %865 = sub i64 %864, 40
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 4
  store i64 %867, i64* %PC
  %868 = inttoptr i64 %865 to i64*
  %869 = load i64, i64* %868
  store i64 %869, i64* %RCX, align 8, !tbaa !2428
  %870 = load i64, i64* %RCX
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 4
  store i64 %872, i64* %PC
  %873 = shl i64 %870, 2
  %874 = icmp slt i64 %873, 0
  %875 = shl i64 %873, 1
  store i64 %875, i64* %RCX, align 8, !tbaa !2428
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %877 = zext i1 %874 to i8
  store i8 %877, i8* %876, align 1, !tbaa !2432
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %879 = trunc i64 %875 to i32
  %880 = and i32 %879, 254
  %881 = call i32 @llvm.ctpop.i32(i32 %880) #16
  %882 = trunc i32 %881 to i8
  %883 = and i8 %882, 1
  %884 = xor i8 %883, 1
  store i8 %884, i8* %878, align 1, !tbaa !2432
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %885, align 1, !tbaa !2432
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %887 = icmp eq i64 %875, 0
  %888 = zext i1 %887 to i8
  store i8 %888, i8* %886, align 1, !tbaa !2432
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %890 = lshr i64 %875, 63
  %891 = trunc i64 %890 to i8
  store i8 %891, i8* %889, align 1, !tbaa !2432
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %892, align 1, !tbaa !2432
  %893 = load i64, i64* %RAX
  %894 = load i64, i64* %RCX
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 3
  store i64 %896, i64* %PC
  %897 = add i64 %894, %893
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = icmp ult i64 %897, %893
  %899 = icmp ult i64 %897, %894
  %900 = or i1 %898, %899
  %901 = zext i1 %900 to i8
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %901, i8* %902, align 1, !tbaa !2433
  %903 = trunc i64 %897 to i32
  %904 = and i32 %903, 255
  %905 = call i32 @llvm.ctpop.i32(i32 %904) #16
  %906 = trunc i32 %905 to i8
  %907 = and i8 %906, 1
  %908 = xor i8 %907, 1
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %908, i8* %909, align 1, !tbaa !2447
  %910 = xor i64 %894, %893
  %911 = xor i64 %910, %897
  %912 = lshr i64 %911, 4
  %913 = trunc i64 %912 to i8
  %914 = and i8 %913, 1
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %914, i8* %915, align 1, !tbaa !2448
  %916 = icmp eq i64 %897, 0
  %917 = zext i1 %916 to i8
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %917, i8* %918, align 1, !tbaa !2449
  %919 = lshr i64 %897, 63
  %920 = trunc i64 %919 to i8
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %920, i8* %921, align 1, !tbaa !2450
  %922 = lshr i64 %893, 63
  %923 = lshr i64 %894, 63
  %924 = xor i64 %919, %922
  %925 = xor i64 %919, %923
  %926 = add nuw nsw i64 %924, %925
  %927 = icmp eq i64 %926, 2
  %928 = zext i1 %927 to i8
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %928, i8* %929, align 1, !tbaa !2451
  %930 = load i64, i64* %RAX
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 3
  store i64 %932, i64* %PC
  store i64 %930, i64* %RDI, align 8, !tbaa !2428
  %933 = load i64, i64* %PC
  %934 = sub i64 %933, 4378
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 5
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 5
  store i64 %938, i64* %PC
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %940 = load i64, i64* %939, align 8, !tbaa !2428
  %941 = add i64 %940, -8
  %942 = inttoptr i64 %941 to i64*
  store i64 %936, i64* %942
  store i64 %941, i64* %939, align 8, !tbaa !2428
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %934, i64* %943, align 8, !tbaa !2428
  %944 = load i64, i64* %PC
  %945 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %944, %struct.Memory* %MEMORY.1)
  %946 = load i64, i64* %RBP
  %947 = sub i64 %946, 49
  %948 = load i8, i8* %AL
  %949 = zext i8 %948 to i64
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 3
  store i64 %951, i64* %PC
  %952 = inttoptr i64 %947 to i8*
  store i8 %948, i8* %952
  br label %block_404372

block_4042ee:                                     ; preds = %block_404261
  %953 = sub i64 %1449, 40
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 4
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %953 to i64*
  %957 = load i64, i64* %956
  store i64 %957, i64* %RAX, align 8, !tbaa !2428
  %958 = load i64, i64* %RAX
  %959 = load i64, i64* %RBP
  %960 = sub i64 %959, 16
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 4
  store i64 %962, i64* %PC
  %963 = inttoptr i64 %960 to i64*
  %964 = load i64, i64* %963
  %965 = sub i64 %958, %964
  %966 = icmp ugt i64 %964, %958
  %967 = zext i1 %966 to i8
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %967, i8* %968, align 1, !tbaa !2433
  %969 = trunc i64 %965 to i32
  %970 = and i32 %969, 255
  %971 = call i32 @llvm.ctpop.i32(i32 %970) #16
  %972 = trunc i32 %971 to i8
  %973 = and i8 %972, 1
  %974 = xor i8 %973, 1
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %974, i8* %975, align 1, !tbaa !2447
  %976 = xor i64 %964, %958
  %977 = xor i64 %976, %965
  %978 = lshr i64 %977, 4
  %979 = trunc i64 %978 to i8
  %980 = and i8 %979, 1
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %980, i8* %981, align 1, !tbaa !2448
  %982 = icmp eq i64 %965, 0
  %983 = zext i1 %982 to i8
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %983, i8* %984, align 1, !tbaa !2449
  %985 = lshr i64 %965, 63
  %986 = trunc i64 %985 to i8
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %986, i8* %987, align 1, !tbaa !2450
  %988 = lshr i64 %958, 63
  %989 = lshr i64 %964, 63
  %990 = xor i64 %989, %988
  %991 = xor i64 %985, %988
  %992 = add nuw nsw i64 %991, %990
  %993 = icmp eq i64 %992, 2
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %994, i8* %995, align 1, !tbaa !2451
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 46
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 6
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 6
  store i64 %1001, i64* %PC
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1003 = load i8, i8* %1002, align 1, !tbaa !2449
  %1004 = icmp eq i8 %1003, 0
  %1005 = zext i1 %1004 to i8
  store i8 %1005, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1007 = select i1 %1004, i64 %997, i64 %999
  store i64 %1007, i64* %1006, align 8, !tbaa !2428
  %1008 = load i8, i8* %BRANCH_TAKEN
  %1009 = icmp eq i8 %1008, 1
  br i1 %1009, label %block_404324, label %block_4042fc

block_4042a9:                                     ; preds = %block_40426f
  %1010 = load i64, i64* %RBP
  %1011 = sub i64 %1010, 40
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 4
  store i64 %1013, i64* %PC
  %1014 = inttoptr i64 %1011 to i64*
  %1015 = load i64, i64* %1014
  store i64 %1015, i64* %RAX, align 8, !tbaa !2428
  %1016 = load i64, i64* %RAX
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 4
  store i64 %1018, i64* %PC
  %1019 = add i64 1, %1016
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = icmp ult i64 %1019, %1016
  %1021 = icmp ult i64 %1019, 1
  %1022 = or i1 %1020, %1021
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1023, i8* %1024, align 1, !tbaa !2433
  %1025 = trunc i64 %1019 to i32
  %1026 = and i32 %1025, 255
  %1027 = call i32 @llvm.ctpop.i32(i32 %1026) #16
  %1028 = trunc i32 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = xor i8 %1029, 1
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1030, i8* %1031, align 1, !tbaa !2447
  %1032 = xor i64 1, %1016
  %1033 = xor i64 %1032, %1019
  %1034 = lshr i64 %1033, 4
  %1035 = trunc i64 %1034 to i8
  %1036 = and i8 %1035, 1
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1036, i8* %1037, align 1, !tbaa !2448
  %1038 = icmp eq i64 %1019, 0
  %1039 = zext i1 %1038 to i8
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1039, i8* %1040, align 1, !tbaa !2449
  %1041 = lshr i64 %1019, 63
  %1042 = trunc i64 %1041 to i8
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1042, i8* %1043, align 1, !tbaa !2450
  %1044 = lshr i64 %1016, 63
  %1045 = xor i64 %1041, %1044
  %1046 = add nuw nsw i64 %1045, %1041
  %1047 = icmp eq i64 %1046, 2
  %1048 = zext i1 %1047 to i8
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1048, i8* %1049, align 1, !tbaa !2451
  %1050 = load i64, i64* %RBP
  %1051 = sub i64 %1050, 40
  %1052 = load i64, i64* %RAX
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 4
  store i64 %1054, i64* %PC
  %1055 = inttoptr i64 %1051 to i64*
  store i64 %1052, i64* %1055
  br label %block_4042b5

block_4042b5:                                     ; preds = %block_4042a4, %block_4042a9
  %MEMORY.3 = phi %struct.Memory* [ %819, %block_4042a9 ], [ %819, %block_4042a4 ]
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 24
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 4
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %RAX, align 8, !tbaa !2428
  %1062 = load i64, i64* %RBP
  %1063 = sub i64 %1062, 40
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 4
  store i64 %1065, i64* %PC
  %1066 = inttoptr i64 %1063 to i64*
  %1067 = load i64, i64* %1066
  store i64 %1067, i64* %RCX, align 8, !tbaa !2428
  %1068 = load i64, i64* %RCX
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 4
  store i64 %1070, i64* %PC
  %1071 = sub i64 %1068, 1
  store i64 %1071, i64* %RCX, align 8, !tbaa !2428
  %1072 = icmp ult i64 %1068, 1
  %1073 = zext i1 %1072 to i8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1073, i8* %1074, align 1, !tbaa !2433
  %1075 = trunc i64 %1071 to i32
  %1076 = and i32 %1075, 255
  %1077 = call i32 @llvm.ctpop.i32(i32 %1076) #16
  %1078 = trunc i32 %1077 to i8
  %1079 = and i8 %1078, 1
  %1080 = xor i8 %1079, 1
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1080, i8* %1081, align 1, !tbaa !2447
  %1082 = xor i64 1, %1068
  %1083 = xor i64 %1082, %1071
  %1084 = lshr i64 %1083, 4
  %1085 = trunc i64 %1084 to i8
  %1086 = and i8 %1085, 1
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1086, i8* %1087, align 1, !tbaa !2448
  %1088 = icmp eq i64 %1071, 0
  %1089 = zext i1 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1089, i8* %1090, align 1, !tbaa !2449
  %1091 = lshr i64 %1071, 63
  %1092 = trunc i64 %1091 to i8
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1092, i8* %1093, align 1, !tbaa !2450
  %1094 = lshr i64 %1068, 63
  %1095 = xor i64 %1091, %1094
  %1096 = add nuw nsw i64 %1095, %1094
  %1097 = icmp eq i64 %1096, 2
  %1098 = zext i1 %1097 to i8
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1098, i8* %1099, align 1, !tbaa !2451
  %1100 = load i64, i64* %RBP
  %1101 = sub i64 %1100, 24
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 4
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1101 to i64*
  %1105 = load i64, i64* %1104
  store i64 %1105, i64* %RDX, align 8, !tbaa !2428
  %1106 = load i64, i64* %RBP
  %1107 = sub i64 %1106, 48
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %RSI, align 8, !tbaa !2428
  %1112 = load i64, i64* %RAX
  %1113 = load i64, i64* %RCX
  %1114 = mul i64 %1113, 8
  %1115 = add i64 %1114, %1112
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 4
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to i64*
  %1119 = load i64, i64* %1118
  store i64 %1119, i64* %RAX, align 8, !tbaa !2428
  %1120 = load i64, i64* %RDX
  %1121 = load i64, i64* %RSI
  %1122 = mul i64 %1121, 8
  %1123 = add i64 %1122, %1120
  %1124 = load i64, i64* %RAX
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 4
  store i64 %1126, i64* %PC
  %1127 = inttoptr i64 %1123 to i64*
  store i64 %1124, i64* %1127
  %1128 = load i64, i64* %RBP
  %1129 = sub i64 %1128, 40
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 4
  store i64 %1131, i64* %PC
  %1132 = inttoptr i64 %1129 to i64*
  %1133 = load i64, i64* %1132
  store i64 %1133, i64* %RAX, align 8, !tbaa !2428
  %1134 = load i64, i64* %RAX
  %1135 = load i64, i64* %PC
  %1136 = add i64 %1135, 4
  store i64 %1136, i64* %PC
  %1137 = sub i64 %1134, 1
  store i64 %1137, i64* %RAX, align 8, !tbaa !2428
  %1138 = icmp ult i64 %1134, 1
  %1139 = zext i1 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1139, i8* %1140, align 1, !tbaa !2433
  %1141 = trunc i64 %1137 to i32
  %1142 = and i32 %1141, 255
  %1143 = call i32 @llvm.ctpop.i32(i32 %1142) #16
  %1144 = trunc i32 %1143 to i8
  %1145 = and i8 %1144, 1
  %1146 = xor i8 %1145, 1
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1146, i8* %1147, align 1, !tbaa !2447
  %1148 = xor i64 1, %1134
  %1149 = xor i64 %1148, %1137
  %1150 = lshr i64 %1149, 4
  %1151 = trunc i64 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1152, i8* %1153, align 1, !tbaa !2448
  %1154 = icmp eq i64 %1137, 0
  %1155 = zext i1 %1154 to i8
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1155, i8* %1156, align 1, !tbaa !2449
  %1157 = lshr i64 %1137, 63
  %1158 = trunc i64 %1157 to i8
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1158, i8* %1159, align 1, !tbaa !2450
  %1160 = lshr i64 %1134, 63
  %1161 = xor i64 %1157, %1160
  %1162 = add nuw nsw i64 %1161, %1160
  %1163 = icmp eq i64 %1162, 2
  %1164 = zext i1 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1164, i8* %1165, align 1, !tbaa !2451
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 48
  %1168 = load i64, i64* %RAX
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 4
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1167 to i64*
  store i64 %1168, i64* %1171
  %1172 = load i64, i64* %RBP
  %1173 = sub i64 %1172, 40
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 4
  store i64 %1175, i64* %PC
  %1176 = inttoptr i64 %1173 to i64*
  %1177 = load i64, i64* %1176
  store i64 %1177, i64* %RAX, align 8, !tbaa !2428
  %1178 = load i64, i64* %RAX
  %1179 = load i64, i64* %RBP
  %1180 = sub i64 %1179, 40
  %1181 = load i64, i64* %PC
  %1182 = add i64 %1181, 4
  store i64 %1182, i64* %PC
  %1183 = inttoptr i64 %1180 to i64*
  %1184 = load i64, i64* %1183
  %1185 = add i64 %1184, %1178
  store i64 %1185, i64* %RAX, align 8, !tbaa !2428
  %1186 = icmp ult i64 %1185, %1178
  %1187 = icmp ult i64 %1185, %1184
  %1188 = or i1 %1186, %1187
  %1189 = zext i1 %1188 to i8
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1189, i8* %1190, align 1, !tbaa !2433
  %1191 = trunc i64 %1185 to i32
  %1192 = and i32 %1191, 255
  %1193 = call i32 @llvm.ctpop.i32(i32 %1192) #16
  %1194 = trunc i32 %1193 to i8
  %1195 = and i8 %1194, 1
  %1196 = xor i8 %1195, 1
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1196, i8* %1197, align 1, !tbaa !2447
  %1198 = xor i64 %1184, %1178
  %1199 = xor i64 %1198, %1185
  %1200 = lshr i64 %1199, 4
  %1201 = trunc i64 %1200 to i8
  %1202 = and i8 %1201, 1
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1202, i8* %1203, align 1, !tbaa !2448
  %1204 = icmp eq i64 %1185, 0
  %1205 = zext i1 %1204 to i8
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1205, i8* %1206, align 1, !tbaa !2449
  %1207 = lshr i64 %1185, 63
  %1208 = trunc i64 %1207 to i8
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1208, i8* %1209, align 1, !tbaa !2450
  %1210 = lshr i64 %1178, 63
  %1211 = lshr i64 %1184, 63
  %1212 = xor i64 %1207, %1210
  %1213 = xor i64 %1207, %1211
  %1214 = add nuw nsw i64 %1212, %1213
  %1215 = icmp eq i64 %1214, 2
  %1216 = zext i1 %1215 to i8
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1216, i8* %1217, align 1, !tbaa !2451
  %1218 = load i64, i64* %RBP
  %1219 = sub i64 %1218, 40
  %1220 = load i64, i64* %RAX
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 4
  store i64 %1222, i64* %PC
  %1223 = inttoptr i64 %1219 to i64*
  store i64 %1220, i64* %1223
  %1224 = load i64, i64* %PC
  %1225 = sub i64 %1224, 136
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 5
  store i64 %1227, i64* %PC
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1225, i64* %1228, align 8, !tbaa !2428
  br label %block_404261

block_4042a4:                                     ; preds = %block_40426f
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 17
  %1231 = load i64, i64* %PC
  %1232 = add i64 %1231, 5
  store i64 %1232, i64* %PC
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1230, i64* %1233, align 8, !tbaa !2428
  br label %block_4042b5

block_404382:                                     ; preds = %block_404372
  %1234 = add i64 %509, 5
  store i64 %1234, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %1235 = load i32, i32* %EAX
  %1236 = zext i32 %1235 to i64
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 2
  store i64 %1238, i64* %PC
  %1239 = and i64 %1236, 4294967295
  store i64 %1239, i64* %RCX, align 8, !tbaa !2428
  %1240 = load i64, i64* %RBP
  %1241 = sub i64 %1240, 24
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 4
  store i64 %1243, i64* %PC
  %1244 = inttoptr i64 %1241 to i64*
  %1245 = load i64, i64* %1244
  store i64 %1245, i64* %RDX, align 8, !tbaa !2428
  %1246 = load i64, i64* %RBP
  %1247 = sub i64 %1246, 40
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 4
  store i64 %1249, i64* %PC
  %1250 = inttoptr i64 %1247 to i64*
  %1251 = load i64, i64* %1250
  store i64 %1251, i64* %RSI, align 8, !tbaa !2428
  %1252 = load i64, i64* %RBP
  %1253 = sub i64 %1252, 24
  %1254 = load i64, i64* %PC
  %1255 = add i64 %1254, 4
  store i64 %1255, i64* %PC
  %1256 = inttoptr i64 %1253 to i64*
  %1257 = load i64, i64* %1256
  store i64 %1257, i64* %RDI, align 8, !tbaa !2428
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 48
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 4
  store i64 %1261, i64* %PC
  %1262 = inttoptr i64 %1259 to i64*
  %1263 = load i64, i64* %1262
  store i64 %1263, i64* %R8, align 8, !tbaa !2428
  %1264 = load i64, i64* %RDX
  %1265 = load i64, i64* %RSI
  %1266 = mul i64 %1265, 8
  %1267 = add i64 %1266, %1264
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 4
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to i64*
  %1271 = load i64, i64* %1270
  store i64 %1271, i64* %RDX, align 8, !tbaa !2428
  %1272 = load i64, i64* %RDI
  %1273 = load i64, i64* %R8
  %1274 = mul i64 %1273, 8
  %1275 = add i64 %1274, %1272
  %1276 = load i64, i64* %RDX
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 4
  store i64 %1278, i64* %PC
  %1279 = inttoptr i64 %1275 to i64*
  store i64 %1276, i64* %1279
  %1280 = load i64, i64* %RBP
  %1281 = sub i64 %1280, 40
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 4
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1281 to i64*
  %1285 = load i64, i64* %1284
  store i64 %1285, i64* %RDX, align 8, !tbaa !2428
  %1286 = load i64, i64* %RBP
  %1287 = sub i64 %1286, 48
  %1288 = load i64, i64* %RDX
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 4
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1287 to i64*
  store i64 %1288, i64* %1291
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 48
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 4
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1293 to i64*
  %1297 = load i64, i64* %1296
  store i64 %1297, i64* %RDX, align 8, !tbaa !2428
  %1298 = load i64, i64* %RDX
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 4
  store i64 %1300, i64* %PC
  %1301 = sub i64 %1298, 1
  store i64 %1301, i64* %RDX, align 8, !tbaa !2428
  %1302 = icmp ult i64 %1298, 1
  %1303 = zext i1 %1302 to i8
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1303, i8* %1304, align 1, !tbaa !2433
  %1305 = trunc i64 %1301 to i32
  %1306 = and i32 %1305, 255
  %1307 = call i32 @llvm.ctpop.i32(i32 %1306) #16
  %1308 = trunc i32 %1307 to i8
  %1309 = and i8 %1308, 1
  %1310 = xor i8 %1309, 1
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1310, i8* %1311, align 1, !tbaa !2447
  %1312 = xor i64 1, %1298
  %1313 = xor i64 %1312, %1301
  %1314 = lshr i64 %1313, 4
  %1315 = trunc i64 %1314 to i8
  %1316 = and i8 %1315, 1
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1316, i8* %1317, align 1, !tbaa !2448
  %1318 = icmp eq i64 %1301, 0
  %1319 = zext i1 %1318 to i8
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1319, i8* %1320, align 1, !tbaa !2449
  %1321 = lshr i64 %1301, 63
  %1322 = trunc i64 %1321 to i8
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1322, i8* %1323, align 1, !tbaa !2450
  %1324 = lshr i64 %1298, 63
  %1325 = xor i64 %1321, %1324
  %1326 = add nuw nsw i64 %1325, %1324
  %1327 = icmp eq i64 %1326, 2
  %1328 = zext i1 %1327 to i8
  %1329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1328, i8* %1329, align 1, !tbaa !2451
  %1330 = load i64, i64* %RDX
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 3
  store i64 %1332, i64* %PC
  store i64 %1330, i64* %RAX, align 8, !tbaa !2428
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 2
  store i64 %1334, i64* %PC
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1337 = load i64, i64* %1336, align 8, !tbaa !2428
  %1338 = ashr i64 %1337, 63
  store i64 %1338, i64* %1335, align 8, !tbaa !2428
  %1339 = load i64, i64* %RCX
  %1340 = load i64, i64* %PC
  %1341 = add i64 %1340, 3
  store i64 %1341, i64* %PC
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1343 = load i64, i64* %1342, align 8, !tbaa !2428
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1345 = load i64, i64* %1344, align 8, !tbaa !2428
  %1346 = sext i64 %1339 to i128
  %1347 = and i128 %1346, -18446744073709551616
  %1348 = zext i64 %1345 to i128
  %1349 = shl nuw i128 %1348, 64
  %1350 = zext i64 %1343 to i128
  %1351 = or i128 %1349, %1350
  %1352 = zext i64 %1339 to i128
  %1353 = or i128 %1347, %1352
  %1354 = sdiv i128 %1351, %1353
  %1355 = trunc i128 %1354 to i64
  %1356 = and i128 %1354, 18446744073709551615
  %1357 = sext i64 %1355 to i128
  %1358 = and i128 %1357, -18446744073709551616
  %1359 = or i128 %1358, %1356
  %1360 = icmp eq i128 %1354, %1359
  br i1 %1360, label %1365, label %1361

; <label>:1361:                                   ; preds = %block_404382
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1363 = load i64, i64* %1362, align 8, !tbaa !2428
  %1364 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1363, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:1365:                                   ; preds = %block_404382
  %1366 = srem i128 %1351, %1353
  %1367 = trunc i128 %1366 to i64
  store i64 %1355, i64* %1342, align 8, !tbaa !2428
  store i64 %1367, i64* %1344, align 8, !tbaa !2428
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1368, align 1, !tbaa !2433
  %1369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1369, align 1, !tbaa !2447
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1370, align 1, !tbaa !2448
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1371, align 1, !tbaa !2449
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1372, align 1, !tbaa !2450
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1373, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %1361, %1365
  %1374 = phi %struct.Memory* [ %1364, %1361 ], [ %MEMORY.2, %1365 ]
  %1375 = load i64, i64* %RBP
  %1376 = sub i64 %1375, 40
  %1377 = load i64, i64* %RAX
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 4
  store i64 %1379, i64* %PC
  %1380 = inttoptr i64 %1376 to i64*
  store i64 %1377, i64* %1380
  %1381 = load i64, i64* %PC
  %1382 = sub i64 %1381, 126
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 5
  store i64 %1384, i64* %PC
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1382, i64* %1385, align 8, !tbaa !2428
  br label %block_40433f

block_404261:                                     ; preds = %block_4042b5, %block_404230
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_404230 ], [ %MEMORY.3, %block_4042b5 ]
  %1386 = load i64, i64* %RBP
  %1387 = sub i64 %1386, 40
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 4
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1387 to i64*
  %1391 = load i64, i64* %1390
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = load i64, i64* %RAX
  %1393 = load i64, i64* %RBP
  %1394 = sub i64 %1393, 16
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 4
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1394 to i64*
  %1398 = load i64, i64* %1397
  %1399 = sub i64 %1392, %1398
  %1400 = icmp ugt i64 %1398, %1392
  %1401 = zext i1 %1400 to i8
  %1402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1401, i8* %1402, align 1, !tbaa !2433
  %1403 = trunc i64 %1399 to i32
  %1404 = and i32 %1403, 255
  %1405 = call i32 @llvm.ctpop.i32(i32 %1404) #16
  %1406 = trunc i32 %1405 to i8
  %1407 = and i8 %1406, 1
  %1408 = xor i8 %1407, 1
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1408, i8* %1409, align 1, !tbaa !2447
  %1410 = xor i64 %1398, %1392
  %1411 = xor i64 %1410, %1399
  %1412 = lshr i64 %1411, 4
  %1413 = trunc i64 %1412 to i8
  %1414 = and i8 %1413, 1
  %1415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1414, i8* %1415, align 1, !tbaa !2448
  %1416 = icmp eq i64 %1399, 0
  %1417 = zext i1 %1416 to i8
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1417, i8* %1418, align 1, !tbaa !2449
  %1419 = lshr i64 %1399, 63
  %1420 = trunc i64 %1419 to i8
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1420, i8* %1421, align 1, !tbaa !2450
  %1422 = lshr i64 %1392, 63
  %1423 = lshr i64 %1398, 63
  %1424 = xor i64 %1423, %1422
  %1425 = xor i64 %1419, %1422
  %1426 = add nuw nsw i64 %1425, %1424
  %1427 = icmp eq i64 %1426, 2
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1428, i8* %1429, align 1, !tbaa !2451
  %1430 = load i64, i64* %PC
  %1431 = add i64 %1430, 133
  %1432 = load i64, i64* %PC
  %1433 = add i64 %1432, 6
  %1434 = load i64, i64* %PC
  %1435 = add i64 %1434, 6
  store i64 %1435, i64* %PC
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1437 = load i8, i8* %1436, align 1, !tbaa !2450
  %1438 = icmp ne i8 %1437, 0
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1440 = load i8, i8* %1439, align 1, !tbaa !2451
  %1441 = icmp ne i8 %1440, 0
  %1442 = xor i1 %1438, %1441
  %1443 = xor i1 %1442, true
  %1444 = zext i1 %1443 to i8
  store i8 %1444, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1446 = select i1 %1442, i64 %1433, i64 %1431
  store i64 %1446, i64* %1445, align 8, !tbaa !2428
  %1447 = load i8, i8* %BRANCH_TAKEN
  %1448 = icmp eq i8 %1447, 1
  %1449 = load i64, i64* %RBP
  br i1 %1448, label %block_4042ee, label %block_40426f
}

; Function Attrs: noinline
define %struct.Memory* @sub_406050__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406050:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404770__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404770:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 8
  %33 = load i64, i64* %RDI
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 16
  %39 = load i64, i64* %RSI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 8
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RSI, align 8, !tbaa !2428
  %49 = load i64, i64* %RSI
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 16
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RDI, align 8, !tbaa !2428
  %60 = load i64, i64* %RDI
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = load i64, i64* %RSI
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = sub i64 %65, %66
  store i64 %69, i64* %RSI, align 8, !tbaa !2428
  %70 = icmp ult i64 %65, %66
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2433
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2447
  %80 = xor i64 %66, %65
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2448
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2449
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2450
  %92 = lshr i64 %65, 63
  %93 = lshr i64 %66, 63
  %94 = xor i64 %93, %92
  %95 = xor i64 %89, %92
  %96 = add nuw nsw i64 %95, %94
  %97 = icmp eq i64 %96, 2
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %98, i8* %99, align 1, !tbaa !2451
  %100 = load i64, i64* %RSI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = ashr i64 %100, 2
  %104 = trunc i64 %103 to i8
  %105 = and i8 %104, 1
  %106 = ashr i64 %103, 1
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %105, i8* %107, align 1, !tbaa !2432
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = call i32 @llvm.ctpop.i32(i32 %110) #16
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %108, align 1, !tbaa !2432
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %115, align 1, !tbaa !2432
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %117 = icmp eq i64 %106, 0
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %116, align 1, !tbaa !2432
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %120 = lshr i64 %106, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %119, align 1, !tbaa !2432
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2432
  %123 = load i64, i64* %RSI
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  store i64 %123, i64* %RAX, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 1
  store i64 %127, i64* %PC
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %129 = load i64, i64* %128, align 8, !tbaa !2428
  %130 = add i64 %129, 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131
  store i64 %132, i64* %RBP, align 8, !tbaa !2428
  store i64 %130, i64* %128, align 8, !tbaa !2428
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 1
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %137 = load i64, i64* %136, align 8, !tbaa !2428
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  store i64 %139, i64* %135, align 8, !tbaa !2428
  %140 = add i64 %137, 8
  store i64 %140, i64* %136, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404fc0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %RAX
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = add i64 -8, %45
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = icmp ult i64 %48, %45
  %50 = icmp ult i64 %48, -8
  %51 = or i1 %49, %50
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %48 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 -8, %45
  %62 = xor i64 %61, %48
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %48, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %48, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %45, 63
  %74 = xor i64 %70, %73
  %75 = xor i64 %70, 1
  %76 = add nuw nsw i64 %74, %75
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %78, i8* %79, align 1, !tbaa !2451
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 1
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !2428
  %95 = add i64 %94, 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %RBP, align 8, !tbaa !2428
  store i64 %95, i64* %93, align 8, !tbaa !2428
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 1
  store i64 %99, i64* %PC
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %100, align 8, !tbaa !2428
  %105 = add i64 %102, 8
  store i64 %105, i64* %101, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405ed0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_401220__Z5timerv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401220:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %16 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %15, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %16 to %"class.std::bitset"*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %18 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %17, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %18 to %"class.std::bitset"*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %20 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %19, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %20 to %union.vec128_t*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %22 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %21, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %22 to %union.vec128_t*
  %23 = load i64, i64* %RBP
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 1
  store i64 %25, i64* %PC
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %27 = load i64, i64* %26, align 8, !tbaa !2428
  %28 = add i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %23, i64* %29
  store i64 %28, i64* %26, align 8, !tbaa !2428
  %30 = load i64, i64* %RSP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 3
  store i64 %32, i64* %PC
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = sub i64 %33, 2900
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @ext_6208a0_clock(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 8
  store i64 %48, i64* %PC
  %49 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 8) to double*)
  %50 = bitcast i8* %46 to double*
  store double %49, double* %50, align 1, !tbaa !2452
  %51 = getelementptr inbounds i8, i8* %46, i64 8
  %52 = bitcast i8* %51 to double*
  store double 0.000000e+00, double* %52, align 1, !tbaa !2452
  %53 = load i64, i64* %RAX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 8
  store i64 %55, i64* %PC
  store i64 %53, i64* bitcast (%end_time_type* @end_time to i64*)
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 8
  store i64 %57, i64* %PC
  %58 = load i64, i64* bitcast (%end_time_type* @end_time to i64*)
  store i64 %58, i64* %RAX, align 8, !tbaa !2428
  %59 = load i64, i64* %RAX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 8
  store i64 %61, i64* %PC
  %62 = load i64, i64* bitcast (%start_time_type* @start_time to i64*)
  %63 = sub i64 %59, %62
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = icmp ugt i64 %62, %59
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %65, i8* %66, align 1, !tbaa !2433
  %67 = trunc i64 %63 to i32
  %68 = and i32 %67, 255
  %69 = call i32 @llvm.ctpop.i32(i32 %68) #16
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !2447
  %74 = xor i64 %62, %59
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = icmp eq i64 %63, 0
  %81 = zext i1 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %63, 63
  %84 = trunc i64 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %84, i8* %85, align 1, !tbaa !2450
  %86 = lshr i64 %59, 63
  %87 = lshr i64 %62, 63
  %88 = xor i64 %87, %86
  %89 = xor i64 %83, %86
  %90 = add nuw nsw i64 %89, %88
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2451
  %94 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %95 = load i64, i64* %RAX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  %98 = sitofp i64 %95 to double
  %99 = bitcast i8* %94 to double*
  store double %98, double* %99, align 1, !tbaa !2452
  %100 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %101 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %102 = bitcast %union.vec128_t* %XMM0 to i8*
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = bitcast i8* %101 to double*
  %106 = load double, double* %105, align 1
  %107 = getelementptr inbounds i8, i8* %101, i64 8
  %108 = bitcast i8* %107 to i64*
  %109 = load i64, i64* %108, align 1
  %110 = bitcast i8* %102 to double*
  %111 = load double, double* %110, align 1
  %112 = fdiv double %106, %111
  %113 = bitcast i8* %100 to double*
  store double %112, double* %113, align 1, !tbaa !2452
  %114 = getelementptr inbounds i8, i8* %100, i64 8
  %115 = bitcast i8* %114 to i64*
  store i64 %109, i64* %115, align 1, !tbaa !2452
  %116 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %117 = bitcast %union.vec128_t* %XMM1 to i8*
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 3
  store i64 %119, i64* %PC
  %120 = bitcast i8* %117 to <2 x i32>*
  %121 = load <2 x i32>, <2 x i32>* %120, align 1
  %122 = getelementptr inbounds i8, i8* %117, i64 8
  %123 = bitcast i8* %122 to <2 x i32>*
  %124 = load <2 x i32>, <2 x i32>* %123, align 1
  %125 = extractelement <2 x i32> %121, i32 0
  %126 = bitcast i8* %116 to i32*
  store i32 %125, i32* %126, align 1, !tbaa !2454
  %127 = extractelement <2 x i32> %121, i32 1
  %128 = getelementptr inbounds i8, i8* %116, i64 4
  %129 = bitcast i8* %128 to i32*
  store i32 %127, i32* %129, align 1, !tbaa !2454
  %130 = extractelement <2 x i32> %124, i32 0
  %131 = getelementptr inbounds i8, i8* %116, i64 8
  %132 = bitcast i8* %131 to i32*
  store i32 %130, i32* %132, align 1, !tbaa !2454
  %133 = extractelement <2 x i32> %124, i32 1
  %134 = getelementptr inbounds i8, i8* %116, i64 12
  %135 = bitcast i8* %134 to i32*
  store i32 %133, i32* %135, align 1, !tbaa !2454
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 1
  store i64 %137, i64* %PC
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %139 = load i64, i64* %138, align 8, !tbaa !2428
  %140 = add i64 %139, 8
  %141 = inttoptr i64 %139 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %RBP, align 8, !tbaa !2428
  store i64 %140, i64* %138, align 8, !tbaa !2428
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 1
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %147 = load i64, i64* %146, align 8, !tbaa !2428
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %145, align 8, !tbaa !2428
  %150 = add i64 %147, 8
  store i64 %150, i64* %146, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_406410__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406410:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %27 to %union.vec128_t*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = sub i64 %38, 48
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 48
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2433
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #16
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2447
  %52 = xor i64 48, %38
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2450
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2451
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 16
  %72 = bitcast %union.vec128_t* %XMM0 to i8*
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = bitcast i8* %72 to double*
  %76 = load double, double* %75, align 1
  %77 = inttoptr i64 %71 to double*
  store double %76, double* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 24
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 32
  %86 = load i64, i64* %RSI
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %85 to i64*
  store i64 %86, i64* %89
  br label %block_406425

block_406425:                                     ; preds = %block_406433, %block_406410
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_406410 ], [ %215, %block_406433 ]
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 24
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = inttoptr i64 %98 to i64*
  %102 = load i64, i64* %101
  %103 = sub i64 %96, %102
  %104 = icmp ugt i64 %102, %96
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %105, i8* %106, align 1, !tbaa !2433
  %107 = trunc i64 %103 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %112, i8* %113, align 1, !tbaa !2447
  %114 = xor i64 %102, %96
  %115 = xor i64 %114, %103
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %118, i8* %119, align 1, !tbaa !2448
  %120 = icmp eq i64 %103, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2449
  %123 = lshr i64 %103, 63
  %124 = trunc i64 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2450
  %126 = lshr i64 %96, 63
  %127 = lshr i64 %102, 63
  %128 = xor i64 %127, %126
  %129 = xor i64 %123, %126
  %130 = add nuw nsw i64 %129, %128
  %131 = icmp eq i64 %130, 2
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %132, i8* %133, align 1, !tbaa !2451
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 51
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 6
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 6
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %141 = load i8, i8* %140, align 1, !tbaa !2449
  store i8 %141, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %143 = icmp ne i8 %141, 0
  %144 = select i1 %143, i64 %135, i64 %137
  store i64 %144, i64* %142, align 8, !tbaa !2428
  %145 = load i8, i8* %BRANCH_TAKEN
  %146 = icmp eq i8 %145, 1
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 16
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 4
  store i64 %150, i64* %PC
  br i1 %146, label %block_406460, label %block_406433

block_406433:                                     ; preds = %block_406425
  store i64 %148, i64* %RDI, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 24
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = load i64, i64* %RAX
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 3
  store i64 %159, i64* %PC
  store i64 %157, i64* %RCX, align 8, !tbaa !2428
  %160 = load i64, i64* %RCX
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = add i64 8, %160
  store i64 %163, i64* %RCX, align 8, !tbaa !2428
  %164 = icmp ult i64 %163, %160
  %165 = icmp ult i64 %163, 8
  %166 = or i1 %164, %165
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %167, i8* %168, align 1, !tbaa !2433
  %169 = trunc i64 %163 to i32
  %170 = and i32 %169, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #16
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2447
  %176 = xor i64 8, %160
  %177 = xor i64 %176, %163
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %180, i8* %181, align 1, !tbaa !2448
  %182 = icmp eq i64 %163, 0
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %183, i8* %184, align 1, !tbaa !2449
  %185 = lshr i64 %163, 63
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %186, i8* %187, align 1, !tbaa !2450
  %188 = lshr i64 %160, 63
  %189 = xor i64 %185, %188
  %190 = add nuw nsw i64 %189, %185
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %192, i8* %193, align 1, !tbaa !2451
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 24
  %196 = load i64, i64* %RCX
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC
  %199 = inttoptr i64 %195 to i64*
  store i64 %196, i64* %199
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 3
  store i64 %202, i64* %PC
  store i64 %200, i64* %RSI, align 8, !tbaa !2428
  %203 = load i64, i64* %PC
  %204 = sub i64 %203, 409
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 5
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %210 = load i64, i64* %209, align 8, !tbaa !2428
  %211 = add i64 %210, -8
  %212 = inttoptr i64 %211 to i64*
  store i64 %206, i64* %212
  store i64 %211, i64* %209, align 8, !tbaa !2428
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %204, i64* %213, align 8, !tbaa !2428
  %214 = load i64, i64* %PC
  %215 = call %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* %0, i64 %214, %struct.Memory* %MEMORY.0)
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 40
  %218 = bitcast %union.vec128_t* %XMM0 to i8*
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 5
  store i64 %220, i64* %PC
  %221 = bitcast i8* %218 to double*
  %222 = load double, double* %221, align 1
  %223 = inttoptr i64 %217 to double*
  store double %222, double* %223
  %224 = load i64, i64* %RBP
  %225 = sub i64 %224, 40
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 16
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %231 to i64*
  store i64 %232, i64* %235
  %236 = load i64, i64* %PC
  %237 = sub i64 %236, 54
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 5
  store i64 %239, i64* %PC
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %237, i64* %240, align 8, !tbaa !2428
  br label %block_406425

block_406460:                                     ; preds = %block_406425
  %241 = inttoptr i64 %148 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %RAX, align 8, !tbaa !2428
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 8
  %245 = load i64, i64* %RAX
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC
  %248 = inttoptr i64 %244 to i64*
  store i64 %245, i64* %248
  %249 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 5
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to double*
  %255 = load double, double* %254
  %256 = bitcast i8* %249 to double*
  store double %255, double* %256, align 1, !tbaa !2452
  %257 = getelementptr inbounds i8, i8* %249, i64 8
  %258 = bitcast i8* %257 to double*
  store double 0.000000e+00, double* %258, align 1, !tbaa !2452
  %259 = load i64, i64* %RSP
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 48, %259
  store i64 %262, i64* %RSP, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 48
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2447
  %275 = xor i64 48, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %296 = load i64, i64* %295, align 8, !tbaa !2428
  %297 = add i64 %296, 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RBP, align 8, !tbaa !2428
  store i64 %297, i64* %295, align 8, !tbaa !2428
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 1
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = inttoptr i64 %304 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %302, align 8, !tbaa !2428
  %307 = add i64 %304, 8
  store i64 %307, i64* %303, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4036e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 32
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 32
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 32, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 56
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_403730__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 33
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2449
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_403720, label %block_403705

block_403705:                                     ; preds = %block_4036e0
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 10
  store i64 %139, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RSI, align 8, !tbaa !2428
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 2
  store i64 %145, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %146 = load i64, i64* %PC
  %147 = sub i64 %146, 12328
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 5
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %153 = load i64, i64* %152, align 8, !tbaa !2428
  %154 = add i64 %153, -8
  %155 = inttoptr i64 %154 to i64*
  store i64 %149, i64* %155
  store i64 %154, i64* %152, align 8, !tbaa !2428
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %147, i64* %156, align 8, !tbaa !2428
  %157 = load i64, i64* %PC
  %158 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %157, %struct.Memory* %103)
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 20
  %161 = load i32, i32* %EAX
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %160 to i32*
  store i32 %161, i32* %165
  br label %block_403720

block_403720:                                     ; preds = %block_403705, %block_4036e0
  %MEMORY.0 = phi %struct.Memory* [ %103, %block_4036e0 ], [ %158, %block_403705 ]
  %166 = load i64, i64* %RSP
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = add i64 32, %166
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  %170 = icmp ult i64 %169, %166
  %171 = icmp ult i64 %169, 32
  %172 = or i1 %170, %171
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %173, i8* %174, align 1, !tbaa !2433
  %175 = trunc i64 %169 to i32
  %176 = and i32 %175, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2447
  %182 = xor i64 32, %166
  %183 = xor i64 %182, %169
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %186, i8* %187, align 1, !tbaa !2448
  %188 = icmp eq i64 %169, 0
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %189, i8* %190, align 1, !tbaa !2449
  %191 = lshr i64 %169, 63
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %192, i8* %193, align 1, !tbaa !2450
  %194 = lshr i64 %166, 63
  %195 = xor i64 %191, %194
  %196 = add nuw nsw i64 %195, %191
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %198, i8* %199, align 1, !tbaa !2451
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009b0___cxx_global_var_init_17(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%dMPe_type* @dMPe to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4682
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403cd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, 8
  %50 = inttoptr i64 %48 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 1
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %56 = load i64, i64* %55, align 8, !tbaa !2428
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %54, align 8, !tbaa !2428
  %59 = add i64 %56, 8
  store i64 %59, i64* %55, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403970:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 9
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ESI = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 5
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RCX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 9
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 15
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RBP = bitcast %union.anon* %33 to i64*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 48
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 48
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2433
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #16
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = xor i64 48, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2451
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 8
  %78 = load i64, i64* %RDI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RSI
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 24
  %90 = load i64, i64* %RDX
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %89 to i64*
  store i64 %90, i64* %93
  br label %block_403984

block_40399e:                                     ; preds = %block_403984
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RSI
  %99 = load i32, i32* %ESI
  %100 = zext i32 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 2
  store i64 %102, i64* %PC
  %103 = xor i64 %100, %98
  %104 = trunc i64 %103 to i32
  %105 = and i64 %103, 4294967295
  store i64 %105, i64* %RSI, align 8, !tbaa !2428
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %106, align 1, !tbaa !2433
  %107 = and i32 %104, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = icmp eq i32 %104, 0
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i32 %104, 31
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %117, i8* %118, align 1, !tbaa !2450
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %119, align 1, !tbaa !2451
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %120, align 1, !tbaa !2448
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 700
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 5
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 5
  store i64 %126, i64* %PC
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %128 = load i64, i64* %127, align 8, !tbaa !2428
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %124, i64* %130
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %131, align 8, !tbaa !2428
  %132 = load i64, i64* %PC
  %133 = call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %132, %struct.Memory* %321)
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 32
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 32
  %140 = load i64, i64* %RAX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 799
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 5
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 5
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %151 = load i64, i64* %150, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %147, i64* %153
  store i64 %152, i64* %150, align 8, !tbaa !2428
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %145, i64* %154, align 8, !tbaa !2428
  %155 = load i64, i64* %PC
  %156 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %155, %struct.Memory* %133)
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 24
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  store i64 %158, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %RSI
  %162 = load i32, i32* %ESI
  %163 = zext i32 %162 to i64
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 2
  store i64 %165, i64* %PC
  %166 = xor i64 %163, %161
  %167 = trunc i64 %166 to i32
  %168 = and i64 %166, 4294967295
  store i64 %168, i64* %RSI, align 8, !tbaa !2428
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %169, align 1, !tbaa !2433
  %170 = and i32 %167, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #16
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2447
  %176 = icmp eq i32 %167, 0
  %177 = zext i1 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i32 %167, 31
  %180 = trunc i32 %179 to i8
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %180, i8* %181, align 1, !tbaa !2450
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %182, align 1, !tbaa !2451
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %183, align 1, !tbaa !2448
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 48
  %186 = load i64, i64* %RAX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %185 to i64*
  store i64 %186, i64* %189
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 672
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 5
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 5
  store i64 %195, i64* %PC
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %197 = load i64, i64* %196, align 8, !tbaa !2428
  %198 = add i64 %197, -8
  %199 = inttoptr i64 %198 to i64*
  store i64 %193, i64* %199
  store i64 %198, i64* %196, align 8, !tbaa !2428
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %191, i64* %200, align 8, !tbaa !2428
  %201 = load i64, i64* %PC
  %202 = call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %201, %struct.Memory* %156)
  %203 = load i64, i64* %RBP
  %204 = sub i64 %203, 40
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  store i64 %204, i64* %RDI, align 8, !tbaa !2428
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 40
  %209 = load i64, i64* %RAX
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 4
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 771
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 5
  store i64 %218, i64* %PC
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %220 = load i64, i64* %219, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %216, i64* %222
  store i64 %221, i64* %219, align 8, !tbaa !2428
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %223, align 8, !tbaa !2428
  %224 = load i64, i64* %PC
  %225 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %224, %struct.Memory* %202)
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 48
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %RDI, align 8, !tbaa !2428
  %232 = load i64, i64* %RDI
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RCX, align 8, !tbaa !2428
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %RCX
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC
  %241 = inttoptr i64 %237 to i64*
  store i64 %238, i64* %241
  %242 = load i64, i64* %PC
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 5
  store i64 %245, i64* %PC
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %243, i64* %246, align 8, !tbaa !2428
  br label %block_403984

block_403999:                                     ; preds = %block_403984
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 72
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 5
  store i64 %250, i64* %PC
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %248, i64* %251, align 8, !tbaa !2428
  %252 = load i64, i64* %RSP
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  %255 = add i64 48, %252
  store i64 %255, i64* %RSP, align 8, !tbaa !2428
  %256 = icmp ult i64 %255, %252
  %257 = icmp ult i64 %255, 48
  %258 = or i1 %256, %257
  %259 = zext i1 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %259, i8* %260, align 1, !tbaa !2433
  %261 = trunc i64 %255 to i32
  %262 = and i32 %261, 255
  %263 = call i32 @llvm.ctpop.i32(i32 %262) #16
  %264 = trunc i32 %263 to i8
  %265 = and i8 %264, 1
  %266 = xor i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = xor i64 48, %252
  %269 = xor i64 %268, %255
  %270 = lshr i64 %269, 4
  %271 = trunc i64 %270 to i8
  %272 = and i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = icmp eq i64 %255, 0
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %275, i8* %276, align 1, !tbaa !2449
  %277 = lshr i64 %255, 63
  %278 = trunc i64 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = lshr i64 %252, 63
  %281 = xor i64 %277, %280
  %282 = add nuw nsw i64 %281, %277
  %283 = icmp eq i64 %282, 2
  %284 = zext i1 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %284, i8* %285, align 1, !tbaa !2451
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 1
  store i64 %287, i64* %PC
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %289 = load i64, i64* %288, align 8, !tbaa !2428
  %290 = add i64 %289, 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RBP, align 8, !tbaa !2428
  store i64 %290, i64* %288, align 8, !tbaa !2428
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %295, align 8, !tbaa !2428
  %300 = add i64 %297, 8
  store i64 %300, i64* %296, align 8, !tbaa !2428
  ret %struct.Memory* %321

block_403984:                                     ; preds = %block_40399e, %block_403970
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_403970 ], [ %225, %block_40399e ]
  %301 = load i64, i64* %RBP
  %302 = sub i64 %301, 8
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC
  store i64 %302, i64* %RDI, align 8, !tbaa !2428
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 16
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 4
  store i64 %308, i64* %PC
  store i64 %306, i64* %RSI, align 8, !tbaa !2428
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 788
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 5
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 5
  store i64 %314, i64* %PC
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %316 = load i64, i64* %315, align 8, !tbaa !2428
  %317 = add i64 %316, -8
  %318 = inttoptr i64 %317 to i64*
  store i64 %312, i64* %318
  store i64 %317, i64* %315, align 8, !tbaa !2428
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %310, i64* %319, align 8, !tbaa !2428
  %320 = load i64, i64* %PC
  %321 = call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %320, %struct.Memory* %MEMORY.0)
  %322 = load i8, i8* %AL
  %323 = zext i8 %322 to i64
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 2
  store i64 %325, i64* %PC
  %326 = and i64 1, %323
  %327 = trunc i64 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %328, align 1, !tbaa !2433
  %329 = trunc i64 %326 to i32
  %330 = and i32 %329, 255
  %331 = call i32 @llvm.ctpop.i32(i32 %330) #16
  %332 = trunc i32 %331 to i8
  %333 = and i8 %332, 1
  %334 = xor i8 %333, 1
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %334, i8* %335, align 1, !tbaa !2447
  %336 = icmp eq i8 %327, 0
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %337, i8* %338, align 1, !tbaa !2449
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %339, align 1, !tbaa !2450
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %340, align 1, !tbaa !2451
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %341, align 1, !tbaa !2448
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 11
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 6
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 6
  store i64 %347, i64* %PC
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %349 = load i8, i8* %348, align 1, !tbaa !2449
  %350 = icmp eq i8 %349, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %353 = select i1 %350, i64 %343, i64 %345
  store i64 %353, i64* %352, align 8, !tbaa !2428
  %354 = load i8, i8* %BRANCH_TAKEN
  %355 = icmp eq i8 %354, 1
  br i1 %355, label %block_40399e, label %block_403999
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401cf0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401d10__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_4031f0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4031f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_403220__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405010:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RCX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = sub i64 %38, 48
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 48
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2433
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #16
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2447
  %52 = xor i64 48, %38
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2450
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2451
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 8
  %72 = load i64, i64* %RDI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %RSI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 8
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92
  store i64 %93, i64* %RDI, align 8, !tbaa !2428
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %RDI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = sub i64 %94, %95
  store i64 %98, i64* %RSI, align 8, !tbaa !2428
  %99 = icmp ult i64 %94, %95
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %98 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 %95, %94
  %110 = xor i64 %109, %98
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %98, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %98, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %94, 63
  %122 = lshr i64 %95, 63
  %123 = xor i64 %122, %121
  %124 = xor i64 %118, %121
  %125 = add nuw nsw i64 %124, %123
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %127, i8* %128, align 1, !tbaa !2451
  %129 = load i64, i64* %RSI
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = ashr i64 %129, 2
  %133 = trunc i64 %132 to i8
  %134 = and i8 %133, 1
  %135 = ashr i64 %132, 1
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %134, i8* %136, align 1, !tbaa !2432
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %138 = trunc i64 %135 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  store i8 %143, i8* %137, align 1, !tbaa !2432
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %144, align 1, !tbaa !2432
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %146 = icmp eq i64 %135, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %145, align 1, !tbaa !2432
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %149 = lshr i64 %135, 63
  %150 = trunc i64 %149 to i8
  store i8 %150, i8* %148, align 1, !tbaa !2432
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %151, align 1, !tbaa !2432
  %152 = load i64, i64* %RSI
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = sub i64 %152, 1
  %156 = icmp ult i64 %152, 1
  %157 = zext i1 %156 to i8
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %157, i8* %158, align 1, !tbaa !2433
  %159 = trunc i64 %155 to i32
  %160 = and i32 %159, 255
  %161 = call i32 @llvm.ctpop.i32(i32 %160) #16
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  %164 = xor i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %164, i8* %165, align 1, !tbaa !2447
  %166 = xor i64 1, %152
  %167 = xor i64 %166, %155
  %168 = lshr i64 %167, 4
  %169 = trunc i64 %168 to i8
  %170 = and i8 %169, 1
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %170, i8* %171, align 1, !tbaa !2448
  %172 = icmp eq i64 %155, 0
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %173, i8* %174, align 1, !tbaa !2449
  %175 = lshr i64 %155, 63
  %176 = trunc i64 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %176, i8* %177, align 1, !tbaa !2450
  %178 = lshr i64 %152, 63
  %179 = xor i64 %175, %178
  %180 = add nuw nsw i64 %179, %178
  %181 = icmp eq i64 %180, 2
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %182, i8* %183, align 1, !tbaa !2451
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 247
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 6
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 6
  store i64 %189, i64* %PC
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %191 = load i8, i8* %190, align 1, !tbaa !2449
  %192 = icmp ne i8 %191, 0
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %194 = load i8, i8* %193, align 1, !tbaa !2450
  %195 = icmp ne i8 %194, 0
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %197 = load i8, i8* %196, align 1, !tbaa !2451
  %198 = icmp ne i8 %197, 0
  %199 = xor i1 %195, %198
  %200 = or i1 %192, %199
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %203 = select i1 %200, i64 %185, i64 %187
  store i64 %203, i64* %202, align 8, !tbaa !2428
  %204 = load i8, i8* %BRANCH_TAKEN
  %205 = icmp eq i8 %204, 1
  br i1 %205, label %block_40512a, label %block_405039

block_4050d9:                                     ; preds = %block_4050b0
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = load i64, i64* %RAX
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 3
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 48
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 4
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 32
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 40
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 4
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233
  store i64 %234, i64* %RCX, align 8, !tbaa !2428
  %235 = load i64, i64* %RAX
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i64*
  %239 = load i64, i64* %238
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = load i64, i64* %RCX
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 3
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %240 to i64*
  store i64 %241, i64* %244
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 32
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 48
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %RCX
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 3
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %257 to i64*
  store i64 %258, i64* %261
  %262 = load i64, i64* %PC
  %263 = sub i64 %262, 169
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  store i64 %265, i64* %PC
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %263, i64* %266, align 8, !tbaa !2428
  br label %block_405054

block_405059:                                     ; preds = %block_405054, %block_40507e
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_405054 ], [ %333, %block_40507e ]
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 24
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  store i64 %268, i64* %RDI, align 8, !tbaa !2428
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 40
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = load i64, i64* %RAX
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 4
  store i64 %279, i64* %PC
  %280 = add i64 -8, %277
  store i64 %280, i64* %RAX, align 8, !tbaa !2428
  %281 = icmp ult i64 %280, %277
  %282 = icmp ult i64 %280, -8
  %283 = or i1 %281, %282
  %284 = zext i1 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %284, i8* %285, align 1, !tbaa !2433
  %286 = trunc i64 %280 to i32
  %287 = and i32 %286, 255
  %288 = call i32 @llvm.ctpop.i32(i32 %287) #16
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %291, i8* %292, align 1, !tbaa !2447
  %293 = xor i64 -8, %277
  %294 = xor i64 %293, %280
  %295 = lshr i64 %294, 4
  %296 = trunc i64 %295 to i8
  %297 = and i8 %296, 1
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %297, i8* %298, align 1, !tbaa !2448
  %299 = icmp eq i64 %280, 0
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %300, i8* %301, align 1, !tbaa !2449
  %302 = lshr i64 %280, 63
  %303 = trunc i64 %302 to i8
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %303, i8* %304, align 1, !tbaa !2450
  %305 = lshr i64 %277, 63
  %306 = xor i64 %302, %305
  %307 = xor i64 %302, 1
  %308 = add nuw nsw i64 %306, %307
  %309 = icmp eq i64 %308, 2
  %310 = zext i1 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %310, i8* %311, align 1, !tbaa !2451
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %RAX
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  store i64 %318, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = sub i64 %321, 8140
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %332, %struct.Memory* %MEMORY.0)
  %334 = load i8, i8* %AL
  %335 = zext i8 %334 to i64
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 2
  store i64 %337, i64* %PC
  %338 = and i64 1, %335
  %339 = trunc i64 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %340, align 1, !tbaa !2433
  %341 = trunc i64 %338 to i32
  %342 = and i32 %341, 255
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #16
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %346, i8* %347, align 1, !tbaa !2447
  %348 = icmp eq i8 %339, 0
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %352, align 1, !tbaa !2451
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %353, align 1, !tbaa !2448
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 11
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 6
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 6
  store i64 %359, i64* %PC
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %361 = load i8, i8* %360, align 1, !tbaa !2449
  %362 = icmp eq i8 %361, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %365 = select i1 %362, i64 %355, i64 %357
  store i64 %365, i64* %364, align 8, !tbaa !2428
  %366 = load i8, i8* %BRANCH_TAKEN
  %367 = icmp eq i8 %366, 1
  %368 = load i64, i64* %PC
  br i1 %367, label %block_40507e, label %block_405079

block_405096:                                     ; preds = %block_405079
  %369 = add i64 %656, 5
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 5
  store i64 %371, i64* %PC
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %369, i64* %372, align 8, !tbaa !2428
  br label %block_40509b

block_4050d4:                                     ; preds = %block_4050b0
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 46
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 5
  store i64 %376, i64* %PC
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %374, i64* %377, align 8, !tbaa !2428
  br label %block_405102

block_405039:                                     ; preds = %block_405010
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 8
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 4
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i64*
  %383 = load i64, i64* %382
  store i64 %383, i64* %RAX, align 8, !tbaa !2428
  %384 = load i64, i64* %RAX
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 3
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i64*
  %388 = load i64, i64* %387
  store i64 %388, i64* %RAX, align 8, !tbaa !2428
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 24
  %391 = load i64, i64* %RAX
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %390 to i64*
  store i64 %391, i64* %394
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 8
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i64*
  %400 = load i64, i64* %399
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = load i64, i64* %RBP
  %402 = sub i64 %401, 32
  %403 = load i64, i64* %RAX
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %402 to i64*
  store i64 %403, i64* %406
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 16
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 4
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to i64*
  %412 = load i64, i64* %411
  store i64 %412, i64* %RAX, align 8, !tbaa !2428
  %413 = load i64, i64* %RBP
  %414 = sub i64 %413, 40
  %415 = load i64, i64* %RAX
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 4
  store i64 %417, i64* %PC
  %418 = inttoptr i64 %414 to i64*
  store i64 %415, i64* %418
  br label %block_405054

block_4050b0:                                     ; preds = %block_40509b
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 22
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 5
  store i64 %422, i64* %PC
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %420, i64* %423, align 8, !tbaa !2428
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 32
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 4
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %425 to i64*
  %429 = load i64, i64* %428
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = load i64, i64* %RAX
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 40
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 4
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %432 to i64*
  %436 = load i64, i64* %435
  %437 = sub i64 %430, %436
  %438 = icmp ugt i64 %436, %430
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %439, i8* %440, align 1, !tbaa !2433
  %441 = trunc i64 %437 to i32
  %442 = and i32 %441, 255
  %443 = call i32 @llvm.ctpop.i32(i32 %442) #16
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %446, i8* %447, align 1, !tbaa !2447
  %448 = xor i64 %436, %430
  %449 = xor i64 %448, %437
  %450 = lshr i64 %449, 4
  %451 = trunc i64 %450 to i8
  %452 = and i8 %451, 1
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %452, i8* %453, align 1, !tbaa !2448
  %454 = icmp eq i64 %437, 0
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %455, i8* %456, align 1, !tbaa !2449
  %457 = lshr i64 %437, 63
  %458 = trunc i64 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %458, i8* %459, align 1, !tbaa !2450
  %460 = lshr i64 %430, 63
  %461 = lshr i64 %436, 63
  %462 = xor i64 %461, %460
  %463 = xor i64 %457, %460
  %464 = add nuw nsw i64 %463, %462
  %465 = icmp eq i64 %464, 2
  %466 = zext i1 %465 to i8
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %466, i8* %467, align 1, !tbaa !2451
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 11
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 6
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 6
  store i64 %473, i64* %PC
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %475 = load i8, i8* %474, align 1, !tbaa !2433
  store i8 %475, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %477 = icmp ne i8 %475, 0
  %478 = select i1 %477, i64 %469, i64 %471
  store i64 %478, i64* %476, align 8, !tbaa !2428
  %479 = load i8, i8* %BRANCH_TAKEN
  %480 = icmp eq i8 %479, 1
  br i1 %480, label %block_4050d9, label %block_4050d4

block_40507e:                                     ; preds = %block_405059
  %481 = sub i64 %368, 37
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 5
  store i64 %483, i64* %PC
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %481, i64* %484, align 8, !tbaa !2428
  br label %block_405059

block_405091:                                     ; preds = %block_405079
  %485 = add i64 %656, 113
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 5
  store i64 %487, i64* %PC
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %485, i64* %488, align 8, !tbaa !2428
  br label %block_405102

block_40512a:                                     ; preds = %block_405102, %block_405010
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_405010 ], [ %831, %block_405102 ]
  %489 = load i64, i64* %RSP
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = add i64 48, %489
  store i64 %492, i64* %RSP, align 8, !tbaa !2428
  %493 = icmp ult i64 %492, %489
  %494 = icmp ult i64 %492, 48
  %495 = or i1 %493, %494
  %496 = zext i1 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %496, i8* %497, align 1, !tbaa !2433
  %498 = trunc i64 %492 to i32
  %499 = and i32 %498, 255
  %500 = call i32 @llvm.ctpop.i32(i32 %499) #16
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = xor i8 %502, 1
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %503, i8* %504, align 1, !tbaa !2447
  %505 = xor i64 48, %489
  %506 = xor i64 %505, %492
  %507 = lshr i64 %506, 4
  %508 = trunc i64 %507 to i8
  %509 = and i8 %508, 1
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %509, i8* %510, align 1, !tbaa !2448
  %511 = icmp eq i64 %492, 0
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %512, i8* %513, align 1, !tbaa !2449
  %514 = lshr i64 %492, 63
  %515 = trunc i64 %514 to i8
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %515, i8* %516, align 1, !tbaa !2450
  %517 = lshr i64 %489, 63
  %518 = xor i64 %514, %517
  %519 = add nuw nsw i64 %518, %514
  %520 = icmp eq i64 %519, 2
  %521 = zext i1 %520 to i8
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %521, i8* %522, align 1, !tbaa !2451
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 1
  store i64 %524, i64* %PC
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %526 = load i64, i64* %525, align 8, !tbaa !2428
  %527 = add i64 %526, 8
  %528 = inttoptr i64 %526 to i64*
  %529 = load i64, i64* %528
  store i64 %529, i64* %RBP, align 8, !tbaa !2428
  store i64 %527, i64* %525, align 8, !tbaa !2428
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 1
  store i64 %531, i64* %PC
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %534 = load i64, i64* %533, align 8, !tbaa !2428
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  store i64 %536, i64* %532, align 8, !tbaa !2428
  %537 = add i64 %534, 8
  store i64 %537, i64* %533, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40509b:                                     ; preds = %block_4050b5, %block_405096
  %MEMORY.2 = phi %struct.Memory* [ %333, %block_405096 ], [ %560, %block_4050b5 ]
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 24
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  store i64 %539, i64* %RSI, align 8, !tbaa !2428
  %542 = load i64, i64* %RBP
  %543 = sub i64 %542, 32
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC
  %546 = inttoptr i64 %543 to i64*
  %547 = load i64, i64* %546
  store i64 %547, i64* %RDI, align 8, !tbaa !2428
  %548 = load i64, i64* %PC
  %549 = sub i64 %548, 8195
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 5
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 5
  store i64 %553, i64* %PC
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %555 = load i64, i64* %554, align 8, !tbaa !2428
  %556 = add i64 %555, -8
  %557 = inttoptr i64 %556 to i64*
  store i64 %551, i64* %557
  store i64 %556, i64* %554, align 8, !tbaa !2428
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %549, i64* %558, align 8, !tbaa !2428
  %559 = load i64, i64* %PC
  %560 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %559, %struct.Memory* %MEMORY.2)
  %561 = load i8, i8* %AL
  %562 = zext i8 %561 to i64
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 2
  store i64 %564, i64* %PC
  %565 = and i64 1, %562
  %566 = trunc i64 %565 to i8
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %567, align 1, !tbaa !2433
  %568 = trunc i64 %565 to i32
  %569 = and i32 %568, 255
  %570 = call i32 @llvm.ctpop.i32(i32 %569) #16
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = xor i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i8 %566, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2449
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %578, align 1, !tbaa !2450
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %579, align 1, !tbaa !2451
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %580, align 1, !tbaa !2448
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 11
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 6
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 6
  store i64 %586, i64* %PC
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %588 = load i8, i8* %587, align 1, !tbaa !2449
  %589 = icmp eq i8 %588, 0
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %592 = select i1 %589, i64 %582, i64 %584
  store i64 %592, i64* %591, align 8, !tbaa !2428
  %593 = load i8, i8* %BRANCH_TAKEN
  %594 = icmp eq i8 %593, 1
  br i1 %594, label %block_4050b5, label %block_4050b0

block_405079:                                     ; preds = %block_405059
  %595 = add i64 %368, 10
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 5
  store i64 %597, i64* %PC
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %595, i64* %598, align 8, !tbaa !2428
  %599 = load i64, i64* %RBP
  %600 = sub i64 %599, 32
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %600 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %RAX, align 8, !tbaa !2428
  %605 = load i64, i64* %RAX
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  %610 = inttoptr i64 %607 to i64*
  %611 = load i64, i64* %610
  %612 = sub i64 %605, %611
  %613 = icmp ugt i64 %611, %605
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %614, i8* %615, align 1, !tbaa !2433
  %616 = trunc i64 %612 to i32
  %617 = and i32 %616, 255
  %618 = call i32 @llvm.ctpop.i32(i32 %617) #16
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %621, i8* %622, align 1, !tbaa !2447
  %623 = xor i64 %611, %605
  %624 = xor i64 %623, %612
  %625 = lshr i64 %624, 4
  %626 = trunc i64 %625 to i8
  %627 = and i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %627, i8* %628, align 1, !tbaa !2448
  %629 = icmp eq i64 %612, 0
  %630 = zext i1 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %630, i8* %631, align 1, !tbaa !2449
  %632 = lshr i64 %612, 63
  %633 = trunc i64 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %633, i8* %634, align 1, !tbaa !2450
  %635 = lshr i64 %605, 63
  %636 = lshr i64 %611, 63
  %637 = xor i64 %636, %635
  %638 = xor i64 %632, %635
  %639 = add nuw nsw i64 %638, %637
  %640 = icmp eq i64 %639, 2
  %641 = zext i1 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %641, i8* %642, align 1, !tbaa !2451
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 11
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 6
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 6
  store i64 %648, i64* %PC
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %650 = load i8, i8* %649, align 1, !tbaa !2433
  store i8 %650, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %652 = icmp ne i8 %650, 0
  %653 = select i1 %652, i64 %644, i64 %646
  store i64 %653, i64* %651, align 8, !tbaa !2428
  %654 = load i8, i8* %BRANCH_TAKEN
  %655 = icmp eq i8 %654, 1
  %656 = load i64, i64* %PC
  br i1 %655, label %block_405096, label %block_405091

block_4050b5:                                     ; preds = %block_40509b
  %657 = load i64, i64* %RBP
  %658 = sub i64 %657, 32
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 4
  store i64 %660, i64* %PC
  %661 = inttoptr i64 %658 to i64*
  %662 = load i64, i64* %661
  store i64 %662, i64* %RAX, align 8, !tbaa !2428
  %663 = load i64, i64* %RAX
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 4
  store i64 %665, i64* %PC
  %666 = add i64 8, %663
  store i64 %666, i64* %RAX, align 8, !tbaa !2428
  %667 = icmp ult i64 %666, %663
  %668 = icmp ult i64 %666, 8
  %669 = or i1 %667, %668
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %670, i8* %671, align 1, !tbaa !2433
  %672 = trunc i64 %666 to i32
  %673 = and i32 %672, 255
  %674 = call i32 @llvm.ctpop.i32(i32 %673) #16
  %675 = trunc i32 %674 to i8
  %676 = and i8 %675, 1
  %677 = xor i8 %676, 1
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %677, i8* %678, align 1, !tbaa !2447
  %679 = xor i64 8, %663
  %680 = xor i64 %679, %666
  %681 = lshr i64 %680, 4
  %682 = trunc i64 %681 to i8
  %683 = and i8 %682, 1
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %683, i8* %684, align 1, !tbaa !2448
  %685 = icmp eq i64 %666, 0
  %686 = zext i1 %685 to i8
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %686, i8* %687, align 1, !tbaa !2449
  %688 = lshr i64 %666, 63
  %689 = trunc i64 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %689, i8* %690, align 1, !tbaa !2450
  %691 = lshr i64 %663, 63
  %692 = xor i64 %688, %691
  %693 = add nuw nsw i64 %692, %688
  %694 = icmp eq i64 %693, 2
  %695 = zext i1 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %695, i8* %696, align 1, !tbaa !2451
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 32
  %699 = load i64, i64* %RAX
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %698 to i64*
  store i64 %699, i64* %702
  %703 = load i64, i64* %PC
  %704 = sub i64 %703, 38
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 5
  store i64 %706, i64* %PC
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %704, i64* %707, align 8, !tbaa !2428
  br label %block_40509b

block_405102:                                     ; preds = %block_405091, %block_4050d4
  %MEMORY.3 = phi %struct.Memory* [ %560, %block_4050d4 ], [ %333, %block_405091 ]
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 8
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 4
  store i64 %711, i64* %PC
  %712 = inttoptr i64 %709 to i64*
  %713 = load i64, i64* %712
  store i64 %713, i64* %RDI, align 8, !tbaa !2428
  %714 = load i64, i64* %RBP
  %715 = sub i64 %714, 40
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 4
  store i64 %717, i64* %PC
  %718 = inttoptr i64 %715 to i64*
  %719 = load i64, i64* %718
  store i64 %719, i64* %RAX, align 8, !tbaa !2428
  %720 = load i64, i64* %RAX
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 4
  store i64 %722, i64* %PC
  %723 = add i64 8, %720
  store i64 %723, i64* %RAX, align 8, !tbaa !2428
  %724 = icmp ult i64 %723, %720
  %725 = icmp ult i64 %723, 8
  %726 = or i1 %724, %725
  %727 = zext i1 %726 to i8
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %727, i8* %728, align 1, !tbaa !2433
  %729 = trunc i64 %723 to i32
  %730 = and i32 %729, 255
  %731 = call i32 @llvm.ctpop.i32(i32 %730) #16
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = xor i8 %733, 1
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %734, i8* %735, align 1, !tbaa !2447
  %736 = xor i64 8, %720
  %737 = xor i64 %736, %723
  %738 = lshr i64 %737, 4
  %739 = trunc i64 %738 to i8
  %740 = and i8 %739, 1
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %740, i8* %741, align 1, !tbaa !2448
  %742 = icmp eq i64 %723, 0
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %743, i8* %744, align 1, !tbaa !2449
  %745 = lshr i64 %723, 63
  %746 = trunc i64 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %746, i8* %747, align 1, !tbaa !2450
  %748 = lshr i64 %720, 63
  %749 = xor i64 %745, %748
  %750 = add nuw nsw i64 %749, %745
  %751 = icmp eq i64 %750, 2
  %752 = zext i1 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %752, i8* %753, align 1, !tbaa !2451
  %754 = load i64, i64* %RAX
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 3
  store i64 %756, i64* %PC
  store i64 %754, i64* %RSI, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  %758 = sub i64 %757, 257
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 5
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 5
  store i64 %762, i64* %PC
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %764 = load i64, i64* %763, align 8, !tbaa !2428
  %765 = add i64 %764, -8
  %766 = inttoptr i64 %765 to i64*
  store i64 %760, i64* %766
  store i64 %765, i64* %763, align 8, !tbaa !2428
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %758, i64* %767, align 8, !tbaa !2428
  %768 = load i64, i64* %PC
  %769 = call %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %768, %struct.Memory* %MEMORY.3)
  %770 = load i64, i64* %RBP
  %771 = sub i64 %770, 40
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 4
  store i64 %773, i64* %PC
  %774 = inttoptr i64 %771 to i64*
  %775 = load i64, i64* %774
  store i64 %775, i64* %RAX, align 8, !tbaa !2428
  %776 = load i64, i64* %RAX
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 4
  store i64 %778, i64* %PC
  %779 = add i64 8, %776
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = icmp ult i64 %779, %776
  %781 = icmp ult i64 %779, 8
  %782 = or i1 %780, %781
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %783, i8* %784, align 1, !tbaa !2433
  %785 = trunc i64 %779 to i32
  %786 = and i32 %785, 255
  %787 = call i32 @llvm.ctpop.i32(i32 %786) #16
  %788 = trunc i32 %787 to i8
  %789 = and i8 %788, 1
  %790 = xor i8 %789, 1
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %790, i8* %791, align 1, !tbaa !2447
  %792 = xor i64 8, %776
  %793 = xor i64 %792, %779
  %794 = lshr i64 %793, 4
  %795 = trunc i64 %794 to i8
  %796 = and i8 %795, 1
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %796, i8* %797, align 1, !tbaa !2448
  %798 = icmp eq i64 %779, 0
  %799 = zext i1 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %799, i8* %800, align 1, !tbaa !2449
  %801 = lshr i64 %779, 63
  %802 = trunc i64 %801 to i8
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %802, i8* %803, align 1, !tbaa !2450
  %804 = lshr i64 %776, 63
  %805 = xor i64 %801, %804
  %806 = add nuw nsw i64 %805, %801
  %807 = icmp eq i64 %806, 2
  %808 = zext i1 %807 to i8
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %808, i8* %809, align 1, !tbaa !2451
  %810 = load i64, i64* %RBP
  %811 = sub i64 %810, 16
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 4
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %811 to i64*
  %815 = load i64, i64* %814
  store i64 %815, i64* %RSI, align 8, !tbaa !2428
  %816 = load i64, i64* %RAX
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 3
  store i64 %818, i64* %PC
  store i64 %816, i64* %RDI, align 8, !tbaa !2428
  %819 = load i64, i64* %PC
  %820 = sub i64 %819, 277
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 5
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 5
  store i64 %824, i64* %PC
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %826 = load i64, i64* %825, align 8, !tbaa !2428
  %827 = add i64 %826, -8
  %828 = inttoptr i64 %827 to i64*
  store i64 %822, i64* %828
  store i64 %827, i64* %825, align 8, !tbaa !2428
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %820, i64* %829, align 8, !tbaa !2428
  %830 = load i64, i64* %PC
  %831 = call %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %830, %struct.Memory* %769)
  br label %block_40512a

block_405054:                                     ; preds = %block_405039, %block_4050d9
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_405039 ], [ %560, %block_4050d9 ]
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %833, i64* %836, align 8, !tbaa !2428
  br label %block_405059
}

; Function Attrs: noinline
define %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405df0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %26 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %25, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %26 to %"class.std::bitset"*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %32 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %31, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %32 to %union.vec128_t*
  %33 = load i64, i64* %RBP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !2428
  %38 = add i64 %37, -8
  %39 = inttoptr i64 %38 to i64*
  store i64 %33, i64* %39
  store i64 %38, i64* %36, align 8, !tbaa !2428
  %40 = load i64, i64* %RSP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = sub i64 %43, 16
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  %47 = icmp ult i64 %43, 16
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2433
  %50 = trunc i64 %46 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = xor i64 16, %43
  %58 = xor i64 %57, %46
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = icmp eq i64 %46, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = lshr i64 %46, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = lshr i64 %43, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %69
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2451
  %75 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 8
  store i64 %77, i64* %PC
  %78 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 16) to double*)
  %79 = bitcast i8* %75 to double*
  store double %78, double* %79, align 1, !tbaa !2452
  %80 = getelementptr inbounds i8, i8* %75, i64 8
  %81 = bitcast i8* %80 to double*
  store double 0.000000e+00, double* %81, align 1, !tbaa !2452
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 8
  %84 = bitcast %union.vec128_t* %XMM0 to i8*
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 5
  store i64 %86, i64* %PC
  %87 = bitcast i8* %84 to double*
  %88 = load double, double* %87, align 1
  %89 = inttoptr i64 %83 to double*
  store double %88, double* %89
  %90 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 8
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to double*
  %96 = load double, double* %95
  %97 = bitcast i8* %90 to double*
  store double %96, double* %97, align 1, !tbaa !2452
  %98 = getelementptr inbounds i8, i8* %90, i64 8
  %99 = bitcast i8* %98 to double*
  store double 0.000000e+00, double* %99, align 1, !tbaa !2452
  %100 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %101 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 9
  store i64 %103, i64* %PC
  %104 = bitcast i8* %101 to double*
  %105 = load double, double* %104, align 1
  %106 = getelementptr inbounds i8, i8* %101, i64 8
  %107 = bitcast i8* %106 to i64*
  %108 = load i64, i64* %107, align 1
  %109 = load double, double* bitcast (%init_value_type* @init_value to double*)
  %110 = fmul double %105, %109
  %111 = bitcast i8* %100 to double*
  store double %110, double* %111, align 1, !tbaa !2452
  %112 = getelementptr inbounds i8, i8* %100, i64 8
  %113 = bitcast i8* %112 to i64*
  store i64 %108, i64* %113, align 1, !tbaa !2452
  %114 = bitcast %union.vec128_t* %XMM0 to i8*
  %115 = bitcast %union.vec128_t* %XMM1 to i8*
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = bitcast i8* %114 to double*
  %119 = load double, double* %118, align 1
  %120 = bitcast i8* %115 to double*
  %121 = load double, double* %120, align 1
  %122 = fcmp uno double %119, %121
  br i1 %122, label %123, label %135

; <label>:123:                                    ; preds = %block_405df0
  %124 = fadd double %119, %121
  %125 = bitcast double %124 to i64
  %126 = and i64 %125, 9221120237041090560
  %127 = icmp eq i64 %126, 9218868437227405312
  %128 = and i64 %125, 2251799813685247
  %129 = icmp ne i64 %128, 0
  %130 = and i1 %127, %129
  br i1 %130, label %131, label %141

; <label>:131:                                    ; preds = %123
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %133 = load i64, i64* %132, align 8, !tbaa !2428
  %134 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %133, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:135:                                    ; preds = %block_405df0
  %136 = fcmp ogt double %119, %121
  br i1 %136, label %141, label %137

; <label>:137:                                    ; preds = %135
  %138 = fcmp olt double %119, %121
  br i1 %138, label %141, label %139

; <label>:139:                                    ; preds = %137
  %140 = fcmp oeq double %119, %121
  br i1 %140, label %141, label %148

; <label>:141:                                    ; preds = %139, %137, %135, %123
  %142 = phi i8 [ 0, %135 ], [ 0, %137 ], [ 1, %139 ], [ 1, %123 ]
  %143 = phi i8 [ 0, %135 ], [ 0, %137 ], [ 0, %139 ], [ 1, %123 ]
  %144 = phi i8 [ 0, %135 ], [ 1, %137 ], [ 0, %139 ], [ 1, %123 ]
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %145, align 1, !tbaa !2432
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %146, align 1, !tbaa !2432
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %144, i8* %147, align 1, !tbaa !2432
  br label %148

; <label>:148:                                    ; preds = %141, %139
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %149, align 1, !tbaa !2432
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %150, align 1, !tbaa !2432
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %151, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %131, %148
  %152 = phi %struct.Memory* [ %134, %131 ], [ %2, %148 ]
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 17
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 6
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 6
  store i64 %158, i64* %PC
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %160 = load i8, i8* %159, align 1, !tbaa !2449
  %161 = icmp eq i8 %160, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = select i1 %161, i64 %154, i64 %156
  store i64 %164, i64* %163, align 8, !tbaa !2428
  %165 = load i8, i8* %BRANCH_TAKEN
  %166 = icmp eq i8 %165, 1
  br i1 %166, label %block_405e28, label %block_405e1d

block_405e1d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 11
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 6
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 6
  store i64 %172, i64* %PC
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %174 = load i8, i8* %173, align 1, !tbaa !2447
  store i8 %174, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %176 = icmp ne i8 %174, 0
  %177 = select i1 %176, i64 %168, i64 %170
  store i64 %177, i64* %175, align 8, !tbaa !2428
  %178 = load i8, i8* %BRANCH_TAKEN
  %179 = icmp eq i8 %178, 1
  br i1 %179, label %block_405e28, label %block_405e23

block_405e23:                                     ; preds = %block_405e1d
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 32
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 5
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %181, i64* %184, align 8, !tbaa !2428
  br label %block_405e43

block_405e28:                                     ; preds = %block_405e1d, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.0 = phi %struct.Memory* [ %152, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %152, %block_405e1d ]
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 10
  store i64 %186, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1033), i64* %RDI, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 7
  store i64 %188, i64* %PC
  %189 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %RSI, align 8, !tbaa !2428
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 2
  store i64 %192, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %193 = load i64, i64* %PC
  %194 = sub i64 %193, 22347
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %200 = load i64, i64* %199, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %196, i64* %202
  store i64 %201, i64* %199, align 8, !tbaa !2428
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %194, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  %205 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %204, %struct.Memory* %MEMORY.0)
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 12
  %208 = load i32, i32* %EAX
  %209 = zext i32 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 3
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %207 to i32*
  store i32 %208, i32* %212
  br label %block_405e43

block_405e43:                                     ; preds = %block_405e28, %block_405e23
  %MEMORY.1 = phi %struct.Memory* [ %205, %block_405e28 ], [ %152, %block_405e23 ]
  %213 = load i64, i64* %RSP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 4
  store i64 %215, i64* %PC
  %216 = add i64 16, %213
  store i64 %216, i64* %RSP, align 8, !tbaa !2428
  %217 = icmp ult i64 %216, %213
  %218 = icmp ult i64 %216, 16
  %219 = or i1 %217, %218
  %220 = zext i1 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %220, i8* %221, align 1, !tbaa !2433
  %222 = trunc i64 %216 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = xor i64 16, %213
  %230 = xor i64 %229, %216
  %231 = lshr i64 %230, 4
  %232 = trunc i64 %231 to i8
  %233 = and i8 %232, 1
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %233, i8* %234, align 1, !tbaa !2448
  %235 = icmp eq i64 %216, 0
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %236, i8* %237, align 1, !tbaa !2449
  %238 = lshr i64 %216, 63
  %239 = trunc i64 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = lshr i64 %213, 63
  %242 = xor i64 %238, %241
  %243 = add nuw nsw i64 %242, %238
  %244 = icmp eq i64 %243, 2
  %245 = zext i1 %244 to i8
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %245, i8* %246, align 1, !tbaa !2451
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 1
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %250 = load i64, i64* %249, align 8, !tbaa !2428
  %251 = add i64 %250, 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RBP, align 8, !tbaa !2428
  store i64 %251, i64* %249, align 8, !tbaa !2428
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 1
  store i64 %255, i64* %PC
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %258 = load i64, i64* %257, align 8, !tbaa !2428
  %259 = inttoptr i64 %258 to i64*
  %260 = load i64, i64* %259
  store i64 %260, i64* %256, align 8, !tbaa !2428
  %261 = add i64 %258, 8
  store i64 %261, i64* %257, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_4021b0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4021b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = sub i64 %37, 32
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 32
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2433
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = xor i64 32, %37
  %52 = xor i64 %51, %40
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = icmp eq i64 %40, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1, !tbaa !2449
  %60 = lshr i64 %40, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = lshr i64 %37, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2451
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 8
  %71 = load i64, i64* %RDI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 16
  %77 = load i64, i64* %RSI
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %76 to i64*
  store i64 %77, i64* %80
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 24
  %83 = load i64, i64* %RDX
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %86
  br label %block_4021c4

block_4021d2:                                     ; preds = %block_4021c4
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 32
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  store i64 %88, i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 8
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  store i64 %97, i64* %RCX, align 8, !tbaa !2428
  %100 = load i64, i64* %RCX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = add i64 8, %100
  store i64 %103, i64* %RCX, align 8, !tbaa !2428
  %104 = icmp ult i64 %103, %100
  %105 = icmp ult i64 %103, 8
  %106 = or i1 %104, %105
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %107, i8* %108, align 1, !tbaa !2433
  %109 = trunc i64 %103 to i32
  %110 = and i32 %109, 255
  %111 = call i32 @llvm.ctpop.i32(i32 %110) #16
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %114, i8* %115, align 1, !tbaa !2447
  %116 = xor i64 8, %100
  %117 = xor i64 %116, %103
  %118 = lshr i64 %117, 4
  %119 = trunc i64 %118 to i8
  %120 = and i8 %119, 1
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %120, i8* %121, align 1, !tbaa !2448
  %122 = icmp eq i64 %103, 0
  %123 = zext i1 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %123, i8* %124, align 1, !tbaa !2449
  %125 = lshr i64 %103, 63
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %126, i8* %127, align 1, !tbaa !2450
  %128 = lshr i64 %100, 63
  %129 = xor i64 %125, %128
  %130 = add nuw nsw i64 %129, %125
  %131 = icmp eq i64 %130, 2
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %132, i8* %133, align 1, !tbaa !2451
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 8
  %136 = load i64, i64* %RCX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %135 to i64*
  store i64 %136, i64* %139
  %140 = load i64, i64* %RAX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC
  store i64 %140, i64* %RSI, align 8, !tbaa !2428
  %143 = load i64, i64* %PC
  %144 = sub i64 %143, 1160
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %150 = load i64, i64* %149, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %146, i64* %152
  store i64 %151, i64* %149, align 8, !tbaa !2428
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %153, align 8, !tbaa !2428
  %154 = load i64, i64* %PC
  %155 = call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %154, %struct.Memory* %MEMORY.0)
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 24
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RAX
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  store i64 %162, i64* %RCX, align 8, !tbaa !2428
  %165 = load i64, i64* %RCX
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = add i64 8, %165
  store i64 %168, i64* %RCX, align 8, !tbaa !2428
  %169 = icmp ult i64 %168, %165
  %170 = icmp ult i64 %168, 8
  %171 = or i1 %169, %170
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %172, i8* %173, align 1, !tbaa !2433
  %174 = trunc i64 %168 to i32
  %175 = and i32 %174, 255
  %176 = call i32 @llvm.ctpop.i32(i32 %175) #16
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %179, i8* %180, align 1, !tbaa !2447
  %181 = xor i64 8, %165
  %182 = xor i64 %181, %168
  %183 = lshr i64 %182, 4
  %184 = trunc i64 %183 to i8
  %185 = and i8 %184, 1
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %185, i8* %186, align 1, !tbaa !2448
  %187 = icmp eq i64 %168, 0
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %188, i8* %189, align 1, !tbaa !2449
  %190 = lshr i64 %168, 63
  %191 = trunc i64 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %191, i8* %192, align 1, !tbaa !2450
  %193 = lshr i64 %165, 63
  %194 = xor i64 %190, %193
  %195 = add nuw nsw i64 %194, %190
  %196 = icmp eq i64 %195, 2
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %197, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 24
  %201 = load i64, i64* %RCX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 32
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = load i64, i64* %RAX
  %212 = load i64, i64* %RCX
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 3
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %211 to i64*
  store i64 %212, i64* %215
  %216 = load i64, i64* %PC
  %217 = sub i64 %216, 63
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 5
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %217, i64* %220, align 8, !tbaa !2428
  br label %block_4021c4

block_402208:                                     ; preds = %block_4021c4
  %221 = load i64, i64* %RSP
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 4
  store i64 %223, i64* %PC
  %224 = add i64 32, %221
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  %225 = icmp ult i64 %224, %221
  %226 = icmp ult i64 %224, 32
  %227 = or i1 %225, %226
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %228, i8* %229, align 1, !tbaa !2433
  %230 = trunc i64 %224 to i32
  %231 = and i32 %230, 255
  %232 = call i32 @llvm.ctpop.i32(i32 %231) #16
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %235, i8* %236, align 1, !tbaa !2447
  %237 = xor i64 32, %221
  %238 = xor i64 %237, %224
  %239 = lshr i64 %238, 4
  %240 = trunc i64 %239 to i8
  %241 = and i8 %240, 1
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %241, i8* %242, align 1, !tbaa !2448
  %243 = icmp eq i64 %224, 0
  %244 = zext i1 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %244, i8* %245, align 1, !tbaa !2449
  %246 = lshr i64 %224, 63
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %247, i8* %248, align 1, !tbaa !2450
  %249 = lshr i64 %221, 63
  %250 = xor i64 %246, %249
  %251 = add nuw nsw i64 %250, %246
  %252 = icmp eq i64 %251, 2
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %253, i8* %254, align 1, !tbaa !2451
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 1
  store i64 %256, i64* %PC
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %258 = load i64, i64* %257, align 8, !tbaa !2428
  %259 = add i64 %258, 8
  %260 = inttoptr i64 %258 to i64*
  %261 = load i64, i64* %260
  store i64 %261, i64* %RBP, align 8, !tbaa !2428
  store i64 %259, i64* %257, align 8, !tbaa !2428
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 1
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %266 = load i64, i64* %265, align 8, !tbaa !2428
  %267 = inttoptr i64 %266 to i64*
  %268 = load i64, i64* %267
  store i64 %268, i64* %264, align 8, !tbaa !2428
  %269 = add i64 %266, 8
  store i64 %269, i64* %265, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4021c4:                                     ; preds = %block_4021d2, %block_4021b0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4021b0 ], [ %155, %block_4021d2 ]
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 8
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i64*
  %275 = load i64, i64* %274
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = load i64, i64* %RAX
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 16
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281
  %283 = sub i64 %276, %282
  %284 = icmp ugt i64 %282, %276
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %286, align 1, !tbaa !2433
  %287 = trunc i64 %283 to i32
  %288 = and i32 %287, 255
  %289 = call i32 @llvm.ctpop.i32(i32 %288) #16
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %292, i8* %293, align 1, !tbaa !2447
  %294 = xor i64 %282, %276
  %295 = xor i64 %294, %283
  %296 = lshr i64 %295, 4
  %297 = trunc i64 %296 to i8
  %298 = and i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %298, i8* %299, align 1, !tbaa !2448
  %300 = icmp eq i64 %283, 0
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %301, i8* %302, align 1, !tbaa !2449
  %303 = lshr i64 %283, 63
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %304, i8* %305, align 1, !tbaa !2450
  %306 = lshr i64 %276, 63
  %307 = lshr i64 %282, 63
  %308 = xor i64 %307, %306
  %309 = xor i64 %303, %306
  %310 = add nuw nsw i64 %309, %308
  %311 = icmp eq i64 %310, 2
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %312, i8* %313, align 1, !tbaa !2451
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 60
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 6
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 6
  store i64 %319, i64* %PC
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %321 = load i8, i8* %320, align 1, !tbaa !2449
  store i8 %321, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %323 = icmp ne i8 %321, 0
  %324 = select i1 %323, i64 %315, i64 %317
  store i64 %324, i64* %322, align 8, !tbaa !2428
  %325 = load i8, i8* %BRANCH_TAKEN
  %326 = icmp eq i8 %325, 1
  br i1 %326, label %block_402208, label %block_4021d2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4039f0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4039f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %34 to %"class.std::bitset"*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 16
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 8
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  store i64 %82, i64* %RCX, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = load i64, i64* %RDI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %100 = load i64, i64* %RCX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  store i64 %100, i64* %RSI, align 8, !tbaa !2428
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 770
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 5
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 5
  store i64 %108, i64* %PC
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %110 = load i64, i64* %109, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %106, i64* %112
  store i64 %111, i64* %109, align 8, !tbaa !2428
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %104, i64* %113, align 8, !tbaa !2428
  %114 = load i64, i64* %PC
  %115 = call %struct.Memory* @sub_403d10__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* %0, i64 %114, %struct.Memory* %2)
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 5
  store i64 %117, i64* %PC
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  %118 = load i32, i32* %EDX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  store i64 %121, i64* %PC
  %122 = and i64 %119, 4294967295
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 32
  %125 = load i64, i64* %RAX
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %124 to i64*
  store i64 %125, i64* %128
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 32
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 4
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 2
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %139 = load i64, i64* %138, align 8, !tbaa !2428
  %140 = ashr i64 %139, 63
  store i64 %140, i64* %137, align 8, !tbaa !2428
  %141 = load i64, i64* %RCX
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %147 = load i64, i64* %146, align 8, !tbaa !2428
  %148 = sext i64 %141 to i128
  %149 = and i128 %148, -18446744073709551616
  %150 = zext i64 %147 to i128
  %151 = shl nuw i128 %150, 64
  %152 = zext i64 %145 to i128
  %153 = or i128 %151, %152
  %154 = zext i64 %141 to i128
  %155 = or i128 %149, %154
  %156 = sdiv i128 %153, %155
  %157 = trunc i128 %156 to i64
  %158 = and i128 %156, 18446744073709551615
  %159 = sext i64 %157 to i128
  %160 = and i128 %159, -18446744073709551616
  %161 = or i128 %160, %158
  %162 = icmp eq i128 %156, %161
  br i1 %162, label %167, label %163

; <label>:163:                                    ; preds = %block_4039f0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %165, %struct.Memory* %115) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:167:                                    ; preds = %block_4039f0
  %168 = srem i128 %153, %155
  %169 = trunc i128 %168 to i64
  store i64 %157, i64* %144, align 8, !tbaa !2428
  store i64 %169, i64* %146, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %170, align 1, !tbaa !2433
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %171, align 1, !tbaa !2447
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %172, align 1, !tbaa !2448
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %173, align 1, !tbaa !2449
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %174, align 1, !tbaa !2450
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %175, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %163, %167
  %176 = phi %struct.Memory* [ %166, %163 ], [ %115, %167 ]
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = sub i64 %177, 1
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = icmp ult i64 %177, 1
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %182, i8* %183, align 1, !tbaa !2433
  %184 = trunc i64 %180 to i32
  %185 = and i32 %184, 255
  %186 = call i32 @llvm.ctpop.i32(i32 %185) #16
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  %189 = xor i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %189, i8* %190, align 1, !tbaa !2447
  %191 = xor i64 1, %177
  %192 = xor i64 %191, %180
  %193 = lshr i64 %192, 4
  %194 = trunc i64 %193 to i8
  %195 = and i8 %194, 1
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %195, i8* %196, align 1, !tbaa !2448
  %197 = icmp eq i64 %180, 0
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %198, i8* %199, align 1, !tbaa !2449
  %200 = lshr i64 %180, 63
  %201 = trunc i64 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %201, i8* %202, align 1, !tbaa !2450
  %203 = lshr i64 %177, 63
  %204 = xor i64 %200, %203
  %205 = add nuw nsw i64 %204, %203
  %206 = icmp eq i64 %205, 2
  %207 = zext i1 %206 to i8
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %207, i8* %208, align 1, !tbaa !2451
  %209 = load i64, i64* %RBP
  %210 = sub i64 %209, 24
  %211 = load i64, i64* %RAX
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %210 to i64*
  store i64 %211, i64* %214
  br label %block_403a2f

block_403b32:                                     ; preds = %block_403a9e
  %215 = load i64, i64* %RSP
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = add i64 112, %215
  store i64 %218, i64* %RSP, align 8, !tbaa !2428
  %219 = icmp ult i64 %218, %215
  %220 = icmp ult i64 %218, 112
  %221 = or i1 %219, %220
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %222, i8* %223, align 1, !tbaa !2433
  %224 = trunc i64 %218 to i32
  %225 = and i32 %224, 255
  %226 = call i32 @llvm.ctpop.i32(i32 %225) #16
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %229, i8* %230, align 1, !tbaa !2447
  %231 = xor i64 112, %215
  %232 = xor i64 %231, %218
  %233 = lshr i64 %232, 4
  %234 = trunc i64 %233 to i8
  %235 = and i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %235, i8* %236, align 1, !tbaa !2448
  %237 = icmp eq i64 %218, 0
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %238, i8* %239, align 1, !tbaa !2449
  %240 = lshr i64 %218, 63
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %241, i8* %242, align 1, !tbaa !2450
  %243 = lshr i64 %215, 63
  %244 = xor i64 %240, %243
  %245 = add nuw nsw i64 %244, %240
  %246 = icmp eq i64 %245, 2
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %247, i8* %248, align 1, !tbaa !2451
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 1
  store i64 %250, i64* %PC
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %252 = load i64, i64* %251, align 8, !tbaa !2428
  %253 = add i64 %252, 8
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RBP, align 8, !tbaa !2428
  store i64 %253, i64* %251, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 1
  store i64 %257, i64* %PC
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %260 = load i64, i64* %259, align 8, !tbaa !2428
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %258, align 8, !tbaa !2428
  %263 = add i64 %260, 8
  store i64 %263, i64* %259, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_403a3a:                                     ; preds = %block_403a2f
  %264 = sub i64 %482, 8
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 24
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %268 to i64*
  %272 = load i64, i64* %271
  store i64 %272, i64* %RSI, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 766
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 5
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 5
  store i64 %278, i64* %PC
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %280 = load i64, i64* %279, align 8, !tbaa !2428
  %281 = add i64 %280, -8
  %282 = inttoptr i64 %281 to i64*
  store i64 %276, i64* %282
  store i64 %281, i64* %279, align 8, !tbaa !2428
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %274, i64* %283, align 8, !tbaa !2428
  %284 = load i64, i64* %PC
  %285 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %284, %struct.Memory* %MEMORY.0)
  %286 = load i64, i64* %RBP
  %287 = sub i64 %286, 48
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 4
  store i64 %289, i64* %PC
  store i64 %287, i64* %RDI, align 8, !tbaa !2428
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 48
  %292 = load i64, i64* %RAX
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 4
  store i64 %294, i64* %PC
  %295 = inttoptr i64 %291 to i64*
  store i64 %292, i64* %295
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 641
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 5
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 5
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %303 = load i64, i64* %302, align 8, !tbaa !2428
  %304 = add i64 %303, -8
  %305 = inttoptr i64 %304 to i64*
  store i64 %299, i64* %305
  store i64 %304, i64* %302, align 8, !tbaa !2428
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %297, i64* %306, align 8, !tbaa !2428
  %307 = load i64, i64* %PC
  %308 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %307, %struct.Memory* %285)
  %309 = load i64, i64* %RAX
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 3
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %309 to i64*
  %313 = load i64, i64* %312
  store i64 %313, i64* %RAX, align 8, !tbaa !2428
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 40
  %316 = load i64, i64* %RAX
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %315 to i64*
  store i64 %316, i64* %319
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 32
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 4
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i64*
  %325 = load i64, i64* %324
  store i64 %325, i64* %RDI, align 8, !tbaa !2428
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 8
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 56
  %334 = load i64, i64* %RAX
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 4
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %333 to i64*
  store i64 %334, i64* %337
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 24
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i64*
  %343 = load i64, i64* %342
  store i64 %343, i64* %RDX, align 8, !tbaa !2428
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 40
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 4
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i64*
  %349 = load i64, i64* %348
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 64
  %352 = load i64, i64* %RAX
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %351 to i64*
  store i64 %352, i64* %355
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 56
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360
  store i64 %361, i64* %RSI, align 8, !tbaa !2428
  %362 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 64
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to double*
  %368 = load double, double* %367
  %369 = bitcast i8* %362 to double*
  store double %368, double* %369, align 1, !tbaa !2452
  %370 = getelementptr inbounds i8, i8* %362, i64 8
  %371 = bitcast i8* %370 to double*
  store double 0.000000e+00, double* %371, align 1, !tbaa !2452
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 756
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 5
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 5
  store i64 %377, i64* %PC
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %379 = load i64, i64* %378, align 8, !tbaa !2428
  %380 = add i64 %379, -8
  %381 = inttoptr i64 %380 to i64*
  store i64 %375, i64* %381
  store i64 %380, i64* %378, align 8, !tbaa !2428
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %373, i64* %382, align 8, !tbaa !2428
  %383 = load i64, i64* %PC
  %384 = call %struct.Memory* @sub_403d70__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* %0, i64 %383, %struct.Memory* %308)
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 24
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 4
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i64*
  %390 = load i64, i64* %389
  store i64 %390, i64* %RAX, align 8, !tbaa !2428
  %391 = load i64, i64* %RAX
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC
  %394 = add i64 -1, %391
  store i64 %394, i64* %RAX, align 8, !tbaa !2428
  %395 = icmp ult i64 %394, %391
  %396 = icmp ult i64 %394, -1
  %397 = or i1 %395, %396
  %398 = zext i1 %397 to i8
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %398, i8* %399, align 1, !tbaa !2433
  %400 = trunc i64 %394 to i32
  %401 = and i32 %400, 255
  %402 = call i32 @llvm.ctpop.i32(i32 %401) #16
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %405, i8* %406, align 1, !tbaa !2447
  %407 = xor i64 -1, %391
  %408 = xor i64 %407, %394
  %409 = lshr i64 %408, 4
  %410 = trunc i64 %409 to i8
  %411 = and i8 %410, 1
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = icmp eq i64 %394, 0
  %414 = zext i1 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %394, 63
  %417 = trunc i64 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %417, i8* %418, align 1, !tbaa !2450
  %419 = lshr i64 %391, 63
  %420 = xor i64 %416, %419
  %421 = xor i64 %416, 1
  %422 = add nuw nsw i64 %420, %421
  %423 = icmp eq i64 %422, 2
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %424, i8* %425, align 1, !tbaa !2451
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 24
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 4
  store i64 %430, i64* %PC
  %431 = inttoptr i64 %427 to i64*
  store i64 %428, i64* %431
  %432 = load i64, i64* %PC
  %433 = sub i64 %432, 94
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %433, i64* %436, align 8, !tbaa !2428
  br label %block_403a2f

block_403a2f:                                     ; preds = %block_403a3a, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %176, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %384, %block_403a3a ]
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 24
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 5
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i64*
  %442 = load i64, i64* %441
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %443, align 1, !tbaa !2433
  %444 = trunc i64 %442 to i32
  %445 = and i32 %444, 255
  %446 = call i32 @llvm.ctpop.i32(i32 %445) #16
  %447 = trunc i32 %446 to i8
  %448 = and i8 %447, 1
  %449 = xor i8 %448, 1
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %449, i8* %450, align 1, !tbaa !2447
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %451, align 1, !tbaa !2448
  %452 = icmp eq i64 %442, 0
  %453 = zext i1 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %453, i8* %454, align 1, !tbaa !2449
  %455 = lshr i64 %442, 63
  %456 = trunc i64 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = lshr i64 %442, 63
  %459 = xor i64 %455, %458
  %460 = add nuw nsw i64 %459, %458
  %461 = icmp eq i64 %460, 2
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %462, i8* %463, align 1, !tbaa !2451
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 94
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 6
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 6
  store i64 %469, i64* %PC
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %471 = load i8, i8* %470, align 1, !tbaa !2450
  %472 = icmp ne i8 %471, 0
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %474 = load i8, i8* %473, align 1, !tbaa !2451
  %475 = icmp ne i8 %474, 0
  %476 = xor i1 %472, %475
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %479 = select i1 %476, i64 %465, i64 %467
  store i64 %479, i64* %478, align 8, !tbaa !2428
  %480 = load i8, i8* %BRANCH_TAKEN
  %481 = icmp eq i8 %480, 1
  %482 = load i64, i64* %RBP
  br i1 %481, label %block_403a92, label %block_403a3a

block_403a92:                                     ; preds = %block_403a2f
  %483 = sub i64 %482, 32
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i64*
  %487 = load i64, i64* %486
  store i64 %487, i64* %RAX, align 8, !tbaa !2428
  %488 = load i64, i64* %RAX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = sub i64 %488, 1
  store i64 %491, i64* %RAX, align 8, !tbaa !2428
  %492 = icmp ult i64 %488, 1
  %493 = zext i1 %492 to i8
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %493, i8* %494, align 1, !tbaa !2433
  %495 = trunc i64 %491 to i32
  %496 = and i32 %495, 255
  %497 = call i32 @llvm.ctpop.i32(i32 %496) #16
  %498 = trunc i32 %497 to i8
  %499 = and i8 %498, 1
  %500 = xor i8 %499, 1
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %500, i8* %501, align 1, !tbaa !2447
  %502 = xor i64 1, %488
  %503 = xor i64 %502, %491
  %504 = lshr i64 %503, 4
  %505 = trunc i64 %504 to i8
  %506 = and i8 %505, 1
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %506, i8* %507, align 1, !tbaa !2448
  %508 = icmp eq i64 %491, 0
  %509 = zext i1 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %509, i8* %510, align 1, !tbaa !2449
  %511 = lshr i64 %491, 63
  %512 = trunc i64 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %512, i8* %513, align 1, !tbaa !2450
  %514 = lshr i64 %488, 63
  %515 = xor i64 %511, %514
  %516 = add nuw nsw i64 %515, %514
  %517 = icmp eq i64 %516, 2
  %518 = zext i1 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %518, i8* %519, align 1, !tbaa !2451
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 24
  %522 = load i64, i64* %RAX
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 4
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %521 to i64*
  store i64 %522, i64* %525
  br label %block_403a9e

block_403a9e:                                     ; preds = %block_403aa9, %block_403a92
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_403a92 ], [ %807, %block_403aa9 ]
  %526 = load i64, i64* %RBP
  %527 = sub i64 %526, 24
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 5
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i64*
  %531 = load i64, i64* %530
  %532 = sub i64 %531, 1
  %533 = icmp ult i64 %531, 1
  %534 = zext i1 %533 to i8
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %534, i8* %535, align 1, !tbaa !2433
  %536 = trunc i64 %532 to i32
  %537 = and i32 %536, 255
  %538 = call i32 @llvm.ctpop.i32(i32 %537) #16
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %541, i8* %542, align 1, !tbaa !2447
  %543 = xor i64 %531, 1
  %544 = xor i64 %543, %532
  %545 = lshr i64 %544, 4
  %546 = trunc i64 %545 to i8
  %547 = and i8 %546, 1
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %547, i8* %548, align 1, !tbaa !2448
  %549 = icmp eq i64 %532, 0
  %550 = zext i1 %549 to i8
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %550, i8* %551, align 1, !tbaa !2449
  %552 = lshr i64 %532, 63
  %553 = trunc i64 %552 to i8
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %553, i8* %554, align 1, !tbaa !2450
  %555 = lshr i64 %531, 63
  %556 = xor i64 %552, %555
  %557 = add nuw nsw i64 %556, %555
  %558 = icmp eq i64 %557, 2
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %559, i8* %560, align 1, !tbaa !2451
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 143
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 6
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 6
  store i64 %566, i64* %PC
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %568 = load i8, i8* %567, align 1, !tbaa !2450
  %569 = icmp ne i8 %568, 0
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %571 = load i8, i8* %570, align 1, !tbaa !2451
  %572 = icmp ne i8 %571, 0
  %573 = xor i1 %569, %572
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %576 = select i1 %573, i64 %562, i64 %564
  store i64 %576, i64* %575, align 8, !tbaa !2428
  %577 = load i8, i8* %BRANCH_TAKEN
  %578 = icmp eq i8 %577, 1
  br i1 %578, label %block_403b32, label %block_403aa9

block_403aa9:                                     ; preds = %block_403a9e
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 8
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  store i64 %580, i64* %RDI, align 8, !tbaa !2428
  %583 = load i64, i64* %RBP
  %584 = sub i64 %583, 24
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 4
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %584 to i64*
  %588 = load i64, i64* %587
  store i64 %588, i64* %RSI, align 8, !tbaa !2428
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 655
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 5
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 5
  store i64 %594, i64* %PC
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %596 = load i64, i64* %595, align 8, !tbaa !2428
  %597 = add i64 %596, -8
  %598 = inttoptr i64 %597 to i64*
  store i64 %592, i64* %598
  store i64 %597, i64* %595, align 8, !tbaa !2428
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %590, i64* %599, align 8, !tbaa !2428
  %600 = load i64, i64* %PC
  %601 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %600, %struct.Memory* %MEMORY.1)
  %602 = load i64, i64* %RBP
  %603 = sub i64 %602, 80
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 4
  store i64 %605, i64* %PC
  store i64 %603, i64* %RDI, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 80
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 530
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  store i64 %617, i64* %PC
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %619 = load i64, i64* %618, align 8, !tbaa !2428
  %620 = add i64 %619, -8
  %621 = inttoptr i64 %620 to i64*
  store i64 %615, i64* %621
  store i64 %620, i64* %618, align 8, !tbaa !2428
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %622, align 8, !tbaa !2428
  %623 = load i64, i64* %PC
  %624 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %623, %struct.Memory* %601)
  %625 = load i64, i64* %RBP
  %626 = sub i64 %625, 8
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 4
  store i64 %628, i64* %PC
  store i64 %626, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %RAX
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 3
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i64*
  %633 = load i64, i64* %632
  store i64 %633, i64* %RAX, align 8, !tbaa !2428
  %634 = load i64, i64* %RBP
  %635 = sub i64 %634, 72
  %636 = load i64, i64* %RAX
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 4
  store i64 %638, i64* %PC
  %639 = inttoptr i64 %635 to i64*
  store i64 %636, i64* %639
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 514
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 5
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %647 = load i64, i64* %646, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %649
  store i64 %648, i64* %646, align 8, !tbaa !2428
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %641, i64* %650, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %651, %struct.Memory* %624)
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  store i64 %654, i64* %RDI, align 8, !tbaa !2428
  %657 = load i64, i64* %RBP
  %658 = sub i64 %657, 24
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 4
  store i64 %660, i64* %PC
  %661 = inttoptr i64 %658 to i64*
  %662 = load i64, i64* %661
  store i64 %662, i64* %RSI, align 8, !tbaa !2428
  %663 = load i64, i64* %RBP
  %664 = sub i64 %663, 112
  %665 = load i64, i64* %RAX
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 4
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %664 to i64*
  store i64 %665, i64* %668
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 609
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 5
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 5
  store i64 %674, i64* %PC
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %676 = load i64, i64* %675, align 8, !tbaa !2428
  %677 = add i64 %676, -8
  %678 = inttoptr i64 %677 to i64*
  store i64 %672, i64* %678
  store i64 %677, i64* %675, align 8, !tbaa !2428
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %670, i64* %679, align 8, !tbaa !2428
  %680 = load i64, i64* %PC
  %681 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %680, %struct.Memory* %652)
  %682 = load i64, i64* %RBP
  %683 = sub i64 %682, 88
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 4
  store i64 %685, i64* %PC
  store i64 %683, i64* %RDI, align 8, !tbaa !2428
  %686 = load i64, i64* %RBP
  %687 = sub i64 %686, 88
  %688 = load i64, i64* %RAX
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 4
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %687 to i64*
  store i64 %688, i64* %691
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 484
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 5
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 5
  store i64 %697, i64* %PC
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %699 = load i64, i64* %698, align 8, !tbaa !2428
  %700 = add i64 %699, -8
  %701 = inttoptr i64 %700 to i64*
  store i64 %695, i64* %701
  store i64 %700, i64* %698, align 8, !tbaa !2428
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %693, i64* %702, align 8, !tbaa !2428
  %703 = load i64, i64* %PC
  %704 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %703, %struct.Memory* %681)
  %705 = load i64, i64* %RCX
  %706 = load i32, i32* %ECX
  %707 = zext i32 %706 to i64
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 2
  store i64 %709, i64* %PC
  %710 = xor i64 %707, %705
  %711 = trunc i64 %710 to i32
  %712 = and i64 %710, 4294967295
  store i64 %712, i64* %RCX, align 8, !tbaa !2428
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %713, align 1, !tbaa !2433
  %714 = and i32 %711, 255
  %715 = call i32 @llvm.ctpop.i32(i32 %714) #16
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %718, i8* %719, align 1, !tbaa !2447
  %720 = icmp eq i32 %711, 0
  %721 = zext i1 %720 to i8
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %721, i8* %722, align 1, !tbaa !2449
  %723 = lshr i32 %711, 31
  %724 = trunc i32 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %724, i8* %725, align 1, !tbaa !2450
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %726, align 1, !tbaa !2451
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %727, align 1, !tbaa !2448
  %728 = load i32, i32* %ECX
  %729 = zext i32 %728 to i64
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 2
  store i64 %731, i64* %PC
  %732 = and i64 %729, 4294967295
  store i64 %732, i64* %RDX, align 8, !tbaa !2428
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 112
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 4
  store i64 %736, i64* %PC
  %737 = inttoptr i64 %734 to i64*
  %738 = load i64, i64* %737
  store i64 %738, i64* %RSI, align 8, !tbaa !2428
  %739 = load i64, i64* %RSI
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 3
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742
  store i64 %743, i64* %RDI, align 8, !tbaa !2428
  %744 = load i64, i64* %RAX
  %745 = load i64, i64* %RDI
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 3
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %744 to i64*
  store i64 %745, i64* %748
  %749 = load i64, i64* %RBP
  %750 = sub i64 %749, 24
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 4
  store i64 %752, i64* %PC
  %753 = inttoptr i64 %750 to i64*
  %754 = load i64, i64* %753
  store i64 %754, i64* %RDI, align 8, !tbaa !2428
  %755 = load i64, i64* %RBP
  %756 = sub i64 %755, 8
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 4
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %756 to i64*
  %760 = load i64, i64* %759
  store i64 %760, i64* %RAX, align 8, !tbaa !2428
  %761 = load i64, i64* %RBP
  %762 = sub i64 %761, 96
  %763 = load i64, i64* %RAX
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 4
  store i64 %765, i64* %PC
  %766 = inttoptr i64 %762 to i64*
  store i64 %763, i64* %766
  %767 = load i64, i64* %RBP
  %768 = sub i64 %767, 72
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 4
  store i64 %770, i64* %PC
  %771 = inttoptr i64 %768 to i64*
  %772 = load i64, i64* %771
  store i64 %772, i64* %RAX, align 8, !tbaa !2428
  %773 = load i64, i64* %RBP
  %774 = sub i64 %773, 104
  %775 = load i64, i64* %RAX
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 4
  store i64 %777, i64* %PC
  %778 = inttoptr i64 %774 to i64*
  store i64 %775, i64* %778
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 96
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 4
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %780 to i64*
  %784 = load i64, i64* %783
  store i64 %784, i64* %RSI, align 8, !tbaa !2428
  %785 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %786 = load i64, i64* %RBP
  %787 = sub i64 %786, 104
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 5
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to double*
  %791 = load double, double* %790
  %792 = bitcast i8* %785 to double*
  store double %791, double* %792, align 1, !tbaa !2452
  %793 = getelementptr inbounds i8, i8* %785, i64 8
  %794 = bitcast i8* %793 to double*
  store double 0.000000e+00, double* %794, align 1, !tbaa !2452
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 596
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 5
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 5
  store i64 %800, i64* %PC
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %802 = load i64, i64* %801, align 8, !tbaa !2428
  %803 = add i64 %802, -8
  %804 = inttoptr i64 %803 to i64*
  store i64 %798, i64* %804
  store i64 %803, i64* %801, align 8, !tbaa !2428
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %796, i64* %805, align 8, !tbaa !2428
  %806 = load i64, i64* %PC
  %807 = call %struct.Memory* @sub_403d70__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* %0, i64 %806, %struct.Memory* %704)
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 24
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %809 to i64*
  %813 = load i64, i64* %812
  store i64 %813, i64* %RAX, align 8, !tbaa !2428
  %814 = load i64, i64* %RAX
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC
  %817 = add i64 -1, %814
  store i64 %817, i64* %RAX, align 8, !tbaa !2428
  %818 = icmp ult i64 %817, %814
  %819 = icmp ult i64 %817, -1
  %820 = or i1 %818, %819
  %821 = zext i1 %820 to i8
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %821, i8* %822, align 1, !tbaa !2433
  %823 = trunc i64 %817 to i32
  %824 = and i32 %823, 255
  %825 = call i32 @llvm.ctpop.i32(i32 %824) #16
  %826 = trunc i32 %825 to i8
  %827 = and i8 %826, 1
  %828 = xor i8 %827, 1
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %828, i8* %829, align 1, !tbaa !2447
  %830 = xor i64 -1, %814
  %831 = xor i64 %830, %817
  %832 = lshr i64 %831, 4
  %833 = trunc i64 %832 to i8
  %834 = and i8 %833, 1
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %834, i8* %835, align 1, !tbaa !2448
  %836 = icmp eq i64 %817, 0
  %837 = zext i1 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %837, i8* %838, align 1, !tbaa !2449
  %839 = lshr i64 %817, 63
  %840 = trunc i64 %839 to i8
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %840, i8* %841, align 1, !tbaa !2450
  %842 = lshr i64 %814, 63
  %843 = xor i64 %839, %842
  %844 = xor i64 %839, 1
  %845 = add nuw nsw i64 %843, %844
  %846 = icmp eq i64 %845, 2
  %847 = zext i1 %846 to i8
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %847, i8* %848, align 1, !tbaa !2451
  %849 = load i64, i64* %RBP
  %850 = sub i64 %849, 24
  %851 = load i64, i64* %RAX
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %850 to i64*
  store i64 %851, i64* %854
  %855 = load i64, i64* %PC
  %856 = sub i64 %855, 143
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 5
  store i64 %858, i64* %PC
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %856, i64* %859, align 8, !tbaa !2428
  br label %block_403a9e
}

; Function Attrs: noinline
define %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401bd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RSI
  %53 = load i64, i64* %RDI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, 8
  %62 = inttoptr i64 %60 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 1
  store i64 %65, i64* %PC
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %68 = load i64, i64* %67, align 8, !tbaa !2428
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %66, align 8, !tbaa !2428
  %71 = add i64 %68, 8
  store i64 %71, i64* %67, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cc0__Z9summarizePKciiii(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400cc0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %ESI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 17
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %R8D = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 19
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R9D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 17
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R8 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %53 to %"class.std::bitset"*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %55 to %"class.std::bitset"*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %57 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %56, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %57 to %"class.std::bitset"*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %59 to %"class.std::bitset"*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %61 to %union.vec128_t*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %63 to %union.vec128_t*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %RSP
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  %81 = sub i64 %78, 128
  store i64 %81, i64* %RSP, align 8, !tbaa !2428
  %82 = icmp ult i64 %78, 128
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %83, i8* %84, align 1, !tbaa !2433
  %85 = trunc i64 %81 to i32
  %86 = and i32 %85, 255
  %87 = call i32 @llvm.ctpop.i32(i32 %86) #16
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %90, i8* %91, align 1, !tbaa !2447
  %92 = xor i64 128, %78
  %93 = xor i64 %92, %81
  %94 = lshr i64 %93, 4
  %95 = trunc i64 %94 to i8
  %96 = and i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %96, i8* %97, align 1, !tbaa !2448
  %98 = icmp eq i64 %81, 0
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %99, i8* %100, align 1, !tbaa !2449
  %101 = lshr i64 %81, 63
  %102 = trunc i64 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %102, i8* %103, align 1, !tbaa !2450
  %104 = lshr i64 %78, 63
  %105 = xor i64 %101, %104
  %106 = add nuw nsw i64 %105, %104
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %108, i8* %109, align 1, !tbaa !2451
  %110 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %111 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %112 = bitcast %union.vec128_t* %XMM0 to i8*
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 3
  store i64 %114, i64* %PC
  %115 = bitcast i8* %111 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = getelementptr inbounds i8, i8* %111, i64 8
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = bitcast i8* %112 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = getelementptr inbounds i8, i8* %112, i64 8
  %123 = bitcast i8* %122 to i64*
  %124 = load i64, i64* %123, align 1
  %125 = xor i64 %121, %116
  %126 = xor i64 %124, %119
  %127 = trunc i64 %125 to i32
  %128 = lshr i64 %125, 32
  %129 = trunc i64 %128 to i32
  %130 = bitcast i8* %110 to i32*
  store i32 %127, i32* %130, align 1, !tbaa !2456
  %131 = getelementptr inbounds i8, i8* %110, i64 4
  %132 = bitcast i8* %131 to i32*
  store i32 %129, i32* %132, align 1, !tbaa !2456
  %133 = trunc i64 %126 to i32
  %134 = getelementptr inbounds i8, i8* %110, i64 8
  %135 = bitcast i8* %134 to i32*
  store i32 %133, i32* %135, align 1, !tbaa !2456
  %136 = lshr i64 %126, 32
  %137 = trunc i64 %136 to i32
  %138 = getelementptr inbounds i8, i8* %110, i64 12
  %139 = bitcast i8* %138 to i32*
  store i32 %137, i32* %139, align 1, !tbaa !2456
  %140 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 8
  store i64 %142, i64* %PC
  %143 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 8) to double*)
  %144 = bitcast i8* %140 to double*
  store double %143, double* %144, align 1, !tbaa !2452
  %145 = getelementptr inbounds i8, i8* %140, i64 8
  %146 = bitcast i8* %145 to double*
  store double 0.000000e+00, double* %146, align 1, !tbaa !2452
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 8
  %149 = load i64, i64* %RDI
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %148 to i64*
  store i64 %149, i64* %152
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 12
  %155 = load i32, i32* %ESI
  %156 = zext i32 %155 to i64
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %154 to i32*
  store i32 %155, i32* %159
  %160 = load i64, i64* %RBP
  %161 = sub i64 %160, 16
  %162 = load i32, i32* %EDX
  %163 = zext i32 %162 to i64
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 3
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %161 to i32*
  store i32 %162, i32* %166
  %167 = load i64, i64* %RBP
  %168 = sub i64 %167, 20
  %169 = load i32, i32* %ECX
  %170 = zext i32 %169 to i64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %168 to i32*
  store i32 %169, i32* %173
  %174 = load i64, i64* %RBP
  %175 = sub i64 %174, 24
  %176 = load i32, i32* %R8D
  %177 = zext i32 %176 to i64
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %175 to i32*
  store i32 %176, i32* %180
  %181 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 12
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 5
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = sitofp i32 %187 to double
  %189 = bitcast i8* %181 to double*
  store double %188, double* %189, align 1, !tbaa !2452
  %190 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 16
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 5
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i32*
  %196 = load i32, i32* %195
  %197 = sitofp i32 %196 to double
  %198 = bitcast i8* %190 to double*
  store double %197, double* %198, align 1, !tbaa !2452
  %199 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %200 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %201 = bitcast %union.vec128_t* %XMM3 to i8*
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = bitcast i8* %200 to double*
  %205 = load double, double* %204, align 1
  %206 = getelementptr inbounds i8, i8* %200, i64 8
  %207 = bitcast i8* %206 to i64*
  %208 = load i64, i64* %207, align 1
  %209 = bitcast i8* %201 to double*
  %210 = load double, double* %209, align 1
  %211 = fmul double %205, %210
  %212 = bitcast i8* %199 to double*
  store double %211, double* %212, align 1, !tbaa !2452
  %213 = getelementptr inbounds i8, i8* %199, i64 8
  %214 = bitcast i8* %213 to i64*
  store i64 %208, i64* %214, align 1, !tbaa !2452
  %215 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %216 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %217 = bitcast %union.vec128_t* %XMM1 to i8*
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC
  %220 = bitcast i8* %216 to double*
  %221 = load double, double* %220, align 1
  %222 = getelementptr inbounds i8, i8* %216, i64 8
  %223 = bitcast i8* %222 to i64*
  %224 = load i64, i64* %223, align 1
  %225 = bitcast i8* %217 to double*
  %226 = load double, double* %225, align 1
  %227 = fdiv double %221, %226
  %228 = bitcast i8* %215 to double*
  store double %227, double* %228, align 1, !tbaa !2452
  %229 = getelementptr inbounds i8, i8* %215, i64 8
  %230 = bitcast i8* %229 to i64*
  store i64 %224, i64* %230, align 1, !tbaa !2452
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 40
  %233 = bitcast %union.vec128_t* %XMM2 to i8*
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  %236 = bitcast i8* %233 to double*
  %237 = load double, double* %236, align 1
  %238 = inttoptr i64 %232 to double*
  store double %237, double* %238
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 48
  %241 = bitcast %union.vec128_t* %XMM0 to i8*
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 5
  store i64 %243, i64* %PC
  %244 = bitcast i8* %241 to double*
  %245 = load double, double* %244, align 1
  %246 = inttoptr i64 %240 to double*
  store double %245, double* %246
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 56
  %249 = bitcast %union.vec128_t* %XMM0 to i8*
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 5
  store i64 %251, i64* %PC
  %252 = bitcast i8* %249 to double*
  %253 = load double, double* %252, align 1
  %254 = inttoptr i64 %248 to double*
  store double %253, double* %254
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 60
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 7
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to i32*
  store i32 12, i32* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 28
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 7
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i32*
  store i32 0, i32* %264
  br label %block_400d16

block_400ebd:                                     ; preds = %block_400ecd, %block_400eb6
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400eb6 ], [ %MEMORY.0, %block_400ecd ]
  %265 = load i64, i64* %RBP
  %266 = sub i64 %265, 28
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 3
  store i64 %268, i64* %PC
  %269 = inttoptr i64 %266 to i32*
  %270 = load i32, i32* %269
  %271 = zext i32 %270 to i64
  store i64 %271, i64* %RAX, align 8, !tbaa !2428
  %272 = load i32, i32* %EAX
  %273 = zext i32 %272 to i64
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 7
  store i64 %275, i64* %PC
  %276 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %277 = sub i32 %272, %276
  %278 = icmp ult i32 %272, %276
  %279 = zext i1 %278 to i8
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %279, i8* %280, align 1, !tbaa !2433
  %281 = and i32 %277, 255
  %282 = call i32 @llvm.ctpop.i32(i32 %281) #16
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %285, i8* %286, align 1, !tbaa !2447
  %287 = xor i32 %276, %272
  %288 = xor i32 %287, %277
  %289 = lshr i32 %288, 4
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %291, i8* %292, align 1, !tbaa !2448
  %293 = icmp eq i32 %277, 0
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %294, i8* %295, align 1, !tbaa !2449
  %296 = lshr i32 %277, 31
  %297 = trunc i32 %296 to i8
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %297, i8* %298, align 1, !tbaa !2450
  %299 = lshr i32 %272, 31
  %300 = lshr i32 %276, 31
  %301 = xor i32 %300, %299
  %302 = xor i32 %296, %299
  %303 = add nuw nsw i32 %302, %301
  %304 = icmp eq i32 %303, 2
  %305 = zext i1 %304 to i8
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %305, i8* %306, align 1, !tbaa !2451
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 53
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 6
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 6
  store i64 %312, i64* %PC
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %314 = load i8, i8* %313, align 1, !tbaa !2450
  %315 = icmp ne i8 %314, 0
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %317 = load i8, i8* %316, align 1, !tbaa !2451
  %318 = icmp ne i8 %317, 0
  %319 = xor i1 %315, %318
  %320 = xor i1 %319, true
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %323 = select i1 %319, i64 %310, i64 %308
  store i64 %323, i64* %322, align 8, !tbaa !2428
  %324 = load i8, i8* %BRANCH_TAKEN
  %325 = icmp eq i8 %324, 1
  %326 = load i64, i64* %PC
  br i1 %325, label %block_400efc, label %block_400ecd

block_400efc:                                     ; preds = %block_400ebd
  %327 = add i64 %326, 10
  store i64 %327, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 203), i64* %RDI, align 8, !tbaa !2428
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 8
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 4
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i64*
  %333 = load i64, i64* %332
  store i64 %333, i64* %RSI, align 8, !tbaa !2428
  %334 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %335 = load i64, i64* %RBP
  %336 = sub i64 %335, 48
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %336 to double*
  %340 = load double, double* %339
  %341 = bitcast i8* %334 to double*
  store double %340, double* %341, align 1, !tbaa !2452
  %342 = getelementptr inbounds i8, i8* %334, i64 8
  %343 = bitcast i8* %342 to double*
  store double 0.000000e+00, double* %343, align 1, !tbaa !2452
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 2
  store i64 %345, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %346 = load i64, i64* %PC
  %347 = sub i64 %346, 2081
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 5
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 5
  store i64 %351, i64* %PC
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %353 = load i64, i64* %352, align 8, !tbaa !2428
  %354 = add i64 %353, -8
  %355 = inttoptr i64 %354 to i64*
  store i64 %349, i64* %355
  store i64 %354, i64* %352, align 8, !tbaa !2428
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %347, i64* %356, align 8, !tbaa !2428
  %357 = load i64, i64* %PC
  %358 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %357, %struct.Memory* %MEMORY.0)
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 8
  store i64 %360, i64* %PC
  %361 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %362 = sub i32 %361, 1
  %363 = icmp ult i32 %361, 1
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2433
  %366 = and i32 %362, 255
  %367 = call i32 @llvm.ctpop.i32(i32 %366) #16
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %370, i8* %371, align 1, !tbaa !2447
  %372 = xor i32 %361, 1
  %373 = xor i32 %372, %362
  %374 = lshr i32 %373, 4
  %375 = trunc i32 %374 to i8
  %376 = and i8 %375, 1
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %376, i8* %377, align 1, !tbaa !2448
  %378 = icmp eq i32 %362, 0
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %379, i8* %380, align 1, !tbaa !2449
  %381 = lshr i32 %362, 31
  %382 = trunc i32 %381 to i8
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %382, i8* %383, align 1, !tbaa !2450
  %384 = lshr i32 %361, 31
  %385 = xor i32 %381, %384
  %386 = add nuw nsw i32 %385, %384
  %387 = icmp eq i32 %386, 2
  %388 = zext i1 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %388, i8* %389, align 1, !tbaa !2451
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 112
  %392 = load i32, i32* %EAX
  %393 = zext i32 %392 to i64
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 3
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %391 to i32*
  store i32 %392, i32* %396
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 163
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 6
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 6
  store i64 %402, i64* %PC
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %404 = load i8, i8* %403, align 1, !tbaa !2449
  %405 = icmp ne i8 %404, 0
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %407 = load i8, i8* %406, align 1, !tbaa !2450
  %408 = icmp ne i8 %407, 0
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %410 = load i8, i8* %409, align 1, !tbaa !2451
  %411 = icmp ne i8 %410, 0
  %412 = xor i1 %408, %411
  %413 = or i1 %405, %412
  %414 = zext i1 %413 to i8
  store i8 %414, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %416 = select i1 %413, i64 %398, i64 %400
  store i64 %416, i64* %415, align 8, !tbaa !2428
  %417 = load i8, i8* %BRANCH_TAKEN
  %418 = icmp eq i8 %417, 1
  br i1 %418, label %block_400fc4, label %block_400f27

block_400dba:                                     ; preds = %block_400dca, %block_400d6c
  %MEMORY.1 = phi %struct.Memory* [ %1000, %block_400d6c ], [ %2060, %block_400dca ]
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 28
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 3
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i32*
  %424 = load i32, i32* %423
  %425 = zext i32 %424 to i64
  store i64 %425, i64* %RAX, align 8, !tbaa !2428
  %426 = load i32, i32* %EAX
  %427 = zext i32 %426 to i64
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 7
  store i64 %429, i64* %PC
  %430 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %431 = sub i32 %426, %430
  %432 = icmp ult i32 %426, %430
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %433, i8* %434, align 1, !tbaa !2433
  %435 = and i32 %431, 255
  %436 = call i32 @llvm.ctpop.i32(i32 %435) #16
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %439, i8* %440, align 1, !tbaa !2447
  %441 = xor i32 %430, %426
  %442 = xor i32 %441, %431
  %443 = lshr i32 %442, 4
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %445, i8* %446, align 1, !tbaa !2448
  %447 = icmp eq i32 %431, 0
  %448 = zext i1 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %448, i8* %449, align 1, !tbaa !2449
  %450 = lshr i32 %431, 31
  %451 = trunc i32 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %451, i8* %452, align 1, !tbaa !2450
  %453 = lshr i32 %426, 31
  %454 = lshr i32 %430, 31
  %455 = xor i32 %454, %453
  %456 = xor i32 %450, %453
  %457 = add nuw nsw i32 %456, %455
  %458 = icmp eq i32 %457, 2
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %459, i8* %460, align 1, !tbaa !2451
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 242
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 6
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 6
  store i64 %466, i64* %PC
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %468 = load i8, i8* %467, align 1, !tbaa !2450
  %469 = icmp ne i8 %468, 0
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %471 = load i8, i8* %470, align 1, !tbaa !2451
  %472 = icmp ne i8 %471, 0
  %473 = xor i1 %469, %472
  %474 = xor i1 %473, true
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %477 = select i1 %473, i64 %464, i64 %462
  store i64 %477, i64* %476, align 8, !tbaa !2428
  %478 = load i8, i8* %BRANCH_TAKEN
  %479 = icmp eq i8 %478, 1
  br i1 %479, label %block_400eb6, label %block_400dca

block_400d59:                                     ; preds = %block_400d26, %block_400d53
  %MEMORY.2 = phi %struct.Memory* [ %1296, %block_400d26 ], [ %1296, %block_400d53 ]
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 5
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 5
  store i64 %483, i64* %PC
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %481, i64* %484, align 8, !tbaa !2428
  %485 = load i64, i64* %RBP
  %486 = sub i64 %485, 28
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 3
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %486 to i32*
  %490 = load i32, i32* %489
  %491 = zext i32 %490 to i64
  store i64 %491, i64* %RAX, align 8, !tbaa !2428
  %492 = load i64, i64* %RAX
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = trunc i64 %492 to i32
  %496 = add i32 1, %495
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = icmp ult i32 %496, %495
  %499 = icmp ult i32 %496, 1
  %500 = or i1 %498, %499
  %501 = zext i1 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %501, i8* %502, align 1, !tbaa !2433
  %503 = and i32 %496, 255
  %504 = call i32 @llvm.ctpop.i32(i32 %503) #16
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %507, i8* %508, align 1, !tbaa !2447
  %509 = xor i64 1, %492
  %510 = trunc i64 %509 to i32
  %511 = xor i32 %510, %496
  %512 = lshr i32 %511, 4
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %514, i8* %515, align 1, !tbaa !2448
  %516 = icmp eq i32 %496, 0
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %517, i8* %518, align 1, !tbaa !2449
  %519 = lshr i32 %496, 31
  %520 = trunc i32 %519 to i8
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %520, i8* %521, align 1, !tbaa !2450
  %522 = lshr i32 %495, 31
  %523 = xor i32 %519, %522
  %524 = add nuw nsw i32 %523, %519
  %525 = icmp eq i32 %524, 2
  %526 = zext i1 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %526, i8* %527, align 1, !tbaa !2451
  %528 = load i64, i64* %RBP
  %529 = sub i64 %528, 28
  %530 = load i32, i32* %EAX
  %531 = zext i32 %530 to i64
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 3
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %529 to i32*
  store i32 %530, i32* %534
  %535 = load i64, i64* %PC
  %536 = sub i64 %535, 81
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 5
  store i64 %538, i64* %PC
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %536, i64* %539, align 8, !tbaa !2428
  br label %block_400d16

block_400d53:                                     ; preds = %block_400d26
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 64
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 3
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i32*
  %545 = load i32, i32* %544
  %546 = zext i32 %545 to i64
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 60
  %549 = load i32, i32* %EAX
  %550 = zext i32 %549 to i64
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  %553 = inttoptr i64 %548 to i32*
  store i32 %549, i32* %553
  br label %block_400d59

block_400f88:                                     ; preds = %block_400f38
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 8
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 4
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i64*
  %559 = load i64, i64* %558
  store i64 %559, i64* %RSI, align 8, !tbaa !2428
  %560 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 56
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 5
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to double*
  %566 = load double, double* %565
  %567 = bitcast i8* %560 to double*
  store double %566, double* %567, align 1, !tbaa !2452
  %568 = getelementptr inbounds i8, i8* %560, i64 8
  %569 = bitcast i8* %568 to double*
  store double 0.000000e+00, double* %569, align 1, !tbaa !2452
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 7
  store i64 %571, i64* %PC
  %572 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %573 = zext i32 %572 to i64
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = load i64, i64* %RAX
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 3
  store i64 %576, i64* %PC
  %577 = trunc i64 %574 to i32
  %578 = sub i32 %577, 1
  %579 = zext i32 %578 to i64
  store i64 %579, i64* %RAX, align 8, !tbaa !2428
  %580 = icmp ult i32 %577, 1
  %581 = zext i1 %580 to i8
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %581, i8* %582, align 1, !tbaa !2433
  %583 = and i32 %578, 255
  %584 = call i32 @llvm.ctpop.i32(i32 %583) #16
  %585 = trunc i32 %584 to i8
  %586 = and i8 %585, 1
  %587 = xor i8 %586, 1
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %587, i8* %588, align 1, !tbaa !2447
  %589 = xor i64 1, %574
  %590 = trunc i64 %589 to i32
  %591 = xor i32 %590, %578
  %592 = lshr i32 %591, 4
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %594, i8* %595, align 1, !tbaa !2448
  %596 = icmp eq i32 %578, 0
  %597 = zext i1 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %597, i8* %598, align 1, !tbaa !2449
  %599 = lshr i32 %578, 31
  %600 = trunc i32 %599 to i8
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %600, i8* %601, align 1, !tbaa !2450
  %602 = lshr i32 %577, 31
  %603 = xor i32 %599, %602
  %604 = add nuw nsw i32 %603, %602
  %605 = icmp eq i32 %604, 2
  %606 = zext i1 %605 to i8
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %606, i8* %607, align 1, !tbaa !2451
  %608 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %609 = load i32, i32* %EAX
  %610 = zext i32 %609 to i64
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC
  %613 = sitofp i32 %609 to double
  %614 = bitcast i8* %608 to double*
  store double %613, double* %614, align 1, !tbaa !2452
  %615 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %616 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %617 = bitcast %union.vec128_t* %XMM1 to i8*
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 4
  store i64 %619, i64* %PC
  %620 = bitcast i8* %616 to double*
  %621 = load double, double* %620, align 1
  %622 = getelementptr inbounds i8, i8* %616, i64 8
  %623 = bitcast i8* %622 to i64*
  %624 = load i64, i64* %623, align 1
  %625 = bitcast i8* %617 to double*
  %626 = load double, double* %625, align 1
  %627 = fdiv double %621, %626
  %628 = bitcast i8* %615 to double*
  store double %627, double* %628, align 1, !tbaa !2452
  %629 = getelementptr inbounds i8, i8* %615, i64 8
  %630 = bitcast i8* %629 to i64*
  store i64 %624, i64* %630, align 1, !tbaa !2452
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 120
  %633 = load i64, i64* %RSI
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %632 to i64*
  store i64 %633, i64* %636
  %637 = load i64, i64* %PC
  %638 = sub i64 %637, 2295
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 5
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 5
  store i64 %642, i64* %PC
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %644 = load i64, i64* %643, align 8, !tbaa !2428
  %645 = add i64 %644, -8
  %646 = inttoptr i64 %645 to i64*
  store i64 %640, i64* %646
  store i64 %645, i64* %643, align 8, !tbaa !2428
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %638, i64* %647, align 8, !tbaa !2428
  %648 = load i64, i64* %PC
  %649 = call %struct.Memory* @ext_6208f8_exp(%struct.State* %0, i64 %648, %struct.Memory* %MEMORY.3)
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 10
  store i64 %651, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 242), i64* %RDI, align 8, !tbaa !2428
  %652 = load i64, i64* %RBP
  %653 = sub i64 %652, 120
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 4
  store i64 %655, i64* %PC
  %656 = inttoptr i64 %653 to i64*
  %657 = load i64, i64* %656
  store i64 %657, i64* %RSI, align 8, !tbaa !2428
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 2
  store i64 %659, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %660 = load i64, i64* %PC
  %661 = sub i64 %660, 2252
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 5
  store i64 %665, i64* %PC
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %667 = load i64, i64* %666, align 8, !tbaa !2428
  %668 = add i64 %667, -8
  %669 = inttoptr i64 %668 to i64*
  store i64 %663, i64* %669
  store i64 %668, i64* %666, align 8, !tbaa !2428
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %661, i64* %670, align 8, !tbaa !2428
  %671 = load i64, i64* %PC
  %672 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %671, %struct.Memory* %649)
  %673 = load i64, i64* %RBP
  %674 = sub i64 %673, 124
  %675 = load i32, i32* %EAX
  %676 = zext i32 %675 to i64
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 3
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %674 to i32*
  store i32 %675, i32* %679
  br label %block_400fc4

block_400eb6:                                     ; preds = %block_400dba
  %680 = load i64, i64* %RBP
  %681 = sub i64 %680, 28
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 7
  store i64 %683, i64* %PC
  %684 = inttoptr i64 %681 to i32*
  store i32 0, i32* %684
  br label %block_400ebd

block_400ecd:                                     ; preds = %block_400ebd
  %685 = add i64 %326, 8
  store i64 %685, i64* %PC
  %686 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %686, i64* %RAX, align 8, !tbaa !2428
  %687 = load i64, i64* %RBP
  %688 = sub i64 %687, 28
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 4
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %688 to i32*
  %692 = load i32, i32* %691
  %693 = sext i32 %692 to i64
  store i64 %693, i64* %RCX, align 8, !tbaa !2428
  %694 = load i64, i64* %RCX
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC
  %697 = shl i64 %694, 3
  %698 = icmp slt i64 %697, 0
  %699 = shl i64 %697, 1
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %701 = zext i1 %698 to i8
  store i8 %701, i8* %700, align 1, !tbaa !2432
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %703 = trunc i64 %699 to i32
  %704 = and i32 %703, 254
  %705 = call i32 @llvm.ctpop.i32(i32 %704) #16
  %706 = trunc i32 %705 to i8
  %707 = and i8 %706, 1
  %708 = xor i8 %707, 1
  store i8 %708, i8* %702, align 1, !tbaa !2432
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %709, align 1, !tbaa !2432
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %711 = icmp eq i64 %699, 0
  %712 = zext i1 %711 to i8
  store i8 %712, i8* %710, align 1, !tbaa !2432
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %714 = lshr i64 %699, 63
  %715 = trunc i64 %714 to i8
  store i8 %715, i8* %713, align 1, !tbaa !2432
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %716, align 1, !tbaa !2432
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %RCX
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 3
  store i64 %720, i64* %PC
  %721 = add i64 %718, %717
  store i64 %721, i64* %RAX, align 8, !tbaa !2428
  %722 = icmp ult i64 %721, %717
  %723 = icmp ult i64 %721, %718
  %724 = or i1 %722, %723
  %725 = zext i1 %724 to i8
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %725, i8* %726, align 1, !tbaa !2433
  %727 = trunc i64 %721 to i32
  %728 = and i32 %727, 255
  %729 = call i32 @llvm.ctpop.i32(i32 %728) #16
  %730 = trunc i32 %729 to i8
  %731 = and i8 %730, 1
  %732 = xor i8 %731, 1
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %732, i8* %733, align 1, !tbaa !2447
  %734 = xor i64 %718, %717
  %735 = xor i64 %734, %721
  %736 = lshr i64 %735, 4
  %737 = trunc i64 %736 to i8
  %738 = and i8 %737, 1
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %738, i8* %739, align 1, !tbaa !2448
  %740 = icmp eq i64 %721, 0
  %741 = zext i1 %740 to i8
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %741, i8* %742, align 1, !tbaa !2449
  %743 = lshr i64 %721, 63
  %744 = trunc i64 %743 to i8
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %744, i8* %745, align 1, !tbaa !2450
  %746 = lshr i64 %717, 63
  %747 = lshr i64 %718, 63
  %748 = xor i64 %743, %746
  %749 = xor i64 %743, %747
  %750 = add nuw nsw i64 %748, %749
  %751 = icmp eq i64 %750, 2
  %752 = zext i1 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %752, i8* %753, align 1, !tbaa !2451
  %754 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %755 = load i64, i64* %RAX
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 4
  store i64 %757, i64* %PC
  %758 = inttoptr i64 %755 to double*
  %759 = load double, double* %758
  %760 = bitcast i8* %754 to double*
  store double %759, double* %760, align 1, !tbaa !2452
  %761 = getelementptr inbounds i8, i8* %754, i64 8
  %762 = bitcast i8* %761 to double*
  store double 0.000000e+00, double* %762, align 1, !tbaa !2452
  %763 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %764 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 48
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 5
  store i64 %768, i64* %PC
  %769 = bitcast i8* %764 to double*
  %770 = load double, double* %769, align 1
  %771 = getelementptr inbounds i8, i8* %764, i64 8
  %772 = bitcast i8* %771 to i64*
  %773 = load i64, i64* %772, align 1
  %774 = inttoptr i64 %766 to double*
  %775 = load double, double* %774
  %776 = fadd double %770, %775
  %777 = bitcast i8* %763 to double*
  store double %776, double* %777, align 1, !tbaa !2452
  %778 = getelementptr inbounds i8, i8* %763, i64 8
  %779 = bitcast i8* %778 to i64*
  store i64 %773, i64* %779, align 1, !tbaa !2452
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 48
  %782 = bitcast %union.vec128_t* %XMM0 to i8*
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 5
  store i64 %784, i64* %PC
  %785 = bitcast i8* %782 to double*
  %786 = load double, double* %785, align 1
  %787 = inttoptr i64 %781 to double*
  store double %786, double* %787
  %788 = load i64, i64* %RBP
  %789 = sub i64 %788, 28
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = zext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 3
  store i64 %797, i64* %PC
  %798 = trunc i64 %795 to i32
  %799 = add i32 1, %798
  %800 = zext i32 %799 to i64
  store i64 %800, i64* %RAX, align 8, !tbaa !2428
  %801 = icmp ult i32 %799, %798
  %802 = icmp ult i32 %799, 1
  %803 = or i1 %801, %802
  %804 = zext i1 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %804, i8* %805, align 1, !tbaa !2433
  %806 = and i32 %799, 255
  %807 = call i32 @llvm.ctpop.i32(i32 %806) #16
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = xor i8 %809, 1
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %810, i8* %811, align 1, !tbaa !2447
  %812 = xor i64 1, %795
  %813 = trunc i64 %812 to i32
  %814 = xor i32 %813, %799
  %815 = lshr i32 %814, 4
  %816 = trunc i32 %815 to i8
  %817 = and i8 %816, 1
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %817, i8* %818, align 1, !tbaa !2448
  %819 = icmp eq i32 %799, 0
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %820, i8* %821, align 1, !tbaa !2449
  %822 = lshr i32 %799, 31
  %823 = trunc i32 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %823, i8* %824, align 1, !tbaa !2450
  %825 = lshr i32 %798, 31
  %826 = xor i32 %822, %825
  %827 = add nuw nsw i32 %826, %822
  %828 = icmp eq i32 %827, 2
  %829 = zext i1 %828 to i8
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %829, i8* %830, align 1, !tbaa !2451
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 28
  %833 = load i32, i32* %EAX
  %834 = zext i32 %833 to i64
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 3
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %832 to i32*
  store i32 %833, i32* %837
  %838 = load i64, i64* %PC
  %839 = sub i64 %838, 58
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 5
  store i64 %841, i64* %PC
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %839, i64* %842, align 8, !tbaa !2428
  br label %block_400ebd

block_400f38:                                     ; preds = %block_400f48, %block_400f31
  %MEMORY.3 = phi %struct.Memory* [ %358, %block_400f31 ], [ %1128, %block_400f48 ]
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 28
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  %847 = inttoptr i64 %844 to i32*
  %848 = load i32, i32* %847
  %849 = zext i32 %848 to i64
  store i64 %849, i64* %RAX, align 8, !tbaa !2428
  %850 = load i32, i32* %EAX
  %851 = zext i32 %850 to i64
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 7
  store i64 %853, i64* %PC
  %854 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %855 = sub i32 %850, %854
  %856 = icmp ult i32 %850, %854
  %857 = zext i1 %856 to i8
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %857, i8* %858, align 1, !tbaa !2433
  %859 = and i32 %855, 255
  %860 = call i32 @llvm.ctpop.i32(i32 %859) #16
  %861 = trunc i32 %860 to i8
  %862 = and i8 %861, 1
  %863 = xor i8 %862, 1
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %863, i8* %864, align 1, !tbaa !2447
  %865 = xor i32 %854, %850
  %866 = xor i32 %865, %855
  %867 = lshr i32 %866, 4
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %869, i8* %870, align 1, !tbaa !2448
  %871 = icmp eq i32 %855, 0
  %872 = zext i1 %871 to i8
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %872, i8* %873, align 1, !tbaa !2449
  %874 = lshr i32 %855, 31
  %875 = trunc i32 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %875, i8* %876, align 1, !tbaa !2450
  %877 = lshr i32 %850, 31
  %878 = lshr i32 %854, 31
  %879 = xor i32 %878, %877
  %880 = xor i32 %874, %877
  %881 = add nuw nsw i32 %880, %879
  %882 = icmp eq i32 %881, 2
  %883 = zext i1 %882 to i8
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %883, i8* %884, align 1, !tbaa !2451
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 70
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 6
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 6
  store i64 %890, i64* %PC
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %892 = load i8, i8* %891, align 1, !tbaa !2450
  %893 = icmp ne i8 %892, 0
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %895 = load i8, i8* %894, align 1, !tbaa !2451
  %896 = icmp ne i8 %895, 0
  %897 = xor i1 %893, %896
  %898 = xor i1 %897, true
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %901 = select i1 %897, i64 %888, i64 %886
  store i64 %901, i64* %900, align 8, !tbaa !2428
  %902 = load i8, i8* %BRANCH_TAKEN
  %903 = icmp eq i8 %902, 1
  br i1 %903, label %block_400f88, label %block_400f48

block_400d6c:                                     ; preds = %block_400d16
  %904 = add i64 %1476, 10
  store i64 %904, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 55), i64* %RDI, align 8, !tbaa !2428
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 10
  store i64 %906, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 115), i64* %RDX, align 8, !tbaa !2428
  %907 = load i64, i64* %RBP
  %908 = sub i64 %907, 60
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 3
  store i64 %910, i64* %PC
  %911 = inttoptr i64 %908 to i32*
  %912 = load i32, i32* %911
  %913 = zext i32 %912 to i64
  store i64 %913, i64* %RAX, align 8, !tbaa !2428
  %914 = load i64, i64* %RAX
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 3
  store i64 %916, i64* %PC
  %917 = trunc i64 %914 to i32
  %918 = sub i32 %917, 12
  %919 = zext i32 %918 to i64
  store i64 %919, i64* %RAX, align 8, !tbaa !2428
  %920 = icmp ult i32 %917, 12
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %921, i8* %922, align 1, !tbaa !2433
  %923 = and i32 %918, 255
  %924 = call i32 @llvm.ctpop.i32(i32 %923) #16
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %927, i8* %928, align 1, !tbaa !2447
  %929 = xor i64 12, %914
  %930 = trunc i64 %929 to i32
  %931 = xor i32 %930, %918
  %932 = lshr i32 %931, 4
  %933 = trunc i32 %932 to i8
  %934 = and i8 %933, 1
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %934, i8* %935, align 1, !tbaa !2448
  %936 = icmp eq i32 %918, 0
  %937 = zext i1 %936 to i8
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %937, i8* %938, align 1, !tbaa !2449
  %939 = lshr i32 %918, 31
  %940 = trunc i32 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %940, i8* %941, align 1, !tbaa !2450
  %942 = lshr i32 %917, 31
  %943 = xor i32 %939, %942
  %944 = add nuw nsw i32 %943, %942
  %945 = icmp eq i32 %944, 2
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %946, i8* %947, align 1, !tbaa !2451
  %948 = load i32, i32* %EAX
  %949 = zext i32 %948 to i64
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 2
  store i64 %951, i64* %PC
  %952 = and i64 %949, 4294967295
  store i64 %952, i64* %RSI, align 8, !tbaa !2428
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 2
  store i64 %954, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %955 = load i64, i64* %PC
  %956 = sub i64 %955, 1690
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 5
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 5
  store i64 %960, i64* %PC
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %962 = load i64, i64* %961, align 8, !tbaa !2428
  %963 = add i64 %962, -8
  %964 = inttoptr i64 %963 to i64*
  store i64 %958, i64* %964
  store i64 %963, i64* %961, align 8, !tbaa !2428
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %956, i64* %965, align 8, !tbaa !2428
  %966 = load i64, i64* %PC
  %967 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %966, %struct.Memory* %MEMORY.4)
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 10
  store i64 %969, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 117), i64* %RDI, align 8, !tbaa !2428
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 10
  store i64 %971, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 115), i64* %RDX, align 8, !tbaa !2428
  %972 = load i64, i64* %RBP
  %973 = sub i64 %972, 60
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 3
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %973 to i32*
  %977 = load i32, i32* %976
  %978 = zext i32 %977 to i64
  store i64 %978, i64* %RSI, align 8, !tbaa !2428
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 68
  %981 = load i32, i32* %EAX
  %982 = zext i32 %981 to i64
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 3
  store i64 %984, i64* %PC
  %985 = inttoptr i64 %980 to i32*
  store i32 %981, i32* %985
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 2
  store i64 %987, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %988 = load i64, i64* %PC
  %989 = sub i64 %988, 1723
  %990 = load i64, i64* %PC
  %991 = add i64 %990, 5
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 5
  store i64 %993, i64* %PC
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %995 = load i64, i64* %994, align 8, !tbaa !2428
  %996 = add i64 %995, -8
  %997 = inttoptr i64 %996 to i64*
  store i64 %991, i64* %997
  store i64 %996, i64* %994, align 8, !tbaa !2428
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %989, i64* %998, align 8, !tbaa !2428
  %999 = load i64, i64* %PC
  %1000 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %999, %struct.Memory* %967)
  %1001 = load i64, i64* %RBP
  %1002 = sub i64 %1001, 28
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 7
  store i64 %1004, i64* %PC
  %1005 = inttoptr i64 %1002 to i32*
  store i32 0, i32* %1005
  %1006 = load i64, i64* %RBP
  %1007 = sub i64 %1006, 72
  %1008 = load i32, i32* %EAX
  %1009 = zext i32 %1008 to i64
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 3
  store i64 %1011, i64* %PC
  %1012 = inttoptr i64 %1007 to i32*
  store i32 %1008, i32* %1012
  br label %block_400dba

block_400f31:                                     ; preds = %block_400f27
  %1013 = load i64, i64* %RBP
  %1014 = sub i64 %1013, 28
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 7
  store i64 %1016, i64* %PC
  %1017 = inttoptr i64 %1014 to i32*
  store i32 1, i32* %1017
  br label %block_400f38

block_400f48:                                     ; preds = %block_400f38
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 8
  store i64 %1019, i64* %PC
  %1020 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1020, i64* %RAX, align 8, !tbaa !2428
  %1021 = load i64, i64* %RBP
  %1022 = sub i64 %1021, 28
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 4
  store i64 %1024, i64* %PC
  %1025 = inttoptr i64 %1022 to i32*
  %1026 = load i32, i32* %1025
  %1027 = sext i32 %1026 to i64
  store i64 %1027, i64* %RCX, align 8, !tbaa !2428
  %1028 = load i64, i64* %RCX
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 4
  store i64 %1030, i64* %PC
  %1031 = shl i64 %1028, 3
  %1032 = icmp slt i64 %1031, 0
  %1033 = shl i64 %1031, 1
  store i64 %1033, i64* %RCX, align 8, !tbaa !2428
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1035 = zext i1 %1032 to i8
  store i8 %1035, i8* %1034, align 1, !tbaa !2432
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1037 = trunc i64 %1033 to i32
  %1038 = and i32 %1037, 254
  %1039 = call i32 @llvm.ctpop.i32(i32 %1038) #16
  %1040 = trunc i32 %1039 to i8
  %1041 = and i8 %1040, 1
  %1042 = xor i8 %1041, 1
  store i8 %1042, i8* %1036, align 1, !tbaa !2432
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1043, align 1, !tbaa !2432
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1045 = icmp eq i64 %1033, 0
  %1046 = zext i1 %1045 to i8
  store i8 %1046, i8* %1044, align 1, !tbaa !2432
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1048 = lshr i64 %1033, 63
  %1049 = trunc i64 %1048 to i8
  store i8 %1049, i8* %1047, align 1, !tbaa !2432
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1050, align 1, !tbaa !2432
  %1051 = load i64, i64* %RAX
  %1052 = load i64, i64* %RCX
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 3
  store i64 %1054, i64* %PC
  %1055 = add i64 %1052, %1051
  store i64 %1055, i64* %RAX, align 8, !tbaa !2428
  %1056 = icmp ult i64 %1055, %1051
  %1057 = icmp ult i64 %1055, %1052
  %1058 = or i1 %1056, %1057
  %1059 = zext i1 %1058 to i8
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1059, i8* %1060, align 1, !tbaa !2433
  %1061 = trunc i64 %1055 to i32
  %1062 = and i32 %1061, 255
  %1063 = call i32 @llvm.ctpop.i32(i32 %1062) #16
  %1064 = trunc i32 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = xor i8 %1065, 1
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1066, i8* %1067, align 1, !tbaa !2447
  %1068 = xor i64 %1052, %1051
  %1069 = xor i64 %1068, %1055
  %1070 = lshr i64 %1069, 4
  %1071 = trunc i64 %1070 to i8
  %1072 = and i8 %1071, 1
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1072, i8* %1073, align 1, !tbaa !2448
  %1074 = icmp eq i64 %1055, 0
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1075, i8* %1076, align 1, !tbaa !2449
  %1077 = lshr i64 %1055, 63
  %1078 = trunc i64 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1078, i8* %1079, align 1, !tbaa !2450
  %1080 = lshr i64 %1051, 63
  %1081 = lshr i64 %1052, 63
  %1082 = xor i64 %1077, %1080
  %1083 = xor i64 %1077, %1081
  %1084 = add nuw nsw i64 %1082, %1083
  %1085 = icmp eq i64 %1084, 2
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1086, i8* %1087, align 1, !tbaa !2451
  %1088 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1089 = load i64, i64* %RAX
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to double*
  %1093 = load double, double* %1092
  %1094 = bitcast i8* %1088 to double*
  store double %1093, double* %1094, align 1, !tbaa !2452
  %1095 = getelementptr inbounds i8, i8* %1088, i64 8
  %1096 = bitcast i8* %1095 to double*
  store double 0.000000e+00, double* %1096, align 1, !tbaa !2452
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 8
  store i64 %1098, i64* %PC
  %1099 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1099, i64* %RAX, align 8, !tbaa !2428
  %1100 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1101 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1102 = load i64, i64* %RAX
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 4
  store i64 %1104, i64* %PC
  %1105 = bitcast i8* %1101 to double*
  %1106 = load double, double* %1105, align 1
  %1107 = getelementptr inbounds i8, i8* %1101, i64 8
  %1108 = bitcast i8* %1107 to i64*
  %1109 = load i64, i64* %1108, align 1
  %1110 = inttoptr i64 %1102 to double*
  %1111 = load double, double* %1110
  %1112 = fdiv double %1106, %1111
  %1113 = bitcast i8* %1100 to double*
  store double %1112, double* %1113, align 1, !tbaa !2452
  %1114 = getelementptr inbounds i8, i8* %1100, i64 8
  %1115 = bitcast i8* %1114 to i64*
  store i64 %1109, i64* %1115, align 1, !tbaa !2452
  %1116 = load i64, i64* %PC
  %1117 = sub i64 %1116, 2155
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 5
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 5
  store i64 %1121, i64* %PC
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1123 = load i64, i64* %1122, align 8, !tbaa !2428
  %1124 = add i64 %1123, -8
  %1125 = inttoptr i64 %1124 to i64*
  store i64 %1119, i64* %1125
  store i64 %1124, i64* %1122, align 8, !tbaa !2428
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1117, i64* %1126, align 8, !tbaa !2428
  %1127 = load i64, i64* %PC
  %1128 = call %struct.Memory* @ext_6208b8_log(%struct.State* %0, i64 %1127, %struct.Memory* %MEMORY.3)
  %1129 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 56
  %1133 = load i64, i64* %PC
  %1134 = add i64 %1133, 5
  store i64 %1134, i64* %PC
  %1135 = bitcast i8* %1130 to double*
  %1136 = load double, double* %1135, align 1
  %1137 = getelementptr inbounds i8, i8* %1130, i64 8
  %1138 = bitcast i8* %1137 to i64*
  %1139 = load i64, i64* %1138, align 1
  %1140 = inttoptr i64 %1132 to double*
  %1141 = load double, double* %1140
  %1142 = fadd double %1136, %1141
  %1143 = bitcast i8* %1129 to double*
  store double %1142, double* %1143, align 1, !tbaa !2452
  %1144 = getelementptr inbounds i8, i8* %1129, i64 8
  %1145 = bitcast i8* %1144 to i64*
  store i64 %1139, i64* %1145, align 1, !tbaa !2452
  %1146 = load i64, i64* %RBP
  %1147 = sub i64 %1146, 56
  %1148 = bitcast %union.vec128_t* %XMM0 to i8*
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 5
  store i64 %1150, i64* %PC
  %1151 = bitcast i8* %1148 to double*
  %1152 = load double, double* %1151, align 1
  %1153 = inttoptr i64 %1147 to double*
  store double %1152, double* %1153
  %1154 = load i64, i64* %RBP
  %1155 = sub i64 %1154, 28
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 3
  store i64 %1157, i64* %PC
  %1158 = inttoptr i64 %1155 to i32*
  %1159 = load i32, i32* %1158
  %1160 = zext i32 %1159 to i64
  store i64 %1160, i64* %RAX, align 8, !tbaa !2428
  %1161 = load i64, i64* %RAX
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 3
  store i64 %1163, i64* %PC
  %1164 = trunc i64 %1161 to i32
  %1165 = add i32 1, %1164
  %1166 = zext i32 %1165 to i64
  store i64 %1166, i64* %RAX, align 8, !tbaa !2428
  %1167 = icmp ult i32 %1165, %1164
  %1168 = icmp ult i32 %1165, 1
  %1169 = or i1 %1167, %1168
  %1170 = zext i1 %1169 to i8
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1170, i8* %1171, align 1, !tbaa !2433
  %1172 = and i32 %1165, 255
  %1173 = call i32 @llvm.ctpop.i32(i32 %1172) #16
  %1174 = trunc i32 %1173 to i8
  %1175 = and i8 %1174, 1
  %1176 = xor i8 %1175, 1
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1176, i8* %1177, align 1, !tbaa !2447
  %1178 = xor i64 1, %1161
  %1179 = trunc i64 %1178 to i32
  %1180 = xor i32 %1179, %1165
  %1181 = lshr i32 %1180, 4
  %1182 = trunc i32 %1181 to i8
  %1183 = and i8 %1182, 1
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1183, i8* %1184, align 1, !tbaa !2448
  %1185 = icmp eq i32 %1165, 0
  %1186 = zext i1 %1185 to i8
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1186, i8* %1187, align 1, !tbaa !2449
  %1188 = lshr i32 %1165, 31
  %1189 = trunc i32 %1188 to i8
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1189, i8* %1190, align 1, !tbaa !2450
  %1191 = lshr i32 %1164, 31
  %1192 = xor i32 %1188, %1191
  %1193 = add nuw nsw i32 %1192, %1188
  %1194 = icmp eq i32 %1193, 2
  %1195 = zext i1 %1194 to i8
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1195, i8* %1196, align 1, !tbaa !2451
  %1197 = load i64, i64* %RBP
  %1198 = sub i64 %1197, 28
  %1199 = load i32, i32* %EAX
  %1200 = zext i32 %1199 to i64
  %1201 = load i64, i64* %PC
  %1202 = add i64 %1201, 3
  store i64 %1202, i64* %PC
  %1203 = inttoptr i64 %1198 to i32*
  store i32 %1199, i32* %1203
  %1204 = load i64, i64* %PC
  %1205 = sub i64 %1204, 75
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 5
  store i64 %1207, i64* %PC
  %1208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1205, i64* %1208, align 8, !tbaa !2428
  br label %block_400f38

block_400d26:                                     ; preds = %block_400d16
  %1209 = add i64 %1476, 8
  store i64 %1209, i64* %PC
  %1210 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1210, i64* %RAX, align 8, !tbaa !2428
  %1211 = load i64, i64* %RBP
  %1212 = sub i64 %1211, 28
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 4
  store i64 %1214, i64* %PC
  %1215 = inttoptr i64 %1212 to i32*
  %1216 = load i32, i32* %1215
  %1217 = sext i32 %1216 to i64
  store i64 %1217, i64* %RCX, align 8, !tbaa !2428
  %1218 = load i64, i64* %RCX
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 4
  store i64 %1220, i64* %PC
  %1221 = shl i64 %1218, 3
  %1222 = icmp slt i64 %1221, 0
  %1223 = shl i64 %1221, 1
  store i64 %1223, i64* %RCX, align 8, !tbaa !2428
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1225 = zext i1 %1222 to i8
  store i8 %1225, i8* %1224, align 1, !tbaa !2432
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1227 = trunc i64 %1223 to i32
  %1228 = and i32 %1227, 254
  %1229 = call i32 @llvm.ctpop.i32(i32 %1228) #16
  %1230 = trunc i32 %1229 to i8
  %1231 = and i8 %1230, 1
  %1232 = xor i8 %1231, 1
  store i8 %1232, i8* %1226, align 1, !tbaa !2432
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1233, align 1, !tbaa !2432
  %1234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1235 = icmp eq i64 %1223, 0
  %1236 = zext i1 %1235 to i8
  store i8 %1236, i8* %1234, align 1, !tbaa !2432
  %1237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1238 = lshr i64 %1223, 63
  %1239 = trunc i64 %1238 to i8
  store i8 %1239, i8* %1237, align 1, !tbaa !2432
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1240, align 1, !tbaa !2432
  %1241 = load i64, i64* %RAX
  %1242 = load i64, i64* %RCX
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 3
  store i64 %1244, i64* %PC
  %1245 = add i64 %1242, %1241
  store i64 %1245, i64* %RAX, align 8, !tbaa !2428
  %1246 = icmp ult i64 %1245, %1241
  %1247 = icmp ult i64 %1245, %1242
  %1248 = or i1 %1246, %1247
  %1249 = zext i1 %1248 to i8
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1249, i8* %1250, align 1, !tbaa !2433
  %1251 = trunc i64 %1245 to i32
  %1252 = and i32 %1251, 255
  %1253 = call i32 @llvm.ctpop.i32(i32 %1252) #16
  %1254 = trunc i32 %1253 to i8
  %1255 = and i8 %1254, 1
  %1256 = xor i8 %1255, 1
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1256, i8* %1257, align 1, !tbaa !2447
  %1258 = xor i64 %1242, %1241
  %1259 = xor i64 %1258, %1245
  %1260 = lshr i64 %1259, 4
  %1261 = trunc i64 %1260 to i8
  %1262 = and i8 %1261, 1
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1262, i8* %1263, align 1, !tbaa !2448
  %1264 = icmp eq i64 %1245, 0
  %1265 = zext i1 %1264 to i8
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1265, i8* %1266, align 1, !tbaa !2449
  %1267 = lshr i64 %1245, 63
  %1268 = trunc i64 %1267 to i8
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1268, i8* %1269, align 1, !tbaa !2450
  %1270 = lshr i64 %1241, 63
  %1271 = lshr i64 %1242, 63
  %1272 = xor i64 %1267, %1270
  %1273 = xor i64 %1267, %1271
  %1274 = add nuw nsw i64 %1272, %1273
  %1275 = icmp eq i64 %1274, 2
  %1276 = zext i1 %1275 to i8
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1276, i8* %1277, align 1, !tbaa !2451
  %1278 = load i64, i64* %RAX
  %1279 = add i64 %1278, 8
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 4
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i64*
  %1283 = load i64, i64* %1282
  store i64 %1283, i64* %RDI, align 8, !tbaa !2428
  %1284 = load i64, i64* %PC
  %1285 = sub i64 %1284, 1629
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 5
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 5
  store i64 %1289, i64* %PC
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1291 = load i64, i64* %1290, align 8, !tbaa !2428
  %1292 = add i64 %1291, -8
  %1293 = inttoptr i64 %1292 to i64*
  store i64 %1287, i64* %1293
  store i64 %1292, i64* %1290, align 8, !tbaa !2428
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1285, i64* %1294, align 8, !tbaa !2428
  %1295 = load i64, i64* %PC
  %1296 = call %struct.Memory* @ext_4006e0_strlen(%struct.State* %0, i64 %1295, %struct.Memory* %MEMORY.4)
  %1297 = load i32, i32* %EAX
  %1298 = zext i32 %1297 to i64
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 2
  store i64 %1300, i64* %PC
  %1301 = and i64 %1298, 4294967295
  store i64 %1301, i64* %RDX, align 8, !tbaa !2428
  %1302 = load i64, i64* %RBP
  %1303 = sub i64 %1302, 64
  %1304 = load i32, i32* %EDX
  %1305 = zext i32 %1304 to i64
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 3
  store i64 %1307, i64* %PC
  %1308 = inttoptr i64 %1303 to i32*
  store i32 %1304, i32* %1308
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 64
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 3
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1310 to i32*
  %1314 = load i32, i32* %1313
  %1315 = zext i32 %1314 to i64
  store i64 %1315, i64* %RDX, align 8, !tbaa !2428
  %1316 = load i32, i32* %EDX
  %1317 = zext i32 %1316 to i64
  %1318 = load i64, i64* %RBP
  %1319 = sub i64 %1318, 60
  %1320 = load i64, i64* %PC
  %1321 = add i64 %1320, 3
  store i64 %1321, i64* %PC
  %1322 = inttoptr i64 %1319 to i32*
  %1323 = load i32, i32* %1322
  %1324 = sub i32 %1316, %1323
  %1325 = icmp ult i32 %1316, %1323
  %1326 = zext i1 %1325 to i8
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1326, i8* %1327, align 1, !tbaa !2433
  %1328 = and i32 %1324, 255
  %1329 = call i32 @llvm.ctpop.i32(i32 %1328) #16
  %1330 = trunc i32 %1329 to i8
  %1331 = and i8 %1330, 1
  %1332 = xor i8 %1331, 1
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1332, i8* %1333, align 1, !tbaa !2447
  %1334 = xor i32 %1323, %1316
  %1335 = xor i32 %1334, %1324
  %1336 = lshr i32 %1335, 4
  %1337 = trunc i32 %1336 to i8
  %1338 = and i8 %1337, 1
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1338, i8* %1339, align 1, !tbaa !2448
  %1340 = icmp eq i32 %1324, 0
  %1341 = zext i1 %1340 to i8
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1341, i8* %1342, align 1, !tbaa !2449
  %1343 = lshr i32 %1324, 31
  %1344 = trunc i32 %1343 to i8
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1344, i8* %1345, align 1, !tbaa !2450
  %1346 = lshr i32 %1316, 31
  %1347 = lshr i32 %1323, 31
  %1348 = xor i32 %1347, %1346
  %1349 = xor i32 %1343, %1346
  %1350 = add nuw nsw i32 %1349, %1348
  %1351 = icmp eq i32 %1350, 2
  %1352 = zext i1 %1351 to i8
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1352, i8* %1353, align 1, !tbaa !2451
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 12
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 6
  %1358 = load i64, i64* %PC
  %1359 = add i64 %1358, 6
  store i64 %1359, i64* %PC
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1361 = load i8, i8* %1360, align 1, !tbaa !2449
  %1362 = icmp ne i8 %1361, 0
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1364 = load i8, i8* %1363, align 1, !tbaa !2450
  %1365 = icmp ne i8 %1364, 0
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1367 = load i8, i8* %1366, align 1, !tbaa !2451
  %1368 = icmp ne i8 %1367, 0
  %1369 = xor i1 %1365, %1368
  %1370 = or i1 %1362, %1369
  %1371 = zext i1 %1370 to i8
  store i8 %1371, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1373 = select i1 %1370, i64 %1355, i64 %1357
  store i64 %1373, i64* %1372, align 8, !tbaa !2428
  %1374 = load i8, i8* %BRANCH_TAKEN
  %1375 = icmp eq i8 %1374, 1
  br i1 %1375, label %block_400d59, label %block_400d53

block_400f27:                                     ; preds = %block_400efc
  %1376 = load i64, i64* %RBP
  %1377 = sub i64 %1376, 24
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 4
  store i64 %1379, i64* %PC
  %1380 = inttoptr i64 %1377 to i32*
  %1381 = load i32, i32* %1380
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1382, align 1, !tbaa !2433
  %1383 = and i32 %1381, 255
  %1384 = call i32 @llvm.ctpop.i32(i32 %1383) #16
  %1385 = trunc i32 %1384 to i8
  %1386 = and i8 %1385, 1
  %1387 = xor i8 %1386, 1
  %1388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1387, i8* %1388, align 1, !tbaa !2447
  %1389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1389, align 1, !tbaa !2448
  %1390 = icmp eq i32 %1381, 0
  %1391 = zext i1 %1390 to i8
  %1392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1391, i8* %1392, align 1, !tbaa !2449
  %1393 = lshr i32 %1381, 31
  %1394 = trunc i32 %1393 to i8
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1394, i8* %1395, align 1, !tbaa !2450
  %1396 = lshr i32 %1381, 31
  %1397 = xor i32 %1393, %1396
  %1398 = add nuw nsw i32 %1397, %1396
  %1399 = icmp eq i32 %1398, 2
  %1400 = zext i1 %1399 to i8
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1400, i8* %1401, align 1, !tbaa !2451
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 153
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 6
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 6
  store i64 %1407, i64* %PC
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1409 = load i8, i8* %1408, align 1, !tbaa !2449
  store i8 %1409, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1411 = icmp ne i8 %1409, 0
  %1412 = select i1 %1411, i64 %1403, i64 %1405
  store i64 %1412, i64* %1410, align 8, !tbaa !2428
  %1413 = load i8, i8* %BRANCH_TAKEN
  %1414 = icmp eq i8 %1413, 1
  br i1 %1414, label %block_400fc4, label %block_400f31

block_400d16:                                     ; preds = %block_400d59, %block_400cc0
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_400cc0 ], [ %MEMORY.2, %block_400d59 ]
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 28
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 3
  store i64 %1418, i64* %PC
  %1419 = inttoptr i64 %1416 to i32*
  %1420 = load i32, i32* %1419
  %1421 = zext i32 %1420 to i64
  store i64 %1421, i64* %RAX, align 8, !tbaa !2428
  %1422 = load i32, i32* %EAX
  %1423 = zext i32 %1422 to i64
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 7
  store i64 %1425, i64* %PC
  %1426 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %1427 = sub i32 %1422, %1426
  %1428 = icmp ult i32 %1422, %1426
  %1429 = zext i1 %1428 to i8
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1429, i8* %1430, align 1, !tbaa !2433
  %1431 = and i32 %1427, 255
  %1432 = call i32 @llvm.ctpop.i32(i32 %1431) #16
  %1433 = trunc i32 %1432 to i8
  %1434 = and i8 %1433, 1
  %1435 = xor i8 %1434, 1
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1435, i8* %1436, align 1, !tbaa !2447
  %1437 = xor i32 %1426, %1422
  %1438 = xor i32 %1437, %1427
  %1439 = lshr i32 %1438, 4
  %1440 = trunc i32 %1439 to i8
  %1441 = and i8 %1440, 1
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1441, i8* %1442, align 1, !tbaa !2448
  %1443 = icmp eq i32 %1427, 0
  %1444 = zext i1 %1443 to i8
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1444, i8* %1445, align 1, !tbaa !2449
  %1446 = lshr i32 %1427, 31
  %1447 = trunc i32 %1446 to i8
  %1448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1447, i8* %1448, align 1, !tbaa !2450
  %1449 = lshr i32 %1422, 31
  %1450 = lshr i32 %1426, 31
  %1451 = xor i32 %1450, %1449
  %1452 = xor i32 %1446, %1449
  %1453 = add nuw nsw i32 %1452, %1451
  %1454 = icmp eq i32 %1453, 2
  %1455 = zext i1 %1454 to i8
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1455, i8* %1456, align 1, !tbaa !2451
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 76
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 6
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 6
  store i64 %1462, i64* %PC
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1464 = load i8, i8* %1463, align 1, !tbaa !2450
  %1465 = icmp ne i8 %1464, 0
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1467 = load i8, i8* %1466, align 1, !tbaa !2451
  %1468 = icmp ne i8 %1467, 0
  %1469 = xor i1 %1465, %1468
  %1470 = xor i1 %1469, true
  %1471 = zext i1 %1470 to i8
  store i8 %1471, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1473 = select i1 %1469, i64 %1460, i64 %1458
  store i64 %1473, i64* %1472, align 8, !tbaa !2428
  %1474 = load i8, i8* %BRANCH_TAKEN
  %1475 = icmp eq i8 %1474, 1
  %1476 = load i64, i64* %PC
  br i1 %1475, label %block_400d6c, label %block_400d26

block_400dca:                                     ; preds = %block_400dba
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 10
  store i64 %1478, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 160), i64* %RDI, align 8, !tbaa !2428
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 10
  store i64 %1480, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 159), i64* %RCX, align 8, !tbaa !2428
  %1481 = load i64, i64* %RBP
  %1482 = sub i64 %1481, 28
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 3
  store i64 %1484, i64* %PC
  %1485 = inttoptr i64 %1482 to i32*
  %1486 = load i32, i32* %1485
  %1487 = zext i32 %1486 to i64
  store i64 %1487, i64* %RSI, align 8, !tbaa !2428
  %1488 = load i64, i64* %RBP
  %1489 = sub i64 %1488, 60
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 4
  store i64 %1491, i64* %PC
  %1492 = inttoptr i64 %1489 to i32*
  %1493 = load i32, i32* %1492
  %1494 = sext i32 %1493 to i64
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 8
  store i64 %1496, i64* %PC
  %1497 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1497, i64* %RDX, align 8, !tbaa !2428
  %1498 = load i64, i64* %RBP
  %1499 = sub i64 %1498, 28
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 4
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1499 to i32*
  %1503 = load i32, i32* %1502
  %1504 = sext i32 %1503 to i64
  store i64 %1504, i64* %R8, align 8, !tbaa !2428
  %1505 = load i64, i64* %R8
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 4
  store i64 %1507, i64* %PC
  %1508 = shl i64 %1505, 3
  %1509 = icmp slt i64 %1508, 0
  %1510 = shl i64 %1508, 1
  store i64 %1510, i64* %R8, align 8, !tbaa !2428
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1512 = zext i1 %1509 to i8
  store i8 %1512, i8* %1511, align 1, !tbaa !2432
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1514 = trunc i64 %1510 to i32
  %1515 = and i32 %1514, 254
  %1516 = call i32 @llvm.ctpop.i32(i32 %1515) #16
  %1517 = trunc i32 %1516 to i8
  %1518 = and i8 %1517, 1
  %1519 = xor i8 %1518, 1
  store i8 %1519, i8* %1513, align 1, !tbaa !2432
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1520, align 1, !tbaa !2432
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1522 = icmp eq i64 %1510, 0
  %1523 = zext i1 %1522 to i8
  store i8 %1523, i8* %1521, align 1, !tbaa !2432
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1525 = lshr i64 %1510, 63
  %1526 = trunc i64 %1525 to i8
  store i8 %1526, i8* %1524, align 1, !tbaa !2432
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1527, align 1, !tbaa !2432
  %1528 = load i64, i64* %RDX
  %1529 = load i64, i64* %R8
  %1530 = load i64, i64* %PC
  %1531 = add i64 %1530, 3
  store i64 %1531, i64* %PC
  %1532 = add i64 %1529, %1528
  store i64 %1532, i64* %RDX, align 8, !tbaa !2428
  %1533 = icmp ult i64 %1532, %1528
  %1534 = icmp ult i64 %1532, %1529
  %1535 = or i1 %1533, %1534
  %1536 = zext i1 %1535 to i8
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1536, i8* %1537, align 1, !tbaa !2433
  %1538 = trunc i64 %1532 to i32
  %1539 = and i32 %1538, 255
  %1540 = call i32 @llvm.ctpop.i32(i32 %1539) #16
  %1541 = trunc i32 %1540 to i8
  %1542 = and i8 %1541, 1
  %1543 = xor i8 %1542, 1
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1543, i8* %1544, align 1, !tbaa !2447
  %1545 = xor i64 %1529, %1528
  %1546 = xor i64 %1545, %1532
  %1547 = lshr i64 %1546, 4
  %1548 = trunc i64 %1547 to i8
  %1549 = and i8 %1548, 1
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1549, i8* %1550, align 1, !tbaa !2448
  %1551 = icmp eq i64 %1532, 0
  %1552 = zext i1 %1551 to i8
  %1553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1552, i8* %1553, align 1, !tbaa !2449
  %1554 = lshr i64 %1532, 63
  %1555 = trunc i64 %1554 to i8
  %1556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1555, i8* %1556, align 1, !tbaa !2450
  %1557 = lshr i64 %1528, 63
  %1558 = lshr i64 %1529, 63
  %1559 = xor i64 %1554, %1557
  %1560 = xor i64 %1554, %1558
  %1561 = add nuw nsw i64 %1559, %1560
  %1562 = icmp eq i64 %1561, 2
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1563, i8* %1564, align 1, !tbaa !2451
  %1565 = load i64, i64* %RDX
  %1566 = add i64 %1565, 8
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 4
  store i64 %1568, i64* %PC
  %1569 = inttoptr i64 %1566 to i64*
  %1570 = load i64, i64* %1569
  store i64 %1570, i64* %RDX, align 8, !tbaa !2428
  %1571 = load i64, i64* %RBP
  %1572 = sub i64 %1571, 80
  %1573 = load i64, i64* %RDI
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 4
  store i64 %1575, i64* %PC
  %1576 = inttoptr i64 %1572 to i64*
  store i64 %1573, i64* %1576
  %1577 = load i64, i64* %RDX
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 3
  store i64 %1579, i64* %PC
  store i64 %1577, i64* %RDI, align 8, !tbaa !2428
  %1580 = load i64, i64* %RBP
  %1581 = sub i64 %1580, 88
  %1582 = load i64, i64* %RAX
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 4
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1581 to i64*
  store i64 %1582, i64* %1585
  %1586 = load i64, i64* %RBP
  %1587 = sub i64 %1586, 96
  %1588 = load i64, i64* %RCX
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 4
  store i64 %1590, i64* %PC
  %1591 = inttoptr i64 %1587 to i64*
  store i64 %1588, i64* %1591
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 100
  %1594 = load i32, i32* %ESI
  %1595 = zext i32 %1594 to i64
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 3
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1593 to i32*
  store i32 %1594, i32* %1598
  %1599 = load i64, i64* %PC
  %1600 = sub i64 %1599, 1838
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 5
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 5
  store i64 %1604, i64* %PC
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1606 = load i64, i64* %1605, align 8, !tbaa !2428
  %1607 = add i64 %1606, -8
  %1608 = inttoptr i64 %1607 to i64*
  store i64 %1602, i64* %1608
  store i64 %1607, i64* %1605, align 8, !tbaa !2428
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1600, i64* %1609, align 8, !tbaa !2428
  %1610 = load i64, i64* %PC
  %1611 = call %struct.Memory* @ext_4006e0_strlen(%struct.State* %0, i64 %1610, %struct.Memory* %MEMORY.1)
  %1612 = load i64, i64* %RBP
  %1613 = sub i64 %1612, 88
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 4
  store i64 %1615, i64* %PC
  %1616 = inttoptr i64 %1613 to i64*
  %1617 = load i64, i64* %1616
  store i64 %1617, i64* %RCX, align 8, !tbaa !2428
  %1618 = load i64, i64* %RCX
  %1619 = load i64, i64* %RAX
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 3
  store i64 %1621, i64* %PC
  %1622 = sub i64 %1618, %1619
  store i64 %1622, i64* %RCX, align 8, !tbaa !2428
  %1623 = icmp ult i64 %1618, %1619
  %1624 = zext i1 %1623 to i8
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1624, i8* %1625, align 1, !tbaa !2433
  %1626 = trunc i64 %1622 to i32
  %1627 = and i32 %1626, 255
  %1628 = call i32 @llvm.ctpop.i32(i32 %1627) #16
  %1629 = trunc i32 %1628 to i8
  %1630 = and i8 %1629, 1
  %1631 = xor i8 %1630, 1
  %1632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1631, i8* %1632, align 1, !tbaa !2447
  %1633 = xor i64 %1619, %1618
  %1634 = xor i64 %1633, %1622
  %1635 = lshr i64 %1634, 4
  %1636 = trunc i64 %1635 to i8
  %1637 = and i8 %1636, 1
  %1638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1637, i8* %1638, align 1, !tbaa !2448
  %1639 = icmp eq i64 %1622, 0
  %1640 = zext i1 %1639 to i8
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1640, i8* %1641, align 1, !tbaa !2449
  %1642 = lshr i64 %1622, 63
  %1643 = trunc i64 %1642 to i8
  %1644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1643, i8* %1644, align 1, !tbaa !2450
  %1645 = lshr i64 %1618, 63
  %1646 = lshr i64 %1619, 63
  %1647 = xor i64 %1646, %1645
  %1648 = xor i64 %1642, %1645
  %1649 = add nuw nsw i64 %1648, %1647
  %1650 = icmp eq i64 %1649, 2
  %1651 = zext i1 %1650 to i8
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1651, i8* %1652, align 1, !tbaa !2451
  %1653 = load i32, i32* %ECX
  %1654 = zext i32 %1653 to i64
  %1655 = load i64, i64* %PC
  %1656 = add i64 %1655, 2
  store i64 %1656, i64* %PC
  %1657 = and i64 %1654, 4294967295
  store i64 %1657, i64* %RSI, align 8, !tbaa !2428
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 8
  store i64 %1659, i64* %PC
  %1660 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1660, i64* %RAX, align 8, !tbaa !2428
  %1661 = load i64, i64* %RBP
  %1662 = sub i64 %1661, 28
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 4
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1662 to i32*
  %1666 = load i32, i32* %1665
  %1667 = sext i32 %1666 to i64
  store i64 %1667, i64* %RCX, align 8, !tbaa !2428
  %1668 = load i64, i64* %RCX
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 4
  store i64 %1670, i64* %PC
  %1671 = shl i64 %1668, 3
  %1672 = icmp slt i64 %1671, 0
  %1673 = shl i64 %1671, 1
  store i64 %1673, i64* %RCX, align 8, !tbaa !2428
  %1674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1675 = zext i1 %1672 to i8
  store i8 %1675, i8* %1674, align 1, !tbaa !2432
  %1676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1677 = trunc i64 %1673 to i32
  %1678 = and i32 %1677, 254
  %1679 = call i32 @llvm.ctpop.i32(i32 %1678) #16
  %1680 = trunc i32 %1679 to i8
  %1681 = and i8 %1680, 1
  %1682 = xor i8 %1681, 1
  store i8 %1682, i8* %1676, align 1, !tbaa !2432
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1683, align 1, !tbaa !2432
  %1684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1685 = icmp eq i64 %1673, 0
  %1686 = zext i1 %1685 to i8
  store i8 %1686, i8* %1684, align 1, !tbaa !2432
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1688 = lshr i64 %1673, 63
  %1689 = trunc i64 %1688 to i8
  store i8 %1689, i8* %1687, align 1, !tbaa !2432
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1690, align 1, !tbaa !2432
  %1691 = load i64, i64* %RAX
  %1692 = load i64, i64* %RCX
  %1693 = load i64, i64* %PC
  %1694 = add i64 %1693, 3
  store i64 %1694, i64* %PC
  %1695 = add i64 %1692, %1691
  store i64 %1695, i64* %RAX, align 8, !tbaa !2428
  %1696 = icmp ult i64 %1695, %1691
  %1697 = icmp ult i64 %1695, %1692
  %1698 = or i1 %1696, %1697
  %1699 = zext i1 %1698 to i8
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1699, i8* %1700, align 1, !tbaa !2433
  %1701 = trunc i64 %1695 to i32
  %1702 = and i32 %1701, 255
  %1703 = call i32 @llvm.ctpop.i32(i32 %1702) #16
  %1704 = trunc i32 %1703 to i8
  %1705 = and i8 %1704, 1
  %1706 = xor i8 %1705, 1
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1706, i8* %1707, align 1, !tbaa !2447
  %1708 = xor i64 %1692, %1691
  %1709 = xor i64 %1708, %1695
  %1710 = lshr i64 %1709, 4
  %1711 = trunc i64 %1710 to i8
  %1712 = and i8 %1711, 1
  %1713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1712, i8* %1713, align 1, !tbaa !2448
  %1714 = icmp eq i64 %1695, 0
  %1715 = zext i1 %1714 to i8
  %1716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1715, i8* %1716, align 1, !tbaa !2449
  %1717 = lshr i64 %1695, 63
  %1718 = trunc i64 %1717 to i8
  %1719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1718, i8* %1719, align 1, !tbaa !2450
  %1720 = lshr i64 %1691, 63
  %1721 = lshr i64 %1692, 63
  %1722 = xor i64 %1717, %1720
  %1723 = xor i64 %1717, %1721
  %1724 = add nuw nsw i64 %1722, %1723
  %1725 = icmp eq i64 %1724, 2
  %1726 = zext i1 %1725 to i8
  %1727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1726, i8* %1727, align 1, !tbaa !2451
  %1728 = load i64, i64* %RAX
  %1729 = add i64 %1728, 8
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 4
  store i64 %1731, i64* %PC
  %1732 = inttoptr i64 %1729 to i64*
  %1733 = load i64, i64* %1732
  store i64 %1733, i64* %R8, align 8, !tbaa !2428
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 8
  store i64 %1735, i64* %PC
  %1736 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1736, i64* %RAX, align 8, !tbaa !2428
  %1737 = load i64, i64* %RBP
  %1738 = sub i64 %1737, 28
  %1739 = load i64, i64* %PC
  %1740 = add i64 %1739, 4
  store i64 %1740, i64* %PC
  %1741 = inttoptr i64 %1738 to i32*
  %1742 = load i32, i32* %1741
  %1743 = sext i32 %1742 to i64
  store i64 %1743, i64* %RCX, align 8, !tbaa !2428
  %1744 = load i64, i64* %RCX
  %1745 = load i64, i64* %PC
  %1746 = add i64 %1745, 4
  store i64 %1746, i64* %PC
  %1747 = shl i64 %1744, 3
  %1748 = icmp slt i64 %1747, 0
  %1749 = shl i64 %1747, 1
  store i64 %1749, i64* %RCX, align 8, !tbaa !2428
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1751 = zext i1 %1748 to i8
  store i8 %1751, i8* %1750, align 1, !tbaa !2432
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1753 = trunc i64 %1749 to i32
  %1754 = and i32 %1753, 254
  %1755 = call i32 @llvm.ctpop.i32(i32 %1754) #16
  %1756 = trunc i32 %1755 to i8
  %1757 = and i8 %1756, 1
  %1758 = xor i8 %1757, 1
  store i8 %1758, i8* %1752, align 1, !tbaa !2432
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1759, align 1, !tbaa !2432
  %1760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1761 = icmp eq i64 %1749, 0
  %1762 = zext i1 %1761 to i8
  store i8 %1762, i8* %1760, align 1, !tbaa !2432
  %1763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1764 = lshr i64 %1749, 63
  %1765 = trunc i64 %1764 to i8
  store i8 %1765, i8* %1763, align 1, !tbaa !2432
  %1766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1766, align 1, !tbaa !2432
  %1767 = load i64, i64* %RAX
  %1768 = load i64, i64* %RCX
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 3
  store i64 %1770, i64* %PC
  %1771 = add i64 %1768, %1767
  store i64 %1771, i64* %RAX, align 8, !tbaa !2428
  %1772 = icmp ult i64 %1771, %1767
  %1773 = icmp ult i64 %1771, %1768
  %1774 = or i1 %1772, %1773
  %1775 = zext i1 %1774 to i8
  %1776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1775, i8* %1776, align 1, !tbaa !2433
  %1777 = trunc i64 %1771 to i32
  %1778 = and i32 %1777, 255
  %1779 = call i32 @llvm.ctpop.i32(i32 %1778) #16
  %1780 = trunc i32 %1779 to i8
  %1781 = and i8 %1780, 1
  %1782 = xor i8 %1781, 1
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1782, i8* %1783, align 1, !tbaa !2447
  %1784 = xor i64 %1768, %1767
  %1785 = xor i64 %1784, %1771
  %1786 = lshr i64 %1785, 4
  %1787 = trunc i64 %1786 to i8
  %1788 = and i8 %1787, 1
  %1789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1788, i8* %1789, align 1, !tbaa !2448
  %1790 = icmp eq i64 %1771, 0
  %1791 = zext i1 %1790 to i8
  %1792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1791, i8* %1792, align 1, !tbaa !2449
  %1793 = lshr i64 %1771, 63
  %1794 = trunc i64 %1793 to i8
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1794, i8* %1795, align 1, !tbaa !2450
  %1796 = lshr i64 %1767, 63
  %1797 = lshr i64 %1768, 63
  %1798 = xor i64 %1793, %1796
  %1799 = xor i64 %1793, %1797
  %1800 = add nuw nsw i64 %1798, %1799
  %1801 = icmp eq i64 %1800, 2
  %1802 = zext i1 %1801 to i8
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1802, i8* %1803, align 1, !tbaa !2451
  %1804 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1805 = load i64, i64* %RAX
  %1806 = load i64, i64* %PC
  %1807 = add i64 %1806, 4
  store i64 %1807, i64* %PC
  %1808 = inttoptr i64 %1805 to double*
  %1809 = load double, double* %1808
  %1810 = bitcast i8* %1804 to double*
  store double %1809, double* %1810, align 1, !tbaa !2452
  %1811 = getelementptr inbounds i8, i8* %1804, i64 8
  %1812 = bitcast i8* %1811 to double*
  store double 0.000000e+00, double* %1812, align 1, !tbaa !2452
  %1813 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1814 = load i64, i64* %RBP
  %1815 = sub i64 %1814, 40
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 5
  store i64 %1817, i64* %PC
  %1818 = inttoptr i64 %1815 to double*
  %1819 = load double, double* %1818
  %1820 = bitcast i8* %1813 to double*
  store double %1819, double* %1820, align 1, !tbaa !2452
  %1821 = getelementptr inbounds i8, i8* %1813, i64 8
  %1822 = bitcast i8* %1821 to double*
  store double 0.000000e+00, double* %1822, align 1, !tbaa !2452
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 8
  store i64 %1824, i64* %PC
  %1825 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1825, i64* %RAX, align 8, !tbaa !2428
  %1826 = load i64, i64* %RBP
  %1827 = sub i64 %1826, 28
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 4
  store i64 %1829, i64* %PC
  %1830 = inttoptr i64 %1827 to i32*
  %1831 = load i32, i32* %1830
  %1832 = sext i32 %1831 to i64
  store i64 %1832, i64* %RCX, align 8, !tbaa !2428
  %1833 = load i64, i64* %RCX
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 4
  store i64 %1835, i64* %PC
  %1836 = shl i64 %1833, 3
  %1837 = icmp slt i64 %1836, 0
  %1838 = shl i64 %1836, 1
  store i64 %1838, i64* %RCX, align 8, !tbaa !2428
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1840 = zext i1 %1837 to i8
  store i8 %1840, i8* %1839, align 1, !tbaa !2432
  %1841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1842 = trunc i64 %1838 to i32
  %1843 = and i32 %1842, 254
  %1844 = call i32 @llvm.ctpop.i32(i32 %1843) #16
  %1845 = trunc i32 %1844 to i8
  %1846 = and i8 %1845, 1
  %1847 = xor i8 %1846, 1
  store i8 %1847, i8* %1841, align 1, !tbaa !2432
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1848, align 1, !tbaa !2432
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1850 = icmp eq i64 %1838, 0
  %1851 = zext i1 %1850 to i8
  store i8 %1851, i8* %1849, align 1, !tbaa !2432
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1853 = lshr i64 %1838, 63
  %1854 = trunc i64 %1853 to i8
  store i8 %1854, i8* %1852, align 1, !tbaa !2432
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1855, align 1, !tbaa !2432
  %1856 = load i64, i64* %RAX
  %1857 = load i64, i64* %RCX
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 3
  store i64 %1859, i64* %PC
  %1860 = add i64 %1857, %1856
  store i64 %1860, i64* %RAX, align 8, !tbaa !2428
  %1861 = icmp ult i64 %1860, %1856
  %1862 = icmp ult i64 %1860, %1857
  %1863 = or i1 %1861, %1862
  %1864 = zext i1 %1863 to i8
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1864, i8* %1865, align 1, !tbaa !2433
  %1866 = trunc i64 %1860 to i32
  %1867 = and i32 %1866, 255
  %1868 = call i32 @llvm.ctpop.i32(i32 %1867) #16
  %1869 = trunc i32 %1868 to i8
  %1870 = and i8 %1869, 1
  %1871 = xor i8 %1870, 1
  %1872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1871, i8* %1872, align 1, !tbaa !2447
  %1873 = xor i64 %1857, %1856
  %1874 = xor i64 %1873, %1860
  %1875 = lshr i64 %1874, 4
  %1876 = trunc i64 %1875 to i8
  %1877 = and i8 %1876, 1
  %1878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1877, i8* %1878, align 1, !tbaa !2448
  %1879 = icmp eq i64 %1860, 0
  %1880 = zext i1 %1879 to i8
  %1881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1880, i8* %1881, align 1, !tbaa !2449
  %1882 = lshr i64 %1860, 63
  %1883 = trunc i64 %1882 to i8
  %1884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1883, i8* %1884, align 1, !tbaa !2450
  %1885 = lshr i64 %1856, 63
  %1886 = lshr i64 %1857, 63
  %1887 = xor i64 %1882, %1885
  %1888 = xor i64 %1882, %1886
  %1889 = add nuw nsw i64 %1887, %1888
  %1890 = icmp eq i64 %1889, 2
  %1891 = zext i1 %1890 to i8
  %1892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1891, i8* %1892, align 1, !tbaa !2451
  %1893 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1894 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1895 = load i64, i64* %RAX
  %1896 = load i64, i64* %PC
  %1897 = add i64 %1896, 4
  store i64 %1897, i64* %PC
  %1898 = bitcast i8* %1894 to double*
  %1899 = load double, double* %1898, align 1
  %1900 = getelementptr inbounds i8, i8* %1894, i64 8
  %1901 = bitcast i8* %1900 to i64*
  %1902 = load i64, i64* %1901, align 1
  %1903 = inttoptr i64 %1895 to double*
  %1904 = load double, double* %1903
  %1905 = fdiv double %1899, %1904
  %1906 = bitcast i8* %1893 to double*
  store double %1905, double* %1906, align 1, !tbaa !2452
  %1907 = getelementptr inbounds i8, i8* %1893, i64 8
  %1908 = bitcast i8* %1907 to i64*
  store i64 %1902, i64* %1908, align 1, !tbaa !2452
  %1909 = load i64, i64* %PC
  %1910 = add i64 %1909, 8
  store i64 %1910, i64* %PC
  %1911 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1911, i64* %RAX, align 8, !tbaa !2428
  %1912 = load i64, i64* %RBP
  %1913 = sub i64 %1912, 28
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 4
  store i64 %1915, i64* %PC
  %1916 = inttoptr i64 %1913 to i32*
  %1917 = load i32, i32* %1916
  %1918 = sext i32 %1917 to i64
  store i64 %1918, i64* %RCX, align 8, !tbaa !2428
  %1919 = load i64, i64* %RCX
  %1920 = load i64, i64* %PC
  %1921 = add i64 %1920, 4
  store i64 %1921, i64* %PC
  %1922 = shl i64 %1919, 3
  %1923 = icmp slt i64 %1922, 0
  %1924 = shl i64 %1922, 1
  store i64 %1924, i64* %RCX, align 8, !tbaa !2428
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1926 = zext i1 %1923 to i8
  store i8 %1926, i8* %1925, align 1, !tbaa !2432
  %1927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1928 = trunc i64 %1924 to i32
  %1929 = and i32 %1928, 254
  %1930 = call i32 @llvm.ctpop.i32(i32 %1929) #16
  %1931 = trunc i32 %1930 to i8
  %1932 = and i8 %1931, 1
  %1933 = xor i8 %1932, 1
  store i8 %1933, i8* %1927, align 1, !tbaa !2432
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1934, align 1, !tbaa !2432
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1936 = icmp eq i64 %1924, 0
  %1937 = zext i1 %1936 to i8
  store i8 %1937, i8* %1935, align 1, !tbaa !2432
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1939 = lshr i64 %1924, 63
  %1940 = trunc i64 %1939 to i8
  store i8 %1940, i8* %1938, align 1, !tbaa !2432
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1941, align 1, !tbaa !2432
  %1942 = load i64, i64* %RAX
  %1943 = load i64, i64* %RCX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 3
  store i64 %1945, i64* %PC
  %1946 = add i64 %1943, %1942
  store i64 %1946, i64* %RAX, align 8, !tbaa !2428
  %1947 = icmp ult i64 %1946, %1942
  %1948 = icmp ult i64 %1946, %1943
  %1949 = or i1 %1947, %1948
  %1950 = zext i1 %1949 to i8
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1950, i8* %1951, align 1, !tbaa !2433
  %1952 = trunc i64 %1946 to i32
  %1953 = and i32 %1952, 255
  %1954 = call i32 @llvm.ctpop.i32(i32 %1953) #16
  %1955 = trunc i32 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = xor i8 %1956, 1
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1957, i8* %1958, align 1, !tbaa !2447
  %1959 = xor i64 %1943, %1942
  %1960 = xor i64 %1959, %1946
  %1961 = lshr i64 %1960, 4
  %1962 = trunc i64 %1961 to i8
  %1963 = and i8 %1962, 1
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1963, i8* %1964, align 1, !tbaa !2448
  %1965 = icmp eq i64 %1946, 0
  %1966 = zext i1 %1965 to i8
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1966, i8* %1967, align 1, !tbaa !2449
  %1968 = lshr i64 %1946, 63
  %1969 = trunc i64 %1968 to i8
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1969, i8* %1970, align 1, !tbaa !2450
  %1971 = lshr i64 %1942, 63
  %1972 = lshr i64 %1943, 63
  %1973 = xor i64 %1968, %1971
  %1974 = xor i64 %1968, %1972
  %1975 = add nuw nsw i64 %1973, %1974
  %1976 = icmp eq i64 %1975, 2
  %1977 = zext i1 %1976 to i8
  %1978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1977, i8* %1978, align 1, !tbaa !2451
  %1979 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1980 = load i64, i64* %RAX
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 4
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1980 to double*
  %1984 = load double, double* %1983
  %1985 = bitcast i8* %1979 to double*
  store double %1984, double* %1985, align 1, !tbaa !2452
  %1986 = getelementptr inbounds i8, i8* %1979, i64 8
  %1987 = bitcast i8* %1986 to double*
  store double 0.000000e+00, double* %1987, align 1, !tbaa !2452
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 8
  store i64 %1989, i64* %PC
  %1990 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1990, i64* %RAX, align 8, !tbaa !2428
  %1991 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1992 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1993 = load i64, i64* %RAX
  %1994 = load i64, i64* %PC
  %1995 = add i64 %1994, 4
  store i64 %1995, i64* %PC
  %1996 = bitcast i8* %1992 to double*
  %1997 = load double, double* %1996, align 1
  %1998 = getelementptr inbounds i8, i8* %1992, i64 8
  %1999 = bitcast i8* %1998 to i64*
  %2000 = load i64, i64* %1999, align 1
  %2001 = inttoptr i64 %1993 to double*
  %2002 = load double, double* %2001
  %2003 = fdiv double %1997, %2002
  %2004 = bitcast i8* %1991 to double*
  store double %2003, double* %2004, align 1, !tbaa !2452
  %2005 = getelementptr inbounds i8, i8* %1991, i64 8
  %2006 = bitcast i8* %2005 to i64*
  store i64 %2000, i64* %2006, align 1, !tbaa !2452
  %2007 = load i64, i64* %RBP
  %2008 = sub i64 %2007, 80
  %2009 = load i64, i64* %PC
  %2010 = add i64 %2009, 4
  store i64 %2010, i64* %PC
  %2011 = inttoptr i64 %2008 to i64*
  %2012 = load i64, i64* %2011
  store i64 %2012, i64* %RDI, align 8, !tbaa !2428
  %2013 = bitcast i32* %R9D to i64*
  %2014 = load i64, i64* %RBP
  %2015 = sub i64 %2014, 100
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 4
  store i64 %2017, i64* %PC
  %2018 = inttoptr i64 %2015 to i32*
  %2019 = load i32, i32* %2018
  %2020 = zext i32 %2019 to i64
  store i64 %2020, i64* %2013, align 8, !tbaa !2428
  %2021 = load i64, i64* %RBP
  %2022 = sub i64 %2021, 104
  %2023 = load i32, i32* %ESI
  %2024 = zext i32 %2023 to i64
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 3
  store i64 %2026, i64* %PC
  %2027 = inttoptr i64 %2022 to i32*
  store i32 %2023, i32* %2027
  %2028 = load i32, i32* %R9D
  %2029 = zext i32 %2028 to i64
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 3
  store i64 %2031, i64* %PC
  %2032 = and i64 %2029, 4294967295
  store i64 %2032, i64* %RSI, align 8, !tbaa !2428
  %2033 = load i64, i64* %RBP
  %2034 = sub i64 %2033, 104
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 3
  store i64 %2036, i64* %PC
  %2037 = inttoptr i64 %2034 to i32*
  %2038 = load i32, i32* %2037
  %2039 = zext i32 %2038 to i64
  store i64 %2039, i64* %RDX, align 8, !tbaa !2428
  %2040 = load i64, i64* %RBP
  %2041 = sub i64 %2040, 96
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 4
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2041 to i64*
  %2045 = load i64, i64* %2044
  store i64 %2045, i64* %RCX, align 8, !tbaa !2428
  %2046 = load i64, i64* %PC
  %2047 = add i64 %2046, 2
  store i64 %2047, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2432
  %2048 = load i64, i64* %PC
  %2049 = sub i64 %2048, 1968
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 5
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 5
  store i64 %2053, i64* %PC
  %2054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2055 = load i64, i64* %2054, align 8, !tbaa !2428
  %2056 = add i64 %2055, -8
  %2057 = inttoptr i64 %2056 to i64*
  store i64 %2051, i64* %2057
  store i64 %2056, i64* %2054, align 8, !tbaa !2428
  %2058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2049, i64* %2058, align 8, !tbaa !2428
  %2059 = load i64, i64* %PC
  %2060 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %2059, %struct.Memory* %1611)
  %2061 = load i64, i64* %RBP
  %2062 = sub i64 %2061, 108
  %2063 = load i32, i32* %EAX
  %2064 = zext i32 %2063 to i64
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 3
  store i64 %2066, i64* %PC
  %2067 = inttoptr i64 %2062 to i32*
  store i32 %2063, i32* %2067
  %2068 = load i64, i64* %RBP
  %2069 = sub i64 %2068, 28
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 3
  store i64 %2071, i64* %PC
  %2072 = inttoptr i64 %2069 to i32*
  %2073 = load i32, i32* %2072
  %2074 = zext i32 %2073 to i64
  store i64 %2074, i64* %RAX, align 8, !tbaa !2428
  %2075 = load i64, i64* %RAX
  %2076 = load i64, i64* %PC
  %2077 = add i64 %2076, 3
  store i64 %2077, i64* %PC
  %2078 = trunc i64 %2075 to i32
  %2079 = add i32 1, %2078
  %2080 = zext i32 %2079 to i64
  store i64 %2080, i64* %RAX, align 8, !tbaa !2428
  %2081 = icmp ult i32 %2079, %2078
  %2082 = icmp ult i32 %2079, 1
  %2083 = or i1 %2081, %2082
  %2084 = zext i1 %2083 to i8
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2084, i8* %2085, align 1, !tbaa !2433
  %2086 = and i32 %2079, 255
  %2087 = call i32 @llvm.ctpop.i32(i32 %2086) #16
  %2088 = trunc i32 %2087 to i8
  %2089 = and i8 %2088, 1
  %2090 = xor i8 %2089, 1
  %2091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2090, i8* %2091, align 1, !tbaa !2447
  %2092 = xor i64 1, %2075
  %2093 = trunc i64 %2092 to i32
  %2094 = xor i32 %2093, %2079
  %2095 = lshr i32 %2094, 4
  %2096 = trunc i32 %2095 to i8
  %2097 = and i8 %2096, 1
  %2098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2097, i8* %2098, align 1, !tbaa !2448
  %2099 = icmp eq i32 %2079, 0
  %2100 = zext i1 %2099 to i8
  %2101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2100, i8* %2101, align 1, !tbaa !2449
  %2102 = lshr i32 %2079, 31
  %2103 = trunc i32 %2102 to i8
  %2104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2103, i8* %2104, align 1, !tbaa !2450
  %2105 = lshr i32 %2078, 31
  %2106 = xor i32 %2102, %2105
  %2107 = add nuw nsw i32 %2106, %2102
  %2108 = icmp eq i32 %2107, 2
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2109, i8* %2110, align 1, !tbaa !2451
  %2111 = load i64, i64* %RBP
  %2112 = sub i64 %2111, 28
  %2113 = load i32, i32* %EAX
  %2114 = zext i32 %2113 to i64
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 3
  store i64 %2116, i64* %PC
  %2117 = inttoptr i64 %2112 to i32*
  store i32 %2113, i32* %2117
  %2118 = load i64, i64* %PC
  %2119 = sub i64 %2118, 247
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 5
  store i64 %2121, i64* %PC
  %2122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2119, i64* %2122, align 8, !tbaa !2428
  br label %block_400dba

block_400fc4:                                     ; preds = %block_400f27, %block_400f88, %block_400efc
  %MEMORY.5 = phi %struct.Memory* [ %358, %block_400efc ], [ %358, %block_400f27 ], [ %672, %block_400f88 ]
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 11
  store i64 %2124, i64* %PC
  store i32 0, i32* bitcast (%current_test_type* @current_test to i32*)
  %2125 = load i64, i64* %RSP
  %2126 = load i64, i64* %PC
  %2127 = add i64 %2126, 7
  store i64 %2127, i64* %PC
  %2128 = add i64 128, %2125
  store i64 %2128, i64* %RSP, align 8, !tbaa !2428
  %2129 = icmp ult i64 %2128, %2125
  %2130 = icmp ult i64 %2128, 128
  %2131 = or i1 %2129, %2130
  %2132 = zext i1 %2131 to i8
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2132, i8* %2133, align 1, !tbaa !2433
  %2134 = trunc i64 %2128 to i32
  %2135 = and i32 %2134, 255
  %2136 = call i32 @llvm.ctpop.i32(i32 %2135) #16
  %2137 = trunc i32 %2136 to i8
  %2138 = and i8 %2137, 1
  %2139 = xor i8 %2138, 1
  %2140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2139, i8* %2140, align 1, !tbaa !2447
  %2141 = xor i64 128, %2125
  %2142 = xor i64 %2141, %2128
  %2143 = lshr i64 %2142, 4
  %2144 = trunc i64 %2143 to i8
  %2145 = and i8 %2144, 1
  %2146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2145, i8* %2146, align 1, !tbaa !2448
  %2147 = icmp eq i64 %2128, 0
  %2148 = zext i1 %2147 to i8
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2148, i8* %2149, align 1, !tbaa !2449
  %2150 = lshr i64 %2128, 63
  %2151 = trunc i64 %2150 to i8
  %2152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2151, i8* %2152, align 1, !tbaa !2450
  %2153 = lshr i64 %2125, 63
  %2154 = xor i64 %2150, %2153
  %2155 = add nuw nsw i64 %2154, %2150
  %2156 = icmp eq i64 %2155, 2
  %2157 = zext i1 %2156 to i8
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2157, i8* %2158, align 1, !tbaa !2451
  %2159 = load i64, i64* %PC
  %2160 = add i64 %2159, 1
  store i64 %2160, i64* %PC
  %2161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2162 = load i64, i64* %2161, align 8, !tbaa !2428
  %2163 = add i64 %2162, 8
  %2164 = inttoptr i64 %2162 to i64*
  %2165 = load i64, i64* %2164
  store i64 %2165, i64* %RBP, align 8, !tbaa !2428
  store i64 %2163, i64* %2161, align 8, !tbaa !2428
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 1
  store i64 %2167, i64* %PC
  %2168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2170 = load i64, i64* %2169, align 8, !tbaa !2428
  %2171 = inttoptr i64 %2170 to i64*
  %2172 = load i64, i64* %2171
  store i64 %2172, i64* %2168, align 8, !tbaa !2428
  %2173 = add i64 %2170, 8
  store i64 %2173, i64* %2169, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5
}

; Function Attrs: noinline
define %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404730:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, 8
  %50 = inttoptr i64 %48 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 1
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %56 = load i64, i64* %55, align 8, !tbaa !2428
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %54, align 8, !tbaa !2428
  %59 = add i64 %56, 8
  store i64 %59, i64* %55, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406010__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406010:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 72
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_406070__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 118
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_4060b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_4020d0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4020d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 80
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 80
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2433
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i64 80, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2451
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = load i64, i64* %RDI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %RSI
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 4
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = bitcast %union.vec128_t* %XMM0 to i8*
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = bitcast i8* %87 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %86 to double*
  store double %91, double* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 32
  %95 = load i64, i64* %RDX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 36
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 7
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  store i32 0, i32* %103
  br label %block_4020f0

block_402100:                                     ; preds = %block_4020f0
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 8
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 48
  %112 = load i64, i64* %RAX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %115
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 16
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 56
  %124 = load i64, i64* %RAX
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %123 to i64*
  store i64 %124, i64* %127
  %128 = load i64, i64* %RBP
  %129 = sub i64 %128, 24
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = inttoptr i64 %129 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 64
  %136 = load i64, i64* %RAX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %135 to i64*
  store i64 %136, i64* %139
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 48
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 4
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %RDI, align 8, !tbaa !2428
  %146 = load i64, i64* %RBP
  %147 = sub i64 %146, 56
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 4
  store i64 %149, i64* %PC
  %150 = inttoptr i64 %147 to i64*
  %151 = load i64, i64* %150
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to double*
  %158 = load double, double* %157
  %159 = bitcast i8* %152 to double*
  store double %158, double* %159, align 1, !tbaa !2452
  %160 = getelementptr inbounds i8, i8* %152, i64 8
  %161 = bitcast i8* %160 to double*
  store double 0.000000e+00, double* %161, align 1, !tbaa !2452
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 15403
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %169 = load i64, i64* %168, align 8, !tbaa !2428
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %165, i64* %171
  store i64 %170, i64* %168, align 8, !tbaa !2428
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %163, i64* %172, align 8, !tbaa !2428
  %173 = load i64, i64* %PC
  %174 = call %struct.Memory* @sub_405d50__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* %0, i64 %173, %struct.Memory* %MEMORY.0)
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 72
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  store i64 %176, i64* %RDI, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 72
  %181 = bitcast %union.vec128_t* %XMM0 to i8*
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 5
  store i64 %183, i64* %PC
  %184 = bitcast i8* %181 to double*
  %185 = load double, double* %184, align 1
  %186 = inttoptr i64 %180 to double*
  store double %185, double* %186
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 15517
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_405dd0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %198, %struct.Memory* %174)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 15544
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 5
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %203, i64* %209
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %201, i64* %210, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* %0, i64 %211, %struct.Memory* %199)
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 36
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %214 to i32*
  %218 = load i32, i32* %217
  %219 = zext i32 %218 to i64
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = load i64, i64* %RAX
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 3
  store i64 %222, i64* %PC
  %223 = trunc i64 %220 to i32
  %224 = add i32 1, %223
  %225 = zext i32 %224 to i64
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = icmp ult i32 %224, %223
  %227 = icmp ult i32 %224, 1
  %228 = or i1 %226, %227
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %229, i8* %230, align 1, !tbaa !2433
  %231 = and i32 %224, 255
  %232 = call i32 @llvm.ctpop.i32(i32 %231) #16
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %235, i8* %236, align 1, !tbaa !2447
  %237 = xor i64 1, %220
  %238 = trunc i64 %237 to i32
  %239 = xor i32 %238, %224
  %240 = lshr i32 %239, 4
  %241 = trunc i32 %240 to i8
  %242 = and i8 %241, 1
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %242, i8* %243, align 1, !tbaa !2448
  %244 = icmp eq i32 %224, 0
  %245 = zext i1 %244 to i8
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %245, i8* %246, align 1, !tbaa !2449
  %247 = lshr i32 %224, 31
  %248 = trunc i32 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %248, i8* %249, align 1, !tbaa !2450
  %250 = lshr i32 %223, 31
  %251 = xor i32 %247, %250
  %252 = add nuw nsw i32 %251, %247
  %253 = icmp eq i32 %252, 2
  %254 = zext i1 %253 to i8
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %254, i8* %255, align 1, !tbaa !2451
  %256 = load i64, i64* %RBP
  %257 = sub i64 %256, 36
  %258 = load i32, i32* %EAX
  %259 = zext i32 %258 to i64
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %257 to i32*
  store i32 %258, i32* %262
  %263 = load i64, i64* %PC
  %264 = sub i64 %263, 86
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 5
  store i64 %266, i64* %PC
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %264, i64* %267, align 8, !tbaa !2428
  br label %block_4020f0

block_40214b:                                     ; preds = %block_4020f0
  %268 = load i64, i64* %RSP
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = add i64 80, %268
  store i64 %271, i64* %RSP, align 8, !tbaa !2428
  %272 = icmp ult i64 %271, %268
  %273 = icmp ult i64 %271, 80
  %274 = or i1 %272, %273
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %275, i8* %276, align 1, !tbaa !2433
  %277 = trunc i64 %271 to i32
  %278 = and i32 %277, 255
  %279 = call i32 @llvm.ctpop.i32(i32 %278) #16
  %280 = trunc i32 %279 to i8
  %281 = and i8 %280, 1
  %282 = xor i8 %281, 1
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %282, i8* %283, align 1, !tbaa !2447
  %284 = xor i64 80, %268
  %285 = xor i64 %284, %271
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %288, i8* %289, align 1, !tbaa !2448
  %290 = icmp eq i64 %271, 0
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %291, i8* %292, align 1, !tbaa !2449
  %293 = lshr i64 %271, 63
  %294 = trunc i64 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %294, i8* %295, align 1, !tbaa !2450
  %296 = lshr i64 %268, 63
  %297 = xor i64 %293, %296
  %298 = add nuw nsw i64 %297, %293
  %299 = icmp eq i64 %298, 2
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %300, i8* %301, align 1, !tbaa !2451
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 1
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %305 = load i64, i64* %304, align 8, !tbaa !2428
  %306 = add i64 %305, 8
  %307 = inttoptr i64 %305 to i64*
  %308 = load i64, i64* %307
  store i64 %308, i64* %RBP, align 8, !tbaa !2428
  store i64 %306, i64* %304, align 8, !tbaa !2428
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 1
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %313 = load i64, i64* %312, align 8, !tbaa !2428
  %314 = inttoptr i64 %313 to i64*
  %315 = load i64, i64* %314
  store i64 %315, i64* %311, align 8, !tbaa !2428
  %316 = add i64 %313, 8
  store i64 %316, i64* %312, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4020f0:                                     ; preds = %block_402100, %block_4020d0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4020d0 ], [ %212, %block_402100 ]
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 36
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %RAX, align 8, !tbaa !2428
  %324 = load i32, i32* %EAX
  %325 = zext i32 %324 to i64
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 7
  store i64 %327, i64* %PC
  %328 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %329 = sub i32 %324, %328
  %330 = icmp ult i32 %324, %328
  %331 = zext i1 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %331, i8* %332, align 1, !tbaa !2433
  %333 = and i32 %329, 255
  %334 = call i32 @llvm.ctpop.i32(i32 %333) #16
  %335 = trunc i32 %334 to i8
  %336 = and i8 %335, 1
  %337 = xor i8 %336, 1
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %337, i8* %338, align 1, !tbaa !2447
  %339 = xor i32 %328, %324
  %340 = xor i32 %339, %329
  %341 = lshr i32 %340, 4
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %343, i8* %344, align 1, !tbaa !2448
  %345 = icmp eq i32 %329, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i32 %329, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2450
  %351 = lshr i32 %324, 31
  %352 = lshr i32 %328, 31
  %353 = xor i32 %352, %351
  %354 = xor i32 %348, %351
  %355 = add nuw nsw i32 %354, %353
  %356 = icmp eq i32 %355, 2
  %357 = zext i1 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %357, i8* %358, align 1, !tbaa !2451
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 81
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 6
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 6
  store i64 %364, i64* %PC
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %366 = load i8, i8* %365, align 1, !tbaa !2450
  %367 = icmp ne i8 %366, 0
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %369 = load i8, i8* %368, align 1, !tbaa !2451
  %370 = icmp ne i8 %369, 0
  %371 = xor i1 %367, %370
  %372 = xor i1 %371, true
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %375 = select i1 %371, i64 %362, i64 %360
  store i64 %375, i64* %374, align 8, !tbaa !2428
  %376 = load i8, i8* %BRANCH_TAKEN
  %377 = icmp eq i8 %376, 1
  br i1 %377, label %block_40214b, label %block_402100
}

; Function Attrs: noinline
define %struct.Memory* @sub_406734__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406734:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2433
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2447
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2450
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2451
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2433
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2451
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402730__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402730:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = bitcast %union.vec128_t* %XMM0 to i8*
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC
  %82 = bitcast i8* %79 to double*
  %83 = load double, double* %82, align 1
  %84 = inttoptr i64 %78 to double*
  store double %83, double* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %RDI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 24
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RDX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 40
  %105 = load i64, i64* %RCX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402758

block_4027a1:                                     ; preds = %block_402758
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402768:                                     ; preds = %block_402758
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 24
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 32
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 6284
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 32
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 11151
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 32
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 40
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 6594
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_402758

block_402758:                                     ; preds = %block_402768, %block_402730
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402730 ], [ %249, %block_402768 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_4027a1, label %block_402768
}

; Function Attrs: noinline
define %struct.Memory* @sub_406630__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406630:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_406660__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_4035e0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4035e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = load i64, i64* %RBP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 1
  store i64 %34, i64* %PC
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %36 = load i64, i64* %35, align 8, !tbaa !2428
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %32, i64* %38
  store i64 %37, i64* %35, align 8, !tbaa !2428
  %39 = load i64, i64* %RSP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 3
  store i64 %41, i64* %PC
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC
  %45 = sub i64 %42, 64
  store i64 %45, i64* %RSP, align 8, !tbaa !2428
  %46 = icmp ult i64 %42, 64
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %47, i8* %48, align 1, !tbaa !2433
  %49 = trunc i64 %45 to i32
  %50 = and i32 %49, 255
  %51 = call i32 @llvm.ctpop.i32(i32 %50) #16
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = xor i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = xor i64 64, %42
  %57 = xor i64 %56, %45
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = icmp eq i64 %45, 0
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = lshr i64 %45, 63
  %66 = trunc i64 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = lshr i64 %42, 63
  %69 = xor i64 %65, %68
  %70 = add nuw nsw i64 %69, %68
  %71 = icmp eq i64 %70, 2
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %72, i8* %73, align 1, !tbaa !2451
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 5
  store i64 %75, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %76 = load i32, i32* %EAX
  %77 = zext i32 %76 to i64
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 2
  store i64 %79, i64* %PC
  %80 = and i64 %77, 4294967295
  store i64 %80, i64* %RCX, align 8, !tbaa !2428
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 8
  %83 = load i64, i64* %RDI
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %86
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 16
  %89 = load i64, i64* %RSI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %RSI, align 8, !tbaa !2428
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 8
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RSI
  %106 = load i64, i64* %RDI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  %109 = sub i64 %105, %106
  store i64 %109, i64* %RSI, align 8, !tbaa !2428
  %110 = icmp ult i64 %105, %106
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %111, i8* %112, align 1, !tbaa !2433
  %113 = trunc i64 %109 to i32
  %114 = and i32 %113, 255
  %115 = call i32 @llvm.ctpop.i32(i32 %114) #16
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %118, i8* %119, align 1, !tbaa !2447
  %120 = xor i64 %106, %105
  %121 = xor i64 %120, %109
  %122 = lshr i64 %121, 4
  %123 = trunc i64 %122 to i8
  %124 = and i8 %123, 1
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %124, i8* %125, align 1, !tbaa !2448
  %126 = icmp eq i64 %109, 0
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %127, i8* %128, align 1, !tbaa !2449
  %129 = lshr i64 %109, 63
  %130 = trunc i64 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = lshr i64 %105, 63
  %133 = lshr i64 %106, 63
  %134 = xor i64 %133, %132
  %135 = xor i64 %129, %132
  %136 = add nuw nsw i64 %135, %134
  %137 = icmp eq i64 %136, 2
  %138 = zext i1 %137 to i8
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %138, i8* %139, align 1, !tbaa !2451
  %140 = load i64, i64* %RSI
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = ashr i64 %140, 2
  %144 = trunc i64 %143 to i8
  %145 = and i8 %144, 1
  %146 = ashr i64 %143, 1
  store i64 %146, i64* %RSI, align 8, !tbaa !2428
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %145, i8* %147, align 1, !tbaa !2432
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %149 = trunc i64 %146 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  store i8 %154, i8* %148, align 1, !tbaa !2432
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %155, align 1, !tbaa !2432
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = icmp eq i64 %146, 0
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %156, align 1, !tbaa !2432
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %160 = lshr i64 %146, 63
  %161 = trunc i64 %160 to i8
  store i8 %161, i8* %159, align 1, !tbaa !2432
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %162, align 1, !tbaa !2432
  %163 = load i64, i64* %RBP
  %164 = sub i64 %163, 32
  %165 = load i64, i64* %RSI
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %164 to i64*
  store i64 %165, i64* %168
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 32
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 2
  store i64 %176, i64* %PC
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %179 = load i64, i64* %178, align 8, !tbaa !2428
  %180 = ashr i64 %179, 63
  store i64 %180, i64* %177, align 8, !tbaa !2428
  %181 = load i64, i64* %RCX
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %187 = load i64, i64* %186, align 8, !tbaa !2428
  %188 = sext i64 %181 to i128
  %189 = and i128 %188, -18446744073709551616
  %190 = zext i64 %187 to i128
  %191 = shl nuw i128 %190, 64
  %192 = zext i64 %185 to i128
  %193 = or i128 %191, %192
  %194 = zext i64 %181 to i128
  %195 = or i128 %189, %194
  %196 = sdiv i128 %193, %195
  %197 = trunc i128 %196 to i64
  %198 = and i128 %196, 18446744073709551615
  %199 = sext i64 %197 to i128
  %200 = and i128 %199, -18446744073709551616
  %201 = or i128 %200, %198
  %202 = icmp eq i128 %196, %201
  br i1 %202, label %207, label %203

; <label>:203:                                    ; preds = %block_4035e0
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %205 = load i64, i64* %204, align 8, !tbaa !2428
  %206 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %205, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:207:                                    ; preds = %block_4035e0
  %208 = srem i128 %193, %195
  %209 = trunc i128 %208 to i64
  store i64 %197, i64* %184, align 8, !tbaa !2428
  store i64 %209, i64* %186, align 8, !tbaa !2428
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %210, align 1, !tbaa !2433
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %211, align 1, !tbaa !2447
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %212, align 1, !tbaa !2448
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %213, align 1, !tbaa !2449
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %214, align 1, !tbaa !2450
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %215, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %203, %207
  %216 = phi %struct.Memory* [ %206, %203 ], [ %2, %207 ]
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC
  %220 = sub i64 %217, 1
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp ult i64 %217, 1
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %222, i8* %223, align 1, !tbaa !2433
  %224 = trunc i64 %220 to i32
  %225 = and i32 %224, 255
  %226 = call i32 @llvm.ctpop.i32(i32 %225) #16
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %229, i8* %230, align 1, !tbaa !2447
  %231 = xor i64 1, %217
  %232 = xor i64 %231, %220
  %233 = lshr i64 %232, 4
  %234 = trunc i64 %233 to i8
  %235 = and i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %235, i8* %236, align 1, !tbaa !2448
  %237 = icmp eq i64 %220, 0
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %238, i8* %239, align 1, !tbaa !2449
  %240 = lshr i64 %220, 63
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %241, i8* %242, align 1, !tbaa !2450
  %243 = lshr i64 %217, 63
  %244 = xor i64 %240, %243
  %245 = add nuw nsw i64 %244, %243
  %246 = icmp eq i64 %245, 2
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %247, i8* %248, align 1, !tbaa !2451
  %249 = load i64, i64* %RBP
  %250 = sub i64 %249, 24
  %251 = load i64, i64* %RAX
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %254
  br label %block_40361b

block_40367c:                                     ; preds = %block_403671
  %255 = load i64, i64* %RAX
  %256 = load i32, i32* %EAX
  %257 = zext i32 %256 to i64
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 2
  store i64 %259, i64* %PC
  %260 = xor i64 %257, %255
  %261 = trunc i64 %260 to i32
  %262 = and i64 %260, 4294967295
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %263, align 1, !tbaa !2433
  %264 = and i32 %261, 255
  %265 = call i32 @llvm.ctpop.i32(i32 %264) #16
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %268, i8* %269, align 1, !tbaa !2447
  %270 = icmp eq i32 %261, 0
  %271 = zext i1 %270 to i8
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %271, i8* %272, align 1, !tbaa !2449
  %273 = lshr i32 %261, 31
  %274 = trunc i32 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %274, i8* %275, align 1, !tbaa !2450
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %276, align 1, !tbaa !2451
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %277, align 1, !tbaa !2448
  %278 = load i32, i32* %EAX
  %279 = zext i32 %278 to i64
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 2
  store i64 %281, i64* %PC
  %282 = and i64 %279, 4294967295
  store i64 %282, i64* %RDX, align 8, !tbaa !2428
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 8
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %284 to i64*
  %288 = load i64, i64* %287
  store i64 %288, i64* %RCX, align 8, !tbaa !2428
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 24
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 4
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i64*
  %294 = load i64, i64* %293
  store i64 %294, i64* %RSI, align 8, !tbaa !2428
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %RSI
  %297 = mul i64 %296, 8
  %298 = add i64 %297, %295
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 56
  %305 = load i64, i64* %RCX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 8
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RCX, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 8
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 24
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 4
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i64*
  %326 = load i64, i64* %325
  store i64 %326, i64* %RDI, align 8, !tbaa !2428
  %327 = load i64, i64* %RCX
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 3
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330
  store i64 %331, i64* %RCX, align 8, !tbaa !2428
  %332 = load i64, i64* %RSI
  %333 = load i64, i64* %RDI
  %334 = mul i64 %333, 8
  %335 = add i64 %334, %332
  %336 = load i64, i64* %RCX
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %335 to i64*
  store i64 %336, i64* %339
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 24
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC
  %344 = inttoptr i64 %341 to i64*
  %345 = load i64, i64* %344
  store i64 %345, i64* %RDI, align 8, !tbaa !2428
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 8
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350
  store i64 %351, i64* %RSI, align 8, !tbaa !2428
  %352 = load i64, i64* %RBP
  %353 = sub i64 %352, 56
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 4
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %RCX, align 8, !tbaa !2428
  %358 = load i64, i64* %RBP
  %359 = sub i64 %358, 64
  %360 = load i64, i64* %RCX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %359 to i64*
  store i64 %360, i64* %363
  %364 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 64
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 5
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to double*
  %370 = load double, double* %369
  %371 = bitcast i8* %364 to double*
  store double %370, double* %371, align 1, !tbaa !2452
  %372 = getelementptr inbounds i8, i8* %364, i64 8
  %373 = bitcast i8* %372 to double*
  store double 0.000000e+00, double* %373, align 1, !tbaa !2452
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 264
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 5
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 5
  store i64 %379, i64* %PC
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %381 = load i64, i64* %380, align 8, !tbaa !2428
  %382 = add i64 %381, -8
  %383 = inttoptr i64 %382 to i64*
  store i64 %377, i64* %383
  store i64 %382, i64* %380, align 8, !tbaa !2428
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %375, i64* %384, align 8, !tbaa !2428
  %385 = load i64, i64* %PC
  %386 = call %struct.Memory* @sub_4037c0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* %0, i64 %385, %struct.Memory* %MEMORY.0)
  %387 = load i64, i64* %RBP
  %388 = sub i64 %387, 24
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %388 to i64*
  %392 = load i64, i64* %391
  store i64 %392, i64* %RAX, align 8, !tbaa !2428
  %393 = load i64, i64* %RAX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = add i64 -1, %393
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = icmp ult i64 %396, %393
  %398 = icmp ult i64 %396, -1
  %399 = or i1 %397, %398
  %400 = zext i1 %399 to i8
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %400, i8* %401, align 1, !tbaa !2433
  %402 = trunc i64 %396 to i32
  %403 = and i32 %402, 255
  %404 = call i32 @llvm.ctpop.i32(i32 %403) #16
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %407, i8* %408, align 1, !tbaa !2447
  %409 = xor i64 -1, %393
  %410 = xor i64 %409, %396
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %413, i8* %414, align 1, !tbaa !2448
  %415 = icmp eq i64 %396, 0
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %416, i8* %417, align 1, !tbaa !2449
  %418 = lshr i64 %396, 63
  %419 = trunc i64 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %419, i8* %420, align 1, !tbaa !2450
  %421 = lshr i64 %393, 63
  %422 = xor i64 %418, %421
  %423 = xor i64 %418, 1
  %424 = add nuw nsw i64 %422, %423
  %425 = icmp eq i64 %424, 2
  %426 = zext i1 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %426, i8* %427, align 1, !tbaa !2451
  %428 = load i64, i64* %RBP
  %429 = sub i64 %428, 24
  %430 = load i64, i64* %RAX
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 4
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %429 to i64*
  store i64 %430, i64* %433
  %434 = load i64, i64* %PC
  %435 = sub i64 %434, 88
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 5
  store i64 %437, i64* %PC
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %435, i64* %438, align 8, !tbaa !2428
  br label %block_403671

block_403671:                                     ; preds = %block_403665, %block_40367c
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_403665 ], [ %386, %block_40367c ]
  %439 = load i64, i64* %RBP
  %440 = sub i64 %439, 24
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 5
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %440 to i64*
  %444 = load i64, i64* %443
  %445 = sub i64 %444, 1
  %446 = icmp ult i64 %444, 1
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %447, i8* %448, align 1, !tbaa !2433
  %449 = trunc i64 %445 to i32
  %450 = and i32 %449, 255
  %451 = call i32 @llvm.ctpop.i32(i32 %450) #16
  %452 = trunc i32 %451 to i8
  %453 = and i8 %452, 1
  %454 = xor i8 %453, 1
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %454, i8* %455, align 1, !tbaa !2447
  %456 = xor i64 %444, 1
  %457 = xor i64 %456, %445
  %458 = lshr i64 %457, 4
  %459 = trunc i64 %458 to i8
  %460 = and i8 %459, 1
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %460, i8* %461, align 1, !tbaa !2448
  %462 = icmp eq i64 %445, 0
  %463 = zext i1 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %463, i8* %464, align 1, !tbaa !2449
  %465 = lshr i64 %445, 63
  %466 = trunc i64 %465 to i8
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %466, i8* %467, align 1, !tbaa !2450
  %468 = lshr i64 %444, 63
  %469 = xor i64 %465, %468
  %470 = add nuw nsw i64 %469, %468
  %471 = icmp eq i64 %470, 2
  %472 = zext i1 %471 to i8
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %472, i8* %473, align 1, !tbaa !2451
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 88
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 6
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 6
  store i64 %479, i64* %PC
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %481 = load i8, i8* %480, align 1, !tbaa !2450
  %482 = icmp ne i8 %481, 0
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %484 = load i8, i8* %483, align 1, !tbaa !2451
  %485 = icmp ne i8 %484, 0
  %486 = xor i1 %482, %485
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %489 = select i1 %486, i64 %475, i64 %477
  store i64 %489, i64* %488, align 8, !tbaa !2428
  %490 = load i8, i8* %BRANCH_TAKEN
  %491 = icmp eq i8 %490, 1
  br i1 %491, label %block_4036ce, label %block_40367c

block_4036ce:                                     ; preds = %block_403671
  %492 = load i64, i64* %RSP
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 4
  store i64 %494, i64* %PC
  %495 = add i64 64, %492
  store i64 %495, i64* %RSP, align 8, !tbaa !2428
  %496 = icmp ult i64 %495, %492
  %497 = icmp ult i64 %495, 64
  %498 = or i1 %496, %497
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %499, i8* %500, align 1, !tbaa !2433
  %501 = trunc i64 %495 to i32
  %502 = and i32 %501, 255
  %503 = call i32 @llvm.ctpop.i32(i32 %502) #16
  %504 = trunc i32 %503 to i8
  %505 = and i8 %504, 1
  %506 = xor i8 %505, 1
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %506, i8* %507, align 1, !tbaa !2447
  %508 = xor i64 64, %492
  %509 = xor i64 %508, %495
  %510 = lshr i64 %509, 4
  %511 = trunc i64 %510 to i8
  %512 = and i8 %511, 1
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %512, i8* %513, align 1, !tbaa !2448
  %514 = icmp eq i64 %495, 0
  %515 = zext i1 %514 to i8
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %515, i8* %516, align 1, !tbaa !2449
  %517 = lshr i64 %495, 63
  %518 = trunc i64 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %518, i8* %519, align 1, !tbaa !2450
  %520 = lshr i64 %492, 63
  %521 = xor i64 %517, %520
  %522 = add nuw nsw i64 %521, %517
  %523 = icmp eq i64 %522, 2
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %524, i8* %525, align 1, !tbaa !2451
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 1
  store i64 %527, i64* %PC
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %529 = load i64, i64* %528, align 8, !tbaa !2428
  %530 = add i64 %529, 8
  %531 = inttoptr i64 %529 to i64*
  %532 = load i64, i64* %531
  store i64 %532, i64* %RBP, align 8, !tbaa !2428
  store i64 %530, i64* %528, align 8, !tbaa !2428
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 1
  store i64 %534, i64* %PC
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %537 = load i64, i64* %536, align 8, !tbaa !2428
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  store i64 %539, i64* %535, align 8, !tbaa !2428
  %540 = add i64 %537, 8
  store i64 %540, i64* %536, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40361b:                                     ; preds = %block_403626, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.1 = phi %struct.Memory* [ %216, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %664, %block_403626 ]
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 24
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 5
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i64*
  %546 = load i64, i64* %545
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %547, align 1, !tbaa !2433
  %548 = trunc i64 %546 to i32
  %549 = and i32 %548, 255
  %550 = call i32 @llvm.ctpop.i32(i32 %549) #16
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  %553 = xor i8 %552, 1
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %553, i8* %554, align 1, !tbaa !2447
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %555, align 1, !tbaa !2448
  %556 = icmp eq i64 %546, 0
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %557, i8* %558, align 1, !tbaa !2449
  %559 = lshr i64 %546, 63
  %560 = trunc i64 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %560, i8* %561, align 1, !tbaa !2450
  %562 = lshr i64 %546, 63
  %563 = xor i64 %559, %562
  %564 = add nuw nsw i64 %563, %562
  %565 = icmp eq i64 %564, 2
  %566 = zext i1 %565 to i8
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %566, i8* %567, align 1, !tbaa !2451
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 69
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 6
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 6
  store i64 %573, i64* %PC
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %575 = load i8, i8* %574, align 1, !tbaa !2450
  %576 = icmp ne i8 %575, 0
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %578 = load i8, i8* %577, align 1, !tbaa !2451
  %579 = icmp ne i8 %578, 0
  %580 = xor i1 %576, %579
  %581 = zext i1 %580 to i8
  store i8 %581, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %583 = select i1 %580, i64 %569, i64 %571
  store i64 %583, i64* %582, align 8, !tbaa !2428
  %584 = load i8, i8* %BRANCH_TAKEN
  %585 = icmp eq i8 %584, 1
  %586 = load i64, i64* %RBP
  br i1 %585, label %block_403665, label %block_403626

block_403626:                                     ; preds = %block_40361b
  %587 = sub i64 %586, 8
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = load i64, i64* %RBP
  %593 = sub i64 %592, 24
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 4
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i64*
  %597 = load i64, i64* %596
  store i64 %597, i64* %RCX, align 8, !tbaa !2428
  %598 = load i64, i64* %RAX
  %599 = load i64, i64* %RCX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, %598
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 4
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %RBP
  %613 = sub i64 %612, 32
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 4
  store i64 %615, i64* %PC
  %616 = inttoptr i64 %613 to i64*
  %617 = load i64, i64* %616
  store i64 %617, i64* %RDI, align 8, !tbaa !2428
  %618 = load i64, i64* %RBP
  %619 = sub i64 %618, 8
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %619 to i64*
  %623 = load i64, i64* %622
  store i64 %623, i64* %RSI, align 8, !tbaa !2428
  %624 = load i64, i64* %RBP
  %625 = sub i64 %624, 24
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 4
  store i64 %627, i64* %PC
  %628 = inttoptr i64 %625 to i64*
  %629 = load i64, i64* %628
  store i64 %629, i64* %RDX, align 8, !tbaa !2428
  %630 = load i64, i64* %RBP
  %631 = sub i64 %630, 40
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %631 to i64*
  %635 = load i64, i64* %634
  store i64 %635, i64* %RAX, align 8, !tbaa !2428
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 48
  %638 = load i64, i64* %RAX
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 4
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %637 to i64*
  store i64 %638, i64* %641
  %642 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %643 = load i64, i64* %RBP
  %644 = sub i64 %643, 48
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 5
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to double*
  %648 = load double, double* %647
  %649 = bitcast i8* %642 to double*
  store double %648, double* %649, align 1, !tbaa !2452
  %650 = getelementptr inbounds i8, i8* %642, i64 8
  %651 = bitcast i8* %650 to double*
  store double 0.000000e+00, double* %651, align 1, !tbaa !2452
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 369
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 5
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 5
  store i64 %657, i64* %PC
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %659 = load i64, i64* %658, align 8, !tbaa !2428
  %660 = add i64 %659, -8
  %661 = inttoptr i64 %660 to i64*
  store i64 %655, i64* %661
  store i64 %660, i64* %658, align 8, !tbaa !2428
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %653, i64* %662, align 8, !tbaa !2428
  %663 = load i64, i64* %PC
  %664 = call %struct.Memory* @sub_4037c0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* %0, i64 %663, %struct.Memory* %MEMORY.1)
  %665 = load i64, i64* %RBP
  %666 = sub i64 %665, 24
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 4
  store i64 %668, i64* %PC
  %669 = inttoptr i64 %666 to i64*
  %670 = load i64, i64* %669
  store i64 %670, i64* %RAX, align 8, !tbaa !2428
  %671 = load i64, i64* %RAX
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC
  %674 = add i64 -1, %671
  store i64 %674, i64* %RAX, align 8, !tbaa !2428
  %675 = icmp ult i64 %674, %671
  %676 = icmp ult i64 %674, -1
  %677 = or i1 %675, %676
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %678, i8* %679, align 1, !tbaa !2433
  %680 = trunc i64 %674 to i32
  %681 = and i32 %680, 255
  %682 = call i32 @llvm.ctpop.i32(i32 %681) #16
  %683 = trunc i32 %682 to i8
  %684 = and i8 %683, 1
  %685 = xor i8 %684, 1
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %685, i8* %686, align 1, !tbaa !2447
  %687 = xor i64 -1, %671
  %688 = xor i64 %687, %674
  %689 = lshr i64 %688, 4
  %690 = trunc i64 %689 to i8
  %691 = and i8 %690, 1
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %691, i8* %692, align 1, !tbaa !2448
  %693 = icmp eq i64 %674, 0
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %694, i8* %695, align 1, !tbaa !2449
  %696 = lshr i64 %674, 63
  %697 = trunc i64 %696 to i8
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %697, i8* %698, align 1, !tbaa !2450
  %699 = lshr i64 %671, 63
  %700 = xor i64 %696, %699
  %701 = xor i64 %696, 1
  %702 = add nuw nsw i64 %700, %701
  %703 = icmp eq i64 %702, 2
  %704 = zext i1 %703 to i8
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %704, i8* %705, align 1, !tbaa !2451
  %706 = load i64, i64* %RBP
  %707 = sub i64 %706, 24
  %708 = load i64, i64* %RAX
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 4
  store i64 %710, i64* %PC
  %711 = inttoptr i64 %707 to i64*
  store i64 %708, i64* %711
  %712 = load i64, i64* %PC
  %713 = sub i64 %712, 69
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 5
  store i64 %715, i64* %PC
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %713, i64* %716, align 8, !tbaa !2428
  br label %block_40361b

block_403665:                                     ; preds = %block_40361b
  %717 = sub i64 %586, 32
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %717 to i64*
  %721 = load i64, i64* %720
  store i64 %721, i64* %RAX, align 8, !tbaa !2428
  %722 = load i64, i64* %RAX
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 4
  store i64 %724, i64* %PC
  %725 = sub i64 %722, 1
  store i64 %725, i64* %RAX, align 8, !tbaa !2428
  %726 = icmp ult i64 %722, 1
  %727 = zext i1 %726 to i8
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %727, i8* %728, align 1, !tbaa !2433
  %729 = trunc i64 %725 to i32
  %730 = and i32 %729, 255
  %731 = call i32 @llvm.ctpop.i32(i32 %730) #16
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = xor i8 %733, 1
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %734, i8* %735, align 1, !tbaa !2447
  %736 = xor i64 1, %722
  %737 = xor i64 %736, %725
  %738 = lshr i64 %737, 4
  %739 = trunc i64 %738 to i8
  %740 = and i8 %739, 1
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %740, i8* %741, align 1, !tbaa !2448
  %742 = icmp eq i64 %725, 0
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %743, i8* %744, align 1, !tbaa !2449
  %745 = lshr i64 %725, 63
  %746 = trunc i64 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %746, i8* %747, align 1, !tbaa !2450
  %748 = lshr i64 %722, 63
  %749 = xor i64 %745, %748
  %750 = add nuw nsw i64 %749, %748
  %751 = icmp eq i64 %750, 2
  %752 = zext i1 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %752, i8* %753, align 1, !tbaa !2451
  %754 = load i64, i64* %RBP
  %755 = sub i64 %754, 24
  %756 = load i64, i64* %RAX
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 4
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %755 to i64*
  store i64 %756, i64* %759
  br label %block_403671
}

; Function Attrs: noinline
define %struct.Memory* @sub_4041a0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4041a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RCX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 13
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSP = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 15
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RBP = bitcast %union.anon* %30 to i64*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 32
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 32
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2433
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i64 32, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2451
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RDI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 24
  %81 = load i64, i64* %RSI
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 4
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 32
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 16
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = inttoptr i64 %98 to i64*
  %102 = load i64, i64* %101
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %103 = load i64, i64* %RSI
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = add i64 8, %103
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %107 = icmp ult i64 %106, %103
  %108 = icmp ult i64 %106, 8
  %109 = or i1 %107, %108
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %110, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %106 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = xor i64 8, %103
  %120 = xor i64 %119, %106
  %121 = lshr i64 %120, 4
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %123, i8* %124, align 1, !tbaa !2448
  %125 = icmp eq i64 %106, 0
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %126, i8* %127, align 1, !tbaa !2449
  %128 = lshr i64 %106, 63
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %129, i8* %130, align 1, !tbaa !2450
  %131 = lshr i64 %103, 63
  %132 = xor i64 %128, %131
  %133 = add nuw nsw i64 %132, %128
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %135, i8* %136, align 1, !tbaa !2451
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %RSI
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %142
  br label %block_4041c4

block_40421a:                                     ; preds = %block_404208, %block_404216
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_404216 ], [ %342, %block_404208 ]
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 1
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i8*
  %148 = load i8, i8* %147
  store i8 %148, i8* %AL, align 1, !tbaa !2432
  %149 = load i8, i8* %AL
  %150 = zext i8 %149 to i64
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 2
  store i64 %152, i64* %PC
  %153 = and i64 1, %150
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %AL, align 1, !tbaa !2432
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %155, align 1, !tbaa !2433
  %156 = trunc i64 %153 to i32
  %157 = and i32 %156, 255
  %158 = call i32 @llvm.ctpop.i32(i32 %157) #16
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = xor i8 %160, 1
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %161, i8* %162, align 1, !tbaa !2447
  %163 = icmp eq i8 %154, 0
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %164, i8* %165, align 1, !tbaa !2449
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %166, align 1, !tbaa !2450
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %167, align 1, !tbaa !2451
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %168, align 1, !tbaa !2448
  %169 = load i8, i8* %AL
  %170 = zext i8 %169 to i64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC
  %173 = and i64 %170, 255
  store i64 %173, i64* %RAX, align 8, !tbaa !2428
  %174 = load i64, i64* %RSP
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC
  %177 = add i64 32, %174
  store i64 %177, i64* %RSP, align 8, !tbaa !2428
  %178 = icmp ult i64 %177, %174
  %179 = icmp ult i64 %177, 32
  %180 = or i1 %178, %179
  %181 = zext i1 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %182, align 1, !tbaa !2433
  %183 = trunc i64 %177 to i32
  %184 = and i32 %183, 255
  %185 = call i32 @llvm.ctpop.i32(i32 %184) #16
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  %188 = xor i8 %187, 1
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %188, i8* %189, align 1, !tbaa !2447
  %190 = xor i64 32, %174
  %191 = xor i64 %190, %177
  %192 = lshr i64 %191, 4
  %193 = trunc i64 %192 to i8
  %194 = and i8 %193, 1
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %194, i8* %195, align 1, !tbaa !2448
  %196 = icmp eq i64 %177, 0
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %197, i8* %198, align 1, !tbaa !2449
  %199 = lshr i64 %177, 63
  %200 = trunc i64 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %200, i8* %201, align 1, !tbaa !2450
  %202 = lshr i64 %174, 63
  %203 = xor i64 %199, %202
  %204 = add nuw nsw i64 %203, %199
  %205 = icmp eq i64 %204, 2
  %206 = zext i1 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %206, i8* %207, align 1, !tbaa !2451
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 1
  store i64 %209, i64* %PC
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = add i64 %211, 8
  %213 = inttoptr i64 %211 to i64*
  %214 = load i64, i64* %213
  store i64 %214, i64* %RBP, align 8, !tbaa !2428
  store i64 %212, i64* %210, align 8, !tbaa !2428
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 1
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = inttoptr i64 %219 to i64*
  %221 = load i64, i64* %220
  store i64 %221, i64* %217, align 8, !tbaa !2428
  %222 = add i64 %219, 8
  store i64 %222, i64* %218, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404216:                                     ; preds = %block_4041c4
  %223 = sub i64 %444, 1
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 4
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i8*
  store i8 1, i8* %226
  br label %block_40421a

block_4041d2:                                     ; preds = %block_4041c4
  %227 = sub i64 %444, 16
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %235 = load i64, i64* %RCX
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC
  %238 = add i64 8, %235
  store i64 %238, i64* %RCX, align 8, !tbaa !2428
  %239 = icmp ult i64 %238, %235
  %240 = icmp ult i64 %238, 8
  %241 = or i1 %239, %240
  %242 = zext i1 %241 to i8
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %242, i8* %243, align 1, !tbaa !2433
  %244 = trunc i64 %238 to i32
  %245 = and i32 %244, 255
  %246 = call i32 @llvm.ctpop.i32(i32 %245) #16
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %249, i8* %250, align 1, !tbaa !2447
  %251 = xor i64 8, %235
  %252 = xor i64 %251, %238
  %253 = lshr i64 %252, 4
  %254 = trunc i64 %253 to i8
  %255 = and i8 %254, 1
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %255, i8* %256, align 1, !tbaa !2448
  %257 = icmp eq i64 %238, 0
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %258, i8* %259, align 1, !tbaa !2449
  %260 = lshr i64 %238, 63
  %261 = trunc i64 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %261, i8* %262, align 1, !tbaa !2450
  %263 = lshr i64 %235, 63
  %264 = xor i64 %260, %263
  %265 = add nuw nsw i64 %264, %260
  %266 = icmp eq i64 %265, 2
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %267, i8* %268, align 1, !tbaa !2451
  %269 = load i64, i64* %RBP
  %270 = sub i64 %269, 16
  %271 = load i64, i64* %RCX
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %270 to i64*
  store i64 %271, i64* %274
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 32
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %RCX, align 8, !tbaa !2428
  %281 = load i64, i64* %RCX
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  store i64 %281, i64* %RDX, align 8, !tbaa !2428
  %284 = load i64, i64* %RDX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = add i64 8, %284
  store i64 %287, i64* %RDX, align 8, !tbaa !2428
  %288 = icmp ult i64 %287, %284
  %289 = icmp ult i64 %287, 8
  %290 = or i1 %288, %289
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2433
  %293 = trunc i64 %287 to i32
  %294 = and i32 %293, 255
  %295 = call i32 @llvm.ctpop.i32(i32 %294) #16
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %298, i8* %299, align 1, !tbaa !2447
  %300 = xor i64 8, %284
  %301 = xor i64 %300, %287
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2448
  %306 = icmp eq i64 %287, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2449
  %309 = lshr i64 %287, 63
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2450
  %312 = lshr i64 %284, 63
  %313 = xor i64 %309, %312
  %314 = add nuw nsw i64 %313, %309
  %315 = icmp eq i64 %314, 2
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %316, i8* %317, align 1, !tbaa !2451
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 32
  %320 = load i64, i64* %RDX
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %323
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  store i64 %324, i64* %RDI, align 8, !tbaa !2428
  %327 = load i64, i64* %RCX
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 3
  store i64 %329, i64* %PC
  store i64 %327, i64* %RSI, align 8, !tbaa !2428
  %330 = load i64, i64* %PC
  %331 = sub i64 %330, 4006
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 5
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %337 = load i64, i64* %336, align 8, !tbaa !2428
  %338 = add i64 %337, -8
  %339 = inttoptr i64 %338 to i64*
  store i64 %333, i64* %339
  store i64 %338, i64* %336, align 8, !tbaa !2428
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %331, i64* %340, align 8, !tbaa !2428
  %341 = load i64, i64* %PC
  %342 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %341, %struct.Memory* %MEMORY.1)
  %343 = load i8, i8* %AL
  %344 = zext i8 %343 to i64
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 2
  store i64 %346, i64* %PC
  %347 = and i64 1, %344
  %348 = trunc i64 %347 to i8
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %349, align 1, !tbaa !2433
  %350 = trunc i64 %347 to i32
  %351 = and i32 %350, 255
  %352 = call i32 @llvm.ctpop.i32(i32 %351) #16
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  %355 = xor i8 %354, 1
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %355, i8* %356, align 1, !tbaa !2447
  %357 = icmp eq i8 %348, 0
  %358 = zext i1 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %358, i8* %359, align 1, !tbaa !2449
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %360, align 1, !tbaa !2450
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %361, align 1, !tbaa !2451
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %362, align 1, !tbaa !2448
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 11
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 6
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 6
  store i64 %368, i64* %PC
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %370 = load i8, i8* %369, align 1, !tbaa !2449
  %371 = icmp eq i8 %370, 0
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %374 = select i1 %371, i64 %364, i64 %366
  store i64 %374, i64* %373, align 8, !tbaa !2428
  %375 = load i8, i8* %BRANCH_TAKEN
  %376 = icmp eq i8 %375, 1
  br i1 %376, label %block_404208, label %block_404203

block_404208:                                     ; preds = %block_4041d2
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 1
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i8*
  store i8 0, i8* %381
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 14
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  store i64 %385, i64* %PC
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %383, i64* %386, align 8, !tbaa !2428
  br label %block_40421a

block_4041c4:                                     ; preds = %block_404203, %block_4041a0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4041a0 ], [ %342, %block_404203 ]
  %387 = load i64, i64* %RBP
  %388 = sub i64 %387, 16
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %388 to i64*
  %392 = load i64, i64* %391
  store i64 %392, i64* %RAX, align 8, !tbaa !2428
  %393 = load i64, i64* %RAX
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 24
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i64*
  %399 = load i64, i64* %398
  %400 = sub i64 %393, %399
  %401 = icmp ugt i64 %399, %393
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %402, i8* %403, align 1, !tbaa !2433
  %404 = trunc i64 %400 to i32
  %405 = and i32 %404, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i64 %399, %393
  %412 = xor i64 %411, %400
  %413 = lshr i64 %412, 4
  %414 = trunc i64 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i64 %400, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i64 %400, 63
  %421 = trunc i64 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i64 %393, 63
  %424 = lshr i64 %399, 63
  %425 = xor i64 %424, %423
  %426 = xor i64 %420, %423
  %427 = add nuw nsw i64 %426, %425
  %428 = icmp eq i64 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 74
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %438 = load i8, i8* %437, align 1, !tbaa !2449
  store i8 %438, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %440 = icmp ne i8 %438, 0
  %441 = select i1 %440, i64 %432, i64 %434
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %442 = load i8, i8* %BRANCH_TAKEN
  %443 = icmp eq i8 %442, 1
  %444 = load i64, i64* %RBP
  br i1 %443, label %block_404216, label %block_4041d2

block_404203:                                     ; preds = %block_4041d2
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 14
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 5
  store i64 %448, i64* %PC
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %446, i64* %449, align 8, !tbaa !2428
  %450 = load i64, i64* %PC
  %451 = sub i64 %450, 77
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 5
  store i64 %453, i64* %PC
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %451, i64* %454, align 8, !tbaa !2428
  br label %block_4041c4
}

; Function Attrs: noinline
define %struct.Memory* @sub_406300__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406300:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4065a0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4065a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_4065d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b40_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400b40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6328568, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6328568
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6328568
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2433
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2447
  %50 = xor i64 6328568, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2450
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2451
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2432
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2432
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2432
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2432
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2432
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2432
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2432
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2432
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2432
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2432
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2432
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2432
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2433
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2447
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2448
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2449
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2450
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2451
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2432
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2432
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2432
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2432
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2432
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2432
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2449
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_400b78, label %block_400b63

block_400b7a:                                     ; preds = %block_400b6d
  %190 = load i64, i64* %RAX
  %191 = load i64, i64* %RAX
  %192 = add i64 %191, %190
  %193 = load i16, i16* %AX
  %194 = zext i16 %193 to i64
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 6
  store i64 %196, i64* %PC
  %197 = load i64, i64* %PC
  %198 = tail call %struct.Memory* @sub_400b80___do_global_dtors_aux(%struct.State* %0, i64 %197, %struct.Memory* %2)
  ret %struct.Memory* %198

block_400b75:                                     ; preds = %block_400b6d
  %199 = load i64, i64* %RAX
  %200 = load i32, i32* %EAX
  %201 = zext i32 %200 to i64
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  br label %block_400b78

block_400b6d:                                     ; preds = %block_400b63
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 1
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RBP, align 8, !tbaa !2428
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  store i64 6328568, i64* %RDI, align 8, !tbaa !2428
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 2
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  %217 = load i64, i64* %PC
  switch i64 %217, label %269 [
    i64 4197242, label %block_400b7a
    i64 4197237, label %block_400b75
  ]

block_400b78:                                     ; preds = %block_400b63, %block_400b75, %block_400b40
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400b40 ], [ %2, %block_400b63 ], [ %2, %block_400b75 ]
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 1
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !2428
  %222 = add i64 %221, 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RBP, align 8, !tbaa !2428
  store i64 %222, i64* %220, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 1
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %227, align 8, !tbaa !2428
  %232 = add i64 %229, 8
  store i64 %232, i64* %228, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400b63:                                     ; preds = %block_400b40
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  store i64 %234, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RAX
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = and i64 %236, %235
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %240, align 1, !tbaa !2433
  %241 = trunc i64 %239 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2447
  %248 = icmp eq i64 %239, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2449
  %251 = lshr i64 %239, 63
  %252 = trunc i64 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2450
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %254, align 1, !tbaa !2451
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %255, align 1, !tbaa !2448
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 13
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 2
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 2
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %263 = load i8, i8* %262, align 1, !tbaa !2449
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = icmp ne i8 %263, 0
  %266 = select i1 %265, i64 %257, i64 %259
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %267 = load i8, i8* %BRANCH_TAKEN
  %268 = icmp eq i8 %267, 1
  br i1 %268, label %block_400b78, label %block_400b6d

; <label>:269:                                    ; preds = %block_400b6d
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_406730___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406730:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RSI
  %53 = load i64, i64* %RDI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, 8
  %62 = inttoptr i64 %60 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 1
  store i64 %65, i64* %PC
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %68 = load i64, i64* %67, align 8, !tbaa !2428
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %66, align 8, !tbaa !2428
  %71 = add i64 %68, 8
  store i64 %71, i64* %67, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404150:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 32
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 32
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 32, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 56
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_4041a0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 33
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2449
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_404190, label %block_404175

block_404175:                                     ; preds = %block_404150
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 10
  store i64 %139, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RSI, align 8, !tbaa !2428
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 2
  store i64 %145, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %146 = load i64, i64* %PC
  %147 = sub i64 %146, 15000
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 5
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %153 = load i64, i64* %152, align 8, !tbaa !2428
  %154 = add i64 %153, -8
  %155 = inttoptr i64 %154 to i64*
  store i64 %149, i64* %155
  store i64 %154, i64* %152, align 8, !tbaa !2428
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %147, i64* %156, align 8, !tbaa !2428
  %157 = load i64, i64* %PC
  %158 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %157, %struct.Memory* %103)
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 20
  %161 = load i32, i32* %EAX
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %160 to i32*
  store i32 %161, i32* %165
  br label %block_404190

block_404190:                                     ; preds = %block_404175, %block_404150
  %MEMORY.0 = phi %struct.Memory* [ %103, %block_404150 ], [ %158, %block_404175 ]
  %166 = load i64, i64* %RSP
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = add i64 32, %166
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  %170 = icmp ult i64 %169, %166
  %171 = icmp ult i64 %169, 32
  %172 = or i1 %170, %171
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %173, i8* %174, align 1, !tbaa !2433
  %175 = trunc i64 %169 to i32
  %176 = and i32 %175, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2447
  %182 = xor i64 32, %166
  %183 = xor i64 %182, %169
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %186, i8* %187, align 1, !tbaa !2448
  %188 = icmp eq i64 %169, 0
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %189, i8* %190, align 1, !tbaa !2449
  %191 = lshr i64 %169, 63
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %192, i8* %193, align 1, !tbaa !2450
  %194 = lshr i64 %166, 63
  %195 = xor i64 %191, %194
  %196 = add nuw nsw i64 %195, %191
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %198, i8* %199, align 1, !tbaa !2451
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405f70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 40
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_405fb0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 86
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_405ff0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405620:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %27 to %"class.std::bitset"*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %29 to %union.vec128_t*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = load i64, i64* %RBP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 1
  store i64 %34, i64* %PC
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %36 = load i64, i64* %35, align 8, !tbaa !2428
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %32, i64* %38
  store i64 %37, i64* %35, align 8, !tbaa !2428
  %39 = load i64, i64* %RSP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 3
  store i64 %41, i64* %PC
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC
  %45 = sub i64 %42, 48
  store i64 %45, i64* %RSP, align 8, !tbaa !2428
  %46 = icmp ult i64 %42, 48
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %47, i8* %48, align 1, !tbaa !2433
  %49 = trunc i64 %45 to i32
  %50 = and i32 %49, 255
  %51 = call i32 @llvm.ctpop.i32(i32 %50) #16
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = xor i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = xor i64 48, %42
  %57 = xor i64 %56, %45
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = icmp eq i64 %45, 0
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = lshr i64 %45, 63
  %66 = trunc i64 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = lshr i64 %42, 63
  %69 = xor i64 %65, %68
  %70 = add nuw nsw i64 %69, %68
  %71 = icmp eq i64 %70, 2
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %72, i8* %73, align 1, !tbaa !2451
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 8
  %76 = load i64, i64* %RDI
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 16
  %82 = load i64, i64* %RSI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %81 to i64*
  store i64 %82, i64* %85
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 16
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %87 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %RSI, align 8, !tbaa !2428
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 8
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RSI
  %99 = load i64, i64* %RDI
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = sub i64 %98, %99
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %103 = icmp ult i64 %98, %99
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %102 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 %99, %98
  %114 = xor i64 %113, %102
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %102, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %102, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %98, 63
  %126 = lshr i64 %99, 63
  %127 = xor i64 %126, %125
  %128 = xor i64 %122, %125
  %129 = add nuw nsw i64 %128, %127
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %131, i8* %132, align 1, !tbaa !2451
  %133 = load i64, i64* %RSI
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = ashr i64 %133, 2
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  %139 = ashr i64 %136, 1
  store i64 %139, i64* %RSI, align 8, !tbaa !2428
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %138, i8* %140, align 1, !tbaa !2432
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %142 = trunc i64 %139 to i32
  %143 = and i32 %142, 255
  %144 = call i32 @llvm.ctpop.i32(i32 %143) #16
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* %141, align 1, !tbaa !2432
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %148, align 1, !tbaa !2432
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %150 = icmp eq i64 %139, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %149, align 1, !tbaa !2432
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %153 = lshr i64 %139, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %152, align 1, !tbaa !2432
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %155, align 1, !tbaa !2432
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = sub i64 %156, 1
  %160 = icmp ult i64 %156, 1
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %161, i8* %162, align 1, !tbaa !2433
  %163 = trunc i64 %159 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %168, i8* %169, align 1, !tbaa !2447
  %170 = xor i64 1, %156
  %171 = xor i64 %170, %159
  %172 = lshr i64 %171, 4
  %173 = trunc i64 %172 to i8
  %174 = and i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = icmp eq i64 %159, 0
  %177 = zext i1 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i64 %159, 63
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %180, i8* %181, align 1, !tbaa !2450
  %182 = lshr i64 %156, 63
  %183 = xor i64 %179, %182
  %184 = add nuw nsw i64 %183, %182
  %185 = icmp eq i64 %184, 2
  %186 = zext i1 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %186, i8* %187, align 1, !tbaa !2451
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 250
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 6
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 6
  store i64 %193, i64* %PC
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %195 = load i8, i8* %194, align 1, !tbaa !2449
  %196 = icmp ne i8 %195, 0
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %198 = load i8, i8* %197, align 1, !tbaa !2450
  %199 = icmp ne i8 %198, 0
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %201 = load i8, i8* %200, align 1, !tbaa !2451
  %202 = icmp ne i8 %201, 0
  %203 = xor i1 %199, %202
  %204 = or i1 %196, %203
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %207 = select i1 %204, i64 %189, i64 %191
  store i64 %207, i64* %206, align 8, !tbaa !2428
  %208 = load i8, i8* %BRANCH_TAKEN
  %209 = icmp eq i8 %208, 1
  br i1 %209, label %block_40573d, label %block_405649

block_40573d:                                     ; preds = %block_405715, %block_405620
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_405620 ], [ %626, %block_405715 ]
  %210 = load i64, i64* %RSP
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 4
  store i64 %212, i64* %PC
  %213 = add i64 48, %210
  store i64 %213, i64* %RSP, align 8, !tbaa !2428
  %214 = icmp ult i64 %213, %210
  %215 = icmp ult i64 %213, 48
  %216 = or i1 %214, %215
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %217, i8* %218, align 1, !tbaa !2433
  %219 = trunc i64 %213 to i32
  %220 = and i32 %219, 255
  %221 = call i32 @llvm.ctpop.i32(i32 %220) #16
  %222 = trunc i32 %221 to i8
  %223 = and i8 %222, 1
  %224 = xor i8 %223, 1
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %224, i8* %225, align 1, !tbaa !2447
  %226 = xor i64 48, %210
  %227 = xor i64 %226, %213
  %228 = lshr i64 %227, 4
  %229 = trunc i64 %228 to i8
  %230 = and i8 %229, 1
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = icmp eq i64 %213, 0
  %233 = zext i1 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = lshr i64 %213, 63
  %236 = trunc i64 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %236, i8* %237, align 1, !tbaa !2450
  %238 = lshr i64 %210, 63
  %239 = xor i64 %235, %238
  %240 = add nuw nsw i64 %239, %235
  %241 = icmp eq i64 %240, 2
  %242 = zext i1 %241 to i8
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %242, i8* %243, align 1, !tbaa !2451
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 1
  store i64 %245, i64* %PC
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %247 = load i64, i64* %246, align 8, !tbaa !2428
  %248 = add i64 %247, 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RBP, align 8, !tbaa !2428
  store i64 %248, i64* %246, align 8, !tbaa !2428
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 1
  store i64 %252, i64* %PC
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %255 = load i64, i64* %254, align 8, !tbaa !2428
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256
  store i64 %257, i64* %253, align 8, !tbaa !2428
  %258 = add i64 %255, 8
  store i64 %258, i64* %254, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405693:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %259 = load i64, i64* %RBP
  %260 = sub i64 %259, 32
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 4
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %260 to i64*
  %264 = load i64, i64* %263
  store i64 %264, i64* %RAX, align 8, !tbaa !2428
  %265 = load i64, i64* %RAX
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 40
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  %272 = sub i64 %265, %271
  %273 = icmp ugt i64 %271, %265
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %274, i8* %275, align 1, !tbaa !2433
  %276 = trunc i64 %272 to i32
  %277 = and i32 %276, 255
  %278 = call i32 @llvm.ctpop.i32(i32 %277) #16
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %281, i8* %282, align 1, !tbaa !2447
  %283 = xor i64 %271, %265
  %284 = xor i64 %283, %272
  %285 = lshr i64 %284, 4
  %286 = trunc i64 %285 to i8
  %287 = and i8 %286, 1
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %287, i8* %288, align 1, !tbaa !2448
  %289 = icmp eq i64 %272, 0
  %290 = zext i1 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %290, i8* %291, align 1, !tbaa !2449
  %292 = lshr i64 %272, 63
  %293 = trunc i64 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %293, i8* %294, align 1, !tbaa !2450
  %295 = lshr i64 %265, 63
  %296 = lshr i64 %271, 63
  %297 = xor i64 %296, %295
  %298 = xor i64 %292, %295
  %299 = add nuw nsw i64 %298, %297
  %300 = icmp eq i64 %299, 2
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %301, i8* %302, align 1, !tbaa !2451
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 11
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 6
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 6
  store i64 %308, i64* %PC
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %310 = load i8, i8* %309, align 1, !tbaa !2433
  store i8 %310, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %312 = icmp ne i8 %310, 0
  %313 = select i1 %312, i64 %304, i64 %306
  store i64 %313, i64* %311, align 8, !tbaa !2428
  %314 = load i8, i8* %BRANCH_TAKEN
  %315 = icmp eq i8 %314, 1
  %316 = load i64, i64* %PC
  br i1 %315, label %block_4056a6, label %block_4056a1

block_4056e6:                                     ; preds = %block_4056d3
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 40
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i64*
  %322 = load i64, i64* %321
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 4
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to double*
  %328 = load double, double* %327
  %329 = bitcast i8* %323 to double*
  store double %328, double* %329, align 1, !tbaa !2452
  %330 = getelementptr inbounds i8, i8* %323, i64 8
  %331 = bitcast i8* %330 to double*
  store double 0.000000e+00, double* %331, align 1, !tbaa !2452
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 48
  %334 = bitcast %union.vec128_t* %XMM0 to i8*
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  store i64 %336, i64* %PC
  %337 = bitcast i8* %334 to double*
  %338 = load double, double* %337, align 1
  %339 = inttoptr i64 %333 to double*
  store double %338, double* %339
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 32
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC
  %344 = inttoptr i64 %341 to i64*
  %345 = load i64, i64* %344
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %347 = load i64, i64* %RAX
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to double*
  %351 = load double, double* %350
  %352 = bitcast i8* %346 to double*
  store double %351, double* %352, align 1, !tbaa !2452
  %353 = getelementptr inbounds i8, i8* %346, i64 8
  %354 = bitcast i8* %353 to double*
  store double 0.000000e+00, double* %354, align 1, !tbaa !2452
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 40
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %RAX, align 8, !tbaa !2428
  %361 = load i64, i64* %RAX
  %362 = bitcast %union.vec128_t* %XMM0 to i8*
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = bitcast i8* %362 to double*
  %366 = load double, double* %365, align 1
  %367 = inttoptr i64 %361 to double*
  store double %366, double* %367
  %368 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 48
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 5
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to double*
  %374 = load double, double* %373
  %375 = bitcast i8* %368 to double*
  store double %374, double* %375, align 1, !tbaa !2452
  %376 = getelementptr inbounds i8, i8* %368, i64 8
  %377 = bitcast i8* %376 to double*
  store double 0.000000e+00, double* %377, align 1, !tbaa !2452
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 32
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 4
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i64*
  %383 = load i64, i64* %382
  store i64 %383, i64* %RAX, align 8, !tbaa !2428
  %384 = load i64, i64* %RAX
  %385 = bitcast %union.vec128_t* %XMM0 to i8*
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 4
  store i64 %387, i64* %PC
  %388 = bitcast i8* %385 to double*
  %389 = load double, double* %388, align 1
  %390 = inttoptr i64 %384 to double*
  store double %389, double* %390
  %391 = load i64, i64* %PC
  %392 = sub i64 %391, 170
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 5
  store i64 %394, i64* %PC
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %392, i64* %395, align 8, !tbaa !2428
  br label %block_405666

block_40568e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %396 = load i64, i64* %PC
  %397 = sub i64 %396, 35
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 5
  store i64 %399, i64* %PC
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %397, i64* %400, align 8, !tbaa !2428
  br label %block_40566b

block_4056ab:                                     ; preds = %block_4056c2, %block_4056a6
  %MEMORY.1 = phi %struct.Memory* [ %782, %block_4056a6 ], [ %464, %block_4056c2 ]
  %401 = load i64, i64* %RBP
  %402 = sub i64 %401, 32
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 4
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %408 = load i64, i64* %RAX
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 4
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to double*
  %412 = load double, double* %411
  %413 = bitcast i8* %407 to double*
  store double %412, double* %413, align 1, !tbaa !2452
  %414 = getelementptr inbounds i8, i8* %407, i64 8
  %415 = bitcast i8* %414 to double*
  store double 0.000000e+00, double* %415, align 1, !tbaa !2452
  %416 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %417 = load i64, i64* %RBP
  %418 = sub i64 %417, 24
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 5
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %418 to double*
  %422 = load double, double* %421
  %423 = bitcast i8* %416 to double*
  store double %422, double* %423, align 1, !tbaa !2452
  %424 = getelementptr inbounds i8, i8* %416, i64 8
  %425 = bitcast i8* %424 to double*
  store double 0.000000e+00, double* %425, align 1, !tbaa !2452
  %426 = bitcast %union.vec128_t* %XMM1 to i8*
  %427 = bitcast %union.vec128_t* %XMM0 to i8*
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC
  %430 = bitcast i8* %426 to double*
  %431 = load double, double* %430, align 1
  %432 = bitcast i8* %427 to double*
  %433 = load double, double* %432, align 1
  %434 = fcmp uno double %431, %433
  br i1 %434, label %435, label %447

; <label>:435:                                    ; preds = %block_4056ab
  %436 = fadd double %431, %433
  %437 = bitcast double %436 to i64
  %438 = and i64 %437, 9221120237041090560
  %439 = icmp eq i64 %438, 9218868437227405312
  %440 = and i64 %437, 2251799813685247
  %441 = icmp ne i64 %440, 0
  %442 = and i1 %439, %441
  br i1 %442, label %443, label %453

; <label>:443:                                    ; preds = %435
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %445 = load i64, i64* %444, align 8, !tbaa !2428
  %446 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %445, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:447:                                    ; preds = %block_4056ab
  %448 = fcmp ogt double %431, %433
  br i1 %448, label %453, label %449

; <label>:449:                                    ; preds = %447
  %450 = fcmp olt double %431, %433
  br i1 %450, label %453, label %451

; <label>:451:                                    ; preds = %449
  %452 = fcmp oeq double %431, %433
  br i1 %452, label %453, label %460

; <label>:453:                                    ; preds = %451, %449, %447, %435
  %454 = phi i8 [ 0, %447 ], [ 0, %449 ], [ 1, %451 ], [ 1, %435 ]
  %455 = phi i8 [ 0, %447 ], [ 0, %449 ], [ 0, %451 ], [ 1, %435 ]
  %456 = phi i8 [ 0, %447 ], [ 1, %449 ], [ 0, %451 ], [ 1, %435 ]
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %454, i8* %457, align 1, !tbaa !2432
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %455, i8* %458, align 1, !tbaa !2432
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %456, i8* %459, align 1, !tbaa !2432
  br label %460

; <label>:460:                                    ; preds = %453, %451
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %461, align 1, !tbaa !2432
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %462, align 1, !tbaa !2432
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %463, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %443, %460
  %464 = phi %struct.Memory* [ %446, %443 ], [ %MEMORY.1, %460 ]
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 23
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 6
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 6
  store i64 %470, i64* %PC
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %472 = load i8, i8* %471, align 1, !tbaa !2433
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %474 = load i8, i8* %473, align 1, !tbaa !2449
  %475 = or i8 %474, %472
  %476 = icmp ne i8 %475, 0
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %479 = select i1 %476, i64 %466, i64 %468
  store i64 %479, i64* %478, align 8, !tbaa !2428
  %480 = load i8, i8* %BRANCH_TAKEN
  %481 = icmp eq i8 %480, 1
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 32
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i64*
  %487 = load i64, i64* %486
  store i64 %487, i64* %RAX, align 8, !tbaa !2428
  %488 = load i64, i64* %RAX
  br i1 %481, label %block_4056d3, label %block_4056c2

block_4056e1:                                     ; preds = %block_4056d3
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 52
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 5
  store i64 %492, i64* %PC
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %490, i64* %493, align 8, !tbaa !2428
  br label %block_405715

block_405666:                                     ; preds = %block_405649, %block_4056e6
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405649 ], [ %464, %block_4056e6 ]
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 5
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 5
  store i64 %497, i64* %PC
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %495, i64* %498, align 8, !tbaa !2428
  br label %block_40566b

block_4056a6:                                     ; preds = %block_405693
  %499 = add i64 %316, 5
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 5
  store i64 %501, i64* %PC
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %499, i64* %502, align 8, !tbaa !2428
  br label %block_4056ab

block_405715:                                     ; preds = %block_4056a1, %block_4056e1
  %MEMORY.3 = phi %struct.Memory* [ %464, %block_4056e1 ], [ %782, %block_4056a1 ]
  %503 = load i64, i64* %RBP
  %504 = sub i64 %503, 8
  %505 = load i64, i64* %PC
  %506 = add i64 %505, 4
  store i64 %506, i64* %PC
  %507 = inttoptr i64 %504 to i64*
  %508 = load i64, i64* %507
  store i64 %508, i64* %RDI, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 40
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i64*
  %514 = load i64, i64* %513
  store i64 %514, i64* %RAX, align 8, !tbaa !2428
  %515 = load i64, i64* %RAX
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  %518 = add i64 8, %515
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = icmp ult i64 %518, %515
  %520 = icmp ult i64 %518, 8
  %521 = or i1 %519, %520
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %522, i8* %523, align 1, !tbaa !2433
  %524 = trunc i64 %518 to i32
  %525 = and i32 %524, 255
  %526 = call i32 @llvm.ctpop.i32(i32 %525) #16
  %527 = trunc i32 %526 to i8
  %528 = and i8 %527, 1
  %529 = xor i8 %528, 1
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %529, i8* %530, align 1, !tbaa !2447
  %531 = xor i64 8, %515
  %532 = xor i64 %531, %518
  %533 = lshr i64 %532, 4
  %534 = trunc i64 %533 to i8
  %535 = and i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %535, i8* %536, align 1, !tbaa !2448
  %537 = icmp eq i64 %518, 0
  %538 = zext i1 %537 to i8
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %538, i8* %539, align 1, !tbaa !2449
  %540 = lshr i64 %518, 63
  %541 = trunc i64 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %541, i8* %542, align 1, !tbaa !2450
  %543 = lshr i64 %515, 63
  %544 = xor i64 %540, %543
  %545 = add nuw nsw i64 %544, %540
  %546 = icmp eq i64 %545, 2
  %547 = zext i1 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %547, i8* %548, align 1, !tbaa !2451
  %549 = load i64, i64* %RAX
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 3
  store i64 %551, i64* %PC
  store i64 %549, i64* %RSI, align 8, !tbaa !2428
  %552 = load i64, i64* %PC
  %553 = sub i64 %552, 260
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 5
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 5
  store i64 %557, i64* %PC
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %559 = load i64, i64* %558, align 8, !tbaa !2428
  %560 = add i64 %559, -8
  %561 = inttoptr i64 %560 to i64*
  store i64 %555, i64* %561
  store i64 %560, i64* %558, align 8, !tbaa !2428
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %553, i64* %562, align 8, !tbaa !2428
  %563 = load i64, i64* %PC
  %564 = call %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* %0, i64 %563, %struct.Memory* %MEMORY.3)
  %565 = load i64, i64* %RBP
  %566 = sub i64 %565, 40
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = inttoptr i64 %566 to i64*
  %570 = load i64, i64* %569
  store i64 %570, i64* %RAX, align 8, !tbaa !2428
  %571 = load i64, i64* %RAX
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 4
  store i64 %573, i64* %PC
  %574 = add i64 8, %571
  store i64 %574, i64* %RAX, align 8, !tbaa !2428
  %575 = icmp ult i64 %574, %571
  %576 = icmp ult i64 %574, 8
  %577 = or i1 %575, %576
  %578 = zext i1 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %578, i8* %579, align 1, !tbaa !2433
  %580 = trunc i64 %574 to i32
  %581 = and i32 %580, 255
  %582 = call i32 @llvm.ctpop.i32(i32 %581) #16
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  %585 = xor i8 %584, 1
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %585, i8* %586, align 1, !tbaa !2447
  %587 = xor i64 8, %571
  %588 = xor i64 %587, %574
  %589 = lshr i64 %588, 4
  %590 = trunc i64 %589 to i8
  %591 = and i8 %590, 1
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %591, i8* %592, align 1, !tbaa !2448
  %593 = icmp eq i64 %574, 0
  %594 = zext i1 %593 to i8
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %594, i8* %595, align 1, !tbaa !2449
  %596 = lshr i64 %574, 63
  %597 = trunc i64 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %597, i8* %598, align 1, !tbaa !2450
  %599 = lshr i64 %571, 63
  %600 = xor i64 %596, %599
  %601 = add nuw nsw i64 %600, %596
  %602 = icmp eq i64 %601, 2
  %603 = zext i1 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %603, i8* %604, align 1, !tbaa !2451
  %605 = load i64, i64* %RBP
  %606 = sub i64 %605, 16
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 4
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i64*
  %610 = load i64, i64* %609
  store i64 %610, i64* %RSI, align 8, !tbaa !2428
  %611 = load i64, i64* %RAX
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 3
  store i64 %613, i64* %PC
  store i64 %611, i64* %RDI, align 8, !tbaa !2428
  %614 = load i64, i64* %PC
  %615 = sub i64 %614, 280
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 5
  store i64 %619, i64* %PC
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %621 = load i64, i64* %620, align 8, !tbaa !2428
  %622 = add i64 %621, -8
  %623 = inttoptr i64 %622 to i64*
  store i64 %617, i64* %623
  store i64 %622, i64* %620, align 8, !tbaa !2428
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %615, i64* %624, align 8, !tbaa !2428
  %625 = load i64, i64* %PC
  %626 = call %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* %0, i64 %625, %struct.Memory* %564)
  br label %block_40573d

block_405649:                                     ; preds = %block_405620
  %627 = load i64, i64* %RBP
  %628 = sub i64 %627, 8
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 4
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %628 to i64*
  %632 = load i64, i64* %631
  store i64 %632, i64* %RAX, align 8, !tbaa !2428
  %633 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %634 = load i64, i64* %RAX
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 4
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to double*
  %638 = load double, double* %637
  %639 = bitcast i8* %633 to double*
  store double %638, double* %639, align 1, !tbaa !2452
  %640 = getelementptr inbounds i8, i8* %633, i64 8
  %641 = bitcast i8* %640 to double*
  store double 0.000000e+00, double* %641, align 1, !tbaa !2452
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 24
  %644 = bitcast %union.vec128_t* %XMM0 to i8*
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 5
  store i64 %646, i64* %PC
  %647 = bitcast i8* %644 to double*
  %648 = load double, double* %647, align 1
  %649 = inttoptr i64 %643 to double*
  store double %648, double* %649
  %650 = load i64, i64* %RBP
  %651 = sub i64 %650, 8
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %651 to i64*
  %655 = load i64, i64* %654
  store i64 %655, i64* %RAX, align 8, !tbaa !2428
  %656 = load i64, i64* %RBP
  %657 = sub i64 %656, 32
  %658 = load i64, i64* %RAX
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 4
  store i64 %660, i64* %PC
  %661 = inttoptr i64 %657 to i64*
  store i64 %658, i64* %661
  %662 = load i64, i64* %RBP
  %663 = sub i64 %662, 16
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 4
  store i64 %665, i64* %PC
  %666 = inttoptr i64 %663 to i64*
  %667 = load i64, i64* %666
  store i64 %667, i64* %RAX, align 8, !tbaa !2428
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 40
  %670 = load i64, i64* %RAX
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 4
  store i64 %672, i64* %PC
  %673 = inttoptr i64 %669 to i64*
  store i64 %670, i64* %673
  br label %block_405666

block_40566b:                                     ; preds = %block_405666, %block_40568e
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_405666 ], [ %782, %block_40568e ]
  %674 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %675 = load i64, i64* %RBP
  %676 = sub i64 %675, 24
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 5
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %676 to double*
  %680 = load double, double* %679
  %681 = bitcast i8* %674 to double*
  store double %680, double* %681, align 1, !tbaa !2452
  %682 = getelementptr inbounds i8, i8* %674, i64 8
  %683 = bitcast i8* %682 to double*
  store double 0.000000e+00, double* %683, align 1, !tbaa !2452
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 40
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 4
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to i64*
  %689 = load i64, i64* %688
  store i64 %689, i64* %RAX, align 8, !tbaa !2428
  %690 = load i64, i64* %RAX
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 3
  store i64 %692, i64* %PC
  store i64 %690, i64* %RCX, align 8, !tbaa !2428
  %693 = load i64, i64* %RCX
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 4
  store i64 %695, i64* %PC
  %696 = add i64 -8, %693
  store i64 %696, i64* %RCX, align 8, !tbaa !2428
  %697 = icmp ult i64 %696, %693
  %698 = icmp ult i64 %696, -8
  %699 = or i1 %697, %698
  %700 = zext i1 %699 to i8
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %700, i8* %701, align 1, !tbaa !2433
  %702 = trunc i64 %696 to i32
  %703 = and i32 %702, 255
  %704 = call i32 @llvm.ctpop.i32(i32 %703) #16
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  %707 = xor i8 %706, 1
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %707, i8* %708, align 1, !tbaa !2447
  %709 = xor i64 -8, %693
  %710 = xor i64 %709, %696
  %711 = lshr i64 %710, 4
  %712 = trunc i64 %711 to i8
  %713 = and i8 %712, 1
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %713, i8* %714, align 1, !tbaa !2448
  %715 = icmp eq i64 %696, 0
  %716 = zext i1 %715 to i8
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %716, i8* %717, align 1, !tbaa !2449
  %718 = lshr i64 %696, 63
  %719 = trunc i64 %718 to i8
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %719, i8* %720, align 1, !tbaa !2450
  %721 = lshr i64 %693, 63
  %722 = xor i64 %718, %721
  %723 = xor i64 %718, 1
  %724 = add nuw nsw i64 %722, %723
  %725 = icmp eq i64 %724, 2
  %726 = zext i1 %725 to i8
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %726, i8* %727, align 1, !tbaa !2451
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 40
  %730 = load i64, i64* %RCX
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC
  %733 = inttoptr i64 %729 to i64*
  store i64 %730, i64* %733
  %734 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %735 = load i64, i64* %RAX
  %736 = sub i64 %735, 8
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 5
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %736 to double*
  %740 = load double, double* %739
  %741 = bitcast i8* %734 to double*
  store double %740, double* %741, align 1, !tbaa !2452
  %742 = getelementptr inbounds i8, i8* %734, i64 8
  %743 = bitcast i8* %742 to double*
  store double 0.000000e+00, double* %743, align 1, !tbaa !2452
  %744 = bitcast %union.vec128_t* %XMM1 to i8*
  %745 = bitcast %union.vec128_t* %XMM0 to i8*
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 4
  store i64 %747, i64* %PC
  %748 = bitcast i8* %744 to double*
  %749 = load double, double* %748, align 1
  %750 = bitcast i8* %745 to double*
  %751 = load double, double* %750, align 1
  %752 = fcmp uno double %749, %751
  br i1 %752, label %753, label %765

; <label>:753:                                    ; preds = %block_40566b
  %754 = fadd double %749, %751
  %755 = bitcast double %754 to i64
  %756 = and i64 %755, 9221120237041090560
  %757 = icmp eq i64 %756, 9218868437227405312
  %758 = and i64 %755, 2251799813685247
  %759 = icmp ne i64 %758, 0
  %760 = and i1 %757, %759
  br i1 %760, label %761, label %771

; <label>:761:                                    ; preds = %753
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %763 = load i64, i64* %762, align 8, !tbaa !2428
  %764 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %763, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:765:                                    ; preds = %block_40566b
  %766 = fcmp ogt double %749, %751
  br i1 %766, label %771, label %767

; <label>:767:                                    ; preds = %765
  %768 = fcmp olt double %749, %751
  br i1 %768, label %771, label %769

; <label>:769:                                    ; preds = %767
  %770 = fcmp oeq double %749, %751
  br i1 %770, label %771, label %778

; <label>:771:                                    ; preds = %769, %767, %765, %753
  %772 = phi i8 [ 0, %765 ], [ 0, %767 ], [ 1, %769 ], [ 1, %753 ]
  %773 = phi i8 [ 0, %765 ], [ 0, %767 ], [ 0, %769 ], [ 1, %753 ]
  %774 = phi i8 [ 0, %765 ], [ 1, %767 ], [ 0, %769 ], [ 1, %753 ]
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %775, align 1, !tbaa !2432
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %773, i8* %776, align 1, !tbaa !2432
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %774, i8* %777, align 1, !tbaa !2432
  br label %778

; <label>:778:                                    ; preds = %771, %769
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %779, align 1, !tbaa !2432
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %780, align 1, !tbaa !2432
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %781, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %761, %778
  %782 = phi %struct.Memory* [ %764, %761 ], [ %MEMORY.4, %778 ]
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 11
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 6
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 6
  store i64 %788, i64* %PC
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %790 = load i8, i8* %789, align 1, !tbaa !2433
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %792 = load i8, i8* %791, align 1, !tbaa !2449
  %793 = or i8 %792, %790
  %794 = icmp ne i8 %793, 0
  %795 = zext i1 %794 to i8
  store i8 %795, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %797 = select i1 %794, i64 %784, i64 %786
  store i64 %797, i64* %796, align 8, !tbaa !2428
  %798 = load i8, i8* %BRANCH_TAKEN
  %799 = icmp eq i8 %798, 1
  br i1 %799, label %block_405693, label %block_40568e

block_4056d3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 40
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = inttoptr i64 %801 to i64*
  %805 = load i64, i64* %804
  %806 = sub i64 %488, %805
  %807 = icmp ugt i64 %805, %488
  %808 = zext i1 %807 to i8
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %808, i8* %809, align 1, !tbaa !2433
  %810 = trunc i64 %806 to i32
  %811 = and i32 %810, 255
  %812 = call i32 @llvm.ctpop.i32(i32 %811) #16
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %815, i8* %816, align 1, !tbaa !2447
  %817 = xor i64 %805, %488
  %818 = xor i64 %817, %806
  %819 = lshr i64 %818, 4
  %820 = trunc i64 %819 to i8
  %821 = and i8 %820, 1
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %821, i8* %822, align 1, !tbaa !2448
  %823 = icmp eq i64 %806, 0
  %824 = zext i1 %823 to i8
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %824, i8* %825, align 1, !tbaa !2449
  %826 = lshr i64 %806, 63
  %827 = trunc i64 %826 to i8
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %827, i8* %828, align 1, !tbaa !2450
  %829 = lshr i64 %488, 63
  %830 = lshr i64 %805, 63
  %831 = xor i64 %830, %829
  %832 = xor i64 %826, %829
  %833 = add nuw nsw i64 %832, %831
  %834 = icmp eq i64 %833, 2
  %835 = zext i1 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %835, i8* %836, align 1, !tbaa !2451
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 11
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 6
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 6
  store i64 %842, i64* %PC
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %844 = load i8, i8* %843, align 1, !tbaa !2433
  store i8 %844, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %846 = icmp ne i8 %844, 0
  %847 = select i1 %846, i64 %838, i64 %840
  store i64 %847, i64* %845, align 8, !tbaa !2428
  %848 = load i8, i8* %BRANCH_TAKEN
  %849 = icmp eq i8 %848, 1
  br i1 %849, label %block_4056e6, label %block_4056e1

block_4056c2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 4
  store i64 %851, i64* %PC
  %852 = add i64 8, %488
  store i64 %852, i64* %RAX, align 8, !tbaa !2428
  %853 = icmp ult i64 %852, %488
  %854 = icmp ult i64 %852, 8
  %855 = or i1 %853, %854
  %856 = zext i1 %855 to i8
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %856, i8* %857, align 1, !tbaa !2433
  %858 = trunc i64 %852 to i32
  %859 = and i32 %858, 255
  %860 = call i32 @llvm.ctpop.i32(i32 %859) #16
  %861 = trunc i32 %860 to i8
  %862 = and i8 %861, 1
  %863 = xor i8 %862, 1
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %863, i8* %864, align 1, !tbaa !2447
  %865 = xor i64 8, %488
  %866 = xor i64 %865, %852
  %867 = lshr i64 %866, 4
  %868 = trunc i64 %867 to i8
  %869 = and i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %869, i8* %870, align 1, !tbaa !2448
  %871 = icmp eq i64 %852, 0
  %872 = zext i1 %871 to i8
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %872, i8* %873, align 1, !tbaa !2449
  %874 = lshr i64 %852, 63
  %875 = trunc i64 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %875, i8* %876, align 1, !tbaa !2450
  %877 = lshr i64 %488, 63
  %878 = xor i64 %874, %877
  %879 = add nuw nsw i64 %878, %874
  %880 = icmp eq i64 %879, 2
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %881, i8* %882, align 1, !tbaa !2451
  %883 = load i64, i64* %RBP
  %884 = sub i64 %883, 32
  %885 = load i64, i64* %RAX
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 4
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %884 to i64*
  store i64 %885, i64* %888
  %889 = load i64, i64* %PC
  %890 = sub i64 %889, 35
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 5
  store i64 %892, i64* %PC
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %890, i64* %893, align 8, !tbaa !2428
  br label %block_4056ab

block_4056a1:                                     ; preds = %block_405693
  %894 = add i64 %316, 116
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 5
  store i64 %896, i64* %PC
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %894, i64* %897, align 8, !tbaa !2428
  br label %block_405715
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ad0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400ad0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2433
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2450
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2451
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2448
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2433
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2447
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2449
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2450
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2448
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_406730___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4066c0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_608ff0__got_type, %seg_608ff0__got_type* @seg_608ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_620928___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009d0___cxx_global_var_init_18(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%DVPb_type* @DVPb to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4618
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_401ed0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401ed0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 64
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 64
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2433
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i64 64, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2451
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = load i64, i64* %RDI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %RSI
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 4
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = bitcast %union.vec128_t* %XMM0 to i8*
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = bitcast i8* %87 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %86 to double*
  store double %91, double* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 32
  %95 = load i64, i64* %RDX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 36
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 7
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  store i32 0, i32* %103
  br label %block_401ef0

block_401f00:                                     ; preds = %block_401ef0
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 8
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 48
  %112 = load i64, i64* %RAX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %115
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 16
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 56
  %124 = load i64, i64* %RAX
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %123 to i64*
  store i64 %124, i64* %127
  %128 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 24
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to double*
  %134 = load double, double* %133
  %135 = bitcast i8* %128 to double*
  store double %134, double* %135, align 1, !tbaa !2452
  %136 = getelementptr inbounds i8, i8* %128, i64 8
  %137 = bitcast i8* %136 to double*
  store double 0.000000e+00, double* %137, align 1, !tbaa !2452
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 48
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 56
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %RSI, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 17763
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 5
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 5
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %153, i64* %159
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %151, i64* %160, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = call %struct.Memory* @sub_406480__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* %0, i64 %161, %struct.Memory* %MEMORY.0)
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 16078
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  store i64 %168, i64* %PC
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %166, i64* %172
  store i64 %171, i64* %169, align 8, !tbaa !2428
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %164, i64* %173, align 8, !tbaa !2428
  %174 = load i64, i64* %PC
  %175 = call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* %0, i64 %174, %struct.Memory* %162)
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 36
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 3
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  %181 = load i32, i32* %180
  %182 = zext i32 %181 to i64
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = load i64, i64* %RAX
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  %186 = trunc i64 %183 to i32
  %187 = add i32 1, %186
  %188 = zext i32 %187 to i64
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = icmp ult i32 %187, %186
  %190 = icmp ult i32 %187, 1
  %191 = or i1 %189, %190
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %192, i8* %193, align 1, !tbaa !2433
  %194 = and i32 %187, 255
  %195 = call i32 @llvm.ctpop.i32(i32 %194) #16
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %198, i8* %199, align 1, !tbaa !2447
  %200 = xor i64 1, %183
  %201 = trunc i64 %200 to i32
  %202 = xor i32 %201, %187
  %203 = lshr i32 %202, 4
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %205, i8* %206, align 1, !tbaa !2448
  %207 = icmp eq i32 %187, 0
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %208, i8* %209, align 1, !tbaa !2449
  %210 = lshr i32 %187, 31
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %211, i8* %212, align 1, !tbaa !2450
  %213 = lshr i32 %186, 31
  %214 = xor i32 %210, %213
  %215 = add nuw nsw i32 %214, %210
  %216 = icmp eq i32 %215, 2
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %217, i8* %218, align 1, !tbaa !2451
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 36
  %221 = load i32, i32* %EAX
  %222 = zext i32 %221 to i64
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %220 to i32*
  store i32 %221, i32* %225
  %226 = load i64, i64* %PC
  %227 = sub i64 %226, 64
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 5
  store i64 %229, i64* %PC
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %227, i64* %230, align 8, !tbaa !2428
  br label %block_401ef0

block_401f35:                                     ; preds = %block_401ef0
  %231 = load i64, i64* %RSP
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC
  %234 = add i64 64, %231
  store i64 %234, i64* %RSP, align 8, !tbaa !2428
  %235 = icmp ult i64 %234, %231
  %236 = icmp ult i64 %234, 64
  %237 = or i1 %235, %236
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %238, i8* %239, align 1, !tbaa !2433
  %240 = trunc i64 %234 to i32
  %241 = and i32 %240, 255
  %242 = call i32 @llvm.ctpop.i32(i32 %241) #16
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %245, i8* %246, align 1, !tbaa !2447
  %247 = xor i64 64, %231
  %248 = xor i64 %247, %234
  %249 = lshr i64 %248, 4
  %250 = trunc i64 %249 to i8
  %251 = and i8 %250, 1
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %251, i8* %252, align 1, !tbaa !2448
  %253 = icmp eq i64 %234, 0
  %254 = zext i1 %253 to i8
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %254, i8* %255, align 1, !tbaa !2449
  %256 = lshr i64 %234, 63
  %257 = trunc i64 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %257, i8* %258, align 1, !tbaa !2450
  %259 = lshr i64 %231, 63
  %260 = xor i64 %256, %259
  %261 = add nuw nsw i64 %260, %256
  %262 = icmp eq i64 %261, 2
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %263, i8* %264, align 1, !tbaa !2451
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 1
  store i64 %266, i64* %PC
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %268 = load i64, i64* %267, align 8, !tbaa !2428
  %269 = add i64 %268, 8
  %270 = inttoptr i64 %268 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RBP, align 8, !tbaa !2428
  store i64 %269, i64* %267, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 1
  store i64 %273, i64* %PC
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %276 = load i64, i64* %275, align 8, !tbaa !2428
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  store i64 %278, i64* %274, align 8, !tbaa !2428
  %279 = add i64 %276, 8
  store i64 %279, i64* %275, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401ef0:                                     ; preds = %block_401f00, %block_401ed0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401ed0 ], [ %175, %block_401f00 ]
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 36
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to i32*
  %285 = load i32, i32* %284
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = load i32, i32* %EAX
  %288 = zext i32 %287 to i64
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 7
  store i64 %290, i64* %PC
  %291 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %292 = sub i32 %287, %291
  %293 = icmp ult i32 %287, %291
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %294, i8* %295, align 1, !tbaa !2433
  %296 = and i32 %292, 255
  %297 = call i32 @llvm.ctpop.i32(i32 %296) #16
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %300, i8* %301, align 1, !tbaa !2447
  %302 = xor i32 %291, %287
  %303 = xor i32 %302, %292
  %304 = lshr i32 %303, 4
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %306, i8* %307, align 1, !tbaa !2448
  %308 = icmp eq i32 %292, 0
  %309 = zext i1 %308 to i8
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %309, i8* %310, align 1, !tbaa !2449
  %311 = lshr i32 %292, 31
  %312 = trunc i32 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %312, i8* %313, align 1, !tbaa !2450
  %314 = lshr i32 %287, 31
  %315 = lshr i32 %291, 31
  %316 = xor i32 %315, %314
  %317 = xor i32 %311, %314
  %318 = add nuw nsw i32 %317, %316
  %319 = icmp eq i32 %318, 2
  %320 = zext i1 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %320, i8* %321, align 1, !tbaa !2451
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 59
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 6
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 6
  store i64 %327, i64* %PC
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %329 = load i8, i8* %328, align 1, !tbaa !2450
  %330 = icmp ne i8 %329, 0
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %332 = load i8, i8* %331, align 1, !tbaa !2451
  %333 = icmp ne i8 %332, 0
  %334 = xor i1 %330, %333
  %335 = xor i1 %334, true
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %338 = select i1 %334, i64 %325, i64 %323
  store i64 %338, i64* %337, align 8, !tbaa !2428
  %339 = load i8, i8* %BRANCH_TAKEN
  %340 = icmp eq i8 %339, 1
  br i1 %340, label %block_401f35, label %block_401f00
}

; Function Attrs: noinline
define %struct.Memory* @sub_403cf0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403cf0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %RAX
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = add i64 8, %45
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = icmp ult i64 %48, %45
  %50 = icmp ult i64 %48, 8
  %51 = or i1 %49, %50
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %48 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 8, %45
  %62 = xor i64 %61, %48
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %48, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %48, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %45, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %70
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2451
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %RAX
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 1
  store i64 %91, i64* %PC
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = add i64 %93, 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %92, align 8, !tbaa !2428
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 1
  store i64 %98, i64* %PC
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %101 = load i64, i64* %100, align 8, !tbaa !2428
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %99, align 8, !tbaa !2428
  %104 = add i64 %101, 8
  store i64 %104, i64* %100, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4052e0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4052e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RBP
  %36 = sub i64 %35, 8
  %37 = load i64, i64* %RDI
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %40
  %41 = load i64, i64* %RBP
  %42 = sub i64 %41, 16
  %43 = load i64, i64* %RSI
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = load i64, i64* %RSI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 16
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = load i64, i64* %RSI
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68
  %70 = sub i64 %64, %69
  %71 = icmp ugt i64 %69, %64
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2433
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = xor i64 %69, %64
  %82 = xor i64 %81, %70
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = icmp eq i64 %70, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = lshr i64 %70, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = lshr i64 %64, 63
  %94 = lshr i64 %69, 63
  %95 = xor i64 %94, %93
  %96 = xor i64 %90, %93
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2451
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %104 = load i8, i8* %103, align 1, !tbaa !2433
  store i8 %104, i8* %AL, align 1, !tbaa !2432
  %105 = load i8, i8* %AL
  %106 = zext i8 %105 to i64
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 2
  store i64 %108, i64* %PC
  %109 = and i64 1, %106
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %AL, align 1, !tbaa !2432
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = icmp eq i8 %110, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %122, align 1, !tbaa !2450
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %123, align 1, !tbaa !2451
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %124, align 1, !tbaa !2448
  %125 = load i8, i8* %AL
  %126 = zext i8 %125 to i64
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = and i64 %126, 255
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 1
  store i64 %131, i64* %PC
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %133 = load i64, i64* %132, align 8, !tbaa !2428
  %134 = add i64 %133, 8
  %135 = inttoptr i64 %133 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RBP, align 8, !tbaa !2428
  store i64 %134, i64* %132, align 8, !tbaa !2428
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 1
  store i64 %138, i64* %PC
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %141 = load i64, i64* %140, align 8, !tbaa !2428
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %139, align 8, !tbaa !2428
  %144 = add i64 %141, 8
  store i64 %144, i64* %140, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4061f0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4061f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 72
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_406250__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 118
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_406290__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403ca0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RBP
  %36 = sub i64 %35, 8
  %37 = load i64, i64* %RDI
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %40
  %41 = load i64, i64* %RBP
  %42 = sub i64 %41, 16
  %43 = load i64, i64* %RSI
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = load i64, i64* %RSI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 16
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = load i64, i64* %RSI
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68
  %70 = sub i64 %64, %69
  %71 = icmp ugt i64 %69, %64
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2433
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = xor i64 %69, %64
  %82 = xor i64 %81, %70
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = icmp eq i64 %70, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = lshr i64 %70, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = lshr i64 %64, 63
  %94 = lshr i64 %69, 63
  %95 = xor i64 %94, %93
  %96 = xor i64 %90, %93
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2451
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %104 = load i8, i8* %103, align 1, !tbaa !2449
  %105 = icmp eq i8 %104, 0
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %AL, align 1, !tbaa !2432
  %107 = load i8, i8* %AL
  %108 = zext i8 %107 to i64
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 2
  store i64 %110, i64* %PC
  %111 = and i64 1, %108
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %AL, align 1, !tbaa !2432
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %113, align 1, !tbaa !2433
  %114 = trunc i64 %111 to i32
  %115 = and i32 %114, 255
  %116 = call i32 @llvm.ctpop.i32(i32 %115) #16
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %119, i8* %120, align 1, !tbaa !2447
  %121 = icmp eq i8 %112, 0
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %122, i8* %123, align 1, !tbaa !2449
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %124, align 1, !tbaa !2450
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %125, align 1, !tbaa !2451
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %126, align 1, !tbaa !2448
  %127 = load i8, i8* %AL
  %128 = zext i8 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = and i64 %128, 255
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4060b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4060b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402ef0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 48
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 48
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 48, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RSI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = load i64, i64* %RSI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RSI
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 24
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %RDI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %110 to i64*
  %114 = load i64, i64* %113
  store i64 %114, i64* %RSI, align 8, !tbaa !2428
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 56
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %122 = load i64, i64* %121, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %118, i64* %124
  store i64 %123, i64* %121, align 8, !tbaa !2428
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %116, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  %127 = call %struct.Memory* @sub_402f50__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* %0, i64 %126, %struct.Memory* %2)
  %128 = load i8, i8* %AL
  %129 = zext i8 %128 to i64
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 2
  store i64 %131, i64* %PC
  %132 = and i64 1, %129
  %133 = trunc i64 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2433
  %135 = trunc i64 %132 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i8 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %145, align 1, !tbaa !2450
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %146, align 1, !tbaa !2451
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %147, align 1, !tbaa !2448
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 33
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 6
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %155 = load i8, i8* %154, align 1, !tbaa !2449
  %156 = icmp eq i8 %155, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = select i1 %156, i64 %149, i64 %151
  store i64 %159, i64* %158, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_402f40, label %block_402f25

block_402f25:                                     ; preds = %block_402ef0
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 10
  store i64 %163, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 7
  store i64 %165, i64* %PC
  %166 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %167 = zext i32 %166 to i64
  store i64 %167, i64* %RSI, align 8, !tbaa !2428
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 2
  store i64 %169, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %170 = load i64, i64* %PC
  %171 = sub i64 %170, 10312
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 5
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 5
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %173, i64* %179
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %171, i64* %180, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %181, %struct.Memory* %127)
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 36
  %185 = load i32, i32* %EAX
  %186 = zext i32 %185 to i64
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %184 to i32*
  store i32 %185, i32* %189
  br label %block_402f40

block_402f40:                                     ; preds = %block_402f25, %block_402ef0
  %MEMORY.0 = phi %struct.Memory* [ %127, %block_402ef0 ], [ %182, %block_402f25 ]
  %190 = load i64, i64* %RSP
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = add i64 48, %190
  store i64 %193, i64* %RSP, align 8, !tbaa !2428
  %194 = icmp ult i64 %193, %190
  %195 = icmp ult i64 %193, 48
  %196 = or i1 %194, %195
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %197, i8* %198, align 1, !tbaa !2433
  %199 = trunc i64 %193 to i32
  %200 = and i32 %199, 255
  %201 = call i32 @llvm.ctpop.i32(i32 %200) #16
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, 1
  %204 = xor i8 %203, 1
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %204, i8* %205, align 1, !tbaa !2447
  %206 = xor i64 48, %190
  %207 = xor i64 %206, %193
  %208 = lshr i64 %207, 4
  %209 = trunc i64 %208 to i8
  %210 = and i8 %209, 1
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %210, i8* %211, align 1, !tbaa !2448
  %212 = icmp eq i64 %193, 0
  %213 = zext i1 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %213, i8* %214, align 1, !tbaa !2449
  %215 = lshr i64 %193, 63
  %216 = trunc i64 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %216, i8* %217, align 1, !tbaa !2450
  %218 = lshr i64 %190, 63
  %219 = xor i64 %215, %218
  %220 = add nuw nsw i64 %219, %215
  %221 = icmp eq i64 %220, 2
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %222, i8* %223, align 1, !tbaa !2451
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 1
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %227 = load i64, i64* %226, align 8, !tbaa !2428
  %228 = add i64 %227, 8
  %229 = inttoptr i64 %227 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RBP, align 8, !tbaa !2428
  store i64 %228, i64* %226, align 8, !tbaa !2428
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 1
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %235 = load i64, i64* %234, align 8, !tbaa !2428
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %233, align 8, !tbaa !2428
  %238 = add i64 %235, 8
  store i64 %238, i64* %234, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4047d0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4047d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RAX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 5
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RCX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 7
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RDX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 9
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RSI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 11
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDI = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 13
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSP = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 15
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RBP = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %42 to %"class.std::bitset"*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %44 to %"class.std::bitset"*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %46 to %union.vec128_t*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %48 to %union.vec128_t*
  %49 = load i64, i64* %RBP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 1
  store i64 %51, i64* %PC
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %53 = load i64, i64* %52, align 8, !tbaa !2428
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %49, i64* %55
  store i64 %54, i64* %52, align 8, !tbaa !2428
  %56 = load i64, i64* %RSP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  store i64 %56, i64* %RBP, align 8, !tbaa !2428
  %59 = load i64, i64* %RSP
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 7
  store i64 %61, i64* %PC
  %62 = sub i64 %59, 176
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  %63 = icmp ult i64 %59, 176
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %64, i8* %65, align 1, !tbaa !2433
  %66 = trunc i64 %62 to i32
  %67 = and i32 %66, 255
  %68 = call i32 @llvm.ctpop.i32(i32 %67) #16
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = xor i64 176, %59
  %74 = xor i64 %73, %62
  %75 = lshr i64 %74, 4
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %77, i8* %78, align 1, !tbaa !2448
  %79 = icmp eq i64 %62, 0
  %80 = zext i1 %79 to i8
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %80, i8* %81, align 1, !tbaa !2449
  %82 = lshr i64 %62, 63
  %83 = trunc i64 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = lshr i64 %59, 63
  %86 = xor i64 %82, %85
  %87 = add nuw nsw i64 %86, %85
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %89, i8* %90, align 1, !tbaa !2451
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 8
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 16
  %99 = load i64, i64* %RDI
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 24
  %105 = load i64, i64* %RDX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 24
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RDX, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 48
  %125 = load i64, i64* %RDX
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %124 to i64*
  store i64 %125, i64* %128
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 48
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 4
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %RDX, align 8, !tbaa !2428
  %135 = load i64, i64* %RDX
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC
  %138 = add i64 1, %135
  store i64 %138, i64* %RDX, align 8, !tbaa !2428
  %139 = icmp ult i64 %138, %135
  %140 = icmp ult i64 %138, 1
  %141 = or i1 %139, %140
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %142, i8* %143, align 1, !tbaa !2433
  %144 = trunc i64 %138 to i32
  %145 = and i32 %144, 255
  %146 = call i32 @llvm.ctpop.i32(i32 %145) #16
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %149, i8* %150, align 1, !tbaa !2447
  %151 = xor i64 1, %135
  %152 = xor i64 %151, %138
  %153 = lshr i64 %152, 4
  %154 = trunc i64 %153 to i8
  %155 = and i8 %154, 1
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %155, i8* %156, align 1, !tbaa !2448
  %157 = icmp eq i64 %138, 0
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %158, i8* %159, align 1, !tbaa !2449
  %160 = lshr i64 %138, 63
  %161 = trunc i64 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %161, i8* %162, align 1, !tbaa !2450
  %163 = lshr i64 %135, 63
  %164 = xor i64 %160, %163
  %165 = add nuw nsw i64 %164, %160
  %166 = icmp eq i64 %165, 2
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %167, i8* %168, align 1, !tbaa !2451
  %169 = load i64, i64* %RDX
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 4
  store i64 %171, i64* %PC
  %172 = shl i64 %169, 1
  %173 = icmp slt i64 %169, 0
  %174 = icmp slt i64 %172, 0
  %175 = xor i1 %173, %174
  store i64 %172, i64* %RDX, align 8, !tbaa !2428
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %177 = zext i1 %173 to i8
  store i8 %177, i8* %176, align 1, !tbaa !2432
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %179 = trunc i64 %172 to i32
  %180 = and i32 %179, 254
  %181 = call i32 @llvm.ctpop.i32(i32 %180) #16
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  store i8 %184, i8* %178, align 1, !tbaa !2432
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %185, align 1, !tbaa !2432
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %187 = icmp eq i64 %172, 0
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %186, align 1, !tbaa !2432
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %190 = lshr i64 %172, 63
  %191 = trunc i64 %190 to i8
  store i8 %191, i8* %189, align 1, !tbaa !2432
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %193 = zext i1 %175 to i8
  store i8 %193, i8* %192, align 1, !tbaa !2432
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 40
  %196 = load i64, i64* %RDX
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC
  %199 = inttoptr i64 %195 to i64*
  store i64 %196, i64* %199
  br label %block_404804

block_4048f9:                                     ; preds = %block_4048eb
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 8
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  store i64 %201, i64* %RDI, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 40
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 4
  store i64 %207, i64* %PC
  %208 = inttoptr i64 %205 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = load i64, i64* %RAX
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 4
  store i64 %212, i64* %PC
  %213 = sub i64 %210, 1
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = icmp ult i64 %210, 1
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %215, i8* %216, align 1, !tbaa !2433
  %217 = trunc i64 %213 to i32
  %218 = and i32 %217, 255
  %219 = call i32 @llvm.ctpop.i32(i32 %218) #16
  %220 = trunc i32 %219 to i8
  %221 = and i8 %220, 1
  %222 = xor i8 %221, 1
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %222, i8* %223, align 1, !tbaa !2447
  %224 = xor i64 1, %210
  %225 = xor i64 %224, %213
  %226 = lshr i64 %225, 4
  %227 = trunc i64 %226 to i8
  %228 = and i8 %227, 1
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %228, i8* %229, align 1, !tbaa !2448
  %230 = icmp eq i64 %213, 0
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %231, i8* %232, align 1, !tbaa !2449
  %233 = lshr i64 %213, 63
  %234 = trunc i64 %233 to i8
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %234, i8* %235, align 1, !tbaa !2450
  %236 = lshr i64 %210, 63
  %237 = xor i64 %233, %236
  %238 = add nuw nsw i64 %237, %236
  %239 = icmp eq i64 %238, 2
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %240, i8* %241, align 1, !tbaa !2451
  %242 = load i64, i64* %RAX
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 3
  store i64 %244, i64* %PC
  store i64 %242, i64* %RSI, align 8, !tbaa !2428
  %245 = load i64, i64* %PC
  %246 = sub i64 %245, 360
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 5
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 5
  store i64 %250, i64* %PC
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %252 = load i64, i64* %251, align 8, !tbaa !2428
  %253 = add i64 %252, -8
  %254 = inttoptr i64 %253 to i64*
  store i64 %248, i64* %254
  store i64 %253, i64* %251, align 8, !tbaa !2428
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %246, i64* %255, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %256, %struct.Memory* %MEMORY.3)
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 88
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  store i64 %259, i64* %RDI, align 8, !tbaa !2428
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 88
  %264 = load i64, i64* %RAX
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %263 to i64*
  store i64 %264, i64* %267
  %268 = load i64, i64* %PC
  %269 = sub i64 %268, 485
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 5
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 5
  store i64 %273, i64* %PC
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %275 = load i64, i64* %274, align 8, !tbaa !2428
  %276 = add i64 %275, -8
  %277 = inttoptr i64 %276 to i64*
  store i64 %271, i64* %277
  store i64 %276, i64* %274, align 8, !tbaa !2428
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %269, i64* %278, align 8, !tbaa !2428
  %279 = load i64, i64* %PC
  %280 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %279, %struct.Memory* %257)
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 8
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 4
  store i64 %284, i64* %PC
  store i64 %282, i64* %RDI, align 8, !tbaa !2428
  %285 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %286 = load i64, i64* %RAX
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to double*
  %290 = load double, double* %289
  %291 = bitcast i8* %285 to double*
  store double %290, double* %291, align 1, !tbaa !2452
  %292 = getelementptr inbounds i8, i8* %285, i64 8
  %293 = bitcast i8* %292 to double*
  store double 0.000000e+00, double* %293, align 1, !tbaa !2452
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 48
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RSI, align 8, !tbaa !2428
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 152
  %302 = bitcast %union.vec128_t* %XMM0 to i8*
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 8
  store i64 %304, i64* %PC
  %305 = bitcast i8* %302 to double*
  %306 = load double, double* %305, align 1
  %307 = inttoptr i64 %301 to double*
  store double %306, double* %307
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 398
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 5
  store i64 %313, i64* %PC
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %315 = load i64, i64* %314, align 8, !tbaa !2428
  %316 = add i64 %315, -8
  %317 = inttoptr i64 %316 to i64*
  store i64 %311, i64* %317
  store i64 %316, i64* %314, align 8, !tbaa !2428
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %318, align 8, !tbaa !2428
  %319 = load i64, i64* %PC
  %320 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %319, %struct.Memory* %280)
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 96
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 4
  store i64 %324, i64* %PC
  store i64 %322, i64* %RDI, align 8, !tbaa !2428
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 96
  %327 = load i64, i64* %RAX
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %326 to i64*
  store i64 %327, i64* %330
  %331 = load i64, i64* %PC
  %332 = sub i64 %331, 523
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  store i64 %336, i64* %PC
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %338 = load i64, i64* %337, align 8, !tbaa !2428
  %339 = add i64 %338, -8
  %340 = inttoptr i64 %339 to i64*
  store i64 %334, i64* %340
  store i64 %339, i64* %337, align 8, !tbaa !2428
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %332, i64* %341, align 8, !tbaa !2428
  %342 = load i64, i64* %PC
  %343 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %342, %struct.Memory* %320)
  %344 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 152
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 8
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to double*
  %350 = load double, double* %349
  %351 = bitcast i8* %344 to double*
  store double %350, double* %351, align 1, !tbaa !2452
  %352 = getelementptr inbounds i8, i8* %344, i64 8
  %353 = bitcast i8* %352 to double*
  store double 0.000000e+00, double* %353, align 1, !tbaa !2452
  %354 = load i64, i64* %RAX
  %355 = bitcast %union.vec128_t* %XMM0 to i8*
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = bitcast i8* %355 to double*
  %359 = load double, double* %358, align 1
  %360 = inttoptr i64 %354 to double*
  store double %359, double* %360
  %361 = load i64, i64* %RBP
  %362 = sub i64 %361, 40
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %362 to i64*
  %366 = load i64, i64* %365
  store i64 %366, i64* %RAX, align 8, !tbaa !2428
  %367 = load i64, i64* %RAX
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = sub i64 %367, 1
  store i64 %370, i64* %RAX, align 8, !tbaa !2428
  %371 = icmp ult i64 %367, 1
  %372 = zext i1 %371 to i8
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %372, i8* %373, align 1, !tbaa !2433
  %374 = trunc i64 %370 to i32
  %375 = and i32 %374, 255
  %376 = call i32 @llvm.ctpop.i32(i32 %375) #16
  %377 = trunc i32 %376 to i8
  %378 = and i8 %377, 1
  %379 = xor i8 %378, 1
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %379, i8* %380, align 1, !tbaa !2447
  %381 = xor i64 1, %367
  %382 = xor i64 %381, %370
  %383 = lshr i64 %382, 4
  %384 = trunc i64 %383 to i8
  %385 = and i8 %384, 1
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %385, i8* %386, align 1, !tbaa !2448
  %387 = icmp eq i64 %370, 0
  %388 = zext i1 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %388, i8* %389, align 1, !tbaa !2449
  %390 = lshr i64 %370, 63
  %391 = trunc i64 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %391, i8* %392, align 1, !tbaa !2450
  %393 = lshr i64 %367, 63
  %394 = xor i64 %390, %393
  %395 = add nuw nsw i64 %394, %393
  %396 = icmp eq i64 %395, 2
  %397 = zext i1 %396 to i8
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %397, i8* %398, align 1, !tbaa !2451
  %399 = load i64, i64* %RBP
  %400 = sub i64 %399, 48
  %401 = load i64, i64* %RAX
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %400 to i64*
  store i64 %401, i64* %404
  br label %block_404958

block_4049bb:                                     ; preds = %block_404973, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_404973 ], [ %1541, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 153
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 6
  store i64 %408, i64* %PC
  %409 = inttoptr i64 %406 to i8*
  %410 = load i8, i8* %409
  store i8 %410, i8* %AL, align 1, !tbaa !2432
  %411 = load i8, i8* %AL
  %412 = zext i8 %411 to i64
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 2
  store i64 %414, i64* %PC
  %415 = and i64 1, %412
  %416 = trunc i64 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %417, align 1, !tbaa !2433
  %418 = trunc i64 %415 to i32
  %419 = and i32 %418, 255
  %420 = call i32 @llvm.ctpop.i32(i32 %419) #16
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %423, i8* %424, align 1, !tbaa !2447
  %425 = icmp eq i8 %416, 0
  %426 = zext i1 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %426, i8* %427, align 1, !tbaa !2449
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %428, align 1, !tbaa !2450
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %429, align 1, !tbaa !2451
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %430, align 1, !tbaa !2448
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 11
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %438 = load i8, i8* %437, align 1, !tbaa !2449
  %439 = icmp eq i8 %438, 0
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %442 = select i1 %439, i64 %432, i64 %434
  store i64 %442, i64* %441, align 8, !tbaa !2428
  %443 = load i8, i8* %BRANCH_TAKEN
  %444 = icmp eq i8 %443, 1
  br i1 %444, label %block_4049ce, label %block_4049c9

block_404812:                                     ; preds = %block_404804
  %445 = sub i64 %1621, 8
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC
  store i64 %445, i64* %RDI, align 8, !tbaa !2428
  %448 = load i64, i64* %RBP
  %449 = sub i64 %448, 40
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 4
  store i64 %451, i64* %PC
  %452 = inttoptr i64 %449 to i64*
  %453 = load i64, i64* %452
  store i64 %453, i64* %RAX, align 8, !tbaa !2428
  %454 = load i64, i64* %RAX
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 4
  store i64 %456, i64* %PC
  %457 = sub i64 %454, 1
  store i64 %457, i64* %RAX, align 8, !tbaa !2428
  %458 = icmp ult i64 %454, 1
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %459, i8* %460, align 1, !tbaa !2433
  %461 = trunc i64 %457 to i32
  %462 = and i32 %461, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #16
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2447
  %468 = xor i64 1, %454
  %469 = xor i64 %468, %457
  %470 = lshr i64 %469, 4
  %471 = trunc i64 %470 to i8
  %472 = and i8 %471, 1
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %472, i8* %473, align 1, !tbaa !2448
  %474 = icmp eq i64 %457, 0
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %475, i8* %476, align 1, !tbaa !2449
  %477 = lshr i64 %457, 63
  %478 = trunc i64 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %478, i8* %479, align 1, !tbaa !2450
  %480 = lshr i64 %454, 63
  %481 = xor i64 %477, %480
  %482 = add nuw nsw i64 %481, %480
  %483 = icmp eq i64 %482, 2
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %484, i8* %485, align 1, !tbaa !2451
  %486 = load i64, i64* %RAX
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 3
  store i64 %488, i64* %PC
  store i64 %486, i64* %RSI, align 8, !tbaa !2428
  %489 = load i64, i64* %PC
  %490 = sub i64 %489, 129
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 5
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 5
  store i64 %494, i64* %PC
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %496 = load i64, i64* %495, align 8, !tbaa !2428
  %497 = add i64 %496, -8
  %498 = inttoptr i64 %497 to i64*
  store i64 %492, i64* %498
  store i64 %497, i64* %495, align 8, !tbaa !2428
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %490, i64* %499, align 8, !tbaa !2428
  %500 = load i64, i64* %PC
  %501 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %500, %struct.Memory* %MEMORY.3)
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 56
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC
  store i64 %503, i64* %RDI, align 8, !tbaa !2428
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 56
  %508 = load i64, i64* %RAX
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %507 to i64*
  store i64 %508, i64* %511
  %512 = load i64, i64* %PC
  %513 = sub i64 %512, 254
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 5
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %519 = load i64, i64* %518, align 8, !tbaa !2428
  %520 = add i64 %519, -8
  %521 = inttoptr i64 %520 to i64*
  store i64 %515, i64* %521
  store i64 %520, i64* %518, align 8, !tbaa !2428
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %513, i64* %522, align 8, !tbaa !2428
  %523 = load i64, i64* %PC
  %524 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %523, %struct.Memory* %501)
  %525 = load i64, i64* %RBP
  %526 = sub i64 %525, 8
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 4
  store i64 %528, i64* %PC
  store i64 %526, i64* %RDI, align 8, !tbaa !2428
  %529 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %530 = load i64, i64* %RAX
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 4
  store i64 %532, i64* %PC
  %533 = inttoptr i64 %530 to double*
  %534 = load double, double* %533
  %535 = bitcast i8* %529 to double*
  store double %534, double* %535, align 1, !tbaa !2452
  %536 = getelementptr inbounds i8, i8* %529, i64 8
  %537 = bitcast i8* %536 to double*
  store double 0.000000e+00, double* %537, align 1, !tbaa !2452
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 40
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i64*
  %543 = load i64, i64* %542
  store i64 %543, i64* %RSI, align 8, !tbaa !2428
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 136
  %546 = bitcast %union.vec128_t* %XMM0 to i8*
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 8
  store i64 %548, i64* %PC
  %549 = bitcast i8* %546 to double*
  %550 = load double, double* %549, align 1
  %551 = inttoptr i64 %545 to double*
  store double %550, double* %551
  %552 = load i64, i64* %PC
  %553 = sub i64 %552, 167
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 5
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 5
  store i64 %557, i64* %PC
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %559 = load i64, i64* %558, align 8, !tbaa !2428
  %560 = add i64 %559, -8
  %561 = inttoptr i64 %560 to i64*
  store i64 %555, i64* %561
  store i64 %560, i64* %558, align 8, !tbaa !2428
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %553, i64* %562, align 8, !tbaa !2428
  %563 = load i64, i64* %PC
  %564 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %563, %struct.Memory* %524)
  %565 = load i64, i64* %RBP
  %566 = sub i64 %565, 64
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  store i64 %566, i64* %RDI, align 8, !tbaa !2428
  %569 = load i64, i64* %RBP
  %570 = sub i64 %569, 64
  %571 = load i64, i64* %RAX
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 4
  store i64 %573, i64* %PC
  %574 = inttoptr i64 %570 to i64*
  store i64 %571, i64* %574
  %575 = load i64, i64* %PC
  %576 = sub i64 %575, 292
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 5
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  store i64 %580, i64* %PC
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %582 = load i64, i64* %581, align 8, !tbaa !2428
  %583 = add i64 %582, -8
  %584 = inttoptr i64 %583 to i64*
  store i64 %578, i64* %584
  store i64 %583, i64* %581, align 8, !tbaa !2428
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %576, i64* %585, align 8, !tbaa !2428
  %586 = load i64, i64* %PC
  %587 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %586, %struct.Memory* %564)
  %588 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %589 = load i64, i64* %RAX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %589 to double*
  %593 = load double, double* %592
  %594 = bitcast i8* %588 to double*
  store double %593, double* %594, align 1, !tbaa !2452
  %595 = getelementptr inbounds i8, i8* %588, i64 8
  %596 = bitcast i8* %595 to double*
  store double 0.000000e+00, double* %596, align 1, !tbaa !2452
  %597 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 136
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 8
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %599 to double*
  %603 = load double, double* %602
  %604 = bitcast i8* %597 to double*
  store double %603, double* %604, align 1, !tbaa !2452
  %605 = getelementptr inbounds i8, i8* %597, i64 8
  %606 = bitcast i8* %605 to double*
  store double 0.000000e+00, double* %606, align 1, !tbaa !2452
  %607 = bitcast %union.vec128_t* %XMM0 to i8*
  %608 = bitcast %union.vec128_t* %XMM1 to i8*
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = bitcast i8* %607 to double*
  %612 = load double, double* %611, align 1
  %613 = bitcast i8* %608 to double*
  %614 = load double, double* %613, align 1
  %615 = fcmp uno double %612, %614
  br i1 %615, label %616, label %628

; <label>:616:                                    ; preds = %block_404812
  %617 = fadd double %612, %614
  %618 = bitcast double %617 to i64
  %619 = and i64 %618, 9221120237041090560
  %620 = icmp eq i64 %619, 9218868437227405312
  %621 = and i64 %618, 2251799813685247
  %622 = icmp ne i64 %621, 0
  %623 = and i1 %620, %622
  br i1 %623, label %624, label %634

; <label>:624:                                    ; preds = %616
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %626 = load i64, i64* %625, align 8, !tbaa !2428
  %627 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %626, %struct.Memory* %587) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:628:                                    ; preds = %block_404812
  %629 = fcmp ogt double %612, %614
  br i1 %629, label %634, label %630

; <label>:630:                                    ; preds = %628
  %631 = fcmp olt double %612, %614
  br i1 %631, label %634, label %632

; <label>:632:                                    ; preds = %630
  %633 = fcmp oeq double %612, %614
  br i1 %633, label %634, label %641

; <label>:634:                                    ; preds = %632, %630, %628, %616
  %635 = phi i8 [ 0, %628 ], [ 0, %630 ], [ 1, %632 ], [ 1, %616 ]
  %636 = phi i8 [ 0, %628 ], [ 0, %630 ], [ 0, %632 ], [ 1, %616 ]
  %637 = phi i8 [ 0, %628 ], [ 1, %630 ], [ 0, %632 ], [ 1, %616 ]
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %635, i8* %638, align 1, !tbaa !2432
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %636, i8* %639, align 1, !tbaa !2432
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %637, i8* %640, align 1, !tbaa !2432
  br label %641

; <label>:641:                                    ; preds = %634, %632
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %642, align 1, !tbaa !2432
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %643, align 1, !tbaa !2432
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %644, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %624, %641
  %645 = phi %struct.Memory* [ %627, %624 ], [ %587, %641 ]
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 18
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 6
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 6
  store i64 %651, i64* %PC
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %653 = load i8, i8* %652, align 1, !tbaa !2433
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %655 = load i8, i8* %654, align 1, !tbaa !2449
  %656 = or i8 %655, %653
  %657 = icmp ne i8 %656, 0
  %658 = zext i1 %657 to i8
  store i8 %658, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %660 = select i1 %657, i64 %647, i64 %649
  store i64 %660, i64* %659, align 8, !tbaa !2428
  %661 = load i8, i8* %BRANCH_TAKEN
  %662 = icmp eq i8 %661, 1
  br i1 %662, label %block_40487b, label %block_40486f

block_40486f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %663 = load i64, i64* %RBP
  %664 = sub i64 %663, 40
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 4
  store i64 %666, i64* %PC
  %667 = inttoptr i64 %664 to i64*
  %668 = load i64, i64* %667
  store i64 %668, i64* %RAX, align 8, !tbaa !2428
  %669 = load i64, i64* %RAX
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 4
  store i64 %671, i64* %PC
  %672 = add i64 1, %669
  store i64 %672, i64* %RAX, align 8, !tbaa !2428
  %673 = icmp ult i64 %672, %669
  %674 = icmp ult i64 %672, 1
  %675 = or i1 %673, %674
  %676 = zext i1 %675 to i8
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %676, i8* %677, align 1, !tbaa !2433
  %678 = trunc i64 %672 to i32
  %679 = and i32 %678, 255
  %680 = call i32 @llvm.ctpop.i32(i32 %679) #16
  %681 = trunc i32 %680 to i8
  %682 = and i8 %681, 1
  %683 = xor i8 %682, 1
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %683, i8* %684, align 1, !tbaa !2447
  %685 = xor i64 1, %669
  %686 = xor i64 %685, %672
  %687 = lshr i64 %686, 4
  %688 = trunc i64 %687 to i8
  %689 = and i8 %688, 1
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %689, i8* %690, align 1, !tbaa !2448
  %691 = icmp eq i64 %672, 0
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %692, i8* %693, align 1, !tbaa !2449
  %694 = lshr i64 %672, 63
  %695 = trunc i64 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %695, i8* %696, align 1, !tbaa !2450
  %697 = lshr i64 %669, 63
  %698 = xor i64 %694, %697
  %699 = add nuw nsw i64 %698, %694
  %700 = icmp eq i64 %699, 2
  %701 = zext i1 %700 to i8
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %701, i8* %702, align 1, !tbaa !2451
  %703 = load i64, i64* %RBP
  %704 = sub i64 %703, 40
  %705 = load i64, i64* %RAX
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 4
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %704 to i64*
  store i64 %705, i64* %708
  br label %block_40487b

block_4049ce:                                     ; preds = %block_4049bb
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 8
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 4
  store i64 %712, i64* %PC
  store i64 %710, i64* %RDI, align 8, !tbaa !2428
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 40
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 4
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %714 to i64*
  %718 = load i64, i64* %717
  store i64 %718, i64* %RSI, align 8, !tbaa !2428
  %719 = load i64, i64* %PC
  %720 = sub i64 %719, 566
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 5
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %726 = load i64, i64* %725, align 8, !tbaa !2428
  %727 = add i64 %726, -8
  %728 = inttoptr i64 %727 to i64*
  store i64 %722, i64* %728
  store i64 %727, i64* %725, align 8, !tbaa !2428
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %720, i64* %729, align 8, !tbaa !2428
  %730 = load i64, i64* %PC
  %731 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %730, %struct.Memory* %MEMORY.0)
  %732 = load i64, i64* %RBP
  %733 = sub i64 %732, 112
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 4
  store i64 %735, i64* %PC
  store i64 %733, i64* %RDI, align 8, !tbaa !2428
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 112
  %738 = load i64, i64* %RAX
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 4
  store i64 %740, i64* %PC
  %741 = inttoptr i64 %737 to i64*
  store i64 %738, i64* %741
  %742 = load i64, i64* %PC
  %743 = sub i64 %742, 691
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 5
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 5
  store i64 %747, i64* %PC
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %749 = load i64, i64* %748, align 8, !tbaa !2428
  %750 = add i64 %749, -8
  %751 = inttoptr i64 %750 to i64*
  store i64 %745, i64* %751
  store i64 %750, i64* %748, align 8, !tbaa !2428
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %743, i64* %752, align 8, !tbaa !2428
  %753 = load i64, i64* %PC
  %754 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %753, %struct.Memory* %731)
  %755 = load i64, i64* %RBP
  %756 = sub i64 %755, 8
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 4
  store i64 %758, i64* %PC
  store i64 %756, i64* %RDI, align 8, !tbaa !2428
  %759 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %760 = load i64, i64* %RAX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 4
  store i64 %762, i64* %PC
  %763 = inttoptr i64 %760 to double*
  %764 = load double, double* %763
  %765 = bitcast i8* %759 to double*
  store double %764, double* %765, align 1, !tbaa !2452
  %766 = getelementptr inbounds i8, i8* %759, i64 8
  %767 = bitcast i8* %766 to double*
  store double 0.000000e+00, double* %767, align 1, !tbaa !2452
  %768 = load i64, i64* %RBP
  %769 = sub i64 %768, 48
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 4
  store i64 %771, i64* %PC
  %772 = inttoptr i64 %769 to i64*
  %773 = load i64, i64* %772
  store i64 %773, i64* %RSI, align 8, !tbaa !2428
  %774 = load i64, i64* %RBP
  %775 = sub i64 %774, 168
  %776 = bitcast %union.vec128_t* %XMM0 to i8*
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 8
  store i64 %778, i64* %PC
  %779 = bitcast i8* %776 to double*
  %780 = load double, double* %779, align 1
  %781 = inttoptr i64 %775 to double*
  store double %780, double* %781
  %782 = load i64, i64* %PC
  %783 = sub i64 %782, 604
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 5
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 5
  store i64 %787, i64* %PC
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %789 = load i64, i64* %788, align 8, !tbaa !2428
  %790 = add i64 %789, -8
  %791 = inttoptr i64 %790 to i64*
  store i64 %785, i64* %791
  store i64 %790, i64* %788, align 8, !tbaa !2428
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %783, i64* %792, align 8, !tbaa !2428
  %793 = load i64, i64* %PC
  %794 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %793, %struct.Memory* %754)
  %795 = load i64, i64* %RBP
  %796 = sub i64 %795, 120
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 4
  store i64 %798, i64* %PC
  store i64 %796, i64* %RDI, align 8, !tbaa !2428
  %799 = load i64, i64* %RBP
  %800 = sub i64 %799, 120
  %801 = load i64, i64* %RAX
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = inttoptr i64 %800 to i64*
  store i64 %801, i64* %804
  %805 = load i64, i64* %PC
  %806 = sub i64 %805, 729
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 5
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 5
  store i64 %810, i64* %PC
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %812 = load i64, i64* %811, align 8, !tbaa !2428
  %813 = add i64 %812, -8
  %814 = inttoptr i64 %813 to i64*
  store i64 %808, i64* %814
  store i64 %813, i64* %811, align 8, !tbaa !2428
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %806, i64* %815, align 8, !tbaa !2428
  %816 = load i64, i64* %PC
  %817 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %816, %struct.Memory* %794)
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 5
  store i64 %819, i64* %PC
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %820 = load i32, i32* %ECX
  %821 = zext i32 %820 to i64
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 2
  store i64 %823, i64* %PC
  %824 = and i64 %821, 4294967295
  store i64 %824, i64* %RSI, align 8, !tbaa !2428
  %825 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %826 = load i64, i64* %RBP
  %827 = sub i64 %826, 168
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 8
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %827 to double*
  %831 = load double, double* %830
  %832 = bitcast i8* %825 to double*
  store double %831, double* %832, align 1, !tbaa !2452
  %833 = getelementptr inbounds i8, i8* %825, i64 8
  %834 = bitcast i8* %833 to double*
  store double 0.000000e+00, double* %834, align 1, !tbaa !2452
  %835 = load i64, i64* %RAX
  %836 = bitcast %union.vec128_t* %XMM0 to i8*
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 4
  store i64 %838, i64* %PC
  %839 = bitcast i8* %836 to double*
  %840 = load double, double* %839, align 1
  %841 = inttoptr i64 %835 to double*
  store double %840, double* %841
  %842 = load i64, i64* %RBP
  %843 = sub i64 %842, 40
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 4
  store i64 %845, i64* %PC
  %846 = inttoptr i64 %843 to i64*
  %847 = load i64, i64* %846
  store i64 %847, i64* %RAX, align 8, !tbaa !2428
  %848 = load i64, i64* %RBP
  %849 = sub i64 %848, 48
  %850 = load i64, i64* %RAX
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 4
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %849 to i64*
  store i64 %850, i64* %853
  %854 = load i64, i64* %RBP
  %855 = sub i64 %854, 48
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 4
  store i64 %857, i64* %PC
  %858 = inttoptr i64 %855 to i64*
  %859 = load i64, i64* %858
  store i64 %859, i64* %RAX, align 8, !tbaa !2428
  %860 = load i64, i64* %RAX
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 4
  store i64 %862, i64* %PC
  %863 = sub i64 %860, 1
  store i64 %863, i64* %RAX, align 8, !tbaa !2428
  %864 = icmp ult i64 %860, 1
  %865 = zext i1 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %865, i8* %866, align 1, !tbaa !2433
  %867 = trunc i64 %863 to i32
  %868 = and i32 %867, 255
  %869 = call i32 @llvm.ctpop.i32(i32 %868) #16
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = xor i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %872, i8* %873, align 1, !tbaa !2447
  %874 = xor i64 1, %860
  %875 = xor i64 %874, %863
  %876 = lshr i64 %875, 4
  %877 = trunc i64 %876 to i8
  %878 = and i8 %877, 1
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %878, i8* %879, align 1, !tbaa !2448
  %880 = icmp eq i64 %863, 0
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %881, i8* %882, align 1, !tbaa !2449
  %883 = lshr i64 %863, 63
  %884 = trunc i64 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %884, i8* %885, align 1, !tbaa !2450
  %886 = lshr i64 %860, 63
  %887 = xor i64 %883, %886
  %888 = add nuw nsw i64 %887, %886
  %889 = icmp eq i64 %888, 2
  %890 = zext i1 %889 to i8
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %890, i8* %891, align 1, !tbaa !2451
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 2
  store i64 %893, i64* %PC
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %896 = load i64, i64* %895, align 8, !tbaa !2428
  %897 = ashr i64 %896, 63
  store i64 %897, i64* %894, align 8, !tbaa !2428
  %898 = load i64, i64* %RSI
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 3
  store i64 %900, i64* %PC
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %902 = load i64, i64* %901, align 8, !tbaa !2428
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %904 = load i64, i64* %903, align 8, !tbaa !2428
  %905 = sext i64 %898 to i128
  %906 = and i128 %905, -18446744073709551616
  %907 = zext i64 %904 to i128
  %908 = shl nuw i128 %907, 64
  %909 = zext i64 %902 to i128
  %910 = or i128 %908, %909
  %911 = zext i64 %898 to i128
  %912 = or i128 %906, %911
  %913 = sdiv i128 %910, %912
  %914 = trunc i128 %913 to i64
  %915 = and i128 %913, 18446744073709551615
  %916 = sext i64 %914 to i128
  %917 = and i128 %916, -18446744073709551616
  %918 = or i128 %917, %915
  %919 = icmp eq i128 %913, %918
  br i1 %919, label %924, label %920

; <label>:920:                                    ; preds = %block_4049ce
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %922 = load i64, i64* %921, align 8, !tbaa !2428
  %923 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %922, %struct.Memory* %817) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:924:                                    ; preds = %block_4049ce
  %925 = srem i128 %910, %912
  %926 = trunc i128 %925 to i64
  store i64 %914, i64* %901, align 8, !tbaa !2428
  store i64 %926, i64* %903, align 8, !tbaa !2428
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %927, align 1, !tbaa !2433
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %928, align 1, !tbaa !2447
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %929, align 1, !tbaa !2448
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %930, align 1, !tbaa !2449
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %931, align 1, !tbaa !2450
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %932, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %920, %924
  %933 = phi %struct.Memory* [ %923, %920 ], [ %817, %924 ]
  %934 = load i64, i64* %RBP
  %935 = sub i64 %934, 40
  %936 = load i64, i64* %RAX
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 4
  store i64 %938, i64* %PC
  %939 = inttoptr i64 %935 to i64*
  store i64 %936, i64* %939
  %940 = load i64, i64* %PC
  %941 = sub i64 %940, 199
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 5
  store i64 %943, i64* %PC
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %941, i64* %944, align 8, !tbaa !2428
  br label %block_404973

block_4049c9:                                     ; preds = %block_4049bb
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 118
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 5
  store i64 %948, i64* %PC
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %946, i64* %949, align 8, !tbaa !2428
  %950 = load i64, i64* %RBP
  %951 = sub i64 %950, 8
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 4
  store i64 %953, i64* %PC
  store i64 %951, i64* %RDI, align 8, !tbaa !2428
  %954 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %955 = load i64, i64* %RBP
  %956 = sub i64 %955, 32
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 5
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %956 to double*
  %960 = load double, double* %959
  %961 = bitcast i8* %954 to double*
  store double %960, double* %961, align 1, !tbaa !2452
  %962 = getelementptr inbounds i8, i8* %954, i64 8
  %963 = bitcast i8* %962 to double*
  store double 0.000000e+00, double* %963, align 1, !tbaa !2452
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 48
  %966 = load i64, i64* %PC
  %967 = add i64 %966, 4
  store i64 %967, i64* %PC
  %968 = inttoptr i64 %965 to i64*
  %969 = load i64, i64* %968
  store i64 %969, i64* %RSI, align 8, !tbaa !2428
  %970 = load i64, i64* %RBP
  %971 = sub i64 %970, 176
  %972 = bitcast %union.vec128_t* %XMM0 to i8*
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 8
  store i64 %974, i64* %PC
  %975 = bitcast i8* %972 to double*
  %976 = load double, double* %975, align 1
  %977 = inttoptr i64 %971 to double*
  store double %976, double* %977
  %978 = load i64, i64* %PC
  %979 = sub i64 %978, 692
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 5
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 5
  store i64 %983, i64* %PC
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %985 = load i64, i64* %984, align 8, !tbaa !2428
  %986 = add i64 %985, -8
  %987 = inttoptr i64 %986 to i64*
  store i64 %981, i64* %987
  store i64 %986, i64* %984, align 8, !tbaa !2428
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %979, i64* %988, align 8, !tbaa !2428
  %989 = load i64, i64* %PC
  %990 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %989, %struct.Memory* %MEMORY.0)
  %991 = load i64, i64* %RBP
  %992 = sub i64 %991, 128
  %993 = load i64, i64* %PC
  %994 = add i64 %993, 4
  store i64 %994, i64* %PC
  store i64 %992, i64* %RDI, align 8, !tbaa !2428
  %995 = load i64, i64* %RBP
  %996 = sub i64 %995, 128
  %997 = load i64, i64* %RAX
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 4
  store i64 %999, i64* %PC
  %1000 = inttoptr i64 %996 to i64*
  store i64 %997, i64* %1000
  %1001 = load i64, i64* %PC
  %1002 = sub i64 %1001, 817
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 5
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 5
  store i64 %1006, i64* %PC
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1008 = load i64, i64* %1007, align 8, !tbaa !2428
  %1009 = add i64 %1008, -8
  %1010 = inttoptr i64 %1009 to i64*
  store i64 %1004, i64* %1010
  store i64 %1009, i64* %1007, align 8, !tbaa !2428
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1002, i64* %1011, align 8, !tbaa !2428
  %1012 = load i64, i64* %PC
  %1013 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %1012, %struct.Memory* %990)
  %1014 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1015 = load i64, i64* %RBP
  %1016 = sub i64 %1015, 176
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 8
  store i64 %1018, i64* %PC
  %1019 = inttoptr i64 %1016 to double*
  %1020 = load double, double* %1019
  %1021 = bitcast i8* %1014 to double*
  store double %1020, double* %1021, align 1, !tbaa !2452
  %1022 = getelementptr inbounds i8, i8* %1014, i64 8
  %1023 = bitcast i8* %1022 to double*
  store double 0.000000e+00, double* %1023, align 1, !tbaa !2452
  %1024 = load i64, i64* %RAX
  %1025 = bitcast %union.vec128_t* %XMM0 to i8*
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 4
  store i64 %1027, i64* %PC
  %1028 = bitcast i8* %1025 to double*
  %1029 = load double, double* %1028, align 1
  %1030 = inttoptr i64 %1024 to double*
  store double %1029, double* %1030
  %1031 = load i64, i64* %RSP
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 7
  store i64 %1033, i64* %PC
  %1034 = add i64 176, %1031
  store i64 %1034, i64* %RSP, align 8, !tbaa !2428
  %1035 = icmp ult i64 %1034, %1031
  %1036 = icmp ult i64 %1034, 176
  %1037 = or i1 %1035, %1036
  %1038 = zext i1 %1037 to i8
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1038, i8* %1039, align 1, !tbaa !2433
  %1040 = trunc i64 %1034 to i32
  %1041 = and i32 %1040, 255
  %1042 = call i32 @llvm.ctpop.i32(i32 %1041) #16
  %1043 = trunc i32 %1042 to i8
  %1044 = and i8 %1043, 1
  %1045 = xor i8 %1044, 1
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1045, i8* %1046, align 1, !tbaa !2447
  %1047 = xor i64 176, %1031
  %1048 = xor i64 %1047, %1034
  %1049 = lshr i64 %1048, 4
  %1050 = trunc i64 %1049 to i8
  %1051 = and i8 %1050, 1
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1051, i8* %1052, align 1, !tbaa !2448
  %1053 = icmp eq i64 %1034, 0
  %1054 = zext i1 %1053 to i8
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1054, i8* %1055, align 1, !tbaa !2449
  %1056 = lshr i64 %1034, 63
  %1057 = trunc i64 %1056 to i8
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1057, i8* %1058, align 1, !tbaa !2450
  %1059 = lshr i64 %1031, 63
  %1060 = xor i64 %1056, %1059
  %1061 = add nuw nsw i64 %1060, %1056
  %1062 = icmp eq i64 %1061, 2
  %1063 = zext i1 %1062 to i8
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1063, i8* %1064, align 1, !tbaa !2451
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 1
  store i64 %1066, i64* %PC
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1068 = load i64, i64* %1067, align 8, !tbaa !2428
  %1069 = add i64 %1068, 8
  %1070 = inttoptr i64 %1068 to i64*
  %1071 = load i64, i64* %1070
  store i64 %1071, i64* %RBP, align 8, !tbaa !2428
  store i64 %1069, i64* %1067, align 8, !tbaa !2428
  %1072 = load i64, i64* %PC
  %1073 = add i64 %1072, 1
  store i64 %1073, i64* %PC
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1076 = load i64, i64* %1075, align 8, !tbaa !2428
  %1077 = inttoptr i64 %1076 to i64*
  %1078 = load i64, i64* %1077
  store i64 %1078, i64* %1074, align 8, !tbaa !2428
  %1079 = add i64 %1076, 8
  store i64 %1079, i64* %1075, align 8, !tbaa !2428
  ret %struct.Memory* %1013

block_40487b:                                     ; preds = %block_40486f, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %MEMORY.1 = phi %struct.Memory* [ %645, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2 ], [ %645, %block_40486f ]
  %1080 = load i64, i64* %RBP
  %1081 = sub i64 %1080, 8
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 4
  store i64 %1083, i64* %PC
  store i64 %1081, i64* %RDI, align 8, !tbaa !2428
  %1084 = load i64, i64* %RBP
  %1085 = sub i64 %1084, 40
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 4
  store i64 %1087, i64* %PC
  %1088 = inttoptr i64 %1085 to i64*
  %1089 = load i64, i64* %1088
  store i64 %1089, i64* %RAX, align 8, !tbaa !2428
  %1090 = load i64, i64* %RAX
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 4
  store i64 %1092, i64* %PC
  %1093 = sub i64 %1090, 1
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = icmp ult i64 %1090, 1
  %1095 = zext i1 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1095, i8* %1096, align 1, !tbaa !2433
  %1097 = trunc i64 %1093 to i32
  %1098 = and i32 %1097, 255
  %1099 = call i32 @llvm.ctpop.i32(i32 %1098) #16
  %1100 = trunc i32 %1099 to i8
  %1101 = and i8 %1100, 1
  %1102 = xor i8 %1101, 1
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1102, i8* %1103, align 1, !tbaa !2447
  %1104 = xor i64 1, %1090
  %1105 = xor i64 %1104, %1093
  %1106 = lshr i64 %1105, 4
  %1107 = trunc i64 %1106 to i8
  %1108 = and i8 %1107, 1
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1108, i8* %1109, align 1, !tbaa !2448
  %1110 = icmp eq i64 %1093, 0
  %1111 = zext i1 %1110 to i8
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1111, i8* %1112, align 1, !tbaa !2449
  %1113 = lshr i64 %1093, 63
  %1114 = trunc i64 %1113 to i8
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1114, i8* %1115, align 1, !tbaa !2450
  %1116 = lshr i64 %1090, 63
  %1117 = xor i64 %1113, %1116
  %1118 = add nuw nsw i64 %1117, %1116
  %1119 = icmp eq i64 %1118, 2
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1120, i8* %1121, align 1, !tbaa !2451
  %1122 = load i64, i64* %RAX
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 3
  store i64 %1124, i64* %PC
  store i64 %1122, i64* %RSI, align 8, !tbaa !2428
  %1125 = load i64, i64* %PC
  %1126 = sub i64 %1125, 234
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 5
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 5
  store i64 %1130, i64* %PC
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1132 = load i64, i64* %1131, align 8, !tbaa !2428
  %1133 = add i64 %1132, -8
  %1134 = inttoptr i64 %1133 to i64*
  store i64 %1128, i64* %1134
  store i64 %1133, i64* %1131, align 8, !tbaa !2428
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1126, i64* %1135, align 8, !tbaa !2428
  %1136 = load i64, i64* %PC
  %1137 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %1136, %struct.Memory* %MEMORY.1)
  %1138 = load i64, i64* %RBP
  %1139 = sub i64 %1138, 72
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 4
  store i64 %1141, i64* %PC
  store i64 %1139, i64* %RDI, align 8, !tbaa !2428
  %1142 = load i64, i64* %RBP
  %1143 = sub i64 %1142, 72
  %1144 = load i64, i64* %RAX
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 4
  store i64 %1146, i64* %PC
  %1147 = inttoptr i64 %1143 to i64*
  store i64 %1144, i64* %1147
  %1148 = load i64, i64* %PC
  %1149 = sub i64 %1148, 359
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 5
  %1152 = load i64, i64* %PC
  %1153 = add i64 %1152, 5
  store i64 %1153, i64* %PC
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1155 = load i64, i64* %1154, align 8, !tbaa !2428
  %1156 = add i64 %1155, -8
  %1157 = inttoptr i64 %1156 to i64*
  store i64 %1151, i64* %1157
  store i64 %1156, i64* %1154, align 8, !tbaa !2428
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1149, i64* %1158, align 8, !tbaa !2428
  %1159 = load i64, i64* %PC
  %1160 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %1159, %struct.Memory* %1137)
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 8
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 4
  store i64 %1164, i64* %PC
  store i64 %1162, i64* %RDI, align 8, !tbaa !2428
  %1165 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1166 = load i64, i64* %RAX
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 4
  store i64 %1168, i64* %PC
  %1169 = inttoptr i64 %1166 to double*
  %1170 = load double, double* %1169
  %1171 = bitcast i8* %1165 to double*
  store double %1170, double* %1171, align 1, !tbaa !2452
  %1172 = getelementptr inbounds i8, i8* %1165, i64 8
  %1173 = bitcast i8* %1172 to double*
  store double 0.000000e+00, double* %1173, align 1, !tbaa !2452
  %1174 = load i64, i64* %RBP
  %1175 = sub i64 %1174, 48
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 4
  store i64 %1177, i64* %PC
  %1178 = inttoptr i64 %1175 to i64*
  %1179 = load i64, i64* %1178
  store i64 %1179, i64* %RSI, align 8, !tbaa !2428
  %1180 = load i64, i64* %RBP
  %1181 = sub i64 %1180, 144
  %1182 = bitcast %union.vec128_t* %XMM0 to i8*
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 8
  store i64 %1184, i64* %PC
  %1185 = bitcast i8* %1182 to double*
  %1186 = load double, double* %1185, align 1
  %1187 = inttoptr i64 %1181 to double*
  store double %1186, double* %1187
  %1188 = load i64, i64* %PC
  %1189 = sub i64 %1188, 272
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 5
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 5
  store i64 %1193, i64* %PC
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1195 = load i64, i64* %1194, align 8, !tbaa !2428
  %1196 = add i64 %1195, -8
  %1197 = inttoptr i64 %1196 to i64*
  store i64 %1191, i64* %1197
  store i64 %1196, i64* %1194, align 8, !tbaa !2428
  %1198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1189, i64* %1198, align 8, !tbaa !2428
  %1199 = load i64, i64* %PC
  %1200 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %1199, %struct.Memory* %1160)
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 80
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 4
  store i64 %1204, i64* %PC
  store i64 %1202, i64* %RDI, align 8, !tbaa !2428
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 80
  %1207 = load i64, i64* %RAX
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 4
  store i64 %1209, i64* %PC
  %1210 = inttoptr i64 %1206 to i64*
  store i64 %1207, i64* %1210
  %1211 = load i64, i64* %PC
  %1212 = sub i64 %1211, 397
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 5
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 5
  store i64 %1216, i64* %PC
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1218 = load i64, i64* %1217, align 8, !tbaa !2428
  %1219 = add i64 %1218, -8
  %1220 = inttoptr i64 %1219 to i64*
  store i64 %1214, i64* %1220
  store i64 %1219, i64* %1217, align 8, !tbaa !2428
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1212, i64* %1221, align 8, !tbaa !2428
  %1222 = load i64, i64* %PC
  %1223 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %1222, %struct.Memory* %1200)
  %1224 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1225 = load i64, i64* %RBP
  %1226 = sub i64 %1225, 144
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 8
  store i64 %1228, i64* %PC
  %1229 = inttoptr i64 %1226 to double*
  %1230 = load double, double* %1229
  %1231 = bitcast i8* %1224 to double*
  store double %1230, double* %1231, align 1, !tbaa !2452
  %1232 = getelementptr inbounds i8, i8* %1224, i64 8
  %1233 = bitcast i8* %1232 to double*
  store double 0.000000e+00, double* %1233, align 1, !tbaa !2452
  %1234 = load i64, i64* %RAX
  %1235 = bitcast %union.vec128_t* %XMM0 to i8*
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC
  %1238 = bitcast i8* %1235 to double*
  %1239 = load double, double* %1238, align 1
  %1240 = inttoptr i64 %1234 to double*
  store double %1239, double* %1240
  %1241 = load i64, i64* %RBP
  %1242 = sub i64 %1241, 40
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 4
  store i64 %1244, i64* %PC
  %1245 = inttoptr i64 %1242 to i64*
  %1246 = load i64, i64* %1245
  store i64 %1246, i64* %RAX, align 8, !tbaa !2428
  %1247 = load i64, i64* %RAX
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 4
  store i64 %1249, i64* %PC
  %1250 = sub i64 %1247, 1
  store i64 %1250, i64* %RAX, align 8, !tbaa !2428
  %1251 = icmp ult i64 %1247, 1
  %1252 = zext i1 %1251 to i8
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1252, i8* %1253, align 1, !tbaa !2433
  %1254 = trunc i64 %1250 to i32
  %1255 = and i32 %1254, 255
  %1256 = call i32 @llvm.ctpop.i32(i32 %1255) #16
  %1257 = trunc i32 %1256 to i8
  %1258 = and i8 %1257, 1
  %1259 = xor i8 %1258, 1
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1259, i8* %1260, align 1, !tbaa !2447
  %1261 = xor i64 1, %1247
  %1262 = xor i64 %1261, %1250
  %1263 = lshr i64 %1262, 4
  %1264 = trunc i64 %1263 to i8
  %1265 = and i8 %1264, 1
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1265, i8* %1266, align 1, !tbaa !2448
  %1267 = icmp eq i64 %1250, 0
  %1268 = zext i1 %1267 to i8
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1268, i8* %1269, align 1, !tbaa !2449
  %1270 = lshr i64 %1250, 63
  %1271 = trunc i64 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1271, i8* %1272, align 1, !tbaa !2450
  %1273 = lshr i64 %1247, 63
  %1274 = xor i64 %1270, %1273
  %1275 = add nuw nsw i64 %1274, %1273
  %1276 = icmp eq i64 %1275, 2
  %1277 = zext i1 %1276 to i8
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1277, i8* %1278, align 1, !tbaa !2451
  %1279 = load i64, i64* %RBP
  %1280 = sub i64 %1279, 48
  %1281 = load i64, i64* %RAX
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 4
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1280 to i64*
  store i64 %1281, i64* %1284
  %1285 = load i64, i64* %RBP
  %1286 = sub i64 %1285, 40
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 4
  store i64 %1288, i64* %PC
  %1289 = inttoptr i64 %1286 to i64*
  %1290 = load i64, i64* %1289
  store i64 %1290, i64* %RAX, align 8, !tbaa !2428
  %1291 = load i64, i64* %RAX
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 40
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 4
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1293 to i64*
  %1297 = load i64, i64* %1296
  %1298 = add i64 %1297, %1291
  store i64 %1298, i64* %RAX, align 8, !tbaa !2428
  %1299 = icmp ult i64 %1298, %1291
  %1300 = icmp ult i64 %1298, %1297
  %1301 = or i1 %1299, %1300
  %1302 = zext i1 %1301 to i8
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1302, i8* %1303, align 1, !tbaa !2433
  %1304 = trunc i64 %1298 to i32
  %1305 = and i32 %1304, 255
  %1306 = call i32 @llvm.ctpop.i32(i32 %1305) #16
  %1307 = trunc i32 %1306 to i8
  %1308 = and i8 %1307, 1
  %1309 = xor i8 %1308, 1
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1309, i8* %1310, align 1, !tbaa !2447
  %1311 = xor i64 %1297, %1291
  %1312 = xor i64 %1311, %1298
  %1313 = lshr i64 %1312, 4
  %1314 = trunc i64 %1313 to i8
  %1315 = and i8 %1314, 1
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1315, i8* %1316, align 1, !tbaa !2448
  %1317 = icmp eq i64 %1298, 0
  %1318 = zext i1 %1317 to i8
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1318, i8* %1319, align 1, !tbaa !2449
  %1320 = lshr i64 %1298, 63
  %1321 = trunc i64 %1320 to i8
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1321, i8* %1322, align 1, !tbaa !2450
  %1323 = lshr i64 %1291, 63
  %1324 = lshr i64 %1297, 63
  %1325 = xor i64 %1320, %1323
  %1326 = xor i64 %1320, %1324
  %1327 = add nuw nsw i64 %1325, %1326
  %1328 = icmp eq i64 %1327, 2
  %1329 = zext i1 %1328 to i8
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1329, i8* %1330, align 1, !tbaa !2451
  %1331 = load i64, i64* %RBP
  %1332 = sub i64 %1331, 40
  %1333 = load i64, i64* %RAX
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 4
  store i64 %1335, i64* %PC
  %1336 = inttoptr i64 %1332 to i64*
  store i64 %1333, i64* %1336
  %1337 = load i64, i64* %PC
  %1338 = sub i64 %1337, 226
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 5
  store i64 %1340, i64* %PC
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1338, i64* %1341, align 8, !tbaa !2428
  br label %block_404804

block_404958:                                     ; preds = %block_4048eb, %block_4048f9
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_4048eb ], [ %343, %block_4048f9 ]
  %1342 = load i64, i64* %PC
  %1343 = add i64 %1342, 5
  store i64 %1343, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %1344 = load i32, i32* %EAX
  %1345 = zext i32 %1344 to i64
  %1346 = load i64, i64* %PC
  %1347 = add i64 %1346, 2
  store i64 %1347, i64* %PC
  %1348 = and i64 %1345, 4294967295
  store i64 %1348, i64* %RCX, align 8, !tbaa !2428
  %1349 = load i64, i64* %RBP
  %1350 = sub i64 %1349, 48
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 4
  store i64 %1352, i64* %PC
  %1353 = inttoptr i64 %1350 to i64*
  %1354 = load i64, i64* %1353
  store i64 %1354, i64* %RDX, align 8, !tbaa !2428
  %1355 = load i64, i64* %RDX
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 4
  store i64 %1357, i64* %PC
  %1358 = sub i64 %1355, 1
  store i64 %1358, i64* %RDX, align 8, !tbaa !2428
  %1359 = icmp ult i64 %1355, 1
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1360, i8* %1361, align 1, !tbaa !2433
  %1362 = trunc i64 %1358 to i32
  %1363 = and i32 %1362, 255
  %1364 = call i32 @llvm.ctpop.i32(i32 %1363) #16
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1367, i8* %1368, align 1, !tbaa !2447
  %1369 = xor i64 1, %1355
  %1370 = xor i64 %1369, %1358
  %1371 = lshr i64 %1370, 4
  %1372 = trunc i64 %1371 to i8
  %1373 = and i8 %1372, 1
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1373, i8* %1374, align 1, !tbaa !2448
  %1375 = icmp eq i64 %1358, 0
  %1376 = zext i1 %1375 to i8
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1376, i8* %1377, align 1, !tbaa !2449
  %1378 = lshr i64 %1358, 63
  %1379 = trunc i64 %1378 to i8
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1379, i8* %1380, align 1, !tbaa !2450
  %1381 = lshr i64 %1355, 63
  %1382 = xor i64 %1378, %1381
  %1383 = add nuw nsw i64 %1382, %1381
  %1384 = icmp eq i64 %1383, 2
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1386, align 1, !tbaa !2451
  %1387 = load i64, i64* %RDX
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 3
  store i64 %1389, i64* %PC
  store i64 %1387, i64* %RAX, align 8, !tbaa !2428
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 2
  store i64 %1391, i64* %PC
  %1392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1394 = load i64, i64* %1393, align 8, !tbaa !2428
  %1395 = ashr i64 %1394, 63
  store i64 %1395, i64* %1392, align 8, !tbaa !2428
  %1396 = load i64, i64* %RCX
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 3
  store i64 %1398, i64* %PC
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1400 = load i64, i64* %1399, align 8, !tbaa !2428
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1402 = load i64, i64* %1401, align 8, !tbaa !2428
  %1403 = sext i64 %1396 to i128
  %1404 = and i128 %1403, -18446744073709551616
  %1405 = zext i64 %1402 to i128
  %1406 = shl nuw i128 %1405, 64
  %1407 = zext i64 %1400 to i128
  %1408 = or i128 %1406, %1407
  %1409 = zext i64 %1396 to i128
  %1410 = or i128 %1404, %1409
  %1411 = sdiv i128 %1408, %1410
  %1412 = trunc i128 %1411 to i64
  %1413 = and i128 %1411, 18446744073709551615
  %1414 = sext i64 %1412 to i128
  %1415 = and i128 %1414, -18446744073709551616
  %1416 = or i128 %1415, %1413
  %1417 = icmp eq i128 %1411, %1416
  br i1 %1417, label %1422, label %1418

; <label>:1418:                                   ; preds = %block_404958
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1420 = load i64, i64* %1419, align 8, !tbaa !2428
  %1421 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1420, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:1422:                                   ; preds = %block_404958
  %1423 = srem i128 %1408, %1410
  %1424 = trunc i128 %1423 to i64
  store i64 %1412, i64* %1399, align 8, !tbaa !2428
  store i64 %1424, i64* %1401, align 8, !tbaa !2428
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1425, align 1, !tbaa !2433
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1426, align 1, !tbaa !2447
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1427, align 1, !tbaa !2448
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1428, align 1, !tbaa !2449
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1429, align 1, !tbaa !2450
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1430, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %1418, %1422
  %1431 = phi %struct.Memory* [ %1421, %1418 ], [ %MEMORY.2, %1422 ]
  %1432 = load i64, i64* %RBP
  %1433 = sub i64 %1432, 40
  %1434 = load i64, i64* %RAX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1433 to i64*
  store i64 %1434, i64* %1437
  br label %block_404973

block_40498b:                                     ; preds = %block_404973
  %1438 = load i64, i64* %RBP
  %1439 = sub i64 %1438, 8
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 4
  store i64 %1441, i64* %PC
  store i64 %1439, i64* %RDI, align 8, !tbaa !2428
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 40
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 4
  store i64 %1445, i64* %PC
  %1446 = inttoptr i64 %1443 to i64*
  %1447 = load i64, i64* %1446
  store i64 %1447, i64* %RSI, align 8, !tbaa !2428
  %1448 = load i64, i64* %PC
  %1449 = sub i64 %1448, 499
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 5
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 5
  store i64 %1453, i64* %PC
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1455 = load i64, i64* %1454, align 8, !tbaa !2428
  %1456 = add i64 %1455, -8
  %1457 = inttoptr i64 %1456 to i64*
  store i64 %1451, i64* %1457
  store i64 %1456, i64* %1454, align 8, !tbaa !2428
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1449, i64* %1458, align 8, !tbaa !2428
  %1459 = load i64, i64* %PC
  %1460 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %1459, %struct.Memory* %MEMORY.4)
  %1461 = load i64, i64* %RBP
  %1462 = sub i64 %1461, 104
  %1463 = load i64, i64* %PC
  %1464 = add i64 %1463, 4
  store i64 %1464, i64* %PC
  store i64 %1462, i64* %RDI, align 8, !tbaa !2428
  %1465 = load i64, i64* %RBP
  %1466 = sub i64 %1465, 104
  %1467 = load i64, i64* %RAX
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 4
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1466 to i64*
  store i64 %1467, i64* %1470
  %1471 = load i64, i64* %PC
  %1472 = sub i64 %1471, 624
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 5
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 5
  store i64 %1476, i64* %PC
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1478 = load i64, i64* %1477, align 8, !tbaa !2428
  %1479 = add i64 %1478, -8
  %1480 = inttoptr i64 %1479 to i64*
  store i64 %1474, i64* %1480
  store i64 %1479, i64* %1477, align 8, !tbaa !2428
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1472, i64* %1481, align 8, !tbaa !2428
  %1482 = load i64, i64* %PC
  %1483 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %1482, %struct.Memory* %1460)
  %1484 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1485 = load i64, i64* %RAX
  %1486 = load i64, i64* %PC
  %1487 = add i64 %1486, 4
  store i64 %1487, i64* %PC
  %1488 = inttoptr i64 %1485 to double*
  %1489 = load double, double* %1488
  %1490 = bitcast i8* %1484 to double*
  store double %1489, double* %1490, align 1, !tbaa !2452
  %1491 = getelementptr inbounds i8, i8* %1484, i64 8
  %1492 = bitcast i8* %1491 to double*
  store double 0.000000e+00, double* %1492, align 1, !tbaa !2452
  %1493 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 32
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 5
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to double*
  %1499 = load double, double* %1498
  %1500 = bitcast i8* %1493 to double*
  store double %1499, double* %1500, align 1, !tbaa !2452
  %1501 = getelementptr inbounds i8, i8* %1493, i64 8
  %1502 = bitcast i8* %1501 to double*
  store double 0.000000e+00, double* %1502, align 1, !tbaa !2452
  %1503 = bitcast %union.vec128_t* %XMM1 to i8*
  %1504 = bitcast %union.vec128_t* %XMM0 to i8*
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 4
  store i64 %1506, i64* %PC
  %1507 = bitcast i8* %1503 to double*
  %1508 = load double, double* %1507, align 1
  %1509 = bitcast i8* %1504 to double*
  %1510 = load double, double* %1509, align 1
  %1511 = fcmp uno double %1508, %1510
  br i1 %1511, label %1512, label %1524

; <label>:1512:                                   ; preds = %block_40498b
  %1513 = fadd double %1508, %1510
  %1514 = bitcast double %1513 to i64
  %1515 = and i64 %1514, 9221120237041090560
  %1516 = icmp eq i64 %1515, 9218868437227405312
  %1517 = and i64 %1514, 2251799813685247
  %1518 = icmp ne i64 %1517, 0
  %1519 = and i1 %1516, %1518
  br i1 %1519, label %1520, label %1530

; <label>:1520:                                   ; preds = %1512
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1522 = load i64, i64* %1521, align 8, !tbaa !2428
  %1523 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1522, %struct.Memory* %1483) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1524:                                   ; preds = %block_40498b
  %1525 = fcmp ogt double %1508, %1510
  br i1 %1525, label %1530, label %1526

; <label>:1526:                                   ; preds = %1524
  %1527 = fcmp olt double %1508, %1510
  br i1 %1527, label %1530, label %1528

; <label>:1528:                                   ; preds = %1526
  %1529 = fcmp oeq double %1508, %1510
  br i1 %1529, label %1530, label %1537

; <label>:1530:                                   ; preds = %1528, %1526, %1524, %1512
  %1531 = phi i8 [ 0, %1524 ], [ 0, %1526 ], [ 1, %1528 ], [ 1, %1512 ]
  %1532 = phi i8 [ 0, %1524 ], [ 0, %1526 ], [ 0, %1528 ], [ 1, %1512 ]
  %1533 = phi i8 [ 0, %1524 ], [ 1, %1526 ], [ 0, %1528 ], [ 1, %1512 ]
  %1534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1531, i8* %1534, align 1, !tbaa !2432
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1532, i8* %1535, align 1, !tbaa !2432
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1533, i8* %1536, align 1, !tbaa !2432
  br label %1537

; <label>:1537:                                   ; preds = %1530, %1528
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1538, align 1, !tbaa !2432
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1539, align 1, !tbaa !2432
  %1540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1540, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1520, %1537
  %1541 = phi %struct.Memory* [ %1523, %1520 ], [ %1483, %1537 ]
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 3
  store i64 %1543, i64* %PC
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1545 = load i8, i8* %1544, align 1, !tbaa !2433
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1547 = load i8, i8* %1546, align 1, !tbaa !2449
  %1548 = or i8 %1547, %1545
  %1549 = icmp eq i8 %1548, 0
  %1550 = zext i1 %1549 to i8
  store i8 %1550, i8* %CL, align 1, !tbaa !2432
  %1551 = load i64, i64* %RBP
  %1552 = sub i64 %1551, 153
  %1553 = load i8, i8* %CL
  %1554 = zext i8 %1553 to i64
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 6
  store i64 %1556, i64* %PC
  %1557 = inttoptr i64 %1552 to i8*
  store i8 %1553, i8* %1557
  br label %block_4049bb

block_404804:                                     ; preds = %block_40487b, %block_4047d0
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4047d0 ], [ %1223, %block_40487b ]
  %1558 = load i64, i64* %RBP
  %1559 = sub i64 %1558, 40
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 4
  store i64 %1561, i64* %PC
  %1562 = inttoptr i64 %1559 to i64*
  %1563 = load i64, i64* %1562
  store i64 %1563, i64* %RAX, align 8, !tbaa !2428
  %1564 = load i64, i64* %RAX
  %1565 = load i64, i64* %RBP
  %1566 = sub i64 %1565, 16
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 4
  store i64 %1568, i64* %PC
  %1569 = inttoptr i64 %1566 to i64*
  %1570 = load i64, i64* %1569
  %1571 = sub i64 %1564, %1570
  %1572 = icmp ugt i64 %1570, %1564
  %1573 = zext i1 %1572 to i8
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1573, i8* %1574, align 1, !tbaa !2433
  %1575 = trunc i64 %1571 to i32
  %1576 = and i32 %1575, 255
  %1577 = call i32 @llvm.ctpop.i32(i32 %1576) #16
  %1578 = trunc i32 %1577 to i8
  %1579 = and i8 %1578, 1
  %1580 = xor i8 %1579, 1
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1580, i8* %1581, align 1, !tbaa !2447
  %1582 = xor i64 %1570, %1564
  %1583 = xor i64 %1582, %1571
  %1584 = lshr i64 %1583, 4
  %1585 = trunc i64 %1584 to i8
  %1586 = and i8 %1585, 1
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1586, i8* %1587, align 1, !tbaa !2448
  %1588 = icmp eq i64 %1571, 0
  %1589 = zext i1 %1588 to i8
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1589, i8* %1590, align 1, !tbaa !2449
  %1591 = lshr i64 %1571, 63
  %1592 = trunc i64 %1591 to i8
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1592, i8* %1593, align 1, !tbaa !2450
  %1594 = lshr i64 %1564, 63
  %1595 = lshr i64 %1570, 63
  %1596 = xor i64 %1595, %1594
  %1597 = xor i64 %1591, %1594
  %1598 = add nuw nsw i64 %1597, %1596
  %1599 = icmp eq i64 %1598, 2
  %1600 = zext i1 %1599 to i8
  %1601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1600, i8* %1601, align 1, !tbaa !2451
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 223
  %1604 = load i64, i64* %PC
  %1605 = add i64 %1604, 6
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 6
  store i64 %1607, i64* %PC
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1609 = load i8, i8* %1608, align 1, !tbaa !2450
  %1610 = icmp ne i8 %1609, 0
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1612 = load i8, i8* %1611, align 1, !tbaa !2451
  %1613 = icmp ne i8 %1612, 0
  %1614 = xor i1 %1610, %1613
  %1615 = xor i1 %1614, true
  %1616 = zext i1 %1615 to i8
  store i8 %1616, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1618 = select i1 %1614, i64 %1605, i64 %1603
  store i64 %1618, i64* %1617, align 8, !tbaa !2428
  %1619 = load i8, i8* %BRANCH_TAKEN
  %1620 = icmp eq i8 %1619, 1
  %1621 = load i64, i64* %RBP
  br i1 %1620, label %block_4048eb, label %block_404812

block_404973:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.4 = phi %struct.Memory* [ %1431, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %933, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %1622 = load i64, i64* %RAX
  %1623 = load i32, i32* %EAX
  %1624 = zext i32 %1623 to i64
  %1625 = load i64, i64* %PC
  %1626 = add i64 %1625, 2
  store i64 %1626, i64* %PC
  %1627 = xor i64 %1624, %1622
  %1628 = trunc i64 %1627 to i32
  %1629 = and i64 %1627, 4294967295
  store i64 %1629, i64* %RAX, align 8, !tbaa !2428
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1630, align 1, !tbaa !2433
  %1631 = and i32 %1628, 255
  %1632 = call i32 @llvm.ctpop.i32(i32 %1631) #16
  %1633 = trunc i32 %1632 to i8
  %1634 = and i8 %1633, 1
  %1635 = xor i8 %1634, 1
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1635, i8* %1636, align 1, !tbaa !2447
  %1637 = icmp eq i32 %1628, 0
  %1638 = zext i1 %1637 to i8
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1638, i8* %1639, align 1, !tbaa !2449
  %1640 = lshr i32 %1628, 31
  %1641 = trunc i32 %1640 to i8
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1641, i8* %1642, align 1, !tbaa !2450
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1643, align 1, !tbaa !2451
  %1644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1644, align 1, !tbaa !2448
  %1645 = load i8, i8* %AL
  %1646 = zext i8 %1645 to i64
  %1647 = load i64, i64* %PC
  %1648 = add i64 %1647, 2
  store i64 %1648, i64* %PC
  store i8 %1645, i8* %CL, align 1, !tbaa !2432
  %1649 = load i64, i64* %RBP
  %1650 = sub i64 %1649, 48
  %1651 = load i64, i64* %PC
  %1652 = add i64 %1651, 4
  store i64 %1652, i64* %PC
  %1653 = inttoptr i64 %1650 to i64*
  %1654 = load i64, i64* %1653
  store i64 %1654, i64* %RDX, align 8, !tbaa !2428
  %1655 = load i64, i64* %RDX
  %1656 = load i64, i64* %RBP
  %1657 = sub i64 %1656, 24
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 4
  store i64 %1659, i64* %PC
  %1660 = inttoptr i64 %1657 to i64*
  %1661 = load i64, i64* %1660
  %1662 = sub i64 %1655, %1661
  %1663 = icmp ugt i64 %1661, %1655
  %1664 = zext i1 %1663 to i8
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1664, i8* %1665, align 1, !tbaa !2433
  %1666 = trunc i64 %1662 to i32
  %1667 = and i32 %1666, 255
  %1668 = call i32 @llvm.ctpop.i32(i32 %1667) #16
  %1669 = trunc i32 %1668 to i8
  %1670 = and i8 %1669, 1
  %1671 = xor i8 %1670, 1
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1671, i8* %1672, align 1, !tbaa !2447
  %1673 = xor i64 %1661, %1655
  %1674 = xor i64 %1673, %1662
  %1675 = lshr i64 %1674, 4
  %1676 = trunc i64 %1675 to i8
  %1677 = and i8 %1676, 1
  %1678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1677, i8* %1678, align 1, !tbaa !2448
  %1679 = icmp eq i64 %1662, 0
  %1680 = zext i1 %1679 to i8
  %1681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1680, i8* %1681, align 1, !tbaa !2449
  %1682 = lshr i64 %1662, 63
  %1683 = trunc i64 %1682 to i8
  %1684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1683, i8* %1684, align 1, !tbaa !2450
  %1685 = lshr i64 %1655, 63
  %1686 = lshr i64 %1661, 63
  %1687 = xor i64 %1686, %1685
  %1688 = xor i64 %1682, %1685
  %1689 = add nuw nsw i64 %1688, %1687
  %1690 = icmp eq i64 %1689, 2
  %1691 = zext i1 %1690 to i8
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1691, i8* %1692, align 1, !tbaa !2451
  %1693 = load i64, i64* %RBP
  %1694 = sub i64 %1693, 153
  %1695 = load i8, i8* %CL
  %1696 = zext i8 %1695 to i64
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 6
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1694 to i8*
  store i8 %1695, i8* %1699
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 54
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 6
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 6
  store i64 %1705, i64* %PC
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1707 = load i8, i8* %1706, align 1, !tbaa !2449
  %1708 = icmp ne i8 %1707, 0
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1710 = load i8, i8* %1709, align 1, !tbaa !2450
  %1711 = icmp ne i8 %1710, 0
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1713 = load i8, i8* %1712, align 1, !tbaa !2451
  %1714 = icmp ne i8 %1713, 0
  %1715 = xor i1 %1711, %1714
  %1716 = or i1 %1708, %1715
  %1717 = zext i1 %1716 to i8
  store i8 %1717, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1719 = select i1 %1716, i64 %1701, i64 %1703
  store i64 %1719, i64* %1718, align 8, !tbaa !2428
  %1720 = load i8, i8* %BRANCH_TAKEN
  %1721 = icmp eq i8 %1720, 1
  br i1 %1721, label %block_4049bb, label %block_40498b

block_4048eb:                                     ; preds = %block_404804
  %1722 = sub i64 %1621, 40
  %1723 = load i64, i64* %PC
  %1724 = add i64 %1723, 4
  store i64 %1724, i64* %PC
  %1725 = inttoptr i64 %1722 to i64*
  %1726 = load i64, i64* %1725
  store i64 %1726, i64* %RAX, align 8, !tbaa !2428
  %1727 = load i64, i64* %RAX
  %1728 = load i64, i64* %RBP
  %1729 = sub i64 %1728, 16
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 4
  store i64 %1731, i64* %PC
  %1732 = inttoptr i64 %1729 to i64*
  %1733 = load i64, i64* %1732
  %1734 = sub i64 %1727, %1733
  %1735 = icmp ugt i64 %1733, %1727
  %1736 = zext i1 %1735 to i8
  %1737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1736, i8* %1737, align 1, !tbaa !2433
  %1738 = trunc i64 %1734 to i32
  %1739 = and i32 %1738, 255
  %1740 = call i32 @llvm.ctpop.i32(i32 %1739) #16
  %1741 = trunc i32 %1740 to i8
  %1742 = and i8 %1741, 1
  %1743 = xor i8 %1742, 1
  %1744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1743, i8* %1744, align 1, !tbaa !2447
  %1745 = xor i64 %1733, %1727
  %1746 = xor i64 %1745, %1734
  %1747 = lshr i64 %1746, 4
  %1748 = trunc i64 %1747 to i8
  %1749 = and i8 %1748, 1
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1749, i8* %1750, align 1, !tbaa !2448
  %1751 = icmp eq i64 %1734, 0
  %1752 = zext i1 %1751 to i8
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1752, i8* %1753, align 1, !tbaa !2449
  %1754 = lshr i64 %1734, 63
  %1755 = trunc i64 %1754 to i8
  %1756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1755, i8* %1756, align 1, !tbaa !2450
  %1757 = lshr i64 %1727, 63
  %1758 = lshr i64 %1733, 63
  %1759 = xor i64 %1758, %1757
  %1760 = xor i64 %1754, %1757
  %1761 = add nuw nsw i64 %1760, %1759
  %1762 = icmp eq i64 %1761, 2
  %1763 = zext i1 %1762 to i8
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1763, i8* %1764, align 1, !tbaa !2451
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 101
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 6
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 6
  store i64 %1770, i64* %PC
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1772 = load i8, i8* %1771, align 1, !tbaa !2449
  %1773 = icmp eq i8 %1772, 0
  %1774 = zext i1 %1773 to i8
  store i8 %1774, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1776 = select i1 %1773, i64 %1766, i64 %1768
  store i64 %1776, i64* %1775, align 8, !tbaa !2428
  %1777 = load i8, i8* %BRANCH_TAKEN
  %1778 = icmp eq i8 %1777, 1
  br i1 %1778, label %block_404958, label %block_4048f9
}

; Function Attrs: noinline
define %struct.Memory* @sub_400fe0__Z17summarize_simplefP8_IO_FILEPKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400fe0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 21
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %R10D = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 17
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %R8 = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 19
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %R9 = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %50 to %"class.std::bitset"*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %52 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %51, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %52 to %union.vec128_t*
  %53 = load i64, i64* %RBP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 1
  store i64 %55, i64* %PC
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = add i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  store i64 %53, i64* %59
  store i64 %58, i64* %56, align 8, !tbaa !2428
  %60 = load i64, i64* %RSP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = sub i64 %63, 96
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ult i64 %63, 96
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %68, i8* %69, align 1, !tbaa !2433
  %70 = trunc i64 %66 to i32
  %71 = and i32 %70, 255
  %72 = call i32 @llvm.ctpop.i32(i32 %71) #16
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %75, i8* %76, align 1, !tbaa !2447
  %77 = xor i64 96, %63
  %78 = xor i64 %77, %66
  %79 = lshr i64 %78, 4
  %80 = trunc i64 %79 to i8
  %81 = and i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %81, i8* %82, align 1, !tbaa !2448
  %83 = icmp eq i64 %66, 0
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %84, i8* %85, align 1, !tbaa !2449
  %86 = lshr i64 %66, 63
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = lshr i64 %63, 63
  %90 = xor i64 %86, %89
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %93, i8* %94, align 1, !tbaa !2451
  %95 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %96 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %97 = bitcast %union.vec128_t* %XMM0 to i8*
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  %100 = bitcast i8* %96 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = getelementptr inbounds i8, i8* %96, i64 8
  %103 = bitcast i8* %102 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = bitcast i8* %97 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = getelementptr inbounds i8, i8* %97, i64 8
  %108 = bitcast i8* %107 to i64*
  %109 = load i64, i64* %108, align 1
  %110 = xor i64 %106, %101
  %111 = xor i64 %109, %104
  %112 = trunc i64 %110 to i32
  %113 = lshr i64 %110, 32
  %114 = trunc i64 %113 to i32
  %115 = bitcast i8* %95 to i32*
  store i32 %112, i32* %115, align 1, !tbaa !2456
  %116 = getelementptr inbounds i8, i8* %95, i64 4
  %117 = bitcast i8* %116 to i32*
  store i32 %114, i32* %117, align 1, !tbaa !2456
  %118 = trunc i64 %111 to i32
  %119 = getelementptr inbounds i8, i8* %95, i64 8
  %120 = bitcast i8* %119 to i32*
  store i32 %118, i32* %120, align 1, !tbaa !2456
  %121 = lshr i64 %111, 32
  %122 = trunc i64 %121 to i32
  %123 = getelementptr inbounds i8, i8* %95, i64 12
  %124 = bitcast i8* %123 to i32*
  store i32 %122, i32* %124, align 1, !tbaa !2456
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 8
  %127 = load i64, i64* %RDI
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 16
  %133 = load i64, i64* %RSI
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %132 to i64*
  store i64 %133, i64* %136
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 32
  %139 = bitcast %union.vec128_t* %XMM0 to i8*
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  store i64 %141, i64* %PC
  %142 = bitcast i8* %139 to double*
  %143 = load double, double* %142, align 1
  %144 = inttoptr i64 %138 to double*
  store double %143, double* %144
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 36
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i32*
  store i32 12, i32* %149
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 20
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 7
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  store i32 0, i32* %154
  br label %block_401006

block_401192:                                     ; preds = %block_401182
  %155 = add i64 %374, 8
  store i64 %155, i64* %PC
  %156 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 20
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i32*
  %162 = load i32, i32* %161
  %163 = sext i32 %162 to i64
  store i64 %163, i64* %RCX, align 8, !tbaa !2428
  %164 = load i64, i64* %RCX
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = shl i64 %164, 3
  %168 = icmp slt i64 %167, 0
  %169 = shl i64 %167, 1
  store i64 %169, i64* %RCX, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %171 = zext i1 %168 to i8
  store i8 %171, i8* %170, align 1, !tbaa !2432
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %173 = trunc i64 %169 to i32
  %174 = and i32 %173, 254
  %175 = call i32 @llvm.ctpop.i32(i32 %174) #16
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  %178 = xor i8 %177, 1
  store i8 %178, i8* %172, align 1, !tbaa !2432
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %179, align 1, !tbaa !2432
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %181 = icmp eq i64 %169, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %180, align 1, !tbaa !2432
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %184 = lshr i64 %169, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %183, align 1, !tbaa !2432
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %186, align 1, !tbaa !2432
  %187 = load i64, i64* %RAX
  %188 = load i64, i64* %RCX
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 3
  store i64 %190, i64* %PC
  %191 = add i64 %188, %187
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = icmp ult i64 %191, %187
  %193 = icmp ult i64 %191, %188
  %194 = or i1 %192, %193
  %195 = zext i1 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %195, i8* %196, align 1, !tbaa !2433
  %197 = trunc i64 %191 to i32
  %198 = and i32 %197, 255
  %199 = call i32 @llvm.ctpop.i32(i32 %198) #16
  %200 = trunc i32 %199 to i8
  %201 = and i8 %200, 1
  %202 = xor i8 %201, 1
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %202, i8* %203, align 1, !tbaa !2447
  %204 = xor i64 %188, %187
  %205 = xor i64 %204, %191
  %206 = lshr i64 %205, 4
  %207 = trunc i64 %206 to i8
  %208 = and i8 %207, 1
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %208, i8* %209, align 1, !tbaa !2448
  %210 = icmp eq i64 %191, 0
  %211 = zext i1 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %211, i8* %212, align 1, !tbaa !2449
  %213 = lshr i64 %191, 63
  %214 = trunc i64 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %214, i8* %215, align 1, !tbaa !2450
  %216 = lshr i64 %187, 63
  %217 = lshr i64 %188, 63
  %218 = xor i64 %213, %216
  %219 = xor i64 %213, %217
  %220 = add nuw nsw i64 %218, %219
  %221 = icmp eq i64 %220, 2
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %222, i8* %223, align 1, !tbaa !2451
  %224 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %225 = load i64, i64* %RAX
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to double*
  %229 = load double, double* %228
  %230 = bitcast i8* %224 to double*
  store double %229, double* %230, align 1, !tbaa !2452
  %231 = getelementptr inbounds i8, i8* %224, i64 8
  %232 = bitcast i8* %231 to double*
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %233 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %234 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 32
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5
  store i64 %238, i64* %PC
  %239 = bitcast i8* %234 to double*
  %240 = load double, double* %239, align 1
  %241 = getelementptr inbounds i8, i8* %234, i64 8
  %242 = bitcast i8* %241 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = inttoptr i64 %236 to double*
  %245 = load double, double* %244
  %246 = fadd double %240, %245
  %247 = bitcast i8* %233 to double*
  store double %246, double* %247, align 1, !tbaa !2452
  %248 = getelementptr inbounds i8, i8* %233, i64 8
  %249 = bitcast i8* %248 to i64*
  store i64 %243, i64* %249, align 1, !tbaa !2452
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 32
  %252 = bitcast %union.vec128_t* %XMM0 to i8*
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 5
  store i64 %254, i64* %PC
  %255 = bitcast i8* %252 to double*
  %256 = load double, double* %255, align 1
  %257 = inttoptr i64 %251 to double*
  store double %256, double* %257
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 20
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RAX, align 8, !tbaa !2428
  %265 = load i64, i64* %RAX
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 3
  store i64 %267, i64* %PC
  %268 = trunc i64 %265 to i32
  %269 = add i32 1, %268
  %270 = zext i32 %269 to i64
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = icmp ult i32 %269, %268
  %272 = icmp ult i32 %269, 1
  %273 = or i1 %271, %272
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %274, i8* %275, align 1, !tbaa !2433
  %276 = and i32 %269, 255
  %277 = call i32 @llvm.ctpop.i32(i32 %276) #16
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %280, i8* %281, align 1, !tbaa !2447
  %282 = xor i64 1, %265
  %283 = trunc i64 %282 to i32
  %284 = xor i32 %283, %269
  %285 = lshr i32 %284, 4
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %287, i8* %288, align 1, !tbaa !2448
  %289 = icmp eq i32 %269, 0
  %290 = zext i1 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %290, i8* %291, align 1, !tbaa !2449
  %292 = lshr i32 %269, 31
  %293 = trunc i32 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %293, i8* %294, align 1, !tbaa !2450
  %295 = lshr i32 %268, 31
  %296 = xor i32 %292, %295
  %297 = add nuw nsw i32 %296, %292
  %298 = icmp eq i32 %297, 2
  %299 = zext i1 %298 to i8
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %299, i8* %300, align 1, !tbaa !2451
  %301 = load i64, i64* %RBP
  %302 = sub i64 %301, 20
  %303 = load i32, i32* %EAX
  %304 = zext i32 %303 to i64
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %302 to i32*
  store i32 %303, i32* %307
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 58
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %312, align 8, !tbaa !2428
  br label %block_401182

block_401182:                                     ; preds = %block_40117b, %block_401192
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_40117b ], [ %MEMORY.0, %block_401192 ]
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 20
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 3
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  %318 = load i32, i32* %317
  %319 = zext i32 %318 to i64
  store i64 %319, i64* %RAX, align 8, !tbaa !2428
  %320 = load i32, i32* %EAX
  %321 = zext i32 %320 to i64
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %325 = sub i32 %320, %324
  %326 = icmp ult i32 %320, %324
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %327, i8* %328, align 1, !tbaa !2433
  %329 = and i32 %325, 255
  %330 = call i32 @llvm.ctpop.i32(i32 %329) #16
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = xor i8 %332, 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %333, i8* %334, align 1, !tbaa !2447
  %335 = xor i32 %324, %320
  %336 = xor i32 %335, %325
  %337 = lshr i32 %336, 4
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %339, i8* %340, align 1, !tbaa !2448
  %341 = icmp eq i32 %325, 0
  %342 = zext i1 %341 to i8
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %342, i8* %343, align 1, !tbaa !2449
  %344 = lshr i32 %325, 31
  %345 = trunc i32 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %345, i8* %346, align 1, !tbaa !2450
  %347 = lshr i32 %320, 31
  %348 = lshr i32 %324, 31
  %349 = xor i32 %348, %347
  %350 = xor i32 %344, %347
  %351 = add nuw nsw i32 %350, %349
  %352 = icmp eq i32 %351, 2
  %353 = zext i1 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %353, i8* %354, align 1, !tbaa !2451
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 53
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 6
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 6
  store i64 %360, i64* %PC
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %362 = load i8, i8* %361, align 1, !tbaa !2450
  %363 = icmp ne i8 %362, 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %365 = load i8, i8* %364, align 1, !tbaa !2451
  %366 = icmp ne i8 %365, 0
  %367 = xor i1 %363, %366
  %368 = xor i1 %367, true
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %371 = select i1 %367, i64 %358, i64 %356
  store i64 %371, i64* %370, align 8, !tbaa !2428
  %372 = load i8, i8* %BRANCH_TAKEN
  %373 = icmp eq i8 %372, 1
  %374 = load i64, i64* %PC
  br i1 %373, label %block_4011c1, label %block_401192

block_40117b:                                     ; preds = %block_4010b2
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 20
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 7
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to i32*
  store i32 0, i32* %379
  br label %block_401182

block_401016:                                     ; preds = %block_401006
  %380 = add i64 %729, 8
  store i64 %380, i64* %PC
  %381 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 20
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i32*
  %387 = load i32, i32* %386
  %388 = sext i32 %387 to i64
  store i64 %388, i64* %RCX, align 8, !tbaa !2428
  %389 = load i64, i64* %RCX
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 4
  store i64 %391, i64* %PC
  %392 = shl i64 %389, 3
  %393 = icmp slt i64 %392, 0
  %394 = shl i64 %392, 1
  store i64 %394, i64* %RCX, align 8, !tbaa !2428
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %396 = zext i1 %393 to i8
  store i8 %396, i8* %395, align 1, !tbaa !2432
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %398 = trunc i64 %394 to i32
  %399 = and i32 %398, 254
  %400 = call i32 @llvm.ctpop.i32(i32 %399) #16
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  %403 = xor i8 %402, 1
  store i8 %403, i8* %397, align 1, !tbaa !2432
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %404, align 1, !tbaa !2432
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %406 = icmp eq i64 %394, 0
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %405, align 1, !tbaa !2432
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %409 = lshr i64 %394, 63
  %410 = trunc i64 %409 to i8
  store i8 %410, i8* %408, align 1, !tbaa !2432
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %411, align 1, !tbaa !2432
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %RCX
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 3
  store i64 %415, i64* %PC
  %416 = add i64 %413, %412
  store i64 %416, i64* %RAX, align 8, !tbaa !2428
  %417 = icmp ult i64 %416, %412
  %418 = icmp ult i64 %416, %413
  %419 = or i1 %417, %418
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %420, i8* %421, align 1, !tbaa !2433
  %422 = trunc i64 %416 to i32
  %423 = and i32 %422, 255
  %424 = call i32 @llvm.ctpop.i32(i32 %423) #16
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  %427 = xor i8 %426, 1
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %427, i8* %428, align 1, !tbaa !2447
  %429 = xor i64 %413, %412
  %430 = xor i64 %429, %416
  %431 = lshr i64 %430, 4
  %432 = trunc i64 %431 to i8
  %433 = and i8 %432, 1
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %433, i8* %434, align 1, !tbaa !2448
  %435 = icmp eq i64 %416, 0
  %436 = zext i1 %435 to i8
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %436, i8* %437, align 1, !tbaa !2449
  %438 = lshr i64 %416, 63
  %439 = trunc i64 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %439, i8* %440, align 1, !tbaa !2450
  %441 = lshr i64 %412, 63
  %442 = lshr i64 %413, 63
  %443 = xor i64 %438, %441
  %444 = xor i64 %438, %442
  %445 = add nuw nsw i64 %443, %444
  %446 = icmp eq i64 %445, 2
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %447, i8* %448, align 1, !tbaa !2451
  %449 = load i64, i64* %RAX
  %450 = add i64 %449, 8
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i64*
  %454 = load i64, i64* %453
  store i64 %454, i64* %RDI, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = sub i64 %455, 2381
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 5
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 5
  store i64 %460, i64* %PC
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %462 = load i64, i64* %461, align 8, !tbaa !2428
  %463 = add i64 %462, -8
  %464 = inttoptr i64 %463 to i64*
  store i64 %458, i64* %464
  store i64 %463, i64* %461, align 8, !tbaa !2428
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %456, i64* %465, align 8, !tbaa !2428
  %466 = load i64, i64* %PC
  %467 = call %struct.Memory* @ext_4006e0_strlen(%struct.State* %0, i64 %466, %struct.Memory* %MEMORY.3)
  %468 = load i32, i32* %EAX
  %469 = zext i32 %468 to i64
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 2
  store i64 %471, i64* %PC
  %472 = and i64 %469, 4294967295
  store i64 %472, i64* %RDX, align 8, !tbaa !2428
  %473 = load i64, i64* %RBP
  %474 = sub i64 %473, 40
  %475 = load i32, i32* %EDX
  %476 = zext i32 %475 to i64
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 3
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %474 to i32*
  store i32 %475, i32* %479
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 40
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 3
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i32*
  %485 = load i32, i32* %484
  %486 = zext i32 %485 to i64
  store i64 %486, i64* %RDX, align 8, !tbaa !2428
  %487 = load i32, i32* %EDX
  %488 = zext i32 %487 to i64
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 36
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 3
  store i64 %492, i64* %PC
  %493 = inttoptr i64 %490 to i32*
  %494 = load i32, i32* %493
  %495 = sub i32 %487, %494
  %496 = icmp ult i32 %487, %494
  %497 = zext i1 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %497, i8* %498, align 1, !tbaa !2433
  %499 = and i32 %495, 255
  %500 = call i32 @llvm.ctpop.i32(i32 %499) #16
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = xor i8 %502, 1
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %503, i8* %504, align 1, !tbaa !2447
  %505 = xor i32 %494, %487
  %506 = xor i32 %505, %495
  %507 = lshr i32 %506, 4
  %508 = trunc i32 %507 to i8
  %509 = and i8 %508, 1
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %509, i8* %510, align 1, !tbaa !2448
  %511 = icmp eq i32 %495, 0
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %512, i8* %513, align 1, !tbaa !2449
  %514 = lshr i32 %495, 31
  %515 = trunc i32 %514 to i8
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %515, i8* %516, align 1, !tbaa !2450
  %517 = lshr i32 %487, 31
  %518 = lshr i32 %494, 31
  %519 = xor i32 %518, %517
  %520 = xor i32 %514, %517
  %521 = add nuw nsw i32 %520, %519
  %522 = icmp eq i32 %521, 2
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %523, i8* %524, align 1, !tbaa !2451
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 12
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 6
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 6
  store i64 %530, i64* %PC
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %532 = load i8, i8* %531, align 1, !tbaa !2449
  %533 = icmp ne i8 %532, 0
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %535 = load i8, i8* %534, align 1, !tbaa !2450
  %536 = icmp ne i8 %535, 0
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %538 = load i8, i8* %537, align 1, !tbaa !2451
  %539 = icmp ne i8 %538, 0
  %540 = xor i1 %536, %539
  %541 = or i1 %533, %540
  %542 = zext i1 %541 to i8
  store i8 %542, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %544 = select i1 %541, i64 %526, i64 %528
  store i64 %544, i64* %543, align 8, !tbaa !2428
  %545 = load i8, i8* %BRANCH_TAKEN
  %546 = icmp eq i8 %545, 1
  br i1 %546, label %block_401049, label %block_401043

block_401049:                                     ; preds = %block_401043, %block_401016
  %MEMORY.1 = phi %struct.Memory* [ %467, %block_401016 ], [ %467, %block_401043 ]
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 5
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 5
  store i64 %550, i64* %PC
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %548, i64* %551, align 8, !tbaa !2428
  %552 = load i64, i64* %RBP
  %553 = sub i64 %552, 20
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 3
  store i64 %555, i64* %PC
  %556 = inttoptr i64 %553 to i32*
  %557 = load i32, i32* %556
  %558 = zext i32 %557 to i64
  store i64 %558, i64* %RAX, align 8, !tbaa !2428
  %559 = load i64, i64* %RAX
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 3
  store i64 %561, i64* %PC
  %562 = trunc i64 %559 to i32
  %563 = add i32 1, %562
  %564 = zext i32 %563 to i64
  store i64 %564, i64* %RAX, align 8, !tbaa !2428
  %565 = icmp ult i32 %563, %562
  %566 = icmp ult i32 %563, 1
  %567 = or i1 %565, %566
  %568 = zext i1 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %568, i8* %569, align 1, !tbaa !2433
  %570 = and i32 %563, 255
  %571 = call i32 @llvm.ctpop.i32(i32 %570) #16
  %572 = trunc i32 %571 to i8
  %573 = and i8 %572, 1
  %574 = xor i8 %573, 1
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %574, i8* %575, align 1, !tbaa !2447
  %576 = xor i64 1, %559
  %577 = trunc i64 %576 to i32
  %578 = xor i32 %577, %563
  %579 = lshr i32 %578, 4
  %580 = trunc i32 %579 to i8
  %581 = and i8 %580, 1
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %581, i8* %582, align 1, !tbaa !2448
  %583 = icmp eq i32 %563, 0
  %584 = zext i1 %583 to i8
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %584, i8* %585, align 1, !tbaa !2449
  %586 = lshr i32 %563, 31
  %587 = trunc i32 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %587, i8* %588, align 1, !tbaa !2450
  %589 = lshr i32 %562, 31
  %590 = xor i32 %586, %589
  %591 = add nuw nsw i32 %590, %586
  %592 = icmp eq i32 %591, 2
  %593 = zext i1 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %593, i8* %594, align 1, !tbaa !2451
  %595 = load i64, i64* %RBP
  %596 = sub i64 %595, 20
  %597 = load i32, i32* %EAX
  %598 = zext i32 %597 to i64
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 3
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %596 to i32*
  store i32 %597, i32* %601
  %602 = load i64, i64* %PC
  %603 = sub i64 %602, 81
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 5
  store i64 %605, i64* %PC
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %603, i64* %606, align 8, !tbaa !2428
  br label %block_401006

block_4010b2:                                     ; preds = %block_4010c2, %block_40105c
  %MEMORY.2 = phi %struct.Memory* [ %852, %block_40105c ], [ %1272, %block_4010c2 ]
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 20
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 3
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  %612 = load i32, i32* %611
  %613 = zext i32 %612 to i64
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = load i32, i32* %EAX
  %615 = zext i32 %614 to i64
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 7
  store i64 %617, i64* %PC
  %618 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %619 = sub i32 %614, %618
  %620 = icmp ult i32 %614, %618
  %621 = zext i1 %620 to i8
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %621, i8* %622, align 1, !tbaa !2433
  %623 = and i32 %619, 255
  %624 = call i32 @llvm.ctpop.i32(i32 %623) #16
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = xor i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %627, i8* %628, align 1, !tbaa !2447
  %629 = xor i32 %618, %614
  %630 = xor i32 %629, %619
  %631 = lshr i32 %630, 4
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %633, i8* %634, align 1, !tbaa !2448
  %635 = icmp eq i32 %619, 0
  %636 = zext i1 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %636, i8* %637, align 1, !tbaa !2449
  %638 = lshr i32 %619, 31
  %639 = trunc i32 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %639, i8* %640, align 1, !tbaa !2450
  %641 = lshr i32 %614, 31
  %642 = lshr i32 %618, 31
  %643 = xor i32 %642, %641
  %644 = xor i32 %638, %641
  %645 = add nuw nsw i32 %644, %643
  %646 = icmp eq i32 %645, 2
  %647 = zext i1 %646 to i8
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %647, i8* %648, align 1, !tbaa !2451
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 191
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 6
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 6
  store i64 %654, i64* %PC
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %656 = load i8, i8* %655, align 1, !tbaa !2450
  %657 = icmp ne i8 %656, 0
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %659 = load i8, i8* %658, align 1, !tbaa !2451
  %660 = icmp ne i8 %659, 0
  %661 = xor i1 %657, %660
  %662 = xor i1 %661, true
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %665 = select i1 %661, i64 %652, i64 %650
  store i64 %665, i64* %664, align 8, !tbaa !2428
  %666 = load i8, i8* %BRANCH_TAKEN
  %667 = icmp eq i8 %666, 1
  br i1 %667, label %block_40117b, label %block_4010c2

block_401006:                                     ; preds = %block_401049, %block_400fe0
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_400fe0 ], [ %MEMORY.1, %block_401049 ]
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 20
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 3
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %669 to i32*
  %673 = load i32, i32* %672
  %674 = zext i32 %673 to i64
  store i64 %674, i64* %RAX, align 8, !tbaa !2428
  %675 = load i32, i32* %EAX
  %676 = zext i32 %675 to i64
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 7
  store i64 %678, i64* %PC
  %679 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %680 = sub i32 %675, %679
  %681 = icmp ult i32 %675, %679
  %682 = zext i1 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %682, i8* %683, align 1, !tbaa !2433
  %684 = and i32 %680, 255
  %685 = call i32 @llvm.ctpop.i32(i32 %684) #16
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  %688 = xor i8 %687, 1
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %688, i8* %689, align 1, !tbaa !2447
  %690 = xor i32 %679, %675
  %691 = xor i32 %690, %680
  %692 = lshr i32 %691, 4
  %693 = trunc i32 %692 to i8
  %694 = and i8 %693, 1
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %694, i8* %695, align 1, !tbaa !2448
  %696 = icmp eq i32 %680, 0
  %697 = zext i1 %696 to i8
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %697, i8* %698, align 1, !tbaa !2449
  %699 = lshr i32 %680, 31
  %700 = trunc i32 %699 to i8
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %700, i8* %701, align 1, !tbaa !2450
  %702 = lshr i32 %675, 31
  %703 = lshr i32 %679, 31
  %704 = xor i32 %703, %702
  %705 = xor i32 %699, %702
  %706 = add nuw nsw i32 %705, %704
  %707 = icmp eq i32 %706, 2
  %708 = zext i1 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %708, i8* %709, align 1, !tbaa !2451
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 76
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 6
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 6
  store i64 %715, i64* %PC
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %717 = load i8, i8* %716, align 1, !tbaa !2450
  %718 = icmp ne i8 %717, 0
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %720 = load i8, i8* %719, align 1, !tbaa !2451
  %721 = icmp ne i8 %720, 0
  %722 = xor i1 %718, %721
  %723 = xor i1 %722, true
  %724 = zext i1 %723 to i8
  store i8 %724, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %726 = select i1 %722, i64 %713, i64 %711
  store i64 %726, i64* %725, align 8, !tbaa !2428
  %727 = load i8, i8* %BRANCH_TAKEN
  %728 = icmp eq i8 %727, 1
  %729 = load i64, i64* %PC
  br i1 %728, label %block_40105c, label %block_401016

block_401043:                                     ; preds = %block_401016
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 40
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 3
  store i64 %733, i64* %PC
  %734 = inttoptr i64 %731 to i32*
  %735 = load i32, i32* %734
  %736 = zext i32 %735 to i64
  store i64 %736, i64* %RAX, align 8, !tbaa !2428
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 36
  %739 = load i32, i32* %EAX
  %740 = zext i32 %739 to i64
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 3
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %738 to i32*
  store i32 %739, i32* %743
  br label %block_401049

block_40105c:                                     ; preds = %block_401006
  %744 = add i64 %729, 10
  store i64 %744, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 262), i64* %RSI, align 8, !tbaa !2428
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 10
  store i64 %746, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 115), i64* %RCX, align 8, !tbaa !2428
  %747 = load i64, i64* %RBP
  %748 = sub i64 %747, 8
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 4
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %748 to i64*
  %752 = load i64, i64* %751
  store i64 %752, i64* %RDI, align 8, !tbaa !2428
  %753 = load i64, i64* %RBP
  %754 = sub i64 %753, 36
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 3
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %754 to i32*
  %758 = load i32, i32* %757
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RAX, align 8, !tbaa !2428
  %760 = load i64, i64* %RAX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 3
  store i64 %762, i64* %PC
  %763 = trunc i64 %760 to i32
  %764 = sub i32 %763, 12
  %765 = zext i32 %764 to i64
  store i64 %765, i64* %RAX, align 8, !tbaa !2428
  %766 = icmp ult i32 %763, 12
  %767 = zext i1 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %767, i8* %768, align 1, !tbaa !2433
  %769 = and i32 %764, 255
  %770 = call i32 @llvm.ctpop.i32(i32 %769) #16
  %771 = trunc i32 %770 to i8
  %772 = and i8 %771, 1
  %773 = xor i8 %772, 1
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %773, i8* %774, align 1, !tbaa !2447
  %775 = xor i64 12, %760
  %776 = trunc i64 %775 to i32
  %777 = xor i32 %776, %764
  %778 = lshr i32 %777, 4
  %779 = trunc i32 %778 to i8
  %780 = and i8 %779, 1
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %780, i8* %781, align 1, !tbaa !2448
  %782 = icmp eq i32 %764, 0
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %783, i8* %784, align 1, !tbaa !2449
  %785 = lshr i32 %764, 31
  %786 = trunc i32 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %786, i8* %787, align 1, !tbaa !2450
  %788 = lshr i32 %763, 31
  %789 = xor i32 %785, %788
  %790 = add nuw nsw i32 %789, %788
  %791 = icmp eq i32 %790, 2
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %792, i8* %793, align 1, !tbaa !2451
  %794 = load i32, i32* %EAX
  %795 = zext i32 %794 to i64
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 2
  store i64 %797, i64* %PC
  %798 = and i64 %795, 4294967295
  store i64 %798, i64* %RDX, align 8, !tbaa !2428
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 2
  store i64 %800, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %801 = load i64, i64* %PC
  %802 = sub i64 %801, 2398
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 5
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 5
  store i64 %806, i64* %PC
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %808 = load i64, i64* %807, align 8, !tbaa !2428
  %809 = add i64 %808, -8
  %810 = inttoptr i64 %809 to i64*
  store i64 %804, i64* %810
  store i64 %809, i64* %807, align 8, !tbaa !2428
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %802, i64* %811, align 8, !tbaa !2428
  %812 = load i64, i64* %PC
  %813 = call %struct.Memory* @ext_400720_fprintf(%struct.State* %0, i64 %812, %struct.Memory* %MEMORY.3)
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 10
  store i64 %815, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 296), i64* %RSI, align 8, !tbaa !2428
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 10
  store i64 %817, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 115), i64* %RCX, align 8, !tbaa !2428
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 8
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 4
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i64*
  %823 = load i64, i64* %822
  store i64 %823, i64* %RDI, align 8, !tbaa !2428
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 36
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 3
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to i32*
  %829 = load i32, i32* %828
  %830 = zext i32 %829 to i64
  store i64 %830, i64* %RDX, align 8, !tbaa !2428
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 44
  %833 = load i32, i32* %EAX
  %834 = zext i32 %833 to i64
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 3
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %832 to i32*
  store i32 %833, i32* %837
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 2
  store i64 %839, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %840 = load i64, i64* %PC
  %841 = sub i64 %840, 2435
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 5
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 5
  store i64 %845, i64* %PC
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %847 = load i64, i64* %846, align 8, !tbaa !2428
  %848 = add i64 %847, -8
  %849 = inttoptr i64 %848 to i64*
  store i64 %843, i64* %849
  store i64 %848, i64* %846, align 8, !tbaa !2428
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %841, i64* %850, align 8, !tbaa !2428
  %851 = load i64, i64* %PC
  %852 = call %struct.Memory* @ext_400720_fprintf(%struct.State* %0, i64 %851, %struct.Memory* %813)
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 20
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 7
  store i64 %856, i64* %PC
  %857 = inttoptr i64 %854 to i32*
  store i32 0, i32* %857
  %858 = load i64, i64* %RBP
  %859 = sub i64 %858, 48
  %860 = load i32, i32* %EAX
  %861 = zext i32 %860 to i64
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 3
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %859 to i32*
  store i32 %860, i32* %864
  br label %block_4010b2

block_4010c2:                                     ; preds = %block_4010b2
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 10
  store i64 %866, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 314), i64* %RSI, align 8, !tbaa !2428
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 10
  store i64 %868, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 159), i64* %R8, align 8, !tbaa !2428
  %869 = load i64, i64* %RBP
  %870 = sub i64 %869, 8
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 4
  store i64 %872, i64* %PC
  %873 = inttoptr i64 %870 to i64*
  %874 = load i64, i64* %873
  store i64 %874, i64* %RDI, align 8, !tbaa !2428
  %875 = load i64, i64* %RBP
  %876 = sub i64 %875, 20
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 3
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %876 to i32*
  %880 = load i32, i32* %879
  %881 = zext i32 %880 to i64
  store i64 %881, i64* %RDX, align 8, !tbaa !2428
  %882 = load i64, i64* %RBP
  %883 = sub i64 %882, 36
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %883 to i32*
  %887 = load i32, i32* %886
  %888 = sext i32 %887 to i64
  store i64 %888, i64* %RAX, align 8, !tbaa !2428
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 8
  store i64 %890, i64* %PC
  %891 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %891, i64* %RCX, align 8, !tbaa !2428
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 20
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 4
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i32*
  %897 = load i32, i32* %896
  %898 = sext i32 %897 to i64
  store i64 %898, i64* %R9, align 8, !tbaa !2428
  %899 = load i64, i64* %R9
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 4
  store i64 %901, i64* %PC
  %902 = shl i64 %899, 3
  %903 = icmp slt i64 %902, 0
  %904 = shl i64 %902, 1
  store i64 %904, i64* %R9, align 8, !tbaa !2428
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %906 = zext i1 %903 to i8
  store i8 %906, i8* %905, align 1, !tbaa !2432
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %908 = trunc i64 %904 to i32
  %909 = and i32 %908, 254
  %910 = call i32 @llvm.ctpop.i32(i32 %909) #16
  %911 = trunc i32 %910 to i8
  %912 = and i8 %911, 1
  %913 = xor i8 %912, 1
  store i8 %913, i8* %907, align 1, !tbaa !2432
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %914, align 1, !tbaa !2432
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %916 = icmp eq i64 %904, 0
  %917 = zext i1 %916 to i8
  store i8 %917, i8* %915, align 1, !tbaa !2432
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %919 = lshr i64 %904, 63
  %920 = trunc i64 %919 to i8
  store i8 %920, i8* %918, align 1, !tbaa !2432
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %921, align 1, !tbaa !2432
  %922 = load i64, i64* %RCX
  %923 = load i64, i64* %R9
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 3
  store i64 %925, i64* %PC
  %926 = add i64 %923, %922
  store i64 %926, i64* %RCX, align 8, !tbaa !2428
  %927 = icmp ult i64 %926, %922
  %928 = icmp ult i64 %926, %923
  %929 = or i1 %927, %928
  %930 = zext i1 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %930, i8* %931, align 1, !tbaa !2433
  %932 = trunc i64 %926 to i32
  %933 = and i32 %932, 255
  %934 = call i32 @llvm.ctpop.i32(i32 %933) #16
  %935 = trunc i32 %934 to i8
  %936 = and i8 %935, 1
  %937 = xor i8 %936, 1
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %937, i8* %938, align 1, !tbaa !2447
  %939 = xor i64 %923, %922
  %940 = xor i64 %939, %926
  %941 = lshr i64 %940, 4
  %942 = trunc i64 %941 to i8
  %943 = and i8 %942, 1
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %943, i8* %944, align 1, !tbaa !2448
  %945 = icmp eq i64 %926, 0
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %946, i8* %947, align 1, !tbaa !2449
  %948 = lshr i64 %926, 63
  %949 = trunc i64 %948 to i8
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %949, i8* %950, align 1, !tbaa !2450
  %951 = lshr i64 %922, 63
  %952 = lshr i64 %923, 63
  %953 = xor i64 %948, %951
  %954 = xor i64 %948, %952
  %955 = add nuw nsw i64 %953, %954
  %956 = icmp eq i64 %955, 2
  %957 = zext i1 %956 to i8
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %957, i8* %958, align 1, !tbaa !2451
  %959 = load i64, i64* %RCX
  %960 = add i64 %959, 8
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 4
  store i64 %962, i64* %PC
  %963 = inttoptr i64 %960 to i64*
  %964 = load i64, i64* %963
  store i64 %964, i64* %RCX, align 8, !tbaa !2428
  %965 = load i64, i64* %RBP
  %966 = sub i64 %965, 56
  %967 = load i64, i64* %RDI
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 4
  store i64 %969, i64* %PC
  %970 = inttoptr i64 %966 to i64*
  store i64 %967, i64* %970
  %971 = load i64, i64* %RCX
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 3
  store i64 %973, i64* %PC
  store i64 %971, i64* %RDI, align 8, !tbaa !2428
  %974 = load i64, i64* %RBP
  %975 = sub i64 %974, 64
  %976 = load i64, i64* %RSI
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 4
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %975 to i64*
  store i64 %976, i64* %979
  %980 = load i64, i64* %RBP
  %981 = sub i64 %980, 72
  %982 = load i64, i64* %R8
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 4
  store i64 %984, i64* %PC
  %985 = inttoptr i64 %981 to i64*
  store i64 %982, i64* %985
  %986 = load i64, i64* %RBP
  %987 = sub i64 %986, 80
  %988 = load i64, i64* %RAX
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %987 to i64*
  store i64 %988, i64* %991
  %992 = load i64, i64* %RBP
  %993 = sub i64 %992, 84
  %994 = load i32, i32* %EDX
  %995 = zext i32 %994 to i64
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 3
  store i64 %997, i64* %PC
  %998 = inttoptr i64 %993 to i32*
  store i32 %994, i32* %998
  %999 = load i64, i64* %PC
  %1000 = sub i64 %999, 2606
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 5
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 5
  store i64 %1004, i64* %PC
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1006 = load i64, i64* %1005, align 8, !tbaa !2428
  %1007 = add i64 %1006, -8
  %1008 = inttoptr i64 %1007 to i64*
  store i64 %1002, i64* %1008
  store i64 %1007, i64* %1005, align 8, !tbaa !2428
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1000, i64* %1009, align 8, !tbaa !2428
  %1010 = load i64, i64* %PC
  %1011 = call %struct.Memory* @ext_4006e0_strlen(%struct.State* %0, i64 %1010, %struct.Memory* %MEMORY.2)
  %1012 = load i64, i64* %RBP
  %1013 = sub i64 %1012, 80
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 4
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1013 to i64*
  %1017 = load i64, i64* %1016
  store i64 %1017, i64* %RCX, align 8, !tbaa !2428
  %1018 = load i64, i64* %RCX
  %1019 = load i64, i64* %RAX
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 3
  store i64 %1021, i64* %PC
  %1022 = sub i64 %1018, %1019
  store i64 %1022, i64* %RCX, align 8, !tbaa !2428
  %1023 = icmp ult i64 %1018, %1019
  %1024 = zext i1 %1023 to i8
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1024, i8* %1025, align 1, !tbaa !2433
  %1026 = trunc i64 %1022 to i32
  %1027 = and i32 %1026, 255
  %1028 = call i32 @llvm.ctpop.i32(i32 %1027) #16
  %1029 = trunc i32 %1028 to i8
  %1030 = and i8 %1029, 1
  %1031 = xor i8 %1030, 1
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1031, i8* %1032, align 1, !tbaa !2447
  %1033 = xor i64 %1019, %1018
  %1034 = xor i64 %1033, %1022
  %1035 = lshr i64 %1034, 4
  %1036 = trunc i64 %1035 to i8
  %1037 = and i8 %1036, 1
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1037, i8* %1038, align 1, !tbaa !2448
  %1039 = icmp eq i64 %1022, 0
  %1040 = zext i1 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1040, i8* %1041, align 1, !tbaa !2449
  %1042 = lshr i64 %1022, 63
  %1043 = trunc i64 %1042 to i8
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1043, i8* %1044, align 1, !tbaa !2450
  %1045 = lshr i64 %1018, 63
  %1046 = lshr i64 %1019, 63
  %1047 = xor i64 %1046, %1045
  %1048 = xor i64 %1042, %1045
  %1049 = add nuw nsw i64 %1048, %1047
  %1050 = icmp eq i64 %1049, 2
  %1051 = zext i1 %1050 to i8
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1051, i8* %1052, align 1, !tbaa !2451
  %1053 = load i32, i32* %ECX
  %1054 = zext i32 %1053 to i64
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 2
  store i64 %1056, i64* %PC
  %1057 = and i64 %1054, 4294967295
  store i64 %1057, i64* %RDX, align 8, !tbaa !2428
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 8
  store i64 %1059, i64* %PC
  %1060 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1060, i64* %RAX, align 8, !tbaa !2428
  %1061 = load i64, i64* %RBP
  %1062 = sub i64 %1061, 20
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 4
  store i64 %1064, i64* %PC
  %1065 = inttoptr i64 %1062 to i32*
  %1066 = load i32, i32* %1065
  %1067 = sext i32 %1066 to i64
  store i64 %1067, i64* %RCX, align 8, !tbaa !2428
  %1068 = load i64, i64* %RCX
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 4
  store i64 %1070, i64* %PC
  %1071 = shl i64 %1068, 3
  %1072 = icmp slt i64 %1071, 0
  %1073 = shl i64 %1071, 1
  store i64 %1073, i64* %RCX, align 8, !tbaa !2428
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1075 = zext i1 %1072 to i8
  store i8 %1075, i8* %1074, align 1, !tbaa !2432
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1077 = trunc i64 %1073 to i32
  %1078 = and i32 %1077, 254
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  store i8 %1082, i8* %1076, align 1, !tbaa !2432
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1083, align 1, !tbaa !2432
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1085 = icmp eq i64 %1073, 0
  %1086 = zext i1 %1085 to i8
  store i8 %1086, i8* %1084, align 1, !tbaa !2432
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1088 = lshr i64 %1073, 63
  %1089 = trunc i64 %1088 to i8
  store i8 %1089, i8* %1087, align 1, !tbaa !2432
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1090, align 1, !tbaa !2432
  %1091 = load i64, i64* %RAX
  %1092 = load i64, i64* %RCX
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 3
  store i64 %1094, i64* %PC
  %1095 = add i64 %1092, %1091
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = icmp ult i64 %1095, %1091
  %1097 = icmp ult i64 %1095, %1092
  %1098 = or i1 %1096, %1097
  %1099 = zext i1 %1098 to i8
  %1100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1099, i8* %1100, align 1, !tbaa !2433
  %1101 = trunc i64 %1095 to i32
  %1102 = and i32 %1101, 255
  %1103 = call i32 @llvm.ctpop.i32(i32 %1102) #16
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  %1106 = xor i8 %1105, 1
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1106, i8* %1107, align 1, !tbaa !2447
  %1108 = xor i64 %1092, %1091
  %1109 = xor i64 %1108, %1095
  %1110 = lshr i64 %1109, 4
  %1111 = trunc i64 %1110 to i8
  %1112 = and i8 %1111, 1
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1112, i8* %1113, align 1, !tbaa !2448
  %1114 = icmp eq i64 %1095, 0
  %1115 = zext i1 %1114 to i8
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1115, i8* %1116, align 1, !tbaa !2449
  %1117 = lshr i64 %1095, 63
  %1118 = trunc i64 %1117 to i8
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1118, i8* %1119, align 1, !tbaa !2450
  %1120 = lshr i64 %1091, 63
  %1121 = lshr i64 %1092, 63
  %1122 = xor i64 %1117, %1120
  %1123 = xor i64 %1117, %1121
  %1124 = add nuw nsw i64 %1122, %1123
  %1125 = icmp eq i64 %1124, 2
  %1126 = zext i1 %1125 to i8
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1126, i8* %1127, align 1, !tbaa !2451
  %1128 = load i64, i64* %RAX
  %1129 = add i64 %1128, 8
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 4
  store i64 %1131, i64* %PC
  %1132 = inttoptr i64 %1129 to i64*
  %1133 = load i64, i64* %1132
  store i64 %1133, i64* %R9, align 8, !tbaa !2428
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 8
  store i64 %1135, i64* %PC
  %1136 = load i64, i64* bitcast (%results_type* @results to i64*)
  store i64 %1136, i64* %RAX, align 8, !tbaa !2428
  %1137 = load i64, i64* %RBP
  %1138 = sub i64 %1137, 20
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1138 to i32*
  %1142 = load i32, i32* %1141
  %1143 = sext i32 %1142 to i64
  store i64 %1143, i64* %RCX, align 8, !tbaa !2428
  %1144 = load i64, i64* %RCX
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 4
  store i64 %1146, i64* %PC
  %1147 = shl i64 %1144, 3
  %1148 = icmp slt i64 %1147, 0
  %1149 = shl i64 %1147, 1
  store i64 %1149, i64* %RCX, align 8, !tbaa !2428
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1151 = zext i1 %1148 to i8
  store i8 %1151, i8* %1150, align 1, !tbaa !2432
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1153 = trunc i64 %1149 to i32
  %1154 = and i32 %1153, 254
  %1155 = call i32 @llvm.ctpop.i32(i32 %1154) #16
  %1156 = trunc i32 %1155 to i8
  %1157 = and i8 %1156, 1
  %1158 = xor i8 %1157, 1
  store i8 %1158, i8* %1152, align 1, !tbaa !2432
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1159, align 1, !tbaa !2432
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1161 = icmp eq i64 %1149, 0
  %1162 = zext i1 %1161 to i8
  store i8 %1162, i8* %1160, align 1, !tbaa !2432
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1164 = lshr i64 %1149, 63
  %1165 = trunc i64 %1164 to i8
  store i8 %1165, i8* %1163, align 1, !tbaa !2432
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1166, align 1, !tbaa !2432
  %1167 = load i64, i64* %RAX
  %1168 = load i64, i64* %RCX
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 3
  store i64 %1170, i64* %PC
  %1171 = add i64 %1168, %1167
  store i64 %1171, i64* %RAX, align 8, !tbaa !2428
  %1172 = icmp ult i64 %1171, %1167
  %1173 = icmp ult i64 %1171, %1168
  %1174 = or i1 %1172, %1173
  %1175 = zext i1 %1174 to i8
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1175, i8* %1176, align 1, !tbaa !2433
  %1177 = trunc i64 %1171 to i32
  %1178 = and i32 %1177, 255
  %1179 = call i32 @llvm.ctpop.i32(i32 %1178) #16
  %1180 = trunc i32 %1179 to i8
  %1181 = and i8 %1180, 1
  %1182 = xor i8 %1181, 1
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1182, i8* %1183, align 1, !tbaa !2447
  %1184 = xor i64 %1168, %1167
  %1185 = xor i64 %1184, %1171
  %1186 = lshr i64 %1185, 4
  %1187 = trunc i64 %1186 to i8
  %1188 = and i8 %1187, 1
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1188, i8* %1189, align 1, !tbaa !2448
  %1190 = icmp eq i64 %1171, 0
  %1191 = zext i1 %1190 to i8
  %1192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1191, i8* %1192, align 1, !tbaa !2449
  %1193 = lshr i64 %1171, 63
  %1194 = trunc i64 %1193 to i8
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1194, i8* %1195, align 1, !tbaa !2450
  %1196 = lshr i64 %1167, 63
  %1197 = lshr i64 %1168, 63
  %1198 = xor i64 %1193, %1196
  %1199 = xor i64 %1193, %1197
  %1200 = add nuw nsw i64 %1198, %1199
  %1201 = icmp eq i64 %1200, 2
  %1202 = zext i1 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1202, i8* %1203, align 1, !tbaa !2451
  %1204 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1205 = load i64, i64* %RAX
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 4
  store i64 %1207, i64* %PC
  %1208 = inttoptr i64 %1205 to double*
  %1209 = load double, double* %1208
  %1210 = bitcast i8* %1204 to double*
  store double %1209, double* %1210, align 1, !tbaa !2452
  %1211 = getelementptr inbounds i8, i8* %1204, i64 8
  %1212 = bitcast i8* %1211 to double*
  store double 0.000000e+00, double* %1212, align 1, !tbaa !2452
  %1213 = load i64, i64* %RBP
  %1214 = sub i64 %1213, 56
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 4
  store i64 %1216, i64* %PC
  %1217 = inttoptr i64 %1214 to i64*
  %1218 = load i64, i64* %1217
  store i64 %1218, i64* %RDI, align 8, !tbaa !2428
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 64
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 4
  store i64 %1222, i64* %PC
  %1223 = inttoptr i64 %1220 to i64*
  %1224 = load i64, i64* %1223
  store i64 %1224, i64* %RSI, align 8, !tbaa !2428
  %1225 = bitcast i32* %R10D to i64*
  %1226 = load i64, i64* %RBP
  %1227 = sub i64 %1226, 84
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 4
  store i64 %1229, i64* %PC
  %1230 = inttoptr i64 %1227 to i32*
  %1231 = load i32, i32* %1230
  %1232 = zext i32 %1231 to i64
  store i64 %1232, i64* %1225, align 8, !tbaa !2428
  %1233 = load i64, i64* %RBP
  %1234 = sub i64 %1233, 88
  %1235 = load i32, i32* %EDX
  %1236 = zext i32 %1235 to i64
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 3
  store i64 %1238, i64* %PC
  %1239 = inttoptr i64 %1234 to i32*
  store i32 %1235, i32* %1239
  %1240 = load i32, i32* %R10D
  %1241 = zext i32 %1240 to i64
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 3
  store i64 %1243, i64* %PC
  %1244 = and i64 %1241, 4294967295
  store i64 %1244, i64* %RDX, align 8, !tbaa !2428
  %1245 = load i64, i64* %RBP
  %1246 = sub i64 %1245, 88
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 3
  store i64 %1248, i64* %PC
  %1249 = inttoptr i64 %1246 to i32*
  %1250 = load i32, i32* %1249
  %1251 = zext i32 %1250 to i64
  store i64 %1251, i64* %RCX, align 8, !tbaa !2428
  %1252 = load i64, i64* %RBP
  %1253 = sub i64 %1252, 72
  %1254 = load i64, i64* %PC
  %1255 = add i64 %1254, 4
  store i64 %1255, i64* %PC
  %1256 = inttoptr i64 %1253 to i64*
  %1257 = load i64, i64* %1256
  store i64 %1257, i64* %R8, align 8, !tbaa !2428
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 2
  store i64 %1259, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %1260 = load i64, i64* %PC
  %1261 = sub i64 %1260, 2629
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 5
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 5
  store i64 %1265, i64* %PC
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1267 = load i64, i64* %1266, align 8, !tbaa !2428
  %1268 = add i64 %1267, -8
  %1269 = inttoptr i64 %1268 to i64*
  store i64 %1263, i64* %1269
  store i64 %1268, i64* %1266, align 8, !tbaa !2428
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1261, i64* %1270, align 8, !tbaa !2428
  %1271 = load i64, i64* %PC
  %1272 = call %struct.Memory* @ext_400720_fprintf(%struct.State* %0, i64 %1271, %struct.Memory* %1011)
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 92
  %1275 = load i32, i32* %EAX
  %1276 = zext i32 %1275 to i64
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 3
  store i64 %1278, i64* %PC
  %1279 = inttoptr i64 %1274 to i32*
  store i32 %1275, i32* %1279
  %1280 = load i64, i64* %RBP
  %1281 = sub i64 %1280, 20
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 3
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1281 to i32*
  %1285 = load i32, i32* %1284
  %1286 = zext i32 %1285 to i64
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = load i64, i64* %RAX
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 3
  store i64 %1289, i64* %PC
  %1290 = trunc i64 %1287 to i32
  %1291 = add i32 1, %1290
  %1292 = zext i32 %1291 to i64
  store i64 %1292, i64* %RAX, align 8, !tbaa !2428
  %1293 = icmp ult i32 %1291, %1290
  %1294 = icmp ult i32 %1291, 1
  %1295 = or i1 %1293, %1294
  %1296 = zext i1 %1295 to i8
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1296, i8* %1297, align 1, !tbaa !2433
  %1298 = and i32 %1291, 255
  %1299 = call i32 @llvm.ctpop.i32(i32 %1298) #16
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1302, i8* %1303, align 1, !tbaa !2447
  %1304 = xor i64 1, %1287
  %1305 = trunc i64 %1304 to i32
  %1306 = xor i32 %1305, %1291
  %1307 = lshr i32 %1306, 4
  %1308 = trunc i32 %1307 to i8
  %1309 = and i8 %1308, 1
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1309, i8* %1310, align 1, !tbaa !2448
  %1311 = icmp eq i32 %1291, 0
  %1312 = zext i1 %1311 to i8
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1312, i8* %1313, align 1, !tbaa !2449
  %1314 = lshr i32 %1291, 31
  %1315 = trunc i32 %1314 to i8
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1315, i8* %1316, align 1, !tbaa !2450
  %1317 = lshr i32 %1290, 31
  %1318 = xor i32 %1314, %1317
  %1319 = add nuw nsw i32 %1318, %1314
  %1320 = icmp eq i32 %1319, 2
  %1321 = zext i1 %1320 to i8
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1321, i8* %1322, align 1, !tbaa !2451
  %1323 = load i64, i64* %RBP
  %1324 = sub i64 %1323, 20
  %1325 = load i32, i32* %EAX
  %1326 = zext i32 %1325 to i64
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 3
  store i64 %1328, i64* %PC
  %1329 = inttoptr i64 %1324 to i32*
  store i32 %1325, i32* %1329
  %1330 = load i64, i64* %PC
  %1331 = sub i64 %1330, 196
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 5
  store i64 %1333, i64* %PC
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1331, i64* %1334, align 8, !tbaa !2428
  br label %block_4010b2

block_4011c1:                                     ; preds = %block_401182
  %1335 = add i64 %374, 10
  store i64 %1335, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 203), i64* %RSI, align 8, !tbaa !2428
  %1336 = load i64, i64* %RBP
  %1337 = sub i64 %1336, 8
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 4
  store i64 %1339, i64* %PC
  %1340 = inttoptr i64 %1337 to i64*
  %1341 = load i64, i64* %1340
  store i64 %1341, i64* %RDI, align 8, !tbaa !2428
  %1342 = load i64, i64* %RBP
  %1343 = sub i64 %1342, 16
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1343 to i64*
  %1347 = load i64, i64* %1346
  store i64 %1347, i64* %RDX, align 8, !tbaa !2428
  %1348 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1349 = load i64, i64* %RBP
  %1350 = sub i64 %1349, 32
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 5
  store i64 %1352, i64* %PC
  %1353 = inttoptr i64 %1350 to double*
  %1354 = load double, double* %1353
  %1355 = bitcast i8* %1348 to double*
  store double %1354, double* %1355, align 1, !tbaa !2452
  %1356 = getelementptr inbounds i8, i8* %1348, i64 8
  %1357 = bitcast i8* %1356 to double*
  store double 0.000000e+00, double* %1357, align 1, !tbaa !2452
  %1358 = load i64, i64* %PC
  %1359 = add i64 %1358, 2
  store i64 %1359, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %1360 = load i64, i64* %PC
  %1361 = sub i64 %1360, 2746
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 5
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 5
  store i64 %1365, i64* %PC
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1367 = load i64, i64* %1366, align 8, !tbaa !2428
  %1368 = add i64 %1367, -8
  %1369 = inttoptr i64 %1368 to i64*
  store i64 %1363, i64* %1369
  store i64 %1368, i64* %1366, align 8, !tbaa !2428
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1361, i64* %1370, align 8, !tbaa !2428
  %1371 = load i64, i64* %PC
  %1372 = call %struct.Memory* @ext_400720_fprintf(%struct.State* %0, i64 %1371, %struct.Memory* %MEMORY.0)
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 11
  store i64 %1374, i64* %PC
  store i32 0, i32* bitcast (%current_test_type* @current_test to i32*)
  %1375 = load i64, i64* %RBP
  %1376 = sub i64 %1375, 96
  %1377 = load i32, i32* %EAX
  %1378 = zext i32 %1377 to i64
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 3
  store i64 %1380, i64* %PC
  %1381 = inttoptr i64 %1376 to i32*
  store i32 %1377, i32* %1381
  %1382 = load i64, i64* %RSP
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 4
  store i64 %1384, i64* %PC
  %1385 = add i64 96, %1382
  store i64 %1385, i64* %RSP, align 8, !tbaa !2428
  %1386 = icmp ult i64 %1385, %1382
  %1387 = icmp ult i64 %1385, 96
  %1388 = or i1 %1386, %1387
  %1389 = zext i1 %1388 to i8
  %1390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1389, i8* %1390, align 1, !tbaa !2433
  %1391 = trunc i64 %1385 to i32
  %1392 = and i32 %1391, 255
  %1393 = call i32 @llvm.ctpop.i32(i32 %1392) #16
  %1394 = trunc i32 %1393 to i8
  %1395 = and i8 %1394, 1
  %1396 = xor i8 %1395, 1
  %1397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1396, i8* %1397, align 1, !tbaa !2447
  %1398 = xor i64 96, %1382
  %1399 = xor i64 %1398, %1385
  %1400 = lshr i64 %1399, 4
  %1401 = trunc i64 %1400 to i8
  %1402 = and i8 %1401, 1
  %1403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1402, i8* %1403, align 1, !tbaa !2448
  %1404 = icmp eq i64 %1385, 0
  %1405 = zext i1 %1404 to i8
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1405, i8* %1406, align 1, !tbaa !2449
  %1407 = lshr i64 %1385, 63
  %1408 = trunc i64 %1407 to i8
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1408, i8* %1409, align 1, !tbaa !2450
  %1410 = lshr i64 %1382, 63
  %1411 = xor i64 %1407, %1410
  %1412 = add nuw nsw i64 %1411, %1407
  %1413 = icmp eq i64 %1412, 2
  %1414 = zext i1 %1413 to i8
  %1415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1414, i8* %1415, align 1, !tbaa !2451
  %1416 = load i64, i64* %PC
  %1417 = add i64 %1416, 1
  store i64 %1417, i64* %PC
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1419 = load i64, i64* %1418, align 8, !tbaa !2428
  %1420 = add i64 %1419, 8
  %1421 = inttoptr i64 %1419 to i64*
  %1422 = load i64, i64* %1421
  store i64 %1422, i64* %RBP, align 8, !tbaa !2428
  store i64 %1420, i64* %1418, align 8, !tbaa !2428
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 1
  store i64 %1424, i64* %PC
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1427 = load i64, i64* %1426, align 8, !tbaa !2428
  %1428 = inttoptr i64 %1427 to i64*
  %1429 = load i64, i64* %1428
  store i64 %1429, i64* %1425, align 8, !tbaa !2428
  %1430 = add i64 %1427, 8
  store i64 %1430, i64* %1426, align 8, !tbaa !2428
  ret %struct.Memory* %1372
}

; Function Attrs: noinline
define %struct.Memory* @sub_405b30__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405b30:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %ECX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %ESI = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %47 to %union.vec128_t*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = load i64, i64* %RBP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 1
  store i64 %52, i64* %PC
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %54 = load i64, i64* %53, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %50, i64* %56
  store i64 %55, i64* %53, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RBP, align 8, !tbaa !2428
  %60 = load i64, i64* %RSP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = sub i64 %60, 112
  store i64 %63, i64* %RSP, align 8, !tbaa !2428
  %64 = icmp ult i64 %60, 112
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %65, i8* %66, align 1, !tbaa !2433
  %67 = trunc i64 %63 to i32
  %68 = and i32 %67, 255
  %69 = call i32 @llvm.ctpop.i32(i32 %68) #16
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !2447
  %74 = xor i64 112, %60
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = icmp eq i64 %63, 0
  %81 = zext i1 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %63, 63
  %84 = trunc i64 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %84, i8* %85, align 1, !tbaa !2450
  %86 = lshr i64 %60, 63
  %87 = xor i64 %83, %86
  %88 = add nuw nsw i64 %87, %86
  %89 = icmp eq i64 %88, 2
  %90 = zext i1 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %90, i8* %91, align 1, !tbaa !2451
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 24
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %96 = load i64, i64* %RCX
  %97 = load i32, i32* %ECX
  %98 = zext i32 %97 to i64
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 2
  store i64 %100, i64* %PC
  %101 = xor i64 %98, %96
  %102 = trunc i64 %101 to i32
  %103 = and i64 %101, 4294967295
  store i64 %103, i64* %RCX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %104, align 1, !tbaa !2433
  %105 = and i32 %102, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2447
  %111 = icmp eq i32 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2449
  %114 = lshr i32 %102, 31
  %115 = trunc i32 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2450
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2448
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %RDI
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %120 to i64*
  store i64 %121, i64* %124
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 16
  %127 = load i64, i64* %RSI
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RSI, align 8, !tbaa !2428
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 24
  %139 = load i64, i64* %RSI
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %142
  %143 = load i64, i64* %RAX
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 3
  store i64 %145, i64* %PC
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %146 = load i32, i32* %ECX
  %147 = zext i32 %146 to i64
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 2
  store i64 %149, i64* %PC
  %150 = and i64 %147, 4294967295
  store i64 %150, i64* %RSI, align 8, !tbaa !2428
  %151 = load i64, i64* %PC
  %152 = sub i64 %151, 5267
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 5
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %158 = load i64, i64* %157, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %154, i64* %160
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %152, i64* %161, align 8, !tbaa !2428
  %162 = load i64, i64* %PC
  %163 = call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %162, %struct.Memory* %2)
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 32
  %166 = load i64, i64* %RAX
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = inttoptr i64 %165 to i64*
  store i64 %166, i64* %169
  br label %block_405b5c

block_405bb9:                                     ; preds = %block_405b98
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 56
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC
  store i64 %171, i64* %RDI, align 8, !tbaa !2428
  %174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 40
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 5
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to double*
  %180 = load double, double* %179
  %181 = bitcast i8* %174 to double*
  store double %180, double* %181, align 1, !tbaa !2452
  %182 = getelementptr inbounds i8, i8* %174, i64 8
  %183 = bitcast i8* %182 to double*
  store double 0.000000e+00, double* %183, align 1, !tbaa !2452
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 80
  %186 = bitcast %union.vec128_t* %XMM0 to i8*
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC
  %189 = bitcast i8* %186 to double*
  %190 = load double, double* %189, align 1
  %191 = inttoptr i64 %185 to double*
  store double %190, double* %191
  %192 = load i64, i64* %PC
  %193 = sub i64 %192, 1527
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 5
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 5
  store i64 %197, i64* %PC
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %199 = load i64, i64* %198, align 8, !tbaa !2428
  %200 = add i64 %199, -8
  %201 = inttoptr i64 %200 to i64*
  store i64 %195, i64* %201
  store i64 %200, i64* %198, align 8, !tbaa !2428
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %193, i64* %202, align 8, !tbaa !2428
  %203 = load i64, i64* %PC
  %204 = call %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %203, %struct.Memory* %637)
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 3
  store i64 %207, i64* %PC
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %208 = load i64, i64* %PC
  %209 = sub i64 %208, 5279
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 5
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %215 = load i64, i64* %214, align 8, !tbaa !2428
  %216 = add i64 %215, -8
  %217 = inttoptr i64 %216 to i64*
  store i64 %211, i64* %217
  store i64 %216, i64* %214, align 8, !tbaa !2428
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %209, i64* %218, align 8, !tbaa !2428
  %219 = load i64, i64* %PC
  %220 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %219, %struct.Memory* %204)
  %221 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %222 to double*
  %226 = load double, double* %225
  %227 = bitcast i8* %221 to double*
  store double %226, double* %227, align 1, !tbaa !2452
  %228 = getelementptr inbounds i8, i8* %221, i64 8
  %229 = bitcast i8* %228 to double*
  store double 0.000000e+00, double* %229, align 1, !tbaa !2452
  %230 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 80
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to double*
  %236 = load double, double* %235
  %237 = bitcast i8* %230 to double*
  store double %236, double* %237, align 1, !tbaa !2452
  %238 = getelementptr inbounds i8, i8* %230, i64 8
  %239 = bitcast i8* %238 to double*
  store double 0.000000e+00, double* %239, align 1, !tbaa !2452
  %240 = bitcast %union.vec128_t* %XMM0 to i8*
  %241 = bitcast %union.vec128_t* %XMM1 to i8*
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = bitcast i8* %240 to double*
  %245 = load double, double* %244, align 1
  %246 = bitcast i8* %241 to double*
  %247 = load double, double* %246, align 1
  %248 = fcmp uno double %245, %247
  br i1 %248, label %249, label %261

; <label>:249:                                    ; preds = %block_405bb9
  %250 = fadd double %245, %247
  %251 = bitcast double %250 to i64
  %252 = and i64 %251, 9221120237041090560
  %253 = icmp eq i64 %252, 9218868437227405312
  %254 = and i64 %251, 2251799813685247
  %255 = icmp ne i64 %254, 0
  %256 = and i1 %253, %255
  br i1 %256, label %257, label %267

; <label>:257:                                    ; preds = %249
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %259 = load i64, i64* %258, align 8, !tbaa !2428
  %260 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %259, %struct.Memory* %220) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:261:                                    ; preds = %block_405bb9
  %262 = fcmp ogt double %245, %247
  br i1 %262, label %267, label %263

; <label>:263:                                    ; preds = %261
  %264 = fcmp olt double %245, %247
  br i1 %264, label %267, label %265

; <label>:265:                                    ; preds = %263
  %266 = fcmp oeq double %245, %247
  br i1 %266, label %267, label %274

; <label>:267:                                    ; preds = %265, %263, %261, %249
  %268 = phi i8 [ 0, %261 ], [ 0, %263 ], [ 1, %265 ], [ 1, %249 ]
  %269 = phi i8 [ 0, %261 ], [ 0, %263 ], [ 0, %265 ], [ 1, %249 ]
  %270 = phi i8 [ 0, %261 ], [ 1, %263 ], [ 0, %265 ], [ 1, %249 ]
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %268, i8* %271, align 1, !tbaa !2432
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %269, i8* %272, align 1, !tbaa !2432
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %270, i8* %273, align 1, !tbaa !2432
  br label %274

; <label>:274:                                    ; preds = %267, %265
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %275, align 1, !tbaa !2432
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %276, align 1, !tbaa !2432
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %277, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %257, %274
  %278 = phi %struct.Memory* [ %260, %257 ], [ %220, %274 ]
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 3
  store i64 %280, i64* %PC
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %282 = load i8, i8* %281, align 1, !tbaa !2433
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %284 = load i8, i8* %283, align 1, !tbaa !2449
  %285 = or i8 %284, %282
  %286 = icmp eq i8 %285, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %CL, align 1, !tbaa !2432
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 65
  %290 = load i8, i8* %CL
  %291 = zext i8 %290 to i64
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 3
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %289 to i8*
  store i8 %290, i8* %294
  br label %block_405be7

block_405bf7:                                     ; preds = %block_405be7
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 56
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  store i64 %296, i64* %RDI, align 8, !tbaa !2428
  %299 = load i64, i64* %PC
  %300 = sub i64 %299, 5323
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 5
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 5
  store i64 %304, i64* %PC
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %306 = load i64, i64* %305, align 8, !tbaa !2428
  %307 = add i64 %306, -8
  %308 = inttoptr i64 %307 to i64*
  store i64 %302, i64* %308
  store i64 %307, i64* %305, align 8, !tbaa !2428
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %300, i64* %309, align 8, !tbaa !2428
  %310 = load i64, i64* %PC
  %311 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %310, %struct.Memory* %MEMORY.2)
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 48
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 4
  store i64 %315, i64* %PC
  store i64 %313, i64* %RDI, align 8, !tbaa !2428
  %316 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %317 = load i64, i64* %RAX
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 4
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to double*
  %321 = load double, double* %320
  %322 = bitcast i8* %316 to double*
  store double %321, double* %322, align 1, !tbaa !2452
  %323 = getelementptr inbounds i8, i8* %316, i64 8
  %324 = bitcast i8* %323 to double*
  store double 0.000000e+00, double* %324, align 1, !tbaa !2452
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 88
  %327 = bitcast %union.vec128_t* %XMM0 to i8*
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 5
  store i64 %329, i64* %PC
  %330 = bitcast i8* %327 to double*
  %331 = load double, double* %330, align 1
  %332 = inttoptr i64 %326 to double*
  store double %331, double* %332
  %333 = load i64, i64* %PC
  %334 = sub i64 %333, 5341
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  store i64 %338, i64* %PC
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %340 = load i64, i64* %339, align 8, !tbaa !2428
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %336, i64* %342
  store i64 %341, i64* %339, align 8, !tbaa !2428
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %334, i64* %343, align 8, !tbaa !2428
  %344 = load i64, i64* %PC
  %345 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %344, %struct.Memory* %311)
  %346 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 88
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 5
  store i64 %350, i64* %PC
  %351 = inttoptr i64 %348 to double*
  %352 = load double, double* %351
  %353 = bitcast i8* %346 to double*
  store double %352, double* %353, align 1, !tbaa !2452
  %354 = getelementptr inbounds i8, i8* %346, i64 8
  %355 = bitcast i8* %354 to double*
  store double 0.000000e+00, double* %355, align 1, !tbaa !2452
  %356 = load i64, i64* %RAX
  %357 = bitcast %union.vec128_t* %XMM0 to i8*
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = bitcast i8* %357 to double*
  %361 = load double, double* %360, align 1
  %362 = inttoptr i64 %356 to double*
  store double %361, double* %362
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 48
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 4
  store i64 %366, i64* %PC
  store i64 %364, i64* %RDI, align 8, !tbaa !2428
  %367 = load i64, i64* %PC
  %368 = sub i64 %367, 1615
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 5
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 5
  store i64 %372, i64* %PC
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %374 = load i64, i64* %373, align 8, !tbaa !2428
  %375 = add i64 %374, -8
  %376 = inttoptr i64 %375 to i64*
  store i64 %370, i64* %376
  store i64 %375, i64* %373, align 8, !tbaa !2428
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %368, i64* %377, align 8, !tbaa !2428
  %378 = load i64, i64* %PC
  %379 = call %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %378, %struct.Memory* %345)
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 96
  %382 = load i64, i64* %RAX
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC
  %385 = inttoptr i64 %381 to i64*
  store i64 %382, i64* %385
  %386 = load i64, i64* %PC
  %387 = sub i64 %386, 144
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 5
  store i64 %389, i64* %PC
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %387, i64* %390, align 8, !tbaa !2428
  br label %block_405b98

block_405b5c:                                     ; preds = %block_405bf2, %block_405b30
  %MEMORY.0 = phi %struct.Memory* [ %163, %block_405b30 ], [ %605, %block_405bf2 ]
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 24
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 4
  store i64 %394, i64* %PC
  store i64 %392, i64* %RDI, align 8, !tbaa !2428
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 16
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC
  store i64 %396, i64* %RSI, align 8, !tbaa !2428
  %399 = load i64, i64* %PC
  %400 = sub i64 %399, 5220
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 5
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 5
  store i64 %404, i64* %PC
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %406 = load i64, i64* %405, align 8, !tbaa !2428
  %407 = add i64 %406, -8
  %408 = inttoptr i64 %407 to i64*
  store i64 %402, i64* %408
  store i64 %407, i64* %405, align 8, !tbaa !2428
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %400, i64* %409, align 8, !tbaa !2428
  %410 = load i64, i64* %PC
  %411 = call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %410, %struct.Memory* %MEMORY.0)
  %412 = load i8, i8* %AL
  %413 = zext i8 %412 to i64
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 2
  store i64 %415, i64* %PC
  %416 = and i64 1, %413
  %417 = trunc i64 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %418, align 1, !tbaa !2433
  %419 = trunc i64 %416 to i32
  %420 = and i32 %419, 255
  %421 = call i32 @llvm.ctpop.i32(i32 %420) #16
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = xor i8 %423, 1
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %424, i8* %425, align 1, !tbaa !2447
  %426 = icmp eq i8 %417, 0
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %427, i8* %428, align 1, !tbaa !2449
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %429, align 1, !tbaa !2450
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %430, align 1, !tbaa !2451
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %431, align 1, !tbaa !2448
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 11
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 6
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 6
  store i64 %437, i64* %PC
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %439 = load i8, i8* %438, align 1, !tbaa !2449
  %440 = icmp eq i8 %439, 0
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %443 = select i1 %440, i64 %433, i64 %435
  store i64 %443, i64* %442, align 8, !tbaa !2428
  %444 = load i8, i8* %BRANCH_TAKEN
  %445 = icmp eq i8 %444, 1
  br i1 %445, label %block_405b76, label %block_405b71

block_405b76:                                     ; preds = %block_405b5c
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 24
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  store i64 %447, i64* %RDI, align 8, !tbaa !2428
  %450 = load i64, i64* %PC
  %451 = sub i64 %450, 5194
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 5
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 5
  store i64 %455, i64* %PC
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %457 = load i64, i64* %456, align 8, !tbaa !2428
  %458 = add i64 %457, -8
  %459 = inttoptr i64 %458 to i64*
  store i64 %453, i64* %459
  store i64 %458, i64* %456, align 8, !tbaa !2428
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %451, i64* %460, align 8, !tbaa !2428
  %461 = load i64, i64* %PC
  %462 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %461, %struct.Memory* %411)
  %463 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %464 = load i64, i64* %RAX
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 4
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to double*
  %468 = load double, double* %467
  %469 = bitcast i8* %463 to double*
  store double %468, double* %469, align 1, !tbaa !2452
  %470 = getelementptr inbounds i8, i8* %463, i64 8
  %471 = bitcast i8* %470 to double*
  store double 0.000000e+00, double* %471, align 1, !tbaa !2452
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 40
  %474 = bitcast %union.vec128_t* %XMM0 to i8*
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = bitcast i8* %474 to double*
  %478 = load double, double* %477, align 1
  %479 = inttoptr i64 %473 to double*
  store double %478, double* %479
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 24
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i64*
  %485 = load i64, i64* %484
  store i64 %485, i64* %RAX, align 8, !tbaa !2428
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 48
  %488 = load i64, i64* %RAX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %487 to i64*
  store i64 %488, i64* %491
  %492 = load i64, i64* %RBP
  %493 = sub i64 %492, 48
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 4
  store i64 %495, i64* %PC
  %496 = inttoptr i64 %493 to i64*
  %497 = load i64, i64* %496
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = load i64, i64* %RBP
  %499 = sub i64 %498, 56
  %500 = load i64, i64* %RAX
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 4
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %499 to i64*
  store i64 %500, i64* %503
  br label %block_405b98

block_405bb4:                                     ; preds = %block_405b98
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 51
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 5
  store i64 %507, i64* %PC
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %505, i64* %508, align 8, !tbaa !2428
  br label %block_405be7

block_405bf2:                                     ; preds = %block_405be7
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 59
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 5
  store i64 %512, i64* %PC
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %510, i64* %513, align 8, !tbaa !2428
  %514 = load i64, i64* %RBP
  %515 = sub i64 %514, 48
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  store i64 %515, i64* %RDI, align 8, !tbaa !2428
  %518 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 5
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to double*
  %524 = load double, double* %523
  %525 = bitcast i8* %518 to double*
  store double %524, double* %525, align 1, !tbaa !2452
  %526 = getelementptr inbounds i8, i8* %518, i64 8
  %527 = bitcast i8* %526 to double*
  store double 0.000000e+00, double* %527, align 1, !tbaa !2452
  %528 = load i64, i64* %RBP
  %529 = sub i64 %528, 104
  %530 = bitcast %union.vec128_t* %XMM0 to i8*
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 5
  store i64 %532, i64* %PC
  %533 = bitcast i8* %530 to double*
  %534 = load double, double* %533, align 1
  %535 = inttoptr i64 %529 to double*
  store double %534, double* %535
  %536 = load i64, i64* %PC
  %537 = sub i64 %536, 5387
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 5
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 5
  store i64 %541, i64* %PC
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %543 = load i64, i64* %542, align 8, !tbaa !2428
  %544 = add i64 %543, -8
  %545 = inttoptr i64 %544 to i64*
  store i64 %539, i64* %545
  store i64 %544, i64* %542, align 8, !tbaa !2428
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %537, i64* %546, align 8, !tbaa !2428
  %547 = load i64, i64* %PC
  %548 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %547, %struct.Memory* %MEMORY.2)
  %549 = load i64, i64* %RBP
  %550 = sub i64 %549, 24
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  store i64 %550, i64* %RDI, align 8, !tbaa !2428
  %553 = load i64, i64* %RSI
  %554 = load i32, i32* %ESI
  %555 = zext i32 %554 to i64
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 2
  store i64 %557, i64* %PC
  %558 = xor i64 %555, %553
  %559 = trunc i64 %558 to i32
  %560 = and i64 %558, 4294967295
  store i64 %560, i64* %RSI, align 8, !tbaa !2428
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %561, align 1, !tbaa !2433
  %562 = and i32 %559, 255
  %563 = call i32 @llvm.ctpop.i32(i32 %562) #16
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %566, i8* %567, align 1, !tbaa !2447
  %568 = icmp eq i32 %559, 0
  %569 = zext i1 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %569, i8* %570, align 1, !tbaa !2449
  %571 = lshr i32 %559, 31
  %572 = trunc i32 %571 to i8
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %572, i8* %573, align 1, !tbaa !2450
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %574, align 1, !tbaa !2451
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %575, align 1, !tbaa !2448
  %576 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %577 = load i64, i64* %RBP
  %578 = sub i64 %577, 104
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %578 to double*
  %582 = load double, double* %581
  %583 = bitcast i8* %576 to double*
  store double %582, double* %583, align 1, !tbaa !2452
  %584 = getelementptr inbounds i8, i8* %576, i64 8
  %585 = bitcast i8* %584 to double*
  store double 0.000000e+00, double* %585, align 1, !tbaa !2452
  %586 = load i64, i64* %RAX
  %587 = bitcast %union.vec128_t* %XMM0 to i8*
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = bitcast i8* %587 to double*
  %591 = load double, double* %590, align 1
  %592 = inttoptr i64 %586 to double*
  store double %591, double* %592
  %593 = load i64, i64* %PC
  %594 = sub i64 %593, 5519
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 5
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 5
  store i64 %598, i64* %PC
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %600 = load i64, i64* %599, align 8, !tbaa !2428
  %601 = add i64 %600, -8
  %602 = inttoptr i64 %601 to i64*
  store i64 %596, i64* %602
  store i64 %601, i64* %599, align 8, !tbaa !2428
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %594, i64* %603, align 8, !tbaa !2428
  %604 = load i64, i64* %PC
  %605 = call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %604, %struct.Memory* %548)
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 64
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 252
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_405b5c

block_405b98:                                     ; preds = %block_405b76, %block_405bf7
  %MEMORY.1 = phi %struct.Memory* [ %462, %block_405b76 ], [ %379, %block_405bf7 ]
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 48
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  store i64 %618, i64* %RDI, align 8, !tbaa !2428
  %621 = load i64, i64* %RBP
  %622 = sub i64 %621, 8
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 4
  store i64 %624, i64* %PC
  store i64 %622, i64* %RSI, align 8, !tbaa !2428
  %625 = load i64, i64* %PC
  %626 = sub i64 %625, 5280
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 5
  store i64 %630, i64* %PC
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %632 = load i64, i64* %631, align 8, !tbaa !2428
  %633 = add i64 %632, -8
  %634 = inttoptr i64 %633 to i64*
  store i64 %628, i64* %634
  store i64 %633, i64* %631, align 8, !tbaa !2428
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %626, i64* %635, align 8, !tbaa !2428
  %636 = load i64, i64* %PC
  %637 = call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %636, %struct.Memory* %MEMORY.1)
  %638 = load i64, i64* %RCX
  %639 = load i32, i32* %ECX
  %640 = zext i32 %639 to i64
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 2
  store i64 %642, i64* %PC
  %643 = xor i64 %640, %638
  %644 = trunc i64 %643 to i32
  %645 = and i64 %643, 4294967295
  store i64 %645, i64* %RCX, align 8, !tbaa !2428
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %646, align 1, !tbaa !2433
  %647 = and i32 %644, 255
  %648 = call i32 @llvm.ctpop.i32(i32 %647) #16
  %649 = trunc i32 %648 to i8
  %650 = and i8 %649, 1
  %651 = xor i8 %650, 1
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %651, i8* %652, align 1, !tbaa !2447
  %653 = icmp eq i32 %644, 0
  %654 = zext i1 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %654, i8* %655, align 1, !tbaa !2449
  %656 = lshr i32 %644, 31
  %657 = trunc i32 %656 to i8
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %657, i8* %658, align 1, !tbaa !2450
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %659, align 1, !tbaa !2451
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %660, align 1, !tbaa !2448
  %661 = load i8, i8* %CL
  %662 = zext i8 %661 to i64
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 2
  store i64 %664, i64* %PC
  store i8 %661, i8* %DL, align 1, !tbaa !2432
  %665 = load i8, i8* %AL
  %666 = zext i8 %665 to i64
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 2
  store i64 %668, i64* %PC
  %669 = and i64 1, %666
  %670 = trunc i64 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %671, align 1, !tbaa !2433
  %672 = trunc i64 %669 to i32
  %673 = and i32 %672, 255
  %674 = call i32 @llvm.ctpop.i32(i32 %673) #16
  %675 = trunc i32 %674 to i8
  %676 = and i8 %675, 1
  %677 = xor i8 %676, 1
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %677, i8* %678, align 1, !tbaa !2447
  %679 = icmp eq i8 %670, 0
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %680, i8* %681, align 1, !tbaa !2449
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %682, align 1, !tbaa !2450
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %683, align 1, !tbaa !2451
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %684, align 1, !tbaa !2448
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 65
  %687 = load i8, i8* %DL
  %688 = zext i8 %687 to i64
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 3
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %686 to i8*
  store i8 %687, i8* %691
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 11
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 6
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 6
  store i64 %697, i64* %PC
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %699 = load i8, i8* %698, align 1, !tbaa !2449
  %700 = icmp eq i8 %699, 0
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %703 = select i1 %700, i64 %693, i64 %695
  store i64 %703, i64* %702, align 8, !tbaa !2428
  %704 = load i8, i8* %BRANCH_TAKEN
  %705 = icmp eq i8 %704, 1
  br i1 %705, label %block_405bb9, label %block_405bb4

block_405b71:                                     ; preds = %block_405b5c
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 236
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 5
  store i64 %709, i64* %PC
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %707, i64* %710, align 8, !tbaa !2428
  %711 = load i64, i64* %RSP
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 4
  store i64 %713, i64* %PC
  %714 = add i64 112, %711
  store i64 %714, i64* %RSP, align 8, !tbaa !2428
  %715 = icmp ult i64 %714, %711
  %716 = icmp ult i64 %714, 112
  %717 = or i1 %715, %716
  %718 = zext i1 %717 to i8
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %718, i8* %719, align 1, !tbaa !2433
  %720 = trunc i64 %714 to i32
  %721 = and i32 %720, 255
  %722 = call i32 @llvm.ctpop.i32(i32 %721) #16
  %723 = trunc i32 %722 to i8
  %724 = and i8 %723, 1
  %725 = xor i8 %724, 1
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %725, i8* %726, align 1, !tbaa !2447
  %727 = xor i64 112, %711
  %728 = xor i64 %727, %714
  %729 = lshr i64 %728, 4
  %730 = trunc i64 %729 to i8
  %731 = and i8 %730, 1
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %731, i8* %732, align 1, !tbaa !2448
  %733 = icmp eq i64 %714, 0
  %734 = zext i1 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %734, i8* %735, align 1, !tbaa !2449
  %736 = lshr i64 %714, 63
  %737 = trunc i64 %736 to i8
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %737, i8* %738, align 1, !tbaa !2450
  %739 = lshr i64 %711, 63
  %740 = xor i64 %736, %739
  %741 = add nuw nsw i64 %740, %736
  %742 = icmp eq i64 %741, 2
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %743, i8* %744, align 1, !tbaa !2451
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 1
  store i64 %746, i64* %PC
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %748 = load i64, i64* %747, align 8, !tbaa !2428
  %749 = add i64 %748, 8
  %750 = inttoptr i64 %748 to i64*
  %751 = load i64, i64* %750
  store i64 %751, i64* %RBP, align 8, !tbaa !2428
  store i64 %749, i64* %747, align 8, !tbaa !2428
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 1
  store i64 %753, i64* %PC
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %756 = load i64, i64* %755, align 8, !tbaa !2428
  %757 = inttoptr i64 %756 to i64*
  %758 = load i64, i64* %757
  store i64 %758, i64* %754, align 8, !tbaa !2428
  %759 = add i64 %756, 8
  store i64 %759, i64* %755, align 8, !tbaa !2428
  ret %struct.Memory* %411

block_405be7:                                     ; preds = %block_405bb4, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.2 = phi %struct.Memory* [ %278, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %637, %block_405bb4 ]
  %760 = load i64, i64* %RBP
  %761 = sub i64 %760, 65
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 3
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %761 to i8*
  %765 = load i8, i8* %764
  store i8 %765, i8* %AL, align 1, !tbaa !2432
  %766 = load i8, i8* %AL
  %767 = zext i8 %766 to i64
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 2
  store i64 %769, i64* %PC
  %770 = and i64 1, %767
  %771 = trunc i64 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %772, align 1, !tbaa !2433
  %773 = trunc i64 %770 to i32
  %774 = and i32 %773, 255
  %775 = call i32 @llvm.ctpop.i32(i32 %774) #16
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = xor i8 %777, 1
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %778, i8* %779, align 1, !tbaa !2447
  %780 = icmp eq i8 %771, 0
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %781, i8* %782, align 1, !tbaa !2449
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %783, align 1, !tbaa !2450
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %784, align 1, !tbaa !2451
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %785, align 1, !tbaa !2448
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 11
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 6
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 6
  store i64 %791, i64* %PC
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %793 = load i8, i8* %792, align 1, !tbaa !2449
  %794 = icmp eq i8 %793, 0
  %795 = zext i1 %794 to i8
  store i8 %795, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %797 = select i1 %794, i64 %787, i64 %789
  store i64 %797, i64* %796, align 8, !tbaa !2428
  %798 = load i8, i8* %BRANCH_TAKEN
  %799 = icmp eq i8 %798, 1
  br i1 %799, label %block_405bf7, label %block_405bf2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403d10__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403d10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 8
  %33 = load i64, i64* %RDI
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 16
  %39 = load i64, i64* %RSI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 8
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RSI, align 8, !tbaa !2428
  %49 = load i64, i64* %RSI
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 16
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RDI, align 8, !tbaa !2428
  %60 = load i64, i64* %RDI
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = load i64, i64* %RSI
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = sub i64 %65, %66
  store i64 %69, i64* %RSI, align 8, !tbaa !2428
  %70 = icmp ult i64 %65, %66
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2433
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2447
  %80 = xor i64 %66, %65
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2448
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2449
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2450
  %92 = lshr i64 %65, 63
  %93 = lshr i64 %66, 63
  %94 = xor i64 %93, %92
  %95 = xor i64 %89, %92
  %96 = add nuw nsw i64 %95, %94
  %97 = icmp eq i64 %96, 2
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %98, i8* %99, align 1, !tbaa !2451
  %100 = load i64, i64* %RSI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = ashr i64 %100, 2
  %104 = trunc i64 %103 to i8
  %105 = and i8 %104, 1
  %106 = ashr i64 %103, 1
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %105, i8* %107, align 1, !tbaa !2432
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = call i32 @llvm.ctpop.i32(i32 %110) #16
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %108, align 1, !tbaa !2432
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %115, align 1, !tbaa !2432
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %117 = icmp eq i64 %106, 0
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %116, align 1, !tbaa !2432
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %120 = lshr i64 %106, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %119, align 1, !tbaa !2432
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2432
  %123 = load i64, i64* %RSI
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  store i64 %123, i64* %RAX, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 1
  store i64 %127, i64* %PC
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %129 = load i64, i64* %128, align 8, !tbaa !2428
  %130 = add i64 %129, 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131
  store i64 %132, i64* %RBP, align 8, !tbaa !2428
  store i64 %130, i64* %128, align 8, !tbaa !2428
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 1
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %137 = load i64, i64* %136, align 8, !tbaa !2428
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  store i64 %139, i64* %135, align 8, !tbaa !2428
  %140 = add i64 %137, 8
  store i64 %140, i64* %136, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009f0___cxx_global_var_init_19(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%DVPe_type* @DVPe to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4586
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_405dd0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405dd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 112
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4030a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_4030d0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4045a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 48
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 48
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 48, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RSI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = load i64, i64* %RSI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RSI
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 24
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %RDI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %110 to i64*
  %114 = load i64, i64* %113
  store i64 %114, i64* %RSI, align 8, !tbaa !2428
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 56
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %122 = load i64, i64* %121, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %118, i64* %124
  store i64 %123, i64* %121, align 8, !tbaa !2428
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %116, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  %127 = call %struct.Memory* @sub_404600__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* %0, i64 %126, %struct.Memory* %2)
  %128 = load i8, i8* %AL
  %129 = zext i8 %128 to i64
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 2
  store i64 %131, i64* %PC
  %132 = and i64 1, %129
  %133 = trunc i64 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2433
  %135 = trunc i64 %132 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i8 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %145, align 1, !tbaa !2450
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %146, align 1, !tbaa !2451
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %147, align 1, !tbaa !2448
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 33
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 6
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %155 = load i8, i8* %154, align 1, !tbaa !2449
  %156 = icmp eq i8 %155, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = select i1 %156, i64 %149, i64 %151
  store i64 %159, i64* %158, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_4045f0, label %block_4045d5

block_4045d5:                                     ; preds = %block_4045a0
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 10
  store i64 %163, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 7
  store i64 %165, i64* %PC
  %166 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %167 = zext i32 %166 to i64
  store i64 %167, i64* %RSI, align 8, !tbaa !2428
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 2
  store i64 %169, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %170 = load i64, i64* %PC
  %171 = sub i64 %170, 16120
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 5
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 5
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %173, i64* %179
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %171, i64* %180, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %181, %struct.Memory* %127)
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 36
  %185 = load i32, i32* %EAX
  %186 = zext i32 %185 to i64
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %184 to i32*
  store i32 %185, i32* %189
  br label %block_4045f0

block_4045f0:                                     ; preds = %block_4045d5, %block_4045a0
  %MEMORY.0 = phi %struct.Memory* [ %127, %block_4045a0 ], [ %182, %block_4045d5 ]
  %190 = load i64, i64* %RSP
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = add i64 48, %190
  store i64 %193, i64* %RSP, align 8, !tbaa !2428
  %194 = icmp ult i64 %193, %190
  %195 = icmp ult i64 %193, 48
  %196 = or i1 %194, %195
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %197, i8* %198, align 1, !tbaa !2433
  %199 = trunc i64 %193 to i32
  %200 = and i32 %199, 255
  %201 = call i32 @llvm.ctpop.i32(i32 %200) #16
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, 1
  %204 = xor i8 %203, 1
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %204, i8* %205, align 1, !tbaa !2447
  %206 = xor i64 48, %190
  %207 = xor i64 %206, %193
  %208 = lshr i64 %207, 4
  %209 = trunc i64 %208 to i8
  %210 = and i8 %209, 1
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %210, i8* %211, align 1, !tbaa !2448
  %212 = icmp eq i64 %193, 0
  %213 = zext i1 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %213, i8* %214, align 1, !tbaa !2449
  %215 = lshr i64 %193, 63
  %216 = trunc i64 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %216, i8* %217, align 1, !tbaa !2450
  %218 = lshr i64 %190, 63
  %219 = xor i64 %215, %218
  %220 = add nuw nsw i64 %219, %215
  %221 = icmp eq i64 %220, 2
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %222, i8* %223, align 1, !tbaa !2451
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 1
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %227 = load i64, i64* %226, align 8, !tbaa !2428
  %228 = add i64 %227, 8
  %229 = inttoptr i64 %227 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RBP, align 8, !tbaa !2428
  store i64 %228, i64* %226, align 8, !tbaa !2428
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 1
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %235 = load i64, i64* %234, align 8, !tbaa !2428
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %233, align 8, !tbaa !2428
  %238 = add i64 %235, 8
  store i64 %238, i64* %234, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_404050__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404050:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = load i64, i64* %RBP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 1
  store i64 %34, i64* %PC
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %36 = load i64, i64* %35, align 8, !tbaa !2428
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %32, i64* %38
  store i64 %37, i64* %35, align 8, !tbaa !2428
  %39 = load i64, i64* %RSP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 3
  store i64 %41, i64* %PC
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC
  %45 = sub i64 %42, 64
  store i64 %45, i64* %RSP, align 8, !tbaa !2428
  %46 = icmp ult i64 %42, 64
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %47, i8* %48, align 1, !tbaa !2433
  %49 = trunc i64 %45 to i32
  %50 = and i32 %49, 255
  %51 = call i32 @llvm.ctpop.i32(i32 %50) #16
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = xor i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = xor i64 64, %42
  %57 = xor i64 %56, %45
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = icmp eq i64 %45, 0
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = lshr i64 %45, 63
  %66 = trunc i64 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = lshr i64 %42, 63
  %69 = xor i64 %65, %68
  %70 = add nuw nsw i64 %69, %68
  %71 = icmp eq i64 %70, 2
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %72, i8* %73, align 1, !tbaa !2451
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 5
  store i64 %75, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %76 = load i32, i32* %EAX
  %77 = zext i32 %76 to i64
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 2
  store i64 %79, i64* %PC
  %80 = and i64 %77, 4294967295
  store i64 %80, i64* %RCX, align 8, !tbaa !2428
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 8
  %83 = load i64, i64* %RDI
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %86
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 16
  %89 = load i64, i64* %RSI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %RSI, align 8, !tbaa !2428
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 8
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RSI
  %106 = load i64, i64* %RDI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  %109 = sub i64 %105, %106
  store i64 %109, i64* %RSI, align 8, !tbaa !2428
  %110 = icmp ult i64 %105, %106
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %111, i8* %112, align 1, !tbaa !2433
  %113 = trunc i64 %109 to i32
  %114 = and i32 %113, 255
  %115 = call i32 @llvm.ctpop.i32(i32 %114) #16
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %118, i8* %119, align 1, !tbaa !2447
  %120 = xor i64 %106, %105
  %121 = xor i64 %120, %109
  %122 = lshr i64 %121, 4
  %123 = trunc i64 %122 to i8
  %124 = and i8 %123, 1
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %124, i8* %125, align 1, !tbaa !2448
  %126 = icmp eq i64 %109, 0
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %127, i8* %128, align 1, !tbaa !2449
  %129 = lshr i64 %109, 63
  %130 = trunc i64 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = lshr i64 %105, 63
  %133 = lshr i64 %106, 63
  %134 = xor i64 %133, %132
  %135 = xor i64 %129, %132
  %136 = add nuw nsw i64 %135, %134
  %137 = icmp eq i64 %136, 2
  %138 = zext i1 %137 to i8
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %138, i8* %139, align 1, !tbaa !2451
  %140 = load i64, i64* %RSI
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = ashr i64 %140, 2
  %144 = trunc i64 %143 to i8
  %145 = and i8 %144, 1
  %146 = ashr i64 %143, 1
  store i64 %146, i64* %RSI, align 8, !tbaa !2428
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %145, i8* %147, align 1, !tbaa !2432
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %149 = trunc i64 %146 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  store i8 %154, i8* %148, align 1, !tbaa !2432
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %155, align 1, !tbaa !2432
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = icmp eq i64 %146, 0
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %156, align 1, !tbaa !2432
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %160 = lshr i64 %146, 63
  %161 = trunc i64 %160 to i8
  store i8 %161, i8* %159, align 1, !tbaa !2432
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %162, align 1, !tbaa !2432
  %163 = load i64, i64* %RBP
  %164 = sub i64 %163, 32
  %165 = load i64, i64* %RSI
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %164 to i64*
  store i64 %165, i64* %168
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 32
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 2
  store i64 %176, i64* %PC
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %179 = load i64, i64* %178, align 8, !tbaa !2428
  %180 = ashr i64 %179, 63
  store i64 %180, i64* %177, align 8, !tbaa !2428
  %181 = load i64, i64* %RCX
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %187 = load i64, i64* %186, align 8, !tbaa !2428
  %188 = sext i64 %181 to i128
  %189 = and i128 %188, -18446744073709551616
  %190 = zext i64 %187 to i128
  %191 = shl nuw i128 %190, 64
  %192 = zext i64 %185 to i128
  %193 = or i128 %191, %192
  %194 = zext i64 %181 to i128
  %195 = or i128 %189, %194
  %196 = sdiv i128 %193, %195
  %197 = trunc i128 %196 to i64
  %198 = and i128 %196, 18446744073709551615
  %199 = sext i64 %197 to i128
  %200 = and i128 %199, -18446744073709551616
  %201 = or i128 %200, %198
  %202 = icmp eq i128 %196, %201
  br i1 %202, label %207, label %203

; <label>:203:                                    ; preds = %block_404050
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %205 = load i64, i64* %204, align 8, !tbaa !2428
  %206 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %205, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:207:                                    ; preds = %block_404050
  %208 = srem i128 %193, %195
  %209 = trunc i128 %208 to i64
  store i64 %197, i64* %184, align 8, !tbaa !2428
  store i64 %209, i64* %186, align 8, !tbaa !2428
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %210, align 1, !tbaa !2433
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %211, align 1, !tbaa !2447
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %212, align 1, !tbaa !2448
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %213, align 1, !tbaa !2449
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %214, align 1, !tbaa !2450
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %215, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %203, %207
  %216 = phi %struct.Memory* [ %206, %203 ], [ %2, %207 ]
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC
  %220 = sub i64 %217, 1
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp ult i64 %217, 1
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %222, i8* %223, align 1, !tbaa !2433
  %224 = trunc i64 %220 to i32
  %225 = and i32 %224, 255
  %226 = call i32 @llvm.ctpop.i32(i32 %225) #16
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %229, i8* %230, align 1, !tbaa !2447
  %231 = xor i64 1, %217
  %232 = xor i64 %231, %220
  %233 = lshr i64 %232, 4
  %234 = trunc i64 %233 to i8
  %235 = and i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %235, i8* %236, align 1, !tbaa !2448
  %237 = icmp eq i64 %220, 0
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %238, i8* %239, align 1, !tbaa !2449
  %240 = lshr i64 %220, 63
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %241, i8* %242, align 1, !tbaa !2450
  %243 = lshr i64 %217, 63
  %244 = xor i64 %240, %243
  %245 = add nuw nsw i64 %244, %243
  %246 = icmp eq i64 %245, 2
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %247, i8* %248, align 1, !tbaa !2451
  %249 = load i64, i64* %RBP
  %250 = sub i64 %249, 24
  %251 = load i64, i64* %RAX
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %254
  br label %block_40408b

block_40413e:                                     ; preds = %block_4040e1
  %255 = load i64, i64* %RSP
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  %258 = add i64 64, %255
  store i64 %258, i64* %RSP, align 8, !tbaa !2428
  %259 = icmp ult i64 %258, %255
  %260 = icmp ult i64 %258, 64
  %261 = or i1 %259, %260
  %262 = zext i1 %261 to i8
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %262, i8* %263, align 1, !tbaa !2433
  %264 = trunc i64 %258 to i32
  %265 = and i32 %264, 255
  %266 = call i32 @llvm.ctpop.i32(i32 %265) #16
  %267 = trunc i32 %266 to i8
  %268 = and i8 %267, 1
  %269 = xor i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = xor i64 64, %255
  %272 = xor i64 %271, %258
  %273 = lshr i64 %272, 4
  %274 = trunc i64 %273 to i8
  %275 = and i8 %274, 1
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %275, i8* %276, align 1, !tbaa !2448
  %277 = icmp eq i64 %258, 0
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %278, i8* %279, align 1, !tbaa !2449
  %280 = lshr i64 %258, 63
  %281 = trunc i64 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %281, i8* %282, align 1, !tbaa !2450
  %283 = lshr i64 %255, 63
  %284 = xor i64 %280, %283
  %285 = add nuw nsw i64 %284, %280
  %286 = icmp eq i64 %285, 2
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %287, i8* %288, align 1, !tbaa !2451
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 1
  store i64 %290, i64* %PC
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %292 = load i64, i64* %291, align 8, !tbaa !2428
  %293 = add i64 %292, 8
  %294 = inttoptr i64 %292 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %RBP, align 8, !tbaa !2428
  store i64 %293, i64* %291, align 8, !tbaa !2428
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 1
  store i64 %297, i64* %PC
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %300 = load i64, i64* %299, align 8, !tbaa !2428
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %298, align 8, !tbaa !2428
  %303 = add i64 %300, 8
  store i64 %303, i64* %299, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4040d5:                                     ; preds = %block_40408b
  %304 = sub i64 %522, 32
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i64*
  %308 = load i64, i64* %307
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = load i64, i64* %RAX
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC
  %312 = sub i64 %309, 1
  store i64 %312, i64* %RAX, align 8, !tbaa !2428
  %313 = icmp ult i64 %309, 1
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %314, i8* %315, align 1, !tbaa !2433
  %316 = trunc i64 %312 to i32
  %317 = and i32 %316, 255
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #16
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %321, i8* %322, align 1, !tbaa !2447
  %323 = xor i64 1, %309
  %324 = xor i64 %323, %312
  %325 = lshr i64 %324, 4
  %326 = trunc i64 %325 to i8
  %327 = and i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %327, i8* %328, align 1, !tbaa !2448
  %329 = icmp eq i64 %312, 0
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %330, i8* %331, align 1, !tbaa !2449
  %332 = lshr i64 %312, 63
  %333 = trunc i64 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %333, i8* %334, align 1, !tbaa !2450
  %335 = lshr i64 %309, 63
  %336 = xor i64 %332, %335
  %337 = add nuw nsw i64 %336, %335
  %338 = icmp eq i64 %337, 2
  %339 = zext i1 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %339, i8* %340, align 1, !tbaa !2451
  %341 = load i64, i64* %RBP
  %342 = sub i64 %341, 24
  %343 = load i64, i64* %RAX
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 4
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %342 to i64*
  store i64 %343, i64* %346
  br label %block_4040e1

block_404096:                                     ; preds = %block_40408b
  %347 = sub i64 %522, 8
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350
  store i64 %351, i64* %RAX, align 8, !tbaa !2428
  %352 = load i64, i64* %RBP
  %353 = sub i64 %352, 24
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 4
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %RCX, align 8, !tbaa !2428
  %358 = load i64, i64* %RAX
  %359 = load i64, i64* %RCX
  %360 = mul i64 %359, 8
  %361 = add i64 %360, %358
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 40
  %368 = load i64, i64* %RAX
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %367 to i64*
  store i64 %368, i64* %371
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 32
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %373 to i64*
  %377 = load i64, i64* %376
  store i64 %377, i64* %RDI, align 8, !tbaa !2428
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 8
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 4
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i64*
  %383 = load i64, i64* %382
  store i64 %383, i64* %RSI, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 24
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 4
  store i64 %387, i64* %PC
  %388 = inttoptr i64 %385 to i64*
  %389 = load i64, i64* %388
  store i64 %389, i64* %RDX, align 8, !tbaa !2428
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 40
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i64, i64* %RBP
  %397 = sub i64 %396, 48
  %398 = load i64, i64* %RAX
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %397 to i64*
  store i64 %398, i64* %401
  %402 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %403 = load i64, i64* %RBP
  %404 = sub i64 %403, 48
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 5
  store i64 %406, i64* %PC
  %407 = inttoptr i64 %404 to double*
  %408 = load double, double* %407
  %409 = bitcast i8* %402 to double*
  store double %408, double* %409, align 1, !tbaa !2452
  %410 = getelementptr inbounds i8, i8* %402, i64 8
  %411 = bitcast i8* %410 to double*
  store double 0.000000e+00, double* %411, align 1, !tbaa !2452
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 369
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 5
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 5
  store i64 %417, i64* %PC
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %419 = load i64, i64* %418, align 8, !tbaa !2428
  %420 = add i64 %419, -8
  %421 = inttoptr i64 %420 to i64*
  store i64 %415, i64* %421
  store i64 %420, i64* %418, align 8, !tbaa !2428
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %413, i64* %422, align 8, !tbaa !2428
  %423 = load i64, i64* %PC
  %424 = call %struct.Memory* @sub_404230__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* %0, i64 %423, %struct.Memory* %MEMORY.0)
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 24
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = load i64, i64* %RAX
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 4
  store i64 %433, i64* %PC
  %434 = add i64 -1, %431
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = icmp ult i64 %434, %431
  %436 = icmp ult i64 %434, -1
  %437 = or i1 %435, %436
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %438, i8* %439, align 1, !tbaa !2433
  %440 = trunc i64 %434 to i32
  %441 = and i32 %440, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2447
  %447 = xor i64 -1, %431
  %448 = xor i64 %447, %434
  %449 = lshr i64 %448, 4
  %450 = trunc i64 %449 to i8
  %451 = and i8 %450, 1
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %451, i8* %452, align 1, !tbaa !2448
  %453 = icmp eq i64 %434, 0
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %454, i8* %455, align 1, !tbaa !2449
  %456 = lshr i64 %434, 63
  %457 = trunc i64 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %457, i8* %458, align 1, !tbaa !2450
  %459 = lshr i64 %431, 63
  %460 = xor i64 %456, %459
  %461 = xor i64 %456, 1
  %462 = add nuw nsw i64 %460, %461
  %463 = icmp eq i64 %462, 2
  %464 = zext i1 %463 to i8
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %464, i8* %465, align 1, !tbaa !2451
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 24
  %468 = load i64, i64* %RAX
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %467 to i64*
  store i64 %468, i64* %471
  %472 = load i64, i64* %PC
  %473 = sub i64 %472, 69
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 5
  store i64 %475, i64* %PC
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %473, i64* %476, align 8, !tbaa !2428
  br label %block_40408b

block_40408b:                                     ; preds = %block_404096, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %216, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %424, %block_404096 ]
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 24
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 5
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %478 to i64*
  %482 = load i64, i64* %481
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %483, align 1, !tbaa !2433
  %484 = trunc i64 %482 to i32
  %485 = and i32 %484, 255
  %486 = call i32 @llvm.ctpop.i32(i32 %485) #16
  %487 = trunc i32 %486 to i8
  %488 = and i8 %487, 1
  %489 = xor i8 %488, 1
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %489, i8* %490, align 1, !tbaa !2447
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %491, align 1, !tbaa !2448
  %492 = icmp eq i64 %482, 0
  %493 = zext i1 %492 to i8
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %493, i8* %494, align 1, !tbaa !2449
  %495 = lshr i64 %482, 63
  %496 = trunc i64 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %496, i8* %497, align 1, !tbaa !2450
  %498 = lshr i64 %482, 63
  %499 = xor i64 %495, %498
  %500 = add nuw nsw i64 %499, %498
  %501 = icmp eq i64 %500, 2
  %502 = zext i1 %501 to i8
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %502, i8* %503, align 1, !tbaa !2451
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 69
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 6
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 6
  store i64 %509, i64* %PC
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %511 = load i8, i8* %510, align 1, !tbaa !2450
  %512 = icmp ne i8 %511, 0
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %514 = load i8, i8* %513, align 1, !tbaa !2451
  %515 = icmp ne i8 %514, 0
  %516 = xor i1 %512, %515
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %519 = select i1 %516, i64 %505, i64 %507
  store i64 %519, i64* %518, align 8, !tbaa !2428
  %520 = load i8, i8* %BRANCH_TAKEN
  %521 = icmp eq i8 %520, 1
  %522 = load i64, i64* %RBP
  br i1 %521, label %block_4040d5, label %block_404096

block_4040ec:                                     ; preds = %block_4040e1
  %523 = load i64, i64* %RAX
  %524 = load i32, i32* %EAX
  %525 = zext i32 %524 to i64
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 2
  store i64 %527, i64* %PC
  %528 = xor i64 %525, %523
  %529 = trunc i64 %528 to i32
  %530 = and i64 %528, 4294967295
  store i64 %530, i64* %RAX, align 8, !tbaa !2428
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %531, align 1, !tbaa !2433
  %532 = and i32 %529, 255
  %533 = call i32 @llvm.ctpop.i32(i32 %532) #16
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  %536 = xor i8 %535, 1
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %536, i8* %537, align 1, !tbaa !2447
  %538 = icmp eq i32 %529, 0
  %539 = zext i1 %538 to i8
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %539, i8* %540, align 1, !tbaa !2449
  %541 = lshr i32 %529, 31
  %542 = trunc i32 %541 to i8
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %542, i8* %543, align 1, !tbaa !2450
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %544, align 1, !tbaa !2451
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %545, align 1, !tbaa !2448
  %546 = load i32, i32* %EAX
  %547 = zext i32 %546 to i64
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 2
  store i64 %549, i64* %PC
  %550 = and i64 %547, 4294967295
  store i64 %550, i64* %RDX, align 8, !tbaa !2428
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 8
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 4
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %552 to i64*
  %556 = load i64, i64* %555
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = load i64, i64* %RBP
  %558 = sub i64 %557, 24
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561
  store i64 %562, i64* %RSI, align 8, !tbaa !2428
  %563 = load i64, i64* %RCX
  %564 = load i64, i64* %RSI
  %565 = mul i64 %564, 8
  %566 = add i64 %565, %563
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = inttoptr i64 %566 to i64*
  %570 = load i64, i64* %569
  store i64 %570, i64* %RCX, align 8, !tbaa !2428
  %571 = load i64, i64* %RBP
  %572 = sub i64 %571, 56
  %573 = load i64, i64* %RCX
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 4
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %572 to i64*
  store i64 %573, i64* %576
  %577 = load i64, i64* %RBP
  %578 = sub i64 %577, 8
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %578 to i64*
  %582 = load i64, i64* %581
  store i64 %582, i64* %RCX, align 8, !tbaa !2428
  %583 = load i64, i64* %RBP
  %584 = sub i64 %583, 8
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 4
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %584 to i64*
  %588 = load i64, i64* %587
  store i64 %588, i64* %RSI, align 8, !tbaa !2428
  %589 = load i64, i64* %RBP
  %590 = sub i64 %589, 24
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 4
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i64*
  %594 = load i64, i64* %593
  store i64 %594, i64* %RDI, align 8, !tbaa !2428
  %595 = load i64, i64* %RCX
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 3
  store i64 %597, i64* %PC
  %598 = inttoptr i64 %595 to i64*
  %599 = load i64, i64* %598
  store i64 %599, i64* %RCX, align 8, !tbaa !2428
  %600 = load i64, i64* %RSI
  %601 = load i64, i64* %RDI
  %602 = mul i64 %601, 8
  %603 = add i64 %602, %600
  %604 = load i64, i64* %RCX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 4
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %603 to i64*
  store i64 %604, i64* %607
  %608 = load i64, i64* %RBP
  %609 = sub i64 %608, 24
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC
  %612 = inttoptr i64 %609 to i64*
  %613 = load i64, i64* %612
  store i64 %613, i64* %RDI, align 8, !tbaa !2428
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 8
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 4
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i64*
  %619 = load i64, i64* %618
  store i64 %619, i64* %RSI, align 8, !tbaa !2428
  %620 = load i64, i64* %RBP
  %621 = sub i64 %620, 56
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 4
  store i64 %623, i64* %PC
  %624 = inttoptr i64 %621 to i64*
  %625 = load i64, i64* %624
  store i64 %625, i64* %RCX, align 8, !tbaa !2428
  %626 = load i64, i64* %RBP
  %627 = sub i64 %626, 64
  %628 = load i64, i64* %RCX
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 4
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %627 to i64*
  store i64 %628, i64* %631
  %632 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 64
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 5
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to double*
  %638 = load double, double* %637
  %639 = bitcast i8* %632 to double*
  store double %638, double* %639, align 1, !tbaa !2452
  %640 = getelementptr inbounds i8, i8* %632, i64 8
  %641 = bitcast i8* %640 to double*
  store double 0.000000e+00, double* %641, align 1, !tbaa !2452
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 264
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 5
  store i64 %647, i64* %PC
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %649 = load i64, i64* %648, align 8, !tbaa !2428
  %650 = add i64 %649, -8
  %651 = inttoptr i64 %650 to i64*
  store i64 %645, i64* %651
  store i64 %650, i64* %648, align 8, !tbaa !2428
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %643, i64* %652, align 8, !tbaa !2428
  %653 = load i64, i64* %PC
  %654 = call %struct.Memory* @sub_404230__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* %0, i64 %653, %struct.Memory* %MEMORY.1)
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 24
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %656 to i64*
  %660 = load i64, i64* %659
  store i64 %660, i64* %RAX, align 8, !tbaa !2428
  %661 = load i64, i64* %RAX
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 4
  store i64 %663, i64* %PC
  %664 = add i64 -1, %661
  store i64 %664, i64* %RAX, align 8, !tbaa !2428
  %665 = icmp ult i64 %664, %661
  %666 = icmp ult i64 %664, -1
  %667 = or i1 %665, %666
  %668 = zext i1 %667 to i8
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %668, i8* %669, align 1, !tbaa !2433
  %670 = trunc i64 %664 to i32
  %671 = and i32 %670, 255
  %672 = call i32 @llvm.ctpop.i32(i32 %671) #16
  %673 = trunc i32 %672 to i8
  %674 = and i8 %673, 1
  %675 = xor i8 %674, 1
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %675, i8* %676, align 1, !tbaa !2447
  %677 = xor i64 -1, %661
  %678 = xor i64 %677, %664
  %679 = lshr i64 %678, 4
  %680 = trunc i64 %679 to i8
  %681 = and i8 %680, 1
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %681, i8* %682, align 1, !tbaa !2448
  %683 = icmp eq i64 %664, 0
  %684 = zext i1 %683 to i8
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %684, i8* %685, align 1, !tbaa !2449
  %686 = lshr i64 %664, 63
  %687 = trunc i64 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %687, i8* %688, align 1, !tbaa !2450
  %689 = lshr i64 %661, 63
  %690 = xor i64 %686, %689
  %691 = xor i64 %686, 1
  %692 = add nuw nsw i64 %690, %691
  %693 = icmp eq i64 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2451
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 24
  %698 = load i64, i64* %RAX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %PC
  %703 = sub i64 %702, 88
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 5
  store i64 %705, i64* %PC
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %703, i64* %706, align 8, !tbaa !2428
  br label %block_4040e1

block_4040e1:                                     ; preds = %block_4040ec, %block_4040d5
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4040d5 ], [ %654, %block_4040ec ]
  %707 = load i64, i64* %RBP
  %708 = sub i64 %707, 24
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  store i64 %710, i64* %PC
  %711 = inttoptr i64 %708 to i64*
  %712 = load i64, i64* %711
  %713 = sub i64 %712, 1
  %714 = icmp ult i64 %712, 1
  %715 = zext i1 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %715, i8* %716, align 1, !tbaa !2433
  %717 = trunc i64 %713 to i32
  %718 = and i32 %717, 255
  %719 = call i32 @llvm.ctpop.i32(i32 %718) #16
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  %722 = xor i8 %721, 1
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %722, i8* %723, align 1, !tbaa !2447
  %724 = xor i64 %712, 1
  %725 = xor i64 %724, %713
  %726 = lshr i64 %725, 4
  %727 = trunc i64 %726 to i8
  %728 = and i8 %727, 1
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %728, i8* %729, align 1, !tbaa !2448
  %730 = icmp eq i64 %713, 0
  %731 = zext i1 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %731, i8* %732, align 1, !tbaa !2449
  %733 = lshr i64 %713, 63
  %734 = trunc i64 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %734, i8* %735, align 1, !tbaa !2450
  %736 = lshr i64 %712, 63
  %737 = xor i64 %733, %736
  %738 = add nuw nsw i64 %737, %736
  %739 = icmp eq i64 %738, 2
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %740, i8* %741, align 1, !tbaa !2451
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 88
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 6
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 6
  store i64 %747, i64* %PC
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %749 = load i8, i8* %748, align 1, !tbaa !2450
  %750 = icmp ne i8 %749, 0
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %752 = load i8, i8* %751, align 1, !tbaa !2451
  %753 = icmp ne i8 %752, 0
  %754 = xor i1 %750, %753
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %757 = select i1 %754, i64 %743, i64 %745
  store i64 %757, i64* %756, align 8, !tbaa !2428
  %758 = load i8, i8* %BRANCH_TAKEN
  %759 = icmp eq i8 %758, 1
  br i1 %759, label %block_40413e, label %block_4040ec
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405e70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401cb0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_402680__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402680:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_4026a8

block_402729:                                     ; preds = %block_4026a8
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4026b8:                                     ; preds = %block_4026a8
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 7428
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 11575
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 7818
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_4026a8

block_4026a8:                                     ; preds = %block_4026b8, %block_402680
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402680 ], [ %333, %block_4026b8 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_402729, label %block_4026b8
}

; Function Attrs: noinline
define %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403590:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %RDI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 16
  %45 = load i64, i64* %RSI
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 24
  %51 = load i64, i64* %RDX
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54
  br label %block_4035a0

block_4035d7:                                     ; preds = %block_4035a0
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %66 = load i64, i64* %65, align 8, !tbaa !2428
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %64, align 8, !tbaa !2428
  %69 = add i64 %66, 8
  store i64 %69, i64* %65, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4035a0:                                     ; preds = %block_4035ae, %block_403590
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_403590 ], [ %MEMORY.0, %block_4035ae ]
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 8
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = load i64, i64* %RAX
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 16
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81
  %83 = sub i64 %76, %82
  %84 = icmp ugt i64 %82, %76
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %85, i8* %86, align 1, !tbaa !2433
  %87 = trunc i64 %83 to i32
  %88 = and i32 %87, 255
  %89 = call i32 @llvm.ctpop.i32(i32 %88) #16
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = xor i8 %91, 1
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %92, i8* %93, align 1, !tbaa !2447
  %94 = xor i64 %82, %76
  %95 = xor i64 %94, %83
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %98, i8* %99, align 1, !tbaa !2448
  %100 = icmp eq i64 %83, 0
  %101 = zext i1 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %101, i8* %102, align 1, !tbaa !2449
  %103 = lshr i64 %83, 63
  %104 = trunc i64 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %104, i8* %105, align 1, !tbaa !2450
  %106 = lshr i64 %76, 63
  %107 = lshr i64 %82, 63
  %108 = xor i64 %107, %106
  %109 = xor i64 %103, %106
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %112, i8* %113, align 1, !tbaa !2451
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 47
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 6
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 6
  store i64 %119, i64* %PC
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %121 = load i8, i8* %120, align 1, !tbaa !2449
  store i8 %121, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %123 = icmp ne i8 %121, 0
  %124 = select i1 %123, i64 %115, i64 %117
  store i64 %124, i64* %122, align 8, !tbaa !2428
  %125 = load i8, i8* %BRANCH_TAKEN
  %126 = icmp eq i8 %125, 1
  br i1 %126, label %block_4035d7, label %block_4035ae

block_4035ae:                                     ; preds = %block_4035a0
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 8
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i64*
  %132 = load i64, i64* %131
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %RAX
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  store i64 %133, i64* %RCX, align 8, !tbaa !2428
  %136 = load i64, i64* %RCX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = add i64 8, %136
  store i64 %139, i64* %RCX, align 8, !tbaa !2428
  %140 = icmp ult i64 %139, %136
  %141 = icmp ult i64 %139, 8
  %142 = or i1 %140, %141
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %143, i8* %144, align 1, !tbaa !2433
  %145 = trunc i64 %139 to i32
  %146 = and i32 %145, 255
  %147 = call i32 @llvm.ctpop.i32(i32 %146) #16
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %150, i8* %151, align 1, !tbaa !2447
  %152 = xor i64 8, %136
  %153 = xor i64 %152, %139
  %154 = lshr i64 %153, 4
  %155 = trunc i64 %154 to i8
  %156 = and i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %156, i8* %157, align 1, !tbaa !2448
  %158 = icmp eq i64 %139, 0
  %159 = zext i1 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %159, i8* %160, align 1, !tbaa !2449
  %161 = lshr i64 %139, 63
  %162 = trunc i64 %161 to i8
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %162, i8* %163, align 1, !tbaa !2450
  %164 = lshr i64 %136, 63
  %165 = xor i64 %161, %164
  %166 = add nuw nsw i64 %165, %161
  %167 = icmp eq i64 %166, 2
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %168, i8* %169, align 1, !tbaa !2451
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 8
  %172 = load i64, i64* %RCX
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 24
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i64*
  %181 = load i64, i64* %180
  store i64 %181, i64* %RCX, align 8, !tbaa !2428
  %182 = load i64, i64* %RCX
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 3
  store i64 %184, i64* %PC
  store i64 %182, i64* %RDX, align 8, !tbaa !2428
  %185 = load i64, i64* %RDX
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 4
  store i64 %187, i64* %PC
  %188 = add i64 8, %185
  store i64 %188, i64* %RDX, align 8, !tbaa !2428
  %189 = icmp ult i64 %188, %185
  %190 = icmp ult i64 %188, 8
  %191 = or i1 %189, %190
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %192, i8* %193, align 1, !tbaa !2433
  %194 = trunc i64 %188 to i32
  %195 = and i32 %194, 255
  %196 = call i32 @llvm.ctpop.i32(i32 %195) #16
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %199, i8* %200, align 1, !tbaa !2447
  %201 = xor i64 8, %185
  %202 = xor i64 %201, %188
  %203 = lshr i64 %202, 4
  %204 = trunc i64 %203 to i8
  %205 = and i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %205, i8* %206, align 1, !tbaa !2448
  %207 = icmp eq i64 %188, 0
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %208, i8* %209, align 1, !tbaa !2449
  %210 = lshr i64 %188, 63
  %211 = trunc i64 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %211, i8* %212, align 1, !tbaa !2450
  %213 = lshr i64 %185, 63
  %214 = xor i64 %210, %213
  %215 = add nuw nsw i64 %214, %210
  %216 = icmp eq i64 %215, 2
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %217, i8* %218, align 1, !tbaa !2451
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 24
  %221 = load i64, i64* %RDX
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 4
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %220 to i64*
  store i64 %221, i64* %224
  %225 = load i64, i64* %RAX
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 3
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RCX
  %231 = load i64, i64* %RAX
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %230 to i64*
  store i64 %231, i64* %234
  %235 = load i64, i64* %PC
  %236 = sub i64 %235, 50
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %236, i64* %239, align 8, !tbaa !2428
  br label %block_4035a0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400890___cxx_global_var_init_12(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400890:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 10
  store i64 %61, i64* %PC
  store i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 8
  %64 = load i64, i64* %RAX
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %63 to i64*
  store i64 %64, i64* %67
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %69, i64* %72, align 8, !tbaa !2428
  br label %block_4008ab

block_4008ab:                                     ; preds = %block_4008ab, %block_400890
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400890 ], [ %100, %block_4008ab ]
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RAX
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5274
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* %0, i64 %99, %struct.Memory* %MEMORY.0)
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 10
  store i64 %102, i64* %PC
  store i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 6
  store i64 %105, i64* %PC
  %106 = add i64 16000, %103
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = icmp ult i64 %106, %103
  %108 = icmp ult i64 %106, 16000
  %109 = or i1 %107, %108
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %110, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %106 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = xor i64 16000, %103
  %120 = xor i64 %119, %106
  %121 = lshr i64 %120, 4
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %123, i8* %124, align 1, !tbaa !2448
  %125 = icmp eq i64 %106, 0
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %126, i8* %127, align 1, !tbaa !2449
  %128 = lshr i64 %106, 63
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %129, i8* %130, align 1, !tbaa !2450
  %131 = lshr i64 %103, 63
  %132 = xor i64 %128, %131
  %133 = add nuw nsw i64 %132, %128
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %135, i8* %136, align 1, !tbaa !2451
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %RDI
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = add i64 8, %143
  store i64 %146, i64* %RDI, align 8, !tbaa !2428
  %147 = icmp ult i64 %146, %143
  %148 = icmp ult i64 %146, 8
  %149 = or i1 %147, %148
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %150, i8* %151, align 1, !tbaa !2433
  %152 = trunc i64 %146 to i32
  %153 = and i32 %152, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2447
  %159 = xor i64 8, %143
  %160 = xor i64 %159, %146
  %161 = lshr i64 %160, 4
  %162 = trunc i64 %161 to i8
  %163 = and i8 %162, 1
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %163, i8* %164, align 1, !tbaa !2448
  %165 = icmp eq i64 %146, 0
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %166, i8* %167, align 1, !tbaa !2449
  %168 = lshr i64 %146, 63
  %169 = trunc i64 %168 to i8
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %169, i8* %170, align 1, !tbaa !2450
  %171 = lshr i64 %143, 63
  %172 = xor i64 %168, %171
  %173 = add nuw nsw i64 %172, %168
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %175, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %RDI
  %178 = load i64, i64* %RAX
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 3
  store i64 %180, i64* %PC
  %181 = sub i64 %177, %178
  %182 = icmp ult i64 %177, %178
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %183, i8* %184, align 1, !tbaa !2433
  %185 = trunc i64 %181 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %190, i8* %191, align 1, !tbaa !2447
  %192 = xor i64 %178, %177
  %193 = xor i64 %192, %181
  %194 = lshr i64 %193, 4
  %195 = trunc i64 %194 to i8
  %196 = and i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %196, i8* %197, align 1, !tbaa !2448
  %198 = icmp eq i64 %181, 0
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %199, i8* %200, align 1, !tbaa !2449
  %201 = lshr i64 %181, 63
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %202, i8* %203, align 1, !tbaa !2450
  %204 = lshr i64 %177, 63
  %205 = lshr i64 %178, 63
  %206 = xor i64 %205, %204
  %207 = xor i64 %201, %204
  %208 = add nuw nsw i64 %207, %206
  %209 = icmp eq i64 %208, 2
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %210, i8* %211, align 1, !tbaa !2451
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 8
  %214 = load i64, i64* %RDI
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 47
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 6
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %225 = load i8, i8* %224, align 1, !tbaa !2449
  %226 = icmp eq i8 %225, 0
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = select i1 %226, i64 %219, i64 %221
  store i64 %229, i64* %228, align 8, !tbaa !2428
  %230 = load i8, i8* %BRANCH_TAKEN
  %231 = icmp eq i8 %230, 1
  br i1 %231, label %block_4008ab, label %block_4008e0

block_4008e0:                                     ; preds = %block_4008ab
  %232 = load i64, i64* %RSP
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = add i64 16, %232
  store i64 %235, i64* %RSP, align 8, !tbaa !2428
  %236 = icmp ult i64 %235, %232
  %237 = icmp ult i64 %235, 16
  %238 = or i1 %236, %237
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %239, i8* %240, align 1, !tbaa !2433
  %241 = trunc i64 %235 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2447
  %248 = xor i64 16, %232
  %249 = xor i64 %248, %235
  %250 = lshr i64 %249, 4
  %251 = trunc i64 %250 to i8
  %252 = and i8 %251, 1
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %252, i8* %253, align 1, !tbaa !2448
  %254 = icmp eq i64 %235, 0
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %255, i8* %256, align 1, !tbaa !2449
  %257 = lshr i64 %235, 63
  %258 = trunc i64 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %258, i8* %259, align 1, !tbaa !2450
  %260 = lshr i64 %232, 63
  %261 = xor i64 %257, %260
  %262 = add nuw nsw i64 %261, %257
  %263 = icmp eq i64 %262, 2
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %264, i8* %265, align 1, !tbaa !2451
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 1
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271
  store i64 %272, i64* %RBP, align 8, !tbaa !2428
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 1
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %277 = load i64, i64* %276, align 8, !tbaa !2428
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  store i64 %279, i64* %275, align 8, !tbaa !2428
  %280 = add i64 %277, 8
  store i64 %280, i64* %276, align 8, !tbaa !2428
  ret %struct.Memory* %100
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d10__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401d30__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_404600__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404600:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ECX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ESI = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 9
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 15
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RBP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %35 to %"class.std::bitset"*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 64
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 64
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2433
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = xor i64 64, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2448
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2449
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2450
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2451
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 16
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %88 = load i64, i64* %RCX
  %89 = load i32, i32* %ECX
  %90 = zext i32 %89 to i64
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = xor i64 %90, %88
  %94 = trunc i64 %93 to i32
  %95 = and i64 %93, 4294967295
  store i64 %95, i64* %RCX, align 8, !tbaa !2428
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %96, align 1, !tbaa !2433
  %97 = and i32 %94, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2447
  %103 = icmp eq i32 %94, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2449
  %106 = lshr i32 %94, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2450
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %109, align 1, !tbaa !2451
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %110, align 1, !tbaa !2448
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 16
  %113 = load i64, i64* %RDI
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %112 to i64*
  store i64 %113, i64* %116
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 24
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 16
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RSI, align 8, !tbaa !2428
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 32
  %131 = load i64, i64* %RSI
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RAX
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 3
  store i64 %137, i64* %PC
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %138 = load i32, i32* %ECX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 2
  store i64 %141, i64* %PC
  %142 = and i64 %139, 4294967295
  store i64 %142, i64* %RSI, align 8, !tbaa !2428
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 157
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %150 = load i64, i64* %149, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %146, i64* %152
  store i64 %151, i64* %149, align 8, !tbaa !2428
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %153, align 8, !tbaa !2428
  %154 = load i64, i64* %PC
  %155 = call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %154, %struct.Memory* %2)
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 40
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %157 to i64*
  store i64 %158, i64* %161
  br label %block_40462c

block_404692:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %162 = load i64, i64* %RBP
  %163 = sub i64 %162, 1
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %163 to i8*
  store i8 0, i8* %166
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 14
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 5
  store i64 %170, i64* %PC
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %168, i64* %171, align 8, !tbaa !2428
  br label %block_4046a4

block_404646:                                     ; preds = %block_40462c
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 16
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC
  store i64 %173, i64* %RDI, align 8, !tbaa !2428
  %176 = load i64, i64* %RSI
  %177 = load i32, i32* %ESI
  %178 = zext i32 %177 to i64
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  store i64 %180, i64* %PC
  %181 = xor i64 %178, %176
  %182 = trunc i64 %181 to i32
  %183 = and i64 %181, 4294967295
  store i64 %183, i64* %RSI, align 8, !tbaa !2428
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %184, align 1, !tbaa !2433
  %185 = and i32 %182, 255
  %186 = call i32 @llvm.ctpop.i32(i32 %185) #16
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  %189 = xor i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %189, i8* %190, align 1, !tbaa !2447
  %191 = icmp eq i32 %182, 0
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %192, i8* %193, align 1, !tbaa !2449
  %194 = lshr i32 %182, 31
  %195 = trunc i32 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %195, i8* %196, align 1, !tbaa !2450
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %197, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %198, align 1, !tbaa !2448
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 116
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %210, %struct.Memory* %505)
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 48
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 4
  store i64 %215, i64* %PC
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 48
  %218 = load i64, i64* %RAX
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 215
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 5
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %225, i64* %231
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %232, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %233, %struct.Memory* %211)
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 32
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 4
  store i64 %238, i64* %PC
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %239 = load i64, i64* %RSI
  %240 = load i32, i32* %ESI
  %241 = zext i32 %240 to i64
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 2
  store i64 %243, i64* %PC
  %244 = xor i64 %241, %239
  %245 = trunc i64 %244 to i32
  %246 = and i64 %244, 4294967295
  store i64 %246, i64* %RSI, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %247, align 1, !tbaa !2433
  %248 = and i32 %245, 255
  %249 = call i32 @llvm.ctpop.i32(i32 %248) #16
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = xor i8 %251, 1
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %252, i8* %253, align 1, !tbaa !2447
  %254 = icmp eq i32 %245, 0
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %255, i8* %256, align 1, !tbaa !2449
  %257 = lshr i32 %245, 31
  %258 = trunc i32 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %258, i8* %259, align 1, !tbaa !2450
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %260, align 1, !tbaa !2451
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %261, align 1, !tbaa !2448
  %262 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %263 = load i64, i64* %RAX
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 4
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to double*
  %267 = load double, double* %266
  %268 = bitcast i8* %262 to double*
  store double %267, double* %268, align 1, !tbaa !2452
  %269 = getelementptr inbounds i8, i8* %262, i64 8
  %270 = bitcast i8* %269 to double*
  store double 0.000000e+00, double* %270, align 1, !tbaa !2452
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 64
  %273 = bitcast %union.vec128_t* %XMM0 to i8*
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  store i64 %275, i64* %PC
  %276 = bitcast i8* %273 to double*
  %277 = load double, double* %276, align 1
  %278 = inttoptr i64 %272 to double*
  store double %277, double* %278
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 83
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 5
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 5
  store i64 %284, i64* %PC
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %286 = load i64, i64* %285, align 8, !tbaa !2428
  %287 = add i64 %286, -8
  %288 = inttoptr i64 %287 to i64*
  store i64 %282, i64* %288
  store i64 %287, i64* %285, align 8, !tbaa !2428
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %280, i64* %289, align 8, !tbaa !2428
  %290 = load i64, i64* %PC
  %291 = call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %290, %struct.Memory* %234)
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 56
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  store i64 %293, i64* %RDI, align 8, !tbaa !2428
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 56
  %298 = load i64, i64* %RAX
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %297 to i64*
  store i64 %298, i64* %301
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 182
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 5
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 5
  store i64 %307, i64* %PC
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %309 = load i64, i64* %308, align 8, !tbaa !2428
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %305, i64* %311
  store i64 %310, i64* %308, align 8, !tbaa !2428
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %303, i64* %312, align 8, !tbaa !2428
  %313 = load i64, i64* %PC
  %314 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %313, %struct.Memory* %291)
  %315 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %316 = load i64, i64* %RAX
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to double*
  %320 = load double, double* %319
  %321 = bitcast i8* %315 to double*
  store double %320, double* %321, align 1, !tbaa !2452
  %322 = getelementptr inbounds i8, i8* %315, i64 8
  %323 = bitcast i8* %322 to double*
  store double 0.000000e+00, double* %323, align 1, !tbaa !2452
  %324 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 64
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to double*
  %330 = load double, double* %329
  %331 = bitcast i8* %324 to double*
  store double %330, double* %331, align 1, !tbaa !2452
  %332 = getelementptr inbounds i8, i8* %324, i64 8
  %333 = bitcast i8* %332 to double*
  store double 0.000000e+00, double* %333, align 1, !tbaa !2452
  %334 = bitcast %union.vec128_t* %XMM0 to i8*
  %335 = bitcast %union.vec128_t* %XMM1 to i8*
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 4
  store i64 %337, i64* %PC
  %338 = bitcast i8* %334 to double*
  %339 = load double, double* %338, align 1
  %340 = bitcast i8* %335 to double*
  %341 = load double, double* %340, align 1
  %342 = fcmp uno double %339, %341
  br i1 %342, label %343, label %355

; <label>:343:                                    ; preds = %block_404646
  %344 = fadd double %339, %341
  %345 = bitcast double %344 to i64
  %346 = and i64 %345, 9221120237041090560
  %347 = icmp eq i64 %346, 9218868437227405312
  %348 = and i64 %345, 2251799813685247
  %349 = icmp ne i64 %348, 0
  %350 = and i1 %347, %349
  br i1 %350, label %351, label %361

; <label>:351:                                    ; preds = %343
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %353 = load i64, i64* %352, align 8, !tbaa !2428
  %354 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %353, %struct.Memory* %314) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:355:                                    ; preds = %block_404646
  %356 = fcmp ogt double %339, %341
  br i1 %356, label %361, label %357

; <label>:357:                                    ; preds = %355
  %358 = fcmp olt double %339, %341
  br i1 %358, label %361, label %359

; <label>:359:                                    ; preds = %357
  %360 = fcmp oeq double %339, %341
  br i1 %360, label %361, label %368

; <label>:361:                                    ; preds = %359, %357, %355, %343
  %362 = phi i8 [ 0, %355 ], [ 0, %357 ], [ 1, %359 ], [ 1, %343 ]
  %363 = phi i8 [ 0, %355 ], [ 0, %357 ], [ 0, %359 ], [ 1, %343 ]
  %364 = phi i8 [ 0, %355 ], [ 1, %357 ], [ 0, %359 ], [ 1, %343 ]
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %362, i8* %365, align 1, !tbaa !2432
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %363, i8* %366, align 1, !tbaa !2432
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %367, align 1, !tbaa !2432
  br label %368

; <label>:368:                                    ; preds = %361, %359
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %369, align 1, !tbaa !2432
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %370, align 1, !tbaa !2432
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %371, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %351, %368
  %372 = phi %struct.Memory* [ %354, %351 ], [ %314, %368 ]
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 15
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 6
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 6
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %380 = load i8, i8* %379, align 1, !tbaa !2433
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %382 = load i8, i8* %381, align 1, !tbaa !2449
  %383 = or i8 %382, %380
  %384 = icmp ne i8 %383, 0
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %387 = select i1 %384, i64 %374, i64 %376
  store i64 %387, i64* %386, align 8, !tbaa !2428
  %388 = load i8, i8* %BRANCH_TAKEN
  %389 = icmp eq i8 %388, 1
  br i1 %389, label %block_40469b, label %block_404692

block_40469b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %390 = load i64, i64* %PC
  %391 = sub i64 %390, 111
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 5
  store i64 %393, i64* %PC
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %391, i64* %394, align 8, !tbaa !2428
  br label %block_40462c

block_4046a4:                                     ; preds = %block_404641, %block_404692
  %MEMORY.0 = phi %struct.Memory* [ %372, %block_404692 ], [ %505, %block_404641 ]
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 1
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 3
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i8*
  %400 = load i8, i8* %399
  store i8 %400, i8* %AL, align 1, !tbaa !2432
  %401 = load i8, i8* %AL
  %402 = zext i8 %401 to i64
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 2
  store i64 %404, i64* %PC
  %405 = and i64 1, %402
  %406 = trunc i64 %405 to i8
  store i8 %406, i8* %AL, align 1, !tbaa !2432
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %407, align 1, !tbaa !2433
  %408 = trunc i64 %405 to i32
  %409 = and i32 %408, 255
  %410 = call i32 @llvm.ctpop.i32(i32 %409) #16
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  %413 = xor i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %413, i8* %414, align 1, !tbaa !2447
  %415 = icmp eq i8 %406, 0
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %416, i8* %417, align 1, !tbaa !2449
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %418, align 1, !tbaa !2450
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %419, align 1, !tbaa !2451
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %420, align 1, !tbaa !2448
  %421 = load i8, i8* %AL
  %422 = zext i8 %421 to i64
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 3
  store i64 %424, i64* %PC
  %425 = and i64 %422, 255
  store i64 %425, i64* %RAX, align 8, !tbaa !2428
  %426 = load i64, i64* %RSP
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC
  %429 = add i64 64, %426
  store i64 %429, i64* %RSP, align 8, !tbaa !2428
  %430 = icmp ult i64 %429, %426
  %431 = icmp ult i64 %429, 64
  %432 = or i1 %430, %431
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %433, i8* %434, align 1, !tbaa !2433
  %435 = trunc i64 %429 to i32
  %436 = and i32 %435, 255
  %437 = call i32 @llvm.ctpop.i32(i32 %436) #16
  %438 = trunc i32 %437 to i8
  %439 = and i8 %438, 1
  %440 = xor i8 %439, 1
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %440, i8* %441, align 1, !tbaa !2447
  %442 = xor i64 64, %426
  %443 = xor i64 %442, %429
  %444 = lshr i64 %443, 4
  %445 = trunc i64 %444 to i8
  %446 = and i8 %445, 1
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %446, i8* %447, align 1, !tbaa !2448
  %448 = icmp eq i64 %429, 0
  %449 = zext i1 %448 to i8
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %449, i8* %450, align 1, !tbaa !2449
  %451 = lshr i64 %429, 63
  %452 = trunc i64 %451 to i8
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %452, i8* %453, align 1, !tbaa !2450
  %454 = lshr i64 %426, 63
  %455 = xor i64 %451, %454
  %456 = add nuw nsw i64 %455, %451
  %457 = icmp eq i64 %456, 2
  %458 = zext i1 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %458, i8* %459, align 1, !tbaa !2451
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 1
  store i64 %461, i64* %PC
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %463 = load i64, i64* %462, align 8, !tbaa !2428
  %464 = add i64 %463, 8
  %465 = inttoptr i64 %463 to i64*
  %466 = load i64, i64* %465
  store i64 %466, i64* %RBP, align 8, !tbaa !2428
  store i64 %464, i64* %462, align 8, !tbaa !2428
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 1
  store i64 %468, i64* %PC
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %471 = load i64, i64* %470, align 8, !tbaa !2428
  %472 = inttoptr i64 %471 to i64*
  %473 = load i64, i64* %472
  store i64 %473, i64* %469, align 8, !tbaa !2428
  %474 = add i64 %471, 8
  store i64 %474, i64* %470, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404641:                                     ; preds = %block_40462c
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 95
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 5
  store i64 %478, i64* %PC
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %476, i64* %479, align 8, !tbaa !2428
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 1
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i8*
  store i8 1, i8* %484
  br label %block_4046a4

block_40462c:                                     ; preds = %block_40469b, %block_404600
  %MEMORY.1 = phi %struct.Memory* [ %155, %block_404600 ], [ %372, %block_40469b ]
  %485 = load i64, i64* %RBP
  %486 = sub i64 %485, 16
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  store i64 %486, i64* %RDI, align 8, !tbaa !2428
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 24
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 4
  store i64 %492, i64* %PC
  store i64 %490, i64* %RSI, align 8, !tbaa !2428
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 204
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 5
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 5
  store i64 %498, i64* %PC
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %500 = load i64, i64* %499, align 8, !tbaa !2428
  %501 = add i64 %500, -8
  %502 = inttoptr i64 %501 to i64*
  store i64 %496, i64* %502
  store i64 %501, i64* %499, align 8, !tbaa !2428
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %494, i64* %503, align 8, !tbaa !2428
  %504 = load i64, i64* %PC
  %505 = call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %504, %struct.Memory* %MEMORY.1)
  %506 = load i8, i8* %AL
  %507 = zext i8 %506 to i64
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 2
  store i64 %509, i64* %PC
  %510 = and i64 1, %507
  %511 = trunc i64 %510 to i8
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %512, align 1, !tbaa !2433
  %513 = trunc i64 %510 to i32
  %514 = and i32 %513, 255
  %515 = call i32 @llvm.ctpop.i32(i32 %514) #16
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %518, i8* %519, align 1, !tbaa !2447
  %520 = icmp eq i8 %511, 0
  %521 = zext i1 %520 to i8
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %521, i8* %522, align 1, !tbaa !2449
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %523, align 1, !tbaa !2450
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %524, align 1, !tbaa !2451
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %525, align 1, !tbaa !2448
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 11
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 6
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 6
  store i64 %531, i64* %PC
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %533 = load i8, i8* %532, align 1, !tbaa !2449
  %534 = icmp eq i8 %533, 0
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %537 = select i1 %534, i64 %527, i64 %529
  store i64 %537, i64* %536, align 8, !tbaa !2428
  %538 = load i8, i8* %BRANCH_TAKEN
  %539 = icmp eq i8 %538, 1
  br i1 %539, label %block_404646, label %block_404641
}

; Function Attrs: noinline
define %struct.Memory* @sub_402da0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402da0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %34 to %"class.std::bitset"*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 16
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 8
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  store i64 %82, i64* %RCX, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = load i64, i64* %RDI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %100 = load i64, i64* %RCX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  store i64 %100, i64* %RSI, align 8, !tbaa !2428
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 1250
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 5
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 5
  store i64 %108, i64* %PC
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %110 = load i64, i64* %109, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %106, i64* %112
  store i64 %111, i64* %109, align 8, !tbaa !2428
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %104, i64* %113, align 8, !tbaa !2428
  %114 = load i64, i64* %PC
  %115 = call %struct.Memory* @sub_4032a0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* %0, i64 %114, %struct.Memory* %2)
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 5
  store i64 %117, i64* %PC
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  %118 = load i32, i32* %EDX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  store i64 %121, i64* %PC
  %122 = and i64 %119, 4294967295
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 32
  %125 = load i64, i64* %RAX
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %124 to i64*
  store i64 %125, i64* %128
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 32
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 4
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 2
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %139 = load i64, i64* %138, align 8, !tbaa !2428
  %140 = ashr i64 %139, 63
  store i64 %140, i64* %137, align 8, !tbaa !2428
  %141 = load i64, i64* %RCX
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %147 = load i64, i64* %146, align 8, !tbaa !2428
  %148 = sext i64 %141 to i128
  %149 = and i128 %148, -18446744073709551616
  %150 = zext i64 %147 to i128
  %151 = shl nuw i128 %150, 64
  %152 = zext i64 %145 to i128
  %153 = or i128 %151, %152
  %154 = zext i64 %141 to i128
  %155 = or i128 %149, %154
  %156 = sdiv i128 %153, %155
  %157 = trunc i128 %156 to i64
  %158 = and i128 %156, 18446744073709551615
  %159 = sext i64 %157 to i128
  %160 = and i128 %159, -18446744073709551616
  %161 = or i128 %160, %158
  %162 = icmp eq i128 %156, %161
  br i1 %162, label %167, label %163

; <label>:163:                                    ; preds = %block_402da0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %165, %struct.Memory* %115) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:167:                                    ; preds = %block_402da0
  %168 = srem i128 %153, %155
  %169 = trunc i128 %168 to i64
  store i64 %157, i64* %144, align 8, !tbaa !2428
  store i64 %169, i64* %146, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %170, align 1, !tbaa !2433
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %171, align 1, !tbaa !2447
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %172, align 1, !tbaa !2448
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %173, align 1, !tbaa !2449
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %174, align 1, !tbaa !2450
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %175, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %163, %167
  %176 = phi %struct.Memory* [ %166, %163 ], [ %115, %167 ]
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = sub i64 %177, 1
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = icmp ult i64 %177, 1
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %182, i8* %183, align 1, !tbaa !2433
  %184 = trunc i64 %180 to i32
  %185 = and i32 %184, 255
  %186 = call i32 @llvm.ctpop.i32(i32 %185) #16
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  %189 = xor i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %189, i8* %190, align 1, !tbaa !2447
  %191 = xor i64 1, %177
  %192 = xor i64 %191, %180
  %193 = lshr i64 %192, 4
  %194 = trunc i64 %193 to i8
  %195 = and i8 %194, 1
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %195, i8* %196, align 1, !tbaa !2448
  %197 = icmp eq i64 %180, 0
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %198, i8* %199, align 1, !tbaa !2449
  %200 = lshr i64 %180, 63
  %201 = trunc i64 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %201, i8* %202, align 1, !tbaa !2450
  %203 = lshr i64 %177, 63
  %204 = xor i64 %200, %203
  %205 = add nuw nsw i64 %204, %203
  %206 = icmp eq i64 %205, 2
  %207 = zext i1 %206 to i8
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %207, i8* %208, align 1, !tbaa !2451
  %209 = load i64, i64* %RBP
  %210 = sub i64 %209, 24
  %211 = load i64, i64* %RAX
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %210 to i64*
  store i64 %211, i64* %214
  br label %block_402ddf

block_402ddf:                                     ; preds = %block_402dea, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %176, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %424, %block_402dea ]
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 24
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 5
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i64*
  %220 = load i64, i64* %219
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2433
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %229, align 1, !tbaa !2448
  %230 = icmp eq i64 %220, 0
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %231, i8* %232, align 1, !tbaa !2449
  %233 = lshr i64 %220, 63
  %234 = trunc i64 %233 to i8
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %234, i8* %235, align 1, !tbaa !2450
  %236 = lshr i64 %220, 63
  %237 = xor i64 %233, %236
  %238 = add nuw nsw i64 %237, %236
  %239 = icmp eq i64 %238, 2
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %240, i8* %241, align 1, !tbaa !2451
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 94
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 6
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 6
  store i64 %247, i64* %PC
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %249 = load i8, i8* %248, align 1, !tbaa !2450
  %250 = icmp ne i8 %249, 0
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %252 = load i8, i8* %251, align 1, !tbaa !2451
  %253 = icmp ne i8 %252, 0
  %254 = xor i1 %250, %253
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %257 = select i1 %254, i64 %243, i64 %245
  store i64 %257, i64* %256, align 8, !tbaa !2428
  %258 = load i8, i8* %BRANCH_TAKEN
  %259 = icmp eq i8 %258, 1
  %260 = load i64, i64* %RBP
  br i1 %259, label %block_402e42, label %block_402dea

block_402e42:                                     ; preds = %block_402ddf
  %261 = sub i64 %260, 32
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = load i64, i64* %RAX
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC
  %269 = sub i64 %266, 1
  store i64 %269, i64* %RAX, align 8, !tbaa !2428
  %270 = icmp ult i64 %266, 1
  %271 = zext i1 %270 to i8
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %271, i8* %272, align 1, !tbaa !2433
  %273 = trunc i64 %269 to i32
  %274 = and i32 %273, 255
  %275 = call i32 @llvm.ctpop.i32(i32 %274) #16
  %276 = trunc i32 %275 to i8
  %277 = and i8 %276, 1
  %278 = xor i8 %277, 1
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %278, i8* %279, align 1, !tbaa !2447
  %280 = xor i64 1, %266
  %281 = xor i64 %280, %269
  %282 = lshr i64 %281, 4
  %283 = trunc i64 %282 to i8
  %284 = and i8 %283, 1
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %284, i8* %285, align 1, !tbaa !2448
  %286 = icmp eq i64 %269, 0
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %287, i8* %288, align 1, !tbaa !2449
  %289 = lshr i64 %269, 63
  %290 = trunc i64 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %290, i8* %291, align 1, !tbaa !2450
  %292 = lshr i64 %266, 63
  %293 = xor i64 %289, %292
  %294 = add nuw nsw i64 %293, %292
  %295 = icmp eq i64 %294, 2
  %296 = zext i1 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %296, i8* %297, align 1, !tbaa !2451
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 24
  %300 = load i64, i64* %RAX
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %299 to i64*
  store i64 %300, i64* %303
  br label %block_402e4e

block_402dea:                                     ; preds = %block_402ddf
  %304 = sub i64 %260, 8
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  store i64 %304, i64* %RDI, align 8, !tbaa !2428
  %307 = load i64, i64* %RBP
  %308 = sub i64 %307, 24
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 4
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %308 to i64*
  %312 = load i64, i64* %311
  store i64 %312, i64* %RSI, align 8, !tbaa !2428
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 1246
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 5
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 5
  store i64 %318, i64* %PC
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %320 = load i64, i64* %319, align 8, !tbaa !2428
  %321 = add i64 %320, -8
  %322 = inttoptr i64 %321 to i64*
  store i64 %316, i64* %322
  store i64 %321, i64* %319, align 8, !tbaa !2428
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %314, i64* %323, align 8, !tbaa !2428
  %324 = load i64, i64* %PC
  %325 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %324, %struct.Memory* %MEMORY.0)
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 48
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC
  store i64 %327, i64* %RDI, align 8, !tbaa !2428
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 48
  %332 = load i64, i64* %RAX
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 4
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %331 to i64*
  store i64 %332, i64* %335
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 641
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 5
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 5
  store i64 %341, i64* %PC
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %343 = load i64, i64* %342, align 8, !tbaa !2428
  %344 = add i64 %343, -8
  %345 = inttoptr i64 %344 to i64*
  store i64 %339, i64* %345
  store i64 %344, i64* %342, align 8, !tbaa !2428
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %337, i64* %346, align 8, !tbaa !2428
  %347 = load i64, i64* %PC
  %348 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %347, %struct.Memory* %325)
  %349 = load i64, i64* %RAX
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 3
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 40
  %356 = load i64, i64* %RAX
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %355 to i64*
  store i64 %356, i64* %359
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 32
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %RDI, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 8
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 56
  %374 = load i64, i64* %RAX
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %373 to i64*
  store i64 %374, i64* %377
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 24
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 4
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i64*
  %383 = load i64, i64* %382
  store i64 %383, i64* %RDX, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 40
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 4
  store i64 %387, i64* %PC
  %388 = inttoptr i64 %385 to i64*
  %389 = load i64, i64* %388
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 64
  %392 = load i64, i64* %RAX
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 4
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %391 to i64*
  store i64 %392, i64* %395
  %396 = load i64, i64* %RBP
  %397 = sub i64 %396, 56
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 4
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i64*
  %401 = load i64, i64* %400
  store i64 %401, i64* %RSI, align 8, !tbaa !2428
  %402 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %403 = load i64, i64* %RBP
  %404 = sub i64 %403, 64
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 5
  store i64 %406, i64* %PC
  %407 = inttoptr i64 %404 to double*
  %408 = load double, double* %407
  %409 = bitcast i8* %402 to double*
  store double %408, double* %409, align 1, !tbaa !2452
  %410 = getelementptr inbounds i8, i8* %402, i64 8
  %411 = bitcast i8* %410 to double*
  store double 0.000000e+00, double* %411, align 1, !tbaa !2452
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 1236
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 5
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 5
  store i64 %417, i64* %PC
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %419 = load i64, i64* %418, align 8, !tbaa !2428
  %420 = add i64 %419, -8
  %421 = inttoptr i64 %420 to i64*
  store i64 %415, i64* %421
  store i64 %420, i64* %418, align 8, !tbaa !2428
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %413, i64* %422, align 8, !tbaa !2428
  %423 = load i64, i64* %PC
  %424 = call %struct.Memory* @sub_403300__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* %0, i64 %423, %struct.Memory* %348)
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 24
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = load i64, i64* %RAX
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 4
  store i64 %433, i64* %PC
  %434 = add i64 -1, %431
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = icmp ult i64 %434, %431
  %436 = icmp ult i64 %434, -1
  %437 = or i1 %435, %436
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %438, i8* %439, align 1, !tbaa !2433
  %440 = trunc i64 %434 to i32
  %441 = and i32 %440, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2447
  %447 = xor i64 -1, %431
  %448 = xor i64 %447, %434
  %449 = lshr i64 %448, 4
  %450 = trunc i64 %449 to i8
  %451 = and i8 %450, 1
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %451, i8* %452, align 1, !tbaa !2448
  %453 = icmp eq i64 %434, 0
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %454, i8* %455, align 1, !tbaa !2449
  %456 = lshr i64 %434, 63
  %457 = trunc i64 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %457, i8* %458, align 1, !tbaa !2450
  %459 = lshr i64 %431, 63
  %460 = xor i64 %456, %459
  %461 = xor i64 %456, 1
  %462 = add nuw nsw i64 %460, %461
  %463 = icmp eq i64 %462, 2
  %464 = zext i1 %463 to i8
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %464, i8* %465, align 1, !tbaa !2451
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 24
  %468 = load i64, i64* %RAX
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %467 to i64*
  store i64 %468, i64* %471
  %472 = load i64, i64* %PC
  %473 = sub i64 %472, 94
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 5
  store i64 %475, i64* %PC
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %473, i64* %476, align 8, !tbaa !2428
  br label %block_402ddf

block_402e59:                                     ; preds = %block_402e4e
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 8
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 4
  store i64 %480, i64* %PC
  store i64 %478, i64* %RDI, align 8, !tbaa !2428
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 24
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 4
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i64*
  %486 = load i64, i64* %485
  store i64 %486, i64* %RSI, align 8, !tbaa !2428
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 1135
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 5
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 5
  store i64 %492, i64* %PC
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %494 = load i64, i64* %493, align 8, !tbaa !2428
  %495 = add i64 %494, -8
  %496 = inttoptr i64 %495 to i64*
  store i64 %490, i64* %496
  store i64 %495, i64* %493, align 8, !tbaa !2428
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %488, i64* %497, align 8, !tbaa !2428
  %498 = load i64, i64* %PC
  %499 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %498, %struct.Memory* %MEMORY.1)
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 80
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC
  store i64 %501, i64* %RDI, align 8, !tbaa !2428
  %504 = load i64, i64* %RBP
  %505 = sub i64 %504, 80
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 4
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %505 to i64*
  store i64 %506, i64* %509
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 530
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 5
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 5
  store i64 %515, i64* %PC
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %517 = load i64, i64* %516, align 8, !tbaa !2428
  %518 = add i64 %517, -8
  %519 = inttoptr i64 %518 to i64*
  store i64 %513, i64* %519
  store i64 %518, i64* %516, align 8, !tbaa !2428
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %511, i64* %520, align 8, !tbaa !2428
  %521 = load i64, i64* %PC
  %522 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %521, %struct.Memory* %499)
  %523 = load i64, i64* %RBP
  %524 = sub i64 %523, 8
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 4
  store i64 %526, i64* %PC
  store i64 %524, i64* %RDI, align 8, !tbaa !2428
  %527 = load i64, i64* %RAX
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i64*
  %531 = load i64, i64* %530
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 72
  %534 = load i64, i64* %RAX
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 4
  store i64 %536, i64* %PC
  %537 = inttoptr i64 %533 to i64*
  store i64 %534, i64* %537
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 514
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 5
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 5
  store i64 %543, i64* %PC
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %545 = load i64, i64* %544, align 8, !tbaa !2428
  %546 = add i64 %545, -8
  %547 = inttoptr i64 %546 to i64*
  store i64 %541, i64* %547
  store i64 %546, i64* %544, align 8, !tbaa !2428
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %539, i64* %548, align 8, !tbaa !2428
  %549 = load i64, i64* %PC
  %550 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %549, %struct.Memory* %522)
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 8
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 4
  store i64 %554, i64* %PC
  store i64 %552, i64* %RDI, align 8, !tbaa !2428
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 24
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RSI, align 8, !tbaa !2428
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 112
  %563 = load i64, i64* %RAX
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 4
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %562 to i64*
  store i64 %563, i64* %566
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 1089
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 5
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 5
  store i64 %572, i64* %PC
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %574 = load i64, i64* %573, align 8, !tbaa !2428
  %575 = add i64 %574, -8
  %576 = inttoptr i64 %575 to i64*
  store i64 %570, i64* %576
  store i64 %575, i64* %573, align 8, !tbaa !2428
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %568, i64* %577, align 8, !tbaa !2428
  %578 = load i64, i64* %PC
  %579 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %578, %struct.Memory* %550)
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 88
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 4
  store i64 %583, i64* %PC
  store i64 %581, i64* %RDI, align 8, !tbaa !2428
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 88
  %586 = load i64, i64* %RAX
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %585 to i64*
  store i64 %586, i64* %589
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 484
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 5
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 5
  store i64 %595, i64* %PC
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %597 = load i64, i64* %596, align 8, !tbaa !2428
  %598 = add i64 %597, -8
  %599 = inttoptr i64 %598 to i64*
  store i64 %593, i64* %599
  store i64 %598, i64* %596, align 8, !tbaa !2428
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %591, i64* %600, align 8, !tbaa !2428
  %601 = load i64, i64* %PC
  %602 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %601, %struct.Memory* %579)
  %603 = load i64, i64* %RCX
  %604 = load i32, i32* %ECX
  %605 = zext i32 %604 to i64
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 2
  store i64 %607, i64* %PC
  %608 = xor i64 %605, %603
  %609 = trunc i64 %608 to i32
  %610 = and i64 %608, 4294967295
  store i64 %610, i64* %RCX, align 8, !tbaa !2428
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %611, align 1, !tbaa !2433
  %612 = and i32 %609, 255
  %613 = call i32 @llvm.ctpop.i32(i32 %612) #16
  %614 = trunc i32 %613 to i8
  %615 = and i8 %614, 1
  %616 = xor i8 %615, 1
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %616, i8* %617, align 1, !tbaa !2447
  %618 = icmp eq i32 %609, 0
  %619 = zext i1 %618 to i8
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %619, i8* %620, align 1, !tbaa !2449
  %621 = lshr i32 %609, 31
  %622 = trunc i32 %621 to i8
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %622, i8* %623, align 1, !tbaa !2450
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %624, align 1, !tbaa !2451
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %625, align 1, !tbaa !2448
  %626 = load i32, i32* %ECX
  %627 = zext i32 %626 to i64
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 2
  store i64 %629, i64* %PC
  %630 = and i64 %627, 4294967295
  store i64 %630, i64* %RDX, align 8, !tbaa !2428
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 112
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %632 to i64*
  %636 = load i64, i64* %635
  store i64 %636, i64* %RSI, align 8, !tbaa !2428
  %637 = load i64, i64* %RSI
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %637 to i64*
  %641 = load i64, i64* %640
  store i64 %641, i64* %RDI, align 8, !tbaa !2428
  %642 = load i64, i64* %RAX
  %643 = load i64, i64* %RDI
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 3
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %642 to i64*
  store i64 %643, i64* %646
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 24
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RDI, align 8, !tbaa !2428
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RBP
  %660 = sub i64 %659, 96
  %661 = load i64, i64* %RAX
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 4
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %660 to i64*
  store i64 %661, i64* %664
  %665 = load i64, i64* %RBP
  %666 = sub i64 %665, 72
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 4
  store i64 %668, i64* %PC
  %669 = inttoptr i64 %666 to i64*
  %670 = load i64, i64* %669
  store i64 %670, i64* %RAX, align 8, !tbaa !2428
  %671 = load i64, i64* %RBP
  %672 = sub i64 %671, 104
  %673 = load i64, i64* %RAX
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 4
  store i64 %675, i64* %PC
  %676 = inttoptr i64 %672 to i64*
  store i64 %673, i64* %676
  %677 = load i64, i64* %RBP
  %678 = sub i64 %677, 96
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 4
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %678 to i64*
  %682 = load i64, i64* %681
  store i64 %682, i64* %RSI, align 8, !tbaa !2428
  %683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 104
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 5
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to double*
  %689 = load double, double* %688
  %690 = bitcast i8* %683 to double*
  store double %689, double* %690, align 1, !tbaa !2452
  %691 = getelementptr inbounds i8, i8* %683, i64 8
  %692 = bitcast i8* %691 to double*
  store double 0.000000e+00, double* %692, align 1, !tbaa !2452
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 1076
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 5
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 5
  store i64 %698, i64* %PC
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %700 = load i64, i64* %699, align 8, !tbaa !2428
  %701 = add i64 %700, -8
  %702 = inttoptr i64 %701 to i64*
  store i64 %696, i64* %702
  store i64 %701, i64* %699, align 8, !tbaa !2428
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %694, i64* %703, align 8, !tbaa !2428
  %704 = load i64, i64* %PC
  %705 = call %struct.Memory* @sub_403300__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* %0, i64 %704, %struct.Memory* %602)
  %706 = load i64, i64* %RBP
  %707 = sub i64 %706, 24
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 4
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to i64*
  %711 = load i64, i64* %710
  store i64 %711, i64* %RAX, align 8, !tbaa !2428
  %712 = load i64, i64* %RAX
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 4
  store i64 %714, i64* %PC
  %715 = add i64 -1, %712
  store i64 %715, i64* %RAX, align 8, !tbaa !2428
  %716 = icmp ult i64 %715, %712
  %717 = icmp ult i64 %715, -1
  %718 = or i1 %716, %717
  %719 = zext i1 %718 to i8
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %719, i8* %720, align 1, !tbaa !2433
  %721 = trunc i64 %715 to i32
  %722 = and i32 %721, 255
  %723 = call i32 @llvm.ctpop.i32(i32 %722) #16
  %724 = trunc i32 %723 to i8
  %725 = and i8 %724, 1
  %726 = xor i8 %725, 1
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %726, i8* %727, align 1, !tbaa !2447
  %728 = xor i64 -1, %712
  %729 = xor i64 %728, %715
  %730 = lshr i64 %729, 4
  %731 = trunc i64 %730 to i8
  %732 = and i8 %731, 1
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %732, i8* %733, align 1, !tbaa !2448
  %734 = icmp eq i64 %715, 0
  %735 = zext i1 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %735, i8* %736, align 1, !tbaa !2449
  %737 = lshr i64 %715, 63
  %738 = trunc i64 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %738, i8* %739, align 1, !tbaa !2450
  %740 = lshr i64 %712, 63
  %741 = xor i64 %737, %740
  %742 = xor i64 %737, 1
  %743 = add nuw nsw i64 %741, %742
  %744 = icmp eq i64 %743, 2
  %745 = zext i1 %744 to i8
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %745, i8* %746, align 1, !tbaa !2451
  %747 = load i64, i64* %RBP
  %748 = sub i64 %747, 24
  %749 = load i64, i64* %RAX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = inttoptr i64 %748 to i64*
  store i64 %749, i64* %752
  %753 = load i64, i64* %PC
  %754 = sub i64 %753, 143
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 5
  store i64 %756, i64* %PC
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %754, i64* %757, align 8, !tbaa !2428
  br label %block_402e4e

block_402e4e:                                     ; preds = %block_402e59, %block_402e42
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_402e42 ], [ %705, %block_402e59 ]
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 24
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i64*
  %763 = load i64, i64* %762
  %764 = sub i64 %763, 1
  %765 = icmp ult i64 %763, 1
  %766 = zext i1 %765 to i8
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %766, i8* %767, align 1, !tbaa !2433
  %768 = trunc i64 %764 to i32
  %769 = and i32 %768, 255
  %770 = call i32 @llvm.ctpop.i32(i32 %769) #16
  %771 = trunc i32 %770 to i8
  %772 = and i8 %771, 1
  %773 = xor i8 %772, 1
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %773, i8* %774, align 1, !tbaa !2447
  %775 = xor i64 %763, 1
  %776 = xor i64 %775, %764
  %777 = lshr i64 %776, 4
  %778 = trunc i64 %777 to i8
  %779 = and i8 %778, 1
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %779, i8* %780, align 1, !tbaa !2448
  %781 = icmp eq i64 %764, 0
  %782 = zext i1 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %782, i8* %783, align 1, !tbaa !2449
  %784 = lshr i64 %764, 63
  %785 = trunc i64 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %785, i8* %786, align 1, !tbaa !2450
  %787 = lshr i64 %763, 63
  %788 = xor i64 %784, %787
  %789 = add nuw nsw i64 %788, %787
  %790 = icmp eq i64 %789, 2
  %791 = zext i1 %790 to i8
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %791, i8* %792, align 1, !tbaa !2451
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 143
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 6
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 6
  store i64 %798, i64* %PC
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %800 = load i8, i8* %799, align 1, !tbaa !2450
  %801 = icmp ne i8 %800, 0
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %803 = load i8, i8* %802, align 1, !tbaa !2451
  %804 = icmp ne i8 %803, 0
  %805 = xor i1 %801, %804
  %806 = zext i1 %805 to i8
  store i8 %806, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %808 = select i1 %805, i64 %794, i64 %796
  store i64 %808, i64* %807, align 8, !tbaa !2428
  %809 = load i8, i8* %BRANCH_TAKEN
  %810 = icmp eq i8 %809, 1
  br i1 %810, label %block_402ee2, label %block_402e59

block_402ee2:                                     ; preds = %block_402e4e
  %811 = load i64, i64* %RSP
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 4
  store i64 %813, i64* %PC
  %814 = add i64 112, %811
  store i64 %814, i64* %RSP, align 8, !tbaa !2428
  %815 = icmp ult i64 %814, %811
  %816 = icmp ult i64 %814, 112
  %817 = or i1 %815, %816
  %818 = zext i1 %817 to i8
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %818, i8* %819, align 1, !tbaa !2433
  %820 = trunc i64 %814 to i32
  %821 = and i32 %820, 255
  %822 = call i32 @llvm.ctpop.i32(i32 %821) #16
  %823 = trunc i32 %822 to i8
  %824 = and i8 %823, 1
  %825 = xor i8 %824, 1
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %825, i8* %826, align 1, !tbaa !2447
  %827 = xor i64 112, %811
  %828 = xor i64 %827, %814
  %829 = lshr i64 %828, 4
  %830 = trunc i64 %829 to i8
  %831 = and i8 %830, 1
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %831, i8* %832, align 1, !tbaa !2448
  %833 = icmp eq i64 %814, 0
  %834 = zext i1 %833 to i8
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %834, i8* %835, align 1, !tbaa !2449
  %836 = lshr i64 %814, 63
  %837 = trunc i64 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %837, i8* %838, align 1, !tbaa !2450
  %839 = lshr i64 %811, 63
  %840 = xor i64 %836, %839
  %841 = add nuw nsw i64 %840, %836
  %842 = icmp eq i64 %841, 2
  %843 = zext i1 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %843, i8* %844, align 1, !tbaa !2451
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 1
  store i64 %846, i64* %PC
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %848 = load i64, i64* %847, align 8, !tbaa !2428
  %849 = add i64 %848, 8
  %850 = inttoptr i64 %848 to i64*
  %851 = load i64, i64* %850
  store i64 %851, i64* %RBP, align 8, !tbaa !2428
  store i64 %849, i64* %847, align 8, !tbaa !2428
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 1
  store i64 %853, i64* %PC
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %856 = load i64, i64* %855, align 8, !tbaa !2428
  %857 = inttoptr i64 %856 to i64*
  %858 = load i64, i64* %857
  store i64 %858, i64* %854, align 8, !tbaa !2428
  %859 = add i64 %856, 8
  store i64 %859, i64* %855, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404bc0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 32
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 32
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 32, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 56
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_404c10__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 33
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2449
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_404c00, label %block_404be5

block_404be5:                                     ; preds = %block_404bc0
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 10
  store i64 %139, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RSI, align 8, !tbaa !2428
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 2
  store i64 %145, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %146 = load i64, i64* %PC
  %147 = sub i64 %146, 17672
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 5
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %153 = load i64, i64* %152, align 8, !tbaa !2428
  %154 = add i64 %153, -8
  %155 = inttoptr i64 %154 to i64*
  store i64 %149, i64* %155
  store i64 %154, i64* %152, align 8, !tbaa !2428
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %147, i64* %156, align 8, !tbaa !2428
  %157 = load i64, i64* %PC
  %158 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %157, %struct.Memory* %103)
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 20
  %161 = load i32, i32* %EAX
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %160 to i32*
  store i32 %161, i32* %165
  br label %block_404c00

block_404c00:                                     ; preds = %block_404be5, %block_404bc0
  %MEMORY.0 = phi %struct.Memory* [ %103, %block_404bc0 ], [ %158, %block_404be5 ]
  %166 = load i64, i64* %RSP
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = add i64 32, %166
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  %170 = icmp ult i64 %169, %166
  %171 = icmp ult i64 %169, 32
  %172 = or i1 %170, %171
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %173, i8* %174, align 1, !tbaa !2433
  %175 = trunc i64 %169 to i32
  %176 = and i32 %175, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2447
  %182 = xor i64 32, %166
  %183 = xor i64 %182, %169
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %186, i8* %187, align 1, !tbaa !2448
  %188 = icmp eq i64 %169, 0
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %189, i8* %190, align 1, !tbaa !2449
  %191 = lshr i64 %169, 63
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %192, i8* %193, align 1, !tbaa !2450
  %194 = lshr i64 %166, 63
  %195 = xor i64 %191, %194
  %196 = add nuw nsw i64 %195, %191
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %198, i8* %199, align 1, !tbaa !2451
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400680__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400680:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2433
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2451
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_608ff0__got_type* @seg_608ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2433
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2447
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2451
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2448
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2449
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400692, label %block_400690

block_400690:                                     ; preds = %block_400680
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_400692

block_400692:                                     ; preds = %block_400690, %block_400680
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400680 ], [ %92, %block_400690 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2451
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405310:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RCX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = sub i64 %38, 48
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 48
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2433
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #16
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2447
  %52 = xor i64 48, %38
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2450
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2451
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 8
  %72 = load i64, i64* %RDI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %RSI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 8
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92
  store i64 %93, i64* %RDI, align 8, !tbaa !2428
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %RDI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = sub i64 %94, %95
  store i64 %98, i64* %RSI, align 8, !tbaa !2428
  %99 = icmp ult i64 %94, %95
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %98 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 %95, %94
  %110 = xor i64 %109, %98
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %98, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %98, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %94, 63
  %122 = lshr i64 %95, 63
  %123 = xor i64 %122, %121
  %124 = xor i64 %118, %121
  %125 = add nuw nsw i64 %124, %123
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %127, i8* %128, align 1, !tbaa !2451
  %129 = load i64, i64* %RSI
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = ashr i64 %129, 2
  %133 = trunc i64 %132 to i8
  %134 = and i8 %133, 1
  %135 = ashr i64 %132, 1
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %134, i8* %136, align 1, !tbaa !2432
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %138 = trunc i64 %135 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  store i8 %143, i8* %137, align 1, !tbaa !2432
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %144, align 1, !tbaa !2432
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %146 = icmp eq i64 %135, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %145, align 1, !tbaa !2432
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %149 = lshr i64 %135, 63
  %150 = trunc i64 %149 to i8
  store i8 %150, i8* %148, align 1, !tbaa !2432
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %151, align 1, !tbaa !2432
  %152 = load i64, i64* %RSI
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = sub i64 %152, 1
  %156 = icmp ult i64 %152, 1
  %157 = zext i1 %156 to i8
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %157, i8* %158, align 1, !tbaa !2433
  %159 = trunc i64 %155 to i32
  %160 = and i32 %159, 255
  %161 = call i32 @llvm.ctpop.i32(i32 %160) #16
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  %164 = xor i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %164, i8* %165, align 1, !tbaa !2447
  %166 = xor i64 1, %152
  %167 = xor i64 %166, %155
  %168 = lshr i64 %167, 4
  %169 = trunc i64 %168 to i8
  %170 = and i8 %169, 1
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %170, i8* %171, align 1, !tbaa !2448
  %172 = icmp eq i64 %155, 0
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %173, i8* %174, align 1, !tbaa !2449
  %175 = lshr i64 %155, 63
  %176 = trunc i64 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %176, i8* %177, align 1, !tbaa !2450
  %178 = lshr i64 %152, 63
  %179 = xor i64 %175, %178
  %180 = add nuw nsw i64 %179, %178
  %181 = icmp eq i64 %180, 2
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %182, i8* %183, align 1, !tbaa !2451
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 247
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 6
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 6
  store i64 %189, i64* %PC
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %191 = load i8, i8* %190, align 1, !tbaa !2449
  %192 = icmp ne i8 %191, 0
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %194 = load i8, i8* %193, align 1, !tbaa !2450
  %195 = icmp ne i8 %194, 0
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %197 = load i8, i8* %196, align 1, !tbaa !2451
  %198 = icmp ne i8 %197, 0
  %199 = xor i1 %195, %198
  %200 = or i1 %192, %199
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %203 = select i1 %200, i64 %185, i64 %187
  store i64 %203, i64* %202, align 8, !tbaa !2428
  %204 = load i8, i8* %BRANCH_TAKEN
  %205 = icmp eq i8 %204, 1
  br i1 %205, label %block_40542a, label %block_405339

block_40537e:                                     ; preds = %block_405359
  %206 = sub i64 %316, 37
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %206, i64* %209, align 8, !tbaa !2428
  br label %block_405359

block_4053d4:                                     ; preds = %block_4053b0
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 46
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %211, i64* %214, align 8, !tbaa !2428
  br label %block_405402

block_405359:                                     ; preds = %block_405354, %block_40537e
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_405354 ], [ %281, %block_40537e ]
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 24
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  store i64 %216, i64* %RDI, align 8, !tbaa !2428
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 40
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = load i64, i64* %RAX
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = add i64 -8, %225
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = icmp ult i64 %228, %225
  %230 = icmp ult i64 %228, -8
  %231 = or i1 %229, %230
  %232 = zext i1 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %232, i8* %233, align 1, !tbaa !2433
  %234 = trunc i64 %228 to i32
  %235 = and i32 %234, 255
  %236 = call i32 @llvm.ctpop.i32(i32 %235) #16
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %239, i8* %240, align 1, !tbaa !2447
  %241 = xor i64 -8, %225
  %242 = xor i64 %241, %228
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %245, i8* %246, align 1, !tbaa !2448
  %247 = icmp eq i64 %228, 0
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %248, i8* %249, align 1, !tbaa !2449
  %250 = lshr i64 %228, 63
  %251 = trunc i64 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %251, i8* %252, align 1, !tbaa !2450
  %253 = lshr i64 %225, 63
  %254 = xor i64 %250, %253
  %255 = xor i64 %250, 1
  %256 = add nuw nsw i64 %254, %255
  %257 = icmp eq i64 %256, 2
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %258, i8* %259, align 1, !tbaa !2451
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 40
  %262 = load i64, i64* %RAX
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 4
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %261 to i64*
  store i64 %262, i64* %265
  %266 = load i64, i64* %RAX
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 3
  store i64 %268, i64* %PC
  store i64 %266, i64* %RSI, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = sub i64 %269, 8476
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 5
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 5
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %276 = load i64, i64* %275, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %272, i64* %278
  store i64 %277, i64* %275, align 8, !tbaa !2428
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %270, i64* %279, align 8, !tbaa !2428
  %280 = load i64, i64* %PC
  %281 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %280, %struct.Memory* %MEMORY.0)
  %282 = load i8, i8* %AL
  %283 = zext i8 %282 to i64
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 2
  store i64 %285, i64* %PC
  %286 = and i64 1, %283
  %287 = trunc i64 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %288, align 1, !tbaa !2433
  %289 = trunc i64 %286 to i32
  %290 = and i32 %289, 255
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %294, i8* %295, align 1, !tbaa !2447
  %296 = icmp eq i8 %287, 0
  %297 = zext i1 %296 to i8
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %297, i8* %298, align 1, !tbaa !2449
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %299, align 1, !tbaa !2450
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %300, align 1, !tbaa !2451
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %301, align 1, !tbaa !2448
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 11
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 6
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 6
  store i64 %307, i64* %PC
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %309 = load i8, i8* %308, align 1, !tbaa !2449
  %310 = icmp eq i8 %309, 0
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %313 = select i1 %310, i64 %303, i64 %305
  store i64 %313, i64* %312, align 8, !tbaa !2428
  %314 = load i8, i8* %BRANCH_TAKEN
  %315 = icmp eq i8 %314, 1
  %316 = load i64, i64* %PC
  br i1 %315, label %block_40537e, label %block_405379

block_4053d9:                                     ; preds = %block_4053b0
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 40
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i64*
  %322 = load i64, i64* %321
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = load i64, i64* %RAX
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i64*
  %327 = load i64, i64* %326
  store i64 %327, i64* %RAX, align 8, !tbaa !2428
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 48
  %330 = load i64, i64* %RAX
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 4
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %329 to i64*
  store i64 %330, i64* %333
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 32
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 4
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i64*
  %339 = load i64, i64* %338
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 40
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC
  %344 = inttoptr i64 %341 to i64*
  %345 = load i64, i64* %344
  store i64 %345, i64* %RCX, align 8, !tbaa !2428
  %346 = load i64, i64* %RAX
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 3
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RCX
  %352 = load i64, i64* %RAX
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 3
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %351 to i64*
  store i64 %352, i64* %355
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 32
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360
  store i64 %361, i64* %RAX, align 8, !tbaa !2428
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 48
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 4
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i64*
  %367 = load i64, i64* %366
  store i64 %367, i64* %RCX, align 8, !tbaa !2428
  %368 = load i64, i64* %RAX
  %369 = load i64, i64* %RCX
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %368 to i64*
  store i64 %369, i64* %372
  %373 = load i64, i64* %PC
  %374 = sub i64 %373, 169
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 5
  store i64 %376, i64* %PC
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %374, i64* %377, align 8, !tbaa !2428
  br label %block_405354

block_405396:                                     ; preds = %block_405379
  %378 = add i64 %500, 5
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  store i64 %380, i64* %PC
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %378, i64* %381, align 8, !tbaa !2428
  br label %block_40539b

block_40539b:                                     ; preds = %block_4053b5, %block_405396
  %MEMORY.1 = phi %struct.Memory* [ %281, %block_405396 ], [ %404, %block_4053b5 ]
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 24
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  store i64 %383, i64* %RSI, align 8, !tbaa !2428
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 32
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %387 to i64*
  %391 = load i64, i64* %390
  store i64 %391, i64* %RDI, align 8, !tbaa !2428
  %392 = load i64, i64* %PC
  %393 = sub i64 %392, 8531
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 5
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 5
  store i64 %397, i64* %PC
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %399 = load i64, i64* %398, align 8, !tbaa !2428
  %400 = add i64 %399, -8
  %401 = inttoptr i64 %400 to i64*
  store i64 %395, i64* %401
  store i64 %400, i64* %398, align 8, !tbaa !2428
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %393, i64* %402, align 8, !tbaa !2428
  %403 = load i64, i64* %PC
  %404 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %403, %struct.Memory* %MEMORY.1)
  %405 = load i8, i8* %AL
  %406 = zext i8 %405 to i64
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 2
  store i64 %408, i64* %PC
  %409 = and i64 1, %406
  %410 = trunc i64 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %411, align 1, !tbaa !2433
  %412 = trunc i64 %409 to i32
  %413 = and i32 %412, 255
  %414 = call i32 @llvm.ctpop.i32(i32 %413) #16
  %415 = trunc i32 %414 to i8
  %416 = and i8 %415, 1
  %417 = xor i8 %416, 1
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %417, i8* %418, align 1, !tbaa !2447
  %419 = icmp eq i8 %410, 0
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %420, i8* %421, align 1, !tbaa !2449
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %422, align 1, !tbaa !2450
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %423, align 1, !tbaa !2451
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %424, align 1, !tbaa !2448
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 11
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 6
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 6
  store i64 %430, i64* %PC
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %432 = load i8, i8* %431, align 1, !tbaa !2449
  %433 = icmp eq i8 %432, 0
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %436 = select i1 %433, i64 %426, i64 %428
  store i64 %436, i64* %435, align 8, !tbaa !2428
  %437 = load i8, i8* %BRANCH_TAKEN
  %438 = icmp eq i8 %437, 1
  br i1 %438, label %block_4053b5, label %block_4053b0

block_405379:                                     ; preds = %block_405359
  %439 = add i64 %316, 10
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 5
  store i64 %441, i64* %PC
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %439, i64* %442, align 8, !tbaa !2428
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 32
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = load i64, i64* %RAX
  %450 = load i64, i64* %RBP
  %451 = sub i64 %450, 40
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 4
  store i64 %453, i64* %PC
  %454 = inttoptr i64 %451 to i64*
  %455 = load i64, i64* %454
  %456 = sub i64 %449, %455
  %457 = icmp ugt i64 %455, %449
  %458 = zext i1 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %458, i8* %459, align 1, !tbaa !2433
  %460 = trunc i64 %456 to i32
  %461 = and i32 %460, 255
  %462 = call i32 @llvm.ctpop.i32(i32 %461) #16
  %463 = trunc i32 %462 to i8
  %464 = and i8 %463, 1
  %465 = xor i8 %464, 1
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %465, i8* %466, align 1, !tbaa !2447
  %467 = xor i64 %455, %449
  %468 = xor i64 %467, %456
  %469 = lshr i64 %468, 4
  %470 = trunc i64 %469 to i8
  %471 = and i8 %470, 1
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %471, i8* %472, align 1, !tbaa !2448
  %473 = icmp eq i64 %456, 0
  %474 = zext i1 %473 to i8
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %474, i8* %475, align 1, !tbaa !2449
  %476 = lshr i64 %456, 63
  %477 = trunc i64 %476 to i8
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %477, i8* %478, align 1, !tbaa !2450
  %479 = lshr i64 %449, 63
  %480 = lshr i64 %455, 63
  %481 = xor i64 %480, %479
  %482 = xor i64 %476, %479
  %483 = add nuw nsw i64 %482, %481
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %485, i8* %486, align 1, !tbaa !2451
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 11
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 6
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 6
  store i64 %492, i64* %PC
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %494 = load i8, i8* %493, align 1, !tbaa !2433
  store i8 %494, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %496 = icmp ne i8 %494, 0
  %497 = select i1 %496, i64 %488, i64 %490
  store i64 %497, i64* %495, align 8, !tbaa !2428
  %498 = load i8, i8* %BRANCH_TAKEN
  %499 = icmp eq i8 %498, 1
  %500 = load i64, i64* %PC
  br i1 %499, label %block_405396, label %block_405391

block_4053b0:                                     ; preds = %block_40539b
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 22
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 5
  store i64 %504, i64* %PC
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %502, i64* %505, align 8, !tbaa !2428
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 32
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i64*
  %511 = load i64, i64* %510
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 40
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  %519 = sub i64 %512, %518
  %520 = icmp ugt i64 %518, %512
  %521 = zext i1 %520 to i8
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %521, i8* %522, align 1, !tbaa !2433
  %523 = trunc i64 %519 to i32
  %524 = and i32 %523, 255
  %525 = call i32 @llvm.ctpop.i32(i32 %524) #16
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  %528 = xor i8 %527, 1
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %528, i8* %529, align 1, !tbaa !2447
  %530 = xor i64 %518, %512
  %531 = xor i64 %530, %519
  %532 = lshr i64 %531, 4
  %533 = trunc i64 %532 to i8
  %534 = and i8 %533, 1
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %534, i8* %535, align 1, !tbaa !2448
  %536 = icmp eq i64 %519, 0
  %537 = zext i1 %536 to i8
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %537, i8* %538, align 1, !tbaa !2449
  %539 = lshr i64 %519, 63
  %540 = trunc i64 %539 to i8
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %540, i8* %541, align 1, !tbaa !2450
  %542 = lshr i64 %512, 63
  %543 = lshr i64 %518, 63
  %544 = xor i64 %543, %542
  %545 = xor i64 %539, %542
  %546 = add nuw nsw i64 %545, %544
  %547 = icmp eq i64 %546, 2
  %548 = zext i1 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %548, i8* %549, align 1, !tbaa !2451
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 11
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 6
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 6
  store i64 %555, i64* %PC
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %557 = load i8, i8* %556, align 1, !tbaa !2433
  store i8 %557, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %559 = icmp ne i8 %557, 0
  %560 = select i1 %559, i64 %551, i64 %553
  store i64 %560, i64* %558, align 8, !tbaa !2428
  %561 = load i8, i8* %BRANCH_TAKEN
  %562 = icmp eq i8 %561, 1
  br i1 %562, label %block_4053d9, label %block_4053d4

block_405339:                                     ; preds = %block_405310
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 8
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i64*
  %568 = load i64, i64* %567
  store i64 %568, i64* %RAX, align 8, !tbaa !2428
  %569 = load i64, i64* %RAX
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 3
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = load i64, i64* %RBP
  %575 = sub i64 %574, 24
  %576 = load i64, i64* %RAX
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 4
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %575 to i64*
  store i64 %576, i64* %579
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 8
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 4
  store i64 %583, i64* %PC
  %584 = inttoptr i64 %581 to i64*
  %585 = load i64, i64* %584
  store i64 %585, i64* %RAX, align 8, !tbaa !2428
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 32
  %588 = load i64, i64* %RAX
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 4
  store i64 %590, i64* %PC
  %591 = inttoptr i64 %587 to i64*
  store i64 %588, i64* %591
  %592 = load i64, i64* %RBP
  %593 = sub i64 %592, 16
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 4
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i64*
  %597 = load i64, i64* %596
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 40
  %600 = load i64, i64* %RAX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  br label %block_405354

block_405391:                                     ; preds = %block_405379
  %604 = add i64 %500, 113
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 5
  store i64 %606, i64* %PC
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %604, i64* %607, align 8, !tbaa !2428
  br label %block_405402

block_40542a:                                     ; preds = %block_405402, %block_405310
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405310 ], [ %831, %block_405402 ]
  %608 = load i64, i64* %RSP
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = add i64 48, %608
  store i64 %611, i64* %RSP, align 8, !tbaa !2428
  %612 = icmp ult i64 %611, %608
  %613 = icmp ult i64 %611, 48
  %614 = or i1 %612, %613
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %615, i8* %616, align 1, !tbaa !2433
  %617 = trunc i64 %611 to i32
  %618 = and i32 %617, 255
  %619 = call i32 @llvm.ctpop.i32(i32 %618) #16
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  %622 = xor i8 %621, 1
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %622, i8* %623, align 1, !tbaa !2447
  %624 = xor i64 48, %608
  %625 = xor i64 %624, %611
  %626 = lshr i64 %625, 4
  %627 = trunc i64 %626 to i8
  %628 = and i8 %627, 1
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %628, i8* %629, align 1, !tbaa !2448
  %630 = icmp eq i64 %611, 0
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %631, i8* %632, align 1, !tbaa !2449
  %633 = lshr i64 %611, 63
  %634 = trunc i64 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %634, i8* %635, align 1, !tbaa !2450
  %636 = lshr i64 %608, 63
  %637 = xor i64 %633, %636
  %638 = add nuw nsw i64 %637, %633
  %639 = icmp eq i64 %638, 2
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %640, i8* %641, align 1, !tbaa !2451
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 1
  store i64 %643, i64* %PC
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %645 = load i64, i64* %644, align 8, !tbaa !2428
  %646 = add i64 %645, 8
  %647 = inttoptr i64 %645 to i64*
  %648 = load i64, i64* %647
  store i64 %648, i64* %RBP, align 8, !tbaa !2428
  store i64 %646, i64* %644, align 8, !tbaa !2428
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 1
  store i64 %650, i64* %PC
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %653 = load i64, i64* %652, align 8, !tbaa !2428
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  store i64 %655, i64* %651, align 8, !tbaa !2428
  %656 = add i64 %653, 8
  store i64 %656, i64* %652, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4053b5:                                     ; preds = %block_40539b
  %657 = load i64, i64* %RBP
  %658 = sub i64 %657, 32
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 4
  store i64 %660, i64* %PC
  %661 = inttoptr i64 %658 to i64*
  %662 = load i64, i64* %661
  store i64 %662, i64* %RAX, align 8, !tbaa !2428
  %663 = load i64, i64* %RAX
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 4
  store i64 %665, i64* %PC
  %666 = add i64 8, %663
  store i64 %666, i64* %RAX, align 8, !tbaa !2428
  %667 = icmp ult i64 %666, %663
  %668 = icmp ult i64 %666, 8
  %669 = or i1 %667, %668
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %670, i8* %671, align 1, !tbaa !2433
  %672 = trunc i64 %666 to i32
  %673 = and i32 %672, 255
  %674 = call i32 @llvm.ctpop.i32(i32 %673) #16
  %675 = trunc i32 %674 to i8
  %676 = and i8 %675, 1
  %677 = xor i8 %676, 1
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %677, i8* %678, align 1, !tbaa !2447
  %679 = xor i64 8, %663
  %680 = xor i64 %679, %666
  %681 = lshr i64 %680, 4
  %682 = trunc i64 %681 to i8
  %683 = and i8 %682, 1
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %683, i8* %684, align 1, !tbaa !2448
  %685 = icmp eq i64 %666, 0
  %686 = zext i1 %685 to i8
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %686, i8* %687, align 1, !tbaa !2449
  %688 = lshr i64 %666, 63
  %689 = trunc i64 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %689, i8* %690, align 1, !tbaa !2450
  %691 = lshr i64 %663, 63
  %692 = xor i64 %688, %691
  %693 = add nuw nsw i64 %692, %688
  %694 = icmp eq i64 %693, 2
  %695 = zext i1 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %695, i8* %696, align 1, !tbaa !2451
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 32
  %699 = load i64, i64* %RAX
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %698 to i64*
  store i64 %699, i64* %702
  %703 = load i64, i64* %PC
  %704 = sub i64 %703, 38
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 5
  store i64 %706, i64* %PC
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %704, i64* %707, align 8, !tbaa !2428
  br label %block_40539b

block_405402:                                     ; preds = %block_405391, %block_4053d4
  %MEMORY.3 = phi %struct.Memory* [ %404, %block_4053d4 ], [ %281, %block_405391 ]
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 8
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 4
  store i64 %711, i64* %PC
  %712 = inttoptr i64 %709 to i64*
  %713 = load i64, i64* %712
  store i64 %713, i64* %RDI, align 8, !tbaa !2428
  %714 = load i64, i64* %RBP
  %715 = sub i64 %714, 40
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 4
  store i64 %717, i64* %PC
  %718 = inttoptr i64 %715 to i64*
  %719 = load i64, i64* %718
  store i64 %719, i64* %RAX, align 8, !tbaa !2428
  %720 = load i64, i64* %RAX
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 4
  store i64 %722, i64* %PC
  %723 = add i64 8, %720
  store i64 %723, i64* %RAX, align 8, !tbaa !2428
  %724 = icmp ult i64 %723, %720
  %725 = icmp ult i64 %723, 8
  %726 = or i1 %724, %725
  %727 = zext i1 %726 to i8
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %727, i8* %728, align 1, !tbaa !2433
  %729 = trunc i64 %723 to i32
  %730 = and i32 %729, 255
  %731 = call i32 @llvm.ctpop.i32(i32 %730) #16
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = xor i8 %733, 1
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %734, i8* %735, align 1, !tbaa !2447
  %736 = xor i64 8, %720
  %737 = xor i64 %736, %723
  %738 = lshr i64 %737, 4
  %739 = trunc i64 %738 to i8
  %740 = and i8 %739, 1
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %740, i8* %741, align 1, !tbaa !2448
  %742 = icmp eq i64 %723, 0
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %743, i8* %744, align 1, !tbaa !2449
  %745 = lshr i64 %723, 63
  %746 = trunc i64 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %746, i8* %747, align 1, !tbaa !2450
  %748 = lshr i64 %720, 63
  %749 = xor i64 %745, %748
  %750 = add nuw nsw i64 %749, %745
  %751 = icmp eq i64 %750, 2
  %752 = zext i1 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %752, i8* %753, align 1, !tbaa !2451
  %754 = load i64, i64* %RAX
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 3
  store i64 %756, i64* %PC
  store i64 %754, i64* %RSI, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  %758 = sub i64 %757, 257
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 5
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 5
  store i64 %762, i64* %PC
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %764 = load i64, i64* %763, align 8, !tbaa !2428
  %765 = add i64 %764, -8
  %766 = inttoptr i64 %765 to i64*
  store i64 %760, i64* %766
  store i64 %765, i64* %763, align 8, !tbaa !2428
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %758, i64* %767, align 8, !tbaa !2428
  %768 = load i64, i64* %PC
  %769 = call %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %768, %struct.Memory* %MEMORY.3)
  %770 = load i64, i64* %RBP
  %771 = sub i64 %770, 40
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 4
  store i64 %773, i64* %PC
  %774 = inttoptr i64 %771 to i64*
  %775 = load i64, i64* %774
  store i64 %775, i64* %RAX, align 8, !tbaa !2428
  %776 = load i64, i64* %RAX
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 4
  store i64 %778, i64* %PC
  %779 = add i64 8, %776
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = icmp ult i64 %779, %776
  %781 = icmp ult i64 %779, 8
  %782 = or i1 %780, %781
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %783, i8* %784, align 1, !tbaa !2433
  %785 = trunc i64 %779 to i32
  %786 = and i32 %785, 255
  %787 = call i32 @llvm.ctpop.i32(i32 %786) #16
  %788 = trunc i32 %787 to i8
  %789 = and i8 %788, 1
  %790 = xor i8 %789, 1
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %790, i8* %791, align 1, !tbaa !2447
  %792 = xor i64 8, %776
  %793 = xor i64 %792, %779
  %794 = lshr i64 %793, 4
  %795 = trunc i64 %794 to i8
  %796 = and i8 %795, 1
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %796, i8* %797, align 1, !tbaa !2448
  %798 = icmp eq i64 %779, 0
  %799 = zext i1 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %799, i8* %800, align 1, !tbaa !2449
  %801 = lshr i64 %779, 63
  %802 = trunc i64 %801 to i8
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %802, i8* %803, align 1, !tbaa !2450
  %804 = lshr i64 %776, 63
  %805 = xor i64 %801, %804
  %806 = add nuw nsw i64 %805, %801
  %807 = icmp eq i64 %806, 2
  %808 = zext i1 %807 to i8
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %808, i8* %809, align 1, !tbaa !2451
  %810 = load i64, i64* %RBP
  %811 = sub i64 %810, 16
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 4
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %811 to i64*
  %815 = load i64, i64* %814
  store i64 %815, i64* %RSI, align 8, !tbaa !2428
  %816 = load i64, i64* %RAX
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 3
  store i64 %818, i64* %PC
  store i64 %816, i64* %RDI, align 8, !tbaa !2428
  %819 = load i64, i64* %PC
  %820 = sub i64 %819, 277
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 5
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 5
  store i64 %824, i64* %PC
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %826 = load i64, i64* %825, align 8, !tbaa !2428
  %827 = add i64 %826, -8
  %828 = inttoptr i64 %827 to i64*
  store i64 %822, i64* %828
  store i64 %827, i64* %825, align 8, !tbaa !2428
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %820, i64* %829, align 8, !tbaa !2428
  %830 = load i64, i64* %PC
  %831 = call %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %830, %struct.Memory* %769)
  br label %block_40542a

block_405354:                                     ; preds = %block_405339, %block_4053d9
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_405339 ], [ %404, %block_4053d9 ]
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %833, i64* %836, align 8, !tbaa !2428
  br label %block_405359
}

; Function Attrs: noinline
define %struct.Memory* @sub_405750__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405750:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %ECX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %ESI = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 96
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 96
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2433
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = xor i64 96, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2448
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2449
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2450
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2451
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %88 = load i64, i64* %RCX
  %89 = load i32, i32* %ECX
  %90 = zext i32 %89 to i64
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = xor i64 %90, %88
  %94 = trunc i64 %93 to i32
  %95 = and i64 %93, 4294967295
  store i64 %95, i64* %RCX, align 8, !tbaa !2428
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %96, align 1, !tbaa !2433
  %97 = and i32 %94, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2447
  %103 = icmp eq i32 %94, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2449
  %106 = lshr i32 %94, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2450
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %109, align 1, !tbaa !2451
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %110, align 1, !tbaa !2448
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 8
  %113 = load i64, i64* %RDI
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %112 to i64*
  store i64 %113, i64* %116
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 16
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 8
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RSI, align 8, !tbaa !2428
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 24
  %131 = load i64, i64* %RSI
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RAX
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 3
  store i64 %137, i64* %PC
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %138 = load i32, i32* %ECX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 2
  store i64 %141, i64* %PC
  %142 = and i64 %139, 4294967295
  store i64 %142, i64* %RSI, align 8, !tbaa !2428
  %143 = load i64, i64* %PC
  %144 = sub i64 %143, 10083
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %150 = load i64, i64* %149, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %146, i64* %152
  store i64 %151, i64* %149, align 8, !tbaa !2428
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %153, align 8, !tbaa !2428
  %154 = load i64, i64* %PC
  %155 = call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %154, %struct.Memory* %2)
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 32
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %157 to i64*
  store i64 %158, i64* %161
  br label %block_40577c

block_4057d2:                                     ; preds = %block_4057b6
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 37
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  store i64 %165, i64* %PC
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %163, i64* %166, align 8, !tbaa !2428
  br label %block_4057f7

block_405791:                                     ; preds = %block_40577c
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 204
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 5
  store i64 %170, i64* %PC
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %168, i64* %171, align 8, !tbaa !2428
  %172 = load i64, i64* %RSP
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = add i64 96, %172
  store i64 %175, i64* %RSP, align 8, !tbaa !2428
  %176 = icmp ult i64 %175, %172
  %177 = icmp ult i64 %175, 96
  %178 = or i1 %176, %177
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %179, i8* %180, align 1, !tbaa !2433
  %181 = trunc i64 %175 to i32
  %182 = and i32 %181, 255
  %183 = call i32 @llvm.ctpop.i32(i32 %182) #16
  %184 = trunc i32 %183 to i8
  %185 = and i8 %184, 1
  %186 = xor i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %186, i8* %187, align 1, !tbaa !2447
  %188 = xor i64 96, %172
  %189 = xor i64 %188, %175
  %190 = lshr i64 %189, 4
  %191 = trunc i64 %190 to i8
  %192 = and i8 %191, 1
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %192, i8* %193, align 1, !tbaa !2448
  %194 = icmp eq i64 %175, 0
  %195 = zext i1 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %195, i8* %196, align 1, !tbaa !2449
  %197 = lshr i64 %175, 63
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %198, i8* %199, align 1, !tbaa !2450
  %200 = lshr i64 %172, 63
  %201 = xor i64 %197, %200
  %202 = add nuw nsw i64 %201, %197
  %203 = icmp eq i64 %202, 2
  %204 = zext i1 %203 to i8
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %204, i8* %205, align 1, !tbaa !2451
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 1
  store i64 %207, i64* %PC
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %209 = load i64, i64* %208, align 8, !tbaa !2428
  %210 = add i64 %209, 8
  %211 = inttoptr i64 %209 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %RBP, align 8, !tbaa !2428
  store i64 %210, i64* %208, align 8, !tbaa !2428
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 1
  store i64 %214, i64* %PC
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %217 = load i64, i64* %216, align 8, !tbaa !2428
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  store i64 %219, i64* %215, align 8, !tbaa !2428
  %220 = add i64 %217, 8
  store i64 %220, i64* %216, align 8, !tbaa !2428
  ret %struct.Memory* %241

block_40577c:                                     ; preds = %block_405802, %block_405750
  %MEMORY.0 = phi %struct.Memory* [ %155, %block_405750 ], [ %673, %block_405802 ]
  %221 = load i64, i64* %RBP
  %222 = sub i64 %221, 24
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  store i64 %222, i64* %RDI, align 8, !tbaa !2428
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 16
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  store i64 %226, i64* %RSI, align 8, !tbaa !2428
  %229 = load i64, i64* %PC
  %230 = sub i64 %229, 10036
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  store i64 %234, i64* %PC
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %236 = load i64, i64* %235, align 8, !tbaa !2428
  %237 = add i64 %236, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 %232, i64* %238
  store i64 %237, i64* %235, align 8, !tbaa !2428
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %230, i64* %239, align 8, !tbaa !2428
  %240 = load i64, i64* %PC
  %241 = call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %240, %struct.Memory* %MEMORY.0)
  %242 = load i8, i8* %AL
  %243 = zext i8 %242 to i64
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 2
  store i64 %245, i64* %PC
  %246 = and i64 1, %243
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %248, align 1, !tbaa !2433
  %249 = trunc i64 %246 to i32
  %250 = and i32 %249, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2447
  %256 = icmp eq i8 %247, 0
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %257, i8* %258, align 1, !tbaa !2449
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %259, align 1, !tbaa !2450
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %260, align 1, !tbaa !2451
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %261, align 1, !tbaa !2448
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 11
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 6
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 6
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %269 = load i8, i8* %268, align 1, !tbaa !2449
  %270 = icmp eq i8 %269, 0
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %273 = select i1 %270, i64 %263, i64 %265
  store i64 %273, i64* %272, align 8, !tbaa !2428
  %274 = load i8, i8* %BRANCH_TAKEN
  %275 = icmp eq i8 %274, 1
  br i1 %275, label %block_405796, label %block_405791

block_405796:                                     ; preds = %block_40577c
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 24
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 4
  store i64 %279, i64* %PC
  store i64 %277, i64* %RDI, align 8, !tbaa !2428
  %280 = load i64, i64* %PC
  %281 = sub i64 %280, 10010
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 5
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  store i64 %285, i64* %PC
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %287 = load i64, i64* %286, align 8, !tbaa !2428
  %288 = add i64 %287, -8
  %289 = inttoptr i64 %288 to i64*
  store i64 %283, i64* %289
  store i64 %288, i64* %286, align 8, !tbaa !2428
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %281, i64* %290, align 8, !tbaa !2428
  %291 = load i64, i64* %PC
  %292 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %291, %struct.Memory* %241)
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 3
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 40
  %300 = load i64, i64* %RAX
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %299 to i64*
  store i64 %300, i64* %303
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 24
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i64, i64* %RBP
  %311 = sub i64 %310, 48
  %312 = load i64, i64* %RAX
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 4
  store i64 %314, i64* %PC
  %315 = inttoptr i64 %311 to i64*
  store i64 %312, i64* %315
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 48
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 4
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 56
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 4
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %323 to i64*
  store i64 %324, i64* %327
  br label %block_4057b6

block_4057d7:                                     ; preds = %block_4057b6
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 56
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 4
  store i64 %331, i64* %PC
  store i64 %329, i64* %RDI, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 2075
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %343, %struct.Memory* %532)
  %345 = load i64, i64* %RAX
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC
  store i64 %345, i64* %RDI, align 8, !tbaa !2428
  %348 = load i64, i64* %PC
  %349 = sub i64 %348, 10083
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 5
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 5
  store i64 %353, i64* %PC
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %355 = load i64, i64* %354, align 8, !tbaa !2428
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %351, i64* %357
  store i64 %356, i64* %354, align 8, !tbaa !2428
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %349, i64* %358, align 8, !tbaa !2428
  %359 = load i64, i64* %PC
  %360 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %359, %struct.Memory* %344)
  %361 = load i64, i64* %RBP
  %362 = sub i64 %361, 40
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %365 = load i64, i64* %RAX
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 3
  store i64 %367, i64* %PC
  store i64 %365, i64* %RSI, align 8, !tbaa !2428
  %368 = load i64, i64* %PC
  %369 = sub i64 %368, 10063
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 5
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 5
  store i64 %373, i64* %PC
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %375 = load i64, i64* %374, align 8, !tbaa !2428
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %371, i64* %377
  store i64 %376, i64* %374, align 8, !tbaa !2428
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %369, i64* %378, align 8, !tbaa !2428
  %379 = load i64, i64* %PC
  %380 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %379, %struct.Memory* %360)
  %381 = load i64, i64* %RBP
  %382 = sub i64 %381, 65
  %383 = load i8, i8* %AL
  %384 = zext i8 %383 to i64
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 3
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %382 to i8*
  store i8 %383, i8* %387
  br label %block_4057f7

block_405807:                                     ; preds = %block_4057f7
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 56
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 4
  store i64 %391, i64* %PC
  store i64 %389, i64* %RDI, align 8, !tbaa !2428
  %392 = load i64, i64* %PC
  %393 = sub i64 %392, 10123
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 5
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 5
  store i64 %397, i64* %PC
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %399 = load i64, i64* %398, align 8, !tbaa !2428
  %400 = add i64 %399, -8
  %401 = inttoptr i64 %400 to i64*
  store i64 %395, i64* %401
  store i64 %400, i64* %398, align 8, !tbaa !2428
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %393, i64* %402, align 8, !tbaa !2428
  %403 = load i64, i64* %PC
  %404 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %403, %struct.Memory* %MEMORY.1)
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 48
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 4
  store i64 %408, i64* %PC
  store i64 %406, i64* %RDI, align 8, !tbaa !2428
  %409 = load i64, i64* %RBP
  %410 = sub i64 %409, 80
  %411 = load i64, i64* %RAX
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %410 to i64*
  store i64 %411, i64* %414
  %415 = load i64, i64* %PC
  %416 = sub i64 %415, 10136
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 5
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 5
  store i64 %420, i64* %PC
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %422 = load i64, i64* %421, align 8, !tbaa !2428
  %423 = add i64 %422, -8
  %424 = inttoptr i64 %423 to i64*
  store i64 %418, i64* %424
  store i64 %423, i64* %421, align 8, !tbaa !2428
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %416, i64* %425, align 8, !tbaa !2428
  %426 = load i64, i64* %PC
  %427 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %426, %struct.Memory* %404)
  %428 = load i64, i64* %RBP
  %429 = sub i64 %428, 80
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 4
  store i64 %431, i64* %PC
  %432 = inttoptr i64 %429 to i64*
  %433 = load i64, i64* %432
  store i64 %433, i64* %RDI, align 8, !tbaa !2428
  %434 = load i64, i64* %RDI
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 3
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437
  store i64 %438, i64* %RCX, align 8, !tbaa !2428
  %439 = load i64, i64* %RAX
  %440 = load i64, i64* %RCX
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 3
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %439 to i64*
  store i64 %440, i64* %443
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 48
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC
  store i64 %445, i64* %RDI, align 8, !tbaa !2428
  %448 = load i64, i64* %PC
  %449 = sub i64 %448, 2155
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 5
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 5
  store i64 %453, i64* %PC
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %455 = load i64, i64* %454, align 8, !tbaa !2428
  %456 = add i64 %455, -8
  %457 = inttoptr i64 %456 to i64*
  store i64 %451, i64* %457
  store i64 %456, i64* %454, align 8, !tbaa !2428
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %449, i64* %458, align 8, !tbaa !2428
  %459 = load i64, i64* %PC
  %460 = call %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %459, %struct.Memory* %427)
  %461 = load i64, i64* %RBP
  %462 = sub i64 %461, 88
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 4
  store i64 %465, i64* %PC
  %466 = inttoptr i64 %462 to i64*
  store i64 %463, i64* %466
  %467 = load i64, i64* %PC
  %468 = sub i64 %467, 126
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 5
  store i64 %470, i64* %PC
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %468, i64* %471, align 8, !tbaa !2428
  br label %block_4057b6

block_4057f7:                                     ; preds = %block_4057d7, %block_4057d2
  %MEMORY.1 = phi %struct.Memory* [ %380, %block_4057d7 ], [ %532, %block_4057d2 ]
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 65
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 3
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i8*
  %477 = load i8, i8* %476
  store i8 %477, i8* %AL, align 1, !tbaa !2432
  %478 = load i8, i8* %AL
  %479 = zext i8 %478 to i64
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 2
  store i64 %481, i64* %PC
  %482 = and i64 1, %479
  %483 = trunc i64 %482 to i8
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %484, align 1, !tbaa !2433
  %485 = trunc i64 %482 to i32
  %486 = and i32 %485, 255
  %487 = call i32 @llvm.ctpop.i32(i32 %486) #16
  %488 = trunc i32 %487 to i8
  %489 = and i8 %488, 1
  %490 = xor i8 %489, 1
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %490, i8* %491, align 1, !tbaa !2447
  %492 = icmp eq i8 %483, 0
  %493 = zext i1 %492 to i8
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %493, i8* %494, align 1, !tbaa !2449
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %495, align 1, !tbaa !2450
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %496, align 1, !tbaa !2451
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %497, align 1, !tbaa !2448
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 11
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 6
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 6
  store i64 %503, i64* %PC
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %505 = load i8, i8* %504, align 1, !tbaa !2449
  %506 = icmp eq i8 %505, 0
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %509 = select i1 %506, i64 %499, i64 %501
  store i64 %509, i64* %508, align 8, !tbaa !2428
  %510 = load i8, i8* %BRANCH_TAKEN
  %511 = icmp eq i8 %510, 1
  br i1 %511, label %block_405807, label %block_405802

block_4057b6:                                     ; preds = %block_405807, %block_405796
  %MEMORY.2 = phi %struct.Memory* [ %292, %block_405796 ], [ %460, %block_405807 ]
  %512 = load i64, i64* %RBP
  %513 = sub i64 %512, 48
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 4
  store i64 %515, i64* %PC
  store i64 %513, i64* %RDI, align 8, !tbaa !2428
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 8
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 4
  store i64 %519, i64* %PC
  store i64 %517, i64* %RSI, align 8, !tbaa !2428
  %520 = load i64, i64* %PC
  %521 = sub i64 %520, 10094
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 5
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 5
  store i64 %525, i64* %PC
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %527 = load i64, i64* %526, align 8, !tbaa !2428
  %528 = add i64 %527, -8
  %529 = inttoptr i64 %528 to i64*
  store i64 %523, i64* %529
  store i64 %528, i64* %526, align 8, !tbaa !2428
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %521, i64* %530, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %531, %struct.Memory* %MEMORY.2)
  %533 = load i64, i64* %RCX
  %534 = load i32, i32* %ECX
  %535 = zext i32 %534 to i64
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 2
  store i64 %537, i64* %PC
  %538 = xor i64 %535, %533
  %539 = trunc i64 %538 to i32
  %540 = and i64 %538, 4294967295
  store i64 %540, i64* %RCX, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %541, align 1, !tbaa !2433
  %542 = and i32 %539, 255
  %543 = call i32 @llvm.ctpop.i32(i32 %542) #16
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = xor i8 %545, 1
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %546, i8* %547, align 1, !tbaa !2447
  %548 = icmp eq i32 %539, 0
  %549 = zext i1 %548 to i8
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %549, i8* %550, align 1, !tbaa !2449
  %551 = lshr i32 %539, 31
  %552 = trunc i32 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %552, i8* %553, align 1, !tbaa !2450
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %554, align 1, !tbaa !2451
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %555, align 1, !tbaa !2448
  %556 = load i8, i8* %CL
  %557 = zext i8 %556 to i64
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 2
  store i64 %559, i64* %PC
  store i8 %556, i8* %DL, align 1, !tbaa !2432
  %560 = load i8, i8* %AL
  %561 = zext i8 %560 to i64
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 2
  store i64 %563, i64* %PC
  %564 = and i64 1, %561
  %565 = trunc i64 %564 to i8
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %566, align 1, !tbaa !2433
  %567 = trunc i64 %564 to i32
  %568 = and i32 %567, 255
  %569 = call i32 @llvm.ctpop.i32(i32 %568) #16
  %570 = trunc i32 %569 to i8
  %571 = and i8 %570, 1
  %572 = xor i8 %571, 1
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %572, i8* %573, align 1, !tbaa !2447
  %574 = icmp eq i8 %565, 0
  %575 = zext i1 %574 to i8
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %575, i8* %576, align 1, !tbaa !2449
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %577, align 1, !tbaa !2450
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %578, align 1, !tbaa !2451
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %579, align 1, !tbaa !2448
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 65
  %582 = load i8, i8* %DL
  %583 = zext i8 %582 to i64
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 3
  store i64 %585, i64* %PC
  %586 = inttoptr i64 %581 to i8*
  store i8 %582, i8* %586
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 11
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 6
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 6
  store i64 %592, i64* %PC
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %594 = load i8, i8* %593, align 1, !tbaa !2449
  %595 = icmp eq i8 %594, 0
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %598 = select i1 %595, i64 %588, i64 %590
  store i64 %598, i64* %597, align 8, !tbaa !2428
  %599 = load i8, i8* %BRANCH_TAKEN
  %600 = icmp eq i8 %599, 1
  br i1 %600, label %block_4057d7, label %block_4057d2

block_405802:                                     ; preds = %block_4057f7
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 55
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 5
  store i64 %604, i64* %PC
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %602, i64* %605, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 48
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  store i64 %607, i64* %RDI, align 8, !tbaa !2428
  %610 = load i64, i64* %PC
  %611 = sub i64 %610, 10173
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 5
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %617 = load i64, i64* %616, align 8, !tbaa !2428
  %618 = add i64 %617, -8
  %619 = inttoptr i64 %618 to i64*
  store i64 %613, i64* %619
  store i64 %618, i64* %616, align 8, !tbaa !2428
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %611, i64* %620, align 8, !tbaa !2428
  %621 = load i64, i64* %PC
  %622 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %621, %struct.Memory* %MEMORY.1)
  %623 = load i64, i64* %RBP
  %624 = sub i64 %623, 24
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 4
  store i64 %626, i64* %PC
  store i64 %624, i64* %RDI, align 8, !tbaa !2428
  %627 = load i64, i64* %RSI
  %628 = load i32, i32* %ESI
  %629 = zext i32 %628 to i64
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 2
  store i64 %631, i64* %PC
  %632 = xor i64 %629, %627
  %633 = trunc i64 %632 to i32
  %634 = and i64 %632, 4294967295
  store i64 %634, i64* %RSI, align 8, !tbaa !2428
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %635, align 1, !tbaa !2433
  %636 = and i32 %633, 255
  %637 = call i32 @llvm.ctpop.i32(i32 %636) #16
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = xor i8 %639, 1
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %640, i8* %641, align 1, !tbaa !2447
  %642 = icmp eq i32 %633, 0
  %643 = zext i1 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %643, i8* %644, align 1, !tbaa !2449
  %645 = lshr i32 %633, 31
  %646 = trunc i32 %645 to i8
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %646, i8* %647, align 1, !tbaa !2450
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %648, align 1, !tbaa !2451
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %649, align 1, !tbaa !2448
  %650 = load i64, i64* %RBP
  %651 = sub i64 %650, 40
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %651 to i64*
  %655 = load i64, i64* %654
  store i64 %655, i64* %RCX, align 8, !tbaa !2428
  %656 = load i64, i64* %RAX
  %657 = load i64, i64* %RCX
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 3
  store i64 %659, i64* %PC
  %660 = inttoptr i64 %656 to i64*
  store i64 %657, i64* %660
  %661 = load i64, i64* %PC
  %662 = sub i64 %661, 10303
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 5
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 5
  store i64 %666, i64* %PC
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %668 = load i64, i64* %667, align 8, !tbaa !2428
  %669 = add i64 %668, -8
  %670 = inttoptr i64 %669 to i64*
  store i64 %664, i64* %670
  store i64 %669, i64* %667, align 8, !tbaa !2428
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %662, i64* %671, align 8, !tbaa !2428
  %672 = load i64, i64* %PC
  %673 = call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %672, %struct.Memory* %622)
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 64
  %676 = load i64, i64* %RAX
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 4
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %675 to i64*
  store i64 %676, i64* %679
  %680 = load i64, i64* %PC
  %681 = sub i64 %680, 220
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 5
  store i64 %683, i64* %PC
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %681, i64* %684, align 8, !tbaa !2428
  br label %block_40577c
}

; Function Attrs: noinline
define %struct.Memory* @sub_406660__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406660:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_406690__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_406250__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406250:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 72
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 134
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_406300__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_400830___cxx_global_var_init_11(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400830:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 10
  store i64 %61, i64* %PC
  store i64 ptrtoint (%V10Data_type* @V10Data to i64), i64* %RAX, align 8, !tbaa !2428
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 8
  %64 = load i64, i64* %RAX
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %63 to i64*
  store i64 %64, i64* %67
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %69, i64* %72, align 8, !tbaa !2428
  br label %block_40084b

block_40084b:                                     ; preds = %block_40084b, %block_400830
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400830 ], [ %100, %block_40084b ]
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RAX
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5082
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* %0, i64 %99, %struct.Memory* %MEMORY.0)
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 10
  store i64 %102, i64* %PC
  store i64 ptrtoint (%V10Data_type* @V10Data to i64), i64* %RAX, align 8, !tbaa !2428
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 6
  store i64 %105, i64* %PC
  %106 = add i64 16000, %103
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = icmp ult i64 %106, %103
  %108 = icmp ult i64 %106, 16000
  %109 = or i1 %107, %108
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %110, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %106 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = xor i64 16000, %103
  %120 = xor i64 %119, %106
  %121 = lshr i64 %120, 4
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %123, i8* %124, align 1, !tbaa !2448
  %125 = icmp eq i64 %106, 0
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %126, i8* %127, align 1, !tbaa !2449
  %128 = lshr i64 %106, 63
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %129, i8* %130, align 1, !tbaa !2450
  %131 = lshr i64 %103, 63
  %132 = xor i64 %128, %131
  %133 = add nuw nsw i64 %132, %128
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %135, i8* %136, align 1, !tbaa !2451
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %RDI
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = add i64 8, %143
  store i64 %146, i64* %RDI, align 8, !tbaa !2428
  %147 = icmp ult i64 %146, %143
  %148 = icmp ult i64 %146, 8
  %149 = or i1 %147, %148
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %150, i8* %151, align 1, !tbaa !2433
  %152 = trunc i64 %146 to i32
  %153 = and i32 %152, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2447
  %159 = xor i64 8, %143
  %160 = xor i64 %159, %146
  %161 = lshr i64 %160, 4
  %162 = trunc i64 %161 to i8
  %163 = and i8 %162, 1
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %163, i8* %164, align 1, !tbaa !2448
  %165 = icmp eq i64 %146, 0
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %166, i8* %167, align 1, !tbaa !2449
  %168 = lshr i64 %146, 63
  %169 = trunc i64 %168 to i8
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %169, i8* %170, align 1, !tbaa !2450
  %171 = lshr i64 %143, 63
  %172 = xor i64 %168, %171
  %173 = add nuw nsw i64 %172, %168
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %175, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %RDI
  %178 = load i64, i64* %RAX
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 3
  store i64 %180, i64* %PC
  %181 = sub i64 %177, %178
  %182 = icmp ult i64 %177, %178
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %183, i8* %184, align 1, !tbaa !2433
  %185 = trunc i64 %181 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %190, i8* %191, align 1, !tbaa !2447
  %192 = xor i64 %178, %177
  %193 = xor i64 %192, %181
  %194 = lshr i64 %193, 4
  %195 = trunc i64 %194 to i8
  %196 = and i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %196, i8* %197, align 1, !tbaa !2448
  %198 = icmp eq i64 %181, 0
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %199, i8* %200, align 1, !tbaa !2449
  %201 = lshr i64 %181, 63
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %202, i8* %203, align 1, !tbaa !2450
  %204 = lshr i64 %177, 63
  %205 = lshr i64 %178, 63
  %206 = xor i64 %205, %204
  %207 = xor i64 %201, %204
  %208 = add nuw nsw i64 %207, %206
  %209 = icmp eq i64 %208, 2
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %210, i8* %211, align 1, !tbaa !2451
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 8
  %214 = load i64, i64* %RDI
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 47
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 6
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %225 = load i8, i8* %224, align 1, !tbaa !2449
  %226 = icmp eq i8 %225, 0
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = select i1 %226, i64 %219, i64 %221
  store i64 %229, i64* %228, align 8, !tbaa !2428
  %230 = load i8, i8* %BRANCH_TAKEN
  %231 = icmp eq i8 %230, 1
  br i1 %231, label %block_40084b, label %block_400880

block_400880:                                     ; preds = %block_40084b
  %232 = load i64, i64* %RSP
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = add i64 16, %232
  store i64 %235, i64* %RSP, align 8, !tbaa !2428
  %236 = icmp ult i64 %235, %232
  %237 = icmp ult i64 %235, 16
  %238 = or i1 %236, %237
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %239, i8* %240, align 1, !tbaa !2433
  %241 = trunc i64 %235 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2447
  %248 = xor i64 16, %232
  %249 = xor i64 %248, %235
  %250 = lshr i64 %249, 4
  %251 = trunc i64 %250 to i8
  %252 = and i8 %251, 1
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %252, i8* %253, align 1, !tbaa !2448
  %254 = icmp eq i64 %235, 0
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %255, i8* %256, align 1, !tbaa !2449
  %257 = lshr i64 %235, 63
  %258 = trunc i64 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %258, i8* %259, align 1, !tbaa !2450
  %260 = lshr i64 %232, 63
  %261 = xor i64 %257, %260
  %262 = add nuw nsw i64 %261, %257
  %263 = icmp eq i64 %262, 2
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %264, i8* %265, align 1, !tbaa !2451
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 1
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271
  store i64 %272, i64* %RBP, align 8, !tbaa !2428
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 1
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %277 = load i64, i64* %276, align 8, !tbaa !2428
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  store i64 %279, i64* %275, align 8, !tbaa !2428
  %280 = add i64 %277, 8
  store i64 %280, i64* %276, align 8, !tbaa !2428
  ret %struct.Memory* %100
}

; Function Attrs: noinline
define %struct.Memory* @sub_406290__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406290:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4030d0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4030d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_403100__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b80___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400b80:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_609100__bss_type, %seg_609100__bss_type* @seg_609100__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2433
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2448
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2449
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2450
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2451
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2449
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400ba0, label %block_400b89

block_400ba0:                                     ; preds = %block_400b80
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400b89:                                     ; preds = %block_400b80
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400b10_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_609100__bss_type, %seg_609100__bss_type* @seg_609100__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403d40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 16
  %33 = load i64, i64* %RDI
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 24
  %39 = load i64, i64* %RSI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 16
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RSI, align 8, !tbaa !2428
  %49 = load i64, i64* %RSI
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %RSI
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 24
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %RSI, align 8, !tbaa !2428
  %66 = load i64, i64* %RSI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = shl i64 %66, 2
  %70 = icmp slt i64 %69, 0
  %71 = shl i64 %69, 1
  store i64 %71, i64* %RSI, align 8, !tbaa !2428
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %73 = zext i1 %70 to i8
  store i8 %73, i8* %72, align 1, !tbaa !2432
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %75 = trunc i64 %71 to i32
  %76 = and i32 %75, 254
  %77 = call i32 @llvm.ctpop.i32(i32 %76) #16
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  store i8 %80, i8* %74, align 1, !tbaa !2432
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %81, align 1, !tbaa !2432
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %83 = icmp eq i64 %71, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %82, align 1, !tbaa !2432
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %86 = lshr i64 %71, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %85, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %88, align 1, !tbaa !2432
  %89 = load i64, i64* %RSI
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94
  %96 = add i64 %95, %89
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %89
  %98 = icmp ult i64 %96, %95
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 %95, %89
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %89, 63
  %122 = lshr i64 %95, 63
  %123 = xor i64 %118, %121
  %124 = xor i64 %118, %122
  %125 = add nuw nsw i64 %123, %124
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %127, i8* %128, align 1, !tbaa !2451
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 8
  %131 = load i64, i64* %RSI
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 8
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 1
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %144 = load i64, i64* %143, align 8, !tbaa !2428
  %145 = add i64 %144, 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RBP, align 8, !tbaa !2428
  store i64 %145, i64* %143, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 1
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %152 = load i64, i64* %151, align 8, !tbaa !2428
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %150, align 8, !tbaa !2428
  %155 = add i64 %152, 8
  store i64 %155, i64* %151, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405e90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_403160__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403160:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_403190__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_406480__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406480:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 9
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ESI = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = load i64, i64* %RBP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 1
  store i64 %34, i64* %PC
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %36 = load i64, i64* %35, align 8, !tbaa !2428
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %32, i64* %38
  store i64 %37, i64* %35, align 8, !tbaa !2428
  %39 = load i64, i64* %RSP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 3
  store i64 %41, i64* %PC
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC
  %45 = sub i64 %42, 48
  store i64 %45, i64* %RSP, align 8, !tbaa !2428
  %46 = icmp ult i64 %42, 48
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %47, i8* %48, align 1, !tbaa !2433
  %49 = trunc i64 %45 to i32
  %50 = and i32 %49, 255
  %51 = call i32 @llvm.ctpop.i32(i32 %50) #16
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = xor i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = xor i64 48, %42
  %57 = xor i64 %56, %45
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = icmp eq i64 %45, 0
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = lshr i64 %45, 63
  %66 = trunc i64 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = lshr i64 %42, 63
  %69 = xor i64 %65, %68
  %70 = add nuw nsw i64 %69, %68
  %71 = icmp eq i64 %70, 2
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %72, i8* %73, align 1, !tbaa !2451
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 8
  %76 = load i64, i64* %RDI
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 16
  %82 = load i64, i64* %RSI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %81 to i64*
  store i64 %82, i64* %85
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 24
  %88 = bitcast %union.vec128_t* %XMM0 to i8*
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  %91 = bitcast i8* %88 to double*
  %92 = load double, double* %91, align 1
  %93 = inttoptr i64 %87 to double*
  store double %92, double* %93
  br label %block_406495

block_4064af:                                     ; preds = %block_406495
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RSI
  %99 = load i32, i32* %ESI
  %100 = zext i32 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 2
  store i64 %102, i64* %PC
  %103 = xor i64 %100, %98
  %104 = trunc i64 %103 to i32
  %105 = and i64 %103, 4294967295
  store i64 %105, i64* %RSI, align 8, !tbaa !2428
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %106, align 1, !tbaa !2433
  %107 = and i32 %104, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = icmp eq i32 %104, 0
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i32 %104, 31
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %117, i8* %118, align 1, !tbaa !2450
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %119, align 1, !tbaa !2451
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %120, align 1, !tbaa !2448
  %121 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 24
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to double*
  %127 = load double, double* %126
  %128 = bitcast i8* %121 to double*
  store double %127, double* %128, align 1, !tbaa !2452
  %129 = getelementptr inbounds i8, i8* %121, i64 8
  %130 = bitcast i8* %129 to double*
  store double 0.000000e+00, double* %130, align 1, !tbaa !2452
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 40
  %133 = bitcast %union.vec128_t* %XMM0 to i8*
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 5
  store i64 %135, i64* %PC
  %136 = bitcast i8* %133 to double*
  %137 = load double, double* %136, align 1
  %138 = inttoptr i64 %132 to double*
  store double %137, double* %138
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 7679
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %150, %struct.Memory* %234)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 32
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 32
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %157 to i64*
  store i64 %158, i64* %161
  %162 = load i64, i64* %PC
  %163 = sub i64 %162, 7580
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %169 = load i64, i64* %168, align 8, !tbaa !2428
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %165, i64* %171
  store i64 %170, i64* %168, align 8, !tbaa !2428
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %163, i64* %172, align 8, !tbaa !2428
  %173 = load i64, i64* %PC
  %174 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %173, %struct.Memory* %151)
  %175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 40
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to double*
  %181 = load double, double* %180
  %182 = bitcast i8* %175 to double*
  store double %181, double* %182, align 1, !tbaa !2452
  %183 = getelementptr inbounds i8, i8* %175, i64 8
  %184 = bitcast i8* %183 to double*
  store double 0.000000e+00, double* %184, align 1, !tbaa !2452
  %185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %186 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %187 = load i64, i64* %RAX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = bitcast i8* %186 to double*
  %191 = load double, double* %190, align 1
  %192 = getelementptr inbounds i8, i8* %186, i64 8
  %193 = bitcast i8* %192 to i64*
  %194 = load i64, i64* %193, align 1
  %195 = inttoptr i64 %187 to double*
  %196 = load double, double* %195
  %197 = fadd double %191, %196
  %198 = bitcast i8* %185 to double*
  store double %197, double* %198, align 1, !tbaa !2452
  %199 = getelementptr inbounds i8, i8* %185, i64 8
  %200 = bitcast i8* %199 to i64*
  store i64 %194, i64* %200, align 1, !tbaa !2452
  %201 = load i64, i64* %RBP
  %202 = sub i64 %201, 24
  %203 = bitcast %union.vec128_t* %XMM0 to i8*
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = bitcast i8* %203 to double*
  %207 = load double, double* %206, align 1
  %208 = inttoptr i64 %202 to double*
  store double %207, double* %208
  %209 = load i64, i64* %PC
  %210 = sub i64 %209, 74
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %210, i64* %213, align 8, !tbaa !2428
  br label %block_406495

block_406495:                                     ; preds = %block_4064af, %block_406480
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_406480 ], [ %174, %block_4064af ]
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 8
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  store i64 %215, i64* %RDI, align 8, !tbaa !2428
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 16
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 4
  store i64 %221, i64* %PC
  store i64 %219, i64* %RSI, align 8, !tbaa !2428
  %222 = load i64, i64* %PC
  %223 = sub i64 %222, 7581
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 5
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %225, i64* %231
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %232, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %233, %struct.Memory* %MEMORY.0)
  %235 = load i8, i8* %AL
  %236 = zext i8 %235 to i64
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = and i64 1, %236
  %240 = trunc i64 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %241, align 1, !tbaa !2433
  %242 = trunc i64 %239 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #16
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2447
  %249 = icmp eq i8 %240, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2449
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %252, align 1, !tbaa !2450
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %253, align 1, !tbaa !2451
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %254, align 1, !tbaa !2448
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 11
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 6
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 6
  store i64 %260, i64* %PC
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %262 = load i8, i8* %261, align 1, !tbaa !2449
  %263 = icmp eq i8 %262, 0
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %266 = select i1 %263, i64 %256, i64 %258
  store i64 %266, i64* %265, align 8, !tbaa !2428
  %267 = load i8, i8* %BRANCH_TAKEN
  %268 = icmp eq i8 %267, 1
  br i1 %268, label %block_4064af, label %block_4064aa

block_4064aa:                                     ; preds = %block_406495
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 58
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 5
  store i64 %272, i64* %PC
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %270, i64* %273, align 8, !tbaa !2428
  %274 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 24
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 5
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to double*
  %280 = load double, double* %279
  %281 = bitcast i8* %274 to double*
  store double %280, double* %281, align 1, !tbaa !2452
  %282 = getelementptr inbounds i8, i8* %274, i64 8
  %283 = bitcast i8* %282 to double*
  store double 0.000000e+00, double* %283, align 1, !tbaa !2452
  %284 = load i64, i64* %RSP
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = add i64 48, %284
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  %288 = icmp ult i64 %287, %284
  %289 = icmp ult i64 %287, 48
  %290 = or i1 %288, %289
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2433
  %293 = trunc i64 %287 to i32
  %294 = and i32 %293, 255
  %295 = call i32 @llvm.ctpop.i32(i32 %294) #16
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %298, i8* %299, align 1, !tbaa !2447
  %300 = xor i64 48, %284
  %301 = xor i64 %300, %287
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2448
  %306 = icmp eq i64 %287, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2449
  %309 = lshr i64 %287, 63
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2450
  %312 = lshr i64 %284, 63
  %313 = xor i64 %309, %312
  %314 = add nuw nsw i64 %313, %309
  %315 = icmp eq i64 %314, 2
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %316, i8* %317, align 1, !tbaa !2451
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 1
  store i64 %319, i64* %PC
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %321 = load i64, i64* %320, align 8, !tbaa !2428
  %322 = add i64 %321, 8
  %323 = inttoptr i64 %321 to i64*
  %324 = load i64, i64* %323
  store i64 %324, i64* %RBP, align 8, !tbaa !2428
  store i64 %322, i64* %320, align 8, !tbaa !2428
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 1
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %329 = load i64, i64* %328, align 8, !tbaa !2428
  %330 = inttoptr i64 %329 to i64*
  %331 = load i64, i64* %330
  store i64 %331, i64* %327, align 8, !tbaa !2428
  %332 = add i64 %329, 8
  store i64 %332, i64* %328, align 8, !tbaa !2428
  ret %struct.Memory* %234
}

; Function Attrs: noinline
define %struct.Memory* @sub_406320__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406320:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %27 to %union.vec128_t*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = sub i64 %38, 48
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 48
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2433
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #16
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2447
  %52 = xor i64 48, %38
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2450
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2451
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 16
  %72 = bitcast %union.vec128_t* %XMM0 to i8*
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = bitcast i8* %72 to double*
  %76 = load double, double* %75, align 1
  %77 = inttoptr i64 %71 to double*
  store double %76, double* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 24
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 32
  %86 = load i64, i64* %RSI
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %85 to i64*
  store i64 %86, i64* %89
  br label %block_406335

block_406335:                                     ; preds = %block_406343, %block_406320
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_406320 ], [ %215, %block_406343 ]
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 24
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = inttoptr i64 %98 to i64*
  %102 = load i64, i64* %101
  %103 = sub i64 %96, %102
  %104 = icmp ugt i64 %102, %96
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %105, i8* %106, align 1, !tbaa !2433
  %107 = trunc i64 %103 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %112, i8* %113, align 1, !tbaa !2447
  %114 = xor i64 %102, %96
  %115 = xor i64 %114, %103
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %118, i8* %119, align 1, !tbaa !2448
  %120 = icmp eq i64 %103, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2449
  %123 = lshr i64 %103, 63
  %124 = trunc i64 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2450
  %126 = lshr i64 %96, 63
  %127 = lshr i64 %102, 63
  %128 = xor i64 %127, %126
  %129 = xor i64 %123, %126
  %130 = add nuw nsw i64 %129, %128
  %131 = icmp eq i64 %130, 2
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %132, i8* %133, align 1, !tbaa !2451
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 51
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 6
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 6
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %141 = load i8, i8* %140, align 1, !tbaa !2449
  store i8 %141, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %143 = icmp ne i8 %141, 0
  %144 = select i1 %143, i64 %135, i64 %137
  store i64 %144, i64* %142, align 8, !tbaa !2428
  %145 = load i8, i8* %BRANCH_TAKEN
  %146 = icmp eq i8 %145, 1
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 16
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 4
  store i64 %150, i64* %PC
  br i1 %146, label %block_406370, label %block_406343

block_406343:                                     ; preds = %block_406335
  store i64 %148, i64* %RDI, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 24
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = load i64, i64* %RAX
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 3
  store i64 %159, i64* %PC
  store i64 %157, i64* %RCX, align 8, !tbaa !2428
  %160 = load i64, i64* %RCX
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = add i64 8, %160
  store i64 %163, i64* %RCX, align 8, !tbaa !2428
  %164 = icmp ult i64 %163, %160
  %165 = icmp ult i64 %163, 8
  %166 = or i1 %164, %165
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %167, i8* %168, align 1, !tbaa !2433
  %169 = trunc i64 %163 to i32
  %170 = and i32 %169, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #16
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2447
  %176 = xor i64 8, %160
  %177 = xor i64 %176, %163
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %180, i8* %181, align 1, !tbaa !2448
  %182 = icmp eq i64 %163, 0
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %183, i8* %184, align 1, !tbaa !2449
  %185 = lshr i64 %163, 63
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %186, i8* %187, align 1, !tbaa !2450
  %188 = lshr i64 %160, 63
  %189 = xor i64 %185, %188
  %190 = add nuw nsw i64 %189, %185
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %192, i8* %193, align 1, !tbaa !2451
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 24
  %196 = load i64, i64* %RCX
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC
  %199 = inttoptr i64 %195 to i64*
  store i64 %196, i64* %199
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 3
  store i64 %202, i64* %PC
  store i64 %200, i64* %RSI, align 8, !tbaa !2428
  %203 = load i64, i64* %PC
  %204 = sub i64 %203, 1001
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 5
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %210 = load i64, i64* %209, align 8, !tbaa !2428
  %211 = add i64 %210, -8
  %212 = inttoptr i64 %211 to i64*
  store i64 %206, i64* %212
  store i64 %211, i64* %209, align 8, !tbaa !2428
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %204, i64* %213, align 8, !tbaa !2428
  %214 = load i64, i64* %PC
  %215 = call %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* %0, i64 %214, %struct.Memory* %MEMORY.0)
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 40
  %218 = bitcast %union.vec128_t* %XMM0 to i8*
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 5
  store i64 %220, i64* %PC
  %221 = bitcast i8* %218 to double*
  %222 = load double, double* %221, align 1
  %223 = inttoptr i64 %217 to double*
  store double %222, double* %223
  %224 = load i64, i64* %RBP
  %225 = sub i64 %224, 40
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 16
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %231 to i64*
  store i64 %232, i64* %235
  %236 = load i64, i64* %PC
  %237 = sub i64 %236, 54
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 5
  store i64 %239, i64* %PC
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %237, i64* %240, align 8, !tbaa !2428
  br label %block_406335

block_406370:                                     ; preds = %block_406335
  %241 = inttoptr i64 %148 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %RAX, align 8, !tbaa !2428
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 8
  %245 = load i64, i64* %RAX
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC
  %248 = inttoptr i64 %244 to i64*
  store i64 %245, i64* %248
  %249 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 5
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to double*
  %255 = load double, double* %254
  %256 = bitcast i8* %249 to double*
  store double %255, double* %256, align 1, !tbaa !2452
  %257 = getelementptr inbounds i8, i8* %249, i64 8
  %258 = bitcast i8* %257 to double*
  store double 0.000000e+00, double* %258, align 1, !tbaa !2452
  %259 = load i64, i64* %RSP
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 48, %259
  store i64 %262, i64* %RSP, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 48
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2447
  %275 = xor i64 48, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %296 = load i64, i64* %295, align 8, !tbaa !2428
  %297 = add i64 %296, 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RBP, align 8, !tbaa !2428
  store i64 %297, i64* %295, align 8, !tbaa !2428
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 1
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = inttoptr i64 %304 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %302, align 8, !tbaa !2428
  %307 = add i64 %304, 8
  store i64 %307, i64* %303, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400950___cxx_global_var_init_14(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400950:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%dPb_type* @dPb to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4778
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_403190__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403190:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_4031c0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008f0___cxx_global_var_init_13(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4008f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 10
  store i64 %61, i64* %PC
  store i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 8
  %64 = load i64, i64* %RAX
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %63 to i64*
  store i64 %64, i64* %67
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %69, i64* %72, align 8, !tbaa !2428
  br label %block_40090b

block_40090b:                                     ; preds = %block_40090b, %block_4008f0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4008f0 ], [ %100, %block_40090b ]
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RAX
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4890
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* %0, i64 %99, %struct.Memory* %MEMORY.0)
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 10
  store i64 %102, i64* %PC
  store i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 6
  store i64 %105, i64* %PC
  %106 = add i64 16000, %103
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = icmp ult i64 %106, %103
  %108 = icmp ult i64 %106, 16000
  %109 = or i1 %107, %108
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %110, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %106 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = xor i64 16000, %103
  %120 = xor i64 %119, %106
  %121 = lshr i64 %120, 4
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %123, i8* %124, align 1, !tbaa !2448
  %125 = icmp eq i64 %106, 0
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %126, i8* %127, align 1, !tbaa !2449
  %128 = lshr i64 %106, 63
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %129, i8* %130, align 1, !tbaa !2450
  %131 = lshr i64 %103, 63
  %132 = xor i64 %128, %131
  %133 = add nuw nsw i64 %132, %128
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %135, i8* %136, align 1, !tbaa !2451
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %RDI
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = add i64 8, %143
  store i64 %146, i64* %RDI, align 8, !tbaa !2428
  %147 = icmp ult i64 %146, %143
  %148 = icmp ult i64 %146, 8
  %149 = or i1 %147, %148
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %150, i8* %151, align 1, !tbaa !2433
  %152 = trunc i64 %146 to i32
  %153 = and i32 %152, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2447
  %159 = xor i64 8, %143
  %160 = xor i64 %159, %146
  %161 = lshr i64 %160, 4
  %162 = trunc i64 %161 to i8
  %163 = and i8 %162, 1
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %163, i8* %164, align 1, !tbaa !2448
  %165 = icmp eq i64 %146, 0
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %166, i8* %167, align 1, !tbaa !2449
  %168 = lshr i64 %146, 63
  %169 = trunc i64 %168 to i8
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %169, i8* %170, align 1, !tbaa !2450
  %171 = lshr i64 %143, 63
  %172 = xor i64 %168, %171
  %173 = add nuw nsw i64 %172, %168
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %175, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %RDI
  %178 = load i64, i64* %RAX
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 3
  store i64 %180, i64* %PC
  %181 = sub i64 %177, %178
  %182 = icmp ult i64 %177, %178
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %183, i8* %184, align 1, !tbaa !2433
  %185 = trunc i64 %181 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %190, i8* %191, align 1, !tbaa !2447
  %192 = xor i64 %178, %177
  %193 = xor i64 %192, %181
  %194 = lshr i64 %193, 4
  %195 = trunc i64 %194 to i8
  %196 = and i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %196, i8* %197, align 1, !tbaa !2448
  %198 = icmp eq i64 %181, 0
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %199, i8* %200, align 1, !tbaa !2449
  %201 = lshr i64 %181, 63
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %202, i8* %203, align 1, !tbaa !2450
  %204 = lshr i64 %177, 63
  %205 = lshr i64 %178, 63
  %206 = xor i64 %205, %204
  %207 = xor i64 %201, %204
  %208 = add nuw nsw i64 %207, %206
  %209 = icmp eq i64 %208, 2
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %210, i8* %211, align 1, !tbaa !2451
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 8
  %214 = load i64, i64* %RDI
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 47
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 6
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %225 = load i8, i8* %224, align 1, !tbaa !2449
  %226 = icmp eq i8 %225, 0
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = select i1 %226, i64 %219, i64 %221
  store i64 %229, i64* %228, align 8, !tbaa !2428
  %230 = load i8, i8* %BRANCH_TAKEN
  %231 = icmp eq i8 %230, 1
  br i1 %231, label %block_40090b, label %block_400940

block_400940:                                     ; preds = %block_40090b
  %232 = load i64, i64* %RSP
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = add i64 16, %232
  store i64 %235, i64* %RSP, align 8, !tbaa !2428
  %236 = icmp ult i64 %235, %232
  %237 = icmp ult i64 %235, 16
  %238 = or i1 %236, %237
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %239, i8* %240, align 1, !tbaa !2433
  %241 = trunc i64 %235 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2447
  %248 = xor i64 16, %232
  %249 = xor i64 %248, %235
  %250 = lshr i64 %249, 4
  %251 = trunc i64 %250 to i8
  %252 = and i8 %251, 1
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %252, i8* %253, align 1, !tbaa !2448
  %254 = icmp eq i64 %235, 0
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %255, i8* %256, align 1, !tbaa !2449
  %257 = lshr i64 %235, 63
  %258 = trunc i64 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %258, i8* %259, align 1, !tbaa !2450
  %260 = lshr i64 %232, 63
  %261 = xor i64 %257, %260
  %262 = add nuw nsw i64 %261, %257
  %263 = icmp eq i64 %262, 2
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %264, i8* %265, align 1, !tbaa !2451
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 1
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271
  store i64 %272, i64* %RBP, align 8, !tbaa !2428
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 1
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %277 = load i64, i64* %276, align 8, !tbaa !2428
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  store i64 %279, i64* %275, align 8, !tbaa !2428
  %280 = add i64 %277, 8
  store i64 %280, i64* %276, align 8, !tbaa !2428
  ret %struct.Memory* %100
}

; Function Attrs: noinline
define %struct.Memory* @sub_402f50__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402f50:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ECX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ESI = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 9
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 15
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RBP = bitcast %union.anon* %33 to i64*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 64
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 64
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2433
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #16
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = xor i64 64, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2451
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %80 = load i64, i64* %RCX
  %81 = load i32, i32* %ECX
  %82 = zext i32 %81 to i64
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 2
  store i64 %84, i64* %PC
  %85 = xor i64 %82, %80
  %86 = trunc i64 %85 to i32
  %87 = and i64 %85, 4294967295
  store i64 %87, i64* %RCX, align 8, !tbaa !2428
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %88, align 1, !tbaa !2433
  %89 = and i32 %86, 255
  %90 = call i32 @llvm.ctpop.i32(i32 %89) #16
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %93, i8* %94, align 1, !tbaa !2447
  %95 = icmp eq i32 %86, 0
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %96, i8* %97, align 1, !tbaa !2449
  %98 = lshr i32 %86, 31
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %99, i8* %100, align 1, !tbaa !2450
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %101, align 1, !tbaa !2451
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %102, align 1, !tbaa !2448
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 16
  %105 = load i64, i64* %RDI
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 24
  %111 = load i64, i64* %RSI
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 16
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i64*
  %120 = load i64, i64* %119
  store i64 %120, i64* %RSI, align 8, !tbaa !2428
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 32
  %123 = load i64, i64* %RSI
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %122 to i64*
  store i64 %123, i64* %126
  %127 = load i64, i64* %RAX
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  store i64 %127, i64* %RDI, align 8, !tbaa !2428
  %130 = load i32, i32* %ECX
  %131 = zext i32 %130 to i64
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 2
  store i64 %133, i64* %PC
  %134 = and i64 %131, 4294967295
  store i64 %134, i64* %RSI, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 157
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 5
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = add i64 %142, -8
  %144 = inttoptr i64 %143 to i64*
  store i64 %138, i64* %144
  store i64 %143, i64* %141, align 8, !tbaa !2428
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %136, i64* %145, align 8, !tbaa !2428
  %146 = load i64, i64* %PC
  %147 = call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %146, %struct.Memory* %2)
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 40
  %150 = load i64, i64* %RAX
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %149 to i64*
  store i64 %150, i64* %153
  br label %block_402f7c

block_402f7c:                                     ; preds = %block_402fde, %block_402f50
  %MEMORY.0 = phi %struct.Memory* [ %147, %block_402f50 ], [ %462, %block_402fde ]
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 16
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC
  store i64 %155, i64* %RDI, align 8, !tbaa !2428
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 24
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  store i64 %159, i64* %RSI, align 8, !tbaa !2428
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 204
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %169 = load i64, i64* %168, align 8, !tbaa !2428
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %165, i64* %171
  store i64 %170, i64* %168, align 8, !tbaa !2428
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %163, i64* %172, align 8, !tbaa !2428
  %173 = load i64, i64* %PC
  %174 = call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %173, %struct.Memory* %MEMORY.0)
  %175 = load i8, i8* %AL
  %176 = zext i8 %175 to i64
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 2
  store i64 %178, i64* %PC
  %179 = and i64 1, %176
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %181, align 1, !tbaa !2433
  %182 = trunc i64 %179 to i32
  %183 = and i32 %182, 255
  %184 = call i32 @llvm.ctpop.i32(i32 %183) #16
  %185 = trunc i32 %184 to i8
  %186 = and i8 %185, 1
  %187 = xor i8 %186, 1
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %187, i8* %188, align 1, !tbaa !2447
  %189 = icmp eq i8 %180, 0
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %190, i8* %191, align 1, !tbaa !2449
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %192, align 1, !tbaa !2450
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %193, align 1, !tbaa !2451
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %194, align 1, !tbaa !2448
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 11
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 6
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 6
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %202 = load i8, i8* %201, align 1, !tbaa !2449
  %203 = icmp eq i8 %202, 0
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %206 = select i1 %203, i64 %196, i64 %198
  store i64 %206, i64* %205, align 8, !tbaa !2428
  %207 = load i8, i8* %BRANCH_TAKEN
  %208 = icmp eq i8 %207, 1
  br i1 %208, label %block_402f96, label %block_402f91

block_402ff5:                                     ; preds = %block_402fe3, %block_402f91
  %MEMORY.1 = phi %struct.Memory* [ %462, %block_402fe3 ], [ %174, %block_402f91 ]
  %209 = load i64, i64* %RBP
  %210 = sub i64 %209, 1
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 3
  store i64 %212, i64* %PC
  %213 = inttoptr i64 %210 to i8*
  %214 = load i8, i8* %213
  store i8 %214, i8* %AL, align 1, !tbaa !2432
  %215 = load i8, i8* %AL
  %216 = zext i8 %215 to i64
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 2
  store i64 %218, i64* %PC
  %219 = and i64 1, %216
  %220 = trunc i64 %219 to i8
  store i8 %220, i8* %AL, align 1, !tbaa !2432
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2433
  %222 = trunc i64 %219 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = icmp eq i8 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2449
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %232, align 1, !tbaa !2450
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %233, align 1, !tbaa !2451
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %234, align 1, !tbaa !2448
  %235 = load i8, i8* %AL
  %236 = zext i8 %235 to i64
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = and i64 %236, 255
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = load i64, i64* %RSP
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC
  %243 = add i64 64, %240
  store i64 %243, i64* %RSP, align 8, !tbaa !2428
  %244 = icmp ult i64 %243, %240
  %245 = icmp ult i64 %243, 64
  %246 = or i1 %244, %245
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %247, i8* %248, align 1, !tbaa !2433
  %249 = trunc i64 %243 to i32
  %250 = and i32 %249, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2447
  %256 = xor i64 64, %240
  %257 = xor i64 %256, %243
  %258 = lshr i64 %257, 4
  %259 = trunc i64 %258 to i8
  %260 = and i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %260, i8* %261, align 1, !tbaa !2448
  %262 = icmp eq i64 %243, 0
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %263, i8* %264, align 1, !tbaa !2449
  %265 = lshr i64 %243, 63
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2450
  %268 = lshr i64 %240, 63
  %269 = xor i64 %265, %268
  %270 = add nuw nsw i64 %269, %265
  %271 = icmp eq i64 %270, 2
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %272, i8* %273, align 1, !tbaa !2451
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 1
  store i64 %275, i64* %PC
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %277 = load i64, i64* %276, align 8, !tbaa !2428
  %278 = add i64 %277, 8
  %279 = inttoptr i64 %277 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %RBP, align 8, !tbaa !2428
  store i64 %278, i64* %276, align 8, !tbaa !2428
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 1
  store i64 %282, i64* %PC
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %285 = load i64, i64* %284, align 8, !tbaa !2428
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %283, align 8, !tbaa !2428
  %288 = add i64 %285, 8
  store i64 %288, i64* %284, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_402fde:                                     ; preds = %block_402f96
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 14
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 5
  store i64 %292, i64* %PC
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %290, i64* %293, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = sub i64 %294, 112
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 5
  store i64 %297, i64* %PC
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %295, i64* %298, align 8, !tbaa !2428
  br label %block_402f7c

block_402f91:                                     ; preds = %block_402f7c
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 96
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 5
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %300, i64* %303, align 8, !tbaa !2428
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 1
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i8*
  store i8 1, i8* %308
  br label %block_402ff5

block_402f96:                                     ; preds = %block_402f7c
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 16
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  store i64 %310, i64* %RDI, align 8, !tbaa !2428
  %313 = load i64, i64* %RSI
  %314 = load i32, i32* %ESI
  %315 = zext i32 %314 to i64
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 2
  store i64 %317, i64* %PC
  %318 = xor i64 %315, %313
  %319 = trunc i64 %318 to i32
  %320 = and i64 %318, 4294967295
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %321, align 1, !tbaa !2433
  %322 = and i32 %319, 255
  %323 = call i32 @llvm.ctpop.i32(i32 %322) #16
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = xor i8 %325, 1
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %326, i8* %327, align 1, !tbaa !2447
  %328 = icmp eq i32 %319, 0
  %329 = zext i1 %328 to i8
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %329, i8* %330, align 1, !tbaa !2449
  %331 = lshr i32 %319, 31
  %332 = trunc i32 %331 to i8
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %332, i8* %333, align 1, !tbaa !2450
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %334, align 1, !tbaa !2451
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %335, align 1, !tbaa !2448
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 116
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 5
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 5
  store i64 %341, i64* %PC
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %343 = load i64, i64* %342, align 8, !tbaa !2428
  %344 = add i64 %343, -8
  %345 = inttoptr i64 %344 to i64*
  store i64 %339, i64* %345
  store i64 %344, i64* %342, align 8, !tbaa !2428
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %337, i64* %346, align 8, !tbaa !2428
  %347 = load i64, i64* %PC
  %348 = call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %347, %struct.Memory* %174)
  %349 = load i64, i64* %RBP
  %350 = sub i64 %349, 48
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 4
  store i64 %352, i64* %PC
  store i64 %350, i64* %RDI, align 8, !tbaa !2428
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 48
  %355 = load i64, i64* %RAX
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %354 to i64*
  store i64 %355, i64* %358
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 215
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 5
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 5
  store i64 %364, i64* %PC
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %366 = load i64, i64* %365, align 8, !tbaa !2428
  %367 = add i64 %366, -8
  %368 = inttoptr i64 %367 to i64*
  store i64 %362, i64* %368
  store i64 %367, i64* %365, align 8, !tbaa !2428
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %360, i64* %369, align 8, !tbaa !2428
  %370 = load i64, i64* %PC
  %371 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %370, %struct.Memory* %348)
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 32
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  store i64 %373, i64* %RDI, align 8, !tbaa !2428
  %376 = load i64, i64* %RSI
  %377 = load i32, i32* %ESI
  %378 = zext i32 %377 to i64
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 2
  store i64 %380, i64* %PC
  %381 = xor i64 %378, %376
  %382 = trunc i64 %381 to i32
  %383 = and i64 %381, 4294967295
  store i64 %383, i64* %RSI, align 8, !tbaa !2428
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %384, align 1, !tbaa !2433
  %385 = and i32 %382, 255
  %386 = call i32 @llvm.ctpop.i32(i32 %385) #16
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %389, i8* %390, align 1, !tbaa !2447
  %391 = icmp eq i32 %382, 0
  %392 = zext i1 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %392, i8* %393, align 1, !tbaa !2449
  %394 = lshr i32 %382, 31
  %395 = trunc i32 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %395, i8* %396, align 1, !tbaa !2450
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %397, align 1, !tbaa !2451
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %398, align 1, !tbaa !2448
  %399 = load i64, i64* %RBP
  %400 = sub i64 %399, 64
  %401 = load i64, i64* %RAX
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %400 to i64*
  store i64 %401, i64* %404
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 88
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 5
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 5
  store i64 %410, i64* %PC
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %412 = load i64, i64* %411, align 8, !tbaa !2428
  %413 = add i64 %412, -8
  %414 = inttoptr i64 %413 to i64*
  store i64 %408, i64* %414
  store i64 %413, i64* %411, align 8, !tbaa !2428
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %406, i64* %415, align 8, !tbaa !2428
  %416 = load i64, i64* %PC
  %417 = call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %416, %struct.Memory* %371)
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 56
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 4
  store i64 %421, i64* %PC
  store i64 %419, i64* %RDI, align 8, !tbaa !2428
  %422 = load i64, i64* %RBP
  %423 = sub i64 %422, 56
  %424 = load i64, i64* %RAX
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %423 to i64*
  store i64 %424, i64* %427
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 187
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 5
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  store i64 %433, i64* %PC
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %435 = load i64, i64* %434, align 8, !tbaa !2428
  %436 = add i64 %435, -8
  %437 = inttoptr i64 %436 to i64*
  store i64 %431, i64* %437
  store i64 %436, i64* %434, align 8, !tbaa !2428
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %429, i64* %438, align 8, !tbaa !2428
  %439 = load i64, i64* %PC
  %440 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %439, %struct.Memory* %417)
  %441 = load i64, i64* %RBP
  %442 = sub i64 %441, 64
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %RDI, align 8, !tbaa !2428
  %447 = load i64, i64* %RAX
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC
  store i64 %447, i64* %RSI, align 8, !tbaa !2428
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 207
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 5
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 5
  store i64 %455, i64* %PC
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %457 = load i64, i64* %456, align 8, !tbaa !2428
  %458 = add i64 %457, -8
  %459 = inttoptr i64 %458 to i64*
  store i64 %453, i64* %459
  store i64 %458, i64* %456, align 8, !tbaa !2428
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %451, i64* %460, align 8, !tbaa !2428
  %461 = load i64, i64* %PC
  %462 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %461, %struct.Memory* %440)
  %463 = load i8, i8* %AL
  %464 = zext i8 %463 to i64
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 2
  store i64 %466, i64* %PC
  %467 = and i64 1, %464
  %468 = trunc i64 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %469, align 1, !tbaa !2433
  %470 = trunc i64 %467 to i32
  %471 = and i32 %470, 255
  %472 = call i32 @llvm.ctpop.i32(i32 %471) #16
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = xor i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i8 %468, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2449
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %480, align 1, !tbaa !2450
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %481, align 1, !tbaa !2451
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %482, align 1, !tbaa !2448
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 11
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 6
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 6
  store i64 %488, i64* %PC
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %490 = load i8, i8* %489, align 1, !tbaa !2449
  %491 = icmp eq i8 %490, 0
  %492 = zext i1 %491 to i8
  store i8 %492, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %494 = select i1 %491, i64 %484, i64 %486
  store i64 %494, i64* %493, align 8, !tbaa !2428
  %495 = load i8, i8* %BRANCH_TAKEN
  %496 = icmp eq i8 %495, 1
  br i1 %496, label %block_402fe3, label %block_402fde

block_402fe3:                                     ; preds = %block_402f96
  %497 = load i64, i64* %RBP
  %498 = sub i64 %497, 1
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 4
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %498 to i8*
  store i8 0, i8* %501
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 14
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %503, i64* %506, align 8, !tbaa !2428
  br label %block_402ff5
}

; Function Attrs: noinline
define %struct.Memory* @sub_4061d0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4061d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4052c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %RAX
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = add i64 -8, %45
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = icmp ult i64 %48, %45
  %50 = icmp ult i64 %48, -8
  %51 = or i1 %49, %50
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %48 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 -8, %45
  %62 = xor i64 %61, %48
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %48, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %48, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %45, 63
  %74 = xor i64 %70, %73
  %75 = xor i64 %70, 1
  %76 = add nuw nsw i64 %74, %75
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %78, i8* %79, align 1, !tbaa !2451
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 1
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !2428
  %95 = add i64 %94, 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %RBP, align 8, !tbaa !2428
  store i64 %95, i64* %93, align 8, !tbaa !2428
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 1
  store i64 %99, i64* %PC
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %100, align 8, !tbaa !2428
  %105 = add i64 %102, 8
  store i64 %105, i64* %101, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400770:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 92
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 5
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 5
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %23, i64* %32, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = call %struct.Memory* @sub_4007d0___cxx_global_var_init(%struct.State* %0, i64 %33, %struct.Memory* %2)
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 183
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 5
  store i64 %40, i64* %PC
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %42 = load i64, i64* %41, align 8, !tbaa !2428
  %43 = add i64 %42, -8
  %44 = inttoptr i64 %43 to i64*
  store i64 %38, i64* %44
  store i64 %43, i64* %41, align 8, !tbaa !2428
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %36, i64* %45, align 8, !tbaa !2428
  %46 = load i64, i64* %PC
  %47 = call %struct.Memory* @sub_400830___cxx_global_var_init_11(%struct.State* %0, i64 %46, %struct.Memory* %34)
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 274
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 5
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 5
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %49, i64* %58, align 8, !tbaa !2428
  %59 = load i64, i64* %PC
  %60 = call %struct.Memory* @sub_400890___cxx_global_var_init_12(%struct.State* %0, i64 %59, %struct.Memory* %47)
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 365
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 5
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 5
  store i64 %66, i64* %PC
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %68 = load i64, i64* %67, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %64, i64* %70
  store i64 %69, i64* %67, align 8, !tbaa !2428
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %62, i64* %71, align 8, !tbaa !2428
  %72 = load i64, i64* %PC
  %73 = call %struct.Memory* @sub_4008f0___cxx_global_var_init_13(%struct.State* %0, i64 %72, %struct.Memory* %60)
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 456
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 5
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 5
  store i64 %79, i64* %PC
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %81 = load i64, i64* %80, align 8, !tbaa !2428
  %82 = add i64 %81, -8
  %83 = inttoptr i64 %82 to i64*
  store i64 %77, i64* %83
  store i64 %82, i64* %80, align 8, !tbaa !2428
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %75, i64* %84, align 8, !tbaa !2428
  %85 = load i64, i64* %PC
  %86 = call %struct.Memory* @sub_400950___cxx_global_var_init_14(%struct.State* %0, i64 %85, %struct.Memory* %73)
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 483
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 5
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !2428
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %90, i64* %96
  store i64 %95, i64* %93, align 8, !tbaa !2428
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %88, i64* %97, align 8, !tbaa !2428
  %98 = load i64, i64* %PC
  %99 = call %struct.Memory* @sub_400970___cxx_global_var_init_15(%struct.State* %0, i64 %98, %struct.Memory* %86)
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 510
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 5
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %107 = load i64, i64* %106, align 8, !tbaa !2428
  %108 = add i64 %107, -8
  %109 = inttoptr i64 %108 to i64*
  store i64 %103, i64* %109
  store i64 %108, i64* %106, align 8, !tbaa !2428
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %101, i64* %110, align 8, !tbaa !2428
  %111 = load i64, i64* %PC
  %112 = call %struct.Memory* @sub_400990___cxx_global_var_init_16(%struct.State* %0, i64 %111, %struct.Memory* %99)
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 537
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 5
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  store i64 %118, i64* %PC
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %120 = load i64, i64* %119, align 8, !tbaa !2428
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %116, i64* %122
  store i64 %121, i64* %119, align 8, !tbaa !2428
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %114, i64* %123, align 8, !tbaa !2428
  %124 = load i64, i64* %PC
  %125 = call %struct.Memory* @sub_4009b0___cxx_global_var_init_17(%struct.State* %0, i64 %124, %struct.Memory* %112)
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 564
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 5
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 5
  store i64 %131, i64* %PC
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %133 = load i64, i64* %132, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %129, i64* %135
  store i64 %134, i64* %132, align 8, !tbaa !2428
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %127, i64* %136, align 8, !tbaa !2428
  %137 = load i64, i64* %PC
  %138 = call %struct.Memory* @sub_4009d0___cxx_global_var_init_18(%struct.State* %0, i64 %137, %struct.Memory* %125)
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 591
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4009f0___cxx_global_var_init_19(%struct.State* %0, i64 %150, %struct.Memory* %138)
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 618
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 5
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 5
  store i64 %157, i64* %PC
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %159 = load i64, i64* %158, align 8, !tbaa !2428
  %160 = add i64 %159, -8
  %161 = inttoptr i64 %160 to i64*
  store i64 %155, i64* %161
  store i64 %160, i64* %158, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %153, i64* %162, align 8, !tbaa !2428
  %163 = load i64, i64* %PC
  %164 = call %struct.Memory* @sub_400a10___cxx_global_var_init_20(%struct.State* %0, i64 %163, %struct.Memory* %151)
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 645
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 5
  store i64 %170, i64* %PC
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %172 = load i64, i64* %171, align 8, !tbaa !2428
  %173 = add i64 %172, -8
  %174 = inttoptr i64 %173 to i64*
  store i64 %168, i64* %174
  store i64 %173, i64* %171, align 8, !tbaa !2428
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %166, i64* %175, align 8, !tbaa !2428
  %176 = load i64, i64* %PC
  %177 = call %struct.Memory* @sub_400a30___cxx_global_var_init_21(%struct.State* %0, i64 %176, %struct.Memory* %164)
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 672
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 5
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 5
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %181, i64* %187
  store i64 %186, i64* %184, align 8, !tbaa !2428
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %179, i64* %188, align 8, !tbaa !2428
  %189 = load i64, i64* %PC
  %190 = call %struct.Memory* @sub_400a50___cxx_global_var_init_22(%struct.State* %0, i64 %189, %struct.Memory* %177)
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 699
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 5
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  store i64 %196, i64* %PC
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %198 = load i64, i64* %197, align 8, !tbaa !2428
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %194, i64* %200
  store i64 %199, i64* %197, align 8, !tbaa !2428
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %192, i64* %201, align 8, !tbaa !2428
  %202 = load i64, i64* %PC
  %203 = call %struct.Memory* @sub_400a70___cxx_global_var_init_23(%struct.State* %0, i64 %202, %struct.Memory* %190)
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 726
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 5
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 5
  store i64 %209, i64* %PC
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %207, i64* %213
  store i64 %212, i64* %210, align 8, !tbaa !2428
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %205, i64* %214, align 8, !tbaa !2428
  %215 = load i64, i64* %PC
  %216 = call %struct.Memory* @sub_400a90___cxx_global_var_init_24(%struct.State* %0, i64 %215, %struct.Memory* %203)
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 753
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 5
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 5
  store i64 %222, i64* %PC
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %224 = load i64, i64* %223, align 8, !tbaa !2428
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  store i64 %220, i64* %226
  store i64 %225, i64* %223, align 8, !tbaa !2428
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %218, i64* %227, align 8, !tbaa !2428
  %228 = load i64, i64* %PC
  %229 = call %struct.Memory* @sub_400ab0___cxx_global_var_init_25(%struct.State* %0, i64 %228, %struct.Memory* %216)
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 1
  store i64 %231, i64* %PC
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %233 = load i64, i64* %232, align 8, !tbaa !2428
  %234 = add i64 %233, 8
  %235 = inttoptr i64 %233 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RBP, align 8, !tbaa !2428
  store i64 %234, i64* %232, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 1
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %241 = load i64, i64* %240, align 8, !tbaa !2428
  %242 = inttoptr i64 %241 to i64*
  %243 = load i64, i64* %242
  store i64 %243, i64* %239, align 8, !tbaa !2428
  %244 = add i64 %241, 8
  store i64 %244, i64* %240, align 8, !tbaa !2428
  ret %struct.Memory* %229
}

; Function Attrs: noinline
define %struct.Memory* @sub_402050__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402050:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 64
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 64
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2433
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i64 64, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2451
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = bitcast %union.vec128_t* %XMM0 to i8*
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 5
  store i64 %77, i64* %PC
  %78 = bitcast i8* %75 to double*
  %79 = load double, double* %78, align 1
  %80 = inttoptr i64 %74 to double*
  store double %79, double* %80
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 16
  %83 = load i64, i64* %RDI
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %86
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 24
  %89 = load i64, i64* %RSI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 32
  %95 = load i64, i64* %RDX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 36
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 7
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  store i32 0, i32* %103
  br label %block_402070

block_402080:                                     ; preds = %block_402070
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 16
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 24
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 8
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 48
  %124 = load i64, i64* %RAX
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %123 to i64*
  store i64 %124, i64* %127
  %128 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 48
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to double*
  %134 = load double, double* %133
  %135 = bitcast i8* %128 to double*
  store double %134, double* %135, align 1, !tbaa !2452
  %136 = getelementptr inbounds i8, i8* %128, i64 8
  %137 = bitcast i8* %136 to double*
  store double 0.000000e+00, double* %137, align 1, !tbaa !2452
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 17035
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %141, i64* %147
  store i64 %146, i64* %144, align 8, !tbaa !2428
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %139, i64* %148, align 8, !tbaa !2428
  %149 = load i64, i64* %PC
  %150 = call %struct.Memory* @sub_406320__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* %0, i64 %149, %struct.Memory* %MEMORY.0)
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 56
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 56
  %157 = bitcast %union.vec128_t* %XMM0 to i8*
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  %160 = bitcast i8* %157 to double*
  %161 = load double, double* %160, align 1
  %162 = inttoptr i64 %156 to double*
  store double %161, double* %162
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 15661
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  store i64 %168, i64* %PC
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %166, i64* %172
  store i64 %171, i64* %169, align 8, !tbaa !2428
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %164, i64* %173, align 8, !tbaa !2428
  %174 = load i64, i64* %PC
  %175 = call %struct.Memory* @sub_405dd0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %174, %struct.Memory* %150)
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 15688
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 5
  store i64 %181, i64* %PC
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %183 = load i64, i64* %182, align 8, !tbaa !2428
  %184 = add i64 %183, -8
  %185 = inttoptr i64 %184 to i64*
  store i64 %179, i64* %185
  store i64 %184, i64* %182, align 8, !tbaa !2428
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %177, i64* %186, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* %0, i64 %187, %struct.Memory* %175)
  %189 = load i64, i64* %RBP
  %190 = sub i64 %189, 36
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 3
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %190 to i32*
  %194 = load i32, i32* %193
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = load i64, i64* %RAX
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 3
  store i64 %198, i64* %PC
  %199 = trunc i64 %196 to i32
  %200 = add i32 1, %199
  %201 = zext i32 %200 to i64
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = icmp ult i32 %200, %199
  %203 = icmp ult i32 %200, 1
  %204 = or i1 %202, %203
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %205, i8* %206, align 1, !tbaa !2433
  %207 = and i32 %200, 255
  %208 = call i32 @llvm.ctpop.i32(i32 %207) #16
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %211, i8* %212, align 1, !tbaa !2447
  %213 = xor i64 1, %196
  %214 = trunc i64 %213 to i32
  %215 = xor i32 %214, %200
  %216 = lshr i32 %215, 4
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %218, i8* %219, align 1, !tbaa !2448
  %220 = icmp eq i32 %200, 0
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %221, i8* %222, align 1, !tbaa !2449
  %223 = lshr i32 %200, 31
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %224, i8* %225, align 1, !tbaa !2450
  %226 = lshr i32 %199, 31
  %227 = xor i32 %223, %226
  %228 = add nuw nsw i32 %227, %223
  %229 = icmp eq i32 %228, 2
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %230, i8* %231, align 1, !tbaa !2451
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 36
  %234 = load i32, i32* %EAX
  %235 = zext i32 %234 to i64
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %233 to i32*
  store i32 %234, i32* %238
  %239 = load i64, i64* %PC
  %240 = sub i64 %239, 70
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %240, i64* %243, align 8, !tbaa !2428
  br label %block_402070

block_4020bb:                                     ; preds = %block_402070
  %244 = load i64, i64* %RSP
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = add i64 64, %244
  store i64 %247, i64* %RSP, align 8, !tbaa !2428
  %248 = icmp ult i64 %247, %244
  %249 = icmp ult i64 %247, 64
  %250 = or i1 %248, %249
  %251 = zext i1 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %251, i8* %252, align 1, !tbaa !2433
  %253 = trunc i64 %247 to i32
  %254 = and i32 %253, 255
  %255 = call i32 @llvm.ctpop.i32(i32 %254) #16
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  %258 = xor i8 %257, 1
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %258, i8* %259, align 1, !tbaa !2447
  %260 = xor i64 64, %244
  %261 = xor i64 %260, %247
  %262 = lshr i64 %261, 4
  %263 = trunc i64 %262 to i8
  %264 = and i8 %263, 1
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %264, i8* %265, align 1, !tbaa !2448
  %266 = icmp eq i64 %247, 0
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %267, i8* %268, align 1, !tbaa !2449
  %269 = lshr i64 %247, 63
  %270 = trunc i64 %269 to i8
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %270, i8* %271, align 1, !tbaa !2450
  %272 = lshr i64 %244, 63
  %273 = xor i64 %269, %272
  %274 = add nuw nsw i64 %273, %269
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %276, i8* %277, align 1, !tbaa !2451
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 1
  store i64 %279, i64* %PC
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %281 = load i64, i64* %280, align 8, !tbaa !2428
  %282 = add i64 %281, 8
  %283 = inttoptr i64 %281 to i64*
  %284 = load i64, i64* %283
  store i64 %284, i64* %RBP, align 8, !tbaa !2428
  store i64 %282, i64* %280, align 8, !tbaa !2428
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 1
  store i64 %286, i64* %PC
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %289 = load i64, i64* %288, align 8, !tbaa !2428
  %290 = inttoptr i64 %289 to i64*
  %291 = load i64, i64* %290
  store i64 %291, i64* %287, align 8, !tbaa !2428
  %292 = add i64 %289, 8
  store i64 %292, i64* %288, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402070:                                     ; preds = %block_402080, %block_402050
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402050 ], [ %188, %block_402080 ]
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 36
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 3
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i32*
  %298 = load i32, i32* %297
  %299 = zext i32 %298 to i64
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = load i32, i32* %EAX
  %301 = zext i32 %300 to i64
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 7
  store i64 %303, i64* %PC
  %304 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %305 = sub i32 %300, %304
  %306 = icmp ult i32 %300, %304
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %307, i8* %308, align 1, !tbaa !2433
  %309 = and i32 %305, 255
  %310 = call i32 @llvm.ctpop.i32(i32 %309) #16
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %313, i8* %314, align 1, !tbaa !2447
  %315 = xor i32 %304, %300
  %316 = xor i32 %315, %305
  %317 = lshr i32 %316, 4
  %318 = trunc i32 %317 to i8
  %319 = and i8 %318, 1
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %319, i8* %320, align 1, !tbaa !2448
  %321 = icmp eq i32 %305, 0
  %322 = zext i1 %321 to i8
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %322, i8* %323, align 1, !tbaa !2449
  %324 = lshr i32 %305, 31
  %325 = trunc i32 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %325, i8* %326, align 1, !tbaa !2450
  %327 = lshr i32 %300, 31
  %328 = lshr i32 %304, 31
  %329 = xor i32 %328, %327
  %330 = xor i32 %324, %327
  %331 = add nuw nsw i32 %330, %329
  %332 = icmp eq i32 %331, 2
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %333, i8* %334, align 1, !tbaa !2451
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 65
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 6
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 6
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %342 = load i8, i8* %341, align 1, !tbaa !2450
  %343 = icmp ne i8 %342, 0
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %345 = load i8, i8* %344, align 1, !tbaa !2451
  %346 = icmp ne i8 %345, 0
  %347 = xor i1 %343, %346
  %348 = xor i1 %347, true
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %351 = select i1 %347, i64 %338, i64 %336
  store i64 %351, i64* %350, align 8, !tbaa !2428
  %352 = load i8, i8* %BRANCH_TAKEN
  %353 = icmp eq i8 %352, 1
  br i1 %353, label %block_4020bb, label %block_402080
}

; Function Attrs: noinline
define %struct.Memory* @sub_403730__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403730:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RCX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 13
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSP = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 15
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RBP = bitcast %union.anon* %30 to i64*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 32
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 32
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2433
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i64 32, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2451
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RDI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 24
  %81 = load i64, i64* %RSI
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 4
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 32
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 16
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = inttoptr i64 %98 to i64*
  %102 = load i64, i64* %101
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %103 = load i64, i64* %RSI
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = add i64 8, %103
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %107 = icmp ult i64 %106, %103
  %108 = icmp ult i64 %106, 8
  %109 = or i1 %107, %108
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %110, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %106 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = xor i64 8, %103
  %120 = xor i64 %119, %106
  %121 = lshr i64 %120, 4
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %123, i8* %124, align 1, !tbaa !2448
  %125 = icmp eq i64 %106, 0
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %126, i8* %127, align 1, !tbaa !2449
  %128 = lshr i64 %106, 63
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %129, i8* %130, align 1, !tbaa !2450
  %131 = lshr i64 %103, 63
  %132 = xor i64 %128, %131
  %133 = add nuw nsw i64 %132, %128
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %135, i8* %136, align 1, !tbaa !2451
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %RSI
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %142
  br label %block_403754

block_403798:                                     ; preds = %block_403762
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 1
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i8*
  store i8 0, i8* %147
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 14
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %149, i64* %152, align 8, !tbaa !2428
  br label %block_4037aa

block_403793:                                     ; preds = %block_403762
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 14
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %154, i64* %157, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = sub i64 %158, 77
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  store i64 %161, i64* %PC
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %159, i64* %162, align 8, !tbaa !2428
  br label %block_403754

block_4037aa:                                     ; preds = %block_4037a6, %block_403798
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4037a6 ], [ %362, %block_403798 ]
  %163 = load i64, i64* %RBP
  %164 = sub i64 %163, 1
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 3
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i8*
  %168 = load i8, i8* %167
  store i8 %168, i8* %AL, align 1, !tbaa !2432
  %169 = load i8, i8* %AL
  %170 = zext i8 %169 to i64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 2
  store i64 %172, i64* %PC
  %173 = and i64 1, %170
  %174 = trunc i64 %173 to i8
  store i8 %174, i8* %AL, align 1, !tbaa !2432
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %175, align 1, !tbaa !2433
  %176 = trunc i64 %173 to i32
  %177 = and i32 %176, 255
  %178 = call i32 @llvm.ctpop.i32(i32 %177) #16
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i8 %174, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2449
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %186, align 1, !tbaa !2450
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %187, align 1, !tbaa !2451
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %188, align 1, !tbaa !2448
  %189 = load i8, i8* %AL
  %190 = zext i8 %189 to i64
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 3
  store i64 %192, i64* %PC
  %193 = and i64 %190, 255
  store i64 %193, i64* %RAX, align 8, !tbaa !2428
  %194 = load i64, i64* %RSP
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = add i64 32, %194
  store i64 %197, i64* %RSP, align 8, !tbaa !2428
  %198 = icmp ult i64 %197, %194
  %199 = icmp ult i64 %197, 32
  %200 = or i1 %198, %199
  %201 = zext i1 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %201, i8* %202, align 1, !tbaa !2433
  %203 = trunc i64 %197 to i32
  %204 = and i32 %203, 255
  %205 = call i32 @llvm.ctpop.i32(i32 %204) #16
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = xor i8 %207, 1
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %208, i8* %209, align 1, !tbaa !2447
  %210 = xor i64 32, %194
  %211 = xor i64 %210, %197
  %212 = lshr i64 %211, 4
  %213 = trunc i64 %212 to i8
  %214 = and i8 %213, 1
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %214, i8* %215, align 1, !tbaa !2448
  %216 = icmp eq i64 %197, 0
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %217, i8* %218, align 1, !tbaa !2449
  %219 = lshr i64 %197, 63
  %220 = trunc i64 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %220, i8* %221, align 1, !tbaa !2450
  %222 = lshr i64 %194, 63
  %223 = xor i64 %219, %222
  %224 = add nuw nsw i64 %223, %219
  %225 = icmp eq i64 %224, 2
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %226, i8* %227, align 1, !tbaa !2451
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 1
  store i64 %229, i64* %PC
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %231 = load i64, i64* %230, align 8, !tbaa !2428
  %232 = add i64 %231, 8
  %233 = inttoptr i64 %231 to i64*
  %234 = load i64, i64* %233
  store i64 %234, i64* %RBP, align 8, !tbaa !2428
  store i64 %232, i64* %230, align 8, !tbaa !2428
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 1
  store i64 %236, i64* %PC
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %239 = load i64, i64* %238, align 8, !tbaa !2428
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %237, align 8, !tbaa !2428
  %242 = add i64 %239, 8
  store i64 %242, i64* %238, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4037a6:                                     ; preds = %block_403754
  %243 = sub i64 %454, 1
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 4
  store i64 %245, i64* %PC
  %246 = inttoptr i64 %243 to i8*
  store i8 1, i8* %246
  br label %block_4037aa

block_403762:                                     ; preds = %block_403754
  %247 = sub i64 %454, 16
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i64*
  %251 = load i64, i64* %250
  store i64 %251, i64* %RAX, align 8, !tbaa !2428
  %252 = load i64, i64* %RAX
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC
  store i64 %252, i64* %RCX, align 8, !tbaa !2428
  %255 = load i64, i64* %RCX
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  %258 = add i64 8, %255
  store i64 %258, i64* %RCX, align 8, !tbaa !2428
  %259 = icmp ult i64 %258, %255
  %260 = icmp ult i64 %258, 8
  %261 = or i1 %259, %260
  %262 = zext i1 %261 to i8
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %262, i8* %263, align 1, !tbaa !2433
  %264 = trunc i64 %258 to i32
  %265 = and i32 %264, 255
  %266 = call i32 @llvm.ctpop.i32(i32 %265) #16
  %267 = trunc i32 %266 to i8
  %268 = and i8 %267, 1
  %269 = xor i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = xor i64 8, %255
  %272 = xor i64 %271, %258
  %273 = lshr i64 %272, 4
  %274 = trunc i64 %273 to i8
  %275 = and i8 %274, 1
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %275, i8* %276, align 1, !tbaa !2448
  %277 = icmp eq i64 %258, 0
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %278, i8* %279, align 1, !tbaa !2449
  %280 = lshr i64 %258, 63
  %281 = trunc i64 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %281, i8* %282, align 1, !tbaa !2450
  %283 = lshr i64 %255, 63
  %284 = xor i64 %280, %283
  %285 = add nuw nsw i64 %284, %280
  %286 = icmp eq i64 %285, 2
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %287, i8* %288, align 1, !tbaa !2451
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 16
  %291 = load i64, i64* %RCX
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 4
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %290 to i64*
  store i64 %291, i64* %294
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 32
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %296 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %RCX, align 8, !tbaa !2428
  %301 = load i64, i64* %RCX
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 3
  store i64 %303, i64* %PC
  store i64 %301, i64* %RDX, align 8, !tbaa !2428
  %304 = load i64, i64* %RDX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = add i64 8, %304
  store i64 %307, i64* %RDX, align 8, !tbaa !2428
  %308 = icmp ult i64 %307, %304
  %309 = icmp ult i64 %307, 8
  %310 = or i1 %308, %309
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %311, i8* %312, align 1, !tbaa !2433
  %313 = trunc i64 %307 to i32
  %314 = and i32 %313, 255
  %315 = call i32 @llvm.ctpop.i32(i32 %314) #16
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %319, align 1, !tbaa !2447
  %320 = xor i64 8, %304
  %321 = xor i64 %320, %307
  %322 = lshr i64 %321, 4
  %323 = trunc i64 %322 to i8
  %324 = and i8 %323, 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %324, i8* %325, align 1, !tbaa !2448
  %326 = icmp eq i64 %307, 0
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %327, i8* %328, align 1, !tbaa !2449
  %329 = lshr i64 %307, 63
  %330 = trunc i64 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %330, i8* %331, align 1, !tbaa !2450
  %332 = lshr i64 %304, 63
  %333 = xor i64 %329, %332
  %334 = add nuw nsw i64 %333, %329
  %335 = icmp eq i64 %334, 2
  %336 = zext i1 %335 to i8
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %336, i8* %337, align 1, !tbaa !2451
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 32
  %340 = load i64, i64* %RDX
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 4
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %339 to i64*
  store i64 %340, i64* %343
  %344 = load i64, i64* %RAX
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 3
  store i64 %346, i64* %PC
  store i64 %344, i64* %RDI, align 8, !tbaa !2428
  %347 = load i64, i64* %RCX
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 3
  store i64 %349, i64* %PC
  store i64 %347, i64* %RSI, align 8, !tbaa !2428
  %350 = load i64, i64* %PC
  %351 = sub i64 %350, 1766
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 5
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 5
  store i64 %355, i64* %PC
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %357 = load i64, i64* %356, align 8, !tbaa !2428
  %358 = add i64 %357, -8
  %359 = inttoptr i64 %358 to i64*
  store i64 %353, i64* %359
  store i64 %358, i64* %356, align 8, !tbaa !2428
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %351, i64* %360, align 8, !tbaa !2428
  %361 = load i64, i64* %PC
  %362 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %361, %struct.Memory* %MEMORY.1)
  %363 = load i8, i8* %AL
  %364 = zext i8 %363 to i64
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 2
  store i64 %366, i64* %PC
  %367 = and i64 1, %364
  %368 = trunc i64 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %369, align 1, !tbaa !2433
  %370 = trunc i64 %367 to i32
  %371 = and i32 %370, 255
  %372 = call i32 @llvm.ctpop.i32(i32 %371) #16
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %375, i8* %376, align 1, !tbaa !2447
  %377 = icmp eq i8 %368, 0
  %378 = zext i1 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %378, i8* %379, align 1, !tbaa !2449
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %380, align 1, !tbaa !2450
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %381, align 1, !tbaa !2451
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %382, align 1, !tbaa !2448
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 11
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 6
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 6
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %390 = load i8, i8* %389, align 1, !tbaa !2449
  %391 = icmp eq i8 %390, 0
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %394 = select i1 %391, i64 %384, i64 %386
  store i64 %394, i64* %393, align 8, !tbaa !2428
  %395 = load i8, i8* %BRANCH_TAKEN
  %396 = icmp eq i8 %395, 1
  br i1 %396, label %block_403798, label %block_403793

block_403754:                                     ; preds = %block_403793, %block_403730
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_403730 ], [ %362, %block_403793 ]
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 16
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i64*
  %402 = load i64, i64* %401
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 24
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  %410 = sub i64 %403, %409
  %411 = icmp ugt i64 %409, %403
  %412 = zext i1 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %412, i8* %413, align 1, !tbaa !2433
  %414 = trunc i64 %410 to i32
  %415 = and i32 %414, 255
  %416 = call i32 @llvm.ctpop.i32(i32 %415) #16
  %417 = trunc i32 %416 to i8
  %418 = and i8 %417, 1
  %419 = xor i8 %418, 1
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %419, i8* %420, align 1, !tbaa !2447
  %421 = xor i64 %409, %403
  %422 = xor i64 %421, %410
  %423 = lshr i64 %422, 4
  %424 = trunc i64 %423 to i8
  %425 = and i8 %424, 1
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %425, i8* %426, align 1, !tbaa !2448
  %427 = icmp eq i64 %410, 0
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %428, i8* %429, align 1, !tbaa !2449
  %430 = lshr i64 %410, 63
  %431 = trunc i64 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %431, i8* %432, align 1, !tbaa !2450
  %433 = lshr i64 %403, 63
  %434 = lshr i64 %409, 63
  %435 = xor i64 %434, %433
  %436 = xor i64 %430, %433
  %437 = add nuw nsw i64 %436, %435
  %438 = icmp eq i64 %437, 2
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %439, i8* %440, align 1, !tbaa !2451
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 74
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 6
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 6
  store i64 %446, i64* %PC
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %448 = load i8, i8* %447, align 1, !tbaa !2449
  store i8 %448, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %450 = icmp ne i8 %448, 0
  %451 = select i1 %450, i64 %442, i64 %444
  store i64 %451, i64* %449, align 8, !tbaa !2428
  %452 = load i8, i8* %BRANCH_TAKEN
  %453 = icmp eq i8 %452, 1
  %454 = load i64, i64* %RBP
  br i1 %453, label %block_4037a6, label %block_403762
}

; Function Attrs: noinline
define %struct.Memory* @sub_402ac0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402ac0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = bitcast %union.vec128_t* %XMM0 to i8*
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC
  %82 = bitcast i8* %79 to double*
  %83 = load double, double* %82, align 1
  %84 = inttoptr i64 %78 to double*
  store double %83, double* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %RDI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 24
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RDX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 40
  %105 = load i64, i64* %RCX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402ae8

block_402b31:                                     ; preds = %block_402ae8
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402af8:                                     ; preds = %block_402ae8
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 24
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 32
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5372
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 32
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5439
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_404050__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 32
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 40
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5682
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_402ae8

block_402ae8:                                     ; preds = %block_402af8, %block_402ac0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402ac0 ], [ %249, %block_402af8 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_402b31, label %block_402af8
}

; Function Attrs: noinline
define %struct.Memory* @sub_4032a0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4032a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 8
  %33 = load i64, i64* %RDI
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 16
  %39 = load i64, i64* %RSI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 8
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RSI, align 8, !tbaa !2428
  %49 = load i64, i64* %RSI
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 16
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RDI, align 8, !tbaa !2428
  %60 = load i64, i64* %RDI
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = load i64, i64* %RSI
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = sub i64 %65, %66
  store i64 %69, i64* %RSI, align 8, !tbaa !2428
  %70 = icmp ult i64 %65, %66
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2433
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2447
  %80 = xor i64 %66, %65
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2448
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2449
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2450
  %92 = lshr i64 %65, 63
  %93 = lshr i64 %66, 63
  %94 = xor i64 %93, %92
  %95 = xor i64 %89, %92
  %96 = add nuw nsw i64 %95, %94
  %97 = icmp eq i64 %96, 2
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %98, i8* %99, align 1, !tbaa !2451
  %100 = load i64, i64* %RSI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = ashr i64 %100, 2
  %104 = trunc i64 %103 to i8
  %105 = and i8 %104, 1
  %106 = ashr i64 %103, 1
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %105, i8* %107, align 1, !tbaa !2432
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = call i32 @llvm.ctpop.i32(i32 %110) #16
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %108, align 1, !tbaa !2432
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %115, align 1, !tbaa !2432
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %117 = icmp eq i64 %106, 0
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %116, align 1, !tbaa !2432
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %120 = lshr i64 %106, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %119, align 1, !tbaa !2432
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2432
  %123 = load i64, i64* %RSI
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  store i64 %123, i64* %RAX, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 1
  store i64 %127, i64* %PC
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %129 = load i64, i64* %128, align 8, !tbaa !2428
  %130 = add i64 %129, 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131
  store i64 %132, i64* %RBP, align 8, !tbaa !2428
  store i64 %130, i64* %128, align 8, !tbaa !2428
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 1
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %137 = load i64, i64* %136, align 8, !tbaa !2428
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  store i64 %139, i64* %135, align 8, !tbaa !2428
  %140 = add i64 %137, 8
  store i64 %140, i64* %136, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403220__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403220:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405f50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %16 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %15, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %16 to %"class.std::bitset"*
  %17 = load i64, i64* %RBP
  %18 = load i64, i64* %PC
  %19 = add i64 %18, 1
  store i64 %19, i64* %PC
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = add i64 %21, -8
  %23 = inttoptr i64 %22 to i64*
  store i64 %17, i64* %23
  store i64 %22, i64* %20, align 8, !tbaa !2428
  %24 = load i64, i64* %RSP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 3
  store i64 %26, i64* %PC
  store i64 %24, i64* %RBP, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP
  %28 = sub i64 %27, 8
  %29 = load i64, i64* %RDI
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 8
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %34 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %RDI, align 8, !tbaa !2428
  %39 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to double*
  %44 = load double, double* %43
  %45 = bitcast i8* %39 to double*
  store double %44, double* %45, align 1, !tbaa !2452
  %46 = getelementptr inbounds i8, i8* %39, i64 8
  %47 = bitcast i8* %46 to double*
  store double 0.000000e+00, double* %47, align 1, !tbaa !2452
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 1
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %50, align 8, !tbaa !2428
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !2428
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %57, align 8, !tbaa !2428
  %62 = add i64 %59, 8
  store i64 %62, i64* %58, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402210__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402210:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = sub i64 %37, 32
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 32
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2433
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = xor i64 32, %37
  %52 = xor i64 %51, %40
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = icmp eq i64 %40, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1, !tbaa !2449
  %60 = lshr i64 %40, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = lshr i64 %37, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2451
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 8
  %71 = load i64, i64* %RDI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 16
  %77 = load i64, i64* %RSI
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %76 to i64*
  store i64 %77, i64* %80
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 24
  %83 = load i64, i64* %RDX
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %86
  br label %block_402224

block_402232:                                     ; preds = %block_402224
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 32
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  store i64 %88, i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 8
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  store i64 %97, i64* %RCX, align 8, !tbaa !2428
  %100 = load i64, i64* %RCX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = add i64 8, %100
  store i64 %103, i64* %RCX, align 8, !tbaa !2428
  %104 = icmp ult i64 %103, %100
  %105 = icmp ult i64 %103, 8
  %106 = or i1 %104, %105
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %107, i8* %108, align 1, !tbaa !2433
  %109 = trunc i64 %103 to i32
  %110 = and i32 %109, 255
  %111 = call i32 @llvm.ctpop.i32(i32 %110) #16
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %114, i8* %115, align 1, !tbaa !2447
  %116 = xor i64 8, %100
  %117 = xor i64 %116, %103
  %118 = lshr i64 %117, 4
  %119 = trunc i64 %118 to i8
  %120 = and i8 %119, 1
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %120, i8* %121, align 1, !tbaa !2448
  %122 = icmp eq i64 %103, 0
  %123 = zext i1 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %123, i8* %124, align 1, !tbaa !2449
  %125 = lshr i64 %103, 63
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %126, i8* %127, align 1, !tbaa !2450
  %128 = lshr i64 %100, 63
  %129 = xor i64 %125, %128
  %130 = add nuw nsw i64 %129, %125
  %131 = icmp eq i64 %130, 2
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %132, i8* %133, align 1, !tbaa !2451
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 8
  %136 = load i64, i64* %RCX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %135 to i64*
  store i64 %136, i64* %139
  %140 = load i64, i64* %RAX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC
  store i64 %140, i64* %RSI, align 8, !tbaa !2428
  %143 = load i64, i64* %PC
  %144 = sub i64 %143, 1224
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %150 = load i64, i64* %149, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %146, i64* %152
  store i64 %151, i64* %149, align 8, !tbaa !2428
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %153, align 8, !tbaa !2428
  %154 = load i64, i64* %PC
  %155 = call %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %154, %struct.Memory* %MEMORY.0)
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 24
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RAX
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  store i64 %162, i64* %RCX, align 8, !tbaa !2428
  %165 = load i64, i64* %RCX
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = add i64 8, %165
  store i64 %168, i64* %RCX, align 8, !tbaa !2428
  %169 = icmp ult i64 %168, %165
  %170 = icmp ult i64 %168, 8
  %171 = or i1 %169, %170
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %172, i8* %173, align 1, !tbaa !2433
  %174 = trunc i64 %168 to i32
  %175 = and i32 %174, 255
  %176 = call i32 @llvm.ctpop.i32(i32 %175) #16
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %179, i8* %180, align 1, !tbaa !2447
  %181 = xor i64 8, %165
  %182 = xor i64 %181, %168
  %183 = lshr i64 %182, 4
  %184 = trunc i64 %183 to i8
  %185 = and i8 %184, 1
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %185, i8* %186, align 1, !tbaa !2448
  %187 = icmp eq i64 %168, 0
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %188, i8* %189, align 1, !tbaa !2449
  %190 = lshr i64 %168, 63
  %191 = trunc i64 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %191, i8* %192, align 1, !tbaa !2450
  %193 = lshr i64 %165, 63
  %194 = xor i64 %190, %193
  %195 = add nuw nsw i64 %194, %190
  %196 = icmp eq i64 %195, 2
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %197, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 24
  %201 = load i64, i64* %RCX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 32
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = load i64, i64* %RAX
  %212 = load i64, i64* %RCX
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 3
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %211 to i64*
  store i64 %212, i64* %215
  %216 = load i64, i64* %PC
  %217 = sub i64 %216, 63
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 5
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %217, i64* %220, align 8, !tbaa !2428
  br label %block_402224

block_402268:                                     ; preds = %block_402224
  %221 = load i64, i64* %RSP
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 4
  store i64 %223, i64* %PC
  %224 = add i64 32, %221
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  %225 = icmp ult i64 %224, %221
  %226 = icmp ult i64 %224, 32
  %227 = or i1 %225, %226
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %228, i8* %229, align 1, !tbaa !2433
  %230 = trunc i64 %224 to i32
  %231 = and i32 %230, 255
  %232 = call i32 @llvm.ctpop.i32(i32 %231) #16
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %235, i8* %236, align 1, !tbaa !2447
  %237 = xor i64 32, %221
  %238 = xor i64 %237, %224
  %239 = lshr i64 %238, 4
  %240 = trunc i64 %239 to i8
  %241 = and i8 %240, 1
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %241, i8* %242, align 1, !tbaa !2448
  %243 = icmp eq i64 %224, 0
  %244 = zext i1 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %244, i8* %245, align 1, !tbaa !2449
  %246 = lshr i64 %224, 63
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %247, i8* %248, align 1, !tbaa !2450
  %249 = lshr i64 %221, 63
  %250 = xor i64 %246, %249
  %251 = add nuw nsw i64 %250, %246
  %252 = icmp eq i64 %251, 2
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %253, i8* %254, align 1, !tbaa !2451
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 1
  store i64 %256, i64* %PC
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %258 = load i64, i64* %257, align 8, !tbaa !2428
  %259 = add i64 %258, 8
  %260 = inttoptr i64 %258 to i64*
  %261 = load i64, i64* %260
  store i64 %261, i64* %RBP, align 8, !tbaa !2428
  store i64 %259, i64* %257, align 8, !tbaa !2428
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 1
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %266 = load i64, i64* %265, align 8, !tbaa !2428
  %267 = inttoptr i64 %266 to i64*
  %268 = load i64, i64* %267
  store i64 %268, i64* %264, align 8, !tbaa !2428
  %269 = add i64 %266, 8
  store i64 %269, i64* %265, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402224:                                     ; preds = %block_402232, %block_402210
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402210 ], [ %155, %block_402232 ]
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 8
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i64*
  %275 = load i64, i64* %274
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = load i64, i64* %RAX
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 16
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281
  %283 = sub i64 %276, %282
  %284 = icmp ugt i64 %282, %276
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %286, align 1, !tbaa !2433
  %287 = trunc i64 %283 to i32
  %288 = and i32 %287, 255
  %289 = call i32 @llvm.ctpop.i32(i32 %288) #16
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %292, i8* %293, align 1, !tbaa !2447
  %294 = xor i64 %282, %276
  %295 = xor i64 %294, %283
  %296 = lshr i64 %295, 4
  %297 = trunc i64 %296 to i8
  %298 = and i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %298, i8* %299, align 1, !tbaa !2448
  %300 = icmp eq i64 %283, 0
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %301, i8* %302, align 1, !tbaa !2449
  %303 = lshr i64 %283, 63
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %304, i8* %305, align 1, !tbaa !2450
  %306 = lshr i64 %276, 63
  %307 = lshr i64 %282, 63
  %308 = xor i64 %307, %306
  %309 = xor i64 %303, %306
  %310 = add nuw nsw i64 %309, %308
  %311 = icmp eq i64 %310, 2
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %312, i8* %313, align 1, !tbaa !2451
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 60
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 6
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 6
  store i64 %319, i64* %PC
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %321 = load i8, i8* %320, align 1, !tbaa !2449
  store i8 %321, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %323 = icmp ne i8 %321, 0
  %324 = select i1 %323, i64 %315, i64 %317
  store i64 %324, i64* %322, align 8, !tbaa !2428
  %325 = load i8, i8* %BRANCH_TAKEN
  %326 = icmp eq i8 %325, 1
  br i1 %326, label %block_402268, label %block_402232
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405e50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a90___cxx_global_var_init_24(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%DV10MPb_type* @DV10MPb to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4394
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_4037c0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4037c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %RAX = bitcast %union.anon* %19 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 5
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RCX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 7
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RDX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 9
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RSI = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 11
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 13
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSP = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 15
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RBP = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 17
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %R8 = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 64
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 64
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2433
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = xor i64 64, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2451
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = bitcast %union.vec128_t* %XMM0 to i8*
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = bitcast i8* %87 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %86 to double*
  store double %91, double* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %RDI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 24
  %101 = load i64, i64* %RSI
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %100 to i64*
  store i64 %101, i64* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %RDX
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %106 to i64*
  store i64 %107, i64* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 32
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %RDX, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 48
  %119 = load i64, i64* %RDX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 48
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RDX, align 8, !tbaa !2428
  %129 = load i64, i64* %RDX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 1, %129
  store i64 %132, i64* %RDX, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 1
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 1, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %RDX
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = shl i64 %163, 1
  %167 = icmp slt i64 %163, 0
  %168 = icmp slt i64 %166, 0
  %169 = xor i1 %167, %168
  store i64 %166, i64* %RDX, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %171 = zext i1 %167 to i8
  store i8 %171, i8* %170, align 1, !tbaa !2432
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %173 = trunc i64 %166 to i32
  %174 = and i32 %173, 254
  %175 = call i32 @llvm.ctpop.i32(i32 %174) #16
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  %178 = xor i8 %177, 1
  store i8 %178, i8* %172, align 1, !tbaa !2432
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %179, align 1, !tbaa !2432
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %181 = icmp eq i64 %166, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %180, align 1, !tbaa !2432
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %184 = lshr i64 %166, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %183, align 1, !tbaa !2432
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %187 = zext i1 %169 to i8
  store i8 %187, i8* %186, align 1, !tbaa !2432
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 40
  %190 = load i64, i64* %RDX
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %189 to i64*
  store i64 %190, i64* %193
  br label %block_4037f1

block_4037ff:                                     ; preds = %block_4037f1
  %194 = sub i64 %706, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 40
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RCX, align 8, !tbaa !2428
  %205 = load i64, i64* %RCX
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 4
  store i64 %207, i64* %PC
  %208 = sub i64 %205, 1
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = icmp ult i64 %205, 1
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %210, i8* %211, align 1, !tbaa !2433
  %212 = trunc i64 %208 to i32
  %213 = and i32 %212, 255
  %214 = call i32 @llvm.ctpop.i32(i32 %213) #16
  %215 = trunc i32 %214 to i8
  %216 = and i8 %215, 1
  %217 = xor i8 %216, 1
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %217, i8* %218, align 1, !tbaa !2447
  %219 = xor i64 1, %205
  %220 = xor i64 %219, %208
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %223, i8* %224, align 1, !tbaa !2448
  %225 = icmp eq i64 %208, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2449
  %228 = lshr i64 %208, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2450
  %231 = lshr i64 %205, 63
  %232 = xor i64 %228, %231
  %233 = add nuw nsw i64 %232, %231
  %234 = icmp eq i64 %233, 2
  %235 = zext i1 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %235, i8* %236, align 1, !tbaa !2451
  %237 = load i64, i64* %RCX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = shl i64 %237, 2
  %241 = icmp slt i64 %240, 0
  %242 = shl i64 %240, 1
  store i64 %242, i64* %RCX, align 8, !tbaa !2428
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %244 = zext i1 %241 to i8
  store i8 %244, i8* %243, align 1, !tbaa !2432
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %246 = trunc i64 %242 to i32
  %247 = and i32 %246, 254
  %248 = call i32 @llvm.ctpop.i32(i32 %247) #16
  %249 = trunc i32 %248 to i8
  %250 = and i8 %249, 1
  %251 = xor i8 %250, 1
  store i8 %251, i8* %245, align 1, !tbaa !2432
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %252, align 1, !tbaa !2432
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %254 = icmp eq i64 %242, 0
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %253, align 1, !tbaa !2432
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %257 = lshr i64 %242, 63
  %258 = trunc i64 %257 to i8
  store i8 %258, i8* %256, align 1, !tbaa !2432
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %259, align 1, !tbaa !2432
  %260 = load i64, i64* %RAX
  %261 = load i64, i64* %RCX
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 3
  store i64 %263, i64* %PC
  %264 = add i64 %261, %260
  store i64 %264, i64* %RAX, align 8, !tbaa !2428
  %265 = icmp ult i64 %264, %260
  %266 = icmp ult i64 %264, %261
  %267 = or i1 %265, %266
  %268 = zext i1 %267 to i8
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %268, i8* %269, align 1, !tbaa !2433
  %270 = trunc i64 %264 to i32
  %271 = and i32 %270, 255
  %272 = call i32 @llvm.ctpop.i32(i32 %271) #16
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %275, i8* %276, align 1, !tbaa !2447
  %277 = xor i64 %261, %260
  %278 = xor i64 %277, %264
  %279 = lshr i64 %278, 4
  %280 = trunc i64 %279 to i8
  %281 = and i8 %280, 1
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %281, i8* %282, align 1, !tbaa !2448
  %283 = icmp eq i64 %264, 0
  %284 = zext i1 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %284, i8* %285, align 1, !tbaa !2449
  %286 = lshr i64 %264, 63
  %287 = trunc i64 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %287, i8* %288, align 1, !tbaa !2450
  %289 = lshr i64 %260, 63
  %290 = lshr i64 %261, 63
  %291 = xor i64 %286, %289
  %292 = xor i64 %286, %290
  %293 = add nuw nsw i64 %291, %292
  %294 = icmp eq i64 %293, 2
  %295 = zext i1 %294 to i8
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %295, i8* %296, align 1, !tbaa !2451
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 24
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 40
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i64*
  %308 = load i64, i64* %307
  store i64 %308, i64* %RDX, align 8, !tbaa !2428
  %309 = load i64, i64* %RDX
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC
  %312 = shl i64 %309, 2
  %313 = icmp slt i64 %312, 0
  %314 = shl i64 %312, 1
  store i64 %314, i64* %RDX, align 8, !tbaa !2428
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %316 = zext i1 %313 to i8
  store i8 %316, i8* %315, align 1, !tbaa !2432
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %318 = trunc i64 %314 to i32
  %319 = and i32 %318, 254
  %320 = call i32 @llvm.ctpop.i32(i32 %319) #16
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  store i8 %323, i8* %317, align 1, !tbaa !2432
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %324, align 1, !tbaa !2432
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %326 = icmp eq i64 %314, 0
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %325, align 1, !tbaa !2432
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %329 = lshr i64 %314, 63
  %330 = trunc i64 %329 to i8
  store i8 %330, i8* %328, align 1, !tbaa !2432
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %331, align 1, !tbaa !2432
  %332 = load i64, i64* %RCX
  %333 = load i64, i64* %RDX
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 3
  store i64 %335, i64* %PC
  %336 = add i64 %333, %332
  store i64 %336, i64* %RCX, align 8, !tbaa !2428
  %337 = icmp ult i64 %336, %332
  %338 = icmp ult i64 %336, %333
  %339 = or i1 %337, %338
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %340, i8* %341, align 1, !tbaa !2433
  %342 = trunc i64 %336 to i32
  %343 = and i32 %342, 255
  %344 = call i32 @llvm.ctpop.i32(i32 %343) #16
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  %347 = xor i8 %346, 1
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %347, i8* %348, align 1, !tbaa !2447
  %349 = xor i64 %333, %332
  %350 = xor i64 %349, %336
  %351 = lshr i64 %350, 4
  %352 = trunc i64 %351 to i8
  %353 = and i8 %352, 1
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %353, i8* %354, align 1, !tbaa !2448
  %355 = icmp eq i64 %336, 0
  %356 = zext i1 %355 to i8
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %356, i8* %357, align 1, !tbaa !2449
  %358 = lshr i64 %336, 63
  %359 = trunc i64 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %359, i8* %360, align 1, !tbaa !2450
  %361 = lshr i64 %332, 63
  %362 = lshr i64 %333, 63
  %363 = xor i64 %358, %361
  %364 = xor i64 %358, %362
  %365 = add nuw nsw i64 %363, %364
  %366 = icmp eq i64 %365, 2
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %367, i8* %368, align 1, !tbaa !2451
  %369 = load i64, i64* %RAX
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC
  store i64 %369, i64* %RDI, align 8, !tbaa !2428
  %372 = load i64, i64* %RCX
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  store i64 %372, i64* %RSI, align 8, !tbaa !2428
  %375 = load i64, i64* %PC
  %376 = sub i64 %375, 1927
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 5
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  store i64 %380, i64* %PC
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %382 = load i64, i64* %381, align 8, !tbaa !2428
  %383 = add i64 %382, -8
  %384 = inttoptr i64 %383 to i64*
  store i64 %378, i64* %384
  store i64 %383, i64* %381, align 8, !tbaa !2428
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %376, i64* %385, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i8, i8* %AL
  %389 = zext i8 %388 to i64
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 2
  store i64 %391, i64* %PC
  %392 = and i64 1, %389
  %393 = trunc i64 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %394, align 1, !tbaa !2433
  %395 = trunc i64 %392 to i32
  %396 = and i32 %395, 255
  %397 = call i32 @llvm.ctpop.i32(i32 %396) #16
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  %400 = xor i8 %399, 1
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %400, i8* %401, align 1, !tbaa !2447
  %402 = icmp eq i8 %393, 0
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %403, i8* %404, align 1, !tbaa !2449
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %405, align 1, !tbaa !2450
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %406, align 1, !tbaa !2451
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %407, align 1, !tbaa !2448
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 11
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 6
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 6
  store i64 %413, i64* %PC
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %415 = load i8, i8* %414, align 1, !tbaa !2449
  %416 = icmp eq i8 %415, 0
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %419 = select i1 %416, i64 %409, i64 %411
  store i64 %419, i64* %418, align 8, !tbaa !2428
  %420 = load i8, i8* %BRANCH_TAKEN
  %421 = icmp eq i8 %420, 1
  br i1 %421, label %block_403839, label %block_403834

block_403839:                                     ; preds = %block_4037ff
  %422 = load i64, i64* %RBP
  %423 = sub i64 %422, 40
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 4
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %423 to i64*
  %427 = load i64, i64* %426
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 4
  store i64 %430, i64* %PC
  %431 = add i64 1, %428
  store i64 %431, i64* %RAX, align 8, !tbaa !2428
  %432 = icmp ult i64 %431, %428
  %433 = icmp ult i64 %431, 1
  %434 = or i1 %432, %433
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %435, i8* %436, align 1, !tbaa !2433
  %437 = trunc i64 %431 to i32
  %438 = and i32 %437, 255
  %439 = call i32 @llvm.ctpop.i32(i32 %438) #16
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  %442 = xor i8 %441, 1
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %442, i8* %443, align 1, !tbaa !2447
  %444 = xor i64 1, %428
  %445 = xor i64 %444, %431
  %446 = lshr i64 %445, 4
  %447 = trunc i64 %446 to i8
  %448 = and i8 %447, 1
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %448, i8* %449, align 1, !tbaa !2448
  %450 = icmp eq i64 %431, 0
  %451 = zext i1 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %451, i8* %452, align 1, !tbaa !2449
  %453 = lshr i64 %431, 63
  %454 = trunc i64 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %454, i8* %455, align 1, !tbaa !2450
  %456 = lshr i64 %428, 63
  %457 = xor i64 %453, %456
  %458 = add nuw nsw i64 %457, %453
  %459 = icmp eq i64 %458, 2
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %460, i8* %461, align 1, !tbaa !2451
  %462 = load i64, i64* %RBP
  %463 = sub i64 %462, 40
  %464 = load i64, i64* %RAX
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 4
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %463 to i64*
  store i64 %464, i64* %467
  br label %block_403845

block_4038b4:                                     ; preds = %block_40388c, %block_40387e
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_40387e ], [ %MEMORY.1, %block_40388c ]
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 5
  store i64 %469, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %470 = load i32, i32* %EAX
  %471 = zext i32 %470 to i64
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 2
  store i64 %473, i64* %PC
  %474 = and i64 %471, 4294967295
  store i64 %474, i64* %RCX, align 8, !tbaa !2428
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 48
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i64*
  %480 = load i64, i64* %479
  store i64 %480, i64* %RDX, align 8, !tbaa !2428
  %481 = load i64, i64* %RDX
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC
  %484 = sub i64 %481, 1
  store i64 %484, i64* %RDX, align 8, !tbaa !2428
  %485 = icmp ult i64 %481, 1
  %486 = zext i1 %485 to i8
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %486, i8* %487, align 1, !tbaa !2433
  %488 = trunc i64 %484 to i32
  %489 = and i32 %488, 255
  %490 = call i32 @llvm.ctpop.i32(i32 %489) #16
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = xor i8 %492, 1
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %493, i8* %494, align 1, !tbaa !2447
  %495 = xor i64 1, %481
  %496 = xor i64 %495, %484
  %497 = lshr i64 %496, 4
  %498 = trunc i64 %497 to i8
  %499 = and i8 %498, 1
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %499, i8* %500, align 1, !tbaa !2448
  %501 = icmp eq i64 %484, 0
  %502 = zext i1 %501 to i8
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %502, i8* %503, align 1, !tbaa !2449
  %504 = lshr i64 %484, 63
  %505 = trunc i64 %504 to i8
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %505, i8* %506, align 1, !tbaa !2450
  %507 = lshr i64 %481, 63
  %508 = xor i64 %504, %507
  %509 = add nuw nsw i64 %508, %507
  %510 = icmp eq i64 %509, 2
  %511 = zext i1 %510 to i8
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %511, i8* %512, align 1, !tbaa !2451
  %513 = load i64, i64* %RDX
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 3
  store i64 %515, i64* %PC
  store i64 %513, i64* %RAX, align 8, !tbaa !2428
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 2
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %520 = load i64, i64* %519, align 8, !tbaa !2428
  %521 = ashr i64 %520, 63
  store i64 %521, i64* %518, align 8, !tbaa !2428
  %522 = load i64, i64* %RCX
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 3
  store i64 %524, i64* %PC
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %526 = load i64, i64* %525, align 8, !tbaa !2428
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %528 = load i64, i64* %527, align 8, !tbaa !2428
  %529 = sext i64 %522 to i128
  %530 = and i128 %529, -18446744073709551616
  %531 = zext i64 %528 to i128
  %532 = shl nuw i128 %531, 64
  %533 = zext i64 %526 to i128
  %534 = or i128 %532, %533
  %535 = zext i64 %522 to i128
  %536 = or i128 %530, %535
  %537 = sdiv i128 %534, %536
  %538 = trunc i128 %537 to i64
  %539 = and i128 %537, 18446744073709551615
  %540 = sext i64 %538 to i128
  %541 = and i128 %540, -18446744073709551616
  %542 = or i128 %541, %539
  %543 = icmp eq i128 %537, %542
  br i1 %543, label %548, label %544

; <label>:544:                                    ; preds = %block_4038b4
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %546 = load i64, i64* %545, align 8, !tbaa !2428
  %547 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %546, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:548:                                    ; preds = %block_4038b4
  %549 = srem i128 %534, %536
  %550 = trunc i128 %549 to i64
  store i64 %538, i64* %525, align 8, !tbaa !2428
  store i64 %550, i64* %527, align 8, !tbaa !2428
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %551, align 1, !tbaa !2433
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %552, align 1, !tbaa !2447
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %553, align 1, !tbaa !2448
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %554, align 1, !tbaa !2449
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %555, align 1, !tbaa !2450
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %556, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %544, %548
  %557 = phi %struct.Memory* [ %547, %544 ], [ %MEMORY.0, %548 ]
  %558 = load i64, i64* %RBP
  %559 = sub i64 %558, 40
  %560 = load i64, i64* %RAX
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 4
  store i64 %562, i64* %PC
  %563 = inttoptr i64 %559 to i64*
  store i64 %560, i64* %563
  br label %block_4038cf

block_40390d:                                     ; preds = %block_403902
  %564 = add i64 %1333, 69
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 5
  store i64 %566, i64* %PC
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %564, i64* %567, align 8, !tbaa !2428
  %568 = load i64, i64* %RBP
  %569 = sub i64 %568, 24
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = load i64, i64* %RBP
  %575 = sub i64 %574, 48
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 4
  store i64 %577, i64* %PC
  %578 = inttoptr i64 %575 to i64*
  %579 = load i64, i64* %578
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 8
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 4
  store i64 %583, i64* %PC
  %584 = inttoptr i64 %581 to i64*
  %585 = load i64, i64* %584
  store i64 %585, i64* %RDX, align 8, !tbaa !2428
  %586 = load i64, i64* %RAX
  %587 = load i64, i64* %RCX
  %588 = mul i64 %587, 8
  %589 = add i64 %588, %586
  %590 = load i64, i64* %RDX
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 4
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %589 to i64*
  store i64 %590, i64* %593
  %594 = load i64, i64* %RSP
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 4
  store i64 %596, i64* %PC
  %597 = add i64 64, %594
  store i64 %597, i64* %RSP, align 8, !tbaa !2428
  %598 = icmp ult i64 %597, %594
  %599 = icmp ult i64 %597, 64
  %600 = or i1 %598, %599
  %601 = zext i1 %600 to i8
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %601, i8* %602, align 1, !tbaa !2433
  %603 = trunc i64 %597 to i32
  %604 = and i32 %603, 255
  %605 = call i32 @llvm.ctpop.i32(i32 %604) #16
  %606 = trunc i32 %605 to i8
  %607 = and i8 %606, 1
  %608 = xor i8 %607, 1
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %608, i8* %609, align 1, !tbaa !2447
  %610 = xor i64 64, %594
  %611 = xor i64 %610, %597
  %612 = lshr i64 %611, 4
  %613 = trunc i64 %612 to i8
  %614 = and i8 %613, 1
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %614, i8* %615, align 1, !tbaa !2448
  %616 = icmp eq i64 %597, 0
  %617 = zext i1 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %617, i8* %618, align 1, !tbaa !2449
  %619 = lshr i64 %597, 63
  %620 = trunc i64 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %620, i8* %621, align 1, !tbaa !2450
  %622 = lshr i64 %594, 63
  %623 = xor i64 %619, %622
  %624 = add nuw nsw i64 %623, %619
  %625 = icmp eq i64 %624, 2
  %626 = zext i1 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %626, i8* %627, align 1, !tbaa !2451
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 1
  store i64 %629, i64* %PC
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %631 = load i64, i64* %630, align 8, !tbaa !2428
  %632 = add i64 %631, 8
  %633 = inttoptr i64 %631 to i64*
  %634 = load i64, i64* %633
  store i64 %634, i64* %RBP, align 8, !tbaa !2428
  store i64 %632, i64* %630, align 8, !tbaa !2428
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 1
  store i64 %636, i64* %PC
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %639 = load i64, i64* %638, align 8, !tbaa !2428
  %640 = inttoptr i64 %639 to i64*
  %641 = load i64, i64* %640
  store i64 %641, i64* %637, align 8, !tbaa !2428
  %642 = add i64 %639, 8
  store i64 %642, i64* %638, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_4037f1:                                     ; preds = %block_403845, %block_4037c0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4037c0 ], [ %MEMORY.2, %block_403845 ]
  %643 = load i64, i64* %RBP
  %644 = sub i64 %643, 40
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 4
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i64*
  %648 = load i64, i64* %647
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = load i64, i64* %RAX
  %650 = load i64, i64* %RBP
  %651 = sub i64 %650, 16
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %651 to i64*
  %655 = load i64, i64* %654
  %656 = sub i64 %649, %655
  %657 = icmp ugt i64 %655, %649
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2433
  %660 = trunc i64 %656 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2447
  %667 = xor i64 %655, %649
  %668 = xor i64 %667, %656
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2448
  %673 = icmp eq i64 %656, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2449
  %676 = lshr i64 %656, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2450
  %679 = lshr i64 %649, 63
  %680 = lshr i64 %655, 63
  %681 = xor i64 %680, %679
  %682 = xor i64 %676, %679
  %683 = add nuw nsw i64 %682, %681
  %684 = icmp eq i64 %683, 2
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %685, i8* %686, align 1, !tbaa !2451
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 133
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 6
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 6
  store i64 %692, i64* %PC
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %694 = load i8, i8* %693, align 1, !tbaa !2450
  %695 = icmp ne i8 %694, 0
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %697 = load i8, i8* %696, align 1, !tbaa !2451
  %698 = icmp ne i8 %697, 0
  %699 = xor i1 %695, %698
  %700 = xor i1 %699, true
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %703 = select i1 %699, i64 %690, i64 %688
  store i64 %703, i64* %702, align 8, !tbaa !2428
  %704 = load i8, i8* %BRANCH_TAKEN
  %705 = icmp eq i8 %704, 1
  %706 = load i64, i64* %RBP
  br i1 %705, label %block_40387e, label %block_4037ff

block_403912:                                     ; preds = %block_403902
  %707 = add i64 %1333, 5
  store i64 %707, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %708 = load i32, i32* %EAX
  %709 = zext i32 %708 to i64
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 2
  store i64 %711, i64* %PC
  %712 = and i64 %709, 4294967295
  store i64 %712, i64* %RCX, align 8, !tbaa !2428
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 24
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 4
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %714 to i64*
  %718 = load i64, i64* %717
  store i64 %718, i64* %RDX, align 8, !tbaa !2428
  %719 = load i64, i64* %RBP
  %720 = sub i64 %719, 40
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 4
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i64*
  %724 = load i64, i64* %723
  store i64 %724, i64* %RSI, align 8, !tbaa !2428
  %725 = load i64, i64* %RBP
  %726 = sub i64 %725, 24
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 4
  store i64 %728, i64* %PC
  %729 = inttoptr i64 %726 to i64*
  %730 = load i64, i64* %729
  store i64 %730, i64* %RDI, align 8, !tbaa !2428
  %731 = load i64, i64* %RBP
  %732 = sub i64 %731, 48
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 4
  store i64 %734, i64* %PC
  %735 = inttoptr i64 %732 to i64*
  %736 = load i64, i64* %735
  store i64 %736, i64* %R8, align 8, !tbaa !2428
  %737 = load i64, i64* %RDX
  %738 = load i64, i64* %RSI
  %739 = mul i64 %738, 8
  %740 = add i64 %739, %737
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 4
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %740 to i64*
  %744 = load i64, i64* %743
  store i64 %744, i64* %RDX, align 8, !tbaa !2428
  %745 = load i64, i64* %RDI
  %746 = load i64, i64* %R8
  %747 = mul i64 %746, 8
  %748 = add i64 %747, %745
  %749 = load i64, i64* %RDX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = inttoptr i64 %748 to i64*
  store i64 %749, i64* %752
  %753 = load i64, i64* %RBP
  %754 = sub i64 %753, 40
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 4
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %754 to i64*
  %758 = load i64, i64* %757
  store i64 %758, i64* %RDX, align 8, !tbaa !2428
  %759 = load i64, i64* %RBP
  %760 = sub i64 %759, 48
  %761 = load i64, i64* %RDX
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 4
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %760 to i64*
  store i64 %761, i64* %764
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 48
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i64*
  %770 = load i64, i64* %769
  store i64 %770, i64* %RDX, align 8, !tbaa !2428
  %771 = load i64, i64* %RDX
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 4
  store i64 %773, i64* %PC
  %774 = sub i64 %771, 1
  store i64 %774, i64* %RDX, align 8, !tbaa !2428
  %775 = icmp ult i64 %771, 1
  %776 = zext i1 %775 to i8
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %776, i8* %777, align 1, !tbaa !2433
  %778 = trunc i64 %774 to i32
  %779 = and i32 %778, 255
  %780 = call i32 @llvm.ctpop.i32(i32 %779) #16
  %781 = trunc i32 %780 to i8
  %782 = and i8 %781, 1
  %783 = xor i8 %782, 1
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %783, i8* %784, align 1, !tbaa !2447
  %785 = xor i64 1, %771
  %786 = xor i64 %785, %774
  %787 = lshr i64 %786, 4
  %788 = trunc i64 %787 to i8
  %789 = and i8 %788, 1
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %789, i8* %790, align 1, !tbaa !2448
  %791 = icmp eq i64 %774, 0
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %792, i8* %793, align 1, !tbaa !2449
  %794 = lshr i64 %774, 63
  %795 = trunc i64 %794 to i8
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %795, i8* %796, align 1, !tbaa !2450
  %797 = lshr i64 %771, 63
  %798 = xor i64 %794, %797
  %799 = add nuw nsw i64 %798, %797
  %800 = icmp eq i64 %799, 2
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %801, i8* %802, align 1, !tbaa !2451
  %803 = load i64, i64* %RDX
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 3
  store i64 %805, i64* %PC
  store i64 %803, i64* %RAX, align 8, !tbaa !2428
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 2
  store i64 %807, i64* %PC
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %810 = load i64, i64* %809, align 8, !tbaa !2428
  %811 = ashr i64 %810, 63
  store i64 %811, i64* %808, align 8, !tbaa !2428
  %812 = load i64, i64* %RCX
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 3
  store i64 %814, i64* %PC
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %816 = load i64, i64* %815, align 8, !tbaa !2428
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %818 = load i64, i64* %817, align 8, !tbaa !2428
  %819 = sext i64 %812 to i128
  %820 = and i128 %819, -18446744073709551616
  %821 = zext i64 %818 to i128
  %822 = shl nuw i128 %821, 64
  %823 = zext i64 %816 to i128
  %824 = or i128 %822, %823
  %825 = zext i64 %812 to i128
  %826 = or i128 %820, %825
  %827 = sdiv i128 %824, %826
  %828 = trunc i128 %827 to i64
  %829 = and i128 %827, 18446744073709551615
  %830 = sext i64 %828 to i128
  %831 = and i128 %830, -18446744073709551616
  %832 = or i128 %831, %829
  %833 = icmp eq i128 %827, %832
  br i1 %833, label %838, label %834

; <label>:834:                                    ; preds = %block_403912
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %836 = load i64, i64* %835, align 8, !tbaa !2428
  %837 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %836, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:838:                                    ; preds = %block_403912
  %839 = srem i128 %824, %826
  %840 = trunc i128 %839 to i64
  store i64 %828, i64* %815, align 8, !tbaa !2428
  store i64 %840, i64* %817, align 8, !tbaa !2428
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %841, align 1, !tbaa !2433
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %842, align 1, !tbaa !2447
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %843, align 1, !tbaa !2448
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %844, align 1, !tbaa !2449
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %845, align 1, !tbaa !2450
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %846, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %834, %838
  %847 = phi %struct.Memory* [ %837, %834 ], [ %MEMORY.4, %838 ]
  %848 = load i64, i64* %RBP
  %849 = sub i64 %848, 40
  %850 = load i64, i64* %RAX
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 4
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %849 to i64*
  store i64 %850, i64* %853
  %854 = load i64, i64* %PC
  %855 = sub i64 %854, 126
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 5
  store i64 %857, i64* %PC
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %855, i64* %858, align 8, !tbaa !2428
  br label %block_4038cf

block_403834:                                     ; preds = %block_4037ff
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 17
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 5
  store i64 %862, i64* %PC
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %860, i64* %863, align 8, !tbaa !2428
  br label %block_403845

block_403845:                                     ; preds = %block_403834, %block_403839
  %MEMORY.2 = phi %struct.Memory* [ %387, %block_403839 ], [ %387, %block_403834 ]
  %864 = load i64, i64* %RBP
  %865 = sub i64 %864, 24
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 4
  store i64 %867, i64* %PC
  %868 = inttoptr i64 %865 to i64*
  %869 = load i64, i64* %868
  store i64 %869, i64* %RAX, align 8, !tbaa !2428
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 40
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 4
  store i64 %873, i64* %PC
  %874 = inttoptr i64 %871 to i64*
  %875 = load i64, i64* %874
  store i64 %875, i64* %RCX, align 8, !tbaa !2428
  %876 = load i64, i64* %RCX
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 4
  store i64 %878, i64* %PC
  %879 = sub i64 %876, 1
  store i64 %879, i64* %RCX, align 8, !tbaa !2428
  %880 = icmp ult i64 %876, 1
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %881, i8* %882, align 1, !tbaa !2433
  %883 = trunc i64 %879 to i32
  %884 = and i32 %883, 255
  %885 = call i32 @llvm.ctpop.i32(i32 %884) #16
  %886 = trunc i32 %885 to i8
  %887 = and i8 %886, 1
  %888 = xor i8 %887, 1
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %888, i8* %889, align 1, !tbaa !2447
  %890 = xor i64 1, %876
  %891 = xor i64 %890, %879
  %892 = lshr i64 %891, 4
  %893 = trunc i64 %892 to i8
  %894 = and i8 %893, 1
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %894, i8* %895, align 1, !tbaa !2448
  %896 = icmp eq i64 %879, 0
  %897 = zext i1 %896 to i8
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %897, i8* %898, align 1, !tbaa !2449
  %899 = lshr i64 %879, 63
  %900 = trunc i64 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %900, i8* %901, align 1, !tbaa !2450
  %902 = lshr i64 %876, 63
  %903 = xor i64 %899, %902
  %904 = add nuw nsw i64 %903, %902
  %905 = icmp eq i64 %904, 2
  %906 = zext i1 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %906, i8* %907, align 1, !tbaa !2451
  %908 = load i64, i64* %RBP
  %909 = sub i64 %908, 24
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 4
  store i64 %911, i64* %PC
  %912 = inttoptr i64 %909 to i64*
  %913 = load i64, i64* %912
  store i64 %913, i64* %RDX, align 8, !tbaa !2428
  %914 = load i64, i64* %RBP
  %915 = sub i64 %914, 48
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 4
  store i64 %917, i64* %PC
  %918 = inttoptr i64 %915 to i64*
  %919 = load i64, i64* %918
  store i64 %919, i64* %RSI, align 8, !tbaa !2428
  %920 = load i64, i64* %RAX
  %921 = load i64, i64* %RCX
  %922 = mul i64 %921, 8
  %923 = add i64 %922, %920
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 4
  store i64 %925, i64* %PC
  %926 = inttoptr i64 %923 to i64*
  %927 = load i64, i64* %926
  store i64 %927, i64* %RAX, align 8, !tbaa !2428
  %928 = load i64, i64* %RDX
  %929 = load i64, i64* %RSI
  %930 = mul i64 %929, 8
  %931 = add i64 %930, %928
  %932 = load i64, i64* %RAX
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 4
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %931 to i64*
  store i64 %932, i64* %935
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 40
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 4
  store i64 %944, i64* %PC
  %945 = sub i64 %942, 1
  store i64 %945, i64* %RAX, align 8, !tbaa !2428
  %946 = icmp ult i64 %942, 1
  %947 = zext i1 %946 to i8
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %947, i8* %948, align 1, !tbaa !2433
  %949 = trunc i64 %945 to i32
  %950 = and i32 %949, 255
  %951 = call i32 @llvm.ctpop.i32(i32 %950) #16
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  %954 = xor i8 %953, 1
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %954, i8* %955, align 1, !tbaa !2447
  %956 = xor i64 1, %942
  %957 = xor i64 %956, %945
  %958 = lshr i64 %957, 4
  %959 = trunc i64 %958 to i8
  %960 = and i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %960, i8* %961, align 1, !tbaa !2448
  %962 = icmp eq i64 %945, 0
  %963 = zext i1 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %963, i8* %964, align 1, !tbaa !2449
  %965 = lshr i64 %945, 63
  %966 = trunc i64 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2450
  %968 = lshr i64 %942, 63
  %969 = xor i64 %965, %968
  %970 = add nuw nsw i64 %969, %968
  %971 = icmp eq i64 %970, 2
  %972 = zext i1 %971 to i8
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %972, i8* %973, align 1, !tbaa !2451
  %974 = load i64, i64* %RBP
  %975 = sub i64 %974, 48
  %976 = load i64, i64* %RAX
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 4
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %975 to i64*
  store i64 %976, i64* %979
  %980 = load i64, i64* %RBP
  %981 = sub i64 %980, 40
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %981 to i64*
  %985 = load i64, i64* %984
  store i64 %985, i64* %RAX, align 8, !tbaa !2428
  %986 = load i64, i64* %RAX
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 40
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i64*
  %992 = load i64, i64* %991
  %993 = add i64 %992, %986
  store i64 %993, i64* %RAX, align 8, !tbaa !2428
  %994 = icmp ult i64 %993, %986
  %995 = icmp ult i64 %993, %992
  %996 = or i1 %994, %995
  %997 = zext i1 %996 to i8
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %997, i8* %998, align 1, !tbaa !2433
  %999 = trunc i64 %993 to i32
  %1000 = and i32 %999, 255
  %1001 = call i32 @llvm.ctpop.i32(i32 %1000) #16
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1004, i8* %1005, align 1, !tbaa !2447
  %1006 = xor i64 %992, %986
  %1007 = xor i64 %1006, %993
  %1008 = lshr i64 %1007, 4
  %1009 = trunc i64 %1008 to i8
  %1010 = and i8 %1009, 1
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1010, i8* %1011, align 1, !tbaa !2448
  %1012 = icmp eq i64 %993, 0
  %1013 = zext i1 %1012 to i8
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1013, i8* %1014, align 1, !tbaa !2449
  %1015 = lshr i64 %993, 63
  %1016 = trunc i64 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1016, i8* %1017, align 1, !tbaa !2450
  %1018 = lshr i64 %986, 63
  %1019 = lshr i64 %992, 63
  %1020 = xor i64 %1015, %1018
  %1021 = xor i64 %1015, %1019
  %1022 = add nuw nsw i64 %1020, %1021
  %1023 = icmp eq i64 %1022, 2
  %1024 = zext i1 %1023 to i8
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1024, i8* %1025, align 1, !tbaa !2451
  %1026 = load i64, i64* %RBP
  %1027 = sub i64 %1026, 40
  %1028 = load i64, i64* %RAX
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 4
  store i64 %1030, i64* %PC
  %1031 = inttoptr i64 %1027 to i64*
  store i64 %1028, i64* %1031
  %1032 = load i64, i64* %PC
  %1033 = sub i64 %1032, 136
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 5
  store i64 %1035, i64* %PC
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1033, i64* %1036, align 8, !tbaa !2428
  br label %block_4037f1

block_40387e:                                     ; preds = %block_4037f1
  %1037 = sub i64 %706, 40
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 4
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1037 to i64*
  %1041 = load i64, i64* %1040
  store i64 %1041, i64* %RAX, align 8, !tbaa !2428
  %1042 = load i64, i64* %RAX
  %1043 = load i64, i64* %RBP
  %1044 = sub i64 %1043, 16
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 4
  store i64 %1046, i64* %PC
  %1047 = inttoptr i64 %1044 to i64*
  %1048 = load i64, i64* %1047
  %1049 = sub i64 %1042, %1048
  %1050 = icmp ugt i64 %1048, %1042
  %1051 = zext i1 %1050 to i8
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1051, i8* %1052, align 1, !tbaa !2433
  %1053 = trunc i64 %1049 to i32
  %1054 = and i32 %1053, 255
  %1055 = call i32 @llvm.ctpop.i32(i32 %1054) #16
  %1056 = trunc i32 %1055 to i8
  %1057 = and i8 %1056, 1
  %1058 = xor i8 %1057, 1
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1058, i8* %1059, align 1, !tbaa !2447
  %1060 = xor i64 %1048, %1042
  %1061 = xor i64 %1060, %1049
  %1062 = lshr i64 %1061, 4
  %1063 = trunc i64 %1062 to i8
  %1064 = and i8 %1063, 1
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1064, i8* %1065, align 1, !tbaa !2448
  %1066 = icmp eq i64 %1049, 0
  %1067 = zext i1 %1066 to i8
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1067, i8* %1068, align 1, !tbaa !2449
  %1069 = lshr i64 %1049, 63
  %1070 = trunc i64 %1069 to i8
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1070, i8* %1071, align 1, !tbaa !2450
  %1072 = lshr i64 %1042, 63
  %1073 = lshr i64 %1048, 63
  %1074 = xor i64 %1073, %1072
  %1075 = xor i64 %1069, %1072
  %1076 = add nuw nsw i64 %1075, %1074
  %1077 = icmp eq i64 %1076, 2
  %1078 = zext i1 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1078, i8* %1079, align 1, !tbaa !2451
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 46
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 6
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 6
  store i64 %1085, i64* %PC
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1087 = load i8, i8* %1086, align 1, !tbaa !2449
  %1088 = icmp eq i8 %1087, 0
  %1089 = zext i1 %1088 to i8
  store i8 %1089, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1091 = select i1 %1088, i64 %1081, i64 %1083
  store i64 %1091, i64* %1090, align 8, !tbaa !2428
  %1092 = load i8, i8* %BRANCH_TAKEN
  %1093 = icmp eq i8 %1092, 1
  br i1 %1093, label %block_4038b4, label %block_40388c

block_4038e4:                                     ; preds = %block_4038cf
  %1094 = load i64, i64* %RBP
  %1095 = sub i64 %1094, 8
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 4
  store i64 %1097, i64* %PC
  store i64 %1095, i64* %RSI, align 8, !tbaa !2428
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 24
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 4
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1099 to i64*
  %1103 = load i64, i64* %1102
  store i64 %1103, i64* %RAX, align 8, !tbaa !2428
  %1104 = load i64, i64* %RBP
  %1105 = sub i64 %1104, 40
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 4
  store i64 %1107, i64* %PC
  %1108 = inttoptr i64 %1105 to i64*
  %1109 = load i64, i64* %1108
  store i64 %1109, i64* %RCX, align 8, !tbaa !2428
  %1110 = load i64, i64* %RCX
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 4
  store i64 %1112, i64* %PC
  %1113 = shl i64 %1110, 2
  %1114 = icmp slt i64 %1113, 0
  %1115 = shl i64 %1113, 1
  store i64 %1115, i64* %RCX, align 8, !tbaa !2428
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1117 = zext i1 %1114 to i8
  store i8 %1117, i8* %1116, align 1, !tbaa !2432
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1119 = trunc i64 %1115 to i32
  %1120 = and i32 %1119, 254
  %1121 = call i32 @llvm.ctpop.i32(i32 %1120) #16
  %1122 = trunc i32 %1121 to i8
  %1123 = and i8 %1122, 1
  %1124 = xor i8 %1123, 1
  store i8 %1124, i8* %1118, align 1, !tbaa !2432
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1125, align 1, !tbaa !2432
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1127 = icmp eq i64 %1115, 0
  %1128 = zext i1 %1127 to i8
  store i8 %1128, i8* %1126, align 1, !tbaa !2432
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1130 = lshr i64 %1115, 63
  %1131 = trunc i64 %1130 to i8
  store i8 %1131, i8* %1129, align 1, !tbaa !2432
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1132, align 1, !tbaa !2432
  %1133 = load i64, i64* %RAX
  %1134 = load i64, i64* %RCX
  %1135 = load i64, i64* %PC
  %1136 = add i64 %1135, 3
  store i64 %1136, i64* %PC
  %1137 = add i64 %1134, %1133
  store i64 %1137, i64* %RAX, align 8, !tbaa !2428
  %1138 = icmp ult i64 %1137, %1133
  %1139 = icmp ult i64 %1137, %1134
  %1140 = or i1 %1138, %1139
  %1141 = zext i1 %1140 to i8
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1141, i8* %1142, align 1, !tbaa !2433
  %1143 = trunc i64 %1137 to i32
  %1144 = and i32 %1143, 255
  %1145 = call i32 @llvm.ctpop.i32(i32 %1144) #16
  %1146 = trunc i32 %1145 to i8
  %1147 = and i8 %1146, 1
  %1148 = xor i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1148, i8* %1149, align 1, !tbaa !2447
  %1150 = xor i64 %1134, %1133
  %1151 = xor i64 %1150, %1137
  %1152 = lshr i64 %1151, 4
  %1153 = trunc i64 %1152 to i8
  %1154 = and i8 %1153, 1
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1154, i8* %1155, align 1, !tbaa !2448
  %1156 = icmp eq i64 %1137, 0
  %1157 = zext i1 %1156 to i8
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1157, i8* %1158, align 1, !tbaa !2449
  %1159 = lshr i64 %1137, 63
  %1160 = trunc i64 %1159 to i8
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1160, i8* %1161, align 1, !tbaa !2450
  %1162 = lshr i64 %1133, 63
  %1163 = lshr i64 %1134, 63
  %1164 = xor i64 %1159, %1162
  %1165 = xor i64 %1159, %1163
  %1166 = add nuw nsw i64 %1164, %1165
  %1167 = icmp eq i64 %1166, 2
  %1168 = zext i1 %1167 to i8
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1168, i8* %1169, align 1, !tbaa !2451
  %1170 = load i64, i64* %RAX
  %1171 = load i64, i64* %PC
  %1172 = add i64 %1171, 3
  store i64 %1172, i64* %PC
  store i64 %1170, i64* %RDI, align 8, !tbaa !2428
  %1173 = load i64, i64* %PC
  %1174 = sub i64 %1173, 2138
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1180 = load i64, i64* %1179, align 8, !tbaa !2428
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1176, i64* %1182
  store i64 %1181, i64* %1179, align 8, !tbaa !2428
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1174, i64* %1183, align 8, !tbaa !2428
  %1184 = load i64, i64* %PC
  %1185 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %1184, %struct.Memory* %MEMORY.3)
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 49
  %1188 = load i8, i8* %AL
  %1189 = zext i8 %1188 to i64
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 3
  store i64 %1191, i64* %PC
  %1192 = inttoptr i64 %1187 to i8*
  store i8 %1188, i8* %1192
  br label %block_403902

block_4038cf:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.3 = phi %struct.Memory* [ %557, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %847, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %1193 = load i64, i64* %RAX
  %1194 = load i32, i32* %EAX
  %1195 = zext i32 %1194 to i64
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 2
  store i64 %1197, i64* %PC
  %1198 = xor i64 %1195, %1193
  %1199 = trunc i64 %1198 to i32
  %1200 = and i64 %1198, 4294967295
  store i64 %1200, i64* %RAX, align 8, !tbaa !2428
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1201, align 1, !tbaa !2433
  %1202 = and i32 %1199, 255
  %1203 = call i32 @llvm.ctpop.i32(i32 %1202) #16
  %1204 = trunc i32 %1203 to i8
  %1205 = and i8 %1204, 1
  %1206 = xor i8 %1205, 1
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1206, i8* %1207, align 1, !tbaa !2447
  %1208 = icmp eq i32 %1199, 0
  %1209 = zext i1 %1208 to i8
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1209, i8* %1210, align 1, !tbaa !2449
  %1211 = lshr i32 %1199, 31
  %1212 = trunc i32 %1211 to i8
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1212, i8* %1213, align 1, !tbaa !2450
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1214, align 1, !tbaa !2451
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1215, align 1, !tbaa !2448
  %1216 = load i8, i8* %AL
  %1217 = zext i8 %1216 to i64
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 2
  store i64 %1219, i64* %PC
  store i8 %1216, i8* %CL, align 1, !tbaa !2432
  %1220 = load i64, i64* %RBP
  %1221 = sub i64 %1220, 48
  %1222 = load i64, i64* %PC
  %1223 = add i64 %1222, 4
  store i64 %1223, i64* %PC
  %1224 = inttoptr i64 %1221 to i64*
  %1225 = load i64, i64* %1224
  store i64 %1225, i64* %RDX, align 8, !tbaa !2428
  %1226 = load i64, i64* %RDX
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 32
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 4
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i64*
  %1232 = load i64, i64* %1231
  %1233 = sub i64 %1226, %1232
  %1234 = icmp ugt i64 %1232, %1226
  %1235 = zext i1 %1234 to i8
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1235, i8* %1236, align 1, !tbaa !2433
  %1237 = trunc i64 %1233 to i32
  %1238 = and i32 %1237, 255
  %1239 = call i32 @llvm.ctpop.i32(i32 %1238) #16
  %1240 = trunc i32 %1239 to i8
  %1241 = and i8 %1240, 1
  %1242 = xor i8 %1241, 1
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1242, i8* %1243, align 1, !tbaa !2447
  %1244 = xor i64 %1232, %1226
  %1245 = xor i64 %1244, %1233
  %1246 = lshr i64 %1245, 4
  %1247 = trunc i64 %1246 to i8
  %1248 = and i8 %1247, 1
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1248, i8* %1249, align 1, !tbaa !2448
  %1250 = icmp eq i64 %1233, 0
  %1251 = zext i1 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1251, i8* %1252, align 1, !tbaa !2449
  %1253 = lshr i64 %1233, 63
  %1254 = trunc i64 %1253 to i8
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1254, i8* %1255, align 1, !tbaa !2450
  %1256 = lshr i64 %1226, 63
  %1257 = lshr i64 %1232, 63
  %1258 = xor i64 %1257, %1256
  %1259 = xor i64 %1253, %1256
  %1260 = add nuw nsw i64 %1259, %1258
  %1261 = icmp eq i64 %1260, 2
  %1262 = zext i1 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1262, i8* %1263, align 1, !tbaa !2451
  %1264 = load i64, i64* %RBP
  %1265 = sub i64 %1264, 49
  %1266 = load i8, i8* %CL
  %1267 = zext i8 %1266 to i64
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 3
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1265 to i8*
  store i8 %1266, i8* %1270
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 36
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 6
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 6
  store i64 %1276, i64* %PC
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1278 = load i8, i8* %1277, align 1, !tbaa !2449
  %1279 = icmp ne i8 %1278, 0
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1281 = load i8, i8* %1280, align 1, !tbaa !2450
  %1282 = icmp ne i8 %1281, 0
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1284 = load i8, i8* %1283, align 1, !tbaa !2451
  %1285 = icmp ne i8 %1284, 0
  %1286 = xor i1 %1282, %1285
  %1287 = or i1 %1279, %1286
  %1288 = zext i1 %1287 to i8
  store i8 %1288, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1290 = select i1 %1287, i64 %1272, i64 %1274
  store i64 %1290, i64* %1289, align 8, !tbaa !2428
  %1291 = load i8, i8* %BRANCH_TAKEN
  %1292 = icmp eq i8 %1291, 1
  br i1 %1292, label %block_403902, label %block_4038e4

block_403902:                                     ; preds = %block_4038cf, %block_4038e4
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_4038cf ], [ %1185, %block_4038e4 ]
  %1293 = load i64, i64* %RBP
  %1294 = sub i64 %1293, 49
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 3
  store i64 %1296, i64* %PC
  %1297 = inttoptr i64 %1294 to i8*
  %1298 = load i8, i8* %1297
  store i8 %1298, i8* %AL, align 1, !tbaa !2432
  %1299 = load i8, i8* %AL
  %1300 = zext i8 %1299 to i64
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 2
  store i64 %1302, i64* %PC
  %1303 = and i64 1, %1300
  %1304 = trunc i64 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1305, align 1, !tbaa !2433
  %1306 = trunc i64 %1303 to i32
  %1307 = and i32 %1306, 255
  %1308 = call i32 @llvm.ctpop.i32(i32 %1307) #16
  %1309 = trunc i32 %1308 to i8
  %1310 = and i8 %1309, 1
  %1311 = xor i8 %1310, 1
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1311, i8* %1312, align 1, !tbaa !2447
  %1313 = icmp eq i8 %1304, 0
  %1314 = zext i1 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1314, i8* %1315, align 1, !tbaa !2449
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1316, align 1, !tbaa !2450
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1317, align 1, !tbaa !2451
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1318, align 1, !tbaa !2448
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 11
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 6
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 6
  store i64 %1324, i64* %PC
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1326 = load i8, i8* %1325, align 1, !tbaa !2449
  %1327 = icmp eq i8 %1326, 0
  %1328 = zext i1 %1327 to i8
  store i8 %1328, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1330 = select i1 %1327, i64 %1320, i64 %1322
  store i64 %1330, i64* %1329, align 8, !tbaa !2428
  %1331 = load i8, i8* %BRANCH_TAKEN
  %1332 = icmp eq i8 %1331, 1
  %1333 = load i64, i64* %PC
  br i1 %1332, label %block_403912, label %block_40390d

block_40388c:                                     ; preds = %block_40387e
  %1334 = load i64, i64* %RBP
  %1335 = sub i64 %1334, 24
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 4
  store i64 %1337, i64* %PC
  %1338 = inttoptr i64 %1335 to i64*
  %1339 = load i64, i64* %1338
  store i64 %1339, i64* %RAX, align 8, !tbaa !2428
  %1340 = load i64, i64* %RBP
  %1341 = sub i64 %1340, 40
  %1342 = load i64, i64* %PC
  %1343 = add i64 %1342, 4
  store i64 %1343, i64* %PC
  %1344 = inttoptr i64 %1341 to i64*
  %1345 = load i64, i64* %1344
  store i64 %1345, i64* %RCX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RCX
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 4
  store i64 %1348, i64* %PC
  %1349 = sub i64 %1346, 1
  store i64 %1349, i64* %RCX, align 8, !tbaa !2428
  %1350 = icmp ult i64 %1346, 1
  %1351 = zext i1 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1351, i8* %1352, align 1, !tbaa !2433
  %1353 = trunc i64 %1349 to i32
  %1354 = and i32 %1353, 255
  %1355 = call i32 @llvm.ctpop.i32(i32 %1354) #16
  %1356 = trunc i32 %1355 to i8
  %1357 = and i8 %1356, 1
  %1358 = xor i8 %1357, 1
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1358, i8* %1359, align 1, !tbaa !2447
  %1360 = xor i64 1, %1346
  %1361 = xor i64 %1360, %1349
  %1362 = lshr i64 %1361, 4
  %1363 = trunc i64 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1364, i8* %1365, align 1, !tbaa !2448
  %1366 = icmp eq i64 %1349, 0
  %1367 = zext i1 %1366 to i8
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1367, i8* %1368, align 1, !tbaa !2449
  %1369 = lshr i64 %1349, 63
  %1370 = trunc i64 %1369 to i8
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1370, i8* %1371, align 1, !tbaa !2450
  %1372 = lshr i64 %1346, 63
  %1373 = xor i64 %1369, %1372
  %1374 = add nuw nsw i64 %1373, %1372
  %1375 = icmp eq i64 %1374, 2
  %1376 = zext i1 %1375 to i8
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1376, i8* %1377, align 1, !tbaa !2451
  %1378 = load i64, i64* %RBP
  %1379 = sub i64 %1378, 24
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 4
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to i64*
  %1383 = load i64, i64* %1382
  store i64 %1383, i64* %RDX, align 8, !tbaa !2428
  %1384 = load i64, i64* %RBP
  %1385 = sub i64 %1384, 48
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 4
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to i64*
  %1389 = load i64, i64* %1388
  store i64 %1389, i64* %RSI, align 8, !tbaa !2428
  %1390 = load i64, i64* %RAX
  %1391 = load i64, i64* %RCX
  %1392 = mul i64 %1391, 8
  %1393 = add i64 %1392, %1390
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 4
  store i64 %1395, i64* %PC
  %1396 = inttoptr i64 %1393 to i64*
  %1397 = load i64, i64* %1396
  store i64 %1397, i64* %RAX, align 8, !tbaa !2428
  %1398 = load i64, i64* %RDX
  %1399 = load i64, i64* %RSI
  %1400 = mul i64 %1399, 8
  %1401 = add i64 %1400, %1398
  %1402 = load i64, i64* %RAX
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 4
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1401 to i64*
  store i64 %1402, i64* %1405
  %1406 = load i64, i64* %RBP
  %1407 = sub i64 %1406, 40
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 4
  store i64 %1409, i64* %PC
  %1410 = inttoptr i64 %1407 to i64*
  %1411 = load i64, i64* %1410
  store i64 %1411, i64* %RAX, align 8, !tbaa !2428
  %1412 = load i64, i64* %RAX
  %1413 = load i64, i64* %PC
  %1414 = add i64 %1413, 4
  store i64 %1414, i64* %PC
  %1415 = sub i64 %1412, 1
  store i64 %1415, i64* %RAX, align 8, !tbaa !2428
  %1416 = icmp ult i64 %1412, 1
  %1417 = zext i1 %1416 to i8
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1417, i8* %1418, align 1, !tbaa !2433
  %1419 = trunc i64 %1415 to i32
  %1420 = and i32 %1419, 255
  %1421 = call i32 @llvm.ctpop.i32(i32 %1420) #16
  %1422 = trunc i32 %1421 to i8
  %1423 = and i8 %1422, 1
  %1424 = xor i8 %1423, 1
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1424, i8* %1425, align 1, !tbaa !2447
  %1426 = xor i64 1, %1412
  %1427 = xor i64 %1426, %1415
  %1428 = lshr i64 %1427, 4
  %1429 = trunc i64 %1428 to i8
  %1430 = and i8 %1429, 1
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1430, i8* %1431, align 1, !tbaa !2448
  %1432 = icmp eq i64 %1415, 0
  %1433 = zext i1 %1432 to i8
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1433, i8* %1434, align 1, !tbaa !2449
  %1435 = lshr i64 %1415, 63
  %1436 = trunc i64 %1435 to i8
  %1437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1436, i8* %1437, align 1, !tbaa !2450
  %1438 = lshr i64 %1412, 63
  %1439 = xor i64 %1435, %1438
  %1440 = add nuw nsw i64 %1439, %1438
  %1441 = icmp eq i64 %1440, 2
  %1442 = zext i1 %1441 to i8
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1442, i8* %1443, align 1, !tbaa !2451
  %1444 = load i64, i64* %RBP
  %1445 = sub i64 %1444, 48
  %1446 = load i64, i64* %RAX
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 4
  store i64 %1448, i64* %PC
  %1449 = inttoptr i64 %1445 to i64*
  store i64 %1446, i64* %1449
  br label %block_4038b4
}

; Function Attrs: noinline
define %struct.Memory* @sub_4064f0__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4064f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %27 to %union.vec128_t*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RBP
  %39 = sub i64 %38, 8
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %43
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 16
  %46 = load i64, i64* %RSI
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 24
  %52 = bitcast %union.vec128_t* %XMM0 to i8*
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 5
  store i64 %54, i64* %PC
  %55 = bitcast i8* %52 to double*
  %56 = load double, double* %55, align 1
  %57 = inttoptr i64 %51 to double*
  store double %56, double* %57
  br label %block_406501

block_40650f:                                     ; preds = %block_406501
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 8
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = load i64, i64* %RAX
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 3
  store i64 %66, i64* %PC
  store i64 %64, i64* %RCX, align 8, !tbaa !2428
  %67 = load i64, i64* %RCX
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC
  %70 = add i64 8, %67
  store i64 %70, i64* %RCX, align 8, !tbaa !2428
  %71 = icmp ult i64 %70, %67
  %72 = icmp ult i64 %70, 8
  %73 = or i1 %71, %72
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %74, i8* %75, align 1, !tbaa !2433
  %76 = trunc i64 %70 to i32
  %77 = and i32 %76, 255
  %78 = call i32 @llvm.ctpop.i32(i32 %77) #16
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %81, i8* %82, align 1, !tbaa !2447
  %83 = xor i64 8, %67
  %84 = xor i64 %83, %70
  %85 = lshr i64 %84, 4
  %86 = trunc i64 %85 to i8
  %87 = and i8 %86, 1
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = icmp eq i64 %70, 0
  %90 = zext i1 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %70, 63
  %93 = trunc i64 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %93, i8* %94, align 1, !tbaa !2450
  %95 = lshr i64 %67, 63
  %96 = xor i64 %92, %95
  %97 = add nuw nsw i64 %96, %92
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2451
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %RCX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %108 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %109 = load i64, i64* %RAX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = bitcast i8* %108 to double*
  %113 = load double, double* %112, align 1
  %114 = getelementptr inbounds i8, i8* %108, i64 8
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = inttoptr i64 %109 to double*
  %118 = load double, double* %117
  %119 = fadd double %113, %118
  %120 = bitcast i8* %107 to double*
  store double %119, double* %120, align 1, !tbaa !2452
  %121 = getelementptr inbounds i8, i8* %107, i64 8
  %122 = bitcast i8* %121 to i64*
  store i64 %116, i64* %122, align 1, !tbaa !2452
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 24
  %125 = bitcast %union.vec128_t* %XMM0 to i8*
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  %128 = bitcast i8* %125 to double*
  %129 = load double, double* %128, align 1
  %130 = inttoptr i64 %124 to double*
  store double %129, double* %130
  %131 = load i64, i64* %PC
  %132 = sub i64 %131, 43
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %132, i64* %135, align 8, !tbaa !2428
  br label %block_406501

block_406501:                                     ; preds = %block_40650f, %block_4064f0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4064f0 ], [ %MEMORY.0, %block_40650f ]
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 8
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = load i64, i64* %RAX
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 16
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i64*
  %148 = load i64, i64* %147
  %149 = sub i64 %142, %148
  %150 = icmp ugt i64 %148, %142
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2433
  %153 = trunc i64 %149 to i32
  %154 = and i32 %153, 255
  %155 = call i32 @llvm.ctpop.i32(i32 %154) #16
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  %158 = xor i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %158, i8* %159, align 1, !tbaa !2447
  %160 = xor i64 %148, %142
  %161 = xor i64 %160, %149
  %162 = lshr i64 %161, 4
  %163 = trunc i64 %162 to i8
  %164 = and i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %164, i8* %165, align 1, !tbaa !2448
  %166 = icmp eq i64 %149, 0
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %167, i8* %168, align 1, !tbaa !2449
  %169 = lshr i64 %149, 63
  %170 = trunc i64 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2450
  %172 = lshr i64 %142, 63
  %173 = lshr i64 %148, 63
  %174 = xor i64 %173, %172
  %175 = xor i64 %169, %172
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %178, i8* %179, align 1, !tbaa !2451
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 40
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 6
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 6
  store i64 %185, i64* %PC
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %187 = load i8, i8* %186, align 1, !tbaa !2449
  store i8 %187, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %189 = icmp ne i8 %187, 0
  %190 = select i1 %189, i64 %181, i64 %183
  store i64 %190, i64* %188, align 8, !tbaa !2428
  %191 = load i8, i8* %BRANCH_TAKEN
  %192 = icmp eq i8 %191, 1
  %193 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 24
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 5
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to double*
  %199 = load double, double* %198
  %200 = bitcast i8* %193 to double*
  store double %199, double* %200, align 1, !tbaa !2452
  %201 = getelementptr inbounds i8, i8* %193, i64 8
  %202 = bitcast i8* %201 to double*
  store double 0.000000e+00, double* %202, align 1, !tbaa !2452
  br i1 %192, label %block_406531, label %block_40650f

block_406531:                                     ; preds = %block_406501
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 1
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %RBP, align 8, !tbaa !2428
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 1
  store i64 %211, i64* %PC
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %214 = load i64, i64* %213, align 8, !tbaa !2428
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %212, align 8, !tbaa !2428
  %217 = add i64 %214, 8
  store i64 %217, i64* %213, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_402160__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402160:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 16
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 16
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2433
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #16
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = xor i64 16, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2451
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 8
  %78 = load i64, i64* %RDI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RSI
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  br label %block_402170

block_40219f:                                     ; preds = %block_402170
  %88 = load i64, i64* %RSP
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = add i64 16, %88
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  %92 = icmp ult i64 %91, %88
  %93 = icmp ult i64 %91, 16
  %94 = or i1 %92, %93
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %95, i8* %96, align 1, !tbaa !2433
  %97 = trunc i64 %91 to i32
  %98 = and i32 %97, 255
  %99 = call i32 @llvm.ctpop.i32(i32 %98) #16
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %102, i8* %103, align 1, !tbaa !2447
  %104 = xor i64 16, %88
  %105 = xor i64 %104, %91
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %108, i8* %109, align 1, !tbaa !2448
  %110 = icmp eq i64 %91, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2449
  %113 = lshr i64 %91, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2450
  %116 = lshr i64 %88, 63
  %117 = xor i64 %113, %116
  %118 = add nuw nsw i64 %117, %113
  %119 = icmp eq i64 %118, 2
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %120, i8* %121, align 1, !tbaa !2451
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 1
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %125 = load i64, i64* %124, align 8, !tbaa !2428
  %126 = add i64 %125, 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RBP, align 8, !tbaa !2428
  store i64 %126, i64* %124, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 1
  store i64 %130, i64* %PC
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %133 = load i64, i64* %132, align 8, !tbaa !2428
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %131, align 8, !tbaa !2428
  %136 = add i64 %133, 8
  store i64 %136, i64* %132, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402170:                                     ; preds = %block_40217e, %block_402160
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402160 ], [ %206, %block_40217e ]
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 8
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %RAX, align 8, !tbaa !2428
  %143 = load i64, i64* %RAX
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 16
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  %150 = sub i64 %143, %149
  %151 = icmp ugt i64 %149, %143
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %152, i8* %153, align 1, !tbaa !2433
  %154 = trunc i64 %150 to i32
  %155 = and i32 %154, 255
  %156 = call i32 @llvm.ctpop.i32(i32 %155) #16
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = xor i8 %158, 1
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %159, i8* %160, align 1, !tbaa !2447
  %161 = xor i64 %149, %143
  %162 = xor i64 %161, %150
  %163 = lshr i64 %162, 4
  %164 = trunc i64 %163 to i8
  %165 = and i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = icmp eq i64 %150, 0
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %150, 63
  %171 = trunc i64 %170 to i8
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %171, i8* %172, align 1, !tbaa !2450
  %173 = lshr i64 %143, 63
  %174 = lshr i64 %149, 63
  %175 = xor i64 %174, %173
  %176 = xor i64 %170, %173
  %177 = add nuw nsw i64 %176, %175
  %178 = icmp eq i64 %177, 2
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %179, i8* %180, align 1, !tbaa !2451
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 39
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 6
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 6
  store i64 %186, i64* %PC
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %188 = load i8, i8* %187, align 1, !tbaa !2449
  store i8 %188, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %190 = icmp ne i8 %188, 0
  %191 = select i1 %190, i64 %182, i64 %184
  store i64 %191, i64* %189, align 8, !tbaa !2428
  %192 = load i8, i8* %BRANCH_TAKEN
  %193 = icmp eq i8 %192, 1
  br i1 %193, label %block_40219f, label %block_40217e

block_40217e:                                     ; preds = %block_402170
  %194 = load i64, i64* %PC
  %195 = sub i64 %194, 6686
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 5
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %201 = load i64, i64* %200, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %197, i64* %203
  store i64 %202, i64* %200, align 8, !tbaa !2428
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %195, i64* %204, align 8, !tbaa !2428
  %205 = load i64, i64* %PC
  %206 = call %struct.Memory* @ext_6208f0_rand(%struct.State* %0, i64 %205, %struct.Memory* %MEMORY.0)
  %207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %208 = load i32, i32* %EAX
  %209 = zext i32 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 4
  store i64 %211, i64* %PC
  %212 = sitofp i32 %208 to double
  %213 = bitcast i8* %207 to double*
  store double %212, double* %213, align 1, !tbaa !2452
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 8
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218
  store i64 %219, i64* %RCX, align 8, !tbaa !2428
  %220 = load i64, i64* %RCX
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 3
  store i64 %222, i64* %PC
  store i64 %220, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %RDX
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 4
  store i64 %225, i64* %PC
  %226 = add i64 8, %223
  store i64 %226, i64* %RDX, align 8, !tbaa !2428
  %227 = icmp ult i64 %226, %223
  %228 = icmp ult i64 %226, 8
  %229 = or i1 %227, %228
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %230, i8* %231, align 1, !tbaa !2433
  %232 = trunc i64 %226 to i32
  %233 = and i32 %232, 255
  %234 = call i32 @llvm.ctpop.i32(i32 %233) #16
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %237, i8* %238, align 1, !tbaa !2447
  %239 = xor i64 8, %223
  %240 = xor i64 %239, %226
  %241 = lshr i64 %240, 4
  %242 = trunc i64 %241 to i8
  %243 = and i8 %242, 1
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %243, i8* %244, align 1, !tbaa !2448
  %245 = icmp eq i64 %226, 0
  %246 = zext i1 %245 to i8
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %246, i8* %247, align 1, !tbaa !2449
  %248 = lshr i64 %226, 63
  %249 = trunc i64 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %249, i8* %250, align 1, !tbaa !2450
  %251 = lshr i64 %223, 63
  %252 = xor i64 %248, %251
  %253 = add nuw nsw i64 %252, %248
  %254 = icmp eq i64 %253, 2
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %255, i8* %256, align 1, !tbaa !2451
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 8
  %259 = load i64, i64* %RDX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %258 to i64*
  store i64 %259, i64* %262
  %263 = load i64, i64* %RCX
  %264 = bitcast %union.vec128_t* %XMM0 to i8*
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = bitcast i8* %264 to double*
  %268 = load double, double* %267, align 1
  %269 = inttoptr i64 %263 to double*
  store double %268, double* %269
  %270 = load i64, i64* %PC
  %271 = sub i64 %270, 42
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 5
  store i64 %273, i64* %PC
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %271, i64* %274, align 8, !tbaa !2428
  br label %block_402170
}

; Function Attrs: noinline
define %struct.Memory* @sub_406230__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406230:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007d0___cxx_global_var_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 10
  store i64 %61, i64* %PC
  store i64 ptrtoint (%VData_type* @VData to i64), i64* %RAX, align 8, !tbaa !2428
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 8
  %64 = load i64, i64* %RAX
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %63 to i64*
  store i64 %64, i64* %67
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %69, i64* %72, align 8, !tbaa !2428
  br label %block_4007eb

block_4007eb:                                     ; preds = %block_4007eb, %block_4007d0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4007d0 ], [ %100, %block_4007eb ]
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RAX
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5466
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* %0, i64 %99, %struct.Memory* %MEMORY.0)
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 10
  store i64 %102, i64* %PC
  store i64 ptrtoint (%VData_type* @VData to i64), i64* %RAX, align 8, !tbaa !2428
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 6
  store i64 %105, i64* %PC
  %106 = add i64 16000, %103
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = icmp ult i64 %106, %103
  %108 = icmp ult i64 %106, 16000
  %109 = or i1 %107, %108
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %110, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %106 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = xor i64 16000, %103
  %120 = xor i64 %119, %106
  %121 = lshr i64 %120, 4
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %123, i8* %124, align 1, !tbaa !2448
  %125 = icmp eq i64 %106, 0
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %126, i8* %127, align 1, !tbaa !2449
  %128 = lshr i64 %106, 63
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %129, i8* %130, align 1, !tbaa !2450
  %131 = lshr i64 %103, 63
  %132 = xor i64 %128, %131
  %133 = add nuw nsw i64 %132, %128
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %135, i8* %136, align 1, !tbaa !2451
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %RDI
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = add i64 8, %143
  store i64 %146, i64* %RDI, align 8, !tbaa !2428
  %147 = icmp ult i64 %146, %143
  %148 = icmp ult i64 %146, 8
  %149 = or i1 %147, %148
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %150, i8* %151, align 1, !tbaa !2433
  %152 = trunc i64 %146 to i32
  %153 = and i32 %152, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2447
  %159 = xor i64 8, %143
  %160 = xor i64 %159, %146
  %161 = lshr i64 %160, 4
  %162 = trunc i64 %161 to i8
  %163 = and i8 %162, 1
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %163, i8* %164, align 1, !tbaa !2448
  %165 = icmp eq i64 %146, 0
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %166, i8* %167, align 1, !tbaa !2449
  %168 = lshr i64 %146, 63
  %169 = trunc i64 %168 to i8
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %169, i8* %170, align 1, !tbaa !2450
  %171 = lshr i64 %143, 63
  %172 = xor i64 %168, %171
  %173 = add nuw nsw i64 %172, %168
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %175, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %RDI
  %178 = load i64, i64* %RAX
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 3
  store i64 %180, i64* %PC
  %181 = sub i64 %177, %178
  %182 = icmp ult i64 %177, %178
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %183, i8* %184, align 1, !tbaa !2433
  %185 = trunc i64 %181 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %190, i8* %191, align 1, !tbaa !2447
  %192 = xor i64 %178, %177
  %193 = xor i64 %192, %181
  %194 = lshr i64 %193, 4
  %195 = trunc i64 %194 to i8
  %196 = and i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %196, i8* %197, align 1, !tbaa !2448
  %198 = icmp eq i64 %181, 0
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %199, i8* %200, align 1, !tbaa !2449
  %201 = lshr i64 %181, 63
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %202, i8* %203, align 1, !tbaa !2450
  %204 = lshr i64 %177, 63
  %205 = lshr i64 %178, 63
  %206 = xor i64 %205, %204
  %207 = xor i64 %201, %204
  %208 = add nuw nsw i64 %207, %206
  %209 = icmp eq i64 %208, 2
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %210, i8* %211, align 1, !tbaa !2451
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 8
  %214 = load i64, i64* %RDI
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 47
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 6
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %225 = load i8, i8* %224, align 1, !tbaa !2449
  %226 = icmp eq i8 %225, 0
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = select i1 %226, i64 %219, i64 %221
  store i64 %229, i64* %228, align 8, !tbaa !2428
  %230 = load i8, i8* %BRANCH_TAKEN
  %231 = icmp eq i8 %230, 1
  br i1 %231, label %block_4007eb, label %block_400820

block_400820:                                     ; preds = %block_4007eb
  %232 = load i64, i64* %RSP
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = add i64 16, %232
  store i64 %235, i64* %RSP, align 8, !tbaa !2428
  %236 = icmp ult i64 %235, %232
  %237 = icmp ult i64 %235, 16
  %238 = or i1 %236, %237
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %239, i8* %240, align 1, !tbaa !2433
  %241 = trunc i64 %235 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2447
  %248 = xor i64 16, %232
  %249 = xor i64 %248, %235
  %250 = lshr i64 %249, 4
  %251 = trunc i64 %250 to i8
  %252 = and i8 %251, 1
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %252, i8* %253, align 1, !tbaa !2448
  %254 = icmp eq i64 %235, 0
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %255, i8* %256, align 1, !tbaa !2449
  %257 = lshr i64 %235, 63
  %258 = trunc i64 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %258, i8* %259, align 1, !tbaa !2450
  %260 = lshr i64 %232, 63
  %261 = xor i64 %257, %260
  %262 = add nuw nsw i64 %261, %257
  %263 = icmp eq i64 %262, 2
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %264, i8* %265, align 1, !tbaa !2451
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 1
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271
  store i64 %272, i64* %RBP, align 8, !tbaa !2428
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 1
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %277 = load i64, i64* %276, align 8, !tbaa !2428
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  store i64 %279, i64* %275, align 8, !tbaa !2428
  %280 = add i64 %277, 8
  store i64 %280, i64* %276, align 8, !tbaa !2428
  ret %struct.Memory* %100
}

; Function Attrs: noinline
define %struct.Memory* @sub_4027b0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4027b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_4027d8

block_402859:                                     ; preds = %block_4027d8
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4027e8:                                     ; preds = %block_4027d8
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4452
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 10503
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4858
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_4027d8

block_4027d8:                                     ; preds = %block_4027e8, %block_4027b0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4027b0 ], [ %333, %block_4027e8 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_402859, label %block_4027e8
}

; Function Attrs: noinline
define %struct.Memory* @sub_400990___cxx_global_var_init_16(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400990:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 10
  store i64 %29, i64* %PC
  store i64 ptrtoint (%dMPb_type* @dMPb to i64), i64* %RDI, align 8, !tbaa !2428
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 8
  store i64 %31, i64* %PC
  %32 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i32 0, i32 0)
  store i64 %32, i64* %RSI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4714
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* %0, i64 %44, %struct.Memory* %2)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %45
}

; Function Attrs: noinline
define %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405430:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 7
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %EDX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %38 to %"class.std::bitset"*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %44 to %union.vec128_t*
  %45 = load i64, i64* %RBP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, -8
  %51 = inttoptr i64 %50 to i64*
  store i64 %45, i64* %51
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  %55 = load i64, i64* %RSP
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = sub i64 %55, 112
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  %59 = icmp ult i64 %55, 112
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2433
  %62 = trunc i64 %58 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2447
  %69 = xor i64 112, %55
  %70 = xor i64 %69, %58
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2448
  %75 = icmp eq i64 %58, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2449
  %78 = lshr i64 %58, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2450
  %81 = lshr i64 %55, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %81
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 16
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 8
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  store i64 %92, i64* %RCX, align 8, !tbaa !2428
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 8
  %97 = load i64, i64* %RDI
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 16
  %103 = load i64, i64* %RSI
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %RAX
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %RCX
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  store i64 %110, i64* %RSI, align 8, !tbaa !2428
  %113 = load i64, i64* %PC
  %114 = sub i64 %113, 3294
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 5
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  store i64 %118, i64* %PC
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %120 = load i64, i64* %119, align 8, !tbaa !2428
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %116, i64* %122
  store i64 %121, i64* %119, align 8, !tbaa !2428
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %114, i64* %123, align 8, !tbaa !2428
  %124 = load i64, i64* %PC
  %125 = call %struct.Memory* @sub_404770__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* %0, i64 %124, %struct.Memory* %2)
  %126 = load i64, i64* %RAX
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = sub i64 %126, 1
  %130 = icmp ult i64 %126, 1
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %131, i8* %132, align 1, !tbaa !2433
  %133 = trunc i64 %129 to i32
  %134 = and i32 %133, 255
  %135 = call i32 @llvm.ctpop.i32(i32 %134) #16
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %138, i8* %139, align 1, !tbaa !2447
  %140 = xor i64 1, %126
  %141 = xor i64 %140, %129
  %142 = lshr i64 %141, 4
  %143 = trunc i64 %142 to i8
  %144 = and i8 %143, 1
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %144, i8* %145, align 1, !tbaa !2448
  %146 = icmp eq i64 %129, 0
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %147, i8* %148, align 1, !tbaa !2449
  %149 = lshr i64 %129, 63
  %150 = trunc i64 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %150, i8* %151, align 1, !tbaa !2450
  %152 = lshr i64 %126, 63
  %153 = xor i64 %149, %152
  %154 = add nuw nsw i64 %153, %152
  %155 = icmp eq i64 %154, 2
  %156 = zext i1 %155 to i8
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %156, i8* %157, align 1, !tbaa !2451
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 368
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 6
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 6
  store i64 %163, i64* %PC
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %165 = load i8, i8* %164, align 1, !tbaa !2449
  %166 = icmp ne i8 %165, 0
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %168 = load i8, i8* %167, align 1, !tbaa !2450
  %169 = icmp ne i8 %168, 0
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %171 = load i8, i8* %170, align 1, !tbaa !2451
  %172 = icmp ne i8 %171, 0
  %173 = xor i1 %169, %172
  %174 = or i1 %166, %173
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %177 = select i1 %174, i64 %159, i64 %161
  store i64 %177, i64* %176, align 8, !tbaa !2428
  %178 = load i8, i8* %BRANCH_TAKEN
  %179 = icmp eq i8 %178, 1
  br i1 %179, label %block_4055c7, label %block_40545d

block_405519:                                     ; preds = %block_405504
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 92
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 5
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %181, i64* %184, align 8, !tbaa !2428
  br label %block_405575

block_40547f:                                     ; preds = %block_40551e, %block_40545d
  %MEMORY.0 = phi %struct.Memory* [ %206, %block_40545d ], [ %643, %block_40551e ]
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 5
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %186, i64* %189, align 8, !tbaa !2428
  br label %block_405484

block_40545d:                                     ; preds = %block_405430
  %190 = load i64, i64* %RBP
  %191 = sub i64 %190, 8
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 4
  store i64 %193, i64* %PC
  store i64 %191, i64* %RDI, align 8, !tbaa !2428
  %194 = load i64, i64* %PC
  %195 = sub i64 %194, 3377
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 5
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %201 = load i64, i64* %200, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %197, i64* %203
  store i64 %202, i64* %200, align 8, !tbaa !2428
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %195, i64* %204, align 8, !tbaa !2428
  %205 = load i64, i64* %PC
  %206 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %205, %struct.Memory* %125)
  %207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %208 = load i64, i64* %RAX
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to double*
  %212 = load double, double* %211
  %213 = bitcast i8* %207 to double*
  store double %212, double* %213, align 1, !tbaa !2452
  %214 = getelementptr inbounds i8, i8* %207, i64 8
  %215 = bitcast i8* %214 to double*
  store double 0.000000e+00, double* %215, align 1, !tbaa !2452
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 24
  %218 = bitcast %union.vec128_t* %XMM0 to i8*
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 5
  store i64 %220, i64* %PC
  %221 = bitcast i8* %218 to double*
  %222 = load double, double* %221, align 1
  %223 = inttoptr i64 %217 to double*
  store double %222, double* %223
  %224 = load i64, i64* %RBP
  %225 = sub i64 %224, 8
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 32
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %231 to i64*
  store i64 %232, i64* %235
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 16
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 40
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  br label %block_40547f

block_4054b2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %248 = load i64, i64* %PC
  %249 = sub i64 %248, 46
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 5
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %249, i64* %252, align 8, !tbaa !2428
  br label %block_405484

block_4054d6:                                     ; preds = %block_4054d1, %block_4054f2
  %MEMORY.1 = phi %struct.Memory* [ %745, %block_4054d1 ], [ %495, %block_4054f2 ]
  %253 = load i64, i64* %RBP
  %254 = sub i64 %253, 32
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC
  store i64 %254, i64* %RDI, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = sub i64 %257, 3498
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 5
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 5
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %264 = load i64, i64* %263, align 8, !tbaa !2428
  %265 = add i64 %264, -8
  %266 = inttoptr i64 %265 to i64*
  store i64 %260, i64* %266
  store i64 %265, i64* %263, align 8, !tbaa !2428
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %258, i64* %267, align 8, !tbaa !2428
  %268 = load i64, i64* %PC
  %269 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %268, %struct.Memory* %MEMORY.1)
  %270 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %271 = load i64, i64* %RAX
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to double*
  %275 = load double, double* %274
  %276 = bitcast i8* %270 to double*
  store double %275, double* %276, align 1, !tbaa !2452
  %277 = getelementptr inbounds i8, i8* %270, i64 8
  %278 = bitcast i8* %277 to double*
  store double 0.000000e+00, double* %278, align 1, !tbaa !2452
  %279 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 24
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 5
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to double*
  %285 = load double, double* %284
  %286 = bitcast i8* %279 to double*
  store double %285, double* %286, align 1, !tbaa !2452
  %287 = getelementptr inbounds i8, i8* %279, i64 8
  %288 = bitcast i8* %287 to double*
  store double 0.000000e+00, double* %288, align 1, !tbaa !2452
  %289 = bitcast %union.vec128_t* %XMM1 to i8*
  %290 = bitcast %union.vec128_t* %XMM0 to i8*
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 4
  store i64 %292, i64* %PC
  %293 = bitcast i8* %289 to double*
  %294 = load double, double* %293, align 1
  %295 = bitcast i8* %290 to double*
  %296 = load double, double* %295, align 1
  %297 = fcmp uno double %294, %296
  br i1 %297, label %298, label %310

; <label>:298:                                    ; preds = %block_4054d6
  %299 = fadd double %294, %296
  %300 = bitcast double %299 to i64
  %301 = and i64 %300, 9221120237041090560
  %302 = icmp eq i64 %301, 9218868437227405312
  %303 = and i64 %300, 2251799813685247
  %304 = icmp ne i64 %303, 0
  %305 = and i1 %302, %304
  br i1 %305, label %306, label %316

; <label>:306:                                    ; preds = %298
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %308 = load i64, i64* %307, align 8, !tbaa !2428
  %309 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %308, %struct.Memory* %269) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:310:                                    ; preds = %block_4054d6
  %311 = fcmp ogt double %294, %296
  br i1 %311, label %316, label %312

; <label>:312:                                    ; preds = %310
  %313 = fcmp olt double %294, %296
  br i1 %313, label %316, label %314

; <label>:314:                                    ; preds = %312
  %315 = fcmp oeq double %294, %296
  br i1 %315, label %316, label %323

; <label>:316:                                    ; preds = %314, %312, %310, %298
  %317 = phi i8 [ 0, %310 ], [ 0, %312 ], [ 1, %314 ], [ 1, %298 ]
  %318 = phi i8 [ 0, %310 ], [ 0, %312 ], [ 0, %314 ], [ 1, %298 ]
  %319 = phi i8 [ 0, %310 ], [ 1, %312 ], [ 0, %314 ], [ 1, %298 ]
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %317, i8* %320, align 1, !tbaa !2432
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %321, align 1, !tbaa !2432
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %322, align 1, !tbaa !2432
  br label %323

; <label>:323:                                    ; preds = %316, %314
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %324, align 1, !tbaa !2432
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %325, align 1, !tbaa !2432
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %326, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %306, %323
  %327 = phi %struct.Memory* [ %309, %306 ], [ %269, %323 ]
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 24
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 6
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 6
  store i64 %333, i64* %PC
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %335 = load i8, i8* %334, align 1, !tbaa !2433
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %337 = load i8, i8* %336, align 1, !tbaa !2449
  %338 = or i8 %337, %335
  %339 = icmp ne i8 %338, 0
  %340 = zext i1 %339 to i8
  store i8 %340, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %342 = select i1 %339, i64 %329, i64 %331
  store i64 %342, i64* %341, align 8, !tbaa !2428
  %343 = load i8, i8* %BRANCH_TAKEN
  %344 = icmp eq i8 %343, 1
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 32
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  store i64 %346, i64* %RDI, align 8, !tbaa !2428
  br i1 %344, label %block_405504, label %block_4054f2

block_405575:                                     ; preds = %block_4054cc, %block_405519
  %MEMORY.2 = phi %struct.Memory* [ %690, %block_405519 ], [ %745, %block_4054cc ]
  %349 = load i64, i64* %RBP
  %350 = sub i64 %349, 40
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 4
  store i64 %352, i64* %PC
  store i64 %350, i64* %RDI, align 8, !tbaa !2428
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  store i64 %354, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %355 = load i32, i32* %EAX
  %356 = zext i32 %355 to i64
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 2
  store i64 %358, i64* %PC
  %359 = and i64 %356, 4294967295
  store i64 %359, i64* %RSI, align 8, !tbaa !2428
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 8
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %RCX, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 56
  %368 = load i64, i64* %RCX
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %367 to i64*
  store i64 %368, i64* %371
  %372 = load i64, i64* %PC
  %373 = sub i64 %372, 3560
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 5
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 5
  store i64 %377, i64* %PC
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %379 = load i64, i64* %378, align 8, !tbaa !2428
  %380 = add i64 %379, -8
  %381 = inttoptr i64 %380 to i64*
  store i64 %375, i64* %381
  store i64 %380, i64* %378, align 8, !tbaa !2428
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %373, i64* %382, align 8, !tbaa !2428
  %383 = load i64, i64* %PC
  %384 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %383, %struct.Memory* %MEMORY.2)
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 64
  %387 = load i64, i64* %RAX
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %386 to i64*
  store i64 %387, i64* %390
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 56
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 4
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %392 to i64*
  %396 = load i64, i64* %395
  store i64 %396, i64* %RDI, align 8, !tbaa !2428
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 64
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i64*
  %402 = load i64, i64* %401
  store i64 %402, i64* %RSI, align 8, !tbaa !2428
  %403 = load i64, i64* %PC
  %404 = sub i64 %403, 361
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 5
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 5
  store i64 %408, i64* %PC
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %410 = load i64, i64* %409, align 8, !tbaa !2428
  %411 = add i64 %410, -8
  %412 = inttoptr i64 %411 to i64*
  store i64 %406, i64* %412
  store i64 %411, i64* %409, align 8, !tbaa !2428
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %404, i64* %413, align 8, !tbaa !2428
  %414 = load i64, i64* %PC
  %415 = call %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %414, %struct.Memory* %384)
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 40
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 4
  store i64 %419, i64* %PC
  store i64 %417, i64* %RDI, align 8, !tbaa !2428
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 5
  store i64 %421, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %422 = load i32, i32* %EDX
  %423 = zext i32 %422 to i64
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 2
  store i64 %425, i64* %PC
  %426 = and i64 %423, 4294967295
  store i64 %426, i64* %RSI, align 8, !tbaa !2428
  %427 = load i64, i64* %PC
  %428 = sub i64 %427, 3593
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 5
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 5
  store i64 %432, i64* %PC
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %434 = load i64, i64* %433, align 8, !tbaa !2428
  %435 = add i64 %434, -8
  %436 = inttoptr i64 %435 to i64*
  store i64 %430, i64* %436
  store i64 %435, i64* %433, align 8, !tbaa !2428
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %428, i64* %437, align 8, !tbaa !2428
  %438 = load i64, i64* %PC
  %439 = call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %438, %struct.Memory* %415)
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 72
  %442 = load i64, i64* %RAX
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %441 to i64*
  store i64 %442, i64* %445
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 16
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RBP
  %453 = sub i64 %452, 80
  %454 = load i64, i64* %RAX
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 4
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %453 to i64*
  store i64 %454, i64* %457
  %458 = load i64, i64* %RBP
  %459 = sub i64 %458, 72
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462
  store i64 %463, i64* %RDI, align 8, !tbaa !2428
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 80
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %RSI, align 8, !tbaa !2428
  %470 = load i64, i64* %PC
  %471 = sub i64 %470, 402
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 5
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 5
  store i64 %475, i64* %PC
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %477 = load i64, i64* %476, align 8, !tbaa !2428
  %478 = add i64 %477, -8
  %479 = inttoptr i64 %478 to i64*
  store i64 %473, i64* %479
  store i64 %478, i64* %476, align 8, !tbaa !2428
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %471, i64* %480, align 8, !tbaa !2428
  %481 = load i64, i64* %PC
  %482 = call %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %481, %struct.Memory* %439)
  br label %block_4055c7

block_4054f2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %483 = load i64, i64* %PC
  %484 = sub i64 %483, 3494
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 5
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  store i64 %488, i64* %PC
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %490 = load i64, i64* %489, align 8, !tbaa !2428
  %491 = add i64 %490, -8
  %492 = inttoptr i64 %491 to i64*
  store i64 %486, i64* %492
  store i64 %491, i64* %489, align 8, !tbaa !2428
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %484, i64* %493, align 8, !tbaa !2428
  %494 = load i64, i64* %PC
  %495 = call %struct.Memory* @sub_404750__ZppIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %494, %struct.Memory* %327)
  %496 = load i64, i64* %RBP
  %497 = sub i64 %496, 96
  %498 = load i64, i64* %RAX
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 4
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %497 to i64*
  store i64 %498, i64* %501
  %502 = load i64, i64* %PC
  %503 = sub i64 %502, 41
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %503, i64* %506, align 8, !tbaa !2428
  br label %block_4054d6

block_40551e:                                     ; preds = %block_405504
  %507 = load i64, i64* %RBP
  %508 = sub i64 %507, 40
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  store i64 %508, i64* %RDI, align 8, !tbaa !2428
  %511 = load i64, i64* %PC
  %512 = sub i64 %511, 3570
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 5
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 5
  store i64 %516, i64* %PC
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %518 = load i64, i64* %517, align 8, !tbaa !2428
  %519 = add i64 %518, -8
  %520 = inttoptr i64 %519 to i64*
  store i64 %514, i64* %520
  store i64 %519, i64* %517, align 8, !tbaa !2428
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %512, i64* %521, align 8, !tbaa !2428
  %522 = load i64, i64* %PC
  %523 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %522, %struct.Memory* %690)
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 32
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 4
  store i64 %527, i64* %PC
  store i64 %525, i64* %RDI, align 8, !tbaa !2428
  %528 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %529 = load i64, i64* %RAX
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 4
  store i64 %531, i64* %PC
  %532 = inttoptr i64 %529 to double*
  %533 = load double, double* %532
  %534 = bitcast i8* %528 to double*
  store double %533, double* %534, align 1, !tbaa !2452
  %535 = getelementptr inbounds i8, i8* %528, i64 8
  %536 = bitcast i8* %535 to double*
  store double 0.000000e+00, double* %536, align 1, !tbaa !2452
  %537 = load i64, i64* %RBP
  %538 = sub i64 %537, 48
  %539 = bitcast %union.vec128_t* %XMM0 to i8*
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 5
  store i64 %541, i64* %PC
  %542 = bitcast i8* %539 to double*
  %543 = load double, double* %542, align 1
  %544 = inttoptr i64 %538 to double*
  store double %543, double* %544
  %545 = load i64, i64* %PC
  %546 = sub i64 %545, 3588
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 5
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 5
  store i64 %550, i64* %PC
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %552 = load i64, i64* %551, align 8, !tbaa !2428
  %553 = add i64 %552, -8
  %554 = inttoptr i64 %553 to i64*
  store i64 %548, i64* %554
  store i64 %553, i64* %551, align 8, !tbaa !2428
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %546, i64* %555, align 8, !tbaa !2428
  %556 = load i64, i64* %PC
  %557 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %556, %struct.Memory* %523)
  %558 = load i64, i64* %RBP
  %559 = sub i64 %558, 40
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 4
  store i64 %561, i64* %PC
  store i64 %559, i64* %RDI, align 8, !tbaa !2428
  %562 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %563 = load i64, i64* %RAX
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 4
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to double*
  %567 = load double, double* %566
  %568 = bitcast i8* %562 to double*
  store double %567, double* %568, align 1, !tbaa !2452
  %569 = getelementptr inbounds i8, i8* %562, i64 8
  %570 = bitcast i8* %569 to double*
  store double 0.000000e+00, double* %570, align 1, !tbaa !2452
  %571 = load i64, i64* %RBP
  %572 = sub i64 %571, 104
  %573 = bitcast %union.vec128_t* %XMM0 to i8*
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 5
  store i64 %575, i64* %PC
  %576 = bitcast i8* %573 to double*
  %577 = load double, double* %576, align 1
  %578 = inttoptr i64 %572 to double*
  store double %577, double* %578
  %579 = load i64, i64* %PC
  %580 = sub i64 %579, 3606
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 5
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 5
  store i64 %584, i64* %PC
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %586 = load i64, i64* %585, align 8, !tbaa !2428
  %587 = add i64 %586, -8
  %588 = inttoptr i64 %587 to i64*
  store i64 %582, i64* %588
  store i64 %587, i64* %585, align 8, !tbaa !2428
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %580, i64* %589, align 8, !tbaa !2428
  %590 = load i64, i64* %PC
  %591 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %590, %struct.Memory* %557)
  %592 = load i64, i64* %RBP
  %593 = sub i64 %592, 32
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 4
  store i64 %595, i64* %PC
  store i64 %593, i64* %RDI, align 8, !tbaa !2428
  %596 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 104
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 5
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to double*
  %602 = load double, double* %601
  %603 = bitcast i8* %596 to double*
  store double %602, double* %603, align 1, !tbaa !2452
  %604 = getelementptr inbounds i8, i8* %596, i64 8
  %605 = bitcast i8* %604 to double*
  store double 0.000000e+00, double* %605, align 1, !tbaa !2452
  %606 = load i64, i64* %RAX
  %607 = bitcast %union.vec128_t* %XMM0 to i8*
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  %610 = bitcast i8* %607 to double*
  %611 = load double, double* %610, align 1
  %612 = inttoptr i64 %606 to double*
  store double %611, double* %612
  %613 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 48
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to double*
  %619 = load double, double* %618
  %620 = bitcast i8* %613 to double*
  store double %619, double* %620, align 1, !tbaa !2452
  %621 = getelementptr inbounds i8, i8* %613, i64 8
  %622 = bitcast i8* %621 to double*
  store double 0.000000e+00, double* %622, align 1, !tbaa !2452
  %623 = load i64, i64* %RBP
  %624 = sub i64 %623, 112
  %625 = bitcast %union.vec128_t* %XMM0 to i8*
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 5
  store i64 %627, i64* %PC
  %628 = bitcast i8* %625 to double*
  %629 = load double, double* %628, align 1
  %630 = inttoptr i64 %624 to double*
  store double %629, double* %630
  %631 = load i64, i64* %PC
  %632 = sub i64 %631, 3634
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 5
  store i64 %636, i64* %PC
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %638 = load i64, i64* %637, align 8, !tbaa !2428
  %639 = add i64 %638, -8
  %640 = inttoptr i64 %639 to i64*
  store i64 %634, i64* %640
  store i64 %639, i64* %637, align 8, !tbaa !2428
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %632, i64* %641, align 8, !tbaa !2428
  %642 = load i64, i64* %PC
  %643 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %642, %struct.Memory* %591)
  %644 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %645 = load i64, i64* %RBP
  %646 = sub i64 %645, 112
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 5
  store i64 %648, i64* %PC
  %649 = inttoptr i64 %646 to double*
  %650 = load double, double* %649
  %651 = bitcast i8* %644 to double*
  store double %650, double* %651, align 1, !tbaa !2452
  %652 = getelementptr inbounds i8, i8* %644, i64 8
  %653 = bitcast i8* %652 to double*
  store double 0.000000e+00, double* %653, align 1, !tbaa !2452
  %654 = load i64, i64* %RAX
  %655 = bitcast %union.vec128_t* %XMM0 to i8*
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 4
  store i64 %657, i64* %PC
  %658 = bitcast i8* %655 to double*
  %659 = load double, double* %658, align 1
  %660 = inttoptr i64 %654 to double*
  store double %659, double* %660
  %661 = load i64, i64* %PC
  %662 = sub i64 %661, 241
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 5
  store i64 %664, i64* %PC
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %662, i64* %665, align 8, !tbaa !2428
  br label %block_40547f

block_4054cc:                                     ; preds = %block_4054b7
  %666 = add i64 %780, 169
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 5
  store i64 %668, i64* %PC
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %666, i64* %669, align 8, !tbaa !2428
  br label %block_405575

block_4054d1:                                     ; preds = %block_4054b7
  %670 = add i64 %780, 5
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 5
  store i64 %672, i64* %PC
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %670, i64* %673, align 8, !tbaa !2428
  br label %block_4054d6

block_405504:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 40
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC
  store i64 %675, i64* %RSI, align 8, !tbaa !2428
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 228
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 5
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 5
  store i64 %683, i64* %PC
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %685 = load i64, i64* %684, align 8, !tbaa !2428
  %686 = add i64 %685, -8
  %687 = inttoptr i64 %686 to i64*
  store i64 %681, i64* %687
  store i64 %686, i64* %684, align 8, !tbaa !2428
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %679, i64* %688, align 8, !tbaa !2428
  %689 = load i64, i64* %PC
  %690 = call %struct.Memory* @sub_4055f0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %689, %struct.Memory* %327)
  %691 = load i8, i8* %AL
  %692 = zext i8 %691 to i64
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 2
  store i64 %694, i64* %PC
  %695 = and i64 1, %692
  %696 = trunc i64 %695 to i8
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %697, align 1, !tbaa !2433
  %698 = trunc i64 %695 to i32
  %699 = and i32 %698, 255
  %700 = call i32 @llvm.ctpop.i32(i32 %699) #16
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = xor i8 %702, 1
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %703, i8* %704, align 1, !tbaa !2447
  %705 = icmp eq i8 %696, 0
  %706 = zext i1 %705 to i8
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %706, i8* %707, align 1, !tbaa !2449
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %708, align 1, !tbaa !2450
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %709, align 1, !tbaa !2451
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %710, align 1, !tbaa !2448
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 11
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 6
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 6
  store i64 %716, i64* %PC
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %718 = load i8, i8* %717, align 1, !tbaa !2449
  %719 = icmp eq i8 %718, 0
  %720 = zext i1 %719 to i8
  store i8 %720, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %722 = select i1 %719, i64 %712, i64 %714
  store i64 %722, i64* %721, align 8, !tbaa !2428
  %723 = load i8, i8* %BRANCH_TAKEN
  %724 = icmp eq i8 %723, 1
  br i1 %724, label %block_40551e, label %block_405519

block_4054b7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %725 = load i64, i64* %RBP
  %726 = sub i64 %725, 32
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 4
  store i64 %728, i64* %PC
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %729 = load i64, i64* %RBP
  %730 = sub i64 %729, 40
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC
  store i64 %730, i64* %RSI, align 8, !tbaa !2428
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 305
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 5
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 5
  store i64 %738, i64* %PC
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %740 = load i64, i64* %739, align 8, !tbaa !2428
  %741 = add i64 %740, -8
  %742 = inttoptr i64 %741 to i64*
  store i64 %736, i64* %742
  store i64 %741, i64* %739, align 8, !tbaa !2428
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %734, i64* %743, align 8, !tbaa !2428
  %744 = load i64, i64* %PC
  %745 = call %struct.Memory* @sub_4055f0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %744, %struct.Memory* %938)
  %746 = load i8, i8* %AL
  %747 = zext i8 %746 to i64
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 2
  store i64 %749, i64* %PC
  %750 = and i64 1, %747
  %751 = trunc i64 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %752, align 1, !tbaa !2433
  %753 = trunc i64 %750 to i32
  %754 = and i32 %753, 255
  %755 = call i32 @llvm.ctpop.i32(i32 %754) #16
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  %758 = xor i8 %757, 1
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %758, i8* %759, align 1, !tbaa !2447
  %760 = icmp eq i8 %751, 0
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %761, i8* %762, align 1, !tbaa !2449
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %763, align 1, !tbaa !2450
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %764, align 1, !tbaa !2451
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %765, align 1, !tbaa !2448
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 11
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 6
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 6
  store i64 %771, i64* %PC
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %773 = load i8, i8* %772, align 1, !tbaa !2449
  %774 = icmp eq i8 %773, 0
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %777 = select i1 %774, i64 %767, i64 %769
  store i64 %777, i64* %776, align 8, !tbaa !2428
  %778 = load i8, i8* %BRANCH_TAKEN
  %779 = icmp eq i8 %778, 1
  %780 = load i64, i64* %PC
  br i1 %779, label %block_4054d1, label %block_4054cc

block_4055c7:                                     ; preds = %block_405575, %block_405430
  %MEMORY.3 = phi %struct.Memory* [ %125, %block_405430 ], [ %482, %block_405575 ]
  %781 = load i64, i64* %RSP
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 4
  store i64 %783, i64* %PC
  %784 = add i64 112, %781
  store i64 %784, i64* %RSP, align 8, !tbaa !2428
  %785 = icmp ult i64 %784, %781
  %786 = icmp ult i64 %784, 112
  %787 = or i1 %785, %786
  %788 = zext i1 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %788, i8* %789, align 1, !tbaa !2433
  %790 = trunc i64 %784 to i32
  %791 = and i32 %790, 255
  %792 = call i32 @llvm.ctpop.i32(i32 %791) #16
  %793 = trunc i32 %792 to i8
  %794 = and i8 %793, 1
  %795 = xor i8 %794, 1
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %795, i8* %796, align 1, !tbaa !2447
  %797 = xor i64 112, %781
  %798 = xor i64 %797, %784
  %799 = lshr i64 %798, 4
  %800 = trunc i64 %799 to i8
  %801 = and i8 %800, 1
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %801, i8* %802, align 1, !tbaa !2448
  %803 = icmp eq i64 %784, 0
  %804 = zext i1 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %804, i8* %805, align 1, !tbaa !2449
  %806 = lshr i64 %784, 63
  %807 = trunc i64 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %807, i8* %808, align 1, !tbaa !2450
  %809 = lshr i64 %781, 63
  %810 = xor i64 %806, %809
  %811 = add nuw nsw i64 %810, %806
  %812 = icmp eq i64 %811, 2
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %813, i8* %814, align 1, !tbaa !2451
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 1
  store i64 %816, i64* %PC
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %818 = load i64, i64* %817, align 8, !tbaa !2428
  %819 = add i64 %818, 8
  %820 = inttoptr i64 %818 to i64*
  %821 = load i64, i64* %820
  store i64 %821, i64* %RBP, align 8, !tbaa !2428
  store i64 %819, i64* %817, align 8, !tbaa !2428
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 1
  store i64 %823, i64* %PC
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %826 = load i64, i64* %825, align 8, !tbaa !2428
  %827 = inttoptr i64 %826 to i64*
  %828 = load i64, i64* %827
  store i64 %828, i64* %824, align 8, !tbaa !2428
  %829 = add i64 %826, 8
  store i64 %829, i64* %825, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_405484:                                     ; preds = %block_4054b2, %block_40547f
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_40547f ], [ %938, %block_4054b2 ]
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 40
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 4
  store i64 %833, i64* %PC
  store i64 %831, i64* %RDI, align 8, !tbaa !2428
  %834 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %835 = load i64, i64* %RBP
  %836 = sub i64 %835, 24
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 5
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to double*
  %840 = load double, double* %839
  %841 = bitcast i8* %834 to double*
  store double %840, double* %841, align 1, !tbaa !2452
  %842 = getelementptr inbounds i8, i8* %834, i64 8
  %843 = bitcast i8* %842 to double*
  store double 0.000000e+00, double* %843, align 1, !tbaa !2452
  %844 = load i64, i64* %RBP
  %845 = sub i64 %844, 88
  %846 = bitcast %union.vec128_t* %XMM0 to i8*
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 5
  store i64 %848, i64* %PC
  %849 = bitcast i8* %846 to double*
  %850 = load double, double* %849, align 1
  %851 = inttoptr i64 %845 to double*
  store double %850, double* %851
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 318
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 5
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 5
  store i64 %857, i64* %PC
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %859 = load i64, i64* %858, align 8, !tbaa !2428
  %860 = add i64 %859, -8
  %861 = inttoptr i64 %860 to i64*
  store i64 %855, i64* %861
  store i64 %860, i64* %858, align 8, !tbaa !2428
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %853, i64* %862, align 8, !tbaa !2428
  %863 = load i64, i64* %PC
  %864 = call %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %863, %struct.Memory* %MEMORY.4)
  %865 = load i64, i64* %RAX
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 3
  store i64 %867, i64* %PC
  store i64 %865, i64* %RDI, align 8, !tbaa !2428
  %868 = load i64, i64* %PC
  %869 = sub i64 %868, 3434
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 5
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 5
  store i64 %873, i64* %PC
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %875 = load i64, i64* %874, align 8, !tbaa !2428
  %876 = add i64 %875, -8
  %877 = inttoptr i64 %876 to i64*
  store i64 %871, i64* %877
  store i64 %876, i64* %874, align 8, !tbaa !2428
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %869, i64* %878, align 8, !tbaa !2428
  %879 = load i64, i64* %PC
  %880 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %879, %struct.Memory* %864)
  %881 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %882 = load i64, i64* %RAX
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 4
  store i64 %884, i64* %PC
  %885 = inttoptr i64 %882 to double*
  %886 = load double, double* %885
  %887 = bitcast i8* %881 to double*
  store double %886, double* %887, align 1, !tbaa !2452
  %888 = getelementptr inbounds i8, i8* %881, i64 8
  %889 = bitcast i8* %888 to double*
  store double 0.000000e+00, double* %889, align 1, !tbaa !2452
  %890 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %891 = load i64, i64* %RBP
  %892 = sub i64 %891, 88
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 5
  store i64 %894, i64* %PC
  %895 = inttoptr i64 %892 to double*
  %896 = load double, double* %895
  %897 = bitcast i8* %890 to double*
  store double %896, double* %897, align 1, !tbaa !2452
  %898 = getelementptr inbounds i8, i8* %890, i64 8
  %899 = bitcast i8* %898 to double*
  store double 0.000000e+00, double* %899, align 1, !tbaa !2452
  %900 = bitcast %union.vec128_t* %XMM0 to i8*
  %901 = bitcast %union.vec128_t* %XMM1 to i8*
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 4
  store i64 %903, i64* %PC
  %904 = bitcast i8* %900 to double*
  %905 = load double, double* %904, align 1
  %906 = bitcast i8* %901 to double*
  %907 = load double, double* %906, align 1
  %908 = fcmp uno double %905, %907
  br i1 %908, label %909, label %921

; <label>:909:                                    ; preds = %block_405484
  %910 = fadd double %905, %907
  %911 = bitcast double %910 to i64
  %912 = and i64 %911, 9221120237041090560
  %913 = icmp eq i64 %912, 9218868437227405312
  %914 = and i64 %911, 2251799813685247
  %915 = icmp ne i64 %914, 0
  %916 = and i1 %913, %915
  br i1 %916, label %917, label %927

; <label>:917:                                    ; preds = %909
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %919 = load i64, i64* %918, align 8, !tbaa !2428
  %920 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %919, %struct.Memory* %880) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:921:                                    ; preds = %block_405484
  %922 = fcmp ogt double %905, %907
  br i1 %922, label %927, label %923

; <label>:923:                                    ; preds = %921
  %924 = fcmp olt double %905, %907
  br i1 %924, label %927, label %925

; <label>:925:                                    ; preds = %923
  %926 = fcmp oeq double %905, %907
  br i1 %926, label %927, label %934

; <label>:927:                                    ; preds = %925, %923, %921, %909
  %928 = phi i8 [ 0, %921 ], [ 0, %923 ], [ 1, %925 ], [ 1, %909 ]
  %929 = phi i8 [ 0, %921 ], [ 0, %923 ], [ 0, %925 ], [ 1, %909 ]
  %930 = phi i8 [ 0, %921 ], [ 1, %923 ], [ 0, %925 ], [ 1, %909 ]
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %928, i8* %931, align 1, !tbaa !2432
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %929, i8* %932, align 1, !tbaa !2432
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %930, i8* %933, align 1, !tbaa !2432
  br label %934

; <label>:934:                                    ; preds = %927, %925
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %935, align 1, !tbaa !2432
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %936, align 1, !tbaa !2432
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %937, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %917, %934
  %938 = phi %struct.Memory* [ %920, %917 ], [ %880, %934 ]
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 11
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 6
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 6
  store i64 %944, i64* %PC
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %946 = load i8, i8* %945, align 1, !tbaa !2433
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %948 = load i8, i8* %947, align 1, !tbaa !2449
  %949 = or i8 %948, %946
  %950 = icmp ne i8 %949, 0
  %951 = zext i1 %950 to i8
  store i8 %951, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %953 = select i1 %950, i64 %940, i64 %942
  store i64 %953, i64* %952, align 8, !tbaa !2428
  %954 = load i8, i8* %BRANCH_TAKEN
  %955 = icmp eq i8 %954, 1
  br i1 %955, label %block_4054b7, label %block_4054b2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405eb0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_402270__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402270:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402298

block_4022e1:                                     ; preds = %block_402298
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4022a8:                                     ; preds = %block_402298
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 16
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 24
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 10188
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 24
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 32
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 14767
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_405c70__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 24
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 32
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 10482
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_402298

block_402298:                                     ; preds = %block_4022a8, %block_402270
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402270 ], [ %249, %block_4022a8 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_4022e1, label %block_4022a8
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d60:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBP
  %33 = sub i64 %32, 8
  %34 = load i64, i64* %RDI
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %33 to i64*
  store i64 %34, i64* %37
  %38 = load i64, i64* %RBP
  %39 = sub i64 %38, 16
  %40 = load i64, i64* %RSI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %43
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RSI, align 8, !tbaa !2428
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 16
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %RDI, align 8, !tbaa !2428
  %56 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %57 = load i64, i64* %RDI
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %57 to double*
  %61 = load double, double* %60
  %62 = bitcast i8* %56 to double*
  store double %61, double* %62, align 1, !tbaa !2452
  %63 = getelementptr inbounds i8, i8* %56, i64 8
  %64 = bitcast i8* %63 to double*
  store double 0.000000e+00, double* %64, align 1, !tbaa !2452
  %65 = load i64, i64* %RSI
  %66 = bitcast %union.vec128_t* %XMM0 to i8*
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = bitcast i8* %66 to double*
  %70 = load double, double* %69, align 1
  %71 = inttoptr i64 %65 to double*
  store double %70, double* %71
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 1
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %75 = load i64, i64* %74, align 8, !tbaa !2428
  %76 = add i64 %75, 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %RBP, align 8, !tbaa !2428
  store i64 %76, i64* %74, align 8, !tbaa !2428
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 1
  store i64 %80, i64* %PC
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %83 = load i64, i64* %82, align 8, !tbaa !2428
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %81, align 8, !tbaa !2428
  %86 = add i64 %83, 8
  store i64 %86, i64* %82, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402c70__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402c70:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402c98

block_402d19:                                     ; preds = %block_402c98
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402ca8:                                     ; preds = %block_402c98
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 84
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 183
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_402da0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 490
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_402c98

block_402c98:                                     ; preds = %block_402ca8, %block_402c70
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402c70 ], [ %333, %block_402ca8 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_402d19, label %block_402ca8
}

; Function Attrs: noinline
define %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402d20:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 9
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ESI = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 5
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RCX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 9
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 15
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RBP = bitcast %union.anon* %33 to i64*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 48
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 48
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2433
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #16
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = xor i64 48, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2451
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 8
  %78 = load i64, i64* %RDI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RSI
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 24
  %90 = load i64, i64* %RDX
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %89 to i64*
  store i64 %90, i64* %93
  br label %block_402d34

block_402d4e:                                     ; preds = %block_402d34
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RSI
  %99 = load i32, i32* %ESI
  %100 = zext i32 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 2
  store i64 %102, i64* %PC
  %103 = xor i64 %100, %98
  %104 = trunc i64 %103 to i32
  %105 = and i64 %103, 4294967295
  store i64 %105, i64* %RSI, align 8, !tbaa !2428
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %106, align 1, !tbaa !2433
  %107 = and i32 %104, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = icmp eq i32 %104, 0
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i32 %104, 31
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %117, i8* %118, align 1, !tbaa !2450
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %119, align 1, !tbaa !2451
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %120, align 1, !tbaa !2448
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 700
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 5
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 5
  store i64 %126, i64* %PC
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %128 = load i64, i64* %127, align 8, !tbaa !2428
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %124, i64* %130
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %131, align 8, !tbaa !2428
  %132 = load i64, i64* %PC
  %133 = call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %132, %struct.Memory* %267)
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 32
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 32
  %140 = load i64, i64* %RAX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 799
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 5
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 5
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %151 = load i64, i64* %150, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %147, i64* %153
  store i64 %152, i64* %150, align 8, !tbaa !2428
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %145, i64* %154, align 8, !tbaa !2428
  %155 = load i64, i64* %PC
  %156 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %155, %struct.Memory* %133)
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 24
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  store i64 %158, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %RSI
  %162 = load i32, i32* %ESI
  %163 = zext i32 %162 to i64
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 2
  store i64 %165, i64* %PC
  %166 = xor i64 %163, %161
  %167 = trunc i64 %166 to i32
  %168 = and i64 %166, 4294967295
  store i64 %168, i64* %RSI, align 8, !tbaa !2428
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %169, align 1, !tbaa !2433
  %170 = and i32 %167, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #16
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2447
  %176 = icmp eq i32 %167, 0
  %177 = zext i1 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i32 %167, 31
  %180 = trunc i32 %179 to i8
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %180, i8* %181, align 1, !tbaa !2450
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %182, align 1, !tbaa !2451
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %183, align 1, !tbaa !2448
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 48
  %186 = load i64, i64* %RAX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %185 to i64*
  store i64 %186, i64* %189
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 672
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 5
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 5
  store i64 %195, i64* %PC
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %197 = load i64, i64* %196, align 8, !tbaa !2428
  %198 = add i64 %197, -8
  %199 = inttoptr i64 %198 to i64*
  store i64 %193, i64* %199
  store i64 %198, i64* %196, align 8, !tbaa !2428
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %191, i64* %200, align 8, !tbaa !2428
  %201 = load i64, i64* %PC
  %202 = call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %201, %struct.Memory* %156)
  %203 = load i64, i64* %RBP
  %204 = sub i64 %203, 40
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  store i64 %204, i64* %RDI, align 8, !tbaa !2428
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 40
  %209 = load i64, i64* %RAX
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 4
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 771
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 5
  store i64 %218, i64* %PC
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %220 = load i64, i64* %219, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %216, i64* %222
  store i64 %221, i64* %219, align 8, !tbaa !2428
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %223, align 8, !tbaa !2428
  %224 = load i64, i64* %PC
  %225 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %224, %struct.Memory* %202)
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 48
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %RDI, align 8, !tbaa !2428
  %232 = load i64, i64* %RDI
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RCX, align 8, !tbaa !2428
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %RCX
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC
  %241 = inttoptr i64 %237 to i64*
  store i64 %238, i64* %241
  %242 = load i64, i64* %PC
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 5
  store i64 %245, i64* %PC
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %243, i64* %246, align 8, !tbaa !2428
  br label %block_402d34

block_402d34:                                     ; preds = %block_402d4e, %block_402d20
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402d20 ], [ %225, %block_402d4e ]
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 8
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 4
  store i64 %250, i64* %PC
  store i64 %248, i64* %RDI, align 8, !tbaa !2428
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 16
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  store i64 %252, i64* %RSI, align 8, !tbaa !2428
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 788
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 5
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 5
  store i64 %260, i64* %PC
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %262 = load i64, i64* %261, align 8, !tbaa !2428
  %263 = add i64 %262, -8
  %264 = inttoptr i64 %263 to i64*
  store i64 %258, i64* %264
  store i64 %263, i64* %261, align 8, !tbaa !2428
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %256, i64* %265, align 8, !tbaa !2428
  %266 = load i64, i64* %PC
  %267 = call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %266, %struct.Memory* %MEMORY.0)
  %268 = load i8, i8* %AL
  %269 = zext i8 %268 to i64
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 2
  store i64 %271, i64* %PC
  %272 = and i64 1, %269
  %273 = trunc i64 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %274, align 1, !tbaa !2433
  %275 = trunc i64 %272 to i32
  %276 = and i32 %275, 255
  %277 = call i32 @llvm.ctpop.i32(i32 %276) #16
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %280, i8* %281, align 1, !tbaa !2447
  %282 = icmp eq i8 %273, 0
  %283 = zext i1 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %283, i8* %284, align 1, !tbaa !2449
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %285, align 1, !tbaa !2450
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %286, align 1, !tbaa !2451
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %287, align 1, !tbaa !2448
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 11
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 6
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 6
  store i64 %293, i64* %PC
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %295 = load i8, i8* %294, align 1, !tbaa !2449
  %296 = icmp eq i8 %295, 0
  %297 = zext i1 %296 to i8
  store i8 %297, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %299 = select i1 %296, i64 %289, i64 %291
  store i64 %299, i64* %298, align 8, !tbaa !2428
  %300 = load i8, i8* %BRANCH_TAKEN
  %301 = icmp eq i8 %300, 1
  br i1 %301, label %block_402d4e, label %block_402d49

block_402d49:                                     ; preds = %block_402d34
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 72
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 5
  store i64 %305, i64* %PC
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %303, i64* %306, align 8, !tbaa !2428
  %307 = load i64, i64* %RSP
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC
  %310 = add i64 48, %307
  store i64 %310, i64* %RSP, align 8, !tbaa !2428
  %311 = icmp ult i64 %310, %307
  %312 = icmp ult i64 %310, 48
  %313 = or i1 %311, %312
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %314, i8* %315, align 1, !tbaa !2433
  %316 = trunc i64 %310 to i32
  %317 = and i32 %316, 255
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #16
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %321, i8* %322, align 1, !tbaa !2447
  %323 = xor i64 48, %307
  %324 = xor i64 %323, %310
  %325 = lshr i64 %324, 4
  %326 = trunc i64 %325 to i8
  %327 = and i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %327, i8* %328, align 1, !tbaa !2448
  %329 = icmp eq i64 %310, 0
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %330, i8* %331, align 1, !tbaa !2449
  %332 = lshr i64 %310, 63
  %333 = trunc i64 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %333, i8* %334, align 1, !tbaa !2450
  %335 = lshr i64 %307, 63
  %336 = xor i64 %332, %335
  %337 = add nuw nsw i64 %336, %332
  %338 = icmp eq i64 %337, 2
  %339 = zext i1 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %339, i8* %340, align 1, !tbaa !2451
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 1
  store i64 %342, i64* %PC
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %344 = load i64, i64* %343, align 8, !tbaa !2428
  %345 = add i64 %344, 8
  %346 = inttoptr i64 %344 to i64*
  %347 = load i64, i64* %346
  store i64 %347, i64* %RBP, align 8, !tbaa !2428
  store i64 %345, i64* %343, align 8, !tbaa !2428
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 1
  store i64 %349, i64* %PC
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %352 = load i64, i64* %351, align 8, !tbaa !2428
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  store i64 %354, i64* %350, align 8, !tbaa !2428
  %355 = add i64 %352, 8
  store i64 %355, i64* %351, align 8, !tbaa !2428
  ret %struct.Memory* %267
}

; Function Attrs: noinline
define %struct.Memory* @sub_406570__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406570:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_4065a0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b10_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400b10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6328568, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6328568
  %37 = icmp ult i64 %33, 6328568
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2433
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2447
  %47 = xor i64 6328568, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2448
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2449
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2450
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2451
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2449
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400b38, label %block_400b21

block_400b38:                                     ; preds = %block_400b21, %block_400b33, %block_400b10
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400b10 ], [ %2, %block_400b21 ], [ %2, %block_400b33 ]
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400b3a:                                     ; preds = %block_400b2b
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %RAX
  %98 = add i64 %97, %96
  %99 = load i16, i16* %AX
  %100 = zext i16 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 6
  store i64 %102, i64* %PC
  %103 = load i64, i64* %PC
  %104 = tail call %struct.Memory* @sub_400b40_register_tm_clones(%struct.State* %0, i64 %103, %struct.Memory* %2)
  ret %struct.Memory* %104

block_400b33:                                     ; preds = %block_400b2b
  %105 = load i64, i64* %RAX
  %106 = load i64, i64* %RAX
  %107 = add i64 %106, %105
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  store i64 %111, i64* %PC
  br label %block_400b38

block_400b2b:                                     ; preds = %block_400b21
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 1
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %RBP, align 8, !tbaa !2428
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  store i64 6328568, i64* %RDI, align 8, !tbaa !2428
  %121 = load i64, i64* %RAX
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  switch i64 %125, label %162 [
    i64 4197178, label %block_400b3a
    i64 4197171, label %block_400b33
  ]

block_400b21:                                     ; preds = %block_400b10
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = and i64 %129, %128
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %133, align 1, !tbaa !2433
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 255
  %136 = call i32 @llvm.ctpop.i32(i32 %135) #16
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i64 %132, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2449
  %144 = lshr i64 %132, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2450
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %147, align 1, !tbaa !2451
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %148, align 1, !tbaa !2448
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 15
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 2
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %156 = load i8, i8* %155, align 1, !tbaa !2449
  store i8 %156, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %158 = icmp ne i8 %156, 0
  %159 = select i1 %158, i64 %150, i64 %152
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_400b38, label %block_400b2b

; <label>:162:                                    ; preds = %block_400b2b
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_404750__ZppIdER14PointerWrapperIT_ES3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %RAX
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = add i64 8, %45
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = icmp ult i64 %48, %45
  %50 = icmp ult i64 %48, 8
  %51 = or i1 %49, %50
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %48 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 8, %45
  %62 = xor i64 %61, %48
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %48, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %48, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %45, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %70
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2451
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %RAX
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 1
  store i64 %91, i64* %PC
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = add i64 %93, 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %92, align 8, !tbaa !2428
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 1
  store i64 %98, i64* %PC
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %101 = load i64, i64* %100, align 8, !tbaa !2428
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %99, align 8, !tbaa !2428
  %104 = add i64 %101, 8
  store i64 %104, i64* %100, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405a60__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405a60:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %RAX = bitcast %union.anon* %19 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 5
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RCX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 7
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RDX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 9
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RSI = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 11
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 13
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSP = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 15
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RBP = bitcast %union.anon* %37 to i64*
  %38 = load i64, i64* %RBP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 1
  store i64 %40, i64* %PC
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %42 = load i64, i64* %41, align 8, !tbaa !2428
  %43 = add i64 %42, -8
  %44 = inttoptr i64 %43 to i64*
  store i64 %38, i64* %44
  store i64 %43, i64* %41, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 3
  store i64 %47, i64* %PC
  store i64 %45, i64* %RBP, align 8, !tbaa !2428
  %48 = load i64, i64* %RSP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = sub i64 %48, 64
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  %52 = icmp ult i64 %48, 64
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %53, i8* %54, align 1, !tbaa !2433
  %55 = trunc i64 %51 to i32
  %56 = and i32 %55, 255
  %57 = call i32 @llvm.ctpop.i32(i32 %56) #16
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %60, i8* %61, align 1, !tbaa !2447
  %62 = xor i64 64, %48
  %63 = xor i64 %62, %51
  %64 = lshr i64 %63, 4
  %65 = trunc i64 %64 to i8
  %66 = and i8 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %66, i8* %67, align 1, !tbaa !2448
  %68 = icmp eq i64 %51, 0
  %69 = zext i1 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %69, i8* %70, align 1, !tbaa !2449
  %71 = lshr i64 %51, 63
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %72, i8* %73, align 1, !tbaa !2450
  %74 = lshr i64 %48, 63
  %75 = xor i64 %71, %74
  %76 = add nuw nsw i64 %75, %74
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %78, i8* %79, align 1, !tbaa !2451
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 8
  %82 = load i64, i64* %RDI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %81 to i64*
  store i64 %82, i64* %85
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 16
  %88 = load i64, i64* %RSI
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %87 to i64*
  store i64 %88, i64* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 8
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %RSI, align 8, !tbaa !2428
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 24
  %100 = load i64, i64* %RSI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 24
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %RSI, align 8, !tbaa !2428
  %110 = load i64, i64* %RSI
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = add i64 8, %110
  store i64 %113, i64* %RSI, align 8, !tbaa !2428
  %114 = icmp ult i64 %113, %110
  %115 = icmp ult i64 %113, 8
  %116 = or i1 %114, %115
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %117, i8* %118, align 1, !tbaa !2433
  %119 = trunc i64 %113 to i32
  %120 = and i32 %119, 255
  %121 = call i32 @llvm.ctpop.i32(i32 %120) #16
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = xor i8 %123, 1
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %124, i8* %125, align 1, !tbaa !2447
  %126 = xor i64 8, %110
  %127 = xor i64 %126, %113
  %128 = lshr i64 %127, 4
  %129 = trunc i64 %128 to i8
  %130 = and i8 %129, 1
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %130, i8* %131, align 1, !tbaa !2448
  %132 = icmp eq i64 %113, 0
  %133 = zext i1 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %133, i8* %134, align 1, !tbaa !2449
  %135 = lshr i64 %113, 63
  %136 = trunc i64 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %136, i8* %137, align 1, !tbaa !2450
  %138 = lshr i64 %110, 63
  %139 = xor i64 %135, %138
  %140 = add nuw nsw i64 %139, %135
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2451
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 24
  %146 = load i64, i64* %RSI
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %149
  br label %block_405a84

block_405a92:                                     ; preds = %block_405a84
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 24
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = load i64, i64* %RBP
  %162 = sub i64 %161, 32
  %163 = load i64, i64* %RAX
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %162 to i64*
  store i64 %163, i64* %166
  %167 = load i64, i64* %RBP
  %168 = sub i64 %167, 24
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 4
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %168 to i64*
  %172 = load i64, i64* %171
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 40
  %175 = load i64, i64* %RAX
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 4
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %174 to i64*
  store i64 %175, i64* %178
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 40
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RAX, align 8, !tbaa !2428
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 48
  %187 = load i64, i64* %RAX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  br label %block_405aad

block_405b28:                                     ; preds = %block_405a84
  %191 = load i64, i64* %RSP
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 4
  store i64 %193, i64* %PC
  %194 = add i64 64, %191
  store i64 %194, i64* %RSP, align 8, !tbaa !2428
  %195 = icmp ult i64 %194, %191
  %196 = icmp ult i64 %194, 64
  %197 = or i1 %195, %196
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %198, i8* %199, align 1, !tbaa !2433
  %200 = trunc i64 %194 to i32
  %201 = and i32 %200, 255
  %202 = call i32 @llvm.ctpop.i32(i32 %201) #16
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %205, i8* %206, align 1, !tbaa !2447
  %207 = xor i64 64, %191
  %208 = xor i64 %207, %194
  %209 = lshr i64 %208, 4
  %210 = trunc i64 %209 to i8
  %211 = and i8 %210, 1
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %211, i8* %212, align 1, !tbaa !2448
  %213 = icmp eq i64 %194, 0
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %214, i8* %215, align 1, !tbaa !2449
  %216 = lshr i64 %194, 63
  %217 = trunc i64 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %217, i8* %218, align 1, !tbaa !2450
  %219 = lshr i64 %191, 63
  %220 = xor i64 %216, %219
  %221 = add nuw nsw i64 %220, %216
  %222 = icmp eq i64 %221, 2
  %223 = zext i1 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %223, i8* %224, align 1, !tbaa !2451
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 1
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %228 = load i64, i64* %227, align 8, !tbaa !2428
  %229 = add i64 %228, 8
  %230 = inttoptr i64 %228 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %RBP, align 8, !tbaa !2428
  store i64 %229, i64* %227, align 8, !tbaa !2428
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 1
  store i64 %233, i64* %PC
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %236 = load i64, i64* %235, align 8, !tbaa !2428
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  store i64 %238, i64* %234, align 8, !tbaa !2428
  %239 = add i64 %236, 8
  store i64 %239, i64* %235, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_405aed:                                     ; preds = %block_405add
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 48
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 40
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i64*
  %251 = load i64, i64* %250
  store i64 %251, i64* %RCX, align 8, !tbaa !2428
  %252 = load i64, i64* %RAX
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RCX
  %258 = load i64, i64* %RAX
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 3
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %257 to i64*
  store i64 %258, i64* %261
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 40
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 4
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266
  store i64 %267, i64* %RAX, align 8, !tbaa !2428
  %268 = load i64, i64* %RAX
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = add i64 -8, %268
  store i64 %271, i64* %RAX, align 8, !tbaa !2428
  %272 = icmp ult i64 %271, %268
  %273 = icmp ult i64 %271, -8
  %274 = or i1 %272, %273
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %275, i8* %276, align 1, !tbaa !2433
  %277 = trunc i64 %271 to i32
  %278 = and i32 %277, 255
  %279 = call i32 @llvm.ctpop.i32(i32 %278) #16
  %280 = trunc i32 %279 to i8
  %281 = and i8 %280, 1
  %282 = xor i8 %281, 1
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %282, i8* %283, align 1, !tbaa !2447
  %284 = xor i64 -8, %268
  %285 = xor i64 %284, %271
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %288, i8* %289, align 1, !tbaa !2448
  %290 = icmp eq i64 %271, 0
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %291, i8* %292, align 1, !tbaa !2449
  %293 = lshr i64 %271, 63
  %294 = trunc i64 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %294, i8* %295, align 1, !tbaa !2450
  %296 = lshr i64 %268, 63
  %297 = xor i64 %293, %296
  %298 = xor i64 %293, 1
  %299 = add nuw nsw i64 %297, %298
  %300 = icmp eq i64 %299, 2
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %301, i8* %302, align 1, !tbaa !2451
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 40
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %PC
  %310 = sub i64 %309, 90
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 5
  store i64 %312, i64* %PC
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %310, i64* %313, align 8, !tbaa !2428
  br label %block_405aad

block_405add:                                     ; preds = %block_405aad, %block_405ac2
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_405aad ], [ %550, %block_405ac2 ]
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 49
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 3
  store i64 %317, i64* %PC
  %318 = inttoptr i64 %315 to i8*
  %319 = load i8, i8* %318
  store i8 %319, i8* %AL, align 1, !tbaa !2432
  %320 = load i8, i8* %AL
  %321 = zext i8 %320 to i64
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 2
  store i64 %323, i64* %PC
  %324 = and i64 1, %321
  %325 = trunc i64 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %326, align 1, !tbaa !2433
  %327 = trunc i64 %324 to i32
  %328 = and i32 %327, 255
  %329 = call i32 @llvm.ctpop.i32(i32 %328) #16
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = xor i8 %331, 1
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %332, i8* %333, align 1, !tbaa !2447
  %334 = icmp eq i8 %325, 0
  %335 = zext i1 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %335, i8* %336, align 1, !tbaa !2449
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %337, align 1, !tbaa !2450
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %338, align 1, !tbaa !2451
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %339, align 1, !tbaa !2448
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 11
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 6
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 6
  store i64 %345, i64* %PC
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %347 = load i8, i8* %346, align 1, !tbaa !2449
  %348 = icmp eq i8 %347, 0
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %351 = select i1 %348, i64 %341, i64 %343
  store i64 %351, i64* %350, align 8, !tbaa !2428
  %352 = load i8, i8* %BRANCH_TAKEN
  %353 = icmp eq i8 %352, 1
  br i1 %353, label %block_405aed, label %block_405ae8

block_405ae8:                                     ; preds = %block_405add
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 36
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 5
  store i64 %357, i64* %PC
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %355, i64* %358, align 8, !tbaa !2428
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 40
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 32
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i64*
  %370 = load i64, i64* %369
  store i64 %370, i64* %RCX, align 8, !tbaa !2428
  %371 = load i64, i64* %RAX
  %372 = load i64, i64* %RCX
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %371 to i64*
  store i64 %372, i64* %375
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 24
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = load i64, i64* %RAX
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC
  %385 = add i64 8, %382
  store i64 %385, i64* %RAX, align 8, !tbaa !2428
  %386 = icmp ult i64 %385, %382
  %387 = icmp ult i64 %385, 8
  %388 = or i1 %386, %387
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %389, i8* %390, align 1, !tbaa !2433
  %391 = trunc i64 %385 to i32
  %392 = and i32 %391, 255
  %393 = call i32 @llvm.ctpop.i32(i32 %392) #16
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = xor i8 %395, 1
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %396, i8* %397, align 1, !tbaa !2447
  %398 = xor i64 8, %382
  %399 = xor i64 %398, %385
  %400 = lshr i64 %399, 4
  %401 = trunc i64 %400 to i8
  %402 = and i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %402, i8* %403, align 1, !tbaa !2448
  %404 = icmp eq i64 %385, 0
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %405, i8* %406, align 1, !tbaa !2449
  %407 = lshr i64 %385, 63
  %408 = trunc i64 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %408, i8* %409, align 1, !tbaa !2450
  %410 = lshr i64 %382, 63
  %411 = xor i64 %407, %410
  %412 = add nuw nsw i64 %411, %407
  %413 = icmp eq i64 %412, 2
  %414 = zext i1 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %414, i8* %415, align 1, !tbaa !2451
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 24
  %418 = load i64, i64* %RAX
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 4
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %417 to i64*
  store i64 %418, i64* %421
  %422 = load i64, i64* %PC
  %423 = sub i64 %422, 159
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 5
  store i64 %425, i64* %PC
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %423, i64* %426, align 8, !tbaa !2428
  br label %block_405a84

block_405a84:                                     ; preds = %block_405ae8, %block_405a60
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_405a60 ], [ %MEMORY.0, %block_405ae8 ]
  %427 = load i64, i64* %RBP
  %428 = sub i64 %427, 24
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 4
  store i64 %430, i64* %PC
  %431 = inttoptr i64 %428 to i64*
  %432 = load i64, i64* %431
  store i64 %432, i64* %RAX, align 8, !tbaa !2428
  %433 = load i64, i64* %RAX
  %434 = load i64, i64* %RBP
  %435 = sub i64 %434, 16
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC
  %438 = inttoptr i64 %435 to i64*
  %439 = load i64, i64* %438
  %440 = sub i64 %433, %439
  %441 = icmp ugt i64 %439, %433
  %442 = zext i1 %441 to i8
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %442, i8* %443, align 1, !tbaa !2433
  %444 = trunc i64 %440 to i32
  %445 = and i32 %444, 255
  %446 = call i32 @llvm.ctpop.i32(i32 %445) #16
  %447 = trunc i32 %446 to i8
  %448 = and i8 %447, 1
  %449 = xor i8 %448, 1
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %449, i8* %450, align 1, !tbaa !2447
  %451 = xor i64 %439, %433
  %452 = xor i64 %451, %440
  %453 = lshr i64 %452, 4
  %454 = trunc i64 %453 to i8
  %455 = and i8 %454, 1
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %455, i8* %456, align 1, !tbaa !2448
  %457 = icmp eq i64 %440, 0
  %458 = zext i1 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %458, i8* %459, align 1, !tbaa !2449
  %460 = lshr i64 %440, 63
  %461 = trunc i64 %460 to i8
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %461, i8* %462, align 1, !tbaa !2450
  %463 = lshr i64 %433, 63
  %464 = lshr i64 %439, 63
  %465 = xor i64 %464, %463
  %466 = xor i64 %460, %463
  %467 = add nuw nsw i64 %466, %465
  %468 = icmp eq i64 %467, 2
  %469 = zext i1 %468 to i8
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %469, i8* %470, align 1, !tbaa !2451
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 156
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 6
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 6
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %478 = load i8, i8* %477, align 1, !tbaa !2449
  store i8 %478, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %480 = icmp ne i8 %478, 0
  %481 = select i1 %480, i64 %472, i64 %474
  store i64 %481, i64* %479, align 8, !tbaa !2428
  %482 = load i8, i8* %BRANCH_TAKEN
  %483 = icmp eq i8 %482, 1
  br i1 %483, label %block_405b28, label %block_405a92

block_405ac2:                                     ; preds = %block_405aad
  %484 = load i64, i64* %RBP
  %485 = sub i64 %484, 32
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC
  store i64 %485, i64* %RDI, align 8, !tbaa !2428
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 48
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %RAX, align 8, !tbaa !2428
  %494 = load i64, i64* %RAX
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 4
  store i64 %496, i64* %PC
  %497 = add i64 -8, %494
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = icmp ult i64 %497, %494
  %499 = icmp ult i64 %497, -8
  %500 = or i1 %498, %499
  %501 = zext i1 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %501, i8* %502, align 1, !tbaa !2433
  %503 = trunc i64 %497 to i32
  %504 = and i32 %503, 255
  %505 = call i32 @llvm.ctpop.i32(i32 %504) #16
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %508, i8* %509, align 1, !tbaa !2447
  %510 = xor i64 -8, %494
  %511 = xor i64 %510, %497
  %512 = lshr i64 %511, 4
  %513 = trunc i64 %512 to i8
  %514 = and i8 %513, 1
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %514, i8* %515, align 1, !tbaa !2448
  %516 = icmp eq i64 %497, 0
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %517, i8* %518, align 1, !tbaa !2449
  %519 = lshr i64 %497, 63
  %520 = trunc i64 %519 to i8
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %520, i8* %521, align 1, !tbaa !2450
  %522 = lshr i64 %494, 63
  %523 = xor i64 %519, %522
  %524 = xor i64 %519, 1
  %525 = add nuw nsw i64 %523, %524
  %526 = icmp eq i64 %525, 2
  %527 = zext i1 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %527, i8* %528, align 1, !tbaa !2451
  %529 = load i64, i64* %RBP
  %530 = sub i64 %529, 48
  %531 = load i64, i64* %RAX
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 4
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %530 to i64*
  store i64 %531, i64* %534
  %535 = load i64, i64* %RAX
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 3
  store i64 %537, i64* %PC
  store i64 %535, i64* %RSI, align 8, !tbaa !2428
  %538 = load i64, i64* %PC
  %539 = sub i64 %538, 10373
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 5
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 5
  store i64 %543, i64* %PC
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %545 = load i64, i64* %544, align 8, !tbaa !2428
  %546 = add i64 %545, -8
  %547 = inttoptr i64 %546 to i64*
  store i64 %541, i64* %547
  store i64 %546, i64* %544, align 8, !tbaa !2428
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %539, i64* %548, align 8, !tbaa !2428
  %549 = load i64, i64* %PC
  %550 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %549, %struct.Memory* %MEMORY.2)
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 49
  %553 = load i8, i8* %AL
  %554 = zext i8 %553 to i64
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 3
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %552 to i8*
  store i8 %553, i8* %557
  br label %block_405add

block_405aad:                                     ; preds = %block_405aed, %block_405a92
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_405a92 ], [ %MEMORY.0, %block_405aed ]
  %558 = load i64, i64* %RAX
  %559 = load i32, i32* %EAX
  %560 = zext i32 %559 to i64
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 2
  store i64 %562, i64* %PC
  %563 = xor i64 %560, %558
  %564 = trunc i64 %563 to i32
  %565 = and i64 %563, 4294967295
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %566, align 1, !tbaa !2433
  %567 = and i32 %564, 255
  %568 = call i32 @llvm.ctpop.i32(i32 %567) #16
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = xor i8 %570, 1
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %571, i8* %572, align 1, !tbaa !2447
  %573 = icmp eq i32 %564, 0
  %574 = zext i1 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %574, i8* %575, align 1, !tbaa !2449
  %576 = lshr i32 %564, 31
  %577 = trunc i32 %576 to i8
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %577, i8* %578, align 1, !tbaa !2450
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %579, align 1, !tbaa !2451
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %580, align 1, !tbaa !2448
  %581 = load i8, i8* %AL
  %582 = zext i8 %581 to i64
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 2
  store i64 %584, i64* %PC
  store i8 %581, i8* %CL, align 1, !tbaa !2432
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 40
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %586 to i64*
  %590 = load i64, i64* %589
  store i64 %590, i64* %RDX, align 8, !tbaa !2428
  %591 = load i64, i64* %RDX
  %592 = load i64, i64* %RBP
  %593 = sub i64 %592, 8
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 4
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i64*
  %597 = load i64, i64* %596
  %598 = sub i64 %591, %597
  %599 = icmp ugt i64 %597, %591
  %600 = zext i1 %599 to i8
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %600, i8* %601, align 1, !tbaa !2433
  %602 = trunc i64 %598 to i32
  %603 = and i32 %602, 255
  %604 = call i32 @llvm.ctpop.i32(i32 %603) #16
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %607, i8* %608, align 1, !tbaa !2447
  %609 = xor i64 %597, %591
  %610 = xor i64 %609, %598
  %611 = lshr i64 %610, 4
  %612 = trunc i64 %611 to i8
  %613 = and i8 %612, 1
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %613, i8* %614, align 1, !tbaa !2448
  %615 = icmp eq i64 %598, 0
  %616 = zext i1 %615 to i8
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %616, i8* %617, align 1, !tbaa !2449
  %618 = lshr i64 %598, 63
  %619 = trunc i64 %618 to i8
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %619, i8* %620, align 1, !tbaa !2450
  %621 = lshr i64 %591, 63
  %622 = lshr i64 %597, 63
  %623 = xor i64 %622, %621
  %624 = xor i64 %618, %621
  %625 = add nuw nsw i64 %624, %623
  %626 = icmp eq i64 %625, 2
  %627 = zext i1 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %627, i8* %628, align 1, !tbaa !2451
  %629 = load i64, i64* %RBP
  %630 = sub i64 %629, 49
  %631 = load i8, i8* %CL
  %632 = zext i8 %631 to i64
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 3
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %630 to i8*
  store i8 %631, i8* %635
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 33
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 6
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 6
  store i64 %641, i64* %PC
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %643 = load i8, i8* %642, align 1, !tbaa !2449
  store i8 %643, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %645 = icmp ne i8 %643, 0
  %646 = select i1 %645, i64 %637, i64 %639
  store i64 %646, i64* %644, align 8, !tbaa !2428
  %647 = load i8, i8* %BRANCH_TAKEN
  %648 = icmp eq i8 %647, 1
  br i1 %648, label %block_405add, label %block_405ac2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405870__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405870:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %RAX = bitcast %union.anon* %19 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 5
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RCX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 7
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RDX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 9
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RSI = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 11
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 13
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSP = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 15
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RBP = bitcast %union.anon* %37 to i64*
  %38 = load i64, i64* %RBP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 1
  store i64 %40, i64* %PC
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %42 = load i64, i64* %41, align 8, !tbaa !2428
  %43 = add i64 %42, -8
  %44 = inttoptr i64 %43 to i64*
  store i64 %38, i64* %44
  store i64 %43, i64* %41, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 3
  store i64 %47, i64* %PC
  store i64 %45, i64* %RBP, align 8, !tbaa !2428
  %48 = load i64, i64* %RSP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = sub i64 %48, 64
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  %52 = icmp ult i64 %48, 64
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %53, i8* %54, align 1, !tbaa !2433
  %55 = trunc i64 %51 to i32
  %56 = and i32 %55, 255
  %57 = call i32 @llvm.ctpop.i32(i32 %56) #16
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %60, i8* %61, align 1, !tbaa !2447
  %62 = xor i64 64, %48
  %63 = xor i64 %62, %51
  %64 = lshr i64 %63, 4
  %65 = trunc i64 %64 to i8
  %66 = and i8 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %66, i8* %67, align 1, !tbaa !2448
  %68 = icmp eq i64 %51, 0
  %69 = zext i1 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %69, i8* %70, align 1, !tbaa !2449
  %71 = lshr i64 %51, 63
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %72, i8* %73, align 1, !tbaa !2450
  %74 = lshr i64 %48, 63
  %75 = xor i64 %71, %74
  %76 = add nuw nsw i64 %75, %74
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %78, i8* %79, align 1, !tbaa !2451
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 8
  %82 = load i64, i64* %RDI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %81 to i64*
  store i64 %82, i64* %85
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 16
  %88 = load i64, i64* %RSI
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %87 to i64*
  store i64 %88, i64* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 8
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %RSI, align 8, !tbaa !2428
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 24
  %100 = load i64, i64* %RSI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 24
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %RSI, align 8, !tbaa !2428
  %110 = load i64, i64* %RSI
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = add i64 8, %110
  store i64 %113, i64* %RSI, align 8, !tbaa !2428
  %114 = icmp ult i64 %113, %110
  %115 = icmp ult i64 %113, 8
  %116 = or i1 %114, %115
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %117, i8* %118, align 1, !tbaa !2433
  %119 = trunc i64 %113 to i32
  %120 = and i32 %119, 255
  %121 = call i32 @llvm.ctpop.i32(i32 %120) #16
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = xor i8 %123, 1
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %124, i8* %125, align 1, !tbaa !2447
  %126 = xor i64 8, %110
  %127 = xor i64 %126, %113
  %128 = lshr i64 %127, 4
  %129 = trunc i64 %128 to i8
  %130 = and i8 %129, 1
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %130, i8* %131, align 1, !tbaa !2448
  %132 = icmp eq i64 %113, 0
  %133 = zext i1 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %133, i8* %134, align 1, !tbaa !2449
  %135 = lshr i64 %113, 63
  %136 = trunc i64 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %136, i8* %137, align 1, !tbaa !2450
  %138 = lshr i64 %110, 63
  %139 = xor i64 %135, %138
  %140 = add nuw nsw i64 %139, %135
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2451
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 24
  %146 = load i64, i64* %RSI
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %149
  br label %block_405894

block_4058fd:                                     ; preds = %block_4058ed
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 48
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 40
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %RCX, align 8, !tbaa !2428
  %162 = load i64, i64* %RAX
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = load i64, i64* %RCX
  %168 = load i64, i64* %RAX
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 3
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %167 to i64*
  store i64 %168, i64* %171
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 40
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i64*
  %177 = load i64, i64* %176
  store i64 %177, i64* %RAX, align 8, !tbaa !2428
  %178 = load i64, i64* %RAX
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 4
  store i64 %180, i64* %PC
  %181 = add i64 -8, %178
  store i64 %181, i64* %RAX, align 8, !tbaa !2428
  %182 = icmp ult i64 %181, %178
  %183 = icmp ult i64 %181, -8
  %184 = or i1 %182, %183
  %185 = zext i1 %184 to i8
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %185, i8* %186, align 1, !tbaa !2433
  %187 = trunc i64 %181 to i32
  %188 = and i32 %187, 255
  %189 = call i32 @llvm.ctpop.i32(i32 %188) #16
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %192, i8* %193, align 1, !tbaa !2447
  %194 = xor i64 -8, %178
  %195 = xor i64 %194, %181
  %196 = lshr i64 %195, 4
  %197 = trunc i64 %196 to i8
  %198 = and i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %198, i8* %199, align 1, !tbaa !2448
  %200 = icmp eq i64 %181, 0
  %201 = zext i1 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %201, i8* %202, align 1, !tbaa !2449
  %203 = lshr i64 %181, 63
  %204 = trunc i64 %203 to i8
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %204, i8* %205, align 1, !tbaa !2450
  %206 = lshr i64 %178, 63
  %207 = xor i64 %203, %206
  %208 = xor i64 %203, 1
  %209 = add nuw nsw i64 %207, %208
  %210 = icmp eq i64 %209, 2
  %211 = zext i1 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %211, i8* %212, align 1, !tbaa !2451
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 40
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %214 to i64*
  store i64 %215, i64* %218
  %219 = load i64, i64* %PC
  %220 = sub i64 %219, 90
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 5
  store i64 %222, i64* %PC
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %220, i64* %223, align 8, !tbaa !2428
  br label %block_4058bd

block_405938:                                     ; preds = %block_405894
  %224 = load i64, i64* %RSP
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = add i64 64, %224
  store i64 %227, i64* %RSP, align 8, !tbaa !2428
  %228 = icmp ult i64 %227, %224
  %229 = icmp ult i64 %227, 64
  %230 = or i1 %228, %229
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %231, i8* %232, align 1, !tbaa !2433
  %233 = trunc i64 %227 to i32
  %234 = and i32 %233, 255
  %235 = call i32 @llvm.ctpop.i32(i32 %234) #16
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = xor i8 %237, 1
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %238, i8* %239, align 1, !tbaa !2447
  %240 = xor i64 64, %224
  %241 = xor i64 %240, %227
  %242 = lshr i64 %241, 4
  %243 = trunc i64 %242 to i8
  %244 = and i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %244, i8* %245, align 1, !tbaa !2448
  %246 = icmp eq i64 %227, 0
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %247, i8* %248, align 1, !tbaa !2449
  %249 = lshr i64 %227, 63
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %250, i8* %251, align 1, !tbaa !2450
  %252 = lshr i64 %224, 63
  %253 = xor i64 %249, %252
  %254 = add nuw nsw i64 %253, %249
  %255 = icmp eq i64 %254, 2
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %256, i8* %257, align 1, !tbaa !2451
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 1
  store i64 %259, i64* %PC
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = add i64 %261, 8
  %263 = inttoptr i64 %261 to i64*
  %264 = load i64, i64* %263
  store i64 %264, i64* %RBP, align 8, !tbaa !2428
  store i64 %262, i64* %260, align 8, !tbaa !2428
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 1
  store i64 %266, i64* %PC
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = inttoptr i64 %269 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %267, align 8, !tbaa !2428
  %272 = add i64 %269, 8
  store i64 %272, i64* %268, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405894:                                     ; preds = %block_4058f8, %block_405870
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_405870 ], [ %MEMORY.2, %block_4058f8 ]
  %273 = load i64, i64* %RBP
  %274 = sub i64 %273, 24
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %274 to i64*
  %278 = load i64, i64* %277
  store i64 %278, i64* %RAX, align 8, !tbaa !2428
  %279 = load i64, i64* %RAX
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 16
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 4
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to i64*
  %285 = load i64, i64* %284
  %286 = sub i64 %279, %285
  %287 = icmp ugt i64 %285, %279
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %288, i8* %289, align 1, !tbaa !2433
  %290 = trunc i64 %286 to i32
  %291 = and i32 %290, 255
  %292 = call i32 @llvm.ctpop.i32(i32 %291) #16
  %293 = trunc i32 %292 to i8
  %294 = and i8 %293, 1
  %295 = xor i8 %294, 1
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %295, i8* %296, align 1, !tbaa !2447
  %297 = xor i64 %285, %279
  %298 = xor i64 %297, %286
  %299 = lshr i64 %298, 4
  %300 = trunc i64 %299 to i8
  %301 = and i8 %300, 1
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %301, i8* %302, align 1, !tbaa !2448
  %303 = icmp eq i64 %286, 0
  %304 = zext i1 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %304, i8* %305, align 1, !tbaa !2449
  %306 = lshr i64 %286, 63
  %307 = trunc i64 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %307, i8* %308, align 1, !tbaa !2450
  %309 = lshr i64 %279, 63
  %310 = lshr i64 %285, 63
  %311 = xor i64 %310, %309
  %312 = xor i64 %306, %309
  %313 = add nuw nsw i64 %312, %311
  %314 = icmp eq i64 %313, 2
  %315 = zext i1 %314 to i8
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %315, i8* %316, align 1, !tbaa !2451
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 156
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 6
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 6
  store i64 %322, i64* %PC
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %324 = load i8, i8* %323, align 1, !tbaa !2449
  store i8 %324, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %326 = icmp ne i8 %324, 0
  %327 = select i1 %326, i64 %318, i64 %320
  store i64 %327, i64* %325, align 8, !tbaa !2428
  %328 = load i8, i8* %BRANCH_TAKEN
  %329 = icmp eq i8 %328, 1
  br i1 %329, label %block_405938, label %block_4058a2

block_4058d2:                                     ; preds = %block_4058bd
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 32
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 4
  store i64 %333, i64* %PC
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 48
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 4
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i64*
  %339 = load i64, i64* %338
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = load i64, i64* %RAX
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 4
  store i64 %342, i64* %PC
  %343 = add i64 -8, %340
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = icmp ult i64 %343, %340
  %345 = icmp ult i64 %343, -8
  %346 = or i1 %344, %345
  %347 = zext i1 %346 to i8
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %347, i8* %348, align 1, !tbaa !2433
  %349 = trunc i64 %343 to i32
  %350 = and i32 %349, 255
  %351 = call i32 @llvm.ctpop.i32(i32 %350) #16
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %354, i8* %355, align 1, !tbaa !2447
  %356 = xor i64 -8, %340
  %357 = xor i64 %356, %343
  %358 = lshr i64 %357, 4
  %359 = trunc i64 %358 to i8
  %360 = and i8 %359, 1
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %360, i8* %361, align 1, !tbaa !2448
  %362 = icmp eq i64 %343, 0
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %363, i8* %364, align 1, !tbaa !2449
  %365 = lshr i64 %343, 63
  %366 = trunc i64 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %366, i8* %367, align 1, !tbaa !2450
  %368 = lshr i64 %340, 63
  %369 = xor i64 %365, %368
  %370 = xor i64 %365, 1
  %371 = add nuw nsw i64 %369, %370
  %372 = icmp eq i64 %371, 2
  %373 = zext i1 %372 to i8
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %373, i8* %374, align 1, !tbaa !2451
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 48
  %377 = load i64, i64* %RAX
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %376 to i64*
  store i64 %377, i64* %380
  %381 = load i64, i64* %RAX
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 3
  store i64 %383, i64* %PC
  store i64 %381, i64* %RSI, align 8, !tbaa !2428
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 10309
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 5
  store i64 %389, i64* %PC
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %391 = load i64, i64* %390, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %387, i64* %393
  store i64 %392, i64* %390, align 8, !tbaa !2428
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %394, align 8, !tbaa !2428
  %395 = load i64, i64* %PC
  %396 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %395, %struct.Memory* %MEMORY.1)
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 49
  %399 = load i8, i8* %AL
  %400 = zext i8 %399 to i64
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 3
  store i64 %402, i64* %PC
  %403 = inttoptr i64 %398 to i8*
  store i8 %399, i8* %403
  br label %block_4058ed

block_4058bd:                                     ; preds = %block_4058a2, %block_4058fd
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4058a2 ], [ %MEMORY.2, %block_4058fd ]
  %404 = load i64, i64* %RAX
  %405 = load i32, i32* %EAX
  %406 = zext i32 %405 to i64
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 2
  store i64 %408, i64* %PC
  %409 = xor i64 %406, %404
  %410 = trunc i64 %409 to i32
  %411 = and i64 %409, 4294967295
  store i64 %411, i64* %RAX, align 8, !tbaa !2428
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %412, align 1, !tbaa !2433
  %413 = and i32 %410, 255
  %414 = call i32 @llvm.ctpop.i32(i32 %413) #16
  %415 = trunc i32 %414 to i8
  %416 = and i8 %415, 1
  %417 = xor i8 %416, 1
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %417, i8* %418, align 1, !tbaa !2447
  %419 = icmp eq i32 %410, 0
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %420, i8* %421, align 1, !tbaa !2449
  %422 = lshr i32 %410, 31
  %423 = trunc i32 %422 to i8
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %423, i8* %424, align 1, !tbaa !2450
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %425, align 1, !tbaa !2451
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %426, align 1, !tbaa !2448
  %427 = load i8, i8* %AL
  %428 = zext i8 %427 to i64
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 2
  store i64 %430, i64* %PC
  store i8 %427, i8* %CL, align 1, !tbaa !2432
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 40
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 4
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %432 to i64*
  %436 = load i64, i64* %435
  store i64 %436, i64* %RDX, align 8, !tbaa !2428
  %437 = load i64, i64* %RDX
  %438 = load i64, i64* %RBP
  %439 = sub i64 %438, 8
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 4
  store i64 %441, i64* %PC
  %442 = inttoptr i64 %439 to i64*
  %443 = load i64, i64* %442
  %444 = sub i64 %437, %443
  %445 = icmp ugt i64 %443, %437
  %446 = zext i1 %445 to i8
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %446, i8* %447, align 1, !tbaa !2433
  %448 = trunc i64 %444 to i32
  %449 = and i32 %448, 255
  %450 = call i32 @llvm.ctpop.i32(i32 %449) #16
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = xor i8 %452, 1
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %453, i8* %454, align 1, !tbaa !2447
  %455 = xor i64 %443, %437
  %456 = xor i64 %455, %444
  %457 = lshr i64 %456, 4
  %458 = trunc i64 %457 to i8
  %459 = and i8 %458, 1
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %459, i8* %460, align 1, !tbaa !2448
  %461 = icmp eq i64 %444, 0
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %462, i8* %463, align 1, !tbaa !2449
  %464 = lshr i64 %444, 63
  %465 = trunc i64 %464 to i8
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %465, i8* %466, align 1, !tbaa !2450
  %467 = lshr i64 %437, 63
  %468 = lshr i64 %443, 63
  %469 = xor i64 %468, %467
  %470 = xor i64 %464, %467
  %471 = add nuw nsw i64 %470, %469
  %472 = icmp eq i64 %471, 2
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %473, i8* %474, align 1, !tbaa !2451
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 49
  %477 = load i8, i8* %CL
  %478 = zext i8 %477 to i64
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 3
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %476 to i8*
  store i8 %477, i8* %481
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 33
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 6
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 6
  store i64 %487, i64* %PC
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %489 = load i8, i8* %488, align 1, !tbaa !2449
  store i8 %489, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %491 = icmp ne i8 %489, 0
  %492 = select i1 %491, i64 %483, i64 %485
  store i64 %492, i64* %490, align 8, !tbaa !2428
  %493 = load i8, i8* %BRANCH_TAKEN
  %494 = icmp eq i8 %493, 1
  br i1 %494, label %block_4058ed, label %block_4058d2

block_4058f8:                                     ; preds = %block_4058ed
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 36
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 5
  store i64 %498, i64* %PC
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %496, i64* %499, align 8, !tbaa !2428
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 40
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %RAX, align 8, !tbaa !2428
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 32
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i64*
  %511 = load i64, i64* %510
  store i64 %511, i64* %RCX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = load i64, i64* %RCX
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 3
  store i64 %515, i64* %PC
  %516 = inttoptr i64 %512 to i64*
  store i64 %513, i64* %516
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 24
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 4
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %518 to i64*
  %522 = load i64, i64* %521
  store i64 %522, i64* %RAX, align 8, !tbaa !2428
  %523 = load i64, i64* %RAX
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 4
  store i64 %525, i64* %PC
  %526 = add i64 8, %523
  store i64 %526, i64* %RAX, align 8, !tbaa !2428
  %527 = icmp ult i64 %526, %523
  %528 = icmp ult i64 %526, 8
  %529 = or i1 %527, %528
  %530 = zext i1 %529 to i8
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %530, i8* %531, align 1, !tbaa !2433
  %532 = trunc i64 %526 to i32
  %533 = and i32 %532, 255
  %534 = call i32 @llvm.ctpop.i32(i32 %533) #16
  %535 = trunc i32 %534 to i8
  %536 = and i8 %535, 1
  %537 = xor i8 %536, 1
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %537, i8* %538, align 1, !tbaa !2447
  %539 = xor i64 8, %523
  %540 = xor i64 %539, %526
  %541 = lshr i64 %540, 4
  %542 = trunc i64 %541 to i8
  %543 = and i8 %542, 1
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %543, i8* %544, align 1, !tbaa !2448
  %545 = icmp eq i64 %526, 0
  %546 = zext i1 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %546, i8* %547, align 1, !tbaa !2449
  %548 = lshr i64 %526, 63
  %549 = trunc i64 %548 to i8
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %549, i8* %550, align 1, !tbaa !2450
  %551 = lshr i64 %523, 63
  %552 = xor i64 %548, %551
  %553 = add nuw nsw i64 %552, %548
  %554 = icmp eq i64 %553, 2
  %555 = zext i1 %554 to i8
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %555, i8* %556, align 1, !tbaa !2451
  %557 = load i64, i64* %RBP
  %558 = sub i64 %557, 24
  %559 = load i64, i64* %RAX
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 4
  store i64 %561, i64* %PC
  %562 = inttoptr i64 %558 to i64*
  store i64 %559, i64* %562
  %563 = load i64, i64* %PC
  %564 = sub i64 %563, 159
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 5
  store i64 %566, i64* %PC
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %564, i64* %567, align 8, !tbaa !2428
  br label %block_405894

block_4058ed:                                     ; preds = %block_4058bd, %block_4058d2
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4058bd ], [ %396, %block_4058d2 ]
  %568 = load i64, i64* %RBP
  %569 = sub i64 %568, 49
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 3
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i8*
  %573 = load i8, i8* %572
  store i8 %573, i8* %AL, align 1, !tbaa !2432
  %574 = load i8, i8* %AL
  %575 = zext i8 %574 to i64
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 2
  store i64 %577, i64* %PC
  %578 = and i64 1, %575
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %580, align 1, !tbaa !2433
  %581 = trunc i64 %578 to i32
  %582 = and i32 %581, 255
  %583 = call i32 @llvm.ctpop.i32(i32 %582) #16
  %584 = trunc i32 %583 to i8
  %585 = and i8 %584, 1
  %586 = xor i8 %585, 1
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %586, i8* %587, align 1, !tbaa !2447
  %588 = icmp eq i8 %579, 0
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %589, i8* %590, align 1, !tbaa !2449
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %591, align 1, !tbaa !2450
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %592, align 1, !tbaa !2451
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %593, align 1, !tbaa !2448
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 11
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 6
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 6
  store i64 %599, i64* %PC
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %601 = load i8, i8* %600, align 1, !tbaa !2449
  %602 = icmp eq i8 %601, 0
  %603 = zext i1 %602 to i8
  store i8 %603, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %605 = select i1 %602, i64 %595, i64 %597
  store i64 %605, i64* %604, align 8, !tbaa !2428
  %606 = load i8, i8* %BRANCH_TAKEN
  %607 = icmp eq i8 %606, 1
  br i1 %607, label %block_4058fd, label %block_4058f8

block_4058a2:                                     ; preds = %block_405894
  %608 = load i64, i64* %RBP
  %609 = sub i64 %608, 24
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC
  %612 = inttoptr i64 %609 to i64*
  %613 = load i64, i64* %612
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = load i64, i64* %RAX
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 3
  store i64 %616, i64* %PC
  %617 = inttoptr i64 %614 to i64*
  %618 = load i64, i64* %617
  store i64 %618, i64* %RAX, align 8, !tbaa !2428
  %619 = load i64, i64* %RBP
  %620 = sub i64 %619, 32
  %621 = load i64, i64* %RAX
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 4
  store i64 %623, i64* %PC
  %624 = inttoptr i64 %620 to i64*
  store i64 %621, i64* %624
  %625 = load i64, i64* %RBP
  %626 = sub i64 %625, 24
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 4
  store i64 %628, i64* %PC
  %629 = inttoptr i64 %626 to i64*
  %630 = load i64, i64* %629
  store i64 %630, i64* %RAX, align 8, !tbaa !2428
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 40
  %633 = load i64, i64* %RAX
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %632 to i64*
  store i64 %633, i64* %636
  %637 = load i64, i64* %RBP
  %638 = sub i64 %637, 40
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 4
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %638 to i64*
  %642 = load i64, i64* %641
  store i64 %642, i64* %RAX, align 8, !tbaa !2428
  %643 = load i64, i64* %RBP
  %644 = sub i64 %643, 48
  %645 = load i64, i64* %RAX
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 4
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %644 to i64*
  store i64 %645, i64* %648
  br label %block_4058bd
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b40__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402b40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402b68

block_402be9:                                     ; preds = %block_402b68
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402b78:                                     ; preds = %block_402b68
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3540
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 3639
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_4039f0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 3946
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_402b68

block_402b68:                                     ; preds = %block_402b78, %block_402b40
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402b40 ], [ %333, %block_402b78 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_402be9, label %block_402b78
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405130:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 7
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %EDX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = load i64, i64* %RBP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC
  store i64 %44, i64* %RBP, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = sub i64 %47, 96
  store i64 %50, i64* %RSP, align 8, !tbaa !2428
  %51 = icmp ult i64 %47, 96
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %50 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 96, %47
  %62 = xor i64 %61, %50
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %50, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %50, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %47, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2451
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 8
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  store i64 %84, i64* %RCX, align 8, !tbaa !2428
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RDI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  store i64 %99, i64* %RDI, align 8, !tbaa !2428
  %102 = load i64, i64* %RCX
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %105 = load i64, i64* %PC
  %106 = sub i64 %105, 5182
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 5
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 5
  store i64 %110, i64* %PC
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %112 = load i64, i64* %111, align 8, !tbaa !2428
  %113 = add i64 %112, -8
  %114 = inttoptr i64 %113 to i64*
  store i64 %108, i64* %114
  store i64 %113, i64* %111, align 8, !tbaa !2428
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %106, i64* %115, align 8, !tbaa !2428
  %116 = load i64, i64* %PC
  %117 = call %struct.Memory* @sub_403d10__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* %0, i64 %116, %struct.Memory* %2)
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = sub i64 %118, 1
  %122 = icmp ult i64 %118, 1
  %123 = zext i1 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %123, i8* %124, align 1, !tbaa !2433
  %125 = trunc i64 %121 to i32
  %126 = and i32 %125, 255
  %127 = call i32 @llvm.ctpop.i32(i32 %126) #16
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %130, i8* %131, align 1, !tbaa !2447
  %132 = xor i64 1, %118
  %133 = xor i64 %132, %121
  %134 = lshr i64 %133, 4
  %135 = trunc i64 %134 to i8
  %136 = and i8 %135, 1
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %136, i8* %137, align 1, !tbaa !2448
  %138 = icmp eq i64 %121, 0
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %139, i8* %140, align 1, !tbaa !2449
  %141 = lshr i64 %121, 63
  %142 = trunc i64 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = lshr i64 %118, 63
  %145 = xor i64 %141, %144
  %146 = add nuw nsw i64 %145, %144
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %148, i8* %149, align 1, !tbaa !2451
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 350
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 6
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = load i8, i8* %156, align 1, !tbaa !2449
  %158 = icmp ne i8 %157, 0
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %160 = load i8, i8* %159, align 1, !tbaa !2450
  %161 = icmp ne i8 %160, 0
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %163 = load i8, i8* %162, align 1, !tbaa !2451
  %164 = icmp ne i8 %163, 0
  %165 = xor i1 %161, %164
  %166 = or i1 %158, %165
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %169 = select i1 %166, i64 %151, i64 %153
  store i64 %169, i64* %168, align 8, !tbaa !2428
  %170 = load i8, i8* %BRANCH_TAKEN
  %171 = icmp eq i8 %170, 1
  br i1 %171, label %block_4052b5, label %block_40515d

block_40517d:                                     ; preds = %block_40521e, %block_40515d
  %MEMORY.0 = phi %struct.Memory* [ %341, %block_40515d ], [ %537, %block_40521e ]
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 5
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 5
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %173, i64* %176, align 8, !tbaa !2428
  br label %block_405182

block_4052b5:                                     ; preds = %block_405263, %block_405130
  %MEMORY.1 = phi %struct.Memory* [ %117, %block_405130 ], [ %764, %block_405263 ]
  %177 = load i64, i64* %RSP
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = add i64 96, %177
  store i64 %180, i64* %RSP, align 8, !tbaa !2428
  %181 = icmp ult i64 %180, %177
  %182 = icmp ult i64 %180, 96
  %183 = or i1 %181, %182
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %184, i8* %185, align 1, !tbaa !2433
  %186 = trunc i64 %180 to i32
  %187 = and i32 %186, 255
  %188 = call i32 @llvm.ctpop.i32(i32 %187) #16
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %191, i8* %192, align 1, !tbaa !2447
  %193 = xor i64 96, %177
  %194 = xor i64 %193, %180
  %195 = lshr i64 %194, 4
  %196 = trunc i64 %195 to i8
  %197 = and i8 %196, 1
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %197, i8* %198, align 1, !tbaa !2448
  %199 = icmp eq i64 %180, 0
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %200, i8* %201, align 1, !tbaa !2449
  %202 = lshr i64 %180, 63
  %203 = trunc i64 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %203, i8* %204, align 1, !tbaa !2450
  %205 = lshr i64 %177, 63
  %206 = xor i64 %202, %205
  %207 = add nuw nsw i64 %206, %202
  %208 = icmp eq i64 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2451
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 1
  store i64 %212, i64* %PC
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %214 = load i64, i64* %213, align 8, !tbaa !2428
  %215 = add i64 %214, 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216
  store i64 %217, i64* %RBP, align 8, !tbaa !2428
  store i64 %215, i64* %213, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 1
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = inttoptr i64 %222 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %220, align 8, !tbaa !2428
  %225 = add i64 %222, 8
  store i64 %225, i64* %221, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4051f2:                                     ; preds = %block_4051d0
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 32
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  store i64 %227, i64* %RDI, align 8, !tbaa !2428
  %230 = load i64, i64* %PC
  %231 = sub i64 %230, 5382
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 5
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %237 = load i64, i64* %236, align 8, !tbaa !2428
  %238 = add i64 %237, -8
  %239 = inttoptr i64 %238 to i64*
  store i64 %233, i64* %239
  store i64 %238, i64* %236, align 8, !tbaa !2428
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %231, i64* %240, align 8, !tbaa !2428
  %241 = load i64, i64* %PC
  %242 = call %struct.Memory* @sub_403cf0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %241, %struct.Memory* %290)
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 88
  %245 = load i64, i64* %RAX
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC
  %248 = inttoptr i64 %244 to i64*
  store i64 %245, i64* %248
  %249 = load i64, i64* %PC
  %250 = sub i64 %249, 47
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 5
  store i64 %252, i64* %PC
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %250, i64* %253, align 8, !tbaa !2428
  br label %block_4051d0

block_4051d0:                                     ; preds = %block_4051cb, %block_4051f2
  %MEMORY.2 = phi %struct.Memory* [ %587, %block_4051cb ], [ %242, %block_4051f2 ]
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 32
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  store i64 %255, i64* %RDI, align 8, !tbaa !2428
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 5380
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %265 = load i64, i64* %264, align 8, !tbaa !2428
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %261, i64* %267
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %268, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.2)
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 24
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  store i64 %272, i64* %RSI, align 8, !tbaa !2428
  %275 = load i64, i64* %RAX
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 3
  store i64 %277, i64* %PC
  store i64 %275, i64* %RDI, align 8, !tbaa !2428
  %278 = load i64, i64* %PC
  %279 = sub i64 %278, 8080
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 5
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 5
  store i64 %283, i64* %PC
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %285 = load i64, i64* %284, align 8, !tbaa !2428
  %286 = add i64 %285, -8
  %287 = inttoptr i64 %286 to i64*
  store i64 %281, i64* %287
  store i64 %286, i64* %284, align 8, !tbaa !2428
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %279, i64* %288, align 8, !tbaa !2428
  %289 = load i64, i64* %PC
  %290 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %289, %struct.Memory* %270)
  %291 = load i8, i8* %AL
  %292 = zext i8 %291 to i64
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 2
  store i64 %294, i64* %PC
  %295 = and i64 1, %292
  %296 = trunc i64 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %297, align 1, !tbaa !2433
  %298 = trunc i64 %295 to i32
  %299 = and i32 %298, 255
  %300 = call i32 @llvm.ctpop.i32(i32 %299) #16
  %301 = trunc i32 %300 to i8
  %302 = and i8 %301, 1
  %303 = xor i8 %302, 1
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %303, i8* %304, align 1, !tbaa !2447
  %305 = icmp eq i8 %296, 0
  %306 = zext i1 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %306, i8* %307, align 1, !tbaa !2449
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %308, align 1, !tbaa !2450
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %309, align 1, !tbaa !2451
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %310, align 1, !tbaa !2448
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 11
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 6
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 6
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %318 = load i8, i8* %317, align 1, !tbaa !2449
  %319 = icmp eq i8 %318, 0
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %322 = select i1 %319, i64 %312, i64 %314
  store i64 %322, i64* %321, align 8, !tbaa !2428
  %323 = load i8, i8* %BRANCH_TAKEN
  %324 = icmp eq i8 %323, 1
  br i1 %324, label %block_4051f2, label %block_4051ed

block_40515d:                                     ; preds = %block_405130
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 8
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  store i64 %326, i64* %RDI, align 8, !tbaa !2428
  %329 = load i64, i64* %PC
  %330 = sub i64 %329, 5265
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 5
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  store i64 %334, i64* %PC
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %336 = load i64, i64* %335, align 8, !tbaa !2428
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %332, i64* %338
  store i64 %337, i64* %335, align 8, !tbaa !2428
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %330, i64* %339, align 8, !tbaa !2428
  %340 = load i64, i64* %PC
  %341 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %340, %struct.Memory* %117)
  %342 = load i64, i64* %RAX
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %342 to i64*
  %346 = load i64, i64* %345
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 24
  %349 = load i64, i64* %RAX
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %348 to i64*
  store i64 %349, i64* %352
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 8
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC
  %357 = inttoptr i64 %354 to i64*
  %358 = load i64, i64* %357
  store i64 %358, i64* %RAX, align 8, !tbaa !2428
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 32
  %361 = load i64, i64* %RAX
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %360 to i64*
  store i64 %361, i64* %364
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 16
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i64*
  %370 = load i64, i64* %369
  store i64 %370, i64* %RAX, align 8, !tbaa !2428
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 40
  %373 = load i64, i64* %RAX
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %372 to i64*
  store i64 %373, i64* %376
  br label %block_40517d

block_4051ed:                                     ; preds = %block_4051d0
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 23
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  store i64 %380, i64* %PC
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %378, i64* %381, align 8, !tbaa !2428
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 32
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  store i64 %383, i64* %RDI, align 8, !tbaa !2428
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 40
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  store i64 %387, i64* %RSI, align 8, !tbaa !2428
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 212
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 5
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 5
  store i64 %395, i64* %PC
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %397 = load i64, i64* %396, align 8, !tbaa !2428
  %398 = add i64 %397, -8
  %399 = inttoptr i64 %398 to i64*
  store i64 %393, i64* %399
  store i64 %398, i64* %396, align 8, !tbaa !2428
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %391, i64* %400, align 8, !tbaa !2428
  %401 = load i64, i64* %PC
  %402 = call %struct.Memory* @sub_4052e0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %401, %struct.Memory* %290)
  %403 = load i8, i8* %AL
  %404 = zext i8 %403 to i64
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 2
  store i64 %406, i64* %PC
  %407 = and i64 1, %404
  %408 = trunc i64 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %409, align 1, !tbaa !2433
  %410 = trunc i64 %407 to i32
  %411 = and i32 %410, 255
  %412 = call i32 @llvm.ctpop.i32(i32 %411) #16
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = xor i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %415, i8* %416, align 1, !tbaa !2447
  %417 = icmp eq i8 %408, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %420, align 1, !tbaa !2450
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %421, align 1, !tbaa !2451
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %422, align 1, !tbaa !2448
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 11
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 6
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 6
  store i64 %428, i64* %PC
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %430 = load i8, i8* %429, align 1, !tbaa !2449
  %431 = icmp eq i8 %430, 0
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %434 = select i1 %431, i64 %424, i64 %426
  store i64 %434, i64* %433, align 8, !tbaa !2428
  %435 = load i8, i8* %BRANCH_TAKEN
  %436 = icmp eq i8 %435, 1
  br i1 %436, label %block_40521e, label %block_405219

block_40521e:                                     ; preds = %block_4051ed
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 40
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 4
  store i64 %440, i64* %PC
  store i64 %438, i64* %RDI, align 8, !tbaa !2428
  %441 = load i64, i64* %PC
  %442 = sub i64 %441, 5458
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 5
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 5
  store i64 %446, i64* %PC
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %448 = load i64, i64* %447, align 8, !tbaa !2428
  %449 = add i64 %448, -8
  %450 = inttoptr i64 %449 to i64*
  store i64 %444, i64* %450
  store i64 %449, i64* %447, align 8, !tbaa !2428
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %442, i64* %451, align 8, !tbaa !2428
  %452 = load i64, i64* %PC
  %453 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %452, %struct.Memory* %402)
  %454 = load i64, i64* %RBP
  %455 = sub i64 %454, 32
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  store i64 %455, i64* %RDI, align 8, !tbaa !2428
  %458 = load i64, i64* %RAX
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 3
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 48
  %465 = load i64, i64* %RAX
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %464 to i64*
  store i64 %465, i64* %468
  %469 = load i64, i64* %PC
  %470 = sub i64 %469, 5474
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 5
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 5
  store i64 %474, i64* %PC
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %476 = load i64, i64* %475, align 8, !tbaa !2428
  %477 = add i64 %476, -8
  %478 = inttoptr i64 %477 to i64*
  store i64 %472, i64* %478
  store i64 %477, i64* %475, align 8, !tbaa !2428
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %470, i64* %479, align 8, !tbaa !2428
  %480 = load i64, i64* %PC
  %481 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %480, %struct.Memory* %453)
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 40
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  store i64 %483, i64* %RDI, align 8, !tbaa !2428
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 96
  %488 = load i64, i64* %RAX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %487 to i64*
  store i64 %488, i64* %491
  %492 = load i64, i64* %PC
  %493 = sub i64 %492, 5487
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 5
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 5
  store i64 %497, i64* %PC
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %499 = load i64, i64* %498, align 8, !tbaa !2428
  %500 = add i64 %499, -8
  %501 = inttoptr i64 %500 to i64*
  store i64 %495, i64* %501
  store i64 %500, i64* %498, align 8, !tbaa !2428
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %493, i64* %502, align 8, !tbaa !2428
  %503 = load i64, i64* %PC
  %504 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %503, %struct.Memory* %481)
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 32
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 4
  store i64 %508, i64* %PC
  store i64 %506, i64* %RDI, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 96
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i64*
  %514 = load i64, i64* %513
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %515 = load i64, i64* %RCX
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 3
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %RDX, align 8, !tbaa !2428
  %520 = load i64, i64* %RAX
  %521 = load i64, i64* %RDX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 3
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 5506
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 5
  store i64 %530, i64* %PC
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %532 = load i64, i64* %531, align 8, !tbaa !2428
  %533 = add i64 %532, -8
  %534 = inttoptr i64 %533 to i64*
  store i64 %528, i64* %534
  store i64 %533, i64* %531, align 8, !tbaa !2428
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %535, align 8, !tbaa !2428
  %536 = load i64, i64* %PC
  %537 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %536, %struct.Memory* %504)
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 48
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i64*
  %543 = load i64, i64* %542
  store i64 %543, i64* %RCX, align 8, !tbaa !2428
  %544 = load i64, i64* %RAX
  %545 = load i64, i64* %RCX
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %544 to i64*
  store i64 %545, i64* %548
  %549 = load i64, i64* %PC
  %550 = sub i64 %549, 225
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 5
  store i64 %552, i64* %PC
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %550, i64* %553, align 8, !tbaa !2428
  br label %block_40517d

block_4051ac:                                     ; preds = %block_405182
  %554 = sub i64 %852, 42
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 5
  store i64 %556, i64* %PC
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %554, i64* %557, align 8, !tbaa !2428
  br label %block_405182

block_405219:                                     ; preds = %block_4051ed
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 74
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 5
  store i64 %561, i64* %PC
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %559, i64* %562, align 8, !tbaa !2428
  br label %block_405263

block_4051a7:                                     ; preds = %block_405182
  %563 = add i64 %852, 10
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %563, i64* %566, align 8, !tbaa !2428
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 32
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 4
  store i64 %570, i64* %PC
  store i64 %568, i64* %RDI, align 8, !tbaa !2428
  %571 = load i64, i64* %RBP
  %572 = sub i64 %571, 40
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 4
  store i64 %574, i64* %PC
  store i64 %572, i64* %RSI, align 8, !tbaa !2428
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 295
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 5
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  store i64 %580, i64* %PC
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %582 = load i64, i64* %581, align 8, !tbaa !2428
  %583 = add i64 %582, -8
  %584 = inttoptr i64 %583 to i64*
  store i64 %578, i64* %584
  store i64 %583, i64* %581, align 8, !tbaa !2428
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %576, i64* %585, align 8, !tbaa !2428
  %586 = load i64, i64* %PC
  %587 = call %struct.Memory* @sub_4052e0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %586, %struct.Memory* %817)
  %588 = load i8, i8* %AL
  %589 = zext i8 %588 to i64
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 2
  store i64 %591, i64* %PC
  %592 = and i64 1, %589
  %593 = trunc i64 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %594, align 1, !tbaa !2433
  %595 = trunc i64 %592 to i32
  %596 = and i32 %595, 255
  %597 = call i32 @llvm.ctpop.i32(i32 %596) #16
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  %600 = xor i8 %599, 1
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %600, i8* %601, align 1, !tbaa !2447
  %602 = icmp eq i8 %593, 0
  %603 = zext i1 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %603, i8* %604, align 1, !tbaa !2449
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %605, align 1, !tbaa !2450
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %606, align 1, !tbaa !2451
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %607, align 1, !tbaa !2448
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 11
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 6
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 6
  store i64 %613, i64* %PC
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %615 = load i8, i8* %614, align 1, !tbaa !2449
  %616 = icmp eq i8 %615, 0
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %619 = select i1 %616, i64 %609, i64 %611
  store i64 %619, i64* %618, align 8, !tbaa !2428
  %620 = load i8, i8* %BRANCH_TAKEN
  %621 = icmp eq i8 %620, 1
  %622 = load i64, i64* %PC
  br i1 %621, label %block_4051cb, label %block_4051c6

block_4051c6:                                     ; preds = %block_4051a7
  %623 = add i64 %622, 157
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 5
  store i64 %625, i64* %PC
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %623, i64* %626, align 8, !tbaa !2428
  br label %block_405263

block_4051cb:                                     ; preds = %block_4051a7
  %627 = add i64 %622, 5
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 5
  store i64 %629, i64* %PC
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %627, i64* %630, align 8, !tbaa !2428
  br label %block_4051d0

block_405263:                                     ; preds = %block_4051c6, %block_405219
  %MEMORY.3 = phi %struct.Memory* [ %402, %block_405219 ], [ %587, %block_4051c6 ]
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 40
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC
  store i64 %632, i64* %RDI, align 8, !tbaa !2428
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 5
  store i64 %636, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %637 = load i32, i32* %EAX
  %638 = zext i32 %637 to i64
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 2
  store i64 %640, i64* %PC
  %641 = and i64 %638, 4294967295
  store i64 %641, i64* %RSI, align 8, !tbaa !2428
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RCX, align 8, !tbaa !2428
  %648 = load i64, i64* %RBP
  %649 = sub i64 %648, 56
  %650 = load i64, i64* %RCX
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 4
  store i64 %652, i64* %PC
  %653 = inttoptr i64 %649 to i64*
  store i64 %650, i64* %653
  %654 = load i64, i64* %PC
  %655 = sub i64 %654, 5430
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 5
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 5
  store i64 %659, i64* %PC
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %661 = load i64, i64* %660, align 8, !tbaa !2428
  %662 = add i64 %661, -8
  %663 = inttoptr i64 %662 to i64*
  store i64 %657, i64* %663
  store i64 %662, i64* %660, align 8, !tbaa !2428
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %655, i64* %664, align 8, !tbaa !2428
  %665 = load i64, i64* %PC
  %666 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %665, %struct.Memory* %MEMORY.3)
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 64
  %669 = load i64, i64* %RAX
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 4
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %668 to i64*
  store i64 %669, i64* %672
  %673 = load i64, i64* %RBP
  %674 = sub i64 %673, 56
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 4
  store i64 %676, i64* %PC
  %677 = inttoptr i64 %674 to i64*
  %678 = load i64, i64* %677
  store i64 %678, i64* %RDI, align 8, !tbaa !2428
  %679 = load i64, i64* %RBP
  %680 = sub i64 %679, 64
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC
  %683 = inttoptr i64 %680 to i64*
  %684 = load i64, i64* %683
  store i64 %684, i64* %RSI, align 8, !tbaa !2428
  %685 = load i64, i64* %PC
  %686 = sub i64 %685, 343
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 5
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 5
  store i64 %690, i64* %PC
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %692 = load i64, i64* %691, align 8, !tbaa !2428
  %693 = add i64 %692, -8
  %694 = inttoptr i64 %693 to i64*
  store i64 %688, i64* %694
  store i64 %693, i64* %691, align 8, !tbaa !2428
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %686, i64* %695, align 8, !tbaa !2428
  %696 = load i64, i64* %PC
  %697 = call %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %696, %struct.Memory* %666)
  %698 = load i64, i64* %RBP
  %699 = sub i64 %698, 40
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC
  store i64 %699, i64* %RDI, align 8, !tbaa !2428
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 5
  store i64 %703, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %704 = load i32, i32* %EDX
  %705 = zext i32 %704 to i64
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 2
  store i64 %707, i64* %PC
  %708 = and i64 %705, 4294967295
  store i64 %708, i64* %RSI, align 8, !tbaa !2428
  %709 = load i64, i64* %PC
  %710 = sub i64 %709, 5463
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 5
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 5
  store i64 %714, i64* %PC
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %716 = load i64, i64* %715, align 8, !tbaa !2428
  %717 = add i64 %716, -8
  %718 = inttoptr i64 %717 to i64*
  store i64 %712, i64* %718
  store i64 %717, i64* %715, align 8, !tbaa !2428
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %710, i64* %719, align 8, !tbaa !2428
  %720 = load i64, i64* %PC
  %721 = call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %720, %struct.Memory* %697)
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 72
  %724 = load i64, i64* %RAX
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 4
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %723 to i64*
  store i64 %724, i64* %727
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 16
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 4
  store i64 %731, i64* %PC
  %732 = inttoptr i64 %729 to i64*
  %733 = load i64, i64* %732
  store i64 %733, i64* %RAX, align 8, !tbaa !2428
  %734 = load i64, i64* %RBP
  %735 = sub i64 %734, 80
  %736 = load i64, i64* %RAX
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 4
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %735 to i64*
  store i64 %736, i64* %739
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 72
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RDI, align 8, !tbaa !2428
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 80
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i64*
  %751 = load i64, i64* %750
  store i64 %751, i64* %RSI, align 8, !tbaa !2428
  %752 = load i64, i64* %PC
  %753 = sub i64 %752, 384
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 5
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  store i64 %757, i64* %PC
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %759 = load i64, i64* %758, align 8, !tbaa !2428
  %760 = add i64 %759, -8
  %761 = inttoptr i64 %760 to i64*
  store i64 %755, i64* %761
  store i64 %760, i64* %758, align 8, !tbaa !2428
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %762, align 8, !tbaa !2428
  %763 = load i64, i64* %PC
  %764 = call %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %763, %struct.Memory* %721)
  br label %block_4052b5

block_405182:                                     ; preds = %block_4051ac, %block_40517d
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_40517d ], [ %817, %block_4051ac ]
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 40
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  store i64 %766, i64* %RDI, align 8, !tbaa !2428
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 314
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 5
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 5
  store i64 %774, i64* %PC
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %776 = load i64, i64* %775, align 8, !tbaa !2428
  %777 = add i64 %776, -8
  %778 = inttoptr i64 %777 to i64*
  store i64 %772, i64* %778
  store i64 %777, i64* %775, align 8, !tbaa !2428
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %770, i64* %779, align 8, !tbaa !2428
  %780 = load i64, i64* %PC
  %781 = call %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %780, %struct.Memory* %MEMORY.4)
  %782 = load i64, i64* %RAX
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 3
  store i64 %784, i64* %PC
  store i64 %782, i64* %RDI, align 8, !tbaa !2428
  %785 = load i64, i64* %PC
  %786 = sub i64 %785, 5310
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 5
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 5
  store i64 %790, i64* %PC
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %792 = load i64, i64* %791, align 8, !tbaa !2428
  %793 = add i64 %792, -8
  %794 = inttoptr i64 %793 to i64*
  store i64 %788, i64* %794
  store i64 %793, i64* %791, align 8, !tbaa !2428
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %786, i64* %795, align 8, !tbaa !2428
  %796 = load i64, i64* %PC
  %797 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %796, %struct.Memory* %781)
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 24
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 4
  store i64 %801, i64* %PC
  store i64 %799, i64* %RDI, align 8, !tbaa !2428
  %802 = load i64, i64* %RAX
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 3
  store i64 %804, i64* %PC
  store i64 %802, i64* %RSI, align 8, !tbaa !2428
  %805 = load i64, i64* %PC
  %806 = sub i64 %805, 8010
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 5
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 5
  store i64 %810, i64* %PC
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %812 = load i64, i64* %811, align 8, !tbaa !2428
  %813 = add i64 %812, -8
  %814 = inttoptr i64 %813 to i64*
  store i64 %808, i64* %814
  store i64 %813, i64* %811, align 8, !tbaa !2428
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %806, i64* %815, align 8, !tbaa !2428
  %816 = load i64, i64* %PC
  %817 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %816, %struct.Memory* %797)
  %818 = load i8, i8* %AL
  %819 = zext i8 %818 to i64
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 2
  store i64 %821, i64* %PC
  %822 = and i64 1, %819
  %823 = trunc i64 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %824, align 1, !tbaa !2433
  %825 = trunc i64 %822 to i32
  %826 = and i32 %825, 255
  %827 = call i32 @llvm.ctpop.i32(i32 %826) #16
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %830, i8* %831, align 1, !tbaa !2447
  %832 = icmp eq i8 %823, 0
  %833 = zext i1 %832 to i8
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %833, i8* %834, align 1, !tbaa !2449
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %835, align 1, !tbaa !2450
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %836, align 1, !tbaa !2451
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %837, align 1, !tbaa !2448
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 11
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 6
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 6
  store i64 %843, i64* %PC
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %845 = load i8, i8* %844, align 1, !tbaa !2449
  %846 = icmp eq i8 %845, 0
  %847 = zext i1 %846 to i8
  store i8 %847, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %849 = select i1 %846, i64 %839, i64 %841
  store i64 %849, i64* %848, align 8, !tbaa !2428
  %850 = load i8, i8* %BRANCH_TAKEN
  %851 = icmp eq i8 %850, 1
  %852 = load i64, i64* %PC
  br i1 %851, label %block_4051ac, label %block_4051a7
}

; Function Attrs: noinline
define %struct.Memory* @sub_406070__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406070:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 72
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_4060d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 118
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_406110__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_406600__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406600:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_406630__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4043e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 9
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ESI = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 13
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSP = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 15
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RBP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %32 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %31, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %32 to %"class.std::bitset"*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 48
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 48
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 48, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  br label %block_4043f4

block_40440e:                                     ; preds = %block_4043f4
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 8
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  store i64 %96, i64* %RDI, align 8, !tbaa !2428
  %99 = load i64, i64* %RSI
  %100 = load i32, i32* %ESI
  %101 = zext i32 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 2
  store i64 %103, i64* %PC
  %104 = xor i64 %101, %99
  %105 = trunc i64 %104 to i32
  %106 = and i64 %104, 4294967295
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %107, align 1, !tbaa !2433
  %108 = and i32 %105, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %112, i8* %113, align 1, !tbaa !2447
  %114 = icmp eq i32 %105, 0
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = lshr i32 %105, 31
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %118, i8* %119, align 1, !tbaa !2450
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %120, align 1, !tbaa !2451
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %121, align 1, !tbaa !2448
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 684
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %129 = load i64, i64* %128, align 8, !tbaa !2428
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %125, i64* %131
  store i64 %130, i64* %128, align 8, !tbaa !2428
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %132, align 8, !tbaa !2428
  %133 = load i64, i64* %PC
  %134 = call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %133, %struct.Memory* %280)
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 32
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 32
  %141 = load i64, i64* %RAX
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 4
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %140 to i64*
  store i64 %141, i64* %144
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 783
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  store i64 %150, i64* %PC
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %152 = load i64, i64* %151, align 8, !tbaa !2428
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %148, i64* %154
  store i64 %153, i64* %151, align 8, !tbaa !2428
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %146, i64* %155, align 8, !tbaa !2428
  %156 = load i64, i64* %PC
  %157 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %156, %struct.Memory* %134)
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 24
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  store i64 %159, i64* %RDI, align 8, !tbaa !2428
  %162 = load i64, i64* %RSI
  %163 = load i32, i32* %ESI
  %164 = zext i32 %163 to i64
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 2
  store i64 %166, i64* %PC
  %167 = xor i64 %164, %162
  %168 = trunc i64 %167 to i32
  %169 = and i64 %167, 4294967295
  store i64 %169, i64* %RSI, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %170, align 1, !tbaa !2433
  %171 = and i32 %168, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2447
  %177 = icmp eq i32 %168, 0
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %178, i8* %179, align 1, !tbaa !2449
  %180 = lshr i32 %168, 31
  %181 = trunc i32 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %181, i8* %182, align 1, !tbaa !2450
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %184, align 1, !tbaa !2448
  %185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %186 = load i64, i64* %RAX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to double*
  %190 = load double, double* %189
  %191 = bitcast i8* %185 to double*
  store double %190, double* %191, align 1, !tbaa !2452
  %192 = getelementptr inbounds i8, i8* %185, i64 8
  %193 = bitcast i8* %192 to double*
  store double 0.000000e+00, double* %193, align 1, !tbaa !2452
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 48
  %196 = bitcast %union.vec128_t* %XMM0 to i8*
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  %199 = bitcast i8* %196 to double*
  %200 = load double, double* %199, align 1
  %201 = inttoptr i64 %195 to double*
  store double %200, double* %201
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 651
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 5
  store i64 %207, i64* %PC
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %209 = load i64, i64* %208, align 8, !tbaa !2428
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %205, i64* %211
  store i64 %210, i64* %208, align 8, !tbaa !2428
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %203, i64* %212, align 8, !tbaa !2428
  %213 = load i64, i64* %PC
  %214 = call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %213, %struct.Memory* %157)
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 40
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  store i64 %216, i64* %RDI, align 8, !tbaa !2428
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 40
  %221 = load i64, i64* %RAX
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 4
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %220 to i64*
  store i64 %221, i64* %224
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 750
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  store i64 %230, i64* %PC
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %232 = load i64, i64* %231, align 8, !tbaa !2428
  %233 = add i64 %232, -8
  %234 = inttoptr i64 %233 to i64*
  store i64 %228, i64* %234
  store i64 %233, i64* %231, align 8, !tbaa !2428
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %226, i64* %235, align 8, !tbaa !2428
  %236 = load i64, i64* %PC
  %237 = call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %236, %struct.Memory* %214)
  %238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 48
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %240 to double*
  %244 = load double, double* %243
  %245 = bitcast i8* %238 to double*
  store double %244, double* %245, align 1, !tbaa !2452
  %246 = getelementptr inbounds i8, i8* %238, i64 8
  %247 = bitcast i8* %246 to double*
  store double 0.000000e+00, double* %247, align 1, !tbaa !2452
  %248 = load i64, i64* %RAX
  %249 = bitcast %union.vec128_t* %XMM0 to i8*
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = bitcast i8* %249 to double*
  %253 = load double, double* %252, align 1
  %254 = inttoptr i64 %248 to double*
  store double %253, double* %254
  %255 = load i64, i64* %PC
  %256 = sub i64 %255, 92
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 5
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %256, i64* %259, align 8, !tbaa !2428
  br label %block_4043f4

block_4043f4:                                     ; preds = %block_40440e, %block_4043e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4043e0 ], [ %237, %block_40440e ]
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 8
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  store i64 %261, i64* %RDI, align 8, !tbaa !2428
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 16
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 4
  store i64 %267, i64* %PC
  store i64 %265, i64* %RSI, align 8, !tbaa !2428
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 772
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 5
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 5
  store i64 %273, i64* %PC
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %275 = load i64, i64* %274, align 8, !tbaa !2428
  %276 = add i64 %275, -8
  %277 = inttoptr i64 %276 to i64*
  store i64 %271, i64* %277
  store i64 %276, i64* %274, align 8, !tbaa !2428
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %269, i64* %278, align 8, !tbaa !2428
  %279 = load i64, i64* %PC
  %280 = call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %279, %struct.Memory* %MEMORY.0)
  %281 = load i8, i8* %AL
  %282 = zext i8 %281 to i64
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 2
  store i64 %284, i64* %PC
  %285 = and i64 1, %282
  %286 = trunc i64 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %287, align 1, !tbaa !2433
  %288 = trunc i64 %285 to i32
  %289 = and i32 %288, 255
  %290 = call i32 @llvm.ctpop.i32(i32 %289) #16
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %293, i8* %294, align 1, !tbaa !2447
  %295 = icmp eq i8 %286, 0
  %296 = zext i1 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %296, i8* %297, align 1, !tbaa !2449
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %298, align 1, !tbaa !2450
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %299, align 1, !tbaa !2451
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %300, align 1, !tbaa !2448
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 11
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 6
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 6
  store i64 %306, i64* %PC
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %308 = load i8, i8* %307, align 1, !tbaa !2449
  %309 = icmp eq i8 %308, 0
  %310 = zext i1 %309 to i8
  store i8 %310, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %312 = select i1 %309, i64 %302, i64 %304
  store i64 %312, i64* %311, align 8, !tbaa !2428
  %313 = load i8, i8* %BRANCH_TAKEN
  %314 = icmp eq i8 %313, 1
  br i1 %314, label %block_40440e, label %block_404409

block_404409:                                     ; preds = %block_4043f4
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 76
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 5
  store i64 %318, i64* %PC
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %316, i64* %319, align 8, !tbaa !2428
  %320 = load i64, i64* %RSP
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = add i64 48, %320
  store i64 %323, i64* %RSP, align 8, !tbaa !2428
  %324 = icmp ult i64 %323, %320
  %325 = icmp ult i64 %323, 48
  %326 = or i1 %324, %325
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %327, i8* %328, align 1, !tbaa !2433
  %329 = trunc i64 %323 to i32
  %330 = and i32 %329, 255
  %331 = call i32 @llvm.ctpop.i32(i32 %330) #16
  %332 = trunc i32 %331 to i8
  %333 = and i8 %332, 1
  %334 = xor i8 %333, 1
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %334, i8* %335, align 1, !tbaa !2447
  %336 = xor i64 48, %320
  %337 = xor i64 %336, %323
  %338 = lshr i64 %337, 4
  %339 = trunc i64 %338 to i8
  %340 = and i8 %339, 1
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %340, i8* %341, align 1, !tbaa !2448
  %342 = icmp eq i64 %323, 0
  %343 = zext i1 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %343, i8* %344, align 1, !tbaa !2449
  %345 = lshr i64 %323, 63
  %346 = trunc i64 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %346, i8* %347, align 1, !tbaa !2450
  %348 = lshr i64 %320, 63
  %349 = xor i64 %345, %348
  %350 = add nuw nsw i64 %349, %345
  %351 = icmp eq i64 %350, 2
  %352 = zext i1 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %352, i8* %353, align 1, !tbaa !2451
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 1
  store i64 %355, i64* %PC
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %357 = load i64, i64* %356, align 8, !tbaa !2428
  %358 = add i64 %357, 8
  %359 = inttoptr i64 %357 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %RBP, align 8, !tbaa !2428
  store i64 %358, i64* %356, align 8, !tbaa !2428
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 1
  store i64 %362, i64* %PC
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %365 = load i64, i64* %364, align 8, !tbaa !2428
  %366 = inttoptr i64 %365 to i64*
  %367 = load i64, i64* %366
  store i64 %367, i64* %363, align 8, !tbaa !2428
  %368 = add i64 %365, 8
  store i64 %368, i64* %364, align 8, !tbaa !2428
  ret %struct.Memory* %280
}

; Function Attrs: noinline
define %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401bf0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RSI
  %53 = load i64, i64* %RDI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, 8
  %62 = inttoptr i64 %60 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 1
  store i64 %65, i64* %PC
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %68 = load i64, i64* %67, align 8, !tbaa !2428
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %66, align 8, !tbaa !2428
  %71 = add i64 %68, 8
  store i64 %71, i64* %67, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402860__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402860:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = bitcast %union.vec128_t* %XMM0 to i8*
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC
  %82 = bitcast i8* %79 to double*
  %83 = load double, double* %82, align 1
  %84 = inttoptr i64 %78 to double*
  store double %83, double* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %RDI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 24
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RDX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 40
  %105 = load i64, i64* %RCX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402888

block_4028d1:                                     ; preds = %block_402888
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402898:                                     ; preds = %block_402888
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 24
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 32
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3308
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 32
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 10079
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 32
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 40
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3618
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_402888

block_402888:                                     ; preds = %block_402898, %block_402860
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402860 ], [ %249, %block_402898 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_4028d1, label %block_402898
}

; Function Attrs: noinline
define %struct.Memory* @sub_406690__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406690:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = sub i64 %84, 18760
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a10__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402a10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402a38

block_402ab9:                                     ; preds = %block_402a38
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402a48:                                     ; preds = %block_402a38
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 6516
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 6615
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_404460__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 6906
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_402a38

block_402a38:                                     ; preds = %block_402a48, %block_402a10
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402a10 ], [ %333, %block_402a48 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_402ab9, label %block_402a48
}

; Function Attrs: noinline
define %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404700:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RBP
  %36 = sub i64 %35, 8
  %37 = load i64, i64* %RDI
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %40
  %41 = load i64, i64* %RBP
  %42 = sub i64 %41, 16
  %43 = load i64, i64* %RSI
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = load i64, i64* %RSI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 16
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = load i64, i64* %RSI
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68
  %70 = sub i64 %64, %69
  %71 = icmp ugt i64 %69, %64
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2433
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = xor i64 %69, %64
  %82 = xor i64 %81, %70
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = icmp eq i64 %70, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = lshr i64 %70, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = lshr i64 %64, 63
  %94 = lshr i64 %69, 63
  %95 = xor i64 %94, %93
  %96 = xor i64 %90, %93
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2451
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %104 = load i8, i8* %103, align 1, !tbaa !2449
  %105 = icmp eq i8 %104, 0
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %AL, align 1, !tbaa !2432
  %107 = load i8, i8* %AL
  %108 = zext i8 %107 to i64
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 2
  store i64 %110, i64* %PC
  %111 = and i64 1, %108
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %AL, align 1, !tbaa !2432
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %113, align 1, !tbaa !2433
  %114 = trunc i64 %111 to i32
  %115 = and i32 %114, 255
  %116 = call i32 @llvm.ctpop.i32(i32 %115) #16
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %119, i8* %120, align 1, !tbaa !2447
  %121 = icmp eq i8 %112, 0
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %122, i8* %123, align 1, !tbaa !2449
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %124, align 1, !tbaa !2450
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %125, align 1, !tbaa !2451
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %126, align 1, !tbaa !2448
  %127 = load i8, i8* %AL
  %128 = zext i8 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = and i64 %128, 255
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028e0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4028e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402908

block_402989:                                     ; preds = %block_402908
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402918:                                     ; preds = %block_402908
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 996
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 9431
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 1402
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_402908

block_402908:                                     ; preds = %block_402918, %block_4028e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4028e0 ], [ %333, %block_402918 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_402989, label %block_402918
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403010:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = sub i64 %31, 32
  store i64 %34, i64* %RSP, align 8, !tbaa !2428
  %35 = icmp ult i64 %31, 32
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %36, i8* %37, align 1, !tbaa !2433
  %38 = trunc i64 %34 to i32
  %39 = and i32 %38, 255
  %40 = call i32 @llvm.ctpop.i32(i32 %39) #16
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %43, i8* %44, align 1, !tbaa !2447
  %45 = xor i64 32, %31
  %46 = xor i64 %45, %34
  %47 = lshr i64 %46, 4
  %48 = trunc i64 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2448
  %51 = icmp eq i64 %34, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i64 %34, 63
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2450
  %57 = lshr i64 %31, 63
  %58 = xor i64 %54, %57
  %59 = add nuw nsw i64 %58, %57
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2451
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 16
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 20
  %71 = load i32, i32* %ESI
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RDI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 3
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %82 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %RDI, align 8, !tbaa !2428
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RDI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 594
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 5
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 5
  store i64 %104, i64* %PC
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %106 = load i64, i64* %105, align 8, !tbaa !2428
  %107 = add i64 %106, -8
  %108 = inttoptr i64 %107 to i64*
  store i64 %102, i64* %108
  store i64 %107, i64* %105, align 8, !tbaa !2428
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %100, i64* %109, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = call %struct.Memory* @sub_403280__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %110, %struct.Memory* %2)
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 8
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i64*
  %117 = load i64, i64* %116
  store i64 %117, i64* %RDI, align 8, !tbaa !2428
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 32
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RDI
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 3
  store i64 %126, i64* %PC
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %127 = load i64, i64* %RSP
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = add i64 32, %127
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %131 = icmp ult i64 %130, %127
  %132 = icmp ult i64 %130, 32
  %133 = or i1 %131, %132
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %134, i8* %135, align 1, !tbaa !2433
  %136 = trunc i64 %130 to i32
  %137 = and i32 %136, 255
  %138 = call i32 @llvm.ctpop.i32(i32 %137) #16
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %141, i8* %142, align 1, !tbaa !2447
  %143 = xor i64 32, %127
  %144 = xor i64 %143, %130
  %145 = lshr i64 %144, 4
  %146 = trunc i64 %145 to i8
  %147 = and i8 %146, 1
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %147, i8* %148, align 1, !tbaa !2448
  %149 = icmp eq i64 %130, 0
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %150, i8* %151, align 1, !tbaa !2449
  %152 = lshr i64 %130, 63
  %153 = trunc i64 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %153, i8* %154, align 1, !tbaa !2450
  %155 = lshr i64 %127, 63
  %156 = xor i64 %152, %155
  %157 = add nuw nsw i64 %156, %152
  %158 = icmp eq i64 %157, 2
  %159 = zext i1 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %159, i8* %160, align 1, !tbaa !2451
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %164 = load i64, i64* %163, align 8, !tbaa !2428
  %165 = add i64 %164, 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %RBP, align 8, !tbaa !2428
  store i64 %165, i64* %163, align 8, !tbaa !2428
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 1
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %172 = load i64, i64* %171, align 8, !tbaa !2428
  %173 = inttoptr i64 %172 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %170, align 8, !tbaa !2428
  %175 = add i64 %172, 8
  store i64 %175, i64* %171, align 8, !tbaa !2428
  ret %struct.Memory* %111
}

; Function Attrs: noinline
define %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404e30:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 7
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %EDX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = load i64, i64* %RBP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC
  store i64 %44, i64* %RBP, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = sub i64 %47, 96
  store i64 %50, i64* %RSP, align 8, !tbaa !2428
  %51 = icmp ult i64 %47, 96
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %50 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 96, %47
  %62 = xor i64 %61, %50
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %50, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %50, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %47, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2451
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 8
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  store i64 %84, i64* %RCX, align 8, !tbaa !2428
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RDI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  store i64 %99, i64* %RDI, align 8, !tbaa !2428
  %102 = load i64, i64* %RCX
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %105 = load i64, i64* %PC
  %106 = sub i64 %105, 7086
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 5
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 5
  store i64 %110, i64* %PC
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %112 = load i64, i64* %111, align 8, !tbaa !2428
  %113 = add i64 %112, -8
  %114 = inttoptr i64 %113 to i64*
  store i64 %108, i64* %114
  store i64 %113, i64* %111, align 8, !tbaa !2428
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %106, i64* %115, align 8, !tbaa !2428
  %116 = load i64, i64* %PC
  %117 = call %struct.Memory* @sub_4032a0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* %0, i64 %116, %struct.Memory* %2)
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = sub i64 %118, 1
  %122 = icmp ult i64 %118, 1
  %123 = zext i1 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %123, i8* %124, align 1, !tbaa !2433
  %125 = trunc i64 %121 to i32
  %126 = and i32 %125, 255
  %127 = call i32 @llvm.ctpop.i32(i32 %126) #16
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %130, i8* %131, align 1, !tbaa !2447
  %132 = xor i64 1, %118
  %133 = xor i64 %132, %121
  %134 = lshr i64 %133, 4
  %135 = trunc i64 %134 to i8
  %136 = and i8 %135, 1
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %136, i8* %137, align 1, !tbaa !2448
  %138 = icmp eq i64 %121, 0
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %139, i8* %140, align 1, !tbaa !2449
  %141 = lshr i64 %121, 63
  %142 = trunc i64 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = lshr i64 %118, 63
  %145 = xor i64 %141, %144
  %146 = add nuw nsw i64 %145, %144
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %148, i8* %149, align 1, !tbaa !2451
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 350
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 6
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = load i8, i8* %156, align 1, !tbaa !2449
  %158 = icmp ne i8 %157, 0
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %160 = load i8, i8* %159, align 1, !tbaa !2450
  %161 = icmp ne i8 %160, 0
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %163 = load i8, i8* %162, align 1, !tbaa !2451
  %164 = icmp ne i8 %163, 0
  %165 = xor i1 %161, %164
  %166 = or i1 %158, %165
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %169 = select i1 %166, i64 %151, i64 %153
  store i64 %169, i64* %168, align 8, !tbaa !2428
  %170 = load i8, i8* %BRANCH_TAKEN
  %171 = icmp eq i8 %170, 1
  br i1 %171, label %block_404fb5, label %block_404e5d

block_404e7d:                                     ; preds = %block_404f1e, %block_404e5d
  %MEMORY.0 = phi %struct.Memory* [ %341, %block_404e5d ], [ %537, %block_404f1e ]
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 5
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 5
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %173, i64* %176, align 8, !tbaa !2428
  br label %block_404e82

block_404fb5:                                     ; preds = %block_404f63, %block_404e30
  %MEMORY.1 = phi %struct.Memory* [ %117, %block_404e30 ], [ %764, %block_404f63 ]
  %177 = load i64, i64* %RSP
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = add i64 96, %177
  store i64 %180, i64* %RSP, align 8, !tbaa !2428
  %181 = icmp ult i64 %180, %177
  %182 = icmp ult i64 %180, 96
  %183 = or i1 %181, %182
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %184, i8* %185, align 1, !tbaa !2433
  %186 = trunc i64 %180 to i32
  %187 = and i32 %186, 255
  %188 = call i32 @llvm.ctpop.i32(i32 %187) #16
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %191, i8* %192, align 1, !tbaa !2447
  %193 = xor i64 96, %177
  %194 = xor i64 %193, %180
  %195 = lshr i64 %194, 4
  %196 = trunc i64 %195 to i8
  %197 = and i8 %196, 1
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %197, i8* %198, align 1, !tbaa !2448
  %199 = icmp eq i64 %180, 0
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %200, i8* %201, align 1, !tbaa !2449
  %202 = lshr i64 %180, 63
  %203 = trunc i64 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %203, i8* %204, align 1, !tbaa !2450
  %205 = lshr i64 %177, 63
  %206 = xor i64 %202, %205
  %207 = add nuw nsw i64 %206, %202
  %208 = icmp eq i64 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2451
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 1
  store i64 %212, i64* %PC
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %214 = load i64, i64* %213, align 8, !tbaa !2428
  %215 = add i64 %214, 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216
  store i64 %217, i64* %RBP, align 8, !tbaa !2428
  store i64 %215, i64* %213, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 1
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = inttoptr i64 %222 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %220, align 8, !tbaa !2428
  %225 = add i64 %222, 8
  store i64 %225, i64* %221, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404ef2:                                     ; preds = %block_404ed0
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 32
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  store i64 %227, i64* %RDI, align 8, !tbaa !2428
  %230 = load i64, i64* %PC
  %231 = sub i64 %230, 7286
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 5
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %237 = load i64, i64* %236, align 8, !tbaa !2428
  %238 = add i64 %237, -8
  %239 = inttoptr i64 %238 to i64*
  store i64 %233, i64* %239
  store i64 %238, i64* %236, align 8, !tbaa !2428
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %231, i64* %240, align 8, !tbaa !2428
  %241 = load i64, i64* %PC
  %242 = call %struct.Memory* @sub_403280__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %241, %struct.Memory* %290)
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 88
  %245 = load i64, i64* %RAX
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC
  %248 = inttoptr i64 %244 to i64*
  store i64 %245, i64* %248
  %249 = load i64, i64* %PC
  %250 = sub i64 %249, 47
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 5
  store i64 %252, i64* %PC
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %250, i64* %253, align 8, !tbaa !2428
  br label %block_404ed0

block_404ed0:                                     ; preds = %block_404ecb, %block_404ef2
  %MEMORY.2 = phi %struct.Memory* [ %587, %block_404ecb ], [ %242, %block_404ef2 ]
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 32
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  store i64 %255, i64* %RDI, align 8, !tbaa !2428
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 7764
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %265 = load i64, i64* %264, align 8, !tbaa !2428
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %261, i64* %267
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %268, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.2)
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 24
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  store i64 %272, i64* %RSI, align 8, !tbaa !2428
  %275 = load i64, i64* %RAX
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 3
  store i64 %277, i64* %PC
  store i64 %275, i64* %RDI, align 8, !tbaa !2428
  %278 = load i64, i64* %PC
  %279 = sub i64 %278, 7744
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 5
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 5
  store i64 %283, i64* %PC
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %285 = load i64, i64* %284, align 8, !tbaa !2428
  %286 = add i64 %285, -8
  %287 = inttoptr i64 %286 to i64*
  store i64 %281, i64* %287
  store i64 %286, i64* %284, align 8, !tbaa !2428
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %279, i64* %288, align 8, !tbaa !2428
  %289 = load i64, i64* %PC
  %290 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %289, %struct.Memory* %270)
  %291 = load i8, i8* %AL
  %292 = zext i8 %291 to i64
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 2
  store i64 %294, i64* %PC
  %295 = and i64 1, %292
  %296 = trunc i64 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %297, align 1, !tbaa !2433
  %298 = trunc i64 %295 to i32
  %299 = and i32 %298, 255
  %300 = call i32 @llvm.ctpop.i32(i32 %299) #16
  %301 = trunc i32 %300 to i8
  %302 = and i8 %301, 1
  %303 = xor i8 %302, 1
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %303, i8* %304, align 1, !tbaa !2447
  %305 = icmp eq i8 %296, 0
  %306 = zext i1 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %306, i8* %307, align 1, !tbaa !2449
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %308, align 1, !tbaa !2450
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %309, align 1, !tbaa !2451
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %310, align 1, !tbaa !2448
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 11
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 6
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 6
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %318 = load i8, i8* %317, align 1, !tbaa !2449
  %319 = icmp eq i8 %318, 0
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %322 = select i1 %319, i64 %312, i64 %314
  store i64 %322, i64* %321, align 8, !tbaa !2428
  %323 = load i8, i8* %BRANCH_TAKEN
  %324 = icmp eq i8 %323, 1
  br i1 %324, label %block_404ef2, label %block_404eed

block_404e5d:                                     ; preds = %block_404e30
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 8
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  store i64 %326, i64* %RDI, align 8, !tbaa !2428
  %329 = load i64, i64* %PC
  %330 = sub i64 %329, 7649
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 5
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  store i64 %334, i64* %PC
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %336 = load i64, i64* %335, align 8, !tbaa !2428
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %332, i64* %338
  store i64 %337, i64* %335, align 8, !tbaa !2428
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %330, i64* %339, align 8, !tbaa !2428
  %340 = load i64, i64* %PC
  %341 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %340, %struct.Memory* %117)
  %342 = load i64, i64* %RAX
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %342 to i64*
  %346 = load i64, i64* %345
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 24
  %349 = load i64, i64* %RAX
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %348 to i64*
  store i64 %349, i64* %352
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 8
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC
  %357 = inttoptr i64 %354 to i64*
  %358 = load i64, i64* %357
  store i64 %358, i64* %RAX, align 8, !tbaa !2428
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 32
  %361 = load i64, i64* %RAX
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %360 to i64*
  store i64 %361, i64* %364
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 16
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i64*
  %370 = load i64, i64* %369
  store i64 %370, i64* %RAX, align 8, !tbaa !2428
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 40
  %373 = load i64, i64* %RAX
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %372 to i64*
  store i64 %373, i64* %376
  br label %block_404e7d

block_404eed:                                     ; preds = %block_404ed0
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 23
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  store i64 %380, i64* %PC
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %378, i64* %381, align 8, !tbaa !2428
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 32
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  store i64 %383, i64* %RDI, align 8, !tbaa !2428
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 40
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  store i64 %387, i64* %RSI, align 8, !tbaa !2428
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 212
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 5
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 5
  store i64 %395, i64* %PC
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %397 = load i64, i64* %396, align 8, !tbaa !2428
  %398 = add i64 %397, -8
  %399 = inttoptr i64 %398 to i64*
  store i64 %393, i64* %399
  store i64 %398, i64* %396, align 8, !tbaa !2428
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %391, i64* %400, align 8, !tbaa !2428
  %401 = load i64, i64* %PC
  %402 = call %struct.Memory* @sub_404fe0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %401, %struct.Memory* %290)
  %403 = load i8, i8* %AL
  %404 = zext i8 %403 to i64
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 2
  store i64 %406, i64* %PC
  %407 = and i64 1, %404
  %408 = trunc i64 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %409, align 1, !tbaa !2433
  %410 = trunc i64 %407 to i32
  %411 = and i32 %410, 255
  %412 = call i32 @llvm.ctpop.i32(i32 %411) #16
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = xor i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %415, i8* %416, align 1, !tbaa !2447
  %417 = icmp eq i8 %408, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %420, align 1, !tbaa !2450
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %421, align 1, !tbaa !2451
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %422, align 1, !tbaa !2448
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 11
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 6
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 6
  store i64 %428, i64* %PC
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %430 = load i8, i8* %429, align 1, !tbaa !2449
  %431 = icmp eq i8 %430, 0
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %434 = select i1 %431, i64 %424, i64 %426
  store i64 %434, i64* %433, align 8, !tbaa !2428
  %435 = load i8, i8* %BRANCH_TAKEN
  %436 = icmp eq i8 %435, 1
  br i1 %436, label %block_404f1e, label %block_404f19

block_404f1e:                                     ; preds = %block_404eed
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 40
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 4
  store i64 %440, i64* %PC
  store i64 %438, i64* %RDI, align 8, !tbaa !2428
  %441 = load i64, i64* %PC
  %442 = sub i64 %441, 7842
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 5
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 5
  store i64 %446, i64* %PC
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %448 = load i64, i64* %447, align 8, !tbaa !2428
  %449 = add i64 %448, -8
  %450 = inttoptr i64 %449 to i64*
  store i64 %444, i64* %450
  store i64 %449, i64* %447, align 8, !tbaa !2428
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %442, i64* %451, align 8, !tbaa !2428
  %452 = load i64, i64* %PC
  %453 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %452, %struct.Memory* %402)
  %454 = load i64, i64* %RBP
  %455 = sub i64 %454, 32
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  store i64 %455, i64* %RDI, align 8, !tbaa !2428
  %458 = load i64, i64* %RAX
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 3
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 48
  %465 = load i64, i64* %RAX
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %464 to i64*
  store i64 %465, i64* %468
  %469 = load i64, i64* %PC
  %470 = sub i64 %469, 7858
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 5
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 5
  store i64 %474, i64* %PC
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %476 = load i64, i64* %475, align 8, !tbaa !2428
  %477 = add i64 %476, -8
  %478 = inttoptr i64 %477 to i64*
  store i64 %472, i64* %478
  store i64 %477, i64* %475, align 8, !tbaa !2428
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %470, i64* %479, align 8, !tbaa !2428
  %480 = load i64, i64* %PC
  %481 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %480, %struct.Memory* %453)
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 40
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  store i64 %483, i64* %RDI, align 8, !tbaa !2428
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 96
  %488 = load i64, i64* %RAX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %487 to i64*
  store i64 %488, i64* %491
  %492 = load i64, i64* %PC
  %493 = sub i64 %492, 7871
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 5
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 5
  store i64 %497, i64* %PC
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %499 = load i64, i64* %498, align 8, !tbaa !2428
  %500 = add i64 %499, -8
  %501 = inttoptr i64 %500 to i64*
  store i64 %495, i64* %501
  store i64 %500, i64* %498, align 8, !tbaa !2428
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %493, i64* %502, align 8, !tbaa !2428
  %503 = load i64, i64* %PC
  %504 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %503, %struct.Memory* %481)
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 32
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 4
  store i64 %508, i64* %PC
  store i64 %506, i64* %RDI, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 96
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i64*
  %514 = load i64, i64* %513
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %515 = load i64, i64* %RCX
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 3
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %RDX, align 8, !tbaa !2428
  %520 = load i64, i64* %RAX
  %521 = load i64, i64* %RDX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 3
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 7890
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 5
  store i64 %530, i64* %PC
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %532 = load i64, i64* %531, align 8, !tbaa !2428
  %533 = add i64 %532, -8
  %534 = inttoptr i64 %533 to i64*
  store i64 %528, i64* %534
  store i64 %533, i64* %531, align 8, !tbaa !2428
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %535, align 8, !tbaa !2428
  %536 = load i64, i64* %PC
  %537 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %536, %struct.Memory* %504)
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 48
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i64*
  %543 = load i64, i64* %542
  store i64 %543, i64* %RCX, align 8, !tbaa !2428
  %544 = load i64, i64* %RAX
  %545 = load i64, i64* %RCX
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %544 to i64*
  store i64 %545, i64* %548
  %549 = load i64, i64* %PC
  %550 = sub i64 %549, 225
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 5
  store i64 %552, i64* %PC
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %550, i64* %553, align 8, !tbaa !2428
  br label %block_404e7d

block_404eac:                                     ; preds = %block_404e82
  %554 = sub i64 %852, 42
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 5
  store i64 %556, i64* %PC
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %554, i64* %557, align 8, !tbaa !2428
  br label %block_404e82

block_404f19:                                     ; preds = %block_404eed
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 74
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 5
  store i64 %561, i64* %PC
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %559, i64* %562, align 8, !tbaa !2428
  br label %block_404f63

block_404ea7:                                     ; preds = %block_404e82
  %563 = add i64 %852, 10
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %563, i64* %566, align 8, !tbaa !2428
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 32
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 4
  store i64 %570, i64* %PC
  store i64 %568, i64* %RDI, align 8, !tbaa !2428
  %571 = load i64, i64* %RBP
  %572 = sub i64 %571, 40
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 4
  store i64 %574, i64* %PC
  store i64 %572, i64* %RSI, align 8, !tbaa !2428
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 295
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 5
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  store i64 %580, i64* %PC
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %582 = load i64, i64* %581, align 8, !tbaa !2428
  %583 = add i64 %582, -8
  %584 = inttoptr i64 %583 to i64*
  store i64 %578, i64* %584
  store i64 %583, i64* %581, align 8, !tbaa !2428
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %576, i64* %585, align 8, !tbaa !2428
  %586 = load i64, i64* %PC
  %587 = call %struct.Memory* @sub_404fe0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %586, %struct.Memory* %817)
  %588 = load i8, i8* %AL
  %589 = zext i8 %588 to i64
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 2
  store i64 %591, i64* %PC
  %592 = and i64 1, %589
  %593 = trunc i64 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %594, align 1, !tbaa !2433
  %595 = trunc i64 %592 to i32
  %596 = and i32 %595, 255
  %597 = call i32 @llvm.ctpop.i32(i32 %596) #16
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  %600 = xor i8 %599, 1
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %600, i8* %601, align 1, !tbaa !2447
  %602 = icmp eq i8 %593, 0
  %603 = zext i1 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %603, i8* %604, align 1, !tbaa !2449
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %605, align 1, !tbaa !2450
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %606, align 1, !tbaa !2451
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %607, align 1, !tbaa !2448
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 11
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 6
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 6
  store i64 %613, i64* %PC
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %615 = load i8, i8* %614, align 1, !tbaa !2449
  %616 = icmp eq i8 %615, 0
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %619 = select i1 %616, i64 %609, i64 %611
  store i64 %619, i64* %618, align 8, !tbaa !2428
  %620 = load i8, i8* %BRANCH_TAKEN
  %621 = icmp eq i8 %620, 1
  %622 = load i64, i64* %PC
  br i1 %621, label %block_404ecb, label %block_404ec6

block_404ec6:                                     ; preds = %block_404ea7
  %623 = add i64 %622, 157
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 5
  store i64 %625, i64* %PC
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %623, i64* %626, align 8, !tbaa !2428
  br label %block_404f63

block_404ecb:                                     ; preds = %block_404ea7
  %627 = add i64 %622, 5
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 5
  store i64 %629, i64* %PC
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %627, i64* %630, align 8, !tbaa !2428
  br label %block_404ed0

block_404f63:                                     ; preds = %block_404ec6, %block_404f19
  %MEMORY.3 = phi %struct.Memory* [ %402, %block_404f19 ], [ %587, %block_404ec6 ]
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 40
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC
  store i64 %632, i64* %RDI, align 8, !tbaa !2428
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 5
  store i64 %636, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %637 = load i32, i32* %EAX
  %638 = zext i32 %637 to i64
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 2
  store i64 %640, i64* %PC
  %641 = and i64 %638, 4294967295
  store i64 %641, i64* %RSI, align 8, !tbaa !2428
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RCX, align 8, !tbaa !2428
  %648 = load i64, i64* %RBP
  %649 = sub i64 %648, 56
  %650 = load i64, i64* %RCX
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 4
  store i64 %652, i64* %PC
  %653 = inttoptr i64 %649 to i64*
  store i64 %650, i64* %653
  %654 = load i64, i64* %PC
  %655 = sub i64 %654, 7334
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 5
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 5
  store i64 %659, i64* %PC
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %661 = load i64, i64* %660, align 8, !tbaa !2428
  %662 = add i64 %661, -8
  %663 = inttoptr i64 %662 to i64*
  store i64 %657, i64* %663
  store i64 %662, i64* %660, align 8, !tbaa !2428
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %655, i64* %664, align 8, !tbaa !2428
  %665 = load i64, i64* %PC
  %666 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %665, %struct.Memory* %MEMORY.3)
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 64
  %669 = load i64, i64* %RAX
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 4
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %668 to i64*
  store i64 %669, i64* %672
  %673 = load i64, i64* %RBP
  %674 = sub i64 %673, 56
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 4
  store i64 %676, i64* %PC
  %677 = inttoptr i64 %674 to i64*
  %678 = load i64, i64* %677
  store i64 %678, i64* %RDI, align 8, !tbaa !2428
  %679 = load i64, i64* %RBP
  %680 = sub i64 %679, 64
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC
  %683 = inttoptr i64 %680 to i64*
  %684 = load i64, i64* %683
  store i64 %684, i64* %RSI, align 8, !tbaa !2428
  %685 = load i64, i64* %PC
  %686 = sub i64 %685, 343
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 5
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 5
  store i64 %690, i64* %PC
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %692 = load i64, i64* %691, align 8, !tbaa !2428
  %693 = add i64 %692, -8
  %694 = inttoptr i64 %693 to i64*
  store i64 %688, i64* %694
  store i64 %693, i64* %691, align 8, !tbaa !2428
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %686, i64* %695, align 8, !tbaa !2428
  %696 = load i64, i64* %PC
  %697 = call %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %696, %struct.Memory* %666)
  %698 = load i64, i64* %RBP
  %699 = sub i64 %698, 40
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC
  store i64 %699, i64* %RDI, align 8, !tbaa !2428
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 5
  store i64 %703, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %704 = load i32, i32* %EDX
  %705 = zext i32 %704 to i64
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 2
  store i64 %707, i64* %PC
  %708 = and i64 %705, 4294967295
  store i64 %708, i64* %RSI, align 8, !tbaa !2428
  %709 = load i64, i64* %PC
  %710 = sub i64 %709, 7367
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 5
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 5
  store i64 %714, i64* %PC
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %716 = load i64, i64* %715, align 8, !tbaa !2428
  %717 = add i64 %716, -8
  %718 = inttoptr i64 %717 to i64*
  store i64 %712, i64* %718
  store i64 %717, i64* %715, align 8, !tbaa !2428
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %710, i64* %719, align 8, !tbaa !2428
  %720 = load i64, i64* %PC
  %721 = call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %720, %struct.Memory* %697)
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 72
  %724 = load i64, i64* %RAX
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 4
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %723 to i64*
  store i64 %724, i64* %727
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 16
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 4
  store i64 %731, i64* %PC
  %732 = inttoptr i64 %729 to i64*
  %733 = load i64, i64* %732
  store i64 %733, i64* %RAX, align 8, !tbaa !2428
  %734 = load i64, i64* %RBP
  %735 = sub i64 %734, 80
  %736 = load i64, i64* %RAX
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 4
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %735 to i64*
  store i64 %736, i64* %739
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 72
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RDI, align 8, !tbaa !2428
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 80
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i64*
  %751 = load i64, i64* %750
  store i64 %751, i64* %RSI, align 8, !tbaa !2428
  %752 = load i64, i64* %PC
  %753 = sub i64 %752, 384
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 5
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  store i64 %757, i64* %PC
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %759 = load i64, i64* %758, align 8, !tbaa !2428
  %760 = add i64 %759, -8
  %761 = inttoptr i64 %760 to i64*
  store i64 %755, i64* %761
  store i64 %760, i64* %758, align 8, !tbaa !2428
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %762, align 8, !tbaa !2428
  %763 = load i64, i64* %PC
  %764 = call %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %763, %struct.Memory* %721)
  br label %block_404fb5

block_404e82:                                     ; preds = %block_404eac, %block_404e7d
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_404e7d ], [ %817, %block_404eac ]
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 40
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  store i64 %766, i64* %RDI, align 8, !tbaa !2428
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 314
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 5
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 5
  store i64 %774, i64* %PC
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %776 = load i64, i64* %775, align 8, !tbaa !2428
  %777 = add i64 %776, -8
  %778 = inttoptr i64 %777 to i64*
  store i64 %772, i64* %778
  store i64 %777, i64* %775, align 8, !tbaa !2428
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %770, i64* %779, align 8, !tbaa !2428
  %780 = load i64, i64* %PC
  %781 = call %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %780, %struct.Memory* %MEMORY.4)
  %782 = load i64, i64* %RAX
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 3
  store i64 %784, i64* %PC
  store i64 %782, i64* %RDI, align 8, !tbaa !2428
  %785 = load i64, i64* %PC
  %786 = sub i64 %785, 7694
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 5
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 5
  store i64 %790, i64* %PC
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %792 = load i64, i64* %791, align 8, !tbaa !2428
  %793 = add i64 %792, -8
  %794 = inttoptr i64 %793 to i64*
  store i64 %788, i64* %794
  store i64 %793, i64* %791, align 8, !tbaa !2428
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %786, i64* %795, align 8, !tbaa !2428
  %796 = load i64, i64* %PC
  %797 = call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %796, %struct.Memory* %781)
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 24
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 4
  store i64 %801, i64* %PC
  store i64 %799, i64* %RDI, align 8, !tbaa !2428
  %802 = load i64, i64* %RAX
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 3
  store i64 %804, i64* %PC
  store i64 %802, i64* %RSI, align 8, !tbaa !2428
  %805 = load i64, i64* %PC
  %806 = sub i64 %805, 7674
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 5
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 5
  store i64 %810, i64* %PC
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %812 = load i64, i64* %811, align 8, !tbaa !2428
  %813 = add i64 %812, -8
  %814 = inttoptr i64 %813 to i64*
  store i64 %808, i64* %814
  store i64 %813, i64* %811, align 8, !tbaa !2428
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %806, i64* %815, align 8, !tbaa !2428
  %816 = load i64, i64* %PC
  %817 = call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %816, %struct.Memory* %797)
  %818 = load i8, i8* %AL
  %819 = zext i8 %818 to i64
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 2
  store i64 %821, i64* %PC
  %822 = and i64 1, %819
  %823 = trunc i64 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %824, align 1, !tbaa !2433
  %825 = trunc i64 %822 to i32
  %826 = and i32 %825, 255
  %827 = call i32 @llvm.ctpop.i32(i32 %826) #16
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %830, i8* %831, align 1, !tbaa !2447
  %832 = icmp eq i8 %823, 0
  %833 = zext i1 %832 to i8
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %833, i8* %834, align 1, !tbaa !2449
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %835, align 1, !tbaa !2450
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %836, align 1, !tbaa !2451
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %837, align 1, !tbaa !2448
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 11
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 6
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 6
  store i64 %843, i64* %PC
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %845 = load i8, i8* %844, align 1, !tbaa !2449
  %846 = icmp eq i8 %845, 0
  %847 = zext i1 %846 to i8
  store i8 %847, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %849 = select i1 %846, i64 %839, i64 %841
  store i64 %849, i64* %848, align 8, !tbaa !2428
  %850 = load i8, i8* %BRANCH_TAKEN
  %851 = icmp eq i8 %850, 1
  %852 = load i64, i64* %PC
  br i1 %851, label %block_404eac, label %block_404ea7
}

; Function Attrs: noinline
define %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405ef0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405f10__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_404fe0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404fe0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RBP
  %36 = sub i64 %35, 8
  %37 = load i64, i64* %RDI
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %40
  %41 = load i64, i64* %RBP
  %42 = sub i64 %41, 16
  %43 = load i64, i64* %RSI
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = load i64, i64* %RSI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 16
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = load i64, i64* %RSI
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68
  %70 = sub i64 %64, %69
  %71 = icmp ugt i64 %69, %64
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2433
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = xor i64 %69, %64
  %82 = xor i64 %81, %70
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = icmp eq i64 %70, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = lshr i64 %70, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = lshr i64 %64, 63
  %94 = lshr i64 %69, 63
  %95 = xor i64 %94, %93
  %96 = xor i64 %90, %93
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2451
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %104 = load i8, i8* %103, align 1, !tbaa !2433
  store i8 %104, i8* %AL, align 1, !tbaa !2432
  %105 = load i8, i8* %AL
  %106 = zext i8 %105 to i64
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 2
  store i64 %108, i64* %PC
  %109 = and i64 1, %106
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %AL, align 1, !tbaa !2432
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %111, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2447
  %119 = icmp eq i8 %110, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %122, align 1, !tbaa !2450
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %123, align 1, !tbaa !2451
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %124, align 1, !tbaa !2448
  %125 = load i8, i8* %AL
  %126 = zext i8 %125 to i64
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = and i64 %126, 255
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 1
  store i64 %131, i64* %PC
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %133 = load i64, i64* %132, align 8, !tbaa !2428
  %134 = add i64 %133, 8
  %135 = inttoptr i64 %133 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RBP, align 8, !tbaa !2428
  store i64 %134, i64* %132, align 8, !tbaa !2428
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 1
  store i64 %138, i64* %PC
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %141 = load i64, i64* %140, align 8, !tbaa !2428
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %139, align 8, !tbaa !2428
  %144 = add i64 %141, 8
  store i64 %144, i64* %140, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4031c0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4031c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 16
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 16
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 16, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 24
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_4031f0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i8, i8* %AL
  %105 = zext i8 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 1, %105
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %AL, align 1, !tbaa !2432
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %110, align 1, !tbaa !2433
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = icmp eq i8 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %121, align 1, !tbaa !2450
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %122, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2448
  %124 = load i8, i8* %AL
  %125 = zext i8 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = and i64 %125, 255
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RSP
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = add i64 16, %129
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ult i64 %132, %129
  %134 = icmp ult i64 %132, 16
  %135 = or i1 %133, %134
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2433
  %138 = trunc i64 %132 to i32
  %139 = and i32 %138, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = xor i64 16, %129
  %146 = xor i64 %145, %132
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = icmp eq i64 %132, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i64 %132, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i64 %129, 63
  %158 = xor i64 %154, %157
  %159 = add nuw nsw i64 %158, %154
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2451
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 1
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %166 = load i64, i64* %165, align 8, !tbaa !2428
  %167 = add i64 %166, 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RBP, align 8, !tbaa !2428
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 1
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %172, align 8, !tbaa !2428
  %177 = add i64 %174, 8
  store i64 %177, i64* %173, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f30__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405f30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_4022f0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4022f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402318

block_402399:                                     ; preds = %block_402318
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402328:                                     ; preds = %block_402318
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 8340
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 14279
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_405b30__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 8730
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_402318

block_402318:                                     ; preds = %block_402328, %block_4022f0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4022f0 ], [ %333, %block_402328 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_402399, label %block_402328
}

; Function Attrs: noinline
define %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4046c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = sub i64 %31, 32
  store i64 %34, i64* %RSP, align 8, !tbaa !2428
  %35 = icmp ult i64 %31, 32
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %36, i8* %37, align 1, !tbaa !2433
  %38 = trunc i64 %34 to i32
  %39 = and i32 %38, 255
  %40 = call i32 @llvm.ctpop.i32(i32 %39) #16
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %43, i8* %44, align 1, !tbaa !2447
  %45 = xor i64 32, %31
  %46 = xor i64 %45, %34
  %47 = lshr i64 %46, 4
  %48 = trunc i64 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2448
  %51 = icmp eq i64 %34, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i64 %34, 63
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2450
  %57 = lshr i64 %31, 63
  %58 = xor i64 %54, %57
  %59 = add nuw nsw i64 %58, %57
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2451
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 16
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 20
  %71 = load i32, i32* %ESI
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RDI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 3
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %82 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %RDI, align 8, !tbaa !2428
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RDI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 16
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 114
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 5
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 5
  store i64 %104, i64* %PC
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %106 = load i64, i64* %105, align 8, !tbaa !2428
  %107 = add i64 %106, -8
  %108 = inttoptr i64 %107 to i64*
  store i64 %102, i64* %108
  store i64 %107, i64* %105, align 8, !tbaa !2428
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %100, i64* %109, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = call %struct.Memory* @sub_404750__ZppIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %110, %struct.Memory* %2)
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 8
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i64*
  %117 = load i64, i64* %116
  store i64 %117, i64* %RDI, align 8, !tbaa !2428
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 32
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RDI
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 3
  store i64 %126, i64* %PC
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %127 = load i64, i64* %RSP
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = add i64 32, %127
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %131 = icmp ult i64 %130, %127
  %132 = icmp ult i64 %130, 32
  %133 = or i1 %131, %132
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %134, i8* %135, align 1, !tbaa !2433
  %136 = trunc i64 %130 to i32
  %137 = and i32 %136, 255
  %138 = call i32 @llvm.ctpop.i32(i32 %137) #16
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %141, i8* %142, align 1, !tbaa !2447
  %143 = xor i64 32, %127
  %144 = xor i64 %143, %130
  %145 = lshr i64 %144, 4
  %146 = trunc i64 %145 to i8
  %147 = and i8 %146, 1
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %147, i8* %148, align 1, !tbaa !2448
  %149 = icmp eq i64 %130, 0
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %150, i8* %151, align 1, !tbaa !2449
  %152 = lshr i64 %130, 63
  %153 = trunc i64 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %153, i8* %154, align 1, !tbaa !2450
  %155 = lshr i64 %127, 63
  %156 = xor i64 %152, %155
  %157 = add nuw nsw i64 %156, %152
  %158 = icmp eq i64 %157, 2
  %159 = zext i1 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %159, i8* %160, align 1, !tbaa !2451
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %164 = load i64, i64* %163, align 8, !tbaa !2428
  %165 = add i64 %164, 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %RBP, align 8, !tbaa !2428
  store i64 %165, i64* %163, align 8, !tbaa !2428
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 1
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %172 = load i64, i64* %171, align 8, !tbaa !2428
  %173 = inttoptr i64 %172 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %170, align 8, !tbaa !2428
  %175 = add i64 %172, 8
  store i64 %175, i64* %171, align 8, !tbaa !2428
  ret %struct.Memory* %111
}

; Function Attrs: noinline
define %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4055d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %RAX
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = add i64 -8, %45
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = icmp ult i64 %48, %45
  %50 = icmp ult i64 %48, -8
  %51 = or i1 %49, %50
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2433
  %54 = trunc i64 %48 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 -8, %45
  %62 = xor i64 %61, %48
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %48, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %48, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %45, 63
  %74 = xor i64 %70, %73
  %75 = xor i64 %70, 1
  %76 = add nuw nsw i64 %74, %75
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %78, i8* %79, align 1, !tbaa !2451
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 8
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 1
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !2428
  %95 = add i64 %94, 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %RBP, align 8, !tbaa !2428
  store i64 %95, i64* %93, align 8, !tbaa !2428
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 1
  store i64 %99, i64* %PC
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %100, align 8, !tbaa !2428
  %105 = add i64 %102, 8
  store i64 %105, i64* %101, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404ad0__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404ad0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 48
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 48
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2433
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #16
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = xor i64 48, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2451
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 5
  store i64 %77, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %78 = load i32, i32* %EAX
  %79 = zext i32 %78 to i64
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 2
  store i64 %81, i64* %PC
  %82 = and i64 %79, 4294967295
  store i64 %82, i64* %RCX, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 8
  %85 = load i64, i64* %RDI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RSI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 16
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %RSI, align 8, !tbaa !2428
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i64*
  %106 = load i64, i64* %105
  store i64 %106, i64* %RDI, align 8, !tbaa !2428
  %107 = load i64, i64* %RSI
  %108 = load i64, i64* %RDI
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 3
  store i64 %110, i64* %PC
  %111 = sub i64 %107, %108
  store i64 %111, i64* %RSI, align 8, !tbaa !2428
  %112 = icmp ult i64 %107, %108
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %113, i8* %114, align 1, !tbaa !2433
  %115 = trunc i64 %111 to i32
  %116 = and i32 %115, 255
  %117 = call i32 @llvm.ctpop.i32(i32 %116) #16
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %120, i8* %121, align 1, !tbaa !2447
  %122 = xor i64 %108, %107
  %123 = xor i64 %122, %111
  %124 = lshr i64 %123, 4
  %125 = trunc i64 %124 to i8
  %126 = and i8 %125, 1
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %126, i8* %127, align 1, !tbaa !2448
  %128 = icmp eq i64 %111, 0
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %129, i8* %130, align 1, !tbaa !2449
  %131 = lshr i64 %111, 63
  %132 = trunc i64 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %132, i8* %133, align 1, !tbaa !2450
  %134 = lshr i64 %107, 63
  %135 = lshr i64 %108, 63
  %136 = xor i64 %135, %134
  %137 = xor i64 %131, %134
  %138 = add nuw nsw i64 %137, %136
  %139 = icmp eq i64 %138, 2
  %140 = zext i1 %139 to i8
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %140, i8* %141, align 1, !tbaa !2451
  %142 = load i64, i64* %RSI
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 4
  store i64 %144, i64* %PC
  %145 = ashr i64 %142, 2
  %146 = trunc i64 %145 to i8
  %147 = and i8 %146, 1
  %148 = ashr i64 %145, 1
  store i64 %148, i64* %RSI, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %149, align 1, !tbaa !2432
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %151 = trunc i64 %148 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  store i8 %156, i8* %150, align 1, !tbaa !2432
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %157, align 1, !tbaa !2432
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %159 = icmp eq i64 %148, 0
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %158, align 1, !tbaa !2432
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %162 = lshr i64 %148, 63
  %163 = trunc i64 %162 to i8
  store i8 %163, i8* %161, align 1, !tbaa !2432
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %164, align 1, !tbaa !2432
  %165 = load i64, i64* %RBP
  %166 = sub i64 %165, 32
  %167 = load i64, i64* %RSI
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 32
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 2
  store i64 %178, i64* %PC
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %181 = load i64, i64* %180, align 8, !tbaa !2428
  %182 = ashr i64 %181, 63
  store i64 %182, i64* %179, align 8, !tbaa !2428
  %183 = load i64, i64* %RCX
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %187 = load i64, i64* %186, align 8, !tbaa !2428
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %189 = load i64, i64* %188, align 8, !tbaa !2428
  %190 = sext i64 %183 to i128
  %191 = and i128 %190, -18446744073709551616
  %192 = zext i64 %189 to i128
  %193 = shl nuw i128 %192, 64
  %194 = zext i64 %187 to i128
  %195 = or i128 %193, %194
  %196 = zext i64 %183 to i128
  %197 = or i128 %191, %196
  %198 = sdiv i128 %195, %197
  %199 = trunc i128 %198 to i64
  %200 = and i128 %198, 18446744073709551615
  %201 = sext i64 %199 to i128
  %202 = and i128 %201, -18446744073709551616
  %203 = or i128 %202, %200
  %204 = icmp eq i128 %198, %203
  br i1 %204, label %209, label %205

; <label>:205:                                    ; preds = %block_404ad0
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %207, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:209:                                    ; preds = %block_404ad0
  %210 = srem i128 %195, %197
  %211 = trunc i128 %210 to i64
  store i64 %199, i64* %186, align 8, !tbaa !2428
  store i64 %211, i64* %188, align 8, !tbaa !2428
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %212, align 1, !tbaa !2433
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %213, align 1, !tbaa !2447
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %214, align 1, !tbaa !2448
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %215, align 1, !tbaa !2449
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %216, align 1, !tbaa !2450
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %217, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %205, %209
  %218 = phi %struct.Memory* [ %208, %205 ], [ %2, %209 ]
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 4
  store i64 %221, i64* %PC
  %222 = sub i64 %219, 1
  store i64 %222, i64* %RAX, align 8, !tbaa !2428
  %223 = icmp ult i64 %219, 1
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %224, i8* %225, align 1, !tbaa !2433
  %226 = trunc i64 %222 to i32
  %227 = and i32 %226, 255
  %228 = call i32 @llvm.ctpop.i32(i32 %227) #16
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %231, i8* %232, align 1, !tbaa !2447
  %233 = xor i64 1, %219
  %234 = xor i64 %233, %222
  %235 = lshr i64 %234, 4
  %236 = trunc i64 %235 to i8
  %237 = and i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %237, i8* %238, align 1, !tbaa !2448
  %239 = icmp eq i64 %222, 0
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %240, i8* %241, align 1, !tbaa !2449
  %242 = lshr i64 %222, 63
  %243 = trunc i64 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %243, i8* %244, align 1, !tbaa !2450
  %245 = lshr i64 %219, 63
  %246 = xor i64 %242, %245
  %247 = add nuw nsw i64 %246, %245
  %248 = icmp eq i64 %247, 2
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %249, i8* %250, align 1, !tbaa !2451
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 24
  %253 = load i64, i64* %RAX
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %252 to i64*
  store i64 %253, i64* %256
  br label %block_404b0b

block_404bb4:                                     ; preds = %block_404b5b
  %257 = load i64, i64* %RSP
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 4
  store i64 %259, i64* %PC
  %260 = add i64 48, %257
  store i64 %260, i64* %RSP, align 8, !tbaa !2428
  %261 = icmp ult i64 %260, %257
  %262 = icmp ult i64 %260, 48
  %263 = or i1 %261, %262
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %264, i8* %265, align 1, !tbaa !2433
  %266 = trunc i64 %260 to i32
  %267 = and i32 %266, 255
  %268 = call i32 @llvm.ctpop.i32(i32 %267) #16
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %271, i8* %272, align 1, !tbaa !2447
  %273 = xor i64 48, %257
  %274 = xor i64 %273, %260
  %275 = lshr i64 %274, 4
  %276 = trunc i64 %275 to i8
  %277 = and i8 %276, 1
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %277, i8* %278, align 1, !tbaa !2448
  %279 = icmp eq i64 %260, 0
  %280 = zext i1 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %280, i8* %281, align 1, !tbaa !2449
  %282 = lshr i64 %260, 63
  %283 = trunc i64 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %283, i8* %284, align 1, !tbaa !2450
  %285 = lshr i64 %257, 63
  %286 = xor i64 %282, %285
  %287 = add nuw nsw i64 %286, %282
  %288 = icmp eq i64 %287, 2
  %289 = zext i1 %288 to i8
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %289, i8* %290, align 1, !tbaa !2451
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 1
  store i64 %292, i64* %PC
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %294 = load i64, i64* %293, align 8, !tbaa !2428
  %295 = add i64 %294, 8
  %296 = inttoptr i64 %294 to i64*
  %297 = load i64, i64* %296
  store i64 %297, i64* %RBP, align 8, !tbaa !2428
  store i64 %295, i64* %293, align 8, !tbaa !2428
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 1
  store i64 %299, i64* %PC
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %302 = load i64, i64* %301, align 8, !tbaa !2428
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  store i64 %304, i64* %300, align 8, !tbaa !2428
  %305 = add i64 %302, 8
  store i64 %305, i64* %301, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404b4f:                                     ; preds = %block_404b0b
  %306 = sub i64 %518, 32
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 4
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i64*
  %310 = load i64, i64* %309
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = load i64, i64* %RAX
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 4
  store i64 %313, i64* %PC
  %314 = sub i64 %311, 1
  store i64 %314, i64* %RAX, align 8, !tbaa !2428
  %315 = icmp ult i64 %311, 1
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %316, i8* %317, align 1, !tbaa !2433
  %318 = trunc i64 %314 to i32
  %319 = and i32 %318, 255
  %320 = call i32 @llvm.ctpop.i32(i32 %319) #16
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %323, i8* %324, align 1, !tbaa !2447
  %325 = xor i64 1, %311
  %326 = xor i64 %325, %314
  %327 = lshr i64 %326, 4
  %328 = trunc i64 %327 to i8
  %329 = and i8 %328, 1
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %329, i8* %330, align 1, !tbaa !2448
  %331 = icmp eq i64 %314, 0
  %332 = zext i1 %331 to i8
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %332, i8* %333, align 1, !tbaa !2449
  %334 = lshr i64 %314, 63
  %335 = trunc i64 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %335, i8* %336, align 1, !tbaa !2450
  %337 = lshr i64 %311, 63
  %338 = xor i64 %334, %337
  %339 = add nuw nsw i64 %338, %337
  %340 = icmp eq i64 %339, 2
  %341 = zext i1 %340 to i8
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %341, i8* %342, align 1, !tbaa !2451
  %343 = load i64, i64* %RBP
  %344 = sub i64 %343, 24
  %345 = load i64, i64* %RAX
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 4
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %344 to i64*
  store i64 %345, i64* %348
  br label %block_404b5b

block_404b16:                                     ; preds = %block_404b0b
  %349 = sub i64 %518, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 24
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %RCX, align 8, !tbaa !2428
  %360 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %361 = load i64, i64* %RAX
  %362 = load i64, i64* %RCX
  %363 = mul i64 %362, 8
  %364 = add i64 %363, %361
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to double*
  %368 = load double, double* %367
  %369 = bitcast i8* %360 to double*
  store double %368, double* %369, align 1, !tbaa !2452
  %370 = getelementptr inbounds i8, i8* %360, i64 8
  %371 = bitcast i8* %370 to double*
  store double 0.000000e+00, double* %371, align 1, !tbaa !2452
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 40
  %374 = bitcast %union.vec128_t* %XMM0 to i8*
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 5
  store i64 %376, i64* %PC
  %377 = bitcast i8* %374 to double*
  %378 = load double, double* %377, align 1
  %379 = inttoptr i64 %373 to double*
  store double %378, double* %379
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 32
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %RDI, align 8, !tbaa !2428
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 8
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %387 to i64*
  %391 = load i64, i64* %390
  store i64 %391, i64* %RSI, align 8, !tbaa !2428
  %392 = load i64, i64* %RBP
  %393 = sub i64 %392, 24
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396
  store i64 %397, i64* %RDX, align 8, !tbaa !2428
  %398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %399 = load i64, i64* %RBP
  %400 = sub i64 %399, 40
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 5
  store i64 %402, i64* %PC
  %403 = inttoptr i64 %400 to double*
  %404 = load double, double* %403
  %405 = bitcast i8* %398 to double*
  store double %404, double* %405, align 1, !tbaa !2452
  %406 = getelementptr inbounds i8, i8* %398, i64 8
  %407 = bitcast i8* %406 to double*
  store double 0.000000e+00, double* %407, align 1, !tbaa !2452
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 343
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 5
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 5
  store i64 %413, i64* %PC
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %415 = load i64, i64* %414, align 8, !tbaa !2428
  %416 = add i64 %415, -8
  %417 = inttoptr i64 %416 to i64*
  store i64 %411, i64* %417
  store i64 %416, i64* %414, align 8, !tbaa !2428
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %409, i64* %418, align 8, !tbaa !2428
  %419 = load i64, i64* %PC
  %420 = call %struct.Memory* @sub_404c90__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* %0, i64 %419, %struct.Memory* %MEMORY.0)
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 24
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC
  %430 = add i64 -1, %427
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = icmp ult i64 %430, %427
  %432 = icmp ult i64 %430, -1
  %433 = or i1 %431, %432
  %434 = zext i1 %433 to i8
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %434, i8* %435, align 1, !tbaa !2433
  %436 = trunc i64 %430 to i32
  %437 = and i32 %436, 255
  %438 = call i32 @llvm.ctpop.i32(i32 %437) #16
  %439 = trunc i32 %438 to i8
  %440 = and i8 %439, 1
  %441 = xor i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = xor i64 -1, %427
  %444 = xor i64 %443, %430
  %445 = lshr i64 %444, 4
  %446 = trunc i64 %445 to i8
  %447 = and i8 %446, 1
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = icmp eq i64 %430, 0
  %450 = zext i1 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %430, 63
  %453 = trunc i64 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %453, i8* %454, align 1, !tbaa !2450
  %455 = lshr i64 %427, 63
  %456 = xor i64 %452, %455
  %457 = xor i64 %452, 1
  %458 = add nuw nsw i64 %456, %457
  %459 = icmp eq i64 %458, 2
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %460, i8* %461, align 1, !tbaa !2451
  %462 = load i64, i64* %RBP
  %463 = sub i64 %462, 24
  %464 = load i64, i64* %RAX
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 4
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %463 to i64*
  store i64 %464, i64* %467
  %468 = load i64, i64* %PC
  %469 = sub i64 %468, 63
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 5
  store i64 %471, i64* %PC
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %469, i64* %472, align 8, !tbaa !2428
  br label %block_404b0b

block_404b0b:                                     ; preds = %block_404b16, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %218, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %420, %block_404b16 ]
  %473 = load i64, i64* %RBP
  %474 = sub i64 %473, 24
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %474 to i64*
  %478 = load i64, i64* %477
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %479, align 1, !tbaa !2433
  %480 = trunc i64 %478 to i32
  %481 = and i32 %480, 255
  %482 = call i32 @llvm.ctpop.i32(i32 %481) #16
  %483 = trunc i32 %482 to i8
  %484 = and i8 %483, 1
  %485 = xor i8 %484, 1
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %485, i8* %486, align 1, !tbaa !2447
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %487, align 1, !tbaa !2448
  %488 = icmp eq i64 %478, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2449
  %491 = lshr i64 %478, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2450
  %494 = lshr i64 %478, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %494
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2451
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 63
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 6
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 6
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %507 = load i8, i8* %506, align 1, !tbaa !2450
  %508 = icmp ne i8 %507, 0
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %510 = load i8, i8* %509, align 1, !tbaa !2451
  %511 = icmp ne i8 %510, 0
  %512 = xor i1 %508, %511
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %515 = select i1 %512, i64 %501, i64 %503
  store i64 %515, i64* %514, align 8, !tbaa !2428
  %516 = load i8, i8* %BRANCH_TAKEN
  %517 = icmp eq i8 %516, 1
  %518 = load i64, i64* %RBP
  br i1 %517, label %block_404b4f, label %block_404b16

block_404b5b:                                     ; preds = %block_404b66, %block_404b4f
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_404b4f ], [ %703, %block_404b66 ]
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 24
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 5
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i64*
  %524 = load i64, i64* %523
  %525 = sub i64 %524, 1
  %526 = icmp ult i64 %524, 1
  %527 = zext i1 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %527, i8* %528, align 1, !tbaa !2433
  %529 = trunc i64 %525 to i32
  %530 = and i32 %529, 255
  %531 = call i32 @llvm.ctpop.i32(i32 %530) #16
  %532 = trunc i32 %531 to i8
  %533 = and i8 %532, 1
  %534 = xor i8 %533, 1
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %534, i8* %535, align 1, !tbaa !2447
  %536 = xor i64 %524, 1
  %537 = xor i64 %536, %525
  %538 = lshr i64 %537, 4
  %539 = trunc i64 %538 to i8
  %540 = and i8 %539, 1
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %540, i8* %541, align 1, !tbaa !2448
  %542 = icmp eq i64 %525, 0
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %543, i8* %544, align 1, !tbaa !2449
  %545 = lshr i64 %525, 63
  %546 = trunc i64 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %546, i8* %547, align 1, !tbaa !2450
  %548 = lshr i64 %524, 63
  %549 = xor i64 %545, %548
  %550 = add nuw nsw i64 %549, %548
  %551 = icmp eq i64 %550, 2
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %552, i8* %553, align 1, !tbaa !2451
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 84
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 6
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 6
  store i64 %559, i64* %PC
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %561 = load i8, i8* %560, align 1, !tbaa !2450
  %562 = icmp ne i8 %561, 0
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %564 = load i8, i8* %563, align 1, !tbaa !2451
  %565 = icmp ne i8 %564, 0
  %566 = xor i1 %562, %565
  %567 = zext i1 %566 to i8
  store i8 %567, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %569 = select i1 %566, i64 %555, i64 %557
  store i64 %569, i64* %568, align 8, !tbaa !2428
  %570 = load i8, i8* %BRANCH_TAKEN
  %571 = icmp eq i8 %570, 1
  br i1 %571, label %block_404bb4, label %block_404b66

block_404b66:                                     ; preds = %block_404b5b
  %572 = load i64, i64* %RAX
  %573 = load i32, i32* %EAX
  %574 = zext i32 %573 to i64
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 2
  store i64 %576, i64* %PC
  %577 = xor i64 %574, %572
  %578 = trunc i64 %577 to i32
  %579 = and i64 %577, 4294967295
  store i64 %579, i64* %RAX, align 8, !tbaa !2428
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %580, align 1, !tbaa !2433
  %581 = and i32 %578, 255
  %582 = call i32 @llvm.ctpop.i32(i32 %581) #16
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  %585 = xor i8 %584, 1
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %585, i8* %586, align 1, !tbaa !2447
  %587 = icmp eq i32 %578, 0
  %588 = zext i1 %587 to i8
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %588, i8* %589, align 1, !tbaa !2449
  %590 = lshr i32 %578, 31
  %591 = trunc i32 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %591, i8* %592, align 1, !tbaa !2450
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %593, align 1, !tbaa !2451
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %594, align 1, !tbaa !2448
  %595 = load i32, i32* %EAX
  %596 = zext i32 %595 to i64
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 2
  store i64 %598, i64* %PC
  %599 = and i64 %596, 4294967295
  store i64 %599, i64* %RDX, align 8, !tbaa !2428
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 8
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 4
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RCX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 24
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  %610 = inttoptr i64 %607 to i64*
  %611 = load i64, i64* %610
  store i64 %611, i64* %RSI, align 8, !tbaa !2428
  %612 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %613 = load i64, i64* %RCX
  %614 = load i64, i64* %RSI
  %615 = mul i64 %614, 8
  %616 = add i64 %615, %613
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 5
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to double*
  %620 = load double, double* %619
  %621 = bitcast i8* %612 to double*
  store double %620, double* %621, align 1, !tbaa !2452
  %622 = getelementptr inbounds i8, i8* %612, i64 8
  %623 = bitcast i8* %622 to double*
  store double 0.000000e+00, double* %623, align 1, !tbaa !2452
  %624 = load i64, i64* %RBP
  %625 = sub i64 %624, 48
  %626 = bitcast %union.vec128_t* %XMM0 to i8*
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  %629 = bitcast i8* %626 to double*
  %630 = load double, double* %629, align 1
  %631 = inttoptr i64 %625 to double*
  store double %630, double* %631
  %632 = load i64, i64* %RBP
  %633 = sub i64 %632, 8
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to i64*
  %637 = load i64, i64* %636
  store i64 %637, i64* %RCX, align 8, !tbaa !2428
  %638 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %639 = load i64, i64* %RCX
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 4
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to double*
  %643 = load double, double* %642
  %644 = bitcast i8* %638 to double*
  store double %643, double* %644, align 1, !tbaa !2452
  %645 = getelementptr inbounds i8, i8* %638, i64 8
  %646 = bitcast i8* %645 to double*
  store double 0.000000e+00, double* %646, align 1, !tbaa !2452
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 8
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RCX, align 8, !tbaa !2428
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 24
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RSI, align 8, !tbaa !2428
  %659 = load i64, i64* %RCX
  %660 = load i64, i64* %RSI
  %661 = mul i64 %660, 8
  %662 = add i64 %661, %659
  %663 = bitcast %union.vec128_t* %XMM0 to i8*
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 5
  store i64 %665, i64* %PC
  %666 = bitcast i8* %663 to double*
  %667 = load double, double* %666, align 1
  %668 = inttoptr i64 %662 to double*
  store double %667, double* %668
  %669 = load i64, i64* %RBP
  %670 = sub i64 %669, 24
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 4
  store i64 %672, i64* %PC
  %673 = inttoptr i64 %670 to i64*
  %674 = load i64, i64* %673
  store i64 %674, i64* %RDI, align 8, !tbaa !2428
  %675 = load i64, i64* %RBP
  %676 = sub i64 %675, 8
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 4
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %676 to i64*
  %680 = load i64, i64* %679
  store i64 %680, i64* %RSI, align 8, !tbaa !2428
  %681 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %682 = load i64, i64* %RBP
  %683 = sub i64 %682, 48
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  %686 = inttoptr i64 %683 to double*
  %687 = load double, double* %686
  %688 = bitcast i8* %681 to double*
  store double %687, double* %688, align 1, !tbaa !2452
  %689 = getelementptr inbounds i8, i8* %681, i64 8
  %690 = bitcast i8* %689 to double*
  store double 0.000000e+00, double* %690, align 1, !tbaa !2452
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 242
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 5
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 5
  store i64 %696, i64* %PC
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %698 = load i64, i64* %697, align 8, !tbaa !2428
  %699 = add i64 %698, -8
  %700 = inttoptr i64 %699 to i64*
  store i64 %694, i64* %700
  store i64 %699, i64* %697, align 8, !tbaa !2428
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %692, i64* %701, align 8, !tbaa !2428
  %702 = load i64, i64* %PC
  %703 = call %struct.Memory* @sub_404c90__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* %0, i64 %702, %struct.Memory* %MEMORY.1)
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 24
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 4
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %705 to i64*
  %709 = load i64, i64* %708
  store i64 %709, i64* %RAX, align 8, !tbaa !2428
  %710 = load i64, i64* %RAX
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 4
  store i64 %712, i64* %PC
  %713 = add i64 -1, %710
  store i64 %713, i64* %RAX, align 8, !tbaa !2428
  %714 = icmp ult i64 %713, %710
  %715 = icmp ult i64 %713, -1
  %716 = or i1 %714, %715
  %717 = zext i1 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %717, i8* %718, align 1, !tbaa !2433
  %719 = trunc i64 %713 to i32
  %720 = and i32 %719, 255
  %721 = call i32 @llvm.ctpop.i32(i32 %720) #16
  %722 = trunc i32 %721 to i8
  %723 = and i8 %722, 1
  %724 = xor i8 %723, 1
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %724, i8* %725, align 1, !tbaa !2447
  %726 = xor i64 -1, %710
  %727 = xor i64 %726, %713
  %728 = lshr i64 %727, 4
  %729 = trunc i64 %728 to i8
  %730 = and i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %730, i8* %731, align 1, !tbaa !2448
  %732 = icmp eq i64 %713, 0
  %733 = zext i1 %732 to i8
  %734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %733, i8* %734, align 1, !tbaa !2449
  %735 = lshr i64 %713, 63
  %736 = trunc i64 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %736, i8* %737, align 1, !tbaa !2450
  %738 = lshr i64 %710, 63
  %739 = xor i64 %735, %738
  %740 = xor i64 %735, 1
  %741 = add nuw nsw i64 %739, %740
  %742 = icmp eq i64 %741, 2
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %743, i8* %744, align 1, !tbaa !2451
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 24
  %747 = load i64, i64* %RAX
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %746 to i64*
  store i64 %747, i64* %750
  %751 = load i64, i64* %PC
  %752 = sub i64 %751, 84
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 5
  store i64 %754, i64* %PC
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %752, i64* %755, align 8, !tbaa !2428
  br label %block_404b5b
}

; Function Attrs: noinline
define %struct.Memory* @sub_401260_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401260:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 17
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %R8D = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 17
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %R8 = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 19
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R9 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %45 to %union.vec128_t*
  %46 = load i64, i64* %RBP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 1
  store i64 %48, i64* %PC
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %50 = load i64, i64* %49, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %46, i64* %52
  store i64 %51, i64* %49, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  store i64 %53, i64* %RBP, align 8, !tbaa !2428
  %56 = load i64, i64* %RSP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 7
  store i64 %58, i64* %PC
  %59 = sub i64 %56, 576
  store i64 %59, i64* %RSP, align 8, !tbaa !2428
  %60 = icmp ult i64 %56, 576
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %61, i8* %62, align 1, !tbaa !2433
  %63 = trunc i64 %59 to i32
  %64 = and i32 %63, 255
  %65 = call i32 @llvm.ctpop.i32(i32 %64) #16
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %68, i8* %69, align 1, !tbaa !2447
  %70 = xor i64 576, %56
  %71 = xor i64 %70, %59
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %74, i8* %75, align 1, !tbaa !2448
  %76 = icmp eq i64 %59, 0
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = lshr i64 %59, 63
  %80 = trunc i64 %79 to i8
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %80, i8* %81, align 1, !tbaa !2450
  %82 = lshr i64 %56, 63
  %83 = xor i64 %79, %82
  %84 = add nuw nsw i64 %83, %82
  %85 = icmp eq i64 %84, 2
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %86, i8* %87, align 1, !tbaa !2451
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 32
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 40
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %96 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %97 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %98 = bitcast %union.vec128_t* %XMM0 to i8*
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = bitcast i8* %97 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = getelementptr inbounds i8, i8* %97, i64 8
  %104 = bitcast i8* %103 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = bitcast i8* %98 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = getelementptr inbounds i8, i8* %98, i64 8
  %109 = bitcast i8* %108 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = xor i64 %107, %102
  %112 = xor i64 %110, %105
  %113 = trunc i64 %111 to i32
  %114 = lshr i64 %111, 32
  %115 = trunc i64 %114 to i32
  %116 = bitcast i8* %96 to i32*
  store i32 %113, i32* %116, align 1, !tbaa !2456
  %117 = getelementptr inbounds i8, i8* %96, i64 4
  %118 = bitcast i8* %117 to i32*
  store i32 %115, i32* %118, align 1, !tbaa !2456
  %119 = trunc i64 %112 to i32
  %120 = getelementptr inbounds i8, i8* %96, i64 8
  %121 = bitcast i8* %120 to i32*
  store i32 %119, i32* %121, align 1, !tbaa !2456
  %122 = lshr i64 %112, 32
  %123 = trunc i64 %122 to i32
  %124 = getelementptr inbounds i8, i8* %96, i64 12
  %125 = bitcast i8* %124 to i32*
  store i32 %123, i32* %125, align 1, !tbaa !2456
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 4
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 7
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  store i32 0, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i32, i32* %EDI
  %134 = zext i32 %133 to i64
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %132 to i32*
  store i32 %133, i32* %137
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 16
  %140 = load i64, i64* %RSI
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 24
  %146 = bitcast %union.vec128_t* %XMM0 to i8*
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = bitcast i8* %146 to double*
  %150 = load double, double* %149, align 1
  %151 = inttoptr i64 %145 to double*
  store double %150, double* %151
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 40
  %154 = bitcast %union.vec128_t* %XMM0 to i8*
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = bitcast i8* %154 to double*
  %158 = load double, double* %157, align 1
  %159 = inttoptr i64 %153 to double*
  store double %158, double* %159
  %160 = load i64, i64* %RAX
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 3
  store i64 %162, i64* %PC
  store i64 %160, i64* %RDI, align 8, !tbaa !2428
  %163 = load i64, i64* %RCX
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 3
  store i64 %165, i64* %PC
  store i64 %163, i64* %RSI, align 8, !tbaa !2428
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 2764
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 5
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %173 = load i64, i64* %172, align 8, !tbaa !2428
  %174 = add i64 %173, -8
  %175 = inttoptr i64 %174 to i64*
  store i64 %169, i64* %175
  store i64 %174, i64* %172, align 8, !tbaa !2428
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %167, i64* %176, align 8, !tbaa !2428
  %177 = load i64, i64* %PC
  %178 = call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %177, %struct.Memory* %2)
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 48
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  store i64 %180, i64* %RDI, align 8, !tbaa !2428
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 56
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC
  store i64 %184, i64* %RSI, align 8, !tbaa !2428
  %187 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %188 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %189 = bitcast %union.vec128_t* %XMM0 to i8*
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 3
  store i64 %191, i64* %PC
  %192 = bitcast i8* %188 to i64*
  %193 = load i64, i64* %192, align 1
  %194 = getelementptr inbounds i8, i8* %188, i64 8
  %195 = bitcast i8* %194 to i64*
  %196 = load i64, i64* %195, align 1
  %197 = bitcast i8* %189 to i64*
  %198 = load i64, i64* %197, align 1
  %199 = getelementptr inbounds i8, i8* %189, i64 8
  %200 = bitcast i8* %199 to i64*
  %201 = load i64, i64* %200, align 1
  %202 = xor i64 %198, %193
  %203 = xor i64 %201, %196
  %204 = trunc i64 %202 to i32
  %205 = lshr i64 %202, 32
  %206 = trunc i64 %205 to i32
  %207 = bitcast i8* %187 to i32*
  store i32 %204, i32* %207, align 1, !tbaa !2456
  %208 = getelementptr inbounds i8, i8* %187, i64 4
  %209 = bitcast i8* %208 to i32*
  store i32 %206, i32* %209, align 1, !tbaa !2456
  %210 = trunc i64 %203 to i32
  %211 = getelementptr inbounds i8, i8* %187, i64 8
  %212 = bitcast i8* %211 to i32*
  store i32 %210, i32* %212, align 1, !tbaa !2456
  %213 = lshr i64 %203, 32
  %214 = trunc i64 %213 to i32
  %215 = getelementptr inbounds i8, i8* %187, i64 12
  %216 = bitcast i8* %215 to i32*
  store i32 %214, i32* %216, align 1, !tbaa !2456
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 56
  %219 = bitcast %union.vec128_t* %XMM0 to i8*
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 5
  store i64 %221, i64* %PC
  %222 = bitcast i8* %219 to double*
  %223 = load double, double* %222, align 1
  %224 = inttoptr i64 %218 to double*
  store double %223, double* %224
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 2775
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  store i64 %230, i64* %PC
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %232 = load i64, i64* %231, align 8, !tbaa !2428
  %233 = add i64 %232, -8
  %234 = inttoptr i64 %233 to i64*
  store i64 %228, i64* %234
  store i64 %233, i64* %231, align 8, !tbaa !2428
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %226, i64* %235, align 8, !tbaa !2428
  %236 = load i64, i64* %PC
  %237 = call %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %236, %struct.Memory* %178)
  %238 = load i64, i64* %RBP
  %239 = sub i64 %238, 8
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %239 to i32*
  %243 = load i32, i32* %242
  %244 = sub i32 %243, 1
  %245 = icmp ult i32 %243, 1
  %246 = zext i1 %245 to i8
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %246, i8* %247, align 1, !tbaa !2433
  %248 = and i32 %244, 255
  %249 = call i32 @llvm.ctpop.i32(i32 %248) #16
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = xor i8 %251, 1
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %252, i8* %253, align 1, !tbaa !2447
  %254 = xor i32 %243, 1
  %255 = xor i32 %254, %244
  %256 = lshr i32 %255, 4
  %257 = trunc i32 %256 to i8
  %258 = and i8 %257, 1
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %258, i8* %259, align 1, !tbaa !2448
  %260 = icmp eq i32 %244, 0
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %261, i8* %262, align 1, !tbaa !2449
  %263 = lshr i32 %244, 31
  %264 = trunc i32 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %264, i8* %265, align 1, !tbaa !2450
  %266 = lshr i32 %243, 31
  %267 = xor i32 %263, %266
  %268 = add nuw nsw i32 %267, %266
  %269 = icmp eq i32 %268, 2
  %270 = zext i1 %269 to i8
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %270, i8* %271, align 1, !tbaa !2451
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 26
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 6
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 6
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %279 = load i8, i8* %278, align 1, !tbaa !2449
  %280 = icmp ne i8 %279, 0
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %282 = load i8, i8* %281, align 1, !tbaa !2450
  %283 = icmp ne i8 %282, 0
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %285 = load i8, i8* %284, align 1, !tbaa !2451
  %286 = icmp ne i8 %285, 0
  %287 = xor i1 %283, %286
  %288 = or i1 %280, %287
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %291 = select i1 %288, i64 %273, i64 %275
  store i64 %291, i64* %290, align 8, !tbaa !2428
  %292 = load i8, i8* %BRANCH_TAKEN
  %293 = icmp eq i8 %292, 1
  br i1 %293, label %block_4012cc, label %block_4012b8

block_4012b8:                                     ; preds = %block_401260
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 16
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = load i64, i64* %RAX
  %301 = add i64 %300, 8
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 4
  store i64 %303, i64* %PC
  %304 = inttoptr i64 %301 to i64*
  %305 = load i64, i64* %304
  store i64 %305, i64* %RDI, align 8, !tbaa !2428
  %306 = load i64, i64* %PC
  %307 = sub i64 %306, 2944
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 5
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %313 = load i64, i64* %312, align 8, !tbaa !2428
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 %309, i64* %315
  store i64 %314, i64* %312, align 8, !tbaa !2428
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %307, i64* %316, align 8, !tbaa !2428
  %317 = load i64, i64* %PC
  %318 = call %struct.Memory* @ext_620948_atoi(%struct.State* %0, i64 %317, %struct.Memory* %237)
  %319 = load i32, i32* %EAX
  %320 = zext i32 %319 to i64
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 7
  store i64 %322, i64* %PC
  store i32 %319, i32* bitcast (%iterations_type* @iterations to i32*)
  br label %block_4012cc

block_4012cc:                                     ; preds = %block_4012b8, %block_401260
  %MEMORY.0 = phi %struct.Memory* [ %237, %block_401260 ], [ %318, %block_4012b8 ]
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 8
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 4
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327
  %329 = sub i32 %328, 2
  %330 = icmp ult i32 %328, 2
  %331 = zext i1 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %331, i8* %332, align 1, !tbaa !2433
  %333 = and i32 %329, 255
  %334 = call i32 @llvm.ctpop.i32(i32 %333) #16
  %335 = trunc i32 %334 to i8
  %336 = and i8 %335, 1
  %337 = xor i8 %336, 1
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %337, i8* %338, align 1, !tbaa !2447
  %339 = xor i32 %328, 2
  %340 = xor i32 %339, %329
  %341 = lshr i32 %340, 4
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %343, i8* %344, align 1, !tbaa !2448
  %345 = icmp eq i32 %329, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i32 %329, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2450
  %351 = lshr i32 %328, 31
  %352 = xor i32 %348, %351
  %353 = add nuw nsw i32 %352, %351
  %354 = icmp eq i32 %353, 2
  %355 = zext i1 %354 to i8
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %355, i8* %356, align 1, !tbaa !2451
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 28
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 6
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 6
  store i64 %362, i64* %PC
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %364 = load i8, i8* %363, align 1, !tbaa !2449
  %365 = icmp ne i8 %364, 0
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %367 = load i8, i8* %366, align 1, !tbaa !2450
  %368 = icmp ne i8 %367, 0
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %370 = load i8, i8* %369, align 1, !tbaa !2451
  %371 = icmp ne i8 %370, 0
  %372 = xor i1 %368, %371
  %373 = or i1 %365, %372
  %374 = zext i1 %373 to i8
  store i8 %374, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %376 = select i1 %373, i64 %358, i64 %360
  store i64 %376, i64* %375, align 8, !tbaa !2428
  %377 = load i8, i8* %BRANCH_TAKEN
  %378 = icmp eq i8 %377, 1
  br i1 %378, label %block_4012ec, label %block_4012d6

block_4012d6:                                     ; preds = %block_4012cc
  %379 = load i64, i64* %RBP
  %380 = sub i64 %379, 16
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 4
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %380 to i64*
  %384 = load i64, i64* %383
  store i64 %384, i64* %RAX, align 8, !tbaa !2428
  %385 = load i64, i64* %RAX
  %386 = add i64 %385, 16
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 4
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i64*
  %390 = load i64, i64* %389
  store i64 %390, i64* %RDI, align 8, !tbaa !2428
  %391 = load i64, i64* %PC
  %392 = sub i64 %391, 3102
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 5
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  store i64 %396, i64* %PC
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %398 = load i64, i64* %397, align 8, !tbaa !2428
  %399 = add i64 %398, -8
  %400 = inttoptr i64 %399 to i64*
  store i64 %394, i64* %400
  store i64 %399, i64* %397, align 8, !tbaa !2428
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %392, i64* %401, align 8, !tbaa !2428
  %402 = load i64, i64* %PC
  %403 = call %struct.Memory* @ext_620900_atof(%struct.State* %0, i64 %402, %struct.Memory* %MEMORY.0)
  %404 = bitcast %union.vec128_t* %XMM0 to i8*
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 9
  store i64 %406, i64* %PC
  %407 = bitcast i8* %404 to double*
  %408 = load double, double* %407, align 1
  store double %408, double* bitcast (%init_value_type* @init_value to double*)
  br label %block_4012ec

block_4012ec:                                     ; preds = %block_4012d6, %block_4012cc
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4012cc ], [ %403, %block_4012d6 ]
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 9
  store i64 %410, i64* %PC
  %411 = load double, double* bitcast (%init_value_type* @init_value to double*)
  %412 = call double @llvm.trunc.f64(double %411) #16
  %413 = call double @llvm.fabs.f64(double %412) #16
  %414 = fcmp ogt double %413, 0x41DFFFFFFFC00000
  %415 = fptosi double %412 to i32
  %416 = zext i32 %415 to i64
  %417 = select i1 %414, i64 2147483648, i64 %416
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = load i64, i64* %RAX
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 3
  store i64 %420, i64* %PC
  %421 = trunc i64 %418 to i32
  %422 = add i32 123, %421
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = icmp ult i32 %422, %421
  %425 = icmp ult i32 %422, 123
  %426 = or i1 %424, %425
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %427, i8* %428, align 1, !tbaa !2433
  %429 = and i32 %422, 255
  %430 = call i32 @llvm.ctpop.i32(i32 %429) #16
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  %433 = xor i8 %432, 1
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %433, i8* %434, align 1, !tbaa !2447
  %435 = xor i64 123, %418
  %436 = trunc i64 %435 to i32
  %437 = xor i32 %436, %422
  %438 = lshr i32 %437, 4
  %439 = trunc i32 %438 to i8
  %440 = and i8 %439, 1
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %440, i8* %441, align 1, !tbaa !2448
  %442 = icmp eq i32 %422, 0
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %443, i8* %444, align 1, !tbaa !2449
  %445 = lshr i32 %422, 31
  %446 = trunc i32 %445 to i8
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %446, i8* %447, align 1, !tbaa !2450
  %448 = lshr i32 %421, 31
  %449 = xor i32 %445, %448
  %450 = add nuw nsw i32 %449, %445
  %451 = icmp eq i32 %450, 2
  %452 = zext i1 %451 to i8
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %452, i8* %453, align 1, !tbaa !2451
  %454 = load i32, i32* %EAX
  %455 = zext i32 %454 to i64
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 2
  store i64 %457, i64* %PC
  %458 = and i64 %455, 4294967295
  store i64 %458, i64* %RDI, align 8, !tbaa !2428
  %459 = load i64, i64* %PC
  %460 = sub i64 %459, 3050
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 5
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 5
  store i64 %464, i64* %PC
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %466 = load i64, i64* %465, align 8, !tbaa !2428
  %467 = add i64 %466, -8
  %468 = inttoptr i64 %467 to i64*
  store i64 %462, i64* %468
  store i64 %467, i64* %465, align 8, !tbaa !2428
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %460, i64* %469, align 8, !tbaa !2428
  %470 = load i64, i64* %PC
  %471 = call %struct.Memory* @ext_620930_srand(%struct.State* %0, i64 %470, %struct.Memory* %MEMORY.1)
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 8
  store i64 %473, i64* %PC
  %474 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i32 0, i32 0)
  store i64 %474, i64* %RDI, align 8, !tbaa !2428
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 8
  store i64 %476, i64* %PC
  %477 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i32 0, i32 0)
  store i64 %477, i64* %RSI, align 8, !tbaa !2428
  %478 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 9
  store i64 %480, i64* %PC
  %481 = load double, double* bitcast (%init_value_type* @init_value to double*)
  %482 = bitcast i8* %478 to double*
  store double %481, double* %482, align 1, !tbaa !2452
  %483 = getelementptr inbounds i8, i8* %478, i64 8
  %484 = bitcast i8* %483 to double*
  store double 0.000000e+00, double* %484, align 1, !tbaa !2452
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 2712
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 5
  store i64 %490, i64* %PC
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %492 = load i64, i64* %491, align 8, !tbaa !2428
  %493 = add i64 %492, -8
  %494 = inttoptr i64 %493 to i64*
  store i64 %488, i64* %494
  store i64 %493, i64* %491, align 8, !tbaa !2428
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %486, i64* %495, align 8, !tbaa !2428
  %496 = load i64, i64* %PC
  %497 = call %struct.Memory* @sub_401db0__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* %0, i64 %496, %struct.Memory* %471)
  %498 = load i64, i64* %RBP
  %499 = sub i64 %498, 64
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 4
  store i64 %501, i64* %PC
  store i64 %499, i64* %RDI, align 8, !tbaa !2428
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 10
  store i64 %503, i64* %PC
  store i64 ptrtoint (%init_value_type* @init_value to i64), i64* %RSI, align 8, !tbaa !2428
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i32 0, i32 0)
  store i64 %506, i64* %RCX, align 8, !tbaa !2428
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 8
  store i64 %508, i64* %PC
  %509 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i32 0, i32 0)
  store i64 %509, i64* %RDX, align 8, !tbaa !2428
  %510 = load i64, i64* %RBP
  %511 = sub i64 %510, 544
  %512 = load i64, i64* %RDX
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 7
  store i64 %514, i64* %PC
  %515 = inttoptr i64 %511 to i64*
  store i64 %512, i64* %515
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 552
  %518 = load i64, i64* %RCX
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 7
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %517 to i64*
  store i64 %518, i64* %521
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 2583
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 5
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 5
  store i64 %527, i64* %PC
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %529 = load i64, i64* %528, align 8, !tbaa !2428
  %530 = add i64 %529, -8
  %531 = inttoptr i64 %530 to i64*
  store i64 %525, i64* %531
  store i64 %530, i64* %528, align 8, !tbaa !2428
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %523, i64* %532, align 8, !tbaa !2428
  %533 = load i64, i64* %PC
  %534 = call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %533, %struct.Memory* %497)
  %535 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 64
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 5
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %537 to double*
  %541 = load double, double* %540
  %542 = bitcast i8* %535 to double*
  store double %541, double* %542, align 1, !tbaa !2452
  %543 = getelementptr inbounds i8, i8* %535, i64 8
  %544 = bitcast i8* %543 to double*
  store double 0.000000e+00, double* %544, align 1, !tbaa !2452
  %545 = load i64, i64* %RBP
  %546 = sub i64 %545, 552
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 7
  store i64 %548, i64* %PC
  %549 = inttoptr i64 %546 to i64*
  %550 = load i64, i64* %549
  store i64 %550, i64* %RDI, align 8, !tbaa !2428
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 544
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 7
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %552 to i64*
  %556 = load i64, i64* %555
  store i64 %556, i64* %RSI, align 8, !tbaa !2428
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 2703
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 5
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 5
  store i64 %562, i64* %PC
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %564 = load i64, i64* %563, align 8, !tbaa !2428
  %565 = add i64 %564, -8
  %566 = inttoptr i64 %565 to i64*
  store i64 %560, i64* %566
  store i64 %565, i64* %563, align 8, !tbaa !2428
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %558, i64* %567, align 8, !tbaa !2428
  %568 = load i64, i64* %PC
  %569 = call %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* %0, i64 %568, %struct.Memory* %534)
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 72
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 4
  store i64 %573, i64* %PC
  store i64 %571, i64* %RDI, align 8, !tbaa !2428
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 10
  store i64 %575, i64* %PC
  store i64 ptrtoint (%init_value_type* @init_value to i64), i64* %RSI, align 8, !tbaa !2428
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 8
  store i64 %577, i64* %PC
  %578 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i32 0, i32 0)
  store i64 %578, i64* %RCX, align 8, !tbaa !2428
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 8
  store i64 %580, i64* %PC
  %581 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i32 0, i32 0)
  store i64 %581, i64* %RDX, align 8, !tbaa !2428
  %582 = load i64, i64* %RBP
  %583 = sub i64 %582, 560
  %584 = load i64, i64* %RDX
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 7
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %583 to i64*
  store i64 %584, i64* %587
  %588 = load i64, i64* %RBP
  %589 = sub i64 %588, 568
  %590 = load i64, i64* %RCX
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 7
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %589 to i64*
  store i64 %590, i64* %593
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 2542
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 5
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 5
  store i64 %599, i64* %PC
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %601 = load i64, i64* %600, align 8, !tbaa !2428
  %602 = add i64 %601, -8
  %603 = inttoptr i64 %602 to i64*
  store i64 %597, i64* %603
  store i64 %602, i64* %600, align 8, !tbaa !2428
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %595, i64* %604, align 8, !tbaa !2428
  %605 = load i64, i64* %PC
  %606 = call %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %605, %struct.Memory* %569)
  %607 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %608 = load i64, i64* %RBP
  %609 = sub i64 %608, 72
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 5
  store i64 %611, i64* %PC
  %612 = inttoptr i64 %609 to double*
  %613 = load double, double* %612
  %614 = bitcast i8* %607 to double*
  store double %613, double* %614, align 1, !tbaa !2452
  %615 = getelementptr inbounds i8, i8* %607, i64 8
  %616 = bitcast i8* %615 to double*
  store double 0.000000e+00, double* %616, align 1, !tbaa !2452
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 568
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i64*
  %622 = load i64, i64* %621
  store i64 %622, i64* %RDI, align 8, !tbaa !2428
  %623 = load i64, i64* %RBP
  %624 = sub i64 %623, 560
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 7
  store i64 %626, i64* %PC
  %627 = inttoptr i64 %624 to i64*
  %628 = load i64, i64* %627
  store i64 %628, i64* %RSI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 2694
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_401e30__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* %0, i64 %640, %struct.Memory* %606)
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 10
  store i64 %643, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 353), i64* %RDX, align 8, !tbaa !2428
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 8
  store i64 %645, i64* %PC
  %646 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i32 0, i32 0)
  store i64 %646, i64* %RDI, align 8, !tbaa !2428
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 8
  store i64 %648, i64* %PC
  %649 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i32 0, i32 0)
  store i64 %649, i64* %RSI, align 8, !tbaa !2428
  %650 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %651 = load i64, i64* %RBP
  %652 = sub i64 %651, 24
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 5
  store i64 %654, i64* %PC
  %655 = inttoptr i64 %652 to double*
  %656 = load double, double* %655
  %657 = bitcast i8* %650 to double*
  store double %656, double* %657, align 1, !tbaa !2452
  %658 = getelementptr inbounds i8, i8* %650, i64 8
  %659 = bitcast i8* %658 to double*
  store double 0.000000e+00, double* %659, align 1, !tbaa !2452
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 2722
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 5
  store i64 %665, i64* %PC
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %667 = load i64, i64* %666, align 8, !tbaa !2428
  %668 = add i64 %667, -8
  %669 = inttoptr i64 %668 to i64*
  store i64 %663, i64* %669
  store i64 %668, i64* %666, align 8, !tbaa !2428
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %661, i64* %670, align 8, !tbaa !2428
  %671 = load i64, i64* %PC
  %672 = call %struct.Memory* @sub_401e70__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* %0, i64 %671, %struct.Memory* %641)
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 10
  store i64 %674, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 383), i64* %RDX, align 8, !tbaa !2428
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 8
  store i64 %676, i64* %PC
  %677 = load i64, i64* bitcast (%dPb_type* @dPb to i64*)
  store i64 %677, i64* %RCX, align 8, !tbaa !2428
  %678 = load i64, i64* %RBP
  %679 = sub i64 %678, 80
  %680 = load i64, i64* %RCX
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC
  %683 = inttoptr i64 %679 to i64*
  store i64 %680, i64* %683
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 8
  store i64 %685, i64* %PC
  %686 = load i64, i64* bitcast (%dPe_type* @dPe to i64*)
  store i64 %686, i64* %RCX, align 8, !tbaa !2428
  %687 = load i64, i64* %RBP
  %688 = sub i64 %687, 88
  %689 = load i64, i64* %RCX
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 4
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %688 to i64*
  store i64 %689, i64* %692
  %693 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %694 = load i64, i64* %RBP
  %695 = sub i64 %694, 24
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 5
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to double*
  %699 = load double, double* %698
  %700 = bitcast i8* %693 to double*
  store double %699, double* %700, align 1, !tbaa !2452
  %701 = getelementptr inbounds i8, i8* %693, i64 8
  %702 = bitcast i8* %701 to double*
  store double 0.000000e+00, double* %702, align 1, !tbaa !2452
  %703 = load i64, i64* %RBP
  %704 = sub i64 %703, 80
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 4
  store i64 %706, i64* %PC
  %707 = inttoptr i64 %704 to i64*
  %708 = load i64, i64* %707
  store i64 %708, i64* %RDI, align 8, !tbaa !2428
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 88
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 4
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RSI, align 8, !tbaa !2428
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 2766
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 5
  store i64 %720, i64* %PC
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %722 = load i64, i64* %721, align 8, !tbaa !2428
  %723 = add i64 %722, -8
  %724 = inttoptr i64 %723 to i64*
  store i64 %718, i64* %724
  store i64 %723, i64* %721, align 8, !tbaa !2428
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %725, align 8, !tbaa !2428
  %726 = load i64, i64* %PC
  %727 = call %struct.Memory* @sub_401ed0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* %0, i64 %726, %struct.Memory* %672)
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 10
  store i64 %729, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 419), i64* %RDX, align 8, !tbaa !2428
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 8
  store i64 %731, i64* %PC
  %732 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i32 0, i32 0)
  store i64 %732, i64* %RDI, align 8, !tbaa !2428
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 8
  store i64 %734, i64* %PC
  %735 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i32 0, i32 0)
  store i64 %735, i64* %RSI, align 8, !tbaa !2428
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 32
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 4
  store i64 %739, i64* %PC
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740
  store i64 %741, i64* %RCX, align 8, !tbaa !2428
  %742 = load i64, i64* %RBP
  %743 = sub i64 %742, 96
  %744 = load i64, i64* %RCX
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 4
  store i64 %746, i64* %PC
  %747 = inttoptr i64 %743 to i64*
  store i64 %744, i64* %747
  %748 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %749 = load i64, i64* %RBP
  %750 = sub i64 %749, 96
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 5
  store i64 %752, i64* %PC
  %753 = inttoptr i64 %750 to double*
  %754 = load double, double* %753
  %755 = bitcast i8* %748 to double*
  store double %754, double* %755, align 1, !tbaa !2452
  %756 = getelementptr inbounds i8, i8* %748, i64 8
  %757 = bitcast i8* %756 to double*
  store double 0.000000e+00, double* %757, align 1, !tbaa !2452
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 2834
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 5
  store i64 %763, i64* %PC
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %765 = load i64, i64* %764, align 8, !tbaa !2428
  %766 = add i64 %765, -8
  %767 = inttoptr i64 %766 to i64*
  store i64 %761, i64* %767
  store i64 %766, i64* %764, align 8, !tbaa !2428
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %759, i64* %768, align 8, !tbaa !2428
  %769 = load i64, i64* %PC
  %770 = call %struct.Memory* @sub_401f40__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* %0, i64 %769, %struct.Memory* %727)
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 10
  store i64 %772, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 461), i64* %RDX, align 8, !tbaa !2428
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 8
  store i64 %774, i64* %PC
  %775 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*)
  store i64 %775, i64* %RCX, align 8, !tbaa !2428
  %776 = load i64, i64* %RBP
  %777 = sub i64 %776, 104
  %778 = load i64, i64* %RCX
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 4
  store i64 %780, i64* %PC
  %781 = inttoptr i64 %777 to i64*
  store i64 %778, i64* %781
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 8
  store i64 %783, i64* %PC
  %784 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*)
  store i64 %784, i64* %RCX, align 8, !tbaa !2428
  %785 = load i64, i64* %RBP
  %786 = sub i64 %785, 112
  %787 = load i64, i64* %RCX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 4
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %786 to i64*
  store i64 %787, i64* %790
  %791 = load i64, i64* %RBP
  %792 = sub i64 %791, 32
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 4
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %792 to i64*
  %796 = load i64, i64* %795
  store i64 %796, i64* %RCX, align 8, !tbaa !2428
  %797 = load i64, i64* %RBP
  %798 = sub i64 %797, 120
  %799 = load i64, i64* %RCX
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 4
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %798 to i64*
  store i64 %799, i64* %802
  %803 = load i64, i64* %RBP
  %804 = sub i64 %803, 104
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %804 to i64*
  %808 = load i64, i64* %807
  store i64 %808, i64* %RDI, align 8, !tbaa !2428
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 112
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %810 to i64*
  %814 = load i64, i64* %813
  store i64 %814, i64* %RSI, align 8, !tbaa !2428
  %815 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %816 = load i64, i64* %RBP
  %817 = sub i64 %816, 120
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 5
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %817 to double*
  %821 = load double, double* %820
  %822 = bitcast i8* %815 to double*
  store double %821, double* %822, align 1, !tbaa !2452
  %823 = getelementptr inbounds i8, i8* %815, i64 8
  %824 = bitcast i8* %823 to double*
  store double 0.000000e+00, double* %824, align 1, !tbaa !2452
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 2902
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_401fc0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* %0, i64 %836, %struct.Memory* %770)
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 10
  store i64 %839, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 509), i64* %RDX, align 8, !tbaa !2428
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 8
  store i64 %841, i64* %PC
  %842 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i32 0, i32 0)
  store i64 %842, i64* %RDI, align 8, !tbaa !2428
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 8
  store i64 %844, i64* %PC
  %845 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i32 0, i32 0)
  store i64 %845, i64* %RSI, align 8, !tbaa !2428
  %846 = load i64, i64* %RBP
  %847 = sub i64 %846, 48
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %847 to i64*
  %851 = load i64, i64* %850
  store i64 %851, i64* %RCX, align 8, !tbaa !2428
  %852 = load i64, i64* %RBP
  %853 = sub i64 %852, 128
  %854 = load i64, i64* %RCX
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 4
  store i64 %856, i64* %PC
  %857 = inttoptr i64 %853 to i64*
  store i64 %854, i64* %857
  %858 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %859 = load i64, i64* %RBP
  %860 = sub i64 %859, 128
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 5
  store i64 %862, i64* %PC
  %863 = inttoptr i64 %860 to double*
  %864 = load double, double* %863
  %865 = bitcast i8* %858 to double*
  store double %864, double* %865, align 1, !tbaa !2452
  %866 = getelementptr inbounds i8, i8* %858, i64 8
  %867 = bitcast i8* %866 to double*
  store double 0.000000e+00, double* %867, align 1, !tbaa !2452
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 3002
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 5
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 5
  store i64 %873, i64* %PC
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %875 = load i64, i64* %874, align 8, !tbaa !2428
  %876 = add i64 %875, -8
  %877 = inttoptr i64 %876 to i64*
  store i64 %871, i64* %877
  store i64 %876, i64* %874, align 8, !tbaa !2428
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %869, i64* %878, align 8, !tbaa !2428
  %879 = load i64, i64* %PC
  %880 = call %struct.Memory* @sub_402050__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* %0, i64 %879, %struct.Memory* %837)
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 10
  store i64 %882, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 553), i64* %RDX, align 8, !tbaa !2428
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 8
  store i64 %884, i64* %PC
  %885 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*)
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %886 = load i64, i64* %RBP
  %887 = sub i64 %886, 136
  %888 = load i64, i64* %RCX
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 7
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %887 to i64*
  store i64 %888, i64* %891
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 8
  store i64 %893, i64* %PC
  %894 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*)
  store i64 %894, i64* %RCX, align 8, !tbaa !2428
  %895 = load i64, i64* %RBP
  %896 = sub i64 %895, 144
  %897 = load i64, i64* %RCX
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 7
  store i64 %899, i64* %PC
  %900 = inttoptr i64 %896 to i64*
  store i64 %897, i64* %900
  %901 = load i64, i64* %RBP
  %902 = sub i64 %901, 48
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %902 to i64*
  %906 = load i64, i64* %905
  store i64 %906, i64* %RCX, align 8, !tbaa !2428
  %907 = load i64, i64* %RBP
  %908 = sub i64 %907, 152
  %909 = load i64, i64* %RCX
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 7
  store i64 %911, i64* %PC
  %912 = inttoptr i64 %908 to i64*
  store i64 %909, i64* %912
  %913 = load i64, i64* %RBP
  %914 = sub i64 %913, 136
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 7
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %914 to i64*
  %918 = load i64, i64* %917
  store i64 %918, i64* %RDI, align 8, !tbaa !2428
  %919 = load i64, i64* %RBP
  %920 = sub i64 %919, 144
  %921 = load i64, i64* %PC
  %922 = add i64 %921, 7
  store i64 %922, i64* %PC
  %923 = inttoptr i64 %920 to i64*
  %924 = load i64, i64* %923
  store i64 %924, i64* %RSI, align 8, !tbaa !2428
  %925 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %926 = load i64, i64* %RBP
  %927 = sub i64 %926, 152
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 8
  store i64 %929, i64* %PC
  %930 = inttoptr i64 %927 to double*
  %931 = load double, double* %930
  %932 = bitcast i8* %925 to double*
  store double %931, double* %932, align 1, !tbaa !2452
  %933 = getelementptr inbounds i8, i8* %925, i64 8
  %934 = bitcast i8* %933 to double*
  store double 0.000000e+00, double* %934, align 1, !tbaa !2452
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 3052
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 5
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 5
  store i64 %940, i64* %PC
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %942 = load i64, i64* %941, align 8, !tbaa !2428
  %943 = add i64 %942, -8
  %944 = inttoptr i64 %943 to i64*
  store i64 %938, i64* %944
  store i64 %943, i64* %941, align 8, !tbaa !2428
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %936, i64* %945, align 8, !tbaa !2428
  %946 = load i64, i64* %PC
  %947 = call %struct.Memory* @sub_4020d0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* %0, i64 %946, %struct.Memory* %880)
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 5
  store i64 %949, i64* %PC
  store i64 2000, i64* %RAX, align 8, !tbaa !2428
  %950 = bitcast i32* %R8D to i64*
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 8
  store i64 %952, i64* %PC
  %953 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %954 = zext i32 %953 to i64
  store i64 %954, i64* %950, align 8, !tbaa !2428
  %955 = load i64, i64* %RBP
  %956 = sub i64 %955, 572
  %957 = load i32, i32* %EAX
  %958 = zext i32 %957 to i64
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 6
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %956 to i32*
  store i32 %957, i32* %961
  %962 = load i32, i32* %R8D
  %963 = zext i32 %962 to i64
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 3
  store i64 %965, i64* %PC
  %966 = and i64 %963, 4294967295
  store i64 %966, i64* %RAX, align 8, !tbaa !2428
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 1
  store i64 %968, i64* %PC
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %971 = bitcast %union.anon* %970 to i32*
  %972 = load i32, i32* %971, align 8, !tbaa !2456
  %973 = sext i32 %972 to i64
  %974 = lshr i64 %973, 32
  store i64 %974, i64* %969, align 8, !tbaa !2428
  %975 = bitcast i32* %R8D to i64*
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 572
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 7
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i32*
  %981 = load i32, i32* %980
  %982 = zext i32 %981 to i64
  store i64 %982, i64* %975, align 8, !tbaa !2428
  %983 = load i32, i32* %R8D
  %984 = zext i32 %983 to i64
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 3
  store i64 %986, i64* %PC
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %988 = bitcast %union.anon* %987 to i32*
  %989 = load i32, i32* %988, align 8, !tbaa !2456
  %990 = zext i32 %989 to i64
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %992 = bitcast %union.anon* %991 to i32*
  %993 = load i32, i32* %992, align 8, !tbaa !2456
  %994 = zext i32 %993 to i64
  %995 = shl i64 %984, 32
  %996 = ashr exact i64 %995, 32
  %997 = shl nuw i64 %994, 32
  %998 = or i64 %997, %990
  %999 = sdiv i64 %998, %996
  %1000 = shl i64 %999, 32
  %1001 = ashr exact i64 %1000, 32
  %1002 = icmp eq i64 %999, %1001
  br i1 %1002, label %1007, label %1003

; <label>:1003:                                   ; preds = %block_4012ec
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1005 = load i64, i64* %1004, align 8, !tbaa !2428
  %1006 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1005, %struct.Memory* %947) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:1007:                                   ; preds = %block_4012ec
  %1008 = srem i64 %998, %996
  %1009 = getelementptr inbounds %union.anon, %union.anon* %987, i64 0, i32 0
  %1010 = and i64 %999, 4294967295
  store i64 %1010, i64* %1009, align 8, !tbaa !2428
  %1011 = getelementptr inbounds %union.anon, %union.anon* %991, i64 0, i32 0
  %1012 = and i64 %1008, 4294967295
  store i64 %1012, i64* %1011, align 8, !tbaa !2428
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1013, align 1, !tbaa !2433
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1014, align 1, !tbaa !2447
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1015, align 1, !tbaa !2448
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1016, align 1, !tbaa !2449
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1017, align 1, !tbaa !2450
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1018, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %1003, %1007
  %1019 = phi %struct.Memory* [ %1006, %1003 ], [ %947, %1007 ]
  %1020 = load i32, i32* %EAX
  %1021 = zext i32 %1020 to i64
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 7
  store i64 %1023, i64* %PC
  store i32 %1020, i32* bitcast (%iterations_type* @iterations to i32*)
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 8
  store i64 %1025, i64* %PC
  %1026 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i32 0, i32 0)
  store i64 %1026, i64* %RDI, align 8, !tbaa !2428
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 8
  store i64 %1028, i64* %PC
  %1029 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i32 0, i32 0)
  store i64 %1029, i64* %RSI, align 8, !tbaa !2428
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 3135
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 5
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 5
  store i64 %1035, i64* %PC
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1037 = load i64, i64* %1036, align 8, !tbaa !2428
  %1038 = add i64 %1037, -8
  %1039 = inttoptr i64 %1038 to i64*
  store i64 %1033, i64* %1039
  store i64 %1038, i64* %1036, align 8, !tbaa !2428
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1031, i64* %1040, align 8, !tbaa !2428
  %1041 = load i64, i64* %PC
  %1042 = call %struct.Memory* @sub_402160__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* %0, i64 %1041, %struct.Memory* %1019)
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 8
  store i64 %1044, i64* %PC
  %1045 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i32 0, i32 0)
  store i64 %1045, i64* %RDI, align 8, !tbaa !2428
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 8
  store i64 %1047, i64* %PC
  %1048 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i32 0, i32 0)
  store i64 %1048, i64* %RSI, align 8, !tbaa !2428
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 8
  store i64 %1050, i64* %PC
  %1051 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i32 0, i32 0)
  store i64 %1051, i64* %RCX, align 8, !tbaa !2428
  %1052 = load i64, i64* %RCX
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 3
  store i64 %1054, i64* %PC
  store i64 %1052, i64* %RDX, align 8, !tbaa !2428
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 3183
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 5
  store i64 %1060, i64* %PC
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1062 = load i64, i64* %1061, align 8, !tbaa !2428
  %1063 = add i64 %1062, -8
  %1064 = inttoptr i64 %1063 to i64*
  store i64 %1058, i64* %1064
  store i64 %1063, i64* %1061, align 8, !tbaa !2428
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1065, align 8, !tbaa !2428
  %1066 = load i64, i64* %PC
  %1067 = call %struct.Memory* @sub_4021b0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* %0, i64 %1066, %struct.Memory* %1042)
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 8
  store i64 %1069, i64* %PC
  %1070 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i32 0, i32 0)
  store i64 %1070, i64* %RDI, align 8, !tbaa !2428
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 8
  store i64 %1072, i64* %PC
  %1073 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i32 0, i32 0)
  store i64 %1073, i64* %RSI, align 8, !tbaa !2428
  %1074 = load i64, i64* %PC
  %1075 = add i64 %1074, 8
  store i64 %1075, i64* %PC
  %1076 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i32 0, i32 0)
  store i64 %1076, i64* %RDX, align 8, !tbaa !2428
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 3250
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 5
  store i64 %1082, i64* %PC
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1084 = load i64, i64* %1083, align 8, !tbaa !2428
  %1085 = add i64 %1084, -8
  %1086 = inttoptr i64 %1085 to i64*
  store i64 %1080, i64* %1086
  store i64 %1085, i64* %1083, align 8, !tbaa !2428
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1078, i64* %1087, align 8, !tbaa !2428
  %1088 = load i64, i64* %PC
  %1089 = call %struct.Memory* @sub_402210__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* %0, i64 %1088, %struct.Memory* %1067)
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 10
  store i64 %1091, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 338), i64* %R8, align 8, !tbaa !2428
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 8
  store i64 %1093, i64* %PC
  %1094 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i32 0, i32 0)
  store i64 %1094, i64* %RDI, align 8, !tbaa !2428
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 8
  store i64 %1096, i64* %PC
  %1097 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i32 0, i32 0)
  store i64 %1097, i64* %RSI, align 8, !tbaa !2428
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 8
  store i64 %1099, i64* %PC
  %1100 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i32 0, i32 0)
  store i64 %1100, i64* %RDX, align 8, !tbaa !2428
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 8
  store i64 %1102, i64* %PC
  %1103 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i32 0, i32 0)
  store i64 %1103, i64* %RCX, align 8, !tbaa !2428
  %1104 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 24
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 5
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1106 to double*
  %1110 = load double, double* %1109
  %1111 = bitcast i8* %1104 to double*
  store double %1110, double* %1111, align 1, !tbaa !2452
  %1112 = getelementptr inbounds i8, i8* %1104, i64 8
  %1113 = bitcast i8* %1112 to double*
  store double 0.000000e+00, double* %1113, align 1, !tbaa !2452
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3294
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 5
  store i64 %1119, i64* %PC
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1121 = load i64, i64* %1120, align 8, !tbaa !2428
  %1122 = add i64 %1121, -8
  %1123 = inttoptr i64 %1122 to i64*
  store i64 %1117, i64* %1123
  store i64 %1122, i64* %1120, align 8, !tbaa !2428
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1115, i64* %1124, align 8, !tbaa !2428
  %1125 = load i64, i64* %PC
  %1126 = call %struct.Memory* @sub_402270__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1125, %struct.Memory* %1089)
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 10
  store i64 %1128, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 368), i64* %R8, align 8, !tbaa !2428
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 8
  store i64 %1130, i64* %PC
  %1131 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*)
  store i64 %1131, i64* %RCX, align 8, !tbaa !2428
  %1132 = load i64, i64* %RBP
  %1133 = sub i64 %1132, 160
  %1134 = load i64, i64* %RCX
  %1135 = load i64, i64* %PC
  %1136 = add i64 %1135, 7
  store i64 %1136, i64* %PC
  %1137 = inttoptr i64 %1133 to i64*
  store i64 %1134, i64* %1137
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 8
  store i64 %1139, i64* %PC
  %1140 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*)
  store i64 %1140, i64* %RCX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RBP
  %1142 = sub i64 %1141, 168
  %1143 = load i64, i64* %RCX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 7
  store i64 %1145, i64* %PC
  %1146 = inttoptr i64 %1142 to i64*
  store i64 %1143, i64* %1146
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 8
  store i64 %1148, i64* %PC
  %1149 = load i64, i64* bitcast (%dPb_type* @dPb to i64*)
  store i64 %1149, i64* %RCX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 176
  %1152 = load i64, i64* %RCX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 7
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1151 to i64*
  store i64 %1152, i64* %1155
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 8
  store i64 %1157, i64* %PC
  %1158 = load i64, i64* bitcast (%dPe_type* @dPe to i64*)
  store i64 %1158, i64* %RCX, align 8, !tbaa !2428
  %1159 = load i64, i64* %RBP
  %1160 = sub i64 %1159, 184
  %1161 = load i64, i64* %RCX
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 7
  store i64 %1163, i64* %PC
  %1164 = inttoptr i64 %1160 to i64*
  store i64 %1161, i64* %1164
  %1165 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 24
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 5
  store i64 %1169, i64* %PC
  %1170 = inttoptr i64 %1167 to double*
  %1171 = load double, double* %1170
  %1172 = bitcast i8* %1165 to double*
  store double %1171, double* %1172, align 1, !tbaa !2452
  %1173 = getelementptr inbounds i8, i8* %1165, i64 8
  %1174 = bitcast i8* %1173 to double*
  store double 0.000000e+00, double* %1174, align 1, !tbaa !2452
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 160
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 7
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i64*
  %1180 = load i64, i64* %1179
  store i64 %1180, i64* %RDI, align 8, !tbaa !2428
  %1181 = load i64, i64* %RBP
  %1182 = sub i64 %1181, 168
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 7
  store i64 %1184, i64* %PC
  %1185 = inttoptr i64 %1182 to i64*
  %1186 = load i64, i64* %1185
  store i64 %1186, i64* %RSI, align 8, !tbaa !2428
  %1187 = load i64, i64* %RBP
  %1188 = sub i64 %1187, 176
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 7
  store i64 %1190, i64* %PC
  %1191 = inttoptr i64 %1188 to i64*
  %1192 = load i64, i64* %1191
  store i64 %1192, i64* %RDX, align 8, !tbaa !2428
  %1193 = load i64, i64* %RBP
  %1194 = sub i64 %1193, 184
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 7
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to i64*
  %1198 = load i64, i64* %1197
  store i64 %1198, i64* %RCX, align 8, !tbaa !2428
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 3314
  %1201 = load i64, i64* %PC
  %1202 = add i64 %1201, 5
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 5
  store i64 %1204, i64* %PC
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1206 = load i64, i64* %1205, align 8, !tbaa !2428
  %1207 = add i64 %1206, -8
  %1208 = inttoptr i64 %1207 to i64*
  store i64 %1202, i64* %1208
  store i64 %1207, i64* %1205, align 8, !tbaa !2428
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1200, i64* %1209, align 8, !tbaa !2428
  %1210 = load i64, i64* %PC
  %1211 = call %struct.Memory* @sub_4022f0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1210, %struct.Memory* %1126)
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 10
  store i64 %1213, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 404), i64* %R8, align 8, !tbaa !2428
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 8
  store i64 %1215, i64* %PC
  %1216 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i32 0, i32 0)
  store i64 %1216, i64* %RDI, align 8, !tbaa !2428
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 8
  store i64 %1218, i64* %PC
  %1219 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i32 0, i32 0)
  store i64 %1219, i64* %RSI, align 8, !tbaa !2428
  %1220 = load i64, i64* %PC
  %1221 = add i64 %1220, 8
  store i64 %1221, i64* %PC
  %1222 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i32 0, i32 0)
  store i64 %1222, i64* %RDX, align 8, !tbaa !2428
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 8
  store i64 %1224, i64* %PC
  %1225 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i32 0, i32 0)
  store i64 %1225, i64* %RCX, align 8, !tbaa !2428
  %1226 = load i64, i64* %RBP
  %1227 = sub i64 %1226, 32
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 4
  store i64 %1229, i64* %PC
  %1230 = inttoptr i64 %1227 to i64*
  %1231 = load i64, i64* %1230
  store i64 %1231, i64* %R9, align 8, !tbaa !2428
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 192
  %1234 = load i64, i64* %R9
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 7
  store i64 %1236, i64* %PC
  %1237 = inttoptr i64 %1233 to i64*
  store i64 %1234, i64* %1237
  %1238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1239 = load i64, i64* %RBP
  %1240 = sub i64 %1239, 192
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 8
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1240 to double*
  %1244 = load double, double* %1243
  %1245 = bitcast i8* %1238 to double*
  store double %1244, double* %1245, align 1, !tbaa !2452
  %1246 = getelementptr inbounds i8, i8* %1238, i64 8
  %1247 = bitcast i8* %1246 to double*
  store double 0.000000e+00, double* %1247, align 1, !tbaa !2452
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 3424
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 5
  %1252 = load i64, i64* %PC
  %1253 = add i64 %1252, 5
  store i64 %1253, i64* %PC
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1255 = load i64, i64* %1254, align 8, !tbaa !2428
  %1256 = add i64 %1255, -8
  %1257 = inttoptr i64 %1256 to i64*
  store i64 %1251, i64* %1257
  store i64 %1256, i64* %1254, align 8, !tbaa !2428
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1249, i64* %1258, align 8, !tbaa !2428
  %1259 = load i64, i64* %PC
  %1260 = call %struct.Memory* @sub_4023a0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1259, %struct.Memory* %1211)
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 10
  store i64 %1262, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 446), i64* %R8, align 8, !tbaa !2428
  %1263 = load i64, i64* %PC
  %1264 = add i64 %1263, 8
  store i64 %1264, i64* %PC
  %1265 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*)
  store i64 %1265, i64* %RCX, align 8, !tbaa !2428
  %1266 = load i64, i64* %RBP
  %1267 = sub i64 %1266, 200
  %1268 = load i64, i64* %RCX
  %1269 = load i64, i64* %PC
  %1270 = add i64 %1269, 7
  store i64 %1270, i64* %PC
  %1271 = inttoptr i64 %1267 to i64*
  store i64 %1268, i64* %1271
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 8
  store i64 %1273, i64* %PC
  %1274 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*)
  store i64 %1274, i64* %RCX, align 8, !tbaa !2428
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 208
  %1277 = load i64, i64* %RCX
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 7
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1276 to i64*
  store i64 %1277, i64* %1280
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 8
  store i64 %1282, i64* %PC
  %1283 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*)
  store i64 %1283, i64* %RCX, align 8, !tbaa !2428
  %1284 = load i64, i64* %RBP
  %1285 = sub i64 %1284, 216
  %1286 = load i64, i64* %RCX
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 7
  store i64 %1288, i64* %PC
  %1289 = inttoptr i64 %1285 to i64*
  store i64 %1286, i64* %1289
  %1290 = load i64, i64* %PC
  %1291 = add i64 %1290, 8
  store i64 %1291, i64* %PC
  %1292 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*)
  store i64 %1292, i64* %RCX, align 8, !tbaa !2428
  %1293 = load i64, i64* %RBP
  %1294 = sub i64 %1293, 224
  %1295 = load i64, i64* %RCX
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 7
  store i64 %1297, i64* %PC
  %1298 = inttoptr i64 %1294 to i64*
  store i64 %1295, i64* %1298
  %1299 = load i64, i64* %RBP
  %1300 = sub i64 %1299, 32
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 4
  store i64 %1302, i64* %PC
  %1303 = inttoptr i64 %1300 to i64*
  %1304 = load i64, i64* %1303
  store i64 %1304, i64* %RCX, align 8, !tbaa !2428
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 232
  %1307 = load i64, i64* %RCX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 7
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1306 to i64*
  store i64 %1307, i64* %1310
  %1311 = load i64, i64* %RBP
  %1312 = sub i64 %1311, 200
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 7
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1312 to i64*
  %1316 = load i64, i64* %1315
  store i64 %1316, i64* %RDI, align 8, !tbaa !2428
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 208
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 7
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i64*
  %1322 = load i64, i64* %1321
  store i64 %1322, i64* %RSI, align 8, !tbaa !2428
  %1323 = load i64, i64* %RBP
  %1324 = sub i64 %1323, 216
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 7
  store i64 %1326, i64* %PC
  %1327 = inttoptr i64 %1324 to i64*
  %1328 = load i64, i64* %1327
  store i64 %1328, i64* %RDX, align 8, !tbaa !2428
  %1329 = load i64, i64* %RBP
  %1330 = sub i64 %1329, 224
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 7
  store i64 %1332, i64* %PC
  %1333 = inttoptr i64 %1330 to i64*
  %1334 = load i64, i64* %1333
  store i64 %1334, i64* %RCX, align 8, !tbaa !2428
  %1335 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1336 = load i64, i64* %RBP
  %1337 = sub i64 %1336, 232
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 8
  store i64 %1339, i64* %PC
  %1340 = inttoptr i64 %1337 to double*
  %1341 = load double, double* %1340
  %1342 = bitcast i8* %1335 to double*
  store double %1341, double* %1342, align 1, !tbaa !2452
  %1343 = getelementptr inbounds i8, i8* %1335, i64 8
  %1344 = bitcast i8* %1343 to double*
  store double 0.000000e+00, double* %1344, align 1, !tbaa !2452
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 3430
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 5
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 5
  store i64 %1350, i64* %PC
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1352 = load i64, i64* %1351, align 8, !tbaa !2428
  %1353 = add i64 %1352, -8
  %1354 = inttoptr i64 %1353 to i64*
  store i64 %1348, i64* %1354
  store i64 %1353, i64* %1351, align 8, !tbaa !2428
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1346, i64* %1355, align 8, !tbaa !2428
  %1356 = load i64, i64* %PC
  %1357 = call %struct.Memory* @sub_402420__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1356, %struct.Memory* %1260)
  %1358 = load i64, i64* %PC
  %1359 = add i64 %1358, 10
  store i64 %1359, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 494), i64* %R8, align 8, !tbaa !2428
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 8
  store i64 %1361, i64* %PC
  %1362 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i32 0, i32 0)
  store i64 %1362, i64* %RDI, align 8, !tbaa !2428
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 8
  store i64 %1364, i64* %PC
  %1365 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i32 0, i32 0)
  store i64 %1365, i64* %RSI, align 8, !tbaa !2428
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 8
  store i64 %1367, i64* %PC
  %1368 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i32 0, i32 0)
  store i64 %1368, i64* %RDX, align 8, !tbaa !2428
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 8
  store i64 %1370, i64* %PC
  %1371 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i32 0, i32 0)
  store i64 %1371, i64* %RCX, align 8, !tbaa !2428
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 48
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 4
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to i64*
  %1377 = load i64, i64* %1376
  store i64 %1377, i64* %R9, align 8, !tbaa !2428
  %1378 = load i64, i64* %RBP
  %1379 = sub i64 %1378, 240
  %1380 = load i64, i64* %R9
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 7
  store i64 %1382, i64* %PC
  %1383 = inttoptr i64 %1379 to i64*
  store i64 %1380, i64* %1383
  %1384 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 240
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 8
  store i64 %1388, i64* %PC
  %1389 = inttoptr i64 %1386 to double*
  %1390 = load double, double* %1389
  %1391 = bitcast i8* %1384 to double*
  store double %1390, double* %1391, align 1, !tbaa !2452
  %1392 = getelementptr inbounds i8, i8* %1384, i64 8
  %1393 = bitcast i8* %1392 to double*
  store double 0.000000e+00, double* %1393, align 1, !tbaa !2452
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 3540
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 5
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 5
  store i64 %1399, i64* %PC
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1401 = load i64, i64* %1400, align 8, !tbaa !2428
  %1402 = add i64 %1401, -8
  %1403 = inttoptr i64 %1402 to i64*
  store i64 %1397, i64* %1403
  store i64 %1402, i64* %1400, align 8, !tbaa !2428
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1395, i64* %1404, align 8, !tbaa !2428
  %1405 = load i64, i64* %PC
  %1406 = call %struct.Memory* @sub_4024d0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1405, %struct.Memory* %1357)
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 10
  store i64 %1408, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 538), i64* %R8, align 8, !tbaa !2428
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 8
  store i64 %1410, i64* %PC
  %1411 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*)
  store i64 %1411, i64* %RCX, align 8, !tbaa !2428
  %1412 = load i64, i64* %RBP
  %1413 = sub i64 %1412, 248
  %1414 = load i64, i64* %RCX
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 7
  store i64 %1416, i64* %PC
  %1417 = inttoptr i64 %1413 to i64*
  store i64 %1414, i64* %1417
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 8
  store i64 %1419, i64* %PC
  %1420 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*)
  store i64 %1420, i64* %RCX, align 8, !tbaa !2428
  %1421 = load i64, i64* %RBP
  %1422 = sub i64 %1421, 256
  %1423 = load i64, i64* %RCX
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 7
  store i64 %1425, i64* %PC
  %1426 = inttoptr i64 %1422 to i64*
  store i64 %1423, i64* %1426
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 8
  store i64 %1428, i64* %PC
  %1429 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*)
  store i64 %1429, i64* %RCX, align 8, !tbaa !2428
  %1430 = load i64, i64* %RBP
  %1431 = sub i64 %1430, 264
  %1432 = load i64, i64* %RCX
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 7
  store i64 %1434, i64* %PC
  %1435 = inttoptr i64 %1431 to i64*
  store i64 %1432, i64* %1435
  %1436 = load i64, i64* %PC
  %1437 = add i64 %1436, 8
  store i64 %1437, i64* %PC
  %1438 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*)
  store i64 %1438, i64* %RCX, align 8, !tbaa !2428
  %1439 = load i64, i64* %RBP
  %1440 = sub i64 %1439, 272
  %1441 = load i64, i64* %RCX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 7
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1440 to i64*
  store i64 %1441, i64* %1444
  %1445 = load i64, i64* %RBP
  %1446 = sub i64 %1445, 48
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 4
  store i64 %1448, i64* %PC
  %1449 = inttoptr i64 %1446 to i64*
  %1450 = load i64, i64* %1449
  store i64 %1450, i64* %RCX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RBP
  %1452 = sub i64 %1451, 280
  %1453 = load i64, i64* %RCX
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 7
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1452 to i64*
  store i64 %1453, i64* %1456
  %1457 = load i64, i64* %RBP
  %1458 = sub i64 %1457, 248
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 7
  store i64 %1460, i64* %PC
  %1461 = inttoptr i64 %1458 to i64*
  %1462 = load i64, i64* %1461
  store i64 %1462, i64* %RDI, align 8, !tbaa !2428
  %1463 = load i64, i64* %RBP
  %1464 = sub i64 %1463, 256
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 7
  store i64 %1466, i64* %PC
  %1467 = inttoptr i64 %1464 to i64*
  %1468 = load i64, i64* %1467
  store i64 %1468, i64* %RSI, align 8, !tbaa !2428
  %1469 = load i64, i64* %RBP
  %1470 = sub i64 %1469, 264
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 7
  store i64 %1472, i64* %PC
  %1473 = inttoptr i64 %1470 to i64*
  %1474 = load i64, i64* %1473
  store i64 %1474, i64* %RDX, align 8, !tbaa !2428
  %1475 = load i64, i64* %RBP
  %1476 = sub i64 %1475, 272
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 7
  store i64 %1478, i64* %PC
  %1479 = inttoptr i64 %1476 to i64*
  %1480 = load i64, i64* %1479
  store i64 %1480, i64* %RCX, align 8, !tbaa !2428
  %1481 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1482 = load i64, i64* %RBP
  %1483 = sub i64 %1482, 280
  %1484 = load i64, i64* %PC
  %1485 = add i64 %1484, 8
  store i64 %1485, i64* %PC
  %1486 = inttoptr i64 %1483 to double*
  %1487 = load double, double* %1486
  %1488 = bitcast i8* %1481 to double*
  store double %1487, double* %1488, align 1, !tbaa !2452
  %1489 = getelementptr inbounds i8, i8* %1481, i64 8
  %1490 = bitcast i8* %1489 to double*
  store double 0.000000e+00, double* %1490, align 1, !tbaa !2452
  %1491 = load i64, i64* %PC
  %1492 = add i64 %1491, 3546
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 5
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 5
  store i64 %1496, i64* %PC
  %1497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1498 = load i64, i64* %1497, align 8, !tbaa !2428
  %1499 = add i64 %1498, -8
  %1500 = inttoptr i64 %1499 to i64*
  store i64 %1494, i64* %1500
  store i64 %1499, i64* %1497, align 8, !tbaa !2428
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1492, i64* %1501, align 8, !tbaa !2428
  %1502 = load i64, i64* %PC
  %1503 = call %struct.Memory* @sub_402550__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1502, %struct.Memory* %1406)
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 10
  store i64 %1505, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 588), i64* %R8, align 8, !tbaa !2428
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 7
  store i64 %1507, i64* %PC
  %1508 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %1509 = zext i32 %1508 to i64
  store i64 %1509, i64* %RAX, align 8, !tbaa !2428
  %1510 = load i64, i64* %RAX
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 3
  store i64 %1512, i64* %PC
  %1513 = and i64 %1510, 4294967295
  %1514 = shl i64 %1513, 2
  %1515 = trunc i64 %1514 to i32
  %1516 = icmp slt i32 %1515, 0
  %1517 = shl i32 %1515, 1
  %1518 = zext i32 %1517 to i64
  store i64 %1518, i64* %RAX, align 8, !tbaa !2428
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1520 = zext i1 %1516 to i8
  store i8 %1520, i8* %1519, align 1, !tbaa !2432
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1522 = and i32 %1517, 254
  %1523 = call i32 @llvm.ctpop.i32(i32 %1522) #16
  %1524 = trunc i32 %1523 to i8
  %1525 = and i8 %1524, 1
  %1526 = xor i8 %1525, 1
  store i8 %1526, i8* %1521, align 1, !tbaa !2432
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1527, align 1, !tbaa !2432
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1529 = icmp eq i32 %1517, 0
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %1528, align 1, !tbaa !2432
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1532 = lshr i32 %1517, 31
  %1533 = trunc i32 %1532 to i8
  store i8 %1533, i8* %1531, align 1, !tbaa !2432
  %1534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1534, align 1, !tbaa !2432
  %1535 = load i32, i32* %EAX
  %1536 = zext i32 %1535 to i64
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 7
  store i64 %1538, i64* %PC
  store i32 %1535, i32* bitcast (%iterations_type* @iterations to i32*)
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 8
  store i64 %1540, i64* %PC
  %1541 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i32 0, i32 0)
  store i64 %1541, i64* %RDI, align 8, !tbaa !2428
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 8
  store i64 %1543, i64* %PC
  %1544 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i32 0, i32 0)
  store i64 %1544, i64* %RSI, align 8, !tbaa !2428
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 8
  store i64 %1546, i64* %PC
  %1547 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i32 0, i32 0)
  store i64 %1547, i64* %RDX, align 8, !tbaa !2428
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 8
  store i64 %1549, i64* %PC
  %1550 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i32 0, i32 0)
  store i64 %1550, i64* %RCX, align 8, !tbaa !2428
  %1551 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1552 = load i64, i64* %RBP
  %1553 = sub i64 %1552, 24
  %1554 = load i64, i64* %PC
  %1555 = add i64 %1554, 5
  store i64 %1555, i64* %PC
  %1556 = inttoptr i64 %1553 to double*
  %1557 = load double, double* %1556
  %1558 = bitcast i8* %1551 to double*
  store double %1557, double* %1558, align 1, !tbaa !2452
  %1559 = getelementptr inbounds i8, i8* %1551, i64 8
  %1560 = bitcast i8* %1559 to double*
  store double 0.000000e+00, double* %1560, align 1, !tbaa !2452
  %1561 = load i64, i64* %PC
  %1562 = add i64 %1561, 3653
  %1563 = load i64, i64* %PC
  %1564 = add i64 %1563, 5
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 5
  store i64 %1566, i64* %PC
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1568 = load i64, i64* %1567, align 8, !tbaa !2428
  %1569 = add i64 %1568, -8
  %1570 = inttoptr i64 %1569 to i64*
  store i64 %1564, i64* %1570
  store i64 %1569, i64* %1567, align 8, !tbaa !2428
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1562, i64* %1571, align 8, !tbaa !2428
  %1572 = load i64, i64* %PC
  %1573 = call %struct.Memory* @sub_402600__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1572, %struct.Memory* %1503)
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 10
  store i64 %1575, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 613), i64* %R8, align 8, !tbaa !2428
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 8
  store i64 %1577, i64* %PC
  %1578 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*)
  store i64 %1578, i64* %RCX, align 8, !tbaa !2428
  %1579 = load i64, i64* %RBP
  %1580 = sub i64 %1579, 288
  %1581 = load i64, i64* %RCX
  %1582 = load i64, i64* %PC
  %1583 = add i64 %1582, 7
  store i64 %1583, i64* %PC
  %1584 = inttoptr i64 %1580 to i64*
  store i64 %1581, i64* %1584
  %1585 = load i64, i64* %PC
  %1586 = add i64 %1585, 8
  store i64 %1586, i64* %PC
  %1587 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*)
  store i64 %1587, i64* %RCX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RBP
  %1589 = sub i64 %1588, 296
  %1590 = load i64, i64* %RCX
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 7
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1589 to i64*
  store i64 %1590, i64* %1593
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 8
  store i64 %1595, i64* %PC
  %1596 = load i64, i64* bitcast (%dPb_type* @dPb to i64*)
  store i64 %1596, i64* %RCX, align 8, !tbaa !2428
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 304
  %1599 = load i64, i64* %RCX
  %1600 = load i64, i64* %PC
  %1601 = add i64 %1600, 7
  store i64 %1601, i64* %PC
  %1602 = inttoptr i64 %1598 to i64*
  store i64 %1599, i64* %1602
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 8
  store i64 %1604, i64* %PC
  %1605 = load i64, i64* bitcast (%dPe_type* @dPe to i64*)
  store i64 %1605, i64* %RCX, align 8, !tbaa !2428
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 312
  %1608 = load i64, i64* %RCX
  %1609 = load i64, i64* %PC
  %1610 = add i64 %1609, 7
  store i64 %1610, i64* %PC
  %1611 = inttoptr i64 %1607 to i64*
  store i64 %1608, i64* %1611
  %1612 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1613 = load i64, i64* %RBP
  %1614 = sub i64 %1613, 24
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 5
  store i64 %1616, i64* %PC
  %1617 = inttoptr i64 %1614 to double*
  %1618 = load double, double* %1617
  %1619 = bitcast i8* %1612 to double*
  store double %1618, double* %1619, align 1, !tbaa !2452
  %1620 = getelementptr inbounds i8, i8* %1612, i64 8
  %1621 = bitcast i8* %1620 to double*
  store double 0.000000e+00, double* %1621, align 1, !tbaa !2452
  %1622 = load i64, i64* %RBP
  %1623 = sub i64 %1622, 288
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 7
  store i64 %1625, i64* %PC
  %1626 = inttoptr i64 %1623 to i64*
  %1627 = load i64, i64* %1626
  store i64 %1627, i64* %RDI, align 8, !tbaa !2428
  %1628 = load i64, i64* %RBP
  %1629 = sub i64 %1628, 296
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 7
  store i64 %1631, i64* %PC
  %1632 = inttoptr i64 %1629 to i64*
  %1633 = load i64, i64* %1632
  store i64 %1633, i64* %RSI, align 8, !tbaa !2428
  %1634 = load i64, i64* %RBP
  %1635 = sub i64 %1634, 304
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 7
  store i64 %1637, i64* %PC
  %1638 = inttoptr i64 %1635 to i64*
  %1639 = load i64, i64* %1638
  store i64 %1639, i64* %RDX, align 8, !tbaa !2428
  %1640 = load i64, i64* %RBP
  %1641 = sub i64 %1640, 312
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 7
  store i64 %1643, i64* %PC
  %1644 = inttoptr i64 %1641 to i64*
  %1645 = load i64, i64* %1644
  store i64 %1645, i64* %RCX, align 8, !tbaa !2428
  %1646 = load i64, i64* %PC
  %1647 = add i64 %1646, 3673
  %1648 = load i64, i64* %PC
  %1649 = add i64 %1648, 5
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 5
  store i64 %1651, i64* %PC
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1653 = load i64, i64* %1652, align 8, !tbaa !2428
  %1654 = add i64 %1653, -8
  %1655 = inttoptr i64 %1654 to i64*
  store i64 %1649, i64* %1655
  store i64 %1654, i64* %1652, align 8, !tbaa !2428
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1647, i64* %1656, align 8, !tbaa !2428
  %1657 = load i64, i64* %PC
  %1658 = call %struct.Memory* @sub_402680__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1657, %struct.Memory* %1573)
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 10
  store i64 %1660, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 644), i64* %R8, align 8, !tbaa !2428
  %1661 = load i64, i64* %PC
  %1662 = add i64 %1661, 8
  store i64 %1662, i64* %PC
  %1663 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i32 0, i32 0)
  store i64 %1663, i64* %RDI, align 8, !tbaa !2428
  %1664 = load i64, i64* %PC
  %1665 = add i64 %1664, 8
  store i64 %1665, i64* %PC
  %1666 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i32 0, i32 0)
  store i64 %1666, i64* %RSI, align 8, !tbaa !2428
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 8
  store i64 %1668, i64* %PC
  %1669 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i32 0, i32 0)
  store i64 %1669, i64* %RDX, align 8, !tbaa !2428
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 8
  store i64 %1671, i64* %PC
  %1672 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i32 0, i32 0)
  store i64 %1672, i64* %RCX, align 8, !tbaa !2428
  %1673 = load i64, i64* %RBP
  %1674 = sub i64 %1673, 32
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1674 to i64*
  %1678 = load i64, i64* %1677
  store i64 %1678, i64* %R9, align 8, !tbaa !2428
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 320
  %1681 = load i64, i64* %R9
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 7
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1680 to i64*
  store i64 %1681, i64* %1684
  %1685 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1686 = load i64, i64* %RBP
  %1687 = sub i64 %1686, 320
  %1688 = load i64, i64* %PC
  %1689 = add i64 %1688, 8
  store i64 %1689, i64* %PC
  %1690 = inttoptr i64 %1687 to double*
  %1691 = load double, double* %1690
  %1692 = bitcast i8* %1685 to double*
  store double %1691, double* %1692, align 1, !tbaa !2452
  %1693 = getelementptr inbounds i8, i8* %1685, i64 8
  %1694 = bitcast i8* %1693 to double*
  store double 0.000000e+00, double* %1694, align 1, !tbaa !2452
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 3783
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 5
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 5
  store i64 %1700, i64* %PC
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1702 = load i64, i64* %1701, align 8, !tbaa !2428
  %1703 = add i64 %1702, -8
  %1704 = inttoptr i64 %1703 to i64*
  store i64 %1698, i64* %1704
  store i64 %1703, i64* %1701, align 8, !tbaa !2428
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1696, i64* %1705, align 8, !tbaa !2428
  %1706 = load i64, i64* %PC
  %1707 = call %struct.Memory* @sub_402730__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1706, %struct.Memory* %1658)
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 10
  store i64 %1709, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 681), i64* %R8, align 8, !tbaa !2428
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 8
  store i64 %1711, i64* %PC
  %1712 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*)
  store i64 %1712, i64* %RCX, align 8, !tbaa !2428
  %1713 = load i64, i64* %RBP
  %1714 = sub i64 %1713, 328
  %1715 = load i64, i64* %RCX
  %1716 = load i64, i64* %PC
  %1717 = add i64 %1716, 7
  store i64 %1717, i64* %PC
  %1718 = inttoptr i64 %1714 to i64*
  store i64 %1715, i64* %1718
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 8
  store i64 %1720, i64* %PC
  %1721 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*)
  store i64 %1721, i64* %RCX, align 8, !tbaa !2428
  %1722 = load i64, i64* %RBP
  %1723 = sub i64 %1722, 336
  %1724 = load i64, i64* %RCX
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 7
  store i64 %1726, i64* %PC
  %1727 = inttoptr i64 %1723 to i64*
  store i64 %1724, i64* %1727
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 8
  store i64 %1729, i64* %PC
  %1730 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*)
  store i64 %1730, i64* %RCX, align 8, !tbaa !2428
  %1731 = load i64, i64* %RBP
  %1732 = sub i64 %1731, 344
  %1733 = load i64, i64* %RCX
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 7
  store i64 %1735, i64* %PC
  %1736 = inttoptr i64 %1732 to i64*
  store i64 %1733, i64* %1736
  %1737 = load i64, i64* %PC
  %1738 = add i64 %1737, 8
  store i64 %1738, i64* %PC
  %1739 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*)
  store i64 %1739, i64* %RCX, align 8, !tbaa !2428
  %1740 = load i64, i64* %RBP
  %1741 = sub i64 %1740, 352
  %1742 = load i64, i64* %RCX
  %1743 = load i64, i64* %PC
  %1744 = add i64 %1743, 7
  store i64 %1744, i64* %PC
  %1745 = inttoptr i64 %1741 to i64*
  store i64 %1742, i64* %1745
  %1746 = load i64, i64* %RBP
  %1747 = sub i64 %1746, 32
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 4
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i64*
  %1751 = load i64, i64* %1750
  store i64 %1751, i64* %RCX, align 8, !tbaa !2428
  %1752 = load i64, i64* %RBP
  %1753 = sub i64 %1752, 360
  %1754 = load i64, i64* %RCX
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 7
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1753 to i64*
  store i64 %1754, i64* %1757
  %1758 = load i64, i64* %RBP
  %1759 = sub i64 %1758, 328
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 7
  store i64 %1761, i64* %PC
  %1762 = inttoptr i64 %1759 to i64*
  %1763 = load i64, i64* %1762
  store i64 %1763, i64* %RDI, align 8, !tbaa !2428
  %1764 = load i64, i64* %RBP
  %1765 = sub i64 %1764, 336
  %1766 = load i64, i64* %PC
  %1767 = add i64 %1766, 7
  store i64 %1767, i64* %PC
  %1768 = inttoptr i64 %1765 to i64*
  %1769 = load i64, i64* %1768
  store i64 %1769, i64* %RSI, align 8, !tbaa !2428
  %1770 = load i64, i64* %RBP
  %1771 = sub i64 %1770, 344
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 7
  store i64 %1773, i64* %PC
  %1774 = inttoptr i64 %1771 to i64*
  %1775 = load i64, i64* %1774
  store i64 %1775, i64* %RDX, align 8, !tbaa !2428
  %1776 = load i64, i64* %RBP
  %1777 = sub i64 %1776, 352
  %1778 = load i64, i64* %PC
  %1779 = add i64 %1778, 7
  store i64 %1779, i64* %PC
  %1780 = inttoptr i64 %1777 to i64*
  %1781 = load i64, i64* %1780
  store i64 %1781, i64* %RCX, align 8, !tbaa !2428
  %1782 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1783 = load i64, i64* %RBP
  %1784 = sub i64 %1783, 360
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 8
  store i64 %1786, i64* %PC
  %1787 = inttoptr i64 %1784 to double*
  %1788 = load double, double* %1787
  %1789 = bitcast i8* %1782 to double*
  store double %1788, double* %1789, align 1, !tbaa !2452
  %1790 = getelementptr inbounds i8, i8* %1782, i64 8
  %1791 = bitcast i8* %1790 to double*
  store double 0.000000e+00, double* %1791, align 1, !tbaa !2452
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 3789
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 5
  %1796 = load i64, i64* %PC
  %1797 = add i64 %1796, 5
  store i64 %1797, i64* %PC
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1799 = load i64, i64* %1798, align 8, !tbaa !2428
  %1800 = add i64 %1799, -8
  %1801 = inttoptr i64 %1800 to i64*
  store i64 %1795, i64* %1801
  store i64 %1800, i64* %1798, align 8, !tbaa !2428
  %1802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1793, i64* %1802, align 8, !tbaa !2428
  %1803 = load i64, i64* %PC
  %1804 = call %struct.Memory* @sub_4027b0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1803, %struct.Memory* %1707)
  %1805 = load i64, i64* %PC
  %1806 = add i64 %1805, 10
  store i64 %1806, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 724), i64* %R8, align 8, !tbaa !2428
  %1807 = load i64, i64* %PC
  %1808 = add i64 %1807, 8
  store i64 %1808, i64* %PC
  %1809 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i32 0, i32 0)
  store i64 %1809, i64* %RDI, align 8, !tbaa !2428
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 8
  store i64 %1811, i64* %PC
  %1812 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i32 0, i32 0)
  store i64 %1812, i64* %RSI, align 8, !tbaa !2428
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 8
  store i64 %1814, i64* %PC
  %1815 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i32 0, i32 0)
  store i64 %1815, i64* %RDX, align 8, !tbaa !2428
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 8
  store i64 %1817, i64* %PC
  %1818 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i32 0, i32 0)
  store i64 %1818, i64* %RCX, align 8, !tbaa !2428
  %1819 = load i64, i64* %RBP
  %1820 = sub i64 %1819, 48
  %1821 = load i64, i64* %PC
  %1822 = add i64 %1821, 4
  store i64 %1822, i64* %PC
  %1823 = inttoptr i64 %1820 to i64*
  %1824 = load i64, i64* %1823
  store i64 %1824, i64* %R9, align 8, !tbaa !2428
  %1825 = load i64, i64* %RBP
  %1826 = sub i64 %1825, 368
  %1827 = load i64, i64* %R9
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 7
  store i64 %1829, i64* %PC
  %1830 = inttoptr i64 %1826 to i64*
  store i64 %1827, i64* %1830
  %1831 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1832 = load i64, i64* %RBP
  %1833 = sub i64 %1832, 368
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 8
  store i64 %1835, i64* %PC
  %1836 = inttoptr i64 %1833 to double*
  %1837 = load double, double* %1836
  %1838 = bitcast i8* %1831 to double*
  store double %1837, double* %1838, align 1, !tbaa !2452
  %1839 = getelementptr inbounds i8, i8* %1831, i64 8
  %1840 = bitcast i8* %1839 to double*
  store double 0.000000e+00, double* %1840, align 1, !tbaa !2452
  %1841 = load i64, i64* %PC
  %1842 = add i64 %1841, 3899
  %1843 = load i64, i64* %PC
  %1844 = add i64 %1843, 5
  %1845 = load i64, i64* %PC
  %1846 = add i64 %1845, 5
  store i64 %1846, i64* %PC
  %1847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1848 = load i64, i64* %1847, align 8, !tbaa !2428
  %1849 = add i64 %1848, -8
  %1850 = inttoptr i64 %1849 to i64*
  store i64 %1844, i64* %1850
  store i64 %1849, i64* %1847, align 8, !tbaa !2428
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1842, i64* %1851, align 8, !tbaa !2428
  %1852 = load i64, i64* %PC
  %1853 = call %struct.Memory* @sub_402860__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1852, %struct.Memory* %1804)
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 10
  store i64 %1855, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 763), i64* %R8, align 8, !tbaa !2428
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 8
  store i64 %1857, i64* %PC
  %1858 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*)
  store i64 %1858, i64* %RCX, align 8, !tbaa !2428
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 376
  %1861 = load i64, i64* %RCX
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 7
  store i64 %1863, i64* %PC
  %1864 = inttoptr i64 %1860 to i64*
  store i64 %1861, i64* %1864
  %1865 = load i64, i64* %PC
  %1866 = add i64 %1865, 8
  store i64 %1866, i64* %PC
  %1867 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*)
  store i64 %1867, i64* %RCX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 384
  %1870 = load i64, i64* %RCX
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 7
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1869 to i64*
  store i64 %1870, i64* %1873
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 8
  store i64 %1875, i64* %PC
  %1876 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*)
  store i64 %1876, i64* %RCX, align 8, !tbaa !2428
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 392
  %1879 = load i64, i64* %RCX
  %1880 = load i64, i64* %PC
  %1881 = add i64 %1880, 7
  store i64 %1881, i64* %PC
  %1882 = inttoptr i64 %1878 to i64*
  store i64 %1879, i64* %1882
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 8
  store i64 %1884, i64* %PC
  %1885 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*)
  store i64 %1885, i64* %RCX, align 8, !tbaa !2428
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 400
  %1888 = load i64, i64* %RCX
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 7
  store i64 %1890, i64* %PC
  %1891 = inttoptr i64 %1887 to i64*
  store i64 %1888, i64* %1891
  %1892 = load i64, i64* %RBP
  %1893 = sub i64 %1892, 48
  %1894 = load i64, i64* %PC
  %1895 = add i64 %1894, 4
  store i64 %1895, i64* %PC
  %1896 = inttoptr i64 %1893 to i64*
  %1897 = load i64, i64* %1896
  store i64 %1897, i64* %RCX, align 8, !tbaa !2428
  %1898 = load i64, i64* %RBP
  %1899 = sub i64 %1898, 408
  %1900 = load i64, i64* %RCX
  %1901 = load i64, i64* %PC
  %1902 = add i64 %1901, 7
  store i64 %1902, i64* %PC
  %1903 = inttoptr i64 %1899 to i64*
  store i64 %1900, i64* %1903
  %1904 = load i64, i64* %RBP
  %1905 = sub i64 %1904, 376
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 7
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to i64*
  %1909 = load i64, i64* %1908
  store i64 %1909, i64* %RDI, align 8, !tbaa !2428
  %1910 = load i64, i64* %RBP
  %1911 = sub i64 %1910, 384
  %1912 = load i64, i64* %PC
  %1913 = add i64 %1912, 7
  store i64 %1913, i64* %PC
  %1914 = inttoptr i64 %1911 to i64*
  %1915 = load i64, i64* %1914
  store i64 %1915, i64* %RSI, align 8, !tbaa !2428
  %1916 = load i64, i64* %RBP
  %1917 = sub i64 %1916, 392
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 7
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1917 to i64*
  %1921 = load i64, i64* %1920
  store i64 %1921, i64* %RDX, align 8, !tbaa !2428
  %1922 = load i64, i64* %RBP
  %1923 = sub i64 %1922, 400
  %1924 = load i64, i64* %PC
  %1925 = add i64 %1924, 7
  store i64 %1925, i64* %PC
  %1926 = inttoptr i64 %1923 to i64*
  %1927 = load i64, i64* %1926
  store i64 %1927, i64* %RCX, align 8, !tbaa !2428
  %1928 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1929 = load i64, i64* %RBP
  %1930 = sub i64 %1929, 408
  %1931 = load i64, i64* %PC
  %1932 = add i64 %1931, 8
  store i64 %1932, i64* %PC
  %1933 = inttoptr i64 %1930 to double*
  %1934 = load double, double* %1933
  %1935 = bitcast i8* %1928 to double*
  store double %1934, double* %1935, align 1, !tbaa !2452
  %1936 = getelementptr inbounds i8, i8* %1928, i64 8
  %1937 = bitcast i8* %1936 to double*
  store double 0.000000e+00, double* %1937, align 1, !tbaa !2452
  %1938 = load i64, i64* %PC
  %1939 = add i64 %1938, 3905
  %1940 = load i64, i64* %PC
  %1941 = add i64 %1940, 5
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 5
  store i64 %1943, i64* %PC
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1945 = load i64, i64* %1944, align 8, !tbaa !2428
  %1946 = add i64 %1945, -8
  %1947 = inttoptr i64 %1946 to i64*
  store i64 %1941, i64* %1947
  store i64 %1946, i64* %1944, align 8, !tbaa !2428
  %1948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1939, i64* %1948, align 8, !tbaa !2428
  %1949 = load i64, i64* %PC
  %1950 = call %struct.Memory* @sub_4028e0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1949, %struct.Memory* %1853)
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 10
  store i64 %1952, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 808), i64* %R8, align 8, !tbaa !2428
  %1953 = load i64, i64* %PC
  %1954 = add i64 %1953, 8
  store i64 %1954, i64* %PC
  %1955 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i32 0, i32 0)
  store i64 %1955, i64* %RDI, align 8, !tbaa !2428
  %1956 = load i64, i64* %PC
  %1957 = add i64 %1956, 8
  store i64 %1957, i64* %PC
  %1958 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i32 0, i32 0)
  store i64 %1958, i64* %RSI, align 8, !tbaa !2428
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 8
  store i64 %1960, i64* %PC
  %1961 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i32 0, i32 0)
  store i64 %1961, i64* %RDX, align 8, !tbaa !2428
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 8
  store i64 %1963, i64* %PC
  %1964 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i32 0, i32 0)
  store i64 %1964, i64* %RCX, align 8, !tbaa !2428
  %1965 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1966 = load i64, i64* %RBP
  %1967 = sub i64 %1966, 24
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 5
  store i64 %1969, i64* %PC
  %1970 = inttoptr i64 %1967 to double*
  %1971 = load double, double* %1970
  %1972 = bitcast i8* %1965 to double*
  store double %1971, double* %1972, align 1, !tbaa !2452
  %1973 = getelementptr inbounds i8, i8* %1965, i64 8
  %1974 = bitcast i8* %1973 to double*
  store double 0.000000e+00, double* %1974, align 1, !tbaa !2452
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 4029
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 5
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 5
  store i64 %1980, i64* %PC
  %1981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1982 = load i64, i64* %1981, align 8, !tbaa !2428
  %1983 = add i64 %1982, -8
  %1984 = inttoptr i64 %1983 to i64*
  store i64 %1978, i64* %1984
  store i64 %1983, i64* %1981, align 8, !tbaa !2428
  %1985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1976, i64* %1985, align 8, !tbaa !2428
  %1986 = load i64, i64* %PC
  %1987 = call %struct.Memory* @sub_402990__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1986, %struct.Memory* %1950)
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 10
  store i64 %1989, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 833), i64* %R8, align 8, !tbaa !2428
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 8
  store i64 %1991, i64* %PC
  %1992 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*)
  store i64 %1992, i64* %RCX, align 8, !tbaa !2428
  %1993 = load i64, i64* %RBP
  %1994 = sub i64 %1993, 416
  %1995 = load i64, i64* %RCX
  %1996 = load i64, i64* %PC
  %1997 = add i64 %1996, 7
  store i64 %1997, i64* %PC
  %1998 = inttoptr i64 %1994 to i64*
  store i64 %1995, i64* %1998
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 8
  store i64 %2000, i64* %PC
  %2001 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*)
  store i64 %2001, i64* %RCX, align 8, !tbaa !2428
  %2002 = load i64, i64* %RBP
  %2003 = sub i64 %2002, 424
  %2004 = load i64, i64* %RCX
  %2005 = load i64, i64* %PC
  %2006 = add i64 %2005, 7
  store i64 %2006, i64* %PC
  %2007 = inttoptr i64 %2003 to i64*
  store i64 %2004, i64* %2007
  %2008 = load i64, i64* %PC
  %2009 = add i64 %2008, 8
  store i64 %2009, i64* %PC
  %2010 = load i64, i64* bitcast (%dPb_type* @dPb to i64*)
  store i64 %2010, i64* %RCX, align 8, !tbaa !2428
  %2011 = load i64, i64* %RBP
  %2012 = sub i64 %2011, 432
  %2013 = load i64, i64* %RCX
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 7
  store i64 %2015, i64* %PC
  %2016 = inttoptr i64 %2012 to i64*
  store i64 %2013, i64* %2016
  %2017 = load i64, i64* %PC
  %2018 = add i64 %2017, 8
  store i64 %2018, i64* %PC
  %2019 = load i64, i64* bitcast (%dPe_type* @dPe to i64*)
  store i64 %2019, i64* %RCX, align 8, !tbaa !2428
  %2020 = load i64, i64* %RBP
  %2021 = sub i64 %2020, 440
  %2022 = load i64, i64* %RCX
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 7
  store i64 %2024, i64* %PC
  %2025 = inttoptr i64 %2021 to i64*
  store i64 %2022, i64* %2025
  %2026 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2027 = load i64, i64* %RBP
  %2028 = sub i64 %2027, 24
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 5
  store i64 %2030, i64* %PC
  %2031 = inttoptr i64 %2028 to double*
  %2032 = load double, double* %2031
  %2033 = bitcast i8* %2026 to double*
  store double %2032, double* %2033, align 1, !tbaa !2452
  %2034 = getelementptr inbounds i8, i8* %2026, i64 8
  %2035 = bitcast i8* %2034 to double*
  store double 0.000000e+00, double* %2035, align 1, !tbaa !2452
  %2036 = load i64, i64* %RBP
  %2037 = sub i64 %2036, 416
  %2038 = load i64, i64* %PC
  %2039 = add i64 %2038, 7
  store i64 %2039, i64* %PC
  %2040 = inttoptr i64 %2037 to i64*
  %2041 = load i64, i64* %2040
  store i64 %2041, i64* %RDI, align 8, !tbaa !2428
  %2042 = load i64, i64* %RBP
  %2043 = sub i64 %2042, 424
  %2044 = load i64, i64* %PC
  %2045 = add i64 %2044, 7
  store i64 %2045, i64* %PC
  %2046 = inttoptr i64 %2043 to i64*
  %2047 = load i64, i64* %2046
  store i64 %2047, i64* %RSI, align 8, !tbaa !2428
  %2048 = load i64, i64* %RBP
  %2049 = sub i64 %2048, 432
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 7
  store i64 %2051, i64* %PC
  %2052 = inttoptr i64 %2049 to i64*
  %2053 = load i64, i64* %2052
  store i64 %2053, i64* %RDX, align 8, !tbaa !2428
  %2054 = load i64, i64* %RBP
  %2055 = sub i64 %2054, 440
  %2056 = load i64, i64* %PC
  %2057 = add i64 %2056, 7
  store i64 %2057, i64* %PC
  %2058 = inttoptr i64 %2055 to i64*
  %2059 = load i64, i64* %2058
  store i64 %2059, i64* %RCX, align 8, !tbaa !2428
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 4049
  %2062 = load i64, i64* %PC
  %2063 = add i64 %2062, 5
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 5
  store i64 %2065, i64* %PC
  %2066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2067 = load i64, i64* %2066, align 8, !tbaa !2428
  %2068 = add i64 %2067, -8
  %2069 = inttoptr i64 %2068 to i64*
  store i64 %2063, i64* %2069
  store i64 %2068, i64* %2066, align 8, !tbaa !2428
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2061, i64* %2070, align 8, !tbaa !2428
  %2071 = load i64, i64* %PC
  %2072 = call %struct.Memory* @sub_402a10__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %2071, %struct.Memory* %1987)
  %2073 = load i64, i64* %PC
  %2074 = add i64 %2073, 10
  store i64 %2074, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 864), i64* %R8, align 8, !tbaa !2428
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 8
  store i64 %2076, i64* %PC
  %2077 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i32 0, i32 0)
  store i64 %2077, i64* %RDI, align 8, !tbaa !2428
  %2078 = load i64, i64* %PC
  %2079 = add i64 %2078, 8
  store i64 %2079, i64* %PC
  %2080 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i32 0, i32 0)
  store i64 %2080, i64* %RSI, align 8, !tbaa !2428
  %2081 = load i64, i64* %PC
  %2082 = add i64 %2081, 8
  store i64 %2082, i64* %PC
  %2083 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i32 0, i32 0)
  store i64 %2083, i64* %RDX, align 8, !tbaa !2428
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 8
  store i64 %2085, i64* %PC
  %2086 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i32 0, i32 0)
  store i64 %2086, i64* %RCX, align 8, !tbaa !2428
  %2087 = load i64, i64* %RBP
  %2088 = sub i64 %2087, 32
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 4
  store i64 %2090, i64* %PC
  %2091 = inttoptr i64 %2088 to i64*
  %2092 = load i64, i64* %2091
  store i64 %2092, i64* %R9, align 8, !tbaa !2428
  %2093 = load i64, i64* %RBP
  %2094 = sub i64 %2093, 448
  %2095 = load i64, i64* %R9
  %2096 = load i64, i64* %PC
  %2097 = add i64 %2096, 7
  store i64 %2097, i64* %PC
  %2098 = inttoptr i64 %2094 to i64*
  store i64 %2095, i64* %2098
  %2099 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2100 = load i64, i64* %RBP
  %2101 = sub i64 %2100, 448
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 8
  store i64 %2103, i64* %PC
  %2104 = inttoptr i64 %2101 to double*
  %2105 = load double, double* %2104
  %2106 = bitcast i8* %2099 to double*
  store double %2105, double* %2106, align 1, !tbaa !2452
  %2107 = getelementptr inbounds i8, i8* %2099, i64 8
  %2108 = bitcast i8* %2107 to double*
  store double 0.000000e+00, double* %2108, align 1, !tbaa !2452
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 4159
  %2111 = load i64, i64* %PC
  %2112 = add i64 %2111, 5
  %2113 = load i64, i64* %PC
  %2114 = add i64 %2113, 5
  store i64 %2114, i64* %PC
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2116 = load i64, i64* %2115, align 8, !tbaa !2428
  %2117 = add i64 %2116, -8
  %2118 = inttoptr i64 %2117 to i64*
  store i64 %2112, i64* %2118
  store i64 %2117, i64* %2115, align 8, !tbaa !2428
  %2119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2110, i64* %2119, align 8, !tbaa !2428
  %2120 = load i64, i64* %PC
  %2121 = call %struct.Memory* @sub_402ac0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %2120, %struct.Memory* %2072)
  %2122 = load i64, i64* %PC
  %2123 = add i64 %2122, 10
  store i64 %2123, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 901), i64* %R8, align 8, !tbaa !2428
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 8
  store i64 %2125, i64* %PC
  %2126 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*)
  store i64 %2126, i64* %RCX, align 8, !tbaa !2428
  %2127 = load i64, i64* %RBP
  %2128 = sub i64 %2127, 456
  %2129 = load i64, i64* %RCX
  %2130 = load i64, i64* %PC
  %2131 = add i64 %2130, 7
  store i64 %2131, i64* %PC
  %2132 = inttoptr i64 %2128 to i64*
  store i64 %2129, i64* %2132
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 8
  store i64 %2134, i64* %PC
  %2135 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*)
  store i64 %2135, i64* %RCX, align 8, !tbaa !2428
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 464
  %2138 = load i64, i64* %RCX
  %2139 = load i64, i64* %PC
  %2140 = add i64 %2139, 7
  store i64 %2140, i64* %PC
  %2141 = inttoptr i64 %2137 to i64*
  store i64 %2138, i64* %2141
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 8
  store i64 %2143, i64* %PC
  %2144 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*)
  store i64 %2144, i64* %RCX, align 8, !tbaa !2428
  %2145 = load i64, i64* %RBP
  %2146 = sub i64 %2145, 472
  %2147 = load i64, i64* %RCX
  %2148 = load i64, i64* %PC
  %2149 = add i64 %2148, 7
  store i64 %2149, i64* %PC
  %2150 = inttoptr i64 %2146 to i64*
  store i64 %2147, i64* %2150
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 8
  store i64 %2152, i64* %PC
  %2153 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*)
  store i64 %2153, i64* %RCX, align 8, !tbaa !2428
  %2154 = load i64, i64* %RBP
  %2155 = sub i64 %2154, 480
  %2156 = load i64, i64* %RCX
  %2157 = load i64, i64* %PC
  %2158 = add i64 %2157, 7
  store i64 %2158, i64* %PC
  %2159 = inttoptr i64 %2155 to i64*
  store i64 %2156, i64* %2159
  %2160 = load i64, i64* %RBP
  %2161 = sub i64 %2160, 32
  %2162 = load i64, i64* %PC
  %2163 = add i64 %2162, 4
  store i64 %2163, i64* %PC
  %2164 = inttoptr i64 %2161 to i64*
  %2165 = load i64, i64* %2164
  store i64 %2165, i64* %RCX, align 8, !tbaa !2428
  %2166 = load i64, i64* %RBP
  %2167 = sub i64 %2166, 488
  %2168 = load i64, i64* %RCX
  %2169 = load i64, i64* %PC
  %2170 = add i64 %2169, 7
  store i64 %2170, i64* %PC
  %2171 = inttoptr i64 %2167 to i64*
  store i64 %2168, i64* %2171
  %2172 = load i64, i64* %RBP
  %2173 = sub i64 %2172, 456
  %2174 = load i64, i64* %PC
  %2175 = add i64 %2174, 7
  store i64 %2175, i64* %PC
  %2176 = inttoptr i64 %2173 to i64*
  %2177 = load i64, i64* %2176
  store i64 %2177, i64* %RDI, align 8, !tbaa !2428
  %2178 = load i64, i64* %RBP
  %2179 = sub i64 %2178, 464
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 7
  store i64 %2181, i64* %PC
  %2182 = inttoptr i64 %2179 to i64*
  %2183 = load i64, i64* %2182
  store i64 %2183, i64* %RSI, align 8, !tbaa !2428
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 472
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 7
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2185 to i64*
  %2189 = load i64, i64* %2188
  store i64 %2189, i64* %RDX, align 8, !tbaa !2428
  %2190 = load i64, i64* %RBP
  %2191 = sub i64 %2190, 480
  %2192 = load i64, i64* %PC
  %2193 = add i64 %2192, 7
  store i64 %2193, i64* %PC
  %2194 = inttoptr i64 %2191 to i64*
  %2195 = load i64, i64* %2194
  store i64 %2195, i64* %RCX, align 8, !tbaa !2428
  %2196 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2197 = load i64, i64* %RBP
  %2198 = sub i64 %2197, 488
  %2199 = load i64, i64* %PC
  %2200 = add i64 %2199, 8
  store i64 %2200, i64* %PC
  %2201 = inttoptr i64 %2198 to double*
  %2202 = load double, double* %2201
  %2203 = bitcast i8* %2196 to double*
  store double %2202, double* %2203, align 1, !tbaa !2452
  %2204 = getelementptr inbounds i8, i8* %2196, i64 8
  %2205 = bitcast i8* %2204 to double*
  store double 0.000000e+00, double* %2205, align 1, !tbaa !2452
  %2206 = load i64, i64* %PC
  %2207 = add i64 %2206, 4165
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 5
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 5
  store i64 %2211, i64* %PC
  %2212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2213 = load i64, i64* %2212, align 8, !tbaa !2428
  %2214 = add i64 %2213, -8
  %2215 = inttoptr i64 %2214 to i64*
  store i64 %2209, i64* %2215
  store i64 %2214, i64* %2212, align 8, !tbaa !2428
  %2216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2207, i64* %2216, align 8, !tbaa !2428
  %2217 = load i64, i64* %PC
  %2218 = call %struct.Memory* @sub_402b40__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %2217, %struct.Memory* %2121)
  %2219 = load i64, i64* %PC
  %2220 = add i64 %2219, 10
  store i64 %2220, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 944), i64* %R8, align 8, !tbaa !2428
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 8
  store i64 %2222, i64* %PC
  %2223 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i32 0, i32 0)
  store i64 %2223, i64* %RDI, align 8, !tbaa !2428
  %2224 = load i64, i64* %PC
  %2225 = add i64 %2224, 8
  store i64 %2225, i64* %PC
  %2226 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i32 0, i32 0)
  store i64 %2226, i64* %RSI, align 8, !tbaa !2428
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 8
  store i64 %2228, i64* %PC
  %2229 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i32 0, i32 0)
  store i64 %2229, i64* %RDX, align 8, !tbaa !2428
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 8
  store i64 %2231, i64* %PC
  %2232 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i32 0, i32 0)
  store i64 %2232, i64* %RCX, align 8, !tbaa !2428
  %2233 = load i64, i64* %RBP
  %2234 = sub i64 %2233, 48
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 4
  store i64 %2236, i64* %PC
  %2237 = inttoptr i64 %2234 to i64*
  %2238 = load i64, i64* %2237
  store i64 %2238, i64* %R9, align 8, !tbaa !2428
  %2239 = load i64, i64* %RBP
  %2240 = sub i64 %2239, 496
  %2241 = load i64, i64* %R9
  %2242 = load i64, i64* %PC
  %2243 = add i64 %2242, 7
  store i64 %2243, i64* %PC
  %2244 = inttoptr i64 %2240 to i64*
  store i64 %2241, i64* %2244
  %2245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2246 = load i64, i64* %RBP
  %2247 = sub i64 %2246, 496
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 8
  store i64 %2249, i64* %PC
  %2250 = inttoptr i64 %2247 to double*
  %2251 = load double, double* %2250
  %2252 = bitcast i8* %2245 to double*
  store double %2251, double* %2252, align 1, !tbaa !2452
  %2253 = getelementptr inbounds i8, i8* %2245, i64 8
  %2254 = bitcast i8* %2253 to double*
  store double 0.000000e+00, double* %2254, align 1, !tbaa !2452
  %2255 = load i64, i64* %PC
  %2256 = add i64 %2255, 4275
  %2257 = load i64, i64* %PC
  %2258 = add i64 %2257, 5
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 5
  store i64 %2260, i64* %PC
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2262 = load i64, i64* %2261, align 8, !tbaa !2428
  %2263 = add i64 %2262, -8
  %2264 = inttoptr i64 %2263 to i64*
  store i64 %2258, i64* %2264
  store i64 %2263, i64* %2261, align 8, !tbaa !2428
  %2265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2256, i64* %2265, align 8, !tbaa !2428
  %2266 = load i64, i64* %PC
  %2267 = call %struct.Memory* @sub_402bf0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %2266, %struct.Memory* %2218)
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 10
  store i64 %2269, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 983), i64* %R8, align 8, !tbaa !2428
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 8
  store i64 %2271, i64* %PC
  %2272 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*)
  store i64 %2272, i64* %RCX, align 8, !tbaa !2428
  %2273 = load i64, i64* %RBP
  %2274 = sub i64 %2273, 504
  %2275 = load i64, i64* %RCX
  %2276 = load i64, i64* %PC
  %2277 = add i64 %2276, 7
  store i64 %2277, i64* %PC
  %2278 = inttoptr i64 %2274 to i64*
  store i64 %2275, i64* %2278
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 8
  store i64 %2280, i64* %PC
  %2281 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*)
  store i64 %2281, i64* %RCX, align 8, !tbaa !2428
  %2282 = load i64, i64* %RBP
  %2283 = sub i64 %2282, 512
  %2284 = load i64, i64* %RCX
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 7
  store i64 %2286, i64* %PC
  %2287 = inttoptr i64 %2283 to i64*
  store i64 %2284, i64* %2287
  %2288 = load i64, i64* %PC
  %2289 = add i64 %2288, 8
  store i64 %2289, i64* %PC
  %2290 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*)
  store i64 %2290, i64* %RCX, align 8, !tbaa !2428
  %2291 = load i64, i64* %RBP
  %2292 = sub i64 %2291, 520
  %2293 = load i64, i64* %RCX
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 7
  store i64 %2295, i64* %PC
  %2296 = inttoptr i64 %2292 to i64*
  store i64 %2293, i64* %2296
  %2297 = load i64, i64* %PC
  %2298 = add i64 %2297, 8
  store i64 %2298, i64* %PC
  %2299 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*)
  store i64 %2299, i64* %RCX, align 8, !tbaa !2428
  %2300 = load i64, i64* %RBP
  %2301 = sub i64 %2300, 528
  %2302 = load i64, i64* %RCX
  %2303 = load i64, i64* %PC
  %2304 = add i64 %2303, 7
  store i64 %2304, i64* %PC
  %2305 = inttoptr i64 %2301 to i64*
  store i64 %2302, i64* %2305
  %2306 = load i64, i64* %RBP
  %2307 = sub i64 %2306, 48
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 4
  store i64 %2309, i64* %PC
  %2310 = inttoptr i64 %2307 to i64*
  %2311 = load i64, i64* %2310
  store i64 %2311, i64* %RCX, align 8, !tbaa !2428
  %2312 = load i64, i64* %RBP
  %2313 = sub i64 %2312, 536
  %2314 = load i64, i64* %RCX
  %2315 = load i64, i64* %PC
  %2316 = add i64 %2315, 7
  store i64 %2316, i64* %PC
  %2317 = inttoptr i64 %2313 to i64*
  store i64 %2314, i64* %2317
  %2318 = load i64, i64* %RBP
  %2319 = sub i64 %2318, 504
  %2320 = load i64, i64* %PC
  %2321 = add i64 %2320, 7
  store i64 %2321, i64* %PC
  %2322 = inttoptr i64 %2319 to i64*
  %2323 = load i64, i64* %2322
  store i64 %2323, i64* %RDI, align 8, !tbaa !2428
  %2324 = load i64, i64* %RBP
  %2325 = sub i64 %2324, 512
  %2326 = load i64, i64* %PC
  %2327 = add i64 %2326, 7
  store i64 %2327, i64* %PC
  %2328 = inttoptr i64 %2325 to i64*
  %2329 = load i64, i64* %2328
  store i64 %2329, i64* %RSI, align 8, !tbaa !2428
  %2330 = load i64, i64* %RBP
  %2331 = sub i64 %2330, 520
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 7
  store i64 %2333, i64* %PC
  %2334 = inttoptr i64 %2331 to i64*
  %2335 = load i64, i64* %2334
  store i64 %2335, i64* %RDX, align 8, !tbaa !2428
  %2336 = load i64, i64* %RBP
  %2337 = sub i64 %2336, 528
  %2338 = load i64, i64* %PC
  %2339 = add i64 %2338, 7
  store i64 %2339, i64* %PC
  %2340 = inttoptr i64 %2337 to i64*
  %2341 = load i64, i64* %2340
  store i64 %2341, i64* %RCX, align 8, !tbaa !2428
  %2342 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2343 = load i64, i64* %RBP
  %2344 = sub i64 %2343, 536
  %2345 = load i64, i64* %PC
  %2346 = add i64 %2345, 8
  store i64 %2346, i64* %PC
  %2347 = inttoptr i64 %2344 to double*
  %2348 = load double, double* %2347
  %2349 = bitcast i8* %2342 to double*
  store double %2348, double* %2349, align 1, !tbaa !2452
  %2350 = getelementptr inbounds i8, i8* %2342, i64 8
  %2351 = bitcast i8* %2350 to double*
  store double 0.000000e+00, double* %2351, align 1, !tbaa !2452
  %2352 = load i64, i64* %PC
  %2353 = add i64 %2352, 4281
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 5
  %2356 = load i64, i64* %PC
  %2357 = add i64 %2356, 5
  store i64 %2357, i64* %PC
  %2358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2359 = load i64, i64* %2358, align 8, !tbaa !2428
  %2360 = add i64 %2359, -8
  %2361 = inttoptr i64 %2360 to i64*
  store i64 %2355, i64* %2361
  store i64 %2360, i64* %2358, align 8, !tbaa !2428
  %2362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2353, i64* %2362, align 8, !tbaa !2428
  %2363 = load i64, i64* %PC
  %2364 = call %struct.Memory* @sub_402c70__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %2363, %struct.Memory* %2267)
  %2365 = load i64, i64* %RAX
  %2366 = load i32, i32* %EAX
  %2367 = zext i32 %2366 to i64
  %2368 = load i64, i64* %PC
  %2369 = add i64 %2368, 2
  store i64 %2369, i64* %PC
  %2370 = xor i64 %2367, %2365
  %2371 = trunc i64 %2370 to i32
  %2372 = and i64 %2370, 4294967295
  store i64 %2372, i64* %RAX, align 8, !tbaa !2428
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2373, align 1, !tbaa !2433
  %2374 = and i32 %2371, 255
  %2375 = call i32 @llvm.ctpop.i32(i32 %2374) #16
  %2376 = trunc i32 %2375 to i8
  %2377 = and i8 %2376, 1
  %2378 = xor i8 %2377, 1
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2378, i8* %2379, align 1, !tbaa !2447
  %2380 = icmp eq i32 %2371, 0
  %2381 = zext i1 %2380 to i8
  %2382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2381, i8* %2382, align 1, !tbaa !2449
  %2383 = lshr i32 %2371, 31
  %2384 = trunc i32 %2383 to i8
  %2385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2384, i8* %2385, align 1, !tbaa !2450
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2386, align 1, !tbaa !2451
  %2387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2387, align 1, !tbaa !2448
  %2388 = load i64, i64* %RSP
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 7
  store i64 %2390, i64* %PC
  %2391 = add i64 576, %2388
  store i64 %2391, i64* %RSP, align 8, !tbaa !2428
  %2392 = icmp ult i64 %2391, %2388
  %2393 = icmp ult i64 %2391, 576
  %2394 = or i1 %2392, %2393
  %2395 = zext i1 %2394 to i8
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2395, i8* %2396, align 1, !tbaa !2433
  %2397 = trunc i64 %2391 to i32
  %2398 = and i32 %2397, 255
  %2399 = call i32 @llvm.ctpop.i32(i32 %2398) #16
  %2400 = trunc i32 %2399 to i8
  %2401 = and i8 %2400, 1
  %2402 = xor i8 %2401, 1
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2402, i8* %2403, align 1, !tbaa !2447
  %2404 = xor i64 576, %2388
  %2405 = xor i64 %2404, %2391
  %2406 = lshr i64 %2405, 4
  %2407 = trunc i64 %2406 to i8
  %2408 = and i8 %2407, 1
  %2409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2408, i8* %2409, align 1, !tbaa !2448
  %2410 = icmp eq i64 %2391, 0
  %2411 = zext i1 %2410 to i8
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2411, i8* %2412, align 1, !tbaa !2449
  %2413 = lshr i64 %2391, 63
  %2414 = trunc i64 %2413 to i8
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2414, i8* %2415, align 1, !tbaa !2450
  %2416 = lshr i64 %2388, 63
  %2417 = xor i64 %2413, %2416
  %2418 = add nuw nsw i64 %2417, %2413
  %2419 = icmp eq i64 %2418, 2
  %2420 = zext i1 %2419 to i8
  %2421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2420, i8* %2421, align 1, !tbaa !2451
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 1
  store i64 %2423, i64* %PC
  %2424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2425 = load i64, i64* %2424, align 8, !tbaa !2428
  %2426 = add i64 %2425, 8
  %2427 = inttoptr i64 %2425 to i64*
  %2428 = load i64, i64* %2427
  store i64 %2428, i64* %RBP, align 8, !tbaa !2428
  store i64 %2426, i64* %2424, align 8, !tbaa !2428
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 1
  store i64 %2430, i64* %PC
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2433 = load i64, i64* %2432, align 8, !tbaa !2428
  %2434 = inttoptr i64 %2433 to i64*
  %2435 = load i64, i64* %2434
  store i64 %2435, i64* %2431, align 8, !tbaa !2428
  %2436 = add i64 %2433, 8
  store i64 %2436, i64* %2432, align 8, !tbaa !2428
  ret %struct.Memory* %2364
}

; Function Attrs: noinline
define %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403080:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, 8
  %50 = inttoptr i64 %48 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 1
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %56 = load i64, i64* %55, align 8, !tbaa !2428
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %54, align 8, !tbaa !2428
  %59 = add i64 %56, 8
  store i64 %59, i64* %55, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405c70__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_405c70:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %47 to %union.vec128_t*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = load i64, i64* %RBP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 1
  store i64 %52, i64* %PC
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %54 = load i64, i64* %53, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %50, i64* %56
  store i64 %55, i64* %53, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RBP, align 8, !tbaa !2428
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 24
  %80 = load i64, i64* %RSI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 24
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %RSI, align 8, !tbaa !2428
  %90 = load i64, i64* %RSI
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC
  %93 = add i64 8, %90
  store i64 %93, i64* %RSI, align 8, !tbaa !2428
  %94 = icmp ult i64 %93, %90
  %95 = icmp ult i64 %93, 8
  %96 = or i1 %94, %95
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %97, i8* %98, align 1, !tbaa !2433
  %99 = trunc i64 %93 to i32
  %100 = and i32 %99, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #16
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = xor i64 8, %90
  %107 = xor i64 %106, %93
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %110, i8* %111, align 1, !tbaa !2448
  %112 = icmp eq i64 %93, 0
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %114, align 1, !tbaa !2449
  %115 = lshr i64 %93, 63
  %116 = trunc i64 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %116, i8* %117, align 1, !tbaa !2450
  %118 = lshr i64 %90, 63
  %119 = xor i64 %115, %118
  %120 = add nuw nsw i64 %119, %115
  %121 = icmp eq i64 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2451
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 24
  %126 = load i64, i64* %RSI
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129
  br label %block_405c90

block_405cbb:                                     ; preds = %block_405d03, %block_405c9e
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_405c9e ], [ %MEMORY.1, %block_405d03 ]
  %130 = load i64, i64* %RAX
  %131 = load i32, i32* %EAX
  %132 = zext i32 %131 to i64
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 2
  store i64 %134, i64* %PC
  %135 = xor i64 %132, %130
  %136 = trunc i64 %135 to i32
  %137 = and i64 %135, 4294967295
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %138, align 1, !tbaa !2433
  %139 = and i32 %136, 255
  %140 = call i32 @llvm.ctpop.i32(i32 %139) #16
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2447
  %145 = icmp eq i32 %136, 0
  %146 = zext i1 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i32 %136, 31
  %149 = trunc i32 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %149, i8* %150, align 1, !tbaa !2450
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %151, align 1, !tbaa !2451
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %152, align 1, !tbaa !2448
  %153 = load i8, i8* %AL
  %154 = zext i8 %153 to i64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 2
  store i64 %156, i64* %PC
  store i8 %153, i8* %CL, align 1, !tbaa !2432
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 40
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %RDX, align 8, !tbaa !2428
  %163 = load i64, i64* %RDX
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 8
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168
  %170 = sub i64 %163, %169
  %171 = icmp ugt i64 %169, %163
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %172, i8* %173, align 1, !tbaa !2433
  %174 = trunc i64 %170 to i32
  %175 = and i32 %174, 255
  %176 = call i32 @llvm.ctpop.i32(i32 %175) #16
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %179, i8* %180, align 1, !tbaa !2447
  %181 = xor i64 %169, %163
  %182 = xor i64 %181, %170
  %183 = lshr i64 %182, 4
  %184 = trunc i64 %183 to i8
  %185 = and i8 %184, 1
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %185, i8* %186, align 1, !tbaa !2448
  %187 = icmp eq i64 %170, 0
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %188, i8* %189, align 1, !tbaa !2449
  %190 = lshr i64 %170, 63
  %191 = trunc i64 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %191, i8* %192, align 1, !tbaa !2450
  %193 = lshr i64 %163, 63
  %194 = lshr i64 %169, 63
  %195 = xor i64 %194, %193
  %196 = xor i64 %190, %193
  %197 = add nuw nsw i64 %196, %195
  %198 = icmp eq i64 %197, 2
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %199, i8* %200, align 1, !tbaa !2451
  %201 = load i64, i64* %RBP
  %202 = sub i64 %201, 49
  %203 = load i8, i8* %CL
  %204 = zext i8 %203 to i64
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 3
  store i64 %206, i64* %PC
  %207 = inttoptr i64 %202 to i8*
  store i8 %203, i8* %207
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 41
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 6
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %215 = load i8, i8* %214, align 1, !tbaa !2449
  store i8 %215, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %217 = icmp ne i8 %215, 0
  %218 = select i1 %217, i64 %209, i64 %211
  store i64 %218, i64* %216, align 8, !tbaa !2428
  %219 = load i8, i8* %BRANCH_TAKEN
  %220 = icmp eq i8 %219, 1
  br i1 %220, label %block_405cf3, label %block_405cd0

block_405c9e:                                     ; preds = %block_405c90
  %221 = load i64, i64* %RBP
  %222 = sub i64 %221, 24
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %222 to i64*
  %226 = load i64, i64* %225
  store i64 %226, i64* %RAX, align 8, !tbaa !2428
  %227 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %228 = load i64, i64* %RAX
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %228 to double*
  %232 = load double, double* %231
  %233 = bitcast i8* %227 to double*
  store double %232, double* %233, align 1, !tbaa !2452
  %234 = getelementptr inbounds i8, i8* %227, i64 8
  %235 = bitcast i8* %234 to double*
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 32
  %238 = bitcast %union.vec128_t* %XMM0 to i8*
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  store i64 %240, i64* %PC
  %241 = bitcast i8* %238 to double*
  %242 = load double, double* %241, align 1
  %243 = inttoptr i64 %237 to double*
  store double %242, double* %243
  %244 = load i64, i64* %RBP
  %245 = sub i64 %244, 24
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248
  store i64 %249, i64* %RAX, align 8, !tbaa !2428
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 40
  %252 = load i64, i64* %RAX
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %251 to i64*
  store i64 %252, i64* %255
  %256 = load i64, i64* %RBP
  %257 = sub i64 %256, 40
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 4
  store i64 %259, i64* %PC
  %260 = inttoptr i64 %257 to i64*
  %261 = load i64, i64* %260
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 48
  %264 = load i64, i64* %RAX
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %263 to i64*
  store i64 %264, i64* %267
  br label %block_405cbb

block_405cfe:                                     ; preds = %block_405cf3
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 38
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 5
  store i64 %271, i64* %PC
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %269, i64* %272, align 8, !tbaa !2428
  %273 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 32
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = inttoptr i64 %275 to double*
  %279 = load double, double* %278
  %280 = bitcast i8* %273 to double*
  store double %279, double* %280, align 1, !tbaa !2452
  %281 = getelementptr inbounds i8, i8* %273, i64 8
  %282 = bitcast i8* %281 to double*
  store double 0.000000e+00, double* %282, align 1, !tbaa !2452
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 40
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %284 to i64*
  %288 = load i64, i64* %287
  store i64 %288, i64* %RAX, align 8, !tbaa !2428
  %289 = load i64, i64* %RAX
  %290 = bitcast %union.vec128_t* %XMM0 to i8*
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 4
  store i64 %292, i64* %PC
  %293 = bitcast i8* %290 to double*
  %294 = load double, double* %293, align 1
  %295 = inttoptr i64 %289 to double*
  store double %294, double* %295
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 24
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC
  %305 = add i64 8, %302
  store i64 %305, i64* %RAX, align 8, !tbaa !2428
  %306 = icmp ult i64 %305, %302
  %307 = icmp ult i64 %305, 8
  %308 = or i1 %306, %307
  %309 = zext i1 %308 to i8
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %309, i8* %310, align 1, !tbaa !2433
  %311 = trunc i64 %305 to i32
  %312 = and i32 %311, 255
  %313 = call i32 @llvm.ctpop.i32(i32 %312) #16
  %314 = trunc i32 %313 to i8
  %315 = and i8 %314, 1
  %316 = xor i8 %315, 1
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %316, i8* %317, align 1, !tbaa !2447
  %318 = xor i64 8, %302
  %319 = xor i64 %318, %305
  %320 = lshr i64 %319, 4
  %321 = trunc i64 %320 to i8
  %322 = and i8 %321, 1
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %322, i8* %323, align 1, !tbaa !2448
  %324 = icmp eq i64 %305, 0
  %325 = zext i1 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %325, i8* %326, align 1, !tbaa !2449
  %327 = lshr i64 %305, 63
  %328 = trunc i64 %327 to i8
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %328, i8* %329, align 1, !tbaa !2450
  %330 = lshr i64 %302, 63
  %331 = xor i64 %327, %330
  %332 = add nuw nsw i64 %331, %327
  %333 = icmp eq i64 %332, 2
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %334, i8* %335, align 1, !tbaa !2451
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 24
  %338 = load i64, i64* %RAX
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC
  %341 = inttoptr i64 %337 to i64*
  store i64 %338, i64* %341
  %342 = load i64, i64* %PC
  %343 = sub i64 %342, 173
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 5
  store i64 %345, i64* %PC
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %343, i64* %346, align 8, !tbaa !2428
  br label %block_405c90

block_405cf3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_405cbb
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_405cbb ], [ %647, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 49
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 3
  store i64 %350, i64* %PC
  %351 = inttoptr i64 %348 to i8*
  %352 = load i8, i8* %351
  store i8 %352, i8* %AL, align 1, !tbaa !2432
  %353 = load i8, i8* %AL
  %354 = zext i8 %353 to i64
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 2
  store i64 %356, i64* %PC
  %357 = and i64 1, %354
  %358 = trunc i64 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %359, align 1, !tbaa !2433
  %360 = trunc i64 %357 to i32
  %361 = and i32 %360, 255
  %362 = call i32 @llvm.ctpop.i32(i32 %361) #16
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %365, i8* %366, align 1, !tbaa !2447
  %367 = icmp eq i8 %358, 0
  %368 = zext i1 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %368, i8* %369, align 1, !tbaa !2449
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %370, align 1, !tbaa !2450
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %371, align 1, !tbaa !2451
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %372, align 1, !tbaa !2448
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 11
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 6
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 6
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %380 = load i8, i8* %379, align 1, !tbaa !2449
  %381 = icmp eq i8 %380, 0
  %382 = zext i1 %381 to i8
  store i8 %382, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = select i1 %381, i64 %374, i64 %376
  store i64 %384, i64* %383, align 8, !tbaa !2428
  %385 = load i8, i8* %BRANCH_TAKEN
  %386 = icmp eq i8 %385, 1
  br i1 %386, label %block_405d03, label %block_405cfe

block_405c90:                                     ; preds = %block_405cfe, %block_405c70
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405c70 ], [ %MEMORY.1, %block_405cfe ]
  %387 = load i64, i64* %RBP
  %388 = sub i64 %387, 24
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %388 to i64*
  %392 = load i64, i64* %391
  store i64 %392, i64* %RAX, align 8, !tbaa !2428
  %393 = load i64, i64* %RAX
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 16
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i64*
  %399 = load i64, i64* %398
  %400 = sub i64 %393, %399
  %401 = icmp ugt i64 %399, %393
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %402, i8* %403, align 1, !tbaa !2433
  %404 = trunc i64 %400 to i32
  %405 = and i32 %404, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i64 %399, %393
  %412 = xor i64 %411, %400
  %413 = lshr i64 %412, 4
  %414 = trunc i64 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i64 %400, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i64 %400, 63
  %421 = trunc i64 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i64 %393, 63
  %424 = lshr i64 %399, 63
  %425 = xor i64 %424, %423
  %426 = xor i64 %420, %423
  %427 = add nuw nsw i64 %426, %425
  %428 = icmp eq i64 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 170
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %438 = load i8, i8* %437, align 1, !tbaa !2449
  store i8 %438, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %440 = icmp ne i8 %438, 0
  %441 = select i1 %440, i64 %432, i64 %434
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %442 = load i8, i8* %BRANCH_TAKEN
  %443 = icmp eq i8 %442, 1
  br i1 %443, label %block_405d42, label %block_405c9e

block_405d03:                                     ; preds = %block_405cf3
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 48
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC
  %448 = inttoptr i64 %445 to i64*
  %449 = load i64, i64* %448
  store i64 %449, i64* %RAX, align 8, !tbaa !2428
  %450 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %451 = load i64, i64* %RAX
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 4
  store i64 %453, i64* %PC
  %454 = inttoptr i64 %451 to double*
  %455 = load double, double* %454
  %456 = bitcast i8* %450 to double*
  store double %455, double* %456, align 1, !tbaa !2452
  %457 = getelementptr inbounds i8, i8* %450, i64 8
  %458 = bitcast i8* %457 to double*
  store double 0.000000e+00, double* %458, align 1, !tbaa !2452
  %459 = load i64, i64* %RBP
  %460 = sub i64 %459, 40
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 4
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %460 to i64*
  %464 = load i64, i64* %463
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = load i64, i64* %RAX
  %466 = bitcast %union.vec128_t* %XMM0 to i8*
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = bitcast i8* %466 to double*
  %470 = load double, double* %469, align 1
  %471 = inttoptr i64 %465 to double*
  store double %470, double* %471
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 40
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 4
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i64*
  %477 = load i64, i64* %476
  store i64 %477, i64* %RAX, align 8, !tbaa !2428
  %478 = load i64, i64* %RAX
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 4
  store i64 %480, i64* %PC
  %481 = add i64 -8, %478
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = icmp ult i64 %481, %478
  %483 = icmp ult i64 %481, -8
  %484 = or i1 %482, %483
  %485 = zext i1 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %485, i8* %486, align 1, !tbaa !2433
  %487 = trunc i64 %481 to i32
  %488 = and i32 %487, 255
  %489 = call i32 @llvm.ctpop.i32(i32 %488) #16
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = xor i8 %491, 1
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %492, i8* %493, align 1, !tbaa !2447
  %494 = xor i64 -8, %478
  %495 = xor i64 %494, %481
  %496 = lshr i64 %495, 4
  %497 = trunc i64 %496 to i8
  %498 = and i8 %497, 1
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %498, i8* %499, align 1, !tbaa !2448
  %500 = icmp eq i64 %481, 0
  %501 = zext i1 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %501, i8* %502, align 1, !tbaa !2449
  %503 = lshr i64 %481, 63
  %504 = trunc i64 %503 to i8
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %504, i8* %505, align 1, !tbaa !2450
  %506 = lshr i64 %478, 63
  %507 = xor i64 %503, %506
  %508 = xor i64 %503, 1
  %509 = add nuw nsw i64 %507, %508
  %510 = icmp eq i64 %509, 2
  %511 = zext i1 %510 to i8
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %511, i8* %512, align 1, !tbaa !2451
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 40
  %515 = load i64, i64* %RAX
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %514 to i64*
  store i64 %515, i64* %518
  %519 = load i64, i64* %PC
  %520 = sub i64 %519, 100
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 5
  store i64 %522, i64* %PC
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %520, i64* %523, align 8, !tbaa !2428
  br label %block_405cbb

block_405d42:                                     ; preds = %block_405c90
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 1
  store i64 %525, i64* %PC
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %527 = load i64, i64* %526, align 8, !tbaa !2428
  %528 = add i64 %527, 8
  %529 = inttoptr i64 %527 to i64*
  %530 = load i64, i64* %529
  store i64 %530, i64* %RBP, align 8, !tbaa !2428
  store i64 %528, i64* %526, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 1
  store i64 %532, i64* %PC
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %535 = load i64, i64* %534, align 8, !tbaa !2428
  %536 = inttoptr i64 %535 to i64*
  %537 = load i64, i64* %536
  store i64 %537, i64* %533, align 8, !tbaa !2428
  %538 = add i64 %535, 8
  store i64 %538, i64* %534, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_405cd0:                                     ; preds = %block_405cbb
  %539 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 32
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 5
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to double*
  %545 = load double, double* %544
  %546 = bitcast i8* %539 to double*
  store double %545, double* %546, align 1, !tbaa !2452
  %547 = getelementptr inbounds i8, i8* %539, i64 8
  %548 = bitcast i8* %547 to double*
  store double 0.000000e+00, double* %548, align 1, !tbaa !2452
  %549 = load i64, i64* %RBP
  %550 = sub i64 %549, 48
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  %553 = inttoptr i64 %550 to i64*
  %554 = load i64, i64* %553
  store i64 %554, i64* %RAX, align 8, !tbaa !2428
  %555 = load i64, i64* %RAX
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 3
  store i64 %557, i64* %PC
  store i64 %555, i64* %RCX, align 8, !tbaa !2428
  %558 = load i64, i64* %RCX
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = add i64 -8, %558
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %562 = icmp ult i64 %561, %558
  %563 = icmp ult i64 %561, -8
  %564 = or i1 %562, %563
  %565 = zext i1 %564 to i8
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %565, i8* %566, align 1, !tbaa !2433
  %567 = trunc i64 %561 to i32
  %568 = and i32 %567, 255
  %569 = call i32 @llvm.ctpop.i32(i32 %568) #16
  %570 = trunc i32 %569 to i8
  %571 = and i8 %570, 1
  %572 = xor i8 %571, 1
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %572, i8* %573, align 1, !tbaa !2447
  %574 = xor i64 -8, %558
  %575 = xor i64 %574, %561
  %576 = lshr i64 %575, 4
  %577 = trunc i64 %576 to i8
  %578 = and i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %578, i8* %579, align 1, !tbaa !2448
  %580 = icmp eq i64 %561, 0
  %581 = zext i1 %580 to i8
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %581, i8* %582, align 1, !tbaa !2449
  %583 = lshr i64 %561, 63
  %584 = trunc i64 %583 to i8
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %584, i8* %585, align 1, !tbaa !2450
  %586 = lshr i64 %558, 63
  %587 = xor i64 %583, %586
  %588 = xor i64 %583, 1
  %589 = add nuw nsw i64 %587, %588
  %590 = icmp eq i64 %589, 2
  %591 = zext i1 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %591, i8* %592, align 1, !tbaa !2451
  %593 = load i64, i64* %RBP
  %594 = sub i64 %593, 48
  %595 = load i64, i64* %RCX
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 4
  store i64 %597, i64* %PC
  %598 = inttoptr i64 %594 to i64*
  store i64 %595, i64* %598
  %599 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %600 = load i64, i64* %RAX
  %601 = sub i64 %600, 8
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 5
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to double*
  %605 = load double, double* %604
  %606 = bitcast i8* %599 to double*
  store double %605, double* %606, align 1, !tbaa !2452
  %607 = getelementptr inbounds i8, i8* %599, i64 8
  %608 = bitcast i8* %607 to double*
  store double 0.000000e+00, double* %608, align 1, !tbaa !2452
  %609 = bitcast %union.vec128_t* %XMM1 to i8*
  %610 = bitcast %union.vec128_t* %XMM0 to i8*
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC
  %613 = bitcast i8* %609 to double*
  %614 = load double, double* %613, align 1
  %615 = bitcast i8* %610 to double*
  %616 = load double, double* %615, align 1
  %617 = fcmp uno double %614, %616
  br i1 %617, label %618, label %630

; <label>:618:                                    ; preds = %block_405cd0
  %619 = fadd double %614, %616
  %620 = bitcast double %619 to i64
  %621 = and i64 %620, 9221120237041090560
  %622 = icmp eq i64 %621, 9218868437227405312
  %623 = and i64 %620, 2251799813685247
  %624 = icmp ne i64 %623, 0
  %625 = and i1 %622, %624
  br i1 %625, label %626, label %636

; <label>:626:                                    ; preds = %618
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %628 = load i64, i64* %627, align 8, !tbaa !2428
  %629 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %628, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:630:                                    ; preds = %block_405cd0
  %631 = fcmp ogt double %614, %616
  br i1 %631, label %636, label %632

; <label>:632:                                    ; preds = %630
  %633 = fcmp olt double %614, %616
  br i1 %633, label %636, label %634

; <label>:634:                                    ; preds = %632
  %635 = fcmp oeq double %614, %616
  br i1 %635, label %636, label %643

; <label>:636:                                    ; preds = %634, %632, %630, %618
  %637 = phi i8 [ 0, %630 ], [ 0, %632 ], [ 1, %634 ], [ 1, %618 ]
  %638 = phi i8 [ 0, %630 ], [ 0, %632 ], [ 0, %634 ], [ 1, %618 ]
  %639 = phi i8 [ 0, %630 ], [ 1, %632 ], [ 0, %634 ], [ 1, %618 ]
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %637, i8* %640, align 1, !tbaa !2432
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %638, i8* %641, align 1, !tbaa !2432
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %639, i8* %642, align 1, !tbaa !2432
  br label %643

; <label>:643:                                    ; preds = %636, %634
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %644, align 1, !tbaa !2432
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %645, align 1, !tbaa !2432
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %646, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %626, %643
  %647 = phi %struct.Memory* [ %629, %626 ], [ %MEMORY.0, %643 ]
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 3
  store i64 %649, i64* %PC
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %651 = load i8, i8* %650, align 1, !tbaa !2433
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %653 = load i8, i8* %652, align 1, !tbaa !2449
  %654 = or i8 %653, %651
  %655 = icmp eq i8 %654, 0
  %656 = zext i1 %655 to i8
  store i8 %656, i8* %DL, align 1, !tbaa !2432
  %657 = load i64, i64* %RBP
  %658 = sub i64 %657, 49
  %659 = load i8, i8* %DL
  %660 = zext i8 %659 to i64
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 3
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %658 to i8*
  store i8 %659, i8* %663
  br label %block_405cf3
}

; Function Attrs: noinline
define %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404000:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %RDI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 16
  %45 = load i64, i64* %RSI
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 24
  %51 = load i64, i64* %RDX
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54
  br label %block_404010

block_404047:                                     ; preds = %block_404010
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %66 = load i64, i64* %65, align 8, !tbaa !2428
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %64, align 8, !tbaa !2428
  %69 = add i64 %66, 8
  store i64 %69, i64* %65, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404010:                                     ; preds = %block_40401e, %block_404000
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_404000 ], [ %MEMORY.0, %block_40401e ]
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 8
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = load i64, i64* %RAX
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 16
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81
  %83 = sub i64 %76, %82
  %84 = icmp ugt i64 %82, %76
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %85, i8* %86, align 1, !tbaa !2433
  %87 = trunc i64 %83 to i32
  %88 = and i32 %87, 255
  %89 = call i32 @llvm.ctpop.i32(i32 %88) #16
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = xor i8 %91, 1
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %92, i8* %93, align 1, !tbaa !2447
  %94 = xor i64 %82, %76
  %95 = xor i64 %94, %83
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %98, i8* %99, align 1, !tbaa !2448
  %100 = icmp eq i64 %83, 0
  %101 = zext i1 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %101, i8* %102, align 1, !tbaa !2449
  %103 = lshr i64 %83, 63
  %104 = trunc i64 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %104, i8* %105, align 1, !tbaa !2450
  %106 = lshr i64 %76, 63
  %107 = lshr i64 %82, 63
  %108 = xor i64 %107, %106
  %109 = xor i64 %103, %106
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %112, i8* %113, align 1, !tbaa !2451
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 47
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 6
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 6
  store i64 %119, i64* %PC
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %121 = load i8, i8* %120, align 1, !tbaa !2449
  store i8 %121, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %123 = icmp ne i8 %121, 0
  %124 = select i1 %123, i64 %115, i64 %117
  store i64 %124, i64* %122, align 8, !tbaa !2428
  %125 = load i8, i8* %BRANCH_TAKEN
  %126 = icmp eq i8 %125, 1
  br i1 %126, label %block_404047, label %block_40401e

block_40401e:                                     ; preds = %block_404010
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 8
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i64*
  %132 = load i64, i64* %131
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %RAX
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  store i64 %133, i64* %RCX, align 8, !tbaa !2428
  %136 = load i64, i64* %RCX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = add i64 8, %136
  store i64 %139, i64* %RCX, align 8, !tbaa !2428
  %140 = icmp ult i64 %139, %136
  %141 = icmp ult i64 %139, 8
  %142 = or i1 %140, %141
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %143, i8* %144, align 1, !tbaa !2433
  %145 = trunc i64 %139 to i32
  %146 = and i32 %145, 255
  %147 = call i32 @llvm.ctpop.i32(i32 %146) #16
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %150, i8* %151, align 1, !tbaa !2447
  %152 = xor i64 8, %136
  %153 = xor i64 %152, %139
  %154 = lshr i64 %153, 4
  %155 = trunc i64 %154 to i8
  %156 = and i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %156, i8* %157, align 1, !tbaa !2448
  %158 = icmp eq i64 %139, 0
  %159 = zext i1 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %159, i8* %160, align 1, !tbaa !2449
  %161 = lshr i64 %139, 63
  %162 = trunc i64 %161 to i8
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %162, i8* %163, align 1, !tbaa !2450
  %164 = lshr i64 %136, 63
  %165 = xor i64 %161, %164
  %166 = add nuw nsw i64 %165, %161
  %167 = icmp eq i64 %166, 2
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %168, i8* %169, align 1, !tbaa !2451
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 8
  %172 = load i64, i64* %RCX
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 24
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i64*
  %181 = load i64, i64* %180
  store i64 %181, i64* %RCX, align 8, !tbaa !2428
  %182 = load i64, i64* %RCX
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 3
  store i64 %184, i64* %PC
  store i64 %182, i64* %RDX, align 8, !tbaa !2428
  %185 = load i64, i64* %RDX
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 4
  store i64 %187, i64* %PC
  %188 = add i64 8, %185
  store i64 %188, i64* %RDX, align 8, !tbaa !2428
  %189 = icmp ult i64 %188, %185
  %190 = icmp ult i64 %188, 8
  %191 = or i1 %189, %190
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %192, i8* %193, align 1, !tbaa !2433
  %194 = trunc i64 %188 to i32
  %195 = and i32 %194, 255
  %196 = call i32 @llvm.ctpop.i32(i32 %195) #16
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %199, i8* %200, align 1, !tbaa !2447
  %201 = xor i64 8, %185
  %202 = xor i64 %201, %188
  %203 = lshr i64 %202, 4
  %204 = trunc i64 %203 to i8
  %205 = and i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %205, i8* %206, align 1, !tbaa !2448
  %207 = icmp eq i64 %188, 0
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %208, i8* %209, align 1, !tbaa !2449
  %210 = lshr i64 %188, 63
  %211 = trunc i64 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %211, i8* %212, align 1, !tbaa !2450
  %213 = lshr i64 %185, 63
  %214 = xor i64 %210, %213
  %215 = add nuw nsw i64 %214, %210
  %216 = icmp eq i64 %215, 2
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %217, i8* %218, align 1, !tbaa !2451
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 24
  %221 = load i64, i64* %RDX
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 4
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %220 to i64*
  store i64 %221, i64* %224
  %225 = load i64, i64* %RAX
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 3
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RCX
  %231 = load i64, i64* %RAX
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %230 to i64*
  store i64 %231, i64* %234
  %235 = load i64, i64* %PC
  %236 = sub i64 %235, 50
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %236, i64* %239, align 8, !tbaa !2428
  br label %block_404010
}

; Function Attrs: noinline
define %struct.Memory* @sub_406390__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406390:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 9
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ESI = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = load i64, i64* %RBP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 1
  store i64 %34, i64* %PC
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %36 = load i64, i64* %35, align 8, !tbaa !2428
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %32, i64* %38
  store i64 %37, i64* %35, align 8, !tbaa !2428
  %39 = load i64, i64* %RSP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 3
  store i64 %41, i64* %PC
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC
  %45 = sub i64 %42, 48
  store i64 %45, i64* %RSP, align 8, !tbaa !2428
  %46 = icmp ult i64 %42, 48
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %47, i8* %48, align 1, !tbaa !2433
  %49 = trunc i64 %45 to i32
  %50 = and i32 %49, 255
  %51 = call i32 @llvm.ctpop.i32(i32 %50) #16
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = xor i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = xor i64 48, %42
  %57 = xor i64 %56, %45
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = icmp eq i64 %45, 0
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = lshr i64 %45, 63
  %66 = trunc i64 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = lshr i64 %42, 63
  %69 = xor i64 %65, %68
  %70 = add nuw nsw i64 %69, %68
  %71 = icmp eq i64 %70, 2
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %72, i8* %73, align 1, !tbaa !2451
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 16
  %76 = load i64, i64* %RDI
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 24
  %82 = load i64, i64* %RSI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %81 to i64*
  store i64 %82, i64* %85
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 32
  %88 = bitcast %union.vec128_t* %XMM0 to i8*
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  %91 = bitcast i8* %88 to double*
  %92 = load double, double* %91, align 1
  %93 = inttoptr i64 %87 to double*
  store double %92, double* %93
  br label %block_4063a5

block_4063bf:                                     ; preds = %block_4063a5
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 16
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RSI
  %99 = load i32, i32* %ESI
  %100 = zext i32 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 2
  store i64 %102, i64* %PC
  %103 = xor i64 %100, %98
  %104 = trunc i64 %103 to i32
  %105 = and i64 %103, 4294967295
  store i64 %105, i64* %RSI, align 8, !tbaa !2428
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %106, align 1, !tbaa !2433
  %107 = and i32 %104, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = icmp eq i32 %104, 0
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i32 %104, 31
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %117, i8* %118, align 1, !tbaa !2450
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %119, align 1, !tbaa !2451
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %120, align 1, !tbaa !2448
  %121 = load i64, i64* %PC
  %122 = sub i64 %121, 10085
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 5
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 5
  store i64 %126, i64* %PC
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %128 = load i64, i64* %127, align 8, !tbaa !2428
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %124, i64* %130
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %131, align 8, !tbaa !2428
  %132 = load i64, i64* %PC
  %133 = call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %132, %struct.Memory* %298)
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 48
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 48
  %140 = load i64, i64* %RAX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %PC
  %145 = sub i64 %144, 9986
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 5
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 5
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %151 = load i64, i64* %150, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %147, i64* %153
  store i64 %152, i64* %150, align 8, !tbaa !2428
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %145, i64* %154, align 8, !tbaa !2428
  %155 = load i64, i64* %PC
  %156 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %155, %struct.Memory* %133)
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 32
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  store i64 %158, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %RAX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 3
  store i64 %163, i64* %PC
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %164 = load i64, i64* %PC
  %165 = sub i64 %164, 302
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %171 = load i64, i64* %170, align 8, !tbaa !2428
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 %167, i64* %173
  store i64 %172, i64* %170, align 8, !tbaa !2428
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %165, i64* %174, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = call %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* %0, i64 %175, %struct.Memory* %156)
  %177 = load i64, i64* %RBP
  %178 = sub i64 %177, 40
  %179 = bitcast %union.vec128_t* %XMM0 to i8*
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 5
  store i64 %181, i64* %PC
  %182 = bitcast i8* %179 to double*
  %183 = load double, double* %182, align 1
  %184 = inttoptr i64 %178 to double*
  store double %183, double* %184
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 40
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i64*
  %190 = load i64, i64* %189
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 32
  %193 = load i64, i64* %RAX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %192 to i64*
  store i64 %193, i64* %196
  %197 = load i64, i64* %PC
  %198 = sub i64 %197, 75
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %198, i64* %201, align 8, !tbaa !2428
  br label %block_4063a5

block_4063ba:                                     ; preds = %block_4063a5
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 59
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %203, i64* %206, align 8, !tbaa !2428
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 32
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 8
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %214 to i64*
  store i64 %215, i64* %218
  %219 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 8
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to double*
  %225 = load double, double* %224
  %226 = bitcast i8* %219 to double*
  store double %225, double* %226, align 1, !tbaa !2452
  %227 = getelementptr inbounds i8, i8* %219, i64 8
  %228 = bitcast i8* %227 to double*
  store double 0.000000e+00, double* %228, align 1, !tbaa !2452
  %229 = load i64, i64* %RSP
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC
  %232 = add i64 48, %229
  store i64 %232, i64* %RSP, align 8, !tbaa !2428
  %233 = icmp ult i64 %232, %229
  %234 = icmp ult i64 %232, 48
  %235 = or i1 %233, %234
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %236, i8* %237, align 1, !tbaa !2433
  %238 = trunc i64 %232 to i32
  %239 = and i32 %238, 255
  %240 = call i32 @llvm.ctpop.i32(i32 %239) #16
  %241 = trunc i32 %240 to i8
  %242 = and i8 %241, 1
  %243 = xor i8 %242, 1
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %243, i8* %244, align 1, !tbaa !2447
  %245 = xor i64 48, %229
  %246 = xor i64 %245, %232
  %247 = lshr i64 %246, 4
  %248 = trunc i64 %247 to i8
  %249 = and i8 %248, 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %249, i8* %250, align 1, !tbaa !2448
  %251 = icmp eq i64 %232, 0
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %252, i8* %253, align 1, !tbaa !2449
  %254 = lshr i64 %232, 63
  %255 = trunc i64 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %255, i8* %256, align 1, !tbaa !2450
  %257 = lshr i64 %229, 63
  %258 = xor i64 %254, %257
  %259 = add nuw nsw i64 %258, %254
  %260 = icmp eq i64 %259, 2
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %261, i8* %262, align 1, !tbaa !2451
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 1
  store i64 %264, i64* %PC
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %266 = load i64, i64* %265, align 8, !tbaa !2428
  %267 = add i64 %266, 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268
  store i64 %269, i64* %RBP, align 8, !tbaa !2428
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 1
  store i64 %271, i64* %PC
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %274 = load i64, i64* %273, align 8, !tbaa !2428
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  store i64 %276, i64* %272, align 8, !tbaa !2428
  %277 = add i64 %274, 8
  store i64 %277, i64* %273, align 8, !tbaa !2428
  ret %struct.Memory* %298

block_4063a5:                                     ; preds = %block_4063bf, %block_406390
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_406390 ], [ %176, %block_4063bf ]
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 16
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 4
  store i64 %281, i64* %PC
  store i64 %279, i64* %RDI, align 8, !tbaa !2428
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 24
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 4
  store i64 %285, i64* %PC
  store i64 %283, i64* %RSI, align 8, !tbaa !2428
  %286 = load i64, i64* %PC
  %287 = sub i64 %286, 9997
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 5
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 5
  store i64 %291, i64* %PC
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %293 = load i64, i64* %292, align 8, !tbaa !2428
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  store i64 %289, i64* %295
  store i64 %294, i64* %292, align 8, !tbaa !2428
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %287, i64* %296, align 8, !tbaa !2428
  %297 = load i64, i64* %PC
  %298 = call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %297, %struct.Memory* %MEMORY.0)
  %299 = load i8, i8* %AL
  %300 = zext i8 %299 to i64
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = and i64 1, %300
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %305, align 1, !tbaa !2433
  %306 = trunc i64 %303 to i32
  %307 = and i32 %306, 255
  %308 = call i32 @llvm.ctpop.i32(i32 %307) #16
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %311, i8* %312, align 1, !tbaa !2447
  %313 = icmp eq i8 %304, 0
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %314, i8* %315, align 1, !tbaa !2449
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %316, align 1, !tbaa !2450
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %317, align 1, !tbaa !2451
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %318, align 1, !tbaa !2448
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 11
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 6
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 6
  store i64 %324, i64* %PC
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %326 = load i8, i8* %325, align 1, !tbaa !2449
  %327 = icmp eq i8 %326, 0
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %330 = select i1 %327, i64 %320, i64 %322
  store i64 %330, i64* %329, align 8, !tbaa !2428
  %331 = load i8, i8* %BRANCH_TAKEN
  %332 = icmp eq i8 %331, 1
  br i1 %332, label %block_4063bf, label %block_4063ba
}

; Function Attrs: noinline
define %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403050:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RAX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RBP
  %36 = sub i64 %35, 8
  %37 = load i64, i64* %RDI
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %40
  %41 = load i64, i64* %RBP
  %42 = sub i64 %41, 16
  %43 = load i64, i64* %RSI
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = load i64, i64* %RSI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 16
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = load i64, i64* %RSI
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68
  %70 = sub i64 %64, %69
  %71 = icmp ugt i64 %69, %64
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2433
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = xor i64 %69, %64
  %82 = xor i64 %81, %70
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = icmp eq i64 %70, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = lshr i64 %70, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = lshr i64 %64, 63
  %94 = lshr i64 %69, 63
  %95 = xor i64 %94, %93
  %96 = xor i64 %90, %93
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2451
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %104 = load i8, i8* %103, align 1, !tbaa !2449
  %105 = icmp eq i8 %104, 0
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %AL, align 1, !tbaa !2432
  %107 = load i8, i8* %AL
  %108 = zext i8 %107 to i64
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 2
  store i64 %110, i64* %PC
  %111 = and i64 1, %108
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %AL, align 1, !tbaa !2432
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %113, align 1, !tbaa !2433
  %114 = trunc i64 %111 to i32
  %115 = and i32 %114, 255
  %116 = call i32 @llvm.ctpop.i32(i32 %115) #16
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %119, i8* %120, align 1, !tbaa !2447
  %121 = icmp eq i8 %112, 0
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %122, i8* %123, align 1, !tbaa !2449
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %124, align 1, !tbaa !2450
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %125, align 1, !tbaa !2451
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %126, align 1, !tbaa !2448
  %127 = load i8, i8* %AL
  %128 = zext i8 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = and i64 %128, 255
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b00__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400b00:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401e70__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401e70:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 48
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 48
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2433
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i64 48, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2451
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 8
  %75 = load i64, i64* %RDI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %RSI
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 4
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = bitcast %union.vec128_t* %XMM0 to i8*
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = bitcast i8* %87 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %86 to double*
  store double %91, double* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 32
  %95 = load i64, i64* %RDX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 36
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 7
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  store i32 0, i32* %103
  br label %block_401e90

block_401ea0:                                     ; preds = %block_401e90
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 8
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 16
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 24
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to double*
  %122 = load double, double* %121
  %123 = bitcast i8* %116 to double*
  store double %122, double* %123, align 1, !tbaa !2452
  %124 = getelementptr inbounds i8, i8* %116, i64 8
  %125 = bitcast i8* %124 to double*
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 17987
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 5
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 5
  store i64 %131, i64* %PC
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %133 = load i64, i64* %132, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %129, i64* %135
  store i64 %134, i64* %132, align 8, !tbaa !2428
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %127, i64* %136, align 8, !tbaa !2428
  %137 = load i64, i64* %PC
  %138 = call %struct.Memory* @sub_4064f0__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* %0, i64 %137, %struct.Memory* %MEMORY.0)
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 16190
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* %0, i64 %150, %struct.Memory* %138)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 36
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 3
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %RAX, align 8, !tbaa !2428
  %159 = load i64, i64* %RAX
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC
  %162 = trunc i64 %159 to i32
  %163 = add i32 1, %162
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = icmp ult i32 %163, %162
  %166 = icmp ult i32 %163, 1
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2433
  %170 = and i32 %163, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #16
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2447
  %176 = xor i64 1, %159
  %177 = trunc i64 %176 to i32
  %178 = xor i32 %177, %163
  %179 = lshr i32 %178, 4
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2448
  %183 = icmp eq i32 %163, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2449
  %186 = lshr i32 %163, 31
  %187 = trunc i32 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2450
  %189 = lshr i32 %162, 31
  %190 = xor i32 %186, %189
  %191 = add nuw nsw i32 %190, %186
  %192 = icmp eq i32 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2451
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 36
  %197 = load i32, i32* %EAX
  %198 = zext i32 %197 to i64
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %196 to i32*
  store i32 %197, i32* %201
  %202 = load i64, i64* %PC
  %203 = sub i64 %202, 48
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %203, i64* %206, align 8, !tbaa !2428
  br label %block_401e90

block_401e90:                                     ; preds = %block_401ea0, %block_401e70
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e70 ], [ %151, %block_401ea0 ]
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 36
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 3
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i32*
  %212 = load i32, i32* %211
  %213 = zext i32 %212 to i64
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i32, i32* %EAX
  %215 = zext i32 %214 to i64
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 7
  store i64 %217, i64* %PC
  %218 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %219 = sub i32 %214, %218
  %220 = icmp ult i32 %214, %218
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %221, i8* %222, align 1, !tbaa !2433
  %223 = and i32 %219, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = xor i32 %218, %214
  %230 = xor i32 %229, %219
  %231 = lshr i32 %230, 4
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %233, i8* %234, align 1, !tbaa !2448
  %235 = icmp eq i32 %219, 0
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %236, i8* %237, align 1, !tbaa !2449
  %238 = lshr i32 %219, 31
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = lshr i32 %214, 31
  %242 = lshr i32 %218, 31
  %243 = xor i32 %242, %241
  %244 = xor i32 %238, %241
  %245 = add nuw nsw i32 %244, %243
  %246 = icmp eq i32 %245, 2
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %247, i8* %248, align 1, !tbaa !2451
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 43
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 6
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 6
  store i64 %254, i64* %PC
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %256 = load i8, i8* %255, align 1, !tbaa !2450
  %257 = icmp ne i8 %256, 0
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %259 = load i8, i8* %258, align 1, !tbaa !2451
  %260 = icmp ne i8 %259, 0
  %261 = xor i1 %257, %260
  %262 = xor i1 %261, true
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = select i1 %261, i64 %252, i64 %250
  store i64 %265, i64* %264, align 8, !tbaa !2428
  %266 = load i8, i8* %BRANCH_TAKEN
  %267 = icmp eq i8 %266, 1
  br i1 %267, label %block_401ec5, label %block_401ea0

block_401ec5:                                     ; preds = %block_401e90
  %268 = load i64, i64* %RSP
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = add i64 48, %268
  store i64 %271, i64* %RSP, align 8, !tbaa !2428
  %272 = icmp ult i64 %271, %268
  %273 = icmp ult i64 %271, 48
  %274 = or i1 %272, %273
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %275, i8* %276, align 1, !tbaa !2433
  %277 = trunc i64 %271 to i32
  %278 = and i32 %277, 255
  %279 = call i32 @llvm.ctpop.i32(i32 %278) #16
  %280 = trunc i32 %279 to i8
  %281 = and i8 %280, 1
  %282 = xor i8 %281, 1
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %282, i8* %283, align 1, !tbaa !2447
  %284 = xor i64 48, %268
  %285 = xor i64 %284, %271
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %288, i8* %289, align 1, !tbaa !2448
  %290 = icmp eq i64 %271, 0
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %291, i8* %292, align 1, !tbaa !2449
  %293 = lshr i64 %271, 63
  %294 = trunc i64 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %294, i8* %295, align 1, !tbaa !2450
  %296 = lshr i64 %268, 63
  %297 = xor i64 %293, %296
  %298 = add nuw nsw i64 %297, %293
  %299 = icmp eq i64 %298, 2
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %300, i8* %301, align 1, !tbaa !2451
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 1
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %305 = load i64, i64* %304, align 8, !tbaa !2428
  %306 = add i64 %305, 8
  %307 = inttoptr i64 %305 to i64*
  %308 = load i64, i64* %307
  store i64 %308, i64* %RBP, align 8, !tbaa !2428
  store i64 %306, i64* %304, align 8, !tbaa !2428
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 1
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %313 = load i64, i64* %312, align 8, !tbaa !2428
  %314 = inttoptr i64 %313 to i64*
  %315 = load i64, i64* %314
  store i64 %315, i64* %311, align 8, !tbaa !2428
  %316 = add i64 %313, 8
  store i64 %316, i64* %312, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 16
  %68 = load i64, i64* %RSI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RSI, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 18344
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_406540__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i64, i64* %RSP
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = add i64 16, %97
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  %101 = icmp ult i64 %100, %97
  %102 = icmp ult i64 %100, 16
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %104, i8* %105, align 1, !tbaa !2433
  %106 = trunc i64 %100 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 16, %97
  %114 = xor i64 %113, %100
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = icmp eq i64 %100, 0
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %100, 63
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = lshr i64 %97, 63
  %126 = xor i64 %122, %125
  %127 = add nuw nsw i64 %126, %122
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %129, i8* %130, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %96
}

; Function Attrs: noinline
define %struct.Memory* @sub_403ba0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403ba0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %ECX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ESI = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 9
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 15
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RBP = bitcast %union.anon* %33 to i64*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 64
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 64
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2433
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #16
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = xor i64 64, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2451
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %80 = load i64, i64* %RCX
  %81 = load i32, i32* %ECX
  %82 = zext i32 %81 to i64
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 2
  store i64 %84, i64* %PC
  %85 = xor i64 %82, %80
  %86 = trunc i64 %85 to i32
  %87 = and i64 %85, 4294967295
  store i64 %87, i64* %RCX, align 8, !tbaa !2428
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %88, align 1, !tbaa !2433
  %89 = and i32 %86, 255
  %90 = call i32 @llvm.ctpop.i32(i32 %89) #16
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %93, i8* %94, align 1, !tbaa !2447
  %95 = icmp eq i32 %86, 0
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %96, i8* %97, align 1, !tbaa !2449
  %98 = lshr i32 %86, 31
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %99, i8* %100, align 1, !tbaa !2450
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %101, align 1, !tbaa !2451
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %102, align 1, !tbaa !2448
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 16
  %105 = load i64, i64* %RDI
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 24
  %111 = load i64, i64* %RSI
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 16
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i64*
  %120 = load i64, i64* %119
  store i64 %120, i64* %RSI, align 8, !tbaa !2428
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 32
  %123 = load i64, i64* %RSI
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %122 to i64*
  store i64 %123, i64* %126
  %127 = load i64, i64* %RAX
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  store i64 %127, i64* %RDI, align 8, !tbaa !2428
  %130 = load i32, i32* %ECX
  %131 = zext i32 %130 to i64
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 2
  store i64 %133, i64* %PC
  %134 = and i64 %131, 4294967295
  store i64 %134, i64* %RSI, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 157
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 5
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = add i64 %142, -8
  %144 = inttoptr i64 %143 to i64*
  store i64 %138, i64* %144
  store i64 %143, i64* %141, align 8, !tbaa !2428
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %136, i64* %145, align 8, !tbaa !2428
  %146 = load i64, i64* %PC
  %147 = call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %146, %struct.Memory* %2)
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 40
  %150 = load i64, i64* %RAX
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %149 to i64*
  store i64 %150, i64* %153
  br label %block_403bcc

block_403c33:                                     ; preds = %block_403be6
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 1
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i8*
  store i8 0, i8* %158
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 14
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %160, i64* %163, align 8, !tbaa !2428
  br label %block_403c45

block_403be6:                                     ; preds = %block_403bcc
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 16
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  store i64 %165, i64* %RDI, align 8, !tbaa !2428
  %168 = load i64, i64* %RSI
  %169 = load i32, i32* %ESI
  %170 = zext i32 %169 to i64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 2
  store i64 %172, i64* %PC
  %173 = xor i64 %170, %168
  %174 = trunc i64 %173 to i32
  %175 = and i64 %173, 4294967295
  store i64 %175, i64* %RSI, align 8, !tbaa !2428
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %176, align 1, !tbaa !2433
  %177 = and i32 %174, 255
  %178 = call i32 @llvm.ctpop.i32(i32 %177) #16
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i32 %174, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2449
  %186 = lshr i32 %174, 31
  %187 = trunc i32 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2450
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %189, align 1, !tbaa !2451
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %190, align 1, !tbaa !2448
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 116
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 5
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  store i64 %196, i64* %PC
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %198 = load i64, i64* %197, align 8, !tbaa !2428
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %194, i64* %200
  store i64 %199, i64* %197, align 8, !tbaa !2428
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %192, i64* %201, align 8, !tbaa !2428
  %202 = load i64, i64* %PC
  %203 = call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %202, %struct.Memory* %392)
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 48
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 4
  store i64 %207, i64* %PC
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 48
  %210 = load i64, i64* %RAX
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 4
  store i64 %212, i64* %PC
  %213 = inttoptr i64 %209 to i64*
  store i64 %210, i64* %213
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 215
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 5
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !2428
  %222 = add i64 %221, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 %217, i64* %223
  store i64 %222, i64* %220, align 8, !tbaa !2428
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %215, i64* %224, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %225, %struct.Memory* %203)
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 32
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC
  store i64 %228, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RSI
  %232 = load i32, i32* %ESI
  %233 = zext i32 %232 to i64
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 2
  store i64 %235, i64* %PC
  %236 = xor i64 %233, %231
  %237 = trunc i64 %236 to i32
  %238 = and i64 %236, 4294967295
  store i64 %238, i64* %RSI, align 8, !tbaa !2428
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %239, align 1, !tbaa !2433
  %240 = and i32 %237, 255
  %241 = call i32 @llvm.ctpop.i32(i32 %240) #16
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  %244 = xor i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %244, i8* %245, align 1, !tbaa !2447
  %246 = icmp eq i32 %237, 0
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %247, i8* %248, align 1, !tbaa !2449
  %249 = lshr i32 %237, 31
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %250, i8* %251, align 1, !tbaa !2450
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %252, align 1, !tbaa !2451
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %253, align 1, !tbaa !2448
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 64
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  store i64 %265, i64* %PC
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %267 = load i64, i64* %266, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %263, i64* %269
  store i64 %268, i64* %266, align 8, !tbaa !2428
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %261, i64* %270, align 8, !tbaa !2428
  %271 = load i64, i64* %PC
  %272 = call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %271, %struct.Memory* %226)
  %273 = load i64, i64* %RBP
  %274 = sub i64 %273, 56
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  store i64 %274, i64* %RDI, align 8, !tbaa !2428
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 56
  %279 = load i64, i64* %RAX
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 4
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %278 to i64*
  store i64 %279, i64* %282
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 187
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 5
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  store i64 %286, i64* %292
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %284, i64* %293, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %294, %struct.Memory* %272)
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 64
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RDI, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 3
  store i64 %304, i64* %PC
  store i64 %302, i64* %RSI, align 8, !tbaa !2428
  %305 = load i64, i64* %PC
  %306 = sub i64 %305, 2513
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 5
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 5
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %312 = load i64, i64* %311, align 8, !tbaa !2428
  %313 = add i64 %312, -8
  %314 = inttoptr i64 %313 to i64*
  store i64 %308, i64* %314
  store i64 %313, i64* %311, align 8, !tbaa !2428
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %306, i64* %315, align 8, !tbaa !2428
  %316 = load i64, i64* %PC
  %317 = call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %316, %struct.Memory* %295)
  %318 = load i8, i8* %AL
  %319 = zext i8 %318 to i64
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 2
  store i64 %321, i64* %PC
  %322 = and i64 1, %319
  %323 = trunc i64 %322 to i8
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %324, align 1, !tbaa !2433
  %325 = trunc i64 %322 to i32
  %326 = and i32 %325, 255
  %327 = call i32 @llvm.ctpop.i32(i32 %326) #16
  %328 = trunc i32 %327 to i8
  %329 = and i8 %328, 1
  %330 = xor i8 %329, 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %330, i8* %331, align 1, !tbaa !2447
  %332 = icmp eq i8 %323, 0
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %333, i8* %334, align 1, !tbaa !2449
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %335, align 1, !tbaa !2450
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %336, align 1, !tbaa !2451
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %337, align 1, !tbaa !2448
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 11
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 6
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 6
  store i64 %343, i64* %PC
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %345 = load i8, i8* %344, align 1, !tbaa !2449
  %346 = icmp eq i8 %345, 0
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %349 = select i1 %346, i64 %339, i64 %341
  store i64 %349, i64* %348, align 8, !tbaa !2428
  %350 = load i8, i8* %BRANCH_TAKEN
  %351 = icmp eq i8 %350, 1
  br i1 %351, label %block_403c33, label %block_403c2e

block_403c2e:                                     ; preds = %block_403be6
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 14
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 5
  store i64 %355, i64* %PC
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %353, i64* %356, align 8, !tbaa !2428
  %357 = load i64, i64* %PC
  %358 = sub i64 %357, 112
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 5
  store i64 %360, i64* %PC
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %358, i64* %361, align 8, !tbaa !2428
  br label %block_403bcc

block_403be1:                                     ; preds = %block_403bcc
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 96
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  store i64 %365, i64* %PC
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %363, i64* %366, align 8, !tbaa !2428
  %367 = load i64, i64* %RBP
  %368 = sub i64 %367, 1
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i8*
  store i8 1, i8* %371
  br label %block_403c45

block_403bcc:                                     ; preds = %block_403c2e, %block_403ba0
  %MEMORY.0 = phi %struct.Memory* [ %147, %block_403ba0 ], [ %317, %block_403c2e ]
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 16
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  store i64 %373, i64* %RDI, align 8, !tbaa !2428
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 24
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC
  store i64 %377, i64* %RSI, align 8, !tbaa !2428
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 204
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  store i64 %385, i64* %PC
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %387 = load i64, i64* %386, align 8, !tbaa !2428
  %388 = add i64 %387, -8
  %389 = inttoptr i64 %388 to i64*
  store i64 %383, i64* %389
  store i64 %388, i64* %386, align 8, !tbaa !2428
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %381, i64* %390, align 8, !tbaa !2428
  %391 = load i64, i64* %PC
  %392 = call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %391, %struct.Memory* %MEMORY.0)
  %393 = load i8, i8* %AL
  %394 = zext i8 %393 to i64
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 2
  store i64 %396, i64* %PC
  %397 = and i64 1, %394
  %398 = trunc i64 %397 to i8
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %399, align 1, !tbaa !2433
  %400 = trunc i64 %397 to i32
  %401 = and i32 %400, 255
  %402 = call i32 @llvm.ctpop.i32(i32 %401) #16
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %405, i8* %406, align 1, !tbaa !2447
  %407 = icmp eq i8 %398, 0
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %408, i8* %409, align 1, !tbaa !2449
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %410, align 1, !tbaa !2450
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %411, align 1, !tbaa !2451
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %412, align 1, !tbaa !2448
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 11
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 6
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 6
  store i64 %418, i64* %PC
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %420 = load i8, i8* %419, align 1, !tbaa !2449
  %421 = icmp eq i8 %420, 0
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %424 = select i1 %421, i64 %414, i64 %416
  store i64 %424, i64* %423, align 8, !tbaa !2428
  %425 = load i8, i8* %BRANCH_TAKEN
  %426 = icmp eq i8 %425, 1
  br i1 %426, label %block_403be6, label %block_403be1

block_403c45:                                     ; preds = %block_403be1, %block_403c33
  %MEMORY.1 = phi %struct.Memory* [ %317, %block_403c33 ], [ %392, %block_403be1 ]
  %427 = load i64, i64* %RBP
  %428 = sub i64 %427, 1
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 3
  store i64 %430, i64* %PC
  %431 = inttoptr i64 %428 to i8*
  %432 = load i8, i8* %431
  store i8 %432, i8* %AL, align 1, !tbaa !2432
  %433 = load i8, i8* %AL
  %434 = zext i8 %433 to i64
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 2
  store i64 %436, i64* %PC
  %437 = and i64 1, %434
  %438 = trunc i64 %437 to i8
  store i8 %438, i8* %AL, align 1, !tbaa !2432
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %439, align 1, !tbaa !2433
  %440 = trunc i64 %437 to i32
  %441 = and i32 %440, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2447
  %447 = icmp eq i8 %438, 0
  %448 = zext i1 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %448, i8* %449, align 1, !tbaa !2449
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %450, align 1, !tbaa !2450
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %451, align 1, !tbaa !2451
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %452, align 1, !tbaa !2448
  %453 = load i8, i8* %AL
  %454 = zext i8 %453 to i64
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 3
  store i64 %456, i64* %PC
  %457 = and i64 %454, 255
  store i64 %457, i64* %RAX, align 8, !tbaa !2428
  %458 = load i64, i64* %RSP
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = add i64 64, %458
  store i64 %461, i64* %RSP, align 8, !tbaa !2428
  %462 = icmp ult i64 %461, %458
  %463 = icmp ult i64 %461, 64
  %464 = or i1 %462, %463
  %465 = zext i1 %464 to i8
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %465, i8* %466, align 1, !tbaa !2433
  %467 = trunc i64 %461 to i32
  %468 = and i32 %467, 255
  %469 = call i32 @llvm.ctpop.i32(i32 %468) #16
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %472, i8* %473, align 1, !tbaa !2447
  %474 = xor i64 64, %458
  %475 = xor i64 %474, %461
  %476 = lshr i64 %475, 4
  %477 = trunc i64 %476 to i8
  %478 = and i8 %477, 1
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = icmp eq i64 %461, 0
  %481 = zext i1 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %461, 63
  %484 = trunc i64 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %484, i8* %485, align 1, !tbaa !2450
  %486 = lshr i64 %458, 63
  %487 = xor i64 %483, %486
  %488 = add nuw nsw i64 %487, %483
  %489 = icmp eq i64 %488, 2
  %490 = zext i1 %489 to i8
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %490, i8* %491, align 1, !tbaa !2451
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 1
  store i64 %493, i64* %PC
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %495 = load i64, i64* %494, align 8, !tbaa !2428
  %496 = add i64 %495, 8
  %497 = inttoptr i64 %495 to i64*
  %498 = load i64, i64* %497
  store i64 %498, i64* %RBP, align 8, !tbaa !2428
  store i64 %496, i64* %494, align 8, !tbaa !2428
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 1
  store i64 %500, i64* %PC
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %503 = load i64, i64* %502, align 8, !tbaa !2428
  %504 = inttoptr i64 %503 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %501, align 8, !tbaa !2428
  %506 = add i64 %503, 8
  store i64 %506, i64* %502, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_4060d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4060d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 72
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_406130__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 118
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_406170__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403b40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RDI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 13
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 15
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBP = bitcast %union.anon* %24 to i64*
  %25 = load i64, i64* %RBP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 1
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  store i64 %32, i64* %RBP, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC
  %38 = sub i64 %35, 48
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 48
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2433
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #16
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2447
  %49 = xor i64 48, %35
  %50 = xor i64 %49, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %38, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %35, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RSI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RSI, align 8, !tbaa !2428
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = load i64, i64* %RSI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RSI
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 24
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %RDI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %110 to i64*
  %114 = load i64, i64* %113
  store i64 %114, i64* %RSI, align 8, !tbaa !2428
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 56
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %122 = load i64, i64* %121, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %118, i64* %124
  store i64 %123, i64* %121, align 8, !tbaa !2428
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %116, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  %127 = call %struct.Memory* @sub_403ba0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* %0, i64 %126, %struct.Memory* %2)
  %128 = load i8, i8* %AL
  %129 = zext i8 %128 to i64
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 2
  store i64 %131, i64* %PC
  %132 = and i64 1, %129
  %133 = trunc i64 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2433
  %135 = trunc i64 %132 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i8 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %145, align 1, !tbaa !2450
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %146, align 1, !tbaa !2451
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %147, align 1, !tbaa !2448
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 33
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 6
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %155 = load i8, i8* %154, align 1, !tbaa !2449
  %156 = icmp eq i8 %155, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = select i1 %156, i64 %149, i64 %151
  store i64 %159, i64* %158, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_403b90, label %block_403b75

block_403b75:                                     ; preds = %block_403b40
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 10
  store i64 %163, i64* %PC
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 7
  store i64 %165, i64* %PC
  %166 = load i32, i32* bitcast (%current_test_type* @current_test to i32*)
  %167 = zext i32 %166 to i64
  store i64 %167, i64* %RSI, align 8, !tbaa !2428
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 2
  store i64 %169, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %170 = load i64, i64* %PC
  %171 = sub i64 %170, 13464
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 5
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 5
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %173, i64* %179
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %171, i64* %180, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = call %struct.Memory* @ext_4006f0_printf(%struct.State* %0, i64 %181, %struct.Memory* %127)
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 36
  %185 = load i32, i32* %EAX
  %186 = zext i32 %185 to i64
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %184 to i32*
  store i32 %185, i32* %189
  br label %block_403b90

block_403b90:                                     ; preds = %block_403b75, %block_403b40
  %MEMORY.0 = phi %struct.Memory* [ %127, %block_403b40 ], [ %182, %block_403b75 ]
  %190 = load i64, i64* %RSP
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = add i64 48, %190
  store i64 %193, i64* %RSP, align 8, !tbaa !2428
  %194 = icmp ult i64 %193, %190
  %195 = icmp ult i64 %193, 48
  %196 = or i1 %194, %195
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %197, i8* %198, align 1, !tbaa !2433
  %199 = trunc i64 %193 to i32
  %200 = and i32 %199, 255
  %201 = call i32 @llvm.ctpop.i32(i32 %200) #16
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, 1
  %204 = xor i8 %203, 1
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %204, i8* %205, align 1, !tbaa !2447
  %206 = xor i64 48, %190
  %207 = xor i64 %206, %193
  %208 = lshr i64 %207, 4
  %209 = trunc i64 %208 to i8
  %210 = and i8 %209, 1
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %210, i8* %211, align 1, !tbaa !2448
  %212 = icmp eq i64 %193, 0
  %213 = zext i1 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %213, i8* %214, align 1, !tbaa !2449
  %215 = lshr i64 %193, 63
  %216 = trunc i64 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %216, i8* %217, align 1, !tbaa !2450
  %218 = lshr i64 %190, 63
  %219 = xor i64 %215, %218
  %220 = add nuw nsw i64 %219, %215
  %221 = icmp eq i64 %220, 2
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %222, i8* %223, align 1, !tbaa !2451
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 1
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %227 = load i64, i64* %226, align 8, !tbaa !2428
  %228 = add i64 %227, 8
  %229 = inttoptr i64 %227 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RBP, align 8, !tbaa !2428
  store i64 %228, i64* %226, align 8, !tbaa !2428
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 1
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %235 = load i64, i64* %234, align 8, !tbaa !2428
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %233, align 8, !tbaa !2428
  %238 = add i64 %235, 8
  store i64 %238, i64* %234, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d30__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC
  %28 = sub i64 %25, 16
  store i64 %28, i64* %RSP, align 8, !tbaa !2428
  %29 = icmp ult i64 %25, 16
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1, !tbaa !2433
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #16
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = xor i64 16, %25
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1, !tbaa !2448
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %RDI
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 16
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 5
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %72, i64* %78
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %70, i64* %79, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = call %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* %0, i64 %80, %struct.Memory* %2)
  %82 = load i64, i64* %RSP
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = add i64 16, %82
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ult i64 %85, %82
  %87 = icmp ult i64 %85, 16
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %85 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 16, %82
  %99 = xor i64 %98, %85
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %85, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %85, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %82, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %107
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 1
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !2428
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %125, align 8, !tbaa !2428
  %130 = add i64 %127, 8
  store i64 %130, i64* %126, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_4024d0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4024d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 64
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 64
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 64, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = bitcast %union.vec128_t* %XMM0 to i8*
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC
  %82 = bitcast i8* %79 to double*
  %83 = load double, double* %82, align 1
  %84 = inttoptr i64 %78 to double*
  store double %83, double* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %RDI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %86 to i64*
  store i64 %87, i64* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 24
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 32
  %99 = load i64, i64* %RDX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 40
  %105 = load i64, i64* %RCX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_4024f8

block_402541:                                     ; preds = %block_4024f8
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 64, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 64
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 64, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402508:                                     ; preds = %block_4024f8
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 24
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 32
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4220
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 5
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %190, i64* %196
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %188, i64* %197, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = call %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* %0, i64 %198, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 32
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 13135
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %219 = load i64, i64* %218, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %215, i64* %221
  store i64 %220, i64* %218, align 8, !tbaa !2428
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %222, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = call %struct.Memory* @sub_405870__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %223, %struct.Memory* %199)
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 32
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 40
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RSI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 4530
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* %0, i64 %248, %struct.Memory* %224)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 52
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 3
  store i64 %259, i64* %PC
  %260 = trunc i64 %257 to i32
  %261 = add i32 1, %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %260
  %264 = icmp ult i32 %261, 1
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2433
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i64 1, %257
  %275 = trunc i64 %274 to i32
  %276 = xor i32 %275, %261
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = icmp eq i32 %261, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %261, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %260, 31
  %288 = xor i32 %284, %287
  %289 = add nuw nsw i32 %288, %284
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2451
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 52
  %295 = load i32, i32* %EAX
  %296 = zext i32 %295 to i64
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %299
  %300 = load i64, i64* %PC
  %301 = sub i64 %300, 68
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_4024f8

block_4024f8:                                     ; preds = %block_402508, %block_4024d0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4024d0 ], [ %249, %block_402508 ]
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 52
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC
  %316 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %317 = sub i32 %312, %316
  %318 = icmp ult i32 %312, %316
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2433
  %321 = and i32 %317, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = xor i32 %316, %312
  %328 = xor i32 %327, %317
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = icmp eq i32 %317, 0
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %317, 31
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = lshr i32 %312, 31
  %340 = lshr i32 %316, 31
  %341 = xor i32 %340, %339
  %342 = xor i32 %336, %339
  %343 = add nuw nsw i32 %342, %341
  %344 = icmp eq i32 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 63
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 6
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %354 = load i8, i8* %353, align 1, !tbaa !2450
  %355 = icmp ne i8 %354, 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %357 = load i8, i8* %356, align 1, !tbaa !2451
  %358 = icmp ne i8 %357, 0
  %359 = xor i1 %355, %358
  %360 = xor i1 %359, true
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = select i1 %359, i64 %350, i64 %348
  store i64 %363, i64* %362, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_402541, label %block_402508
}

; Function Attrs: noinline
define %struct.Memory* @sub_406110__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406110:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401db0__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401db0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %27 to %union.vec128_t*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RBP
  %39 = sub i64 %38, 8
  %40 = load i64, i64* %RDI
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %43
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 16
  %46 = load i64, i64* %RSI
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 24
  %52 = bitcast %union.vec128_t* %XMM0 to i8*
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 5
  store i64 %54, i64* %PC
  %55 = bitcast i8* %52 to double*
  %56 = load double, double* %55, align 1
  %57 = inttoptr i64 %51 to double*
  store double %56, double* %57
  br label %block_401dc1

block_401dcf:                                     ; preds = %block_401dc1
  %58 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 24
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to double*
  %64 = load double, double* %63
  %65 = bitcast i8* %58 to double*
  store double %64, double* %65, align 1, !tbaa !2452
  %66 = getelementptr inbounds i8, i8* %58, i64 8
  %67 = bitcast i8* %66 to double*
  store double 0.000000e+00, double* %67, align 1, !tbaa !2452
  %68 = load i64, i64* %RBP
  %69 = sub i64 %68, 8
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %69 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  %74 = load i64, i64* %RAX
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 3
  store i64 %76, i64* %PC
  store i64 %74, i64* %RCX, align 8, !tbaa !2428
  %77 = load i64, i64* %RCX
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = add i64 8, %77
  store i64 %80, i64* %RCX, align 8, !tbaa !2428
  %81 = icmp ult i64 %80, %77
  %82 = icmp ult i64 %80, 8
  %83 = or i1 %81, %82
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %84, i8* %85, align 1, !tbaa !2433
  %86 = trunc i64 %80 to i32
  %87 = and i32 %86, 255
  %88 = call i32 @llvm.ctpop.i32(i32 %87) #16
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %91, i8* %92, align 1, !tbaa !2447
  %93 = xor i64 8, %77
  %94 = xor i64 %93, %80
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %97, i8* %98, align 1, !tbaa !2448
  %99 = icmp eq i64 %80, 0
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %100, i8* %101, align 1, !tbaa !2449
  %102 = lshr i64 %80, 63
  %103 = trunc i64 %102 to i8
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %103, i8* %104, align 1, !tbaa !2450
  %105 = lshr i64 %77, 63
  %106 = xor i64 %102, %105
  %107 = add nuw nsw i64 %106, %102
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %109, i8* %110, align 1, !tbaa !2451
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 8
  %113 = load i64, i64* %RCX
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %112 to i64*
  store i64 %113, i64* %116
  %117 = load i64, i64* %RAX
  %118 = bitcast %union.vec128_t* %XMM0 to i8*
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = bitcast i8* %118 to double*
  %122 = load double, double* %121, align 1
  %123 = inttoptr i64 %117 to double*
  store double %122, double* %123
  %124 = load i64, i64* %PC
  %125 = sub i64 %124, 38
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %125, i64* %128, align 8, !tbaa !2428
  br label %block_401dc1

block_401dc1:                                     ; preds = %block_401dcf, %block_401db0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401db0 ], [ %MEMORY.0, %block_401dcf ]
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 8
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 4
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  %135 = load i64, i64* %RAX
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 16
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i64*
  %141 = load i64, i64* %140
  %142 = sub i64 %135, %141
  %143 = icmp ugt i64 %141, %135
  %144 = zext i1 %143 to i8
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %144, i8* %145, align 1, !tbaa !2433
  %146 = trunc i64 %142 to i32
  %147 = and i32 %146, 255
  %148 = call i32 @llvm.ctpop.i32(i32 %147) #16
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %151, i8* %152, align 1, !tbaa !2447
  %153 = xor i64 %141, %135
  %154 = xor i64 %153, %142
  %155 = lshr i64 %154, 4
  %156 = trunc i64 %155 to i8
  %157 = and i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %157, i8* %158, align 1, !tbaa !2448
  %159 = icmp eq i64 %142, 0
  %160 = zext i1 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %160, i8* %161, align 1, !tbaa !2449
  %162 = lshr i64 %142, 63
  %163 = trunc i64 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %163, i8* %164, align 1, !tbaa !2450
  %165 = lshr i64 %135, 63
  %166 = lshr i64 %141, 63
  %167 = xor i64 %166, %165
  %168 = xor i64 %162, %165
  %169 = add nuw nsw i64 %168, %167
  %170 = icmp eq i64 %169, 2
  %171 = zext i1 %170 to i8
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %171, i8* %172, align 1, !tbaa !2451
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 35
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 6
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 6
  store i64 %178, i64* %PC
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %180 = load i8, i8* %179, align 1, !tbaa !2449
  store i8 %180, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %182 = icmp ne i8 %180, 0
  %183 = select i1 %182, i64 %174, i64 %176
  store i64 %183, i64* %181, align 8, !tbaa !2428
  %184 = load i8, i8* %BRANCH_TAKEN
  %185 = icmp eq i8 %184, 1
  br i1 %185, label %block_401dec, label %block_401dcf

block_401dec:                                     ; preds = %block_401dc1
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 1
  store i64 %187, i64* %PC
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %189 = load i64, i64* %188, align 8, !tbaa !2428
  %190 = add i64 %189, 8
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %RBP, align 8, !tbaa !2428
  store i64 %190, i64* %188, align 8, !tbaa !2428
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 1
  store i64 %194, i64* %PC
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %197 = load i64, i64* %196, align 8, !tbaa !2428
  %198 = inttoptr i64 %197 to i64*
  %199 = load i64, i64* %198
  store i64 %199, i64* %195, align 8, !tbaa !2428
  %200 = add i64 %197, 8
  store i64 %200, i64* %196, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404a80:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RBP
  %42 = sub i64 %41, 8
  %43 = load i64, i64* %RDI
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 16
  %49 = load i64, i64* %RSI
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 24
  %55 = load i64, i64* %RDX
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58
  br label %block_404a90

block_404ac9:                                     ; preds = %block_404a90
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 1
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, 8
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 1
  store i64 %67, i64* %PC
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %70 = load i64, i64* %69, align 8, !tbaa !2428
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71
  store i64 %72, i64* %68, align 8, !tbaa !2428
  %73 = add i64 %70, 8
  store i64 %73, i64* %69, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404a90:                                     ; preds = %block_404a9e, %block_404a80
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_404a80 ], [ %MEMORY.0, %block_404a9e ]
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 8
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %75 to i64*
  %79 = load i64, i64* %78
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = load i64, i64* %RAX
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 16
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %82 to i64*
  %86 = load i64, i64* %85
  %87 = sub i64 %80, %86
  %88 = icmp ugt i64 %86, %80
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = trunc i64 %87 to i32
  %92 = and i32 %91, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = xor i64 %86, %80
  %99 = xor i64 %98, %87
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i64 %87, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i64 %87, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i64 %80, 63
  %111 = lshr i64 %86, 63
  %112 = xor i64 %111, %110
  %113 = xor i64 %107, %110
  %114 = add nuw nsw i64 %113, %112
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %116, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 49
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 6
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 6
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %125 = load i8, i8* %124, align 1, !tbaa !2449
  store i8 %125, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %127 = icmp ne i8 %125, 0
  %128 = select i1 %127, i64 %119, i64 %121
  store i64 %128, i64* %126, align 8, !tbaa !2428
  %129 = load i8, i8* %BRANCH_TAKEN
  %130 = icmp eq i8 %129, 1
  br i1 %130, label %block_404ac9, label %block_404a9e

block_404a9e:                                     ; preds = %block_404a90
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64, i64* %RAX
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 3
  store i64 %139, i64* %PC
  store i64 %137, i64* %RCX, align 8, !tbaa !2428
  %140 = load i64, i64* %RCX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 8, %140
  store i64 %143, i64* %RCX, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 8
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 8, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %RBP
  %175 = sub i64 %174, 8
  %176 = load i64, i64* %RCX
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %175 to i64*
  store i64 %176, i64* %179
  %180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %181 = load i64, i64* %RAX
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 4
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to double*
  %185 = load double, double* %184
  %186 = bitcast i8* %180 to double*
  store double %185, double* %186, align 1, !tbaa !2452
  %187 = getelementptr inbounds i8, i8* %180, i64 8
  %188 = bitcast i8* %187 to double*
  store double 0.000000e+00, double* %188, align 1, !tbaa !2452
  %189 = load i64, i64* %RBP
  %190 = sub i64 %189, 24
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = load i64, i64* %RAX
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 3
  store i64 %197, i64* %PC
  store i64 %195, i64* %RCX, align 8, !tbaa !2428
  %198 = load i64, i64* %RCX
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 4
  store i64 %200, i64* %PC
  %201 = add i64 8, %198
  store i64 %201, i64* %RCX, align 8, !tbaa !2428
  %202 = icmp ult i64 %201, %198
  %203 = icmp ult i64 %201, 8
  %204 = or i1 %202, %203
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %205, i8* %206, align 1, !tbaa !2433
  %207 = trunc i64 %201 to i32
  %208 = and i32 %207, 255
  %209 = call i32 @llvm.ctpop.i32(i32 %208) #16
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %212, i8* %213, align 1, !tbaa !2447
  %214 = xor i64 8, %198
  %215 = xor i64 %214, %201
  %216 = lshr i64 %215, 4
  %217 = trunc i64 %216 to i8
  %218 = and i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %218, i8* %219, align 1, !tbaa !2448
  %220 = icmp eq i64 %201, 0
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %221, i8* %222, align 1, !tbaa !2449
  %223 = lshr i64 %201, 63
  %224 = trunc i64 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %224, i8* %225, align 1, !tbaa !2450
  %226 = lshr i64 %198, 63
  %227 = xor i64 %223, %226
  %228 = add nuw nsw i64 %227, %223
  %229 = icmp eq i64 %228, 2
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %230, i8* %231, align 1, !tbaa !2451
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 24
  %234 = load i64, i64* %RCX
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 4
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %233 to i64*
  store i64 %234, i64* %237
  %238 = load i64, i64* %RAX
  %239 = bitcast %union.vec128_t* %XMM0 to i8*
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC
  %242 = bitcast i8* %239 to double*
  %243 = load double, double* %242, align 1
  %244 = inttoptr i64 %238 to double*
  store double %243, double* %244
  %245 = load i64, i64* %PC
  %246 = sub i64 %245, 52
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 5
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %246, i64* %249, align 8, !tbaa !2428
  br label %block_404a90
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RBP
  %26 = sub i64 %25, 8
  %27 = load i64, i64* %RDI
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, 8
  %36 = inttoptr i64 %34 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %42 = load i64, i64* %41, align 8, !tbaa !2428
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %40, align 8, !tbaa !2428
  %45 = add i64 %42, 8
  store i64 %45, i64* %41, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406130__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406130:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 72
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_406190__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 118
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_4061d0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_406170__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406170:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 8
  %30 = load i64, i64* %RDI
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 16
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 16
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = load i64, i64* %RSI
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %71, align 8, !tbaa !2428
  %76 = add i64 %73, 8
  store i64 %76, i64* %72, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402550__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402550:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %34 to %union.vec128_t*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = sub i64 %45, 112
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  %49 = icmp ult i64 %45, 112
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %50, i8* %51, align 1, !tbaa !2433
  %52 = trunc i64 %48 to i32
  %53 = and i32 %52, 255
  %54 = call i32 @llvm.ctpop.i32(i32 %53) #16
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = xor i64 112, %45
  %60 = xor i64 %59, %48
  %61 = lshr i64 %60, 4
  %62 = trunc i64 %61 to i8
  %63 = and i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %63, i8* %64, align 1, !tbaa !2448
  %65 = icmp eq i64 %48, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = lshr i64 %48, 63
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %69, i8* %70, align 1, !tbaa !2450
  %71 = lshr i64 %45, 63
  %72 = xor i64 %68, %71
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %RDI
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RSI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 24
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 32
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = bitcast %union.vec128_t* %XMM0 to i8*
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC
  %106 = bitcast i8* %103 to double*
  %107 = load double, double* %106, align 1
  %108 = inttoptr i64 %102 to double*
  store double %107, double* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 48
  %111 = load i64, i64* %R8
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 52
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119
  br label %block_402578

block_4025f9:                                     ; preds = %block_402578
  %120 = load i64, i64* %RSP
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = add i64 112, %120
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %120
  %125 = icmp ult i64 %123, 112
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 112, %120
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %120, 63
  %149 = xor i64 %145, %148
  %150 = add nuw nsw i64 %149, %145
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %157 = load i64, i64* %156, align 8, !tbaa !2428
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RBP, align 8, !tbaa !2428
  store i64 %158, i64* %156, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 1
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %163, align 8, !tbaa !2428
  %168 = add i64 %165, 8
  store i64 %168, i64* %164, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402588:                                     ; preds = %block_402578
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 64
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 16
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 72
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 24
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 80
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 64
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 72
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 80
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 1908
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %226, i64* %232
  store i64 %231, i64* %229, align 8, !tbaa !2428
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %224, i64* %233, align 8, !tbaa !2428
  %234 = load i64, i64* %PC
  %235 = call %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 24
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 88
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 32
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 96
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 88
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RDI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 96
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 12679
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %275, i64* %281
  store i64 %280, i64* %278, align 8, !tbaa !2428
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %273, i64* %282, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = call %struct.Memory* @sub_405750__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %283, %struct.Memory* %235)
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 104
  %293 = load i64, i64* %RAX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 32
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 112
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %308
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 104
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 112
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 2314
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 5
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %328 = load i64, i64* %327, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %324, i64* %330
  store i64 %329, i64* %327, align 8, !tbaa !2428
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %322, i64* %331, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = call %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* %0, i64 %332, %struct.Memory* %284)
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 52
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  %344 = trunc i64 %341 to i32
  %345 = add i32 1, %344
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %344
  %348 = icmp ult i32 %345, 1
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2433
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #16
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = xor i64 1, %341
  %359 = trunc i64 %358 to i32
  %360 = xor i32 %359, %345
  %361 = lshr i32 %360, 4
  %362 = trunc i32 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = icmp eq i32 %345, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i32 %345, 31
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = lshr i32 %344, 31
  %372 = xor i32 %368, %371
  %373 = add nuw nsw i32 %372, %368
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2451
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 52
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %383
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 124
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %388, align 8, !tbaa !2428
  br label %block_402578

block_402578:                                     ; preds = %block_402588, %block_402550
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402550 ], [ %333, %block_402588 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 52
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i32, i32* %EAX
  %397 = zext i32 %396 to i64
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = load i32, i32* bitcast (%iterations_type* @iterations to i32*)
  %401 = sub i32 %396, %400
  %402 = icmp ult i32 %396, %400
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2433
  %405 = and i32 %401, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %400, %396
  %412 = xor i32 %411, %401
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %401, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %401, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %396, 31
  %424 = lshr i32 %400, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 119
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %438 = load i8, i8* %437, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %441 = load i8, i8* %440, align 1, !tbaa !2451
  %442 = icmp ne i8 %441, 0
  %443 = xor i1 %439, %442
  %444 = xor i1 %443, true
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %447 = select i1 %443, i64 %434, i64 %432
  store i64 %447, i64* %446, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_4025f9, label %block_402588
}

; Function Attrs: noinline
define %struct.Memory* @sub_406190__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_406190:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = load i64, i64* %RBP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 1
  store i64 %24, i64* %PC
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %22, i64* %28
  store i64 %27, i64* %25, align 8, !tbaa !2428
  %29 = load i64, i64* %RSP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RSP
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC
  %35 = sub i64 %32, 32
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 32
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2433
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = call i32 @llvm.ctpop.i32(i32 %40) #16
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2447
  %46 = xor i64 32, %32
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2449
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RSI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 72
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 5
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %98, align 8, !tbaa !2428
  %99 = load i64, i64* %PC
  %100 = call %struct.Memory* @sub_4061f0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* %0, i64 %99, %struct.Memory* %2)
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 32
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 32
  %111 = bitcast %union.vec128_t* %XMM0 to i8*
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = bitcast i8* %111 to double*
  %115 = load double, double* %114, align 1
  %116 = inttoptr i64 %110 to double*
  store double %115, double* %116
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 118
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %124 = load i64, i64* %123, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %120, i64* %126
  store i64 %125, i64* %123, align 8, !tbaa !2428
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %127, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = call %struct.Memory* @sub_406230__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* %0, i64 %128, %struct.Memory* %100)
  %130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to double*
  %136 = load double, double* %135
  %137 = bitcast i8* %130 to double*
  store double %136, double* %137, align 1, !tbaa !2452
  %138 = getelementptr inbounds i8, i8* %130, i64 8
  %139 = bitcast i8* %138 to double*
  store double 0.000000e+00, double* %139, align 1, !tbaa !2452
  %140 = load i64, i64* %RSP
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = add i64 32, %140
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ult i64 %143, %140
  %145 = icmp ult i64 %143, 32
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = trunc i64 %143 to i32
  %150 = and i32 %149, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = xor i64 32, %140
  %157 = xor i64 %156, %143
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i64 %143, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i64 %143, 63
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i64 %140, 63
  %169 = xor i64 %165, %168
  %170 = add nuw nsw i64 %169, %165
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 1
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = add i64 %177, 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBP, align 8, !tbaa !2428
  store i64 %178, i64* %176, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %185 = load i64, i64* %184, align 8, !tbaa !2428
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %183, align 8, !tbaa !2428
  %188 = add i64 %185, 8
  store i64 %188, i64* %184, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400bb0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400bb0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400bb0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400770;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400b80___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400b80___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400b80___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6208d8_realloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @realloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4006f0_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_620950_exit(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6208a0_clock(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6208f8_exp(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6208b8_log(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @log to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4006e0_strlen(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @strlen to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_406730___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_406730___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406730___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4066c0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4066c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4066c0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4066c0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401260;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401260_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_620928___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400720_fprintf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6208f0_rand(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @rand to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_620948_atoi(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_620900_atof(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atof to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_620930_srand(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @srand to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4032d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403130;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403130__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405870__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4027b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4027b0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405e90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4039f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4039f0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406190;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406190__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppIdE14PointerWrapperIT_ERS2_i() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4046c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZppIdE14PointerWrapperIT_ERS2_i_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplIdE12ValueWrapperIT_ERKS2_S4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4062b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @18, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplIdE12ValueWrapperIT_ERKS2_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404230;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @19, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404230__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortIPddEEvT_S2_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404ad0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @20, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404ad0__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4031f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @21, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4031f0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405d50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @22, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405d50__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405940;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @23, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405940__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405fb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @24, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405fb0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401df0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @25, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403300;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @26, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403300__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405eb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @27, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4065d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @28, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4065d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402990;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @29, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402990__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406540;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @30, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406540__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402bf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @31, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402bf0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4060d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @32, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4060d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404460;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @33, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404460__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4065a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @34, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4065a0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @35, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404050__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4023a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @36, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4023a0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4061d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @37, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4061d0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @38, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIdEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @39, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIdEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @40, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402b40__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401ed0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @41, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401ed0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIPdS1_EEvT_S2_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404a80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @42, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIPdS1_EEvT_S2_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403220;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @43, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403220__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405dd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @44, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405dd0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIdEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @45, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIdEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @46, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401bd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @47, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401f40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @48, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401f40__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4022f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @49, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4022f0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @50, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402600__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406734;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @51, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406734__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404150;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @52, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IdEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @53, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d30__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403c60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @54, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405ff0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @55, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405ff0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @56, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401e30__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405ef0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @57, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @58, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401fc0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z9check_sumd() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405df0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @59, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z9check_sumd_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4035e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @60, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4035e0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405b30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @61, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405b30__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406660;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @62, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406660__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403190;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @63, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403190__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404fe0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @64, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404fe0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @65, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402c70__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403280;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @66, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403280__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @67, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403730__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402ac0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @68, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402ac0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @69, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4032a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @70, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4032a0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @71, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402680__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @72, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406130;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @73, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406130__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4037c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @74, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4037c0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406230;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @75, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406230__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4028e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @76, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4028e0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @77, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @78, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4fillIPddEEvT_S2_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @79, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4fillIPddEEvT_S2_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401db0__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405310;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @80, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4052c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @81, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405f30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @82, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405f30__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppIdER14PointerWrapperIT_ES3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @83, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZppIdER14PointerWrapperIT_ES3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404750__ZppIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateIPddEET0_T_S3_S2_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4064f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @84, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateIPddEET0_T_S3_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4064f0__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedIPdEEbT_S2_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404c10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @85, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedIPdEEbT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404c10__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402d20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @86, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @87, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404600__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406390;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @88, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406390__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402a10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @89, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402a10__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13record_resultdPKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400bc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @90, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z13record_resultdPKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400bc0__Z13record_resultdPKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405e50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @91, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404000;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @92, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401bf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @93, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402860;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @94, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402860__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IdEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @95, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406690__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @96, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedIPdEvT_S1_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404bc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @97, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIPdEvT_S1__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortIPddEEvT_S2_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @98, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405c70__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @99, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406600__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @100, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z17summarize_simplefP8_IO_FILEPKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400fe0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @101, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z17summarize_simplefP8_IO_FILEPKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400fe0__Z17summarize_simplefP8_IO_FILEPKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4041a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @102, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4041a0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405430;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @103, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402270;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @104, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402270__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405f10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @105, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405f10__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @106, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400680__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406170;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @107, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406170__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406300;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @108, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406300__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4024d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @109, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4024d0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406480;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @110, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406480__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @111, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405130;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @112, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4021b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @113, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4021b0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZneIdEbRK14PointerWrapperIT_ES4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404700;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @114, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZneIdEbRK14PointerWrapperIT_ES4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4043e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @115, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z5timerv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401220;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @116, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z5timerv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401220__Z5timerv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inIPddEEvlT_lT0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @117, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inIPddEEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404c90__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406570;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @118, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406570__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402da0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @119, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402da0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406070;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @120, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406070__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @121, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405a60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @122, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405a60__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark11fill_randomIPddEEvT_S2_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402160;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @123, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark11fill_randomIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402160__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmmIdER14PointerWrapperIT_ES3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4055d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @124, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZmmIdER14PointerWrapperIT_ES3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @125, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403cf0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403080;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @126, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4061f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @127, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4061f0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403ca0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @128, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401cb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @129, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403590;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @130, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403ba0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @131, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403ba0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @132, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402050__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedI14PointerWrapperIdEEvT_S2_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4045a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @133, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperIdEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403d10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @134, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403d10__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltIdEbRK14PointerWrapperIT_ES4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4055f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @135, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltIdEbRK14PointerWrapperIT_ES4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4055f0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4030a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @136, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z11start_timerv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401200;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @137, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z11start_timerv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401200__Z11start_timerv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateIPddEvT_S1_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @138, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIPddEvT_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401e70__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4060b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @139, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4060b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402ef0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @140, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4047d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @141, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4047d0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK14PointerWrapperIdEdeEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @142, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK14PointerWrapperIdEdeEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @143, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406010__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @144, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405750__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405f70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @145, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406250;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @146, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406250__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402420;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @147, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402420__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN14PointerWrapperIdEC2EPd() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @148, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN14PointerWrapperIdEC2EPd_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406290;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @149, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406290__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4030d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @150, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4030d0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortIPddEEvT_S2_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405620;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @151, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403d40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @152, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z9summarizePKciiii() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400cc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @153, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z9summarizePKciiii_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400cc0__Z9summarizePKciiii(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @154, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d10__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406320;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @155, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406320__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403160;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @156, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403160__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @157, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406630__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4031c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @158, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4031c0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @159, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402550__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4036e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @160, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @161, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIdEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405f50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @162, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIdEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4052e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @163, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4052e0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @164, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402730__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4020d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @165, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4020d0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402f50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @166, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402f50__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406110;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @167, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406110__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @168, void ()** @2)
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @169, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403970;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @170, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x405ed0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @171, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402210;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @172, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402210__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @173, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406050__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmiIdElR14PointerWrapperIT_ES3_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404770;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @174, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZmiIdElR14PointerWrapperIT_ES3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404770__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x406410;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @175, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_406410__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltIdEbRK12ValueWrapperIT_ES4_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403250;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @176, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltIdEbRK12ValueWrapperIT_ES4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplIdE14PointerWrapperIT_ERS2_l() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4047a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @177, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZplIdE14PointerWrapperIT_ERS2_l_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403100;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @178, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403100__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403d70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @179, void ()** @2)
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403d70__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_4066c0___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_406730___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2430, !2430, i64 0}
!2433 = !{!2434, !2430, i64 2065}
!2434 = !{!"_ZTS5State", !2430, i64 16, !2435, i64 2064, !2430, i64 2080, !2436, i64 2088, !2438, i64 2112, !2440, i64 2208, !2441, i64 2480, !2442, i64 2608, !2443, i64 2736, !2430, i64 2760, !2430, i64 2768, !2444, i64 3280}
!2435 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2436 = !{!"_ZTS8Segments", !2437, i64 0, !2430, i64 2, !2437, i64 4, !2430, i64 6, !2437, i64 8, !2430, i64 10, !2437, i64 12, !2430, i64 14, !2437, i64 16, !2430, i64 18, !2437, i64 20, !2430, i64 22}
!2437 = !{!"short", !2430, i64 0}
!2438 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88}
!2439 = !{!"_ZTS3Reg", !2430, i64 0}
!2440 = !{!"_ZTS3GPR", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88, !2429, i64 96, !2439, i64 104, !2429, i64 112, !2439, i64 120, !2429, i64 128, !2439, i64 136, !2429, i64 144, !2439, i64 152, !2429, i64 160, !2439, i64 168, !2429, i64 176, !2439, i64 184, !2429, i64 192, !2439, i64 200, !2429, i64 208, !2439, i64 216, !2429, i64 224, !2439, i64 232, !2429, i64 240, !2439, i64 248, !2429, i64 256, !2439, i64 264}
!2441 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2442 = !{!"_ZTS3MMX", !2430, i64 0}
!2443 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2444 = !{!"_ZTS13SegmentCaches", !2445, i64 0, !2445, i64 16, !2445, i64 32, !2445, i64 48, !2445, i64 64, !2445, i64 80}
!2445 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2446, i64 8, !2446, i64 12}
!2446 = !{!"int", !2430, i64 0}
!2447 = !{!2434, !2430, i64 2067}
!2448 = !{!2434, !2430, i64 2069}
!2449 = !{!2434, !2430, i64 2071}
!2450 = !{!2434, !2430, i64 2073}
!2451 = !{!2434, !2430, i64 2077}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"float", !2430, i64 0}
!2456 = !{!2446, !2446, i64 0}
