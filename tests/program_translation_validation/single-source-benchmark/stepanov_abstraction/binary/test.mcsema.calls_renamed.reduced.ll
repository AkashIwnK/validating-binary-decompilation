; ModuleID = '/tmp/tmpe1ogxd2e-target.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_406750__rodata_type = type <{ [24 x i8], [31 x i8], [62 x i8], [43 x i8], [43 x i8], [39 x i8], [20 x i8], [34 x i8], [18 x i8], [24 x i8], [15 x i8], [15 x i8], [15 x i8], [21 x i8], [15 x i8], [27 x i8], [15 x i8], [33 x i8], [15 x i8], [29 x i8], [15 x i8], [35 x i8], [25 x i8], [31 x i8], [37 x i8], [43 x i8], [39 x i8], [45 x i8], [25 x i8], [31 x i8], [37 x i8], [43 x i8], [39 x i8], [45 x i8], [21 x i8] }>
%seg_608dd8__init_array_type = type <{ i64, i64, i64 }>
%seg_608ff0__got_type = type <{ i64, i64 }>
%iterations_type = type <{ [8 x i8] }>
%init_value_type = type <{ [8 x i8] }>
%dpb_type = type <{ i64 }>
%dpe_type = type <{ i64 }>
%dMpb_type = type <{ i64 }>
%dMpe_type = type <{ i64 }>
%DVpb_type = type <{ i64 }>
%DVpe_type = type <{ i64 }>
%DVMpb_type = type <{ i64 }>
%DVMpe_type = type <{ i64 }>
%DV10pb_type = type <{ i64 }>
%DV10pe_type = type <{ i64 }>
%DV10Mpb_type = type <{ i64 }>
%DV10Mpe_type = type <{ i64 }>
%results_type = type <{ [8 x i8] }>
%current_test_type = type <{ [4 x i8] }>
%allocated_results_type = type <{ [4 x i8] }>
%start_time_type = type <{ [8 x i8] }>
%end_time_type = type <{ [8 x i8] }>
%data_type = type <{ [16000 x i8] }>
%VData_type = type <{ [16000 x i8] }>
%V10Data_type = type <{ [16000 x i8] }>
%dataMaster_type = type <{ [16000 x i8] }>
%VDataMaster_type = type <{ [16000 x i8] }>
%V10DataMaster_type = type <{ [16000 x i8] }>
%dPb_type = type <{ [8 x i8] }>
%dPe_type = type <{ [8 x i8] }>
%dMPb_type = type <{ [8 x i8] }>
%dMPe_type = type <{ [8 x i8] }>
%DVPb_type = type <{ [8 x i8] }>
%DVPe_type = type <{ [8 x i8] }>
%DVMPb_type = type <{ [8 x i8] }>
%DVMPe_type = type <{ [8 x i8] }>
%DV10Pb_type = type <{ [8 x i8] }>
%DV10Pe_type = type <{ [8 x i8] }>
%DV10MPb_type = type <{ [8 x i8] }>
%DV10MPe_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_406750__rodata = internal constant %seg_406750__rodata_type <{ [24 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\80\84.A\00\00\00\00\00@\9F@", [31 x i8] c"Could not allocate %d results\0A\00", [62 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00 \00", [43 x i8] c"number %*s time       per second   test0\0A\0A\00", [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", [34 x i8] c"\0Atest %*s description   absolute\0A\00", [18 x i8] c"number %*s time\0A\0A\00", [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", [15 x i8] c"insertion_sort ", [15 x i8] c"double pointer\00", [15 x i8] c"insertion_sort ", [21 x i8] c"double pointer_class\00", [15 x i8] c"insertion_sort ", [27 x i8] c"DoubleValueWrapper pointer\00", [15 x i8] c"insertion_sort ", [33 x i8] c"DoubleValueWrapper pointer_class\00", [15 x i8] c"insertion_sort ", [29 x i8] c"DoubleValueWrapper10 pointer\00", [15 x i8] c"insertion_sort ", [35 x i8] c"DoubleValueWrapper10 pointer_class\00", [25 x i8] c"quicksort double pointer\00", [31 x i8] c"quicksort double pointer_class\00", [37 x i8] c"quicksort DoubleValueWrapper pointer\00", [43 x i8] c"quicksort DoubleValueWrapper pointer_class\00", [39 x i8] c"quicksort DoubleValueWrapper10 pointer\00", [45 x i8] c"quicksort DoubleValueWrapper10 pointer_class\00", [25 x i8] c"heap_sort double pointer\00", [31 x i8] c"heap_sort double pointer_class\00", [37 x i8] c"heap_sort DoubleValueWrapper pointer\00", [43 x i8] c"heap_sort DoubleValueWrapper pointer_class\00", [39 x i8] c"heap_sort DoubleValueWrapper10 pointer\00", [45 x i8] c"heap_sort DoubleValueWrapper10 pointer_class\00", [21 x i8] c"sort test %i failed\0A\00" }>
@seg_608dd8__init_array = internal global %seg_608dd8__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400bc0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400780__GLOBAL__sub_I_stepanov_abstraction_cpp to i64), i64 ptrtoint (void ()* @callback_sub_400b90___do_global_dtors_aux to i64) }>
@seg_608ff0__got = internal global %seg_608ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@iterations = local_unnamed_addr global %iterations_type <{ [8 x i8] c"@\0D\03\00\00\00\00\00" }>
@init_value = global %init_value_type <{ [8 x i8] c"\00\00\00\00\00\00\08@" }>
@dpb = local_unnamed_addr global %dpb_type <{ i64 ptrtoint (%data_type* @data to i64) }>
@dpe = local_unnamed_addr global %dpe_type <{ i64 ptrtoint (%VData_type* @VData to i64) }>
@dMpb = local_unnamed_addr global %dMpb_type <{ i64 ptrtoint (%dataMaster_type* @dataMaster to i64) }>
@dMpe = local_unnamed_addr global %dMpe_type <{ i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64) }>
@DVpb = local_unnamed_addr global %DVpb_type <{ i64 ptrtoint (%VData_type* @VData to i64) }>
@DVpe = local_unnamed_addr global %DVpe_type <{ i64 ptrtoint (%V10Data_type* @V10Data to i64) }>
@DVMpb = local_unnamed_addr global %DVMpb_type <{ i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64) }>
@DVMpe = local_unnamed_addr global %DVMpe_type <{ i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64) }>
@DV10pb = local_unnamed_addr global %DV10pb_type <{ i64 ptrtoint (%V10Data_type* @V10Data to i64) }>
@DV10pe = local_unnamed_addr global %DV10pe_type <{ i64 ptrtoint (%dataMaster_type* @dataMaster to i64) }>
@DV10Mpb = local_unnamed_addr global %DV10Mpb_type <{ i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64) }>
@DV10Mpe = local_unnamed_addr global %DV10Mpe_type <{ i64 ptrtoint (%dPb_type* @dPb to i64) }>
@results = local_unnamed_addr global %results_type zeroinitializer
@current_test = local_unnamed_addr global %current_test_type zeroinitializer
@allocated_results = local_unnamed_addr global %allocated_results_type zeroinitializer
@start_time = local_unnamed_addr global %start_time_type zeroinitializer
@end_time = local_unnamed_addr global %end_time_type zeroinitializer
@data = global %data_type zeroinitializer
@VData = global %VData_type zeroinitializer
@V10Data = global %V10Data_type zeroinitializer
@dataMaster = global %dataMaster_type zeroinitializer
@VDataMaster = global %VDataMaster_type zeroinitializer
@V10DataMaster = global %V10DataMaster_type zeroinitializer
@dPb = global %dPb_type zeroinitializer
@dPe = global %dPe_type zeroinitializer
@dMPb = global %dMPb_type zeroinitializer
@dMPe = global %dMPe_type zeroinitializer
@DVPb = global %DVPb_type zeroinitializer
@DVPe = global %DVPe_type zeroinitializer
@DVMPb = global %DVMPb_type zeroinitializer
@DVMPe = global %DVMPe_type zeroinitializer
@DV10Pb = global %DV10Pb_type zeroinitializer
@DV10Pe = global %DV10Pe_type zeroinitializer
@DV10MPb = global %DV10MPb_type zeroinitializer
@DV10MPe = global %DV10MPe_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400bc0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400780__GLOBAL__sub_I_stepanov_abstraction_cpp_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400b90___do_global_dtors_aux_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_406740___libc_csu_fini_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4066d0___libc_csu_init_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13record_resultdPKc_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_wrapper
@21 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@22 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_wrapper
@23 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIPddEEvT_S2__wrapper
@24 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@25 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplIdE12ValueWrapperIT_ERKS2_S4__wrapper
@26 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__wrapper
@27 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppIdER14PointerWrapperIT_ES3__wrapper
@28 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__wrapper
@29 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__wrapper
@30 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__wrapper
@31 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2Ev_wrapper
@32 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_wrapper
@33 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__wrapper
@34 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIPddEEvT_S2_T0__wrapper
@35 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT__wrapper
@36 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@37 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@38 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__wrapper
@39 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3__wrapper
@40 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_wrapper
@41 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__wrapper
@42 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@43 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__wrapper
@44 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_wrapper
@45 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@46 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__wrapper
@47 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiIdElR14PointerWrapperIT_ES3__wrapper
@48 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdS1_EEvT_S2_T0__wrapper
@49 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@50 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__wrapper
@51 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5__wrapper
@52 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_wrapper
@53 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_wrapper
@54 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__wrapper
@55 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@56 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__wrapper
@57 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIdEC2Ev_wrapper
@58 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_wrapper
@59 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__wrapper
@60 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper
@61 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@62 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIPddEvT_S1_T0_PKc_wrapper
@63 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z11start_timerv_wrapper
@64 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper
@65 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_wrapper
@66 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@67 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_wrapper
@68 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__wrapper
@69 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper
@70 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__wrapper
@71 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@72 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_wrapper
@73 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__wrapper
@74 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@75 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__wrapper
@76 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__wrapper
@77 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__wrapper
@78 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@79 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper
@80 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv_wrapper
@81 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__wrapper
@82 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_wrapper
@83 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__wrapper
@84 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper
@85 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@86 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_wrapper
@87 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_wrapper
@88 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__wrapper
@89 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper
@90 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmIdER14PointerWrapperIT_ES3__wrapper
@91 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_wrapper
@92 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__wrapper
@93 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper
@94 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_wrapper
@95 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@96 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@97 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__wrapper
@98 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppIdE14PointerWrapperIT_ERS2_i_wrapper
@99 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIdEcvT_IdEEv_wrapper
@100 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper
@101 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__wrapper
@102 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@103 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_wrapper
@104 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@105 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__wrapper
@106 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__wrapper
@107 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIPddEEvT_S2__wrapper
@108 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_wrapper
@109 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z9summarizePKciiii_wrapper
@110 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__wrapper
@111 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__wrapper
@112 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@113 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@114 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__wrapper
@115 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@116 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIPddEEvlT_lT0__wrapper
@117 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__wrapper
@118 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIPddEET0_T_S3_S2__wrapper
@119 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIPdEEbT_S2__wrapper
@120 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__wrapper
@121 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@122 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__wrapper
@123 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_wrapper
@124 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__wrapper
@125 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__wrapper
@126 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneIdEbRK14PointerWrapperIT_ES4__wrapper
@127 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__wrapper
@128 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z5timerv_wrapper
@129 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__wrapper
@130 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@131 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_wrapper
@132 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__wrapper
@133 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIPddEEvT_S2__wrapper
@134 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIdEC2IdEERKT__wrapper
@135 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__wrapper
@136 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__wrapper
@137 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__wrapper
@138 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperIdEdeEv_wrapper
@139 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__wrapper
@140 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2Ev_wrapper
@141 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__wrapper
@142 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltIdEbRK14PointerWrapperIT_ES4__wrapper
@143 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__wrapper
@144 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__wrapper
@145 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__wrapper
@146 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z17summarize_simplefP8_IO_FILEPKc_wrapper
@147 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_wrapper
@148 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__wrapper
@149 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__wrapper
@150 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__wrapper
@151 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperIdEC2EPd_wrapper
@152 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIPdEvT_S1__wrapper
@153 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_wrapper
@154 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z9check_sumd_wrapper
@155 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__wrapper
@156 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__wrapper
@157 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__wrapper
@158 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_wrapper
@159 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperIdEEvT_S2__wrapper
@160 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__wrapper
@161 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_wrapper
@162 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@163 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__wrapper
@164 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@165 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplIdE14PointerWrapperIT_ERS2_l_wrapper
@166 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2IdEERKT__wrapper
@167 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@168 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__wrapper
@169 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltIdEbRK12ValueWrapperIT_ES4__wrapper
@170 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__wrapper
@171 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark11fill_randomIPddEEvT_S2__wrapper
@172 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__wrapper
@173 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__wrapper
@174 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__wrapper
@175 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@176 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@177 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_wrapper
@178 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__wrapper
@179 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@seg_609100__bss.0.0 = internal unnamed_addr global i1 false, align 8

declare %struct.Memory* @sub_406550__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401ce0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405440__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402870__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404470__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4007e0___cxx_global_var_init_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405f00__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402f60__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405f40__ZNK12ValueWrapperIS_IdEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406330__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4008a0___cxx_global_var_init_12_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402c00__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4063a0__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405a70__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403980__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401be0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a80___cxx_global_var_init_23_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403d00__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400aa0___cxx_global_var_init_24_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405020__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405ee0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402a20__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400980___cxx_global_var_init_15_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406640__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404780__ZmiIdElR14PointerWrapperIT_ES3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402ad0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4024e0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402300__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4021c0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401e40__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4035f0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401cc0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405e80__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4009a0___cxx_global_var_init_16_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4032b0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402c80__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4045b0__Z13verify_sortedI14PointerWrapperIdEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4031d0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405b40__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401e00__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4029a0__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400900___cxx_global_var_init_13_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a20___cxx_global_var_init_20_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401e80__Z15test_accumulateIPddEvT_S1_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400690__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403cb0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4055e0__ZmmIdER14PointerWrapperIT_ES3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406610__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4066a0__ZN12ValueWrapperIS_IdEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406500__ZN9benchmark10accumulateIPddEET0_T_S3_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405880__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402740__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405630__ZN9benchmark9quicksortIPddEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406240__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404710__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403d80__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4036f0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404160__Z13verify_sortedIP12ValueWrapperIdEEvT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405de0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405ea0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4060c0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401f50__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406580__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402060__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404610__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403740__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4030e0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4037d0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400840___cxx_global_var_init_11_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403310__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4060e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404240__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405950__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405fc0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4031a0__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403b50__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406490__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4043f0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401dc0__ZN9benchmark4fillIPddEEvT_S2_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c60__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405140__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4009e0___cxx_global_var_init_18_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a60___cxx_global_var_init_22_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403bb0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4062a0__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c00__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405f60__ZNK12ValueWrapperIdEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404060__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404fd0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402690__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402610__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406310__ZN12ValueWrapperIS_IdEEC2IS0_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402560__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405760__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4041b0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400ac0___cxx_global_var_init_25_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404e40__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404ca0__ZN9benchmark7sift_inIPddEEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405f80__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401fd0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404760__ZppIdER14PointerWrapperIT_ES3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403060__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402d30__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4061e0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d20__ZN12ValueWrapperIS_IS_IdEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403290__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405c80__ZN9benchmark13insertionSortIPddEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402220__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4023b0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c20__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400b20_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a40___cxx_global_var_init_21_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406060__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405320__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406180__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4061a0__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404ae0__ZN9benchmark8heapsortIPddEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403230__ZltI12ValueWrapperIdEEbRKS0_IT_ES5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402170__ZN9benchmark11fill_randomIPddEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a00___cxx_global_var_init_19_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4027c0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402db0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403170__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404010__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404ff0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405ec0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404a90__ZN9benchmark4copyIPdS1_EEvT_S2_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4065b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406420__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405600__ZltIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402280__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4052f0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4020e0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402b50__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403a00__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401ee0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406000__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4047e0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406020__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401ca0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403140__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4009c0___cxx_global_var_init_17_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405d60__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d00__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4052d0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IdEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406260__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4035a0__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406080__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400960___cxx_global_var_init_14_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403200__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403110__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402430__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406140__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406120__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d70__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405e60__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406200__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403d20__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405f20__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4028f0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402f00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4062c0__ZplIdE12ValueWrapperIT_ERKS2_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404bd0__Z13verify_sortedIPdEvT_S1__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4065e0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406670__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404c20__ZN9benchmark9is_sortedIPdEEbT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atoi(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @log(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @rand() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atof(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @realloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strlen(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exp(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @srand(i64) #5

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404010__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = bitcast i64* %RAX to i64**
  %33 = bitcast i64* %RCX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_404020

block_404057:                                     ; preds = %block_404020
  %34 = add i64 %78, 1
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %78, 2
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_404020:                                     ; preds = %block_40402e, %block_404010
  %43 = phi i64 [ %140, %block_40402e ], [ %.pre, %block_404010 ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = add i64 %44, -16
  %50 = add i64 %43, 8
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %48, %52
  %54 = icmp ult i64 %48, %52
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %26, align 1, !tbaa !2432
  %56 = trunc i64 %53 to i32
  %57 = and i32 %56, 255
  %58 = tail call i32 @llvm.ctpop.i32(i32 %57) #10
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 1
  %61 = xor i8 %60, 1
  store i8 %61, i8* %27, align 1, !tbaa !2446
  %62 = xor i64 %52, %48
  %63 = xor i64 %62, %53
  %64 = lshr i64 %63, 4
  %65 = trunc i64 %64 to i8
  %66 = and i8 %65, 1
  store i8 %66, i8* %28, align 1, !tbaa !2447
  %67 = icmp eq i64 %53, 0
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %29, align 1, !tbaa !2448
  %69 = lshr i64 %53, 63
  %70 = trunc i64 %69 to i8
  store i8 %70, i8* %30, align 1, !tbaa !2449
  %71 = lshr i64 %48, 63
  %72 = lshr i64 %52, 63
  %73 = xor i64 %72, %71
  %74 = xor i64 %69, %71
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %31, align 1, !tbaa !2450
  %.v = select i1 %67, i64 55, i64 14
  %78 = add i64 %.v, %43
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  br i1 %67, label %block_404057, label %block_40402e

block_40402e:                                     ; preds = %block_404020
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = load i64, i64* %47, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %80, 8
  store i64 %81, i64* %RCX, align 8, !tbaa !2428
  %82 = icmp ugt i64 %80, -9
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %26, align 1, !tbaa !2432
  %84 = trunc i64 %81 to i32
  %85 = and i32 %84, 255
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #10
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %27, align 1, !tbaa !2446
  %90 = xor i64 %81, %80
  %91 = lshr i64 %90, 4
  %92 = trunc i64 %91 to i8
  %93 = and i8 %92, 1
  store i8 %93, i8* %28, align 1, !tbaa !2447
  %94 = icmp eq i64 %81, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %29, align 1, !tbaa !2448
  %96 = lshr i64 %81, 63
  %97 = trunc i64 %96 to i8
  store i8 %97, i8* %30, align 1, !tbaa !2449
  %98 = lshr i64 %80, 63
  %99 = xor i64 %96, %98
  %100 = add nuw nsw i64 %99, %96
  %101 = icmp eq i64 %100, 2
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %31, align 1, !tbaa !2450
  %103 = add i64 %78, 15
  store i64 %103, i64* %PC, align 8
  store i64 %81, i64* %47, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -24
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RCX, align 8, !tbaa !2428
  %110 = add i64 %109, 8
  store i64 %110, i64* %RDX, align 8, !tbaa !2428
  %111 = icmp ugt i64 %109, -9
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %26, align 1, !tbaa !2432
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #10
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %27, align 1, !tbaa !2446
  %119 = xor i64 %110, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %28, align 1, !tbaa !2447
  %123 = icmp eq i64 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %110, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %30, align 1, !tbaa !2449
  %127 = lshr i64 %109, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %31, align 1, !tbaa !2450
  %132 = add i64 %106, 15
  store i64 %132, i64* %PC, align 8
  store i64 %110, i64* %108, align 8
  %133 = load i64*, i64** %32, align 8
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %133, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64*, i64** %33, align 8
  %138 = add i64 %134, 6
  store i64 %138, i64* %PC, align 8
  store i64 %136, i64* %137, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, -50
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  br label %block_404020
}

; Function Attrs: noinline
define %struct.Memory* @sub_4063a0__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4063a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 5
  store i64 %52, i64* %PC, align 8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %54 = load i64, i64* %53, align 1
  %55 = inttoptr i64 %50 to i64*
  store i64 %54, i64* %55, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4063b5

block_4063cf:                                     ; preds = %block_4063b5
  %56 = add i64 %123, -16
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %57 = add i64 %122, -10079
  %58 = add i64 %122, 11
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -48
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX, align 8
  %67 = add i64 %65, 8
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -9986
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %70, %struct.Memory* %2)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX, align 8
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %80 = add i64 %78, -295
  %81 = add i64 %78, 12
  %82 = load i64, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %85 = tail call %struct.Memory* @sub_4062c0__ZplIdE12ValueWrapperIT_ERKS2_S4__renamed_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -40
  %88 = load i64, i64* %PC, align 8
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC, align 8
  %90 = load i64, i64* %53, align 1
  %91 = inttoptr i64 %87 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -40
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %92, -32
  %99 = add i64 %94, 8
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i64*
  store i64 %97, i64* %100, align 8
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, -75
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br label %block_4063b5

block_4063b5:                                     ; preds = %block_4063cf, %block_4063a0
  %103 = phi i64 [ %102, %block_4063cf ], [ %.pre, %block_4063a0 ]
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -16
  store i64 %105, i64* %RDI, align 8, !tbaa !2428
  %106 = add i64 %104, -24
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %107 = add i64 %103, -9989
  %108 = add i64 %103, 13
  %109 = load i64, i64* %RSP, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_403cb0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %107, %struct.Memory* %2)
  %113 = load i8, i8* %AL, align 1
  %114 = load i64, i64* %PC, align 8
  %115 = and i8 %113, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %116 = zext i8 %115 to i32
  %117 = tail call i32 @llvm.ctpop.i32(i32 %116) #10
  %118 = trunc i32 %117 to i8
  %119 = xor i8 %118, 1
  store i8 %119, i8* %20, align 1, !tbaa !2446
  %120 = xor i8 %115, 1
  store i8 %120, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %121 = icmp eq i8 %120, 0
  %.v = select i1 %121, i64 13, i64 8
  %122 = add i64 %.v, %114
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP, align 8
  br i1 %121, label %block_4063cf, label %block_4063ca

block_4063ca:                                     ; preds = %block_4063b5
  %124 = add i64 %123, -32
  %125 = add i64 %122, 63
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %124 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = add i64 %123, -8
  %129 = add i64 %122, 67
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  store i64 %127, i64* %130, align 8
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -8
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %53, align 1, !tbaa !2451
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %138 = bitcast i64* %137 to double*
  store double 0.000000e+00, double* %138, align 1, !tbaa !2451
  %139 = load i64, i64* %RSP, align 8
  %140 = add i64 %139, 48
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  %141 = icmp ugt i64 %139, -49
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %13, align 1, !tbaa !2432
  %143 = trunc i64 %140 to i32
  %144 = and i32 %143, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #10
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %20, align 1, !tbaa !2446
  %149 = xor i64 %139, 16
  %150 = xor i64 %149, %140
  %151 = lshr i64 %150, 4
  %152 = trunc i64 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %26, align 1, !tbaa !2447
  %154 = icmp eq i64 %140, 0
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %29, align 1, !tbaa !2448
  %156 = lshr i64 %140, 63
  %157 = trunc i64 %156 to i8
  store i8 %157, i8* %32, align 1, !tbaa !2449
  %158 = lshr i64 %139, 63
  %159 = xor i64 %156, %158
  %160 = add nuw nsw i64 %159, %156
  %161 = icmp eq i64 %160, 2
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %38, align 1, !tbaa !2450
  %163 = add i64 %133, 10
  store i64 %163, i64* %PC, align 8
  %164 = add i64 %139, 56
  %165 = inttoptr i64 %140 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RBP, align 8, !tbaa !2428
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %133, 11
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %164 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  %170 = add i64 %139, 64
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009e0___cxx_global_var_init_18(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4009e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVPb_type* @DVPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4639
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c00__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4032e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2453
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #10
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2453
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2453
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2453
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = trunc i64 %55 to i8
  %57 = and i8 %56, 1
  store i8 %57, i8* %54, align 1, !tbaa !2453
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2453
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2432
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #10
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2446
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2447
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2448
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2449
  %83 = and i64 %55, 1
  %84 = lshr i64 %62, 63
  %85 = xor i64 %81, %83
  %86 = xor i64 %81, %84
  %87 = add nuw nsw i64 %85, %86
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %58, align 1, !tbaa !2450
  %90 = add i64 %34, 16
  store i64 %90, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -8
  %93 = load i64, i64* %PC, align 8
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = add i64 %93, 5
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %5, align 8, !tbaa !2428
  %99 = add i64 %98, 8
  %100 = inttoptr i64 %98 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %RBP, align 8, !tbaa !2428
  store i64 %99, i64* %5, align 8, !tbaa !2428
  %102 = add i64 %93, 6
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %99 to i64*
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %PC, align 8, !tbaa !2428
  %105 = add i64 %98, 16
  store i64 %105, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a40___cxx_global_var_init_21(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVMPe_type* @DVMPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4543
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c00__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_4041b0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4041b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -32
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ugt i64 %62, -9
  %65 = zext i1 %64 to i8
  store i8 %65, i8* %13, align 1, !tbaa !2432
  %66 = trunc i64 %63 to i32
  %67 = and i32 %66, 255
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #10
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  store i8 %71, i8* %20, align 1, !tbaa !2446
  %72 = xor i64 %63, %62
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %25, align 1, !tbaa !2447
  %76 = icmp eq i64 %63, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %28, align 1, !tbaa !2448
  %78 = lshr i64 %63, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %31, align 1, !tbaa !2449
  %80 = lshr i64 %62, 63
  %81 = xor i64 %78, %80
  %82 = add nuw nsw i64 %81, %78
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %37, align 1, !tbaa !2450
  %85 = add i64 %59, 12
  store i64 %85, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4041d4

block_404218:                                     ; preds = %block_4041e2
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -1
  %88 = add i64 %207, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i8*
  store i8 0, i8* %89, align 1
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 14
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  br label %block_40422a

block_404213:                                     ; preds = %block_4041e2
  %92 = add i64 %207, -63
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br label %block_4041d4

block_40422a:                                     ; preds = %block_404226, %block_404218
  %93 = phi i64 [ %.pre14, %block_404226 ], [ %91, %block_404218 ]
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -1
  %96 = add i64 %93, 3
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i8*
  %98 = load i8, i8* %97, align 1
  %99 = and i8 %98, 1
  %100 = zext i8 %99 to i64
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = load i64, i64* %RSP, align 8
  %102 = add i64 %101, 32
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  %103 = icmp ugt i64 %101, -33
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %13, align 1, !tbaa !2432
  %105 = trunc i64 %102 to i32
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #10
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %20, align 1, !tbaa !2446
  %111 = xor i64 %102, %101
  %112 = lshr i64 %111, 4
  %113 = trunc i64 %112 to i8
  %114 = and i8 %113, 1
  store i8 %114, i8* %25, align 1, !tbaa !2447
  %115 = icmp eq i64 %102, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %28, align 1, !tbaa !2448
  %117 = lshr i64 %102, 63
  %118 = trunc i64 %117 to i8
  store i8 %118, i8* %31, align 1, !tbaa !2449
  %119 = lshr i64 %101, 63
  %120 = xor i64 %117, %119
  %121 = add nuw nsw i64 %120, %117
  %122 = icmp eq i64 %121, 2
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %37, align 1, !tbaa !2450
  %124 = add i64 %93, 13
  store i64 %124, i64* %PC, align 8
  %125 = add i64 %101, 40
  %126 = inttoptr i64 %102 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RBP, align 8, !tbaa !2428
  store i64 %125, i64* %RSP, align 8, !tbaa !2428
  %128 = add i64 %93, 14
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %125 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  %131 = add i64 %101, 48
  store i64 %131, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_404226:                                     ; preds = %block_4041d4
  %132 = add i64 %209, -1
  %133 = add i64 %243, 4
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i8*
  store i8 1, i8* %134, align 1
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_40422a

block_4041e2:                                     ; preds = %block_4041d4
  %135 = add i64 %243, 4
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %212, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %136, 8
  store i64 %137, i64* %RCX, align 8, !tbaa !2428
  %138 = icmp ugt i64 %136, -9
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %13, align 1, !tbaa !2432
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #10
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %20, align 1, !tbaa !2446
  %146 = xor i64 %137, %136
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  store i8 %149, i8* %25, align 1, !tbaa !2447
  %150 = icmp eq i64 %137, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %28, align 1, !tbaa !2448
  %152 = lshr i64 %137, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* %31, align 1, !tbaa !2449
  %154 = lshr i64 %136, 63
  %155 = xor i64 %152, %154
  %156 = add nuw nsw i64 %155, %152
  %157 = icmp eq i64 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %37, align 1, !tbaa !2450
  %159 = add i64 %243, 15
  store i64 %159, i64* %PC, align 8
  store i64 %137, i64* %212, align 8
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -32
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = add i64 %165, 8
  store i64 %166, i64* %RDX, align 8, !tbaa !2428
  %167 = icmp ugt i64 %165, -9
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %13, align 1, !tbaa !2432
  %169 = trunc i64 %166 to i32
  %170 = and i32 %169, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %20, align 1, !tbaa !2446
  %175 = xor i64 %166, %165
  %176 = lshr i64 %175, 4
  %177 = trunc i64 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %25, align 1, !tbaa !2447
  %179 = icmp eq i64 %166, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %28, align 1, !tbaa !2448
  %181 = lshr i64 %166, 63
  %182 = trunc i64 %181 to i8
  store i8 %182, i8* %31, align 1, !tbaa !2449
  %183 = lshr i64 %165, 63
  %184 = xor i64 %181, %183
  %185 = add nuw nsw i64 %184, %181
  %186 = icmp eq i64 %185, 2
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %37, align 1, !tbaa !2450
  %188 = add i64 %162, 15
  store i64 %188, i64* %PC, align 8
  store i64 %166, i64* %164, align 8
  %189 = load i64, i64* %RAX, align 8
  %190 = load i64, i64* %PC, align 8
  store i64 %189, i64* %RDI, align 8, !tbaa !2428
  %191 = load i64, i64* %RCX, align 8
  store i64 %191, i64* %RSI, align 8, !tbaa !2428
  %192 = add i64 %190, -4000
  %193 = add i64 %190, 11
  %194 = load i64, i64* %RSP, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %193, i64* %196, align 8
  store i64 %195, i64* %RSP, align 8, !tbaa !2428
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  %197 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %192, %struct.Memory* %2)
  %198 = load i8, i8* %AL, align 1
  %199 = load i64, i64* %PC, align 8
  %200 = and i8 %198, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %201 = zext i8 %200 to i32
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = xor i8 %203, 1
  store i8 %204, i8* %20, align 1, !tbaa !2446
  %205 = xor i8 %200, 1
  store i8 %205, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %206 = icmp eq i8 %205, 0
  %.v15 = select i1 %206, i64 13, i64 8
  %207 = add i64 %.v15, %199
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  br i1 %206, label %block_404218, label %block_404213

block_4041d4:                                     ; preds = %block_404213, %block_4041b0
  %208 = phi i64 [ %92, %block_404213 ], [ %.pre, %block_4041b0 ]
  %209 = load i64, i64* %RBP, align 8
  %210 = add i64 %209, -16
  %211 = add i64 %208, 4
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = add i64 %209, -24
  %215 = add i64 %208, 8
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = sub i64 %213, %217
  %219 = icmp ult i64 %213, %217
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %13, align 1, !tbaa !2432
  %221 = trunc i64 %218 to i32
  %222 = and i32 %221, 255
  %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #10
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  store i8 %226, i8* %20, align 1, !tbaa !2446
  %227 = xor i64 %217, %213
  %228 = xor i64 %227, %218
  %229 = lshr i64 %228, 4
  %230 = trunc i64 %229 to i8
  %231 = and i8 %230, 1
  store i8 %231, i8* %25, align 1, !tbaa !2447
  %232 = icmp eq i64 %218, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %28, align 1, !tbaa !2448
  %234 = lshr i64 %218, 63
  %235 = trunc i64 %234 to i8
  store i8 %235, i8* %31, align 1, !tbaa !2449
  %236 = lshr i64 %213, 63
  %237 = lshr i64 %217, 63
  %238 = xor i64 %237, %236
  %239 = xor i64 %234, %236
  %240 = add nuw nsw i64 %239, %238
  %241 = icmp eq i64 %240, 2
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %37, align 1, !tbaa !2450
  %.v = select i1 %232, i64 82, i64 14
  %243 = add i64 %.v, %208
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  br i1 %232, label %block_404226, label %block_4041e2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4035f0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4035f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 18
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %47, -8
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = sub i64 %52, %56
  %58 = lshr i64 %57, 2
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = ashr i64 %57, 3
  store i64 %61, i64* %RSI, align 8, !tbaa !2428
  store i8 %60, i8* %12, align 1, !tbaa !2453
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #10
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %19, align 1, !tbaa !2453
  store i8 0, i8* %24, align 1, !tbaa !2453
  %68 = icmp eq i64 %61, 0
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %27, align 1, !tbaa !2453
  %70 = lshr i64 %61, 63
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %30, align 1, !tbaa !2453
  store i8 0, i8* %36, align 1, !tbaa !2453
  %72 = add i64 %47, -32
  %73 = add i64 %49, 19
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %61, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -32
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = ashr i64 %80, 63
  store i64 %81, i64* %RDX, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX, align 8
  %83 = add i64 %77, 9
  store i64 %83, i64* %PC, align 8
  %84 = sext i64 %82 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = zext i64 %81 to i128
  %87 = shl nuw i128 %86, 64
  %88 = zext i64 %80 to i128
  %89 = or i128 %87, %88
  %90 = zext i64 %82 to i128
  %91 = or i128 %85, %90
  %92 = sdiv i128 %89, %91
  %93 = trunc i128 %92 to i64
  %94 = and i128 %92, 18446744073709551615
  %95 = sext i64 %93 to i128
  %96 = and i128 %95, -18446744073709551616
  %97 = or i128 %96, %94
  %98 = icmp eq i128 %92, %97
  br i1 %98, label %101, label %99

; <label>:99:                                     ; preds = %block_4035f0
  %100 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %83, %struct.Memory* %2) #13
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:101:                                    ; preds = %block_4035f0
  %102 = srem i128 %89, %91
  %103 = trunc i128 %102 to i64
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  store i64 %103, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %101, %99
  %104 = phi i64 [ %.pre7, %99 ], [ %75, %101 ]
  %105 = phi i64 [ %.pre6, %99 ], [ %83, %101 ]
  %106 = phi i64 [ %.pre, %99 ], [ %93, %101 ]
  %107 = phi %struct.Memory* [ %100, %99 ], [ %2, %101 ]
  %108 = add i64 %106, -1
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = icmp eq i64 %106, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %12, align 1, !tbaa !2432
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = tail call i32 @llvm.ctpop.i32(i32 %112) #10
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  store i8 %116, i8* %19, align 1, !tbaa !2446
  %117 = xor i64 %108, %106
  %118 = lshr i64 %117, 4
  %119 = trunc i64 %118 to i8
  %120 = and i8 %119, 1
  store i8 %120, i8* %24, align 1, !tbaa !2447
  %121 = icmp eq i64 %108, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %27, align 1, !tbaa !2448
  %123 = lshr i64 %108, 63
  %124 = trunc i64 %123 to i8
  store i8 %124, i8* %30, align 1, !tbaa !2449
  %125 = lshr i64 %106, 63
  %126 = xor i64 %123, %125
  %127 = add nuw nsw i64 %126, %125
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %36, align 1, !tbaa !2450
  %130 = add i64 %104, -24
  %131 = add i64 %105, 8
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %108, i64* %132, align 8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %135 = bitcast i64* %134 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_40362b

block_4036de:                                     ; preds = %block_403681
  %136 = load i64, i64* %RSP, align 8
  %137 = add i64 %136, 64
  store i64 %137, i64* %RSP, align 8, !tbaa !2428
  %138 = icmp ugt i64 %136, -65
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %12, align 1, !tbaa !2432
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #10
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %19, align 1, !tbaa !2446
  %146 = xor i64 %137, %136
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  store i8 %149, i8* %24, align 1, !tbaa !2447
  %150 = icmp eq i64 %137, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %27, align 1, !tbaa !2448
  %152 = lshr i64 %137, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* %30, align 1, !tbaa !2449
  %154 = lshr i64 %136, 63
  %155 = xor i64 %152, %154
  %156 = add nuw nsw i64 %155, %152
  %157 = icmp eq i64 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %36, align 1, !tbaa !2450
  %159 = add i64 %417, 5
  store i64 %159, i64* %PC, align 8
  %160 = add i64 %136, 72
  %161 = inttoptr i64 %137 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RBP, align 8, !tbaa !2428
  store i64 %160, i64* %RSP, align 8, !tbaa !2428
  %163 = add i64 %417, 6
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %160 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  %166 = add i64 %136, 80
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %107

block_403675:                                     ; preds = %block_40362b
  %167 = add i64 %275, -32
  %168 = add i64 %291, 4
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = add i64 %170, -1
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = icmp eq i64 %170, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %12, align 1, !tbaa !2432
  %174 = trunc i64 %171 to i32
  %175 = and i32 %174, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #10
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %19, align 1, !tbaa !2446
  %180 = xor i64 %171, %170
  %181 = lshr i64 %180, 4
  %182 = trunc i64 %181 to i8
  %183 = and i8 %182, 1
  store i8 %183, i8* %24, align 1, !tbaa !2447
  %184 = icmp eq i64 %171, 0
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %27, align 1, !tbaa !2448
  %186 = lshr i64 %171, 63
  %187 = trunc i64 %186 to i8
  store i8 %187, i8* %30, align 1, !tbaa !2449
  %188 = lshr i64 %170, 63
  %189 = xor i64 %186, %188
  %190 = add nuw nsw i64 %189, %188
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %36, align 1, !tbaa !2450
  %193 = add i64 %291, 12
  store i64 %193, i64* %PC, align 8
  store i64 %171, i64* %278, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_403681

block_403636:                                     ; preds = %block_40362b
  %194 = add i64 %275, -8
  %195 = add i64 %291, 4
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = add i64 %291, 8
  store i64 %198, i64* %PC, align 8
  %199 = load i64, i64* %278, align 8
  store i64 %199, i64* %RCX, align 8, !tbaa !2428
  %200 = shl i64 %199, 3
  %201 = add i64 %200, %197
  %202 = add i64 %291, 12
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = add i64 %275, -40
  %206 = add i64 %291, 16
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %205 to i64*
  store i64 %204, i64* %207, align 8
  %208 = load i64, i64* %RBP, align 8
  %209 = add i64 %208, -32
  %210 = load i64, i64* %PC, align 8
  %211 = add i64 %210, 4
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %214 = add i64 %208, -8
  %215 = add i64 %210, 8
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  store i64 %217, i64* %RSI, align 8, !tbaa !2428
  %218 = add i64 %208, -24
  %219 = add i64 %210, 12
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %RDX, align 8, !tbaa !2428
  %222 = add i64 %208, -40
  %223 = add i64 %210, 16
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224, align 8
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = add i64 %208, -48
  %227 = add i64 %210, 20
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i64*
  store i64 %225, i64* %228, align 8
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -48
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233, align 8
  store i64 %234, i64* %133, align 1, !tbaa !2451
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %235 = add i64 %231, 374
  %236 = add i64 %231, 10
  %237 = load i64, i64* %RSP, align 8, !tbaa !2428
  %238 = add i64 %237, -8
  %239 = inttoptr i64 %238 to i64*
  store i64 %236, i64* %239, align 8
  store i64 %238, i64* %RSP, align 8, !tbaa !2428
  store i64 %235, i64* %PC, align 8, !tbaa !2428
  %240 = tail call %struct.Memory* @sub_4037d0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %235, %struct.Memory* %107)
  %241 = load i64, i64* %RBP, align 8
  %242 = add i64 %241, -24
  %243 = load i64, i64* %PC, align 8
  %244 = add i64 %243, 4
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %242 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = add i64 %246, -1
  store i64 %247, i64* %RAX, align 8, !tbaa !2428
  %248 = icmp ne i64 %246, 0
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %12, align 1, !tbaa !2432
  %250 = trunc i64 %247 to i32
  %251 = and i32 %250, 255
  %252 = tail call i32 @llvm.ctpop.i32(i32 %251) #10
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  %255 = xor i8 %254, 1
  store i8 %255, i8* %19, align 1, !tbaa !2446
  %256 = xor i64 %246, 16
  %257 = xor i64 %256, %247
  %258 = lshr i64 %257, 4
  %259 = trunc i64 %258 to i8
  %260 = and i8 %259, 1
  store i8 %260, i8* %24, align 1, !tbaa !2447
  %261 = icmp eq i64 %247, 0
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %27, align 1, !tbaa !2448
  %263 = lshr i64 %247, 63
  %264 = trunc i64 %263 to i8
  store i8 %264, i8* %30, align 1, !tbaa !2449
  %265 = lshr i64 %246, 63
  %266 = xor i64 %263, %265
  %267 = xor i64 %263, 1
  %268 = add nuw nsw i64 %266, %267
  %269 = icmp eq i64 %268, 2
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %36, align 1, !tbaa !2450
  %271 = add i64 %243, 12
  store i64 %271, i64* %PC, align 8
  store i64 %247, i64* %245, align 8
  %272 = load i64, i64* %PC, align 8
  %273 = add i64 %272, -69
  store i64 %273, i64* %PC, align 8, !tbaa !2428
  br label %block_40362b

block_40362b:                                     ; preds = %block_403636, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %274 = phi i64 [ %273, %block_403636 ], [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %275 = load i64, i64* %RBP, align 8
  %276 = add i64 %275, -24
  %277 = add i64 %274, 5
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i64*
  %279 = load i64, i64* %278, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %280 = trunc i64 %279 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #10
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  %286 = icmp eq i64 %279, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %27, align 1, !tbaa !2448
  %288 = lshr i64 %279, 63
  %289 = trunc i64 %288 to i8
  store i8 %289, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  %290 = icmp ne i8 %289, 0
  %.v = select i1 %290, i64 69, i64 6
  %291 = add i64 %.v, %277
  store i64 %291, i64* %PC, align 8, !tbaa !2428
  br i1 %290, label %block_403675, label %block_403636

block_40368c:                                     ; preds = %block_403681
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %19, align 1, !tbaa !2446
  store i8 1, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  store i8 0, i8* %24, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %292 = add i64 %388, -8
  %293 = add i64 %417, 8
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  %295 = load i64, i64* %294, align 8
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = add i64 %417, 12
  store i64 %296, i64* %PC, align 8
  %297 = load i64, i64* %391, align 8
  store i64 %297, i64* %RSI, align 8, !tbaa !2428
  %298 = shl i64 %297, 3
  %299 = add i64 %298, %295
  %300 = add i64 %417, 16
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %299 to i64*
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %303 = add i64 %388, -56
  %304 = add i64 %417, 20
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %303 to i64*
  store i64 %302, i64* %305, align 8
  %306 = load i64, i64* %RBP, align 8
  %307 = add i64 %306, -8
  %308 = load i64, i64* %PC, align 8
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310, align 8
  store i64 %311, i64* %RCX, align 8, !tbaa !2428
  %312 = add i64 %308, 8
  store i64 %312, i64* %PC, align 8
  %313 = load i64, i64* %310, align 8
  store i64 %313, i64* %RSI, align 8, !tbaa !2428
  %314 = add i64 %306, -24
  %315 = add i64 %308, 12
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to i64*
  %317 = load i64, i64* %316, align 8
  store i64 %317, i64* %RDI, align 8, !tbaa !2428
  %318 = inttoptr i64 %311 to i64*
  %319 = add i64 %308, 15
  store i64 %319, i64* %PC, align 8
  %320 = load i64, i64* %318, align 8
  store i64 %320, i64* %RCX, align 8, !tbaa !2428
  %321 = shl i64 %317, 3
  %322 = add i64 %321, %313
  %323 = add i64 %308, 19
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i64*
  store i64 %320, i64* %324, align 8
  %325 = load i64, i64* %RBP, align 8
  %326 = add i64 %325, -24
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %326 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %325, -8
  %332 = add i64 %327, 8
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %RSI, align 8, !tbaa !2428
  %335 = add i64 %325, -56
  %336 = add i64 %327, 12
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %RCX, align 8, !tbaa !2428
  %339 = add i64 %325, -64
  %340 = add i64 %327, 16
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i64*
  store i64 %338, i64* %341, align 8
  %342 = load i64, i64* %RBP, align 8
  %343 = add i64 %342, -64
  %344 = load i64, i64* %PC, align 8
  %345 = add i64 %344, 5
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %343 to i64*
  %347 = load i64, i64* %346, align 8
  store i64 %347, i64* %133, align 1, !tbaa !2451
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %348 = add i64 %344, 269
  %349 = add i64 %344, 10
  %350 = load i64, i64* %RSP, align 8, !tbaa !2428
  %351 = add i64 %350, -8
  %352 = inttoptr i64 %351 to i64*
  store i64 %349, i64* %352, align 8
  store i64 %351, i64* %RSP, align 8, !tbaa !2428
  store i64 %348, i64* %PC, align 8, !tbaa !2428
  %353 = tail call %struct.Memory* @sub_4037d0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %348, %struct.Memory* %107)
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -24
  %356 = load i64, i64* %PC, align 8
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358, align 8
  %360 = add i64 %359, -1
  store i64 %360, i64* %RAX, align 8, !tbaa !2428
  %361 = icmp ne i64 %359, 0
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %12, align 1, !tbaa !2432
  %363 = trunc i64 %360 to i32
  %364 = and i32 %363, 255
  %365 = tail call i32 @llvm.ctpop.i32(i32 %364) #10
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  store i8 %368, i8* %19, align 1, !tbaa !2446
  %369 = xor i64 %359, 16
  %370 = xor i64 %369, %360
  %371 = lshr i64 %370, 4
  %372 = trunc i64 %371 to i8
  %373 = and i8 %372, 1
  store i8 %373, i8* %24, align 1, !tbaa !2447
  %374 = icmp eq i64 %360, 0
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %27, align 1, !tbaa !2448
  %376 = lshr i64 %360, 63
  %377 = trunc i64 %376 to i8
  store i8 %377, i8* %30, align 1, !tbaa !2449
  %378 = lshr i64 %359, 63
  %379 = xor i64 %376, %378
  %380 = xor i64 %376, 1
  %381 = add nuw nsw i64 %379, %380
  %382 = icmp eq i64 %381, 2
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %36, align 1, !tbaa !2450
  %384 = add i64 %356, 12
  store i64 %384, i64* %PC, align 8
  store i64 %360, i64* %358, align 8
  %385 = load i64, i64* %PC, align 8
  %386 = add i64 %385, -88
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  br label %block_403681

block_403681:                                     ; preds = %block_40368c, %block_403675
  %387 = phi i64 [ %386, %block_40368c ], [ %.pre9, %block_403675 ]
  %388 = load i64, i64* %RBP, align 8
  %389 = add i64 %388, -24
  %390 = add i64 %387, 5
  store i64 %390, i64* %PC, align 8
  %391 = inttoptr i64 %389 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = add i64 %392, -1
  %394 = icmp eq i64 %392, 0
  %395 = zext i1 %394 to i8
  store i8 %395, i8* %12, align 1, !tbaa !2432
  %396 = trunc i64 %393 to i32
  %397 = and i32 %396, 255
  %398 = tail call i32 @llvm.ctpop.i32(i32 %397) #10
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  %401 = xor i8 %400, 1
  store i8 %401, i8* %19, align 1, !tbaa !2446
  %402 = xor i64 %393, %392
  %403 = lshr i64 %402, 4
  %404 = trunc i64 %403 to i8
  %405 = and i8 %404, 1
  store i8 %405, i8* %24, align 1, !tbaa !2447
  %406 = icmp eq i64 %393, 0
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %27, align 1, !tbaa !2448
  %408 = lshr i64 %393, 63
  %409 = trunc i64 %408 to i8
  store i8 %409, i8* %30, align 1, !tbaa !2449
  %410 = lshr i64 %392, 63
  %411 = xor i64 %408, %410
  %412 = add nuw nsw i64 %411, %410
  %413 = icmp eq i64 %412, 2
  %414 = zext i1 %413 to i8
  store i8 %414, i8* %36, align 1, !tbaa !2450
  %415 = icmp ne i8 %409, 0
  %416 = xor i1 %415, %413
  %.v10 = select i1 %416, i64 93, i64 11
  %417 = add i64 %.v10, %387
  store i64 %417, i64* %PC, align 8, !tbaa !2428
  br i1 %416, label %block_4036de, label %block_40368c
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c60__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401c60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400bd0__Z13record_resultdPKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400bd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %17 = add i64 %6, -16
  %18 = add i64 %9, 12
  store i64 %18, i64* %PC, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %20 = load i64, i64* %19, align 1
  %21 = inttoptr i64 %17 to i64*
  store i64 %20, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -16
  %24 = load i64, i64* %RDI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %30 = trunc i64 %29 to i32
  %31 = and i32 %30, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #10
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %36 = icmp eq i64 %29, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %14, align 1, !tbaa !2448
  %38 = lshr i64 %29, 63
  %39 = trunc i64 %38 to i8
  store i8 %39, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v = select i1 %36, i64 35, i64 15
  %40 = add i64 %.v, %28
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  br i1 %36, label %block_400bd0.block_400c04_crit_edge, label %block_400bf0

block_400bd0.block_400c04_crit_edge:              ; preds = %block_400bd0
  %.pre = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  br label %block_400c04

block_400c75:                                     ; preds = %block_400c70, %block_400bf0
  %41 = phi i32 [ %.pre5, %block_400c70 ], [ %128, %block_400bf0 ]
  %42 = phi i64 [ %206, %block_400c70 ], [ %29, %block_400bf0 ]
  %43 = phi i64 [ %219, %block_400c70 ], [ %157, %block_400bf0 ]
  %MEMORY.0 = phi %struct.Memory* [ %205, %block_400c70 ], [ %2, %block_400bf0 ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 5
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %19, align 1, !tbaa !2451
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %50 = bitcast i64* %49 to double*
  store double 0.000000e+00, double* %50, align 1, !tbaa !2451
  %51 = sext i32 %41 to i64
  %52 = shl nsw i64 %51, 4
  store i64 %52, i64* %RCX, align 8, !tbaa !2428
  %53 = add i64 %52, %42
  store i64 %53, i64* %RAX, align 8, !tbaa !2428
  %54 = icmp ult i64 %53, %42
  %55 = icmp ult i64 %53, %52
  %56 = or i1 %54, %55
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %11, align 1, !tbaa !2432
  %58 = trunc i64 %53 to i32
  %59 = and i32 %58, 255
  %60 = tail call i32 @llvm.ctpop.i32(i32 %59) #10
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* %12, align 1, !tbaa !2446
  %64 = xor i64 %52, %42
  %65 = xor i64 %64, %53
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  store i8 %68, i8* %13, align 1, !tbaa !2447
  %69 = icmp eq i64 %53, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %14, align 1, !tbaa !2448
  %71 = lshr i64 %53, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %15, align 1, !tbaa !2449
  %73 = lshr i64 %42, 63
  %74 = lshr i64 %51, 59
  %75 = and i64 %74, 1
  %76 = xor i64 %71, %73
  %77 = xor i64 %71, %75
  %78 = add nuw nsw i64 %76, %77
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %16, align 1, !tbaa !2450
  %81 = inttoptr i64 %53 to i64*
  %82 = add i64 %43, 32
  store i64 %82, i64* %PC, align 8
  store i64 %48, i64* %81, align 8
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -16
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %52, i64* %RDX, align 8, !tbaa !2428
  %90 = add i64 %89, %52
  store i64 %90, i64* %RCX, align 8, !tbaa !2428
  %91 = add i64 %90, 8
  %92 = add i64 %85, 31
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %88, i64* %93, align 8
  %94 = load i64, i64* %PC, align 8
  %95 = add i32 %41, 1
  %96 = zext i32 %95 to i64
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  store i32 %95, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %97 = load i64, i64* %RSP, align 8
  %98 = add i64 %97, 32
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  %99 = icmp ugt i64 %97, -33
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %11, align 1, !tbaa !2432
  %101 = trunc i64 %98 to i32
  %102 = and i32 %101, 255
  %103 = tail call i32 @llvm.ctpop.i32(i32 %102) #10
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  store i8 %106, i8* %12, align 1, !tbaa !2446
  %107 = xor i64 %98, %97
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* %13, align 1, !tbaa !2447
  %111 = icmp eq i64 %98, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %14, align 1, !tbaa !2448
  %113 = lshr i64 %98, 63
  %114 = trunc i64 %113 to i8
  store i8 %114, i8* %15, align 1, !tbaa !2449
  %115 = lshr i64 %97, 63
  %116 = xor i64 %113, %115
  %117 = add nuw nsw i64 %116, %113
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %16, align 1, !tbaa !2450
  %120 = add i64 %94, 22
  store i64 %120, i64* %PC, align 8
  %121 = add i64 %97, 40
  %122 = inttoptr i64 %98 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %RBP, align 8, !tbaa !2428
  store i64 %121, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %94, 23
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %121 to i64*
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  %127 = add i64 %97, 48
  store i64 %127, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400bf0:                                     ; preds = %block_400bd0
  %128 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %129 = zext i32 %128 to i64
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  %131 = sub i32 %128, %130
  %132 = icmp ult i32 %128, %130
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %11, align 1, !tbaa !2432
  %134 = and i32 %131, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #10
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %12, align 1, !tbaa !2446
  %139 = xor i32 %130, %128
  %140 = xor i32 %139, %131
  %141 = lshr i32 %140, 4
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* %13, align 1, !tbaa !2447
  %144 = icmp eq i32 %131, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %14, align 1, !tbaa !2448
  %146 = lshr i32 %131, 31
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %15, align 1, !tbaa !2449
  %148 = lshr i32 %128, 31
  %149 = lshr i32 %130, 31
  %150 = xor i32 %149, %148
  %151 = xor i32 %146, %148
  %152 = add nuw nsw i32 %151, %150
  %153 = icmp eq i32 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %16, align 1, !tbaa !2450
  %155 = icmp ne i8 %147, 0
  %156 = xor i1 %155, %153
  %.v6 = select i1 %156, i64 133, i64 20
  %157 = add i64 %.v6, %40
  store i64 %157, i64* %PC, align 8, !tbaa !2428
  br i1 %156, label %block_400c75, label %block_400c04

block_400c4b:                                     ; preds = %block_400c04
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 24), i64* %RDI, align 8, !tbaa !2428
  %158 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  %159 = zext i32 %158 to i64
  store i64 %159, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %160 = add i64 %218, -1355
  %161 = add i64 %218, 24
  %162 = load i64, i64* %RSP, align 8, !tbaa !2428
  %163 = add i64 %162, -8
  %164 = inttoptr i64 %163 to i64*
  store i64 %161, i64* %164, align 8
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  store i64 %160, i64* %PC, align 8, !tbaa !2428
  %165 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %205)
  %166 = load i64, i64* %PC, align 8
  store i64 4294967295, i64* %RDI, align 8, !tbaa !2428
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -20
  %169 = load i32, i32* %EAX, align 4
  %170 = add i64 %166, 8
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %168 to i32*
  store i32 %169, i32* %171, align 4
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, -1291
  %174 = add i64 %172, 5
  %175 = load i64, i64* %RSP, align 8, !tbaa !2428
  %176 = add i64 %175, -8
  %177 = inttoptr i64 %176 to i64*
  store i64 %174, i64* %177, align 8
  store i64 %176, i64* %RSP, align 8, !tbaa !2428
  store i64 %173, i64* %PC, align 8, !tbaa !2428
  %178 = tail call fastcc %struct.Memory* @ext_620950_exit(%struct.State* nonnull %0, %struct.Memory* %165)
  %179 = load i64, i64* %PC, align 8
  %180 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %179, %struct.Memory* %178)
  ret %struct.Memory* %180

block_400c04:                                     ; preds = %block_400bf0, %block_400bd0.block_400c04_crit_edge
  %181 = phi i32 [ %130, %block_400bf0 ], [ %.pre, %block_400bd0.block_400c04_crit_edge ]
  %182 = phi i64 [ %157, %block_400bf0 ], [ %40, %block_400bd0.block_400c04_crit_edge ]
  %183 = add i32 %181, 10
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RAX, align 8, !tbaa !2428
  %185 = icmp eq i32 %183, 0
  %186 = zext i1 %185 to i8
  %187 = lshr i32 %183, 31
  %188 = trunc i32 %187 to i8
  store i32 %183, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  store i64 %29, i64* %RCX, align 8, !tbaa !2428
  %189 = sext i32 %183 to i64
  %190 = shl nsw i64 %189, 4
  store i64 %190, i64* %RDX, align 8, !tbaa !2428
  store i8 %188, i8* %11, align 1, !tbaa !2453
  %191 = trunc i64 %190 to i32
  %192 = and i32 %191, 240
  %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #10
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  store i8 %196, i8* %12, align 1, !tbaa !2453
  store i8 0, i8* %13, align 1, !tbaa !2453
  store i8 %186, i8* %14, align 1, !tbaa !2453
  %197 = lshr i64 %189, 59
  %198 = trunc i64 %197 to i8
  %199 = and i8 %198, 1
  store i8 %199, i8* %15, align 1, !tbaa !2453
  store i8 0, i8* %16, align 1, !tbaa !2453
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  store i64 %190, i64* %RSI, align 8, !tbaa !2428
  %200 = add i64 %182, -1220
  %201 = add i64 %182, 48
  %202 = load i64, i64* %RSP, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %RSP, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call fastcc %struct.Memory* @ext_6208d8_realloc(%struct.State* nonnull %0, %struct.Memory* %2)
  %206 = load i64, i64* %RAX, align 8
  %207 = load i64, i64* %PC, align 8
  store i64 %206, i64* bitcast (%results_type* @results to i64*), align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %208 = trunc i64 %206 to i32
  %209 = and i32 %208, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #10
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %214 = icmp eq i64 %206, 0
  %215 = zext i1 %214 to i8
  store i8 %215, i8* %14, align 1, !tbaa !2448
  %216 = lshr i64 %206, 63
  %217 = trunc i64 %216 to i8
  store i8 %217, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v7 = select i1 %214, i64 23, i64 60
  %218 = add i64 %.v7, %207
  store i64 %218, i64* %PC, align 8, !tbaa !2428
  br i1 %214, label %block_400c4b, label %block_400c70

block_400c70:                                     ; preds = %block_400c04
  %219 = add i64 %218, 5
  store i64 %219, i64* %PC, align 8, !tbaa !2428
  %.pre5 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  br label %block_400c75
}

; Function Attrs: noinline
define %struct.Memory* @sub_402430__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402430:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402458

block_4024d9:                                     ; preds = %block_402458
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402468:                                     ; preds = %block_402458
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 5376
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403980__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 13487
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405950__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 5778
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b50__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402458

block_402458:                                     ; preds = %block_402468, %block_402430
  %255 = phi i64 [ %254, %block_402468 ], [ %.pre, %block_402430 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402468, label %block_4024d9
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406740___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_406740:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401ca0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401ca0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401cc0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405c80__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405c80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -16
  %15 = load i64, i64* %RDI, align 8
  %16 = add i64 %13, 7
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i64*
  store i64 %15, i64* %17, align 8
  %18 = load i64, i64* %RBP, align 8
  %19 = add i64 %18, -16
  %20 = load i64, i64* %RSI, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %25 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RSI, align 8, !tbaa !2428
  %30 = add i64 %24, -24
  %31 = add i64 %26, 8
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -24
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %34 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, 8
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ugt i64 %38, -9
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #10
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 %39, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = icmp eq i64 %39, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = lshr i64 %39, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %38, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %58
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = add i64 %35, 12
  store i64 %67, i64* %PC, align 8
  store i64 %39, i64* %37, align 8
  %68 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %70 = bitcast i64* %69 to double*
  %71 = bitcast [32 x %union.VectorReg]* %6 to double*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %74 = bitcast i64* %73 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_405ca0

block_405d13:                                     ; preds = %block_405d03
  %75 = add i64 %316, -48
  %76 = add i64 %328, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %328, 8
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %78 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %68, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %82 = add i64 %316, -40
  %83 = add i64 %328, 12
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = add i64 %328, 16
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  store i64 %81, i64* %87, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -40
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, -8
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = icmp ugt i64 %93, 7
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %42, align 1, !tbaa !2432
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #10
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %49, align 1, !tbaa !2446
  %103 = xor i64 %93, 16
  %104 = xor i64 %103, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %54, align 1, !tbaa !2447
  %108 = icmp eq i64 %94, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %57, align 1, !tbaa !2448
  %110 = lshr i64 %94, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %60, align 1, !tbaa !2449
  %112 = lshr i64 %93, 63
  %113 = xor i64 %110, %112
  %114 = xor i64 %110, 1
  %115 = add nuw nsw i64 %113, %114
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %66, align 1, !tbaa !2450
  %118 = add i64 %90, 12
  store i64 %118, i64* %PC, align 8
  store i64 %94, i64* %92, align 8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, -100
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  br label %block_405ccb

block_405d52:                                     ; preds = %block_405ca0
  %121 = add i64 %364, 1
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %9, align 8, !tbaa !2428
  %123 = add i64 %122, 8
  %124 = inttoptr i64 %122 to i64*
  %125 = load i64, i64* %124, align 8
  store i64 %125, i64* %RBP, align 8, !tbaa !2428
  store i64 %123, i64* %9, align 8, !tbaa !2428
  %126 = add i64 %364, 2
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %123 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %129 = add i64 %122, 16
  store i64 %129, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_405cae:                                     ; preds = %block_405ca0
  %130 = add i64 %364, 4
  store i64 %130, i64* %PC, align 8
  %131 = load i64, i64* %333, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %364, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %68, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %135 = add i64 %330, -32
  %136 = add i64 %364, 13
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %135 to i64*
  store i64 %134, i64* %137, align 8
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -24
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = add i64 %138, -40
  %145 = add i64 %140, 8
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i64*
  store i64 %143, i64* %146, align 8
  %147 = load i64, i64* %RBP, align 8
  %148 = add i64 %147, -40
  %149 = load i64, i64* %PC, align 8
  %150 = add i64 %149, 4
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %148 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %RAX, align 8, !tbaa !2428
  %153 = add i64 %147, -48
  %154 = add i64 %149, 8
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %153 to i64*
  store i64 %152, i64* %155, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_405ccb

block_405ce0:                                     ; preds = %block_405ccb
  %156 = load i64, i64* %RBP, align 8
  %157 = add i64 %156, -32
  %158 = add i64 %272, 5
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %68, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %161 = add i64 %156, -48
  %162 = add i64 %272, 9
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = add i64 %164, -8
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = icmp ugt i64 %164, 7
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %42, align 1, !tbaa !2432
  %168 = trunc i64 %165 to i32
  %169 = and i32 %168, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #10
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %49, align 1, !tbaa !2446
  %174 = xor i64 %164, 16
  %175 = xor i64 %174, %165
  %176 = lshr i64 %175, 4
  %177 = trunc i64 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %54, align 1, !tbaa !2447
  %179 = icmp eq i64 %165, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %57, align 1, !tbaa !2448
  %181 = lshr i64 %165, 63
  %182 = trunc i64 %181 to i8
  store i8 %182, i8* %60, align 1, !tbaa !2449
  %183 = lshr i64 %164, 63
  %184 = xor i64 %181, %183
  %185 = xor i64 %181, 1
  %186 = add nuw nsw i64 %184, %185
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %66, align 1, !tbaa !2450
  %189 = add i64 %272, 20
  store i64 %189, i64* %PC, align 8
  store i64 %165, i64* %163, align 8
  %190 = load i64, i64* %RAX, align 8
  %191 = add i64 %190, -8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 5
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %72, align 1, !tbaa !2451
  store double 0.000000e+00, double* %74, align 1, !tbaa !2451
  %196 = add i64 %192, 9
  store i64 %196, i64* %PC, align 8
  %.cast = bitcast i64 %195 to double
  %197 = load double, double* %71, align 1
  %198 = fcmp uno double %.cast, %197
  br i1 %198, label %199, label %209

; <label>:199:                                    ; preds = %block_405ce0
  %200 = fadd double %.cast, %197
  %201 = bitcast double %200 to i64
  %202 = and i64 %201, 9221120237041090560
  %203 = icmp eq i64 %202, 9218868437227405312
  %204 = and i64 %201, 2251799813685247
  %205 = icmp ne i64 %204, 0
  %206 = and i1 %203, %205
  br i1 %206, label %207, label %215

; <label>:207:                                    ; preds = %199
  %208 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %196, %struct.Memory* %MEMORY.0) #13
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:209:                                    ; preds = %block_405ce0
  %210 = fcmp ogt double %.cast, %197
  br i1 %210, label %215, label %211

; <label>:211:                                    ; preds = %209
  %212 = fcmp olt double %.cast, %197
  br i1 %212, label %215, label %213

; <label>:213:                                    ; preds = %211
  %214 = fcmp oeq double %.cast, %197
  br i1 %214, label %215, label %219

; <label>:215:                                    ; preds = %213, %211, %209, %199
  %216 = phi i8 [ 0, %209 ], [ 0, %211 ], [ 1, %213 ], [ 1, %199 ]
  %217 = phi i8 [ 0, %209 ], [ 0, %211 ], [ 0, %213 ], [ 1, %199 ]
  %218 = phi i8 [ 0, %209 ], [ 1, %211 ], [ 0, %213 ], [ 1, %199 ]
  store i8 %216, i8* %57, align 1, !tbaa !2453
  store i8 %217, i8* %49, align 1, !tbaa !2453
  store i8 %218, i8* %42, align 1, !tbaa !2453
  br label %219

; <label>:219:                                    ; preds = %215, %213
  store i8 0, i8* %66, align 1, !tbaa !2453
  store i8 0, i8* %60, align 1, !tbaa !2453
  store i8 0, i8* %54, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %219, %207
  %220 = phi i64 [ %.pre6, %207 ], [ %196, %219 ]
  %221 = phi %struct.Memory* [ %208, %207 ], [ %MEMORY.0, %219 ]
  %222 = load i8, i8* %42, align 1, !tbaa !2432
  %223 = load i8, i8* %57, align 1, !tbaa !2448
  %224 = or i8 %223, %222
  %225 = icmp eq i8 %224, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %DL, align 1, !tbaa !2453
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -49
  %229 = add i64 %220, 6
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to i8*
  store i8 %226, i8* %230, align 1
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_405d03

block_405ccb:                                     ; preds = %block_405cae, %block_405d13
  %231 = phi i64 [ %.pre5, %block_405cae ], [ %120, %block_405d13 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_405cae ], [ %MEMORY.1, %block_405d13 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %42, align 1, !tbaa !2432
  store i8 1, i8* %49, align 1, !tbaa !2446
  store i8 1, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %60, align 1, !tbaa !2449
  store i8 0, i8* %66, align 1, !tbaa !2450
  store i8 0, i8* %54, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %232 = load i64, i64* %RBP, align 8
  %233 = add i64 %232, -40
  %234 = add i64 %231, 8
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %233 to i64*
  %236 = load i64, i64* %235, align 8
  store i64 %236, i64* %RDX, align 8, !tbaa !2428
  %237 = add i64 %232, -8
  %238 = add i64 %231, 12
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %237 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = sub i64 %236, %240
  %242 = icmp ult i64 %236, %240
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %42, align 1, !tbaa !2432
  %244 = trunc i64 %241 to i32
  %245 = and i32 %244, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245) #10
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %49, align 1, !tbaa !2446
  %250 = xor i64 %240, %236
  %251 = xor i64 %250, %241
  %252 = lshr i64 %251, 4
  %253 = trunc i64 %252 to i8
  %254 = and i8 %253, 1
  store i8 %254, i8* %54, align 1, !tbaa !2447
  %255 = icmp eq i64 %241, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %57, align 1, !tbaa !2448
  %257 = lshr i64 %241, 63
  %258 = trunc i64 %257 to i8
  store i8 %258, i8* %60, align 1, !tbaa !2449
  %259 = lshr i64 %236, 63
  %260 = lshr i64 %240, 63
  %261 = xor i64 %260, %259
  %262 = xor i64 %257, %259
  %263 = add nuw nsw i64 %262, %261
  %264 = icmp eq i64 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %66, align 1, !tbaa !2450
  %266 = add i64 %232, -49
  %267 = add i64 %231, 15
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i8*
  store i8 0, i8* %268, align 1
  %269 = load i64, i64* %PC, align 8
  %270 = load i8, i8* %57, align 1, !tbaa !2448
  %271 = icmp ne i8 %270, 0
  %.v11 = select i1 %271, i64 41, i64 6
  %272 = add i64 %.v11, %269
  store i64 %272, i64* %PC, align 8, !tbaa !2428
  %273 = icmp eq i8 %270, 1
  br i1 %273, label %block_405d03, label %block_405ce0

block_405d0e:                                     ; preds = %block_405d03
  %274 = add i64 %316, -32
  %275 = add i64 %328, 43
  store i64 %275, i64* %PC, align 8
  %276 = inttoptr i64 %274 to i64*
  %277 = load i64, i64* %276, align 8
  store i64 %277, i64* %68, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %278 = add i64 %316, -40
  %279 = add i64 %328, 47
  store i64 %279, i64* %PC, align 8
  %280 = inttoptr i64 %278 to i64*
  %281 = load i64, i64* %280, align 8
  store i64 %281, i64* %RAX, align 8, !tbaa !2428
  %282 = add i64 %328, 51
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %281 to i64*
  store i64 %277, i64* %283, align 8
  %284 = load i64, i64* %RBP, align 8
  %285 = add i64 %284, -24
  %286 = load i64, i64* %PC, align 8
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %285 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = add i64 %289, 8
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = icmp ugt i64 %289, -9
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %42, align 1, !tbaa !2432
  %293 = trunc i64 %290 to i32
  %294 = and i32 %293, 255
  %295 = tail call i32 @llvm.ctpop.i32(i32 %294) #10
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  store i8 %298, i8* %49, align 1, !tbaa !2446
  %299 = xor i64 %290, %289
  %300 = lshr i64 %299, 4
  %301 = trunc i64 %300 to i8
  %302 = and i8 %301, 1
  store i8 %302, i8* %54, align 1, !tbaa !2447
  %303 = icmp eq i64 %290, 0
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %57, align 1, !tbaa !2448
  %305 = lshr i64 %290, 63
  %306 = trunc i64 %305 to i8
  store i8 %306, i8* %60, align 1, !tbaa !2449
  %307 = lshr i64 %289, 63
  %308 = xor i64 %305, %307
  %309 = add nuw nsw i64 %308, %305
  %310 = icmp eq i64 %309, 2
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %66, align 1, !tbaa !2450
  %312 = add i64 %286, 12
  store i64 %312, i64* %PC, align 8
  store i64 %290, i64* %288, align 8
  %313 = load i64, i64* %PC, align 8
  %314 = add i64 %313, -173
  store i64 %314, i64* %PC, align 8, !tbaa !2428
  br label %block_405ca0

block_405d03:                                     ; preds = %block_405ccb, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %315 = phi i64 [ %272, %block_405ccb ], [ %.pre7, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_405ccb ], [ %221, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %316 = load i64, i64* %RBP, align 8
  %317 = add i64 %316, -49
  %318 = add i64 %315, 3
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i8*
  %320 = load i8, i8* %319, align 1
  store i8 %320, i8* %AL, align 1, !tbaa !2453
  %321 = and i8 %320, 1
  store i8 0, i8* %42, align 1, !tbaa !2432
  %322 = zext i8 %321 to i32
  %323 = tail call i32 @llvm.ctpop.i32(i32 %322) #10
  %324 = trunc i32 %323 to i8
  %325 = xor i8 %324, 1
  store i8 %325, i8* %49, align 1, !tbaa !2446
  %326 = xor i8 %321, 1
  store i8 %326, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %60, align 1, !tbaa !2449
  store i8 0, i8* %66, align 1, !tbaa !2450
  store i8 0, i8* %54, align 1, !tbaa !2447
  %327 = icmp eq i8 %326, 0
  %.v = select i1 %327, i64 16, i64 11
  %328 = add i64 %.v, %315
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  br i1 %327, label %block_405d13, label %block_405d0e

block_405ca0:                                     ; preds = %block_405d0e, %block_405c80
  %329 = phi i64 [ %.pre, %block_405c80 ], [ %314, %block_405d0e ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405c80 ], [ %MEMORY.1, %block_405d0e ]
  %330 = load i64, i64* %RBP, align 8
  %331 = add i64 %330, -24
  %332 = add i64 %329, 4
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = add i64 %330, -16
  %336 = add i64 %329, 8
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = sub i64 %334, %338
  %340 = icmp ult i64 %334, %338
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %42, align 1, !tbaa !2432
  %342 = trunc i64 %339 to i32
  %343 = and i32 %342, 255
  %344 = tail call i32 @llvm.ctpop.i32(i32 %343) #10
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  %347 = xor i8 %346, 1
  store i8 %347, i8* %49, align 1, !tbaa !2446
  %348 = xor i64 %338, %334
  %349 = xor i64 %348, %339
  %350 = lshr i64 %349, 4
  %351 = trunc i64 %350 to i8
  %352 = and i8 %351, 1
  store i8 %352, i8* %54, align 1, !tbaa !2447
  %353 = icmp eq i64 %339, 0
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %57, align 1, !tbaa !2448
  %355 = lshr i64 %339, 63
  %356 = trunc i64 %355 to i8
  store i8 %356, i8* %60, align 1, !tbaa !2449
  %357 = lshr i64 %334, 63
  %358 = lshr i64 %338, 63
  %359 = xor i64 %358, %357
  %360 = xor i64 %355, %357
  %361 = add nuw nsw i64 %360, %359
  %362 = icmp eq i64 %361, 2
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %66, align 1, !tbaa !2450
  %.v8 = select i1 %353, i64 178, i64 14
  %364 = add i64 %.v8, %329
  store i64 %364, i64* %PC, align 8, !tbaa !2428
  br i1 %353, label %block_405d52, label %block_405cae
}

; Function Attrs: noinline
define %struct.Memory* @sub_4062c0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4062c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  store i64 %10, i64* %RCX, align 8, !tbaa !2428
  %39 = add i64 %6, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %51, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %union.VectorReg* %3 to double*
  %59 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %57, i64* %59, align 1, !tbaa !2451
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %61 = bitcast i64* %60 to double*
  store double 0.000000e+00, double* %61, align 1, !tbaa !2451
  %62 = add i64 %49, -24
  %63 = add i64 %51, 12
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RSI, align 8, !tbaa !2428
  %66 = add i64 %51, 16
  store i64 %66, i64* %PC, align 8
  %67 = bitcast i64 %57 to double
  %68 = inttoptr i64 %65 to double*
  %69 = load double, double* %68, align 8
  %70 = fadd double %67, %69
  store double %70, double* %58, align 1, !tbaa !2451
  store i64 0, i64* %60, align 1, !tbaa !2451
  %71 = add i64 %49, -32
  %72 = add i64 %51, 21
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to double*
  store double %70, double* %73, align 8
  %74 = load i64, i64* %RAX, align 8
  %75 = load i64, i64* %PC, align 8
  store i64 %74, i64* %RDI, align 8, !tbaa !2428
  %76 = load i64, i64* %RCX, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %75, -17789
  %78 = add i64 %75, 11
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_401d70__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -8
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 5
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %61, align 1, !tbaa !2451
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #10
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %85, 10
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %85, 11
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %82
}

; Function Attrs: noinline
define %struct.Memory* @sub_406610__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406610:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406640__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_403310__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_403310:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -184
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 176
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RSI, align 8
  %41 = add i64 %9, 14
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC, align 8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %48 = load i64, i64* %47, align 1
  %49 = inttoptr i64 %44 to i64*
  store i64 %48, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RDI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = lshr i64 %77, 63
  %79 = trunc i64 %78 to i8
  %80 = shl i64 %77, 1
  %81 = icmp slt i64 %77, 0
  %82 = icmp slt i64 %80, 0
  %83 = xor i1 %81, %82
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  store i8 %79, i8* %13, align 1, !tbaa !2453
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #10
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %90 = icmp eq i64 %80, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %29, align 1, !tbaa !2453
  %92 = lshr i64 %77, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %32, align 1, !tbaa !2453
  %95 = zext i1 %83 to i8
  store i8 %95, i8* %38, align 1, !tbaa !2453
  %96 = add i64 %71, -40
  %97 = add i64 %73, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %80, i64* %98, align 8
  %99 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_403344

block_403436:                                     ; preds = %block_403428
  %100 = add i64 %695, -8
  store i64 %100, i64* %RDI, align 8, !tbaa !2428
  %101 = add i64 %629, 8
  store i64 %101, i64* %PC, align 8
  %102 = load i64, i64* %698, align 8
  %103 = add i64 %102, -1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = icmp eq i64 %102, 0
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %13, align 1, !tbaa !2432
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = tail call i32 @llvm.ctpop.i32(i32 %107) #10
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %20, align 1, !tbaa !2446
  %112 = xor i64 %103, %102
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %26, align 1, !tbaa !2447
  %116 = icmp eq i64 %103, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %29, align 1, !tbaa !2448
  %118 = lshr i64 %103, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* %32, align 1, !tbaa !2449
  %120 = lshr i64 %102, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %120
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %38, align 1, !tbaa !2450
  store i64 %103, i64* %RSI, align 8, !tbaa !2428
  %125 = add i64 %629, -342
  %126 = add i64 %629, 20
  %127 = load i64, i64* %RSP, align 8, !tbaa !2428
  %128 = add i64 %127, -8
  %129 = inttoptr i64 %128 to i64*
  store i64 %126, i64* %129, align 8
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  %130 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %125, %struct.Memory* %2)
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -88
  %133 = load i64, i64* %PC, align 8
  store i64 %132, i64* %RDI, align 8, !tbaa !2428
  %134 = load i64, i64* %RAX, align 8
  %135 = add i64 %133, 8
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %132 to i64*
  store i64 %134, i64* %136, align 8
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, -962
  %139 = add i64 %137, 5
  %140 = load i64, i64* %RSP, align 8, !tbaa !2428
  %141 = add i64 %140, -8
  %142 = inttoptr i64 %141 to i64*
  store i64 %139, i64* %142, align 8
  store i64 %141, i64* %RSP, align 8, !tbaa !2428
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %143 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %138, %struct.Memory* %130)
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -8
  %146 = load i64, i64* %PC, align 8
  store i64 %145, i64* %RDI, align 8, !tbaa !2428
  %147 = add i64 %144, -48
  %148 = add i64 %146, 8
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %147 to i64*
  %150 = load i64, i64* %149, align 8
  store i64 %150, i64* %RSI, align 8, !tbaa !2428
  %151 = add i64 %144, -152
  %152 = load i64, i64* %RAX, align 8
  %153 = add i64 %146, 15
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %151 to i64*
  store i64 %152, i64* %154, align 8
  %155 = load i64, i64* %PC, align 8
  %156 = add i64 %155, -390
  %157 = add i64 %155, 5
  %158 = load i64, i64* %RSP, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160, align 8
  store i64 %159, i64* %RSP, align 8, !tbaa !2428
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %161 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %156, %struct.Memory* %143)
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -96
  %164 = load i64, i64* %PC, align 8
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  %165 = load i64, i64* %RAX, align 8
  %166 = add i64 %164, 8
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %163 to i64*
  store i64 %165, i64* %167, align 8
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, -995
  %170 = add i64 %168, 5
  %171 = load i64, i64* %RSP, align 8, !tbaa !2428
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 %170, i64* %173, align 8
  store i64 %172, i64* %RSP, align 8, !tbaa !2428
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  %174 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %169, %struct.Memory* %161)
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -152
  %177 = load i64, i64* %PC, align 8
  %178 = add i64 %177, 7
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179, align 8
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = add i64 %177, 10
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RDI, align 8, !tbaa !2428
  %184 = load i64*, i64** %99, align 8
  %185 = add i64 %177, 13
  store i64 %185, i64* %PC, align 8
  store i64 %183, i64* %184, align 8
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -40
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %187 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = add i64 %191, -1
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = icmp eq i64 %191, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %13, align 1, !tbaa !2432
  %195 = trunc i64 %192 to i32
  %196 = and i32 %195, 255
  %197 = tail call i32 @llvm.ctpop.i32(i32 %196) #10
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  store i8 %200, i8* %20, align 1, !tbaa !2446
  %201 = xor i64 %192, %191
  %202 = lshr i64 %201, 4
  %203 = trunc i64 %202 to i8
  %204 = and i8 %203, 1
  store i8 %204, i8* %26, align 1, !tbaa !2447
  %205 = icmp eq i64 %192, 0
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %29, align 1, !tbaa !2448
  %207 = lshr i64 %192, 63
  %208 = trunc i64 %207 to i8
  store i8 %208, i8* %32, align 1, !tbaa !2449
  %209 = lshr i64 %191, 63
  %210 = xor i64 %207, %209
  %211 = add nuw nsw i64 %210, %209
  %212 = icmp eq i64 %211, 2
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %38, align 1, !tbaa !2450
  %214 = add i64 %186, -48
  %215 = add i64 %188, 12
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  store i64 %192, i64* %216, align 8
  %.pre9 = load i64, i64* %PC, align 8
  %.pre10 = load i64, i64* %RBP, align 8
  br label %block_403491

block_403352:                                     ; preds = %block_403344
  %217 = add i64 %695, -8
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %218 = add i64 %731, 8
  store i64 %218, i64* %PC, align 8
  %219 = load i64, i64* %698, align 8
  %220 = add i64 %219, -1
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp eq i64 %219, 0
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %13, align 1, !tbaa !2432
  %223 = trunc i64 %220 to i32
  %224 = and i32 %223, 255
  %225 = tail call i32 @llvm.ctpop.i32(i32 %224) #10
  %226 = trunc i32 %225 to i8
  %227 = and i8 %226, 1
  %228 = xor i8 %227, 1
  store i8 %228, i8* %20, align 1, !tbaa !2446
  %229 = xor i64 %220, %219
  %230 = lshr i64 %229, 4
  %231 = trunc i64 %230 to i8
  %232 = and i8 %231, 1
  store i8 %232, i8* %26, align 1, !tbaa !2447
  %233 = icmp eq i64 %220, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %29, align 1, !tbaa !2448
  %235 = lshr i64 %220, 63
  %236 = trunc i64 %235 to i8
  store i8 %236, i8* %32, align 1, !tbaa !2449
  %237 = lshr i64 %219, 63
  %238 = xor i64 %235, %237
  %239 = add nuw nsw i64 %238, %237
  %240 = icmp eq i64 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %38, align 1, !tbaa !2450
  store i64 %220, i64* %RSI, align 8, !tbaa !2428
  %242 = add i64 %731, -114
  %243 = add i64 %731, 20
  %244 = load i64, i64* %RSP, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %243, i64* %246, align 8
  store i64 %245, i64* %RSP, align 8, !tbaa !2428
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  %247 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %242, %struct.Memory* %2)
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -56
  %250 = load i64, i64* %PC, align 8
  store i64 %249, i64* %RDI, align 8, !tbaa !2428
  %251 = load i64, i64* %RAX, align 8
  %252 = add i64 %250, 8
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %249 to i64*
  store i64 %251, i64* %253, align 8
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, -734
  %256 = add i64 %254, 5
  %257 = load i64, i64* %RSP, align 8, !tbaa !2428
  %258 = add i64 %257, -8
  %259 = inttoptr i64 %258 to i64*
  store i64 %256, i64* %259, align 8
  store i64 %258, i64* %RSP, align 8, !tbaa !2428
  store i64 %255, i64* %PC, align 8, !tbaa !2428
  %260 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %255, %struct.Memory* %2)
  %261 = load i64, i64* %RBP, align 8
  %262 = add i64 %261, -8
  %263 = load i64, i64* %PC, align 8
  store i64 %262, i64* %RDI, align 8, !tbaa !2428
  %264 = add i64 %261, -40
  %265 = add i64 %263, 8
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i64*
  %267 = load i64, i64* %266, align 8
  store i64 %267, i64* %RSI, align 8, !tbaa !2428
  %268 = add i64 %261, -136
  %269 = load i64, i64* %RAX, align 8
  %270 = add i64 %263, 15
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %268 to i64*
  store i64 %269, i64* %271, align 8
  %272 = load i64, i64* %PC, align 8
  %273 = add i64 %272, -162
  %274 = add i64 %272, 5
  %275 = load i64, i64* %RSP, align 8, !tbaa !2428
  %276 = add i64 %275, -8
  %277 = inttoptr i64 %276 to i64*
  store i64 %274, i64* %277, align 8
  store i64 %276, i64* %RSP, align 8, !tbaa !2428
  store i64 %273, i64* %PC, align 8, !tbaa !2428
  %278 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %273, %struct.Memory* %2)
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -64
  %281 = load i64, i64* %PC, align 8
  store i64 %280, i64* %RDI, align 8, !tbaa !2428
  %282 = load i64, i64* %RAX, align 8
  %283 = add i64 %281, 8
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %280 to i64*
  store i64 %282, i64* %284, align 8
  %285 = load i64, i64* %PC, align 8
  %286 = add i64 %285, -767
  %287 = add i64 %285, 5
  %288 = load i64, i64* %RSP, align 8, !tbaa !2428
  %289 = add i64 %288, -8
  %290 = inttoptr i64 %289 to i64*
  store i64 %287, i64* %290, align 8
  store i64 %289, i64* %RSP, align 8, !tbaa !2428
  store i64 %286, i64* %PC, align 8, !tbaa !2428
  %291 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %286, %struct.Memory* %2)
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -136
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 7
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296, align 8
  store i64 %297, i64* %RDI, align 8, !tbaa !2428
  %298 = load i64, i64* %RAX, align 8
  store i64 %298, i64* %RSI, align 8, !tbaa !2428
  %299 = add i64 %294, -740
  %300 = add i64 %294, 15
  %301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303, align 8
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  %304 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %299, %struct.Memory* %2)
  %305 = load i8, i8* %AL, align 1
  %306 = load i64, i64* %PC, align 8
  %307 = and i8 %305, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %308 = zext i8 %307 to i32
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308) #10
  %310 = trunc i32 %309 to i8
  %311 = xor i8 %310, 1
  store i8 %311, i8* %20, align 1, !tbaa !2446
  %312 = xor i8 %307, 1
  store i8 %312, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %313 = icmp eq i8 %312, 0
  %.v22 = select i1 %313, i64 13, i64 8
  %314 = add i64 %.v22, %306
  store i64 %314, i64* %PC, align 8, !tbaa !2428
  br i1 %313, label %block_4033b0, label %block_4033ab

block_4034c4:                                     ; preds = %block_4034ac
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  store i64 %316, i64* %RDI, align 8, !tbaa !2428
  %317 = add i64 %315, -40
  %318 = add i64 %915, 8
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = add i64 %915, -484
  %322 = add i64 %915, 13
  %323 = load i64, i64* %RSP, align 8, !tbaa !2428
  %324 = add i64 %323, -8
  %325 = inttoptr i64 %324 to i64*
  store i64 %322, i64* %325, align 8
  store i64 %324, i64* %RSP, align 8, !tbaa !2428
  store i64 %321, i64* %PC, align 8, !tbaa !2428
  %326 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %321, %struct.Memory* %MEMORY.3)
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -104
  %329 = load i64, i64* %PC, align 8
  store i64 %328, i64* %RDI, align 8, !tbaa !2428
  %330 = load i64, i64* %RAX, align 8
  %331 = add i64 %329, 8
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %328 to i64*
  store i64 %330, i64* %332, align 8
  %333 = load i64, i64* %PC, align 8
  %334 = add i64 %333, -1097
  %335 = add i64 %333, 5
  %336 = load i64, i64* %RSP, align 8, !tbaa !2428
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338, align 8
  store i64 %337, i64* %RSP, align 8, !tbaa !2428
  store i64 %334, i64* %PC, align 8, !tbaa !2428
  %339 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %334, %struct.Memory* %MEMORY.3)
  %340 = load i64, i64* %RBP, align 8
  %341 = add i64 %340, -16
  %342 = load i64, i64* %PC, align 8
  store i64 %341, i64* %RSI, align 8, !tbaa !2428
  %343 = load i64, i64* %RAX, align 8
  store i64 %343, i64* %RDI, align 8, !tbaa !2428
  %344 = add i64 %342, -1070
  %345 = add i64 %342, 12
  %346 = load i64, i64* %RSP, align 8, !tbaa !2428
  %347 = add i64 %346, -8
  %348 = inttoptr i64 %347 to i64*
  store i64 %345, i64* %348, align 8
  store i64 %347, i64* %RSP, align 8, !tbaa !2428
  store i64 %344, i64* %PC, align 8, !tbaa !2428
  %349 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %344, %struct.Memory* %MEMORY.3)
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -153
  %352 = load i8, i8* %AL, align 1
  %353 = load i64, i64* %PC, align 8
  %354 = add i64 %353, 6
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %351 to i8*
  store i8 %352, i8* %355, align 1
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_4034f0

block_403491:                                     ; preds = %block_403428, %block_403436
  %356 = phi i64 [ %695, %block_403428 ], [ %.pre10, %block_403436 ]
  %357 = phi i64 [ %629, %block_403428 ], [ %.pre9, %block_403436 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_403428 ], [ %174, %block_403436 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %358 = add i64 %356, -48
  %359 = add i64 %357, 11
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = add i64 %361, -1
  %363 = icmp eq i64 %361, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %13, align 1, !tbaa !2432
  %365 = trunc i64 %362 to i32
  %366 = and i32 %365, 255
  %367 = tail call i32 @llvm.ctpop.i32(i32 %366) #10
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  store i8 %370, i8* %20, align 1, !tbaa !2446
  %371 = xor i64 %362, %361
  %372 = lshr i64 %371, 4
  %373 = trunc i64 %372 to i8
  %374 = and i8 %373, 1
  store i8 %374, i8* %26, align 1, !tbaa !2447
  %375 = icmp eq i64 %362, 0
  %376 = zext i1 %375 to i8
  store i8 %376, i8* %29, align 1, !tbaa !2448
  %377 = lshr i64 %362, 63
  %378 = trunc i64 %377 to i8
  store i8 %378, i8* %32, align 1, !tbaa !2449
  %379 = lshr i64 %361, 63
  %380 = xor i64 %377, %379
  %381 = add nuw nsw i64 %380, %379
  %382 = icmp eq i64 %381, 2
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %38, align 1, !tbaa !2450
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %385 = ashr i64 %362, 63
  store i64 %385, i64* %RDX, align 8, !tbaa !2428
  %386 = add i64 %357, 23
  store i64 %386, i64* %PC, align 8
  %387 = zext i64 %385 to i128
  %388 = shl nuw i128 %387, 64
  %389 = zext i64 %362 to i128
  %390 = or i128 %388, %389
  %391 = sdiv i128 %390, 2
  %392 = trunc i128 %391 to i64
  %393 = and i128 %391, 18446744073709551615
  %394 = sext i64 %392 to i128
  %395 = and i128 %394, -18446744073709551616
  %396 = or i128 %395, %393
  %397 = icmp eq i128 %391, %396
  br i1 %397, label %400, label %398

; <label>:398:                                    ; preds = %block_403491
  %399 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %386, %struct.Memory* %MEMORY.0) #13
  %.pre11 = load i64, i64* %RBP, align 8
  %.pre12 = load i64, i64* %RAX, align 8
  %.pre13 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:400:                                    ; preds = %block_403491
  %401 = srem i128 %390, 2
  %402 = trunc i128 %401 to i64
  store i64 %392, i64* %384, align 8, !tbaa !2428
  store i64 %402, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %400, %398
  %403 = phi i64 [ %.pre13, %398 ], [ %386, %400 ]
  %404 = phi i64 [ %.pre12, %398 ], [ %392, %400 ]
  %405 = phi i64 [ %.pre11, %398 ], [ %356, %400 ]
  %406 = phi %struct.Memory* [ %399, %398 ], [ %MEMORY.0, %400 ]
  %407 = add i64 %405, -40
  %408 = add i64 %403, 4
  store i64 %408, i64* %PC, align 8
  %409 = inttoptr i64 %407 to i64*
  store i64 %404, i64* %409, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_4034ac

block_4033b0:                                     ; preds = %block_403352
  %410 = load i64, i64* %RBP, align 8
  %411 = add i64 %410, -40
  %412 = add i64 %314, 4
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = add i64 %414, 1
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = icmp eq i64 %414, -1
  %417 = icmp eq i64 %415, 0
  %418 = or i1 %416, %417
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %13, align 1, !tbaa !2432
  %420 = trunc i64 %415 to i32
  %421 = and i32 %420, 255
  %422 = tail call i32 @llvm.ctpop.i32(i32 %421) #10
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  store i8 %425, i8* %20, align 1, !tbaa !2446
  %426 = xor i64 %415, %414
  %427 = lshr i64 %426, 4
  %428 = trunc i64 %427 to i8
  %429 = and i8 %428, 1
  store i8 %429, i8* %26, align 1, !tbaa !2447
  %430 = zext i1 %417 to i8
  store i8 %430, i8* %29, align 1, !tbaa !2448
  %431 = lshr i64 %415, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %32, align 1, !tbaa !2449
  %433 = lshr i64 %414, 63
  %434 = xor i64 %431, %433
  %435 = add nuw nsw i64 %434, %431
  %436 = icmp eq i64 %435, 2
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %38, align 1, !tbaa !2450
  %438 = add i64 %314, 12
  store i64 %438, i64* %PC, align 8
  store i64 %415, i64* %413, align 8
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4033bc

block_4033bc:                                     ; preds = %block_4033ab, %block_4033b0
  %439 = phi i64 [ %598, %block_4033ab ], [ %.pre19, %block_4033b0 ]
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -8
  store i64 %441, i64* %RDI, align 8, !tbaa !2428
  %442 = add i64 %440, -40
  %443 = add i64 %439, 8
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i64*
  %445 = load i64, i64* %444, align 8
  %446 = add i64 %445, -1
  store i64 %446, i64* %RAX, align 8, !tbaa !2428
  %447 = icmp eq i64 %445, 0
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %13, align 1, !tbaa !2432
  %449 = trunc i64 %446 to i32
  %450 = and i32 %449, 255
  %451 = tail call i32 @llvm.ctpop.i32(i32 %450) #10
  %452 = trunc i32 %451 to i8
  %453 = and i8 %452, 1
  %454 = xor i8 %453, 1
  store i8 %454, i8* %20, align 1, !tbaa !2446
  %455 = xor i64 %446, %445
  %456 = lshr i64 %455, 4
  %457 = trunc i64 %456 to i8
  %458 = and i8 %457, 1
  store i8 %458, i8* %26, align 1, !tbaa !2447
  %459 = icmp eq i64 %446, 0
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %29, align 1, !tbaa !2448
  %461 = lshr i64 %446, 63
  %462 = trunc i64 %461 to i8
  store i8 %462, i8* %32, align 1, !tbaa !2449
  %463 = lshr i64 %445, 63
  %464 = xor i64 %461, %463
  %465 = add nuw nsw i64 %464, %463
  %466 = icmp eq i64 %465, 2
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %38, align 1, !tbaa !2450
  store i64 %446, i64* %RSI, align 8, !tbaa !2428
  %468 = add i64 %439, -220
  %469 = add i64 %439, 20
  %470 = load i64, i64* %RSP, align 8, !tbaa !2428
  %471 = add i64 %470, -8
  %472 = inttoptr i64 %471 to i64*
  store i64 %469, i64* %472, align 8
  store i64 %471, i64* %RSP, align 8, !tbaa !2428
  store i64 %468, i64* %PC, align 8, !tbaa !2428
  %473 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %468, %struct.Memory* %2)
  %474 = load i64, i64* %RBP, align 8
  %475 = add i64 %474, -72
  %476 = load i64, i64* %PC, align 8
  store i64 %475, i64* %RDI, align 8, !tbaa !2428
  %477 = load i64, i64* %RAX, align 8
  %478 = add i64 %476, 8
  store i64 %478, i64* %PC, align 8
  %479 = inttoptr i64 %475 to i64*
  store i64 %477, i64* %479, align 8
  %480 = load i64, i64* %PC, align 8
  %481 = add i64 %480, -840
  %482 = add i64 %480, 5
  %483 = load i64, i64* %RSP, align 8, !tbaa !2428
  %484 = add i64 %483, -8
  %485 = inttoptr i64 %484 to i64*
  store i64 %482, i64* %485, align 8
  store i64 %484, i64* %RSP, align 8, !tbaa !2428
  store i64 %481, i64* %PC, align 8, !tbaa !2428
  %486 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %481, %struct.Memory* %2)
  %487 = load i64, i64* %RBP, align 8
  %488 = add i64 %487, -8
  %489 = load i64, i64* %PC, align 8
  store i64 %488, i64* %RDI, align 8, !tbaa !2428
  %490 = add i64 %487, -48
  %491 = add i64 %489, 8
  store i64 %491, i64* %PC, align 8
  %492 = inttoptr i64 %490 to i64*
  %493 = load i64, i64* %492, align 8
  store i64 %493, i64* %RSI, align 8, !tbaa !2428
  %494 = add i64 %487, -144
  %495 = load i64, i64* %RAX, align 8
  %496 = add i64 %489, 15
  store i64 %496, i64* %PC, align 8
  %497 = inttoptr i64 %494 to i64*
  store i64 %495, i64* %497, align 8
  %498 = load i64, i64* %PC, align 8
  %499 = add i64 %498, -268
  %500 = add i64 %498, 5
  %501 = load i64, i64* %RSP, align 8, !tbaa !2428
  %502 = add i64 %501, -8
  %503 = inttoptr i64 %502 to i64*
  store i64 %500, i64* %503, align 8
  store i64 %502, i64* %RSP, align 8, !tbaa !2428
  store i64 %499, i64* %PC, align 8, !tbaa !2428
  %504 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %499, %struct.Memory* %2)
  %505 = load i64, i64* %RBP, align 8
  %506 = add i64 %505, -80
  %507 = load i64, i64* %PC, align 8
  store i64 %506, i64* %RDI, align 8, !tbaa !2428
  %508 = load i64, i64* %RAX, align 8
  %509 = add i64 %507, 8
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %506 to i64*
  store i64 %508, i64* %510, align 8
  %511 = load i64, i64* %PC, align 8
  %512 = add i64 %511, -873
  %513 = add i64 %511, 5
  %514 = load i64, i64* %RSP, align 8, !tbaa !2428
  %515 = add i64 %514, -8
  %516 = inttoptr i64 %515 to i64*
  store i64 %513, i64* %516, align 8
  store i64 %515, i64* %RSP, align 8, !tbaa !2428
  store i64 %512, i64* %PC, align 8, !tbaa !2428
  %517 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %512, %struct.Memory* %2)
  %518 = load i64, i64* %RBP, align 8
  %519 = add i64 %518, -144
  %520 = load i64, i64* %PC, align 8
  %521 = add i64 %520, 7
  store i64 %521, i64* %PC, align 8
  %522 = inttoptr i64 %519 to i64*
  %523 = load i64, i64* %522, align 8
  store i64 %523, i64* %RSI, align 8, !tbaa !2428
  %524 = add i64 %520, 10
  store i64 %524, i64* %PC, align 8
  %525 = inttoptr i64 %523 to i64*
  %526 = load i64, i64* %525, align 8
  store i64 %526, i64* %RDI, align 8, !tbaa !2428
  %527 = load i64*, i64** %99, align 8
  %528 = add i64 %520, 13
  store i64 %528, i64* %PC, align 8
  store i64 %526, i64* %527, align 8
  %529 = load i64, i64* %RBP, align 8
  %530 = add i64 %529, -40
  %531 = load i64, i64* %PC, align 8
  %532 = add i64 %531, 4
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %530 to i64*
  %534 = load i64, i64* %533, align 8
  %535 = add i64 %534, -1
  store i64 %535, i64* %RAX, align 8, !tbaa !2428
  %536 = icmp eq i64 %534, 0
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %13, align 1, !tbaa !2432
  %538 = trunc i64 %535 to i32
  %539 = and i32 %538, 255
  %540 = tail call i32 @llvm.ctpop.i32(i32 %539) #10
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  %543 = xor i8 %542, 1
  store i8 %543, i8* %20, align 1, !tbaa !2446
  %544 = xor i64 %535, %534
  %545 = lshr i64 %544, 4
  %546 = trunc i64 %545 to i8
  %547 = and i8 %546, 1
  store i8 %547, i8* %26, align 1, !tbaa !2447
  %548 = icmp eq i64 %535, 0
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %29, align 1, !tbaa !2448
  %550 = lshr i64 %535, 63
  %551 = trunc i64 %550 to i8
  store i8 %551, i8* %32, align 1, !tbaa !2449
  %552 = lshr i64 %534, 63
  %553 = xor i64 %550, %552
  %554 = add nuw nsw i64 %553, %552
  %555 = icmp eq i64 %554, 2
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %38, align 1, !tbaa !2450
  %557 = add i64 %529, -48
  %558 = add i64 %531, 12
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %557 to i64*
  store i64 %535, i64* %559, align 8
  %560 = load i64, i64* %RBP, align 8
  %561 = add i64 %560, -40
  %562 = load i64, i64* %PC, align 8
  %563 = add i64 %562, 4
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %561 to i64*
  %565 = load i64, i64* %564, align 8
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = add i64 %562, 8
  store i64 %566, i64* %PC, align 8
  %567 = load i64, i64* %564, align 8
  %568 = add i64 %567, %565
  store i64 %568, i64* %RAX, align 8, !tbaa !2428
  %569 = icmp ult i64 %568, %565
  %570 = icmp ult i64 %568, %567
  %571 = or i1 %569, %570
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %13, align 1, !tbaa !2432
  %573 = trunc i64 %568 to i32
  %574 = and i32 %573, 255
  %575 = tail call i32 @llvm.ctpop.i32(i32 %574) #10
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  store i8 %578, i8* %20, align 1, !tbaa !2446
  %579 = xor i64 %567, %565
  %580 = xor i64 %579, %568
  %581 = lshr i64 %580, 4
  %582 = trunc i64 %581 to i8
  %583 = and i8 %582, 1
  store i8 %583, i8* %26, align 1, !tbaa !2447
  %584 = icmp eq i64 %568, 0
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %29, align 1, !tbaa !2448
  %586 = lshr i64 %568, 63
  %587 = trunc i64 %586 to i8
  store i8 %587, i8* %32, align 1, !tbaa !2449
  %588 = lshr i64 %565, 63
  %589 = lshr i64 %567, 63
  %590 = xor i64 %586, %588
  %591 = xor i64 %586, %589
  %592 = add nuw nsw i64 %590, %591
  %593 = icmp eq i64 %592, 2
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %38, align 1, !tbaa !2450
  %595 = add i64 %562, 12
  store i64 %595, i64* %PC, align 8
  store i64 %568, i64* %564, align 8
  %596 = load i64, i64* %PC, align 8
  %597 = add i64 %596, -223
  store i64 %597, i64* %PC, align 8, !tbaa !2428
  br label %block_403344

block_4033ab:                                     ; preds = %block_403352
  %598 = add i64 %314, 17
  store i64 %598, i64* %PC, align 8, !tbaa !2428
  br label %block_4033bc

block_403428:                                     ; preds = %block_403344
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %599 to i8*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %599, i64 0, i32 0
  %600 = add i64 %731, 4
  store i64 %600, i64* %PC, align 8
  %601 = load i64, i64* %698, align 8
  store i64 %601, i64* %RAX, align 8, !tbaa !2428
  %602 = add i64 %731, 8
  store i64 %602, i64* %PC, align 8
  %603 = load i64, i64* %702, align 8
  %604 = sub i64 %601, %603
  %605 = icmp ult i64 %601, %603
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %13, align 1, !tbaa !2432
  %607 = trunc i64 %604 to i32
  %608 = and i32 %607, 255
  %609 = tail call i32 @llvm.ctpop.i32(i32 %608) #10
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  %612 = xor i8 %611, 1
  store i8 %612, i8* %20, align 1, !tbaa !2446
  %613 = xor i64 %603, %601
  %614 = xor i64 %613, %604
  %615 = lshr i64 %614, 4
  %616 = trunc i64 %615 to i8
  %617 = and i8 %616, 1
  store i8 %617, i8* %26, align 1, !tbaa !2447
  %618 = icmp eq i64 %604, 0
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %29, align 1, !tbaa !2448
  %620 = lshr i64 %604, 63
  %621 = trunc i64 %620 to i8
  store i8 %621, i8* %32, align 1, !tbaa !2449
  %622 = lshr i64 %601, 63
  %623 = lshr i64 %603, 63
  %624 = xor i64 %623, %622
  %625 = xor i64 %620, %622
  %626 = add nuw nsw i64 %625, %624
  %627 = icmp eq i64 %626, 2
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %38, align 1, !tbaa !2450
  %.v21 = select i1 %618, i64 14, i64 105
  %629 = add i64 %.v21, %731
  store i64 %629, i64* %PC, align 8, !tbaa !2428
  br i1 %618, label %block_403436, label %block_403491

block_4034fe:                                     ; preds = %block_4034f0
  %630 = add i64 %917, -48
  %631 = add i64 %929, 122
  store i64 %631, i64* %PC, align 8
  %632 = inttoptr i64 %630 to i64*
  %633 = load i64, i64* %632, align 8
  store i64 %633, i64* %RSI, align 8, !tbaa !2428
  %634 = add i64 %929, -542
  %635 = add i64 %929, 127
  %636 = load i64, i64* %RSP, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %635, i64* %638, align 8
  store i64 %637, i64* %RSP, align 8, !tbaa !2428
  store i64 %634, i64* %PC, align 8, !tbaa !2428
  %639 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %634, %struct.Memory* %MEMORY.3)
  %640 = load i64, i64* %RBP, align 8
  %641 = add i64 %640, -128
  %642 = load i64, i64* %PC, align 8
  store i64 %641, i64* %RDI, align 8, !tbaa !2428
  %643 = load i64, i64* %RAX, align 8
  %644 = add i64 %642, 8
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %641 to i64*
  store i64 %643, i64* %645, align 8
  %646 = load i64, i64* %PC, align 8
  %647 = add i64 %646, -1269
  %648 = add i64 %646, 5
  %649 = load i64, i64* %RSP, align 8, !tbaa !2428
  %650 = add i64 %649, -8
  %651 = inttoptr i64 %650 to i64*
  store i64 %648, i64* %651, align 8
  store i64 %650, i64* %RSP, align 8, !tbaa !2428
  store i64 %647, i64* %PC, align 8, !tbaa !2428
  %652 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %647, %struct.Memory* %639)
  %653 = load i64, i64* %RBP, align 8
  %654 = add i64 %653, -16
  %655 = load i64, i64* %PC, align 8
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657, align 8
  store i64 %658, i64* %RSI, align 8, !tbaa !2428
  %659 = load i64*, i64** %99, align 8
  %660 = add i64 %655, 7
  store i64 %660, i64* %PC, align 8
  store i64 %658, i64* %659, align 8
  %661 = load i64, i64* %RSP, align 8
  %662 = load i64, i64* %PC, align 8
  %663 = add i64 %661, 176
  store i64 %663, i64* %RSP, align 8, !tbaa !2428
  %664 = icmp ugt i64 %661, -177
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %13, align 1, !tbaa !2432
  %666 = trunc i64 %663 to i32
  %667 = and i32 %666, 255
  %668 = tail call i32 @llvm.ctpop.i32(i32 %667) #10
  %669 = trunc i32 %668 to i8
  %670 = and i8 %669, 1
  %671 = xor i8 %670, 1
  store i8 %671, i8* %20, align 1, !tbaa !2446
  %672 = xor i64 %661, 16
  %673 = xor i64 %672, %663
  %674 = lshr i64 %673, 4
  %675 = trunc i64 %674 to i8
  %676 = and i8 %675, 1
  store i8 %676, i8* %26, align 1, !tbaa !2447
  %677 = icmp eq i64 %663, 0
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %29, align 1, !tbaa !2448
  %679 = lshr i64 %663, 63
  %680 = trunc i64 %679 to i8
  store i8 %680, i8* %32, align 1, !tbaa !2449
  %681 = lshr i64 %661, 63
  %682 = xor i64 %679, %681
  %683 = add nuw nsw i64 %682, %679
  %684 = icmp eq i64 %683, 2
  %685 = zext i1 %684 to i8
  store i8 %685, i8* %38, align 1, !tbaa !2450
  %686 = add i64 %662, 8
  store i64 %686, i64* %PC, align 8
  %687 = add i64 %661, 184
  %688 = inttoptr i64 %663 to i64*
  %689 = load i64, i64* %688, align 8
  store i64 %689, i64* %RBP, align 8, !tbaa !2428
  store i64 %687, i64* %RSP, align 8, !tbaa !2428
  %690 = add i64 %662, 9
  store i64 %690, i64* %PC, align 8
  %691 = inttoptr i64 %687 to i64*
  %692 = load i64, i64* %691, align 8
  store i64 %692, i64* %PC, align 8, !tbaa !2428
  %693 = add i64 %661, 192
  store i64 %693, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %652

block_403344:                                     ; preds = %block_4033bc, %block_403310
  %694 = phi i64 [ %597, %block_4033bc ], [ %.pre, %block_403310 ]
  %695 = load i64, i64* %RBP, align 8
  %696 = add i64 %695, -40
  %697 = add i64 %694, 4
  store i64 %697, i64* %PC, align 8
  %698 = inttoptr i64 %696 to i64*
  %699 = load i64, i64* %698, align 8
  store i64 %699, i64* %RAX, align 8, !tbaa !2428
  %700 = add i64 %695, -24
  %701 = add i64 %694, 8
  store i64 %701, i64* %PC, align 8
  %702 = inttoptr i64 %700 to i64*
  %703 = load i64, i64* %702, align 8
  %704 = sub i64 %699, %703
  %705 = icmp ult i64 %699, %703
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %13, align 1, !tbaa !2432
  %707 = trunc i64 %704 to i32
  %708 = and i32 %707, 255
  %709 = tail call i32 @llvm.ctpop.i32(i32 %708) #10
  %710 = trunc i32 %709 to i8
  %711 = and i8 %710, 1
  %712 = xor i8 %711, 1
  store i8 %712, i8* %20, align 1, !tbaa !2446
  %713 = xor i64 %703, %699
  %714 = xor i64 %713, %704
  %715 = lshr i64 %714, 4
  %716 = trunc i64 %715 to i8
  %717 = and i8 %716, 1
  store i8 %717, i8* %26, align 1, !tbaa !2447
  %718 = icmp eq i64 %704, 0
  %719 = zext i1 %718 to i8
  store i8 %719, i8* %29, align 1, !tbaa !2448
  %720 = lshr i64 %704, 63
  %721 = trunc i64 %720 to i8
  store i8 %721, i8* %32, align 1, !tbaa !2449
  %722 = lshr i64 %699, 63
  %723 = lshr i64 %703, 63
  %724 = xor i64 %723, %722
  %725 = xor i64 %720, %722
  %726 = add nuw nsw i64 %725, %724
  %727 = icmp eq i64 %726, 2
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %38, align 1, !tbaa !2450
  %729 = icmp ne i8 %721, 0
  %730 = xor i1 %729, %727
  %.v20 = select i1 %730, i64 14, i64 228
  %731 = add i64 %.v20, %694
  store i64 %731, i64* %PC, align 8, !tbaa !2428
  br i1 %730, label %block_403352, label %block_403428

block_403503:                                     ; preds = %block_4034f0
  %732 = add i64 %917, -40
  %733 = add i64 %929, 8
  store i64 %733, i64* %PC, align 8
  %734 = inttoptr i64 %732 to i64*
  %735 = load i64, i64* %734, align 8
  store i64 %735, i64* %RSI, align 8, !tbaa !2428
  %736 = add i64 %929, -547
  %737 = add i64 %929, 13
  %738 = load i64, i64* %RSP, align 8, !tbaa !2428
  %739 = add i64 %738, -8
  %740 = inttoptr i64 %739 to i64*
  store i64 %737, i64* %740, align 8
  store i64 %739, i64* %RSP, align 8, !tbaa !2428
  store i64 %736, i64* %PC, align 8, !tbaa !2428
  %741 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %736, %struct.Memory* %MEMORY.3)
  %742 = load i64, i64* %RBP, align 8
  %743 = add i64 %742, -112
  %744 = load i64, i64* %PC, align 8
  store i64 %743, i64* %RDI, align 8, !tbaa !2428
  %745 = load i64, i64* %RAX, align 8
  %746 = add i64 %744, 8
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %743 to i64*
  store i64 %745, i64* %747, align 8
  %748 = load i64, i64* %PC, align 8
  %749 = add i64 %748, -1160
  %750 = add i64 %748, 5
  %751 = load i64, i64* %RSP, align 8, !tbaa !2428
  %752 = add i64 %751, -8
  %753 = inttoptr i64 %752 to i64*
  store i64 %750, i64* %753, align 8
  store i64 %752, i64* %RSP, align 8, !tbaa !2428
  store i64 %749, i64* %PC, align 8, !tbaa !2428
  %754 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %749, %struct.Memory* %MEMORY.3)
  %755 = load i64, i64* %RBP, align 8
  %756 = add i64 %755, -8
  %757 = load i64, i64* %PC, align 8
  store i64 %756, i64* %RDI, align 8, !tbaa !2428
  %758 = add i64 %755, -48
  %759 = add i64 %757, 8
  store i64 %759, i64* %PC, align 8
  %760 = inttoptr i64 %758 to i64*
  %761 = load i64, i64* %760, align 8
  store i64 %761, i64* %RSI, align 8, !tbaa !2428
  %762 = add i64 %755, -168
  %763 = load i64, i64* %RAX, align 8
  %764 = add i64 %757, 15
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %762 to i64*
  store i64 %763, i64* %765, align 8
  %766 = load i64, i64* %PC, align 8
  %767 = add i64 %766, -588
  %768 = add i64 %766, 5
  %769 = load i64, i64* %RSP, align 8, !tbaa !2428
  %770 = add i64 %769, -8
  %771 = inttoptr i64 %770 to i64*
  store i64 %768, i64* %771, align 8
  store i64 %770, i64* %RSP, align 8, !tbaa !2428
  store i64 %767, i64* %PC, align 8, !tbaa !2428
  %772 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %767, %struct.Memory* %MEMORY.3)
  %773 = load i64, i64* %RBP, align 8
  %774 = add i64 %773, -120
  %775 = load i64, i64* %PC, align 8
  store i64 %774, i64* %RDI, align 8, !tbaa !2428
  %776 = load i64, i64* %RAX, align 8
  %777 = add i64 %775, 8
  store i64 %777, i64* %PC, align 8
  %778 = inttoptr i64 %774 to i64*
  store i64 %776, i64* %778, align 8
  %779 = load i64, i64* %PC, align 8
  %780 = add i64 %779, -1193
  %781 = add i64 %779, 5
  %782 = load i64, i64* %RSP, align 8, !tbaa !2428
  %783 = add i64 %782, -8
  %784 = inttoptr i64 %783 to i64*
  store i64 %781, i64* %784, align 8
  store i64 %783, i64* %RSP, align 8, !tbaa !2428
  store i64 %780, i64* %PC, align 8, !tbaa !2428
  %785 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %780, %struct.Memory* %MEMORY.3)
  %786 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %787 = load i64, i64* %RBP, align 8
  %788 = add i64 %787, -168
  %789 = add i64 %786, 14
  store i64 %789, i64* %PC, align 8
  %790 = inttoptr i64 %788 to i64*
  %791 = load i64, i64* %790, align 8
  store i64 %791, i64* %RDI, align 8, !tbaa !2428
  %792 = add i64 %786, 17
  store i64 %792, i64* %PC, align 8
  %793 = inttoptr i64 %791 to i64*
  %794 = load i64, i64* %793, align 8
  store i64 %794, i64* %RDX, align 8, !tbaa !2428
  %795 = load i64*, i64** %99, align 8
  %796 = add i64 %786, 20
  store i64 %796, i64* %PC, align 8
  store i64 %794, i64* %795, align 8
  %797 = load i64, i64* %RBP, align 8
  %798 = add i64 %797, -40
  %799 = load i64, i64* %PC, align 8
  %800 = add i64 %799, 4
  store i64 %800, i64* %PC, align 8
  %801 = inttoptr i64 %798 to i64*
  %802 = load i64, i64* %801, align 8
  store i64 %802, i64* %RAX, align 8, !tbaa !2428
  %803 = add i64 %797, -48
  %804 = add i64 %799, 8
  store i64 %804, i64* %PC, align 8
  %805 = inttoptr i64 %803 to i64*
  store i64 %802, i64* %805, align 8
  %806 = load i64, i64* %RBP, align 8
  %807 = add i64 %806, -48
  %808 = load i64, i64* %PC, align 8
  %809 = add i64 %808, 4
  store i64 %809, i64* %PC, align 8
  %810 = inttoptr i64 %807 to i64*
  %811 = load i64, i64* %810, align 8
  %812 = add i64 %811, -1
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = icmp eq i64 %811, 0
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %13, align 1, !tbaa !2432
  %815 = trunc i64 %812 to i32
  %816 = and i32 %815, 255
  %817 = tail call i32 @llvm.ctpop.i32(i32 %816) #10
  %818 = trunc i32 %817 to i8
  %819 = and i8 %818, 1
  %820 = xor i8 %819, 1
  store i8 %820, i8* %20, align 1, !tbaa !2446
  %821 = xor i64 %812, %811
  %822 = lshr i64 %821, 4
  %823 = trunc i64 %822 to i8
  %824 = and i8 %823, 1
  store i8 %824, i8* %26, align 1, !tbaa !2447
  %825 = icmp eq i64 %812, 0
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %29, align 1, !tbaa !2448
  %827 = lshr i64 %812, 63
  %828 = trunc i64 %827 to i8
  store i8 %828, i8* %32, align 1, !tbaa !2449
  %829 = lshr i64 %811, 63
  %830 = xor i64 %827, %829
  %831 = add nuw nsw i64 %830, %829
  %832 = icmp eq i64 %831, 2
  %833 = zext i1 %832 to i8
  store i8 %833, i8* %38, align 1, !tbaa !2450
  %834 = ashr i64 %812, 63
  store i64 %834, i64* %RDX, align 8, !tbaa !2428
  %835 = load i64, i64* %RSI, align 8
  %836 = add i64 %808, 13
  store i64 %836, i64* %PC, align 8
  %837 = sext i64 %835 to i128
  %838 = and i128 %837, -18446744073709551616
  %839 = zext i64 %834 to i128
  %840 = shl nuw i128 %839, 64
  %841 = zext i64 %812 to i128
  %842 = or i128 %840, %841
  %843 = zext i64 %835 to i128
  %844 = or i128 %838, %843
  %845 = sdiv i128 %842, %844
  %846 = trunc i128 %845 to i64
  %847 = and i128 %845, 18446744073709551615
  %848 = sext i64 %846 to i128
  %849 = and i128 %848, -18446744073709551616
  %850 = or i128 %849, %847
  %851 = icmp eq i128 %845, %850
  br i1 %851, label %854, label %852

; <label>:852:                                    ; preds = %block_403503
  %853 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %836, %struct.Memory* %MEMORY.3) #13
  %.pre16 = load i64, i64* %RBP, align 8
  %.pre17 = load i64, i64* %RAX, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:854:                                    ; preds = %block_403503
  %855 = srem i128 %842, %844
  %856 = trunc i128 %855 to i64
  store i64 %846, i64* %384, align 8, !tbaa !2428
  store i64 %856, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %854, %852
  %857 = phi i64 [ %.pre18, %852 ], [ %836, %854 ]
  %858 = phi i64 [ %.pre17, %852 ], [ %846, %854 ]
  %859 = phi i64 [ %.pre16, %852 ], [ %806, %854 ]
  %860 = phi %struct.Memory* [ %853, %852 ], [ %MEMORY.3, %854 ]
  %861 = add i64 %859, -40
  %862 = add i64 %857, 4
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i64*
  store i64 %858, i64* %863, align 8
  %864 = load i64, i64* %PC, align 8
  %865 = add i64 %864, -191
  store i64 %865, i64* %PC, align 8, !tbaa !2428
  br label %block_4034ac

block_4034ac:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %866 = phi i64 [ %.pre14, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %865, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.3 = phi %struct.Memory* [ %406, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %860, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %867 = load i64, i64* %RBP, align 8
  %868 = add i64 %867, -48
  %869 = add i64 %866, 8
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i64*
  %871 = load i64, i64* %870, align 8
  store i64 %871, i64* %RDX, align 8, !tbaa !2428
  %872 = add i64 %867, -32
  %873 = add i64 %866, 12
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to i64*
  %875 = load i64, i64* %874, align 8
  %876 = sub i64 %871, %875
  %877 = icmp ult i64 %871, %875
  %878 = zext i1 %877 to i8
  store i8 %878, i8* %13, align 1, !tbaa !2432
  %879 = trunc i64 %876 to i32
  %880 = and i32 %879, 255
  %881 = tail call i32 @llvm.ctpop.i32(i32 %880) #10
  %882 = trunc i32 %881 to i8
  %883 = and i8 %882, 1
  %884 = xor i8 %883, 1
  store i8 %884, i8* %20, align 1, !tbaa !2446
  %885 = xor i64 %875, %871
  %886 = xor i64 %885, %876
  %887 = lshr i64 %886, 4
  %888 = trunc i64 %887 to i8
  %889 = and i8 %888, 1
  store i8 %889, i8* %26, align 1, !tbaa !2447
  %890 = icmp eq i64 %876, 0
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %29, align 1, !tbaa !2448
  %892 = lshr i64 %876, 63
  %893 = trunc i64 %892 to i8
  store i8 %893, i8* %32, align 1, !tbaa !2449
  %894 = lshr i64 %871, 63
  %895 = lshr i64 %875, 63
  %896 = xor i64 %895, %894
  %897 = xor i64 %892, %894
  %898 = add nuw nsw i64 %897, %896
  %899 = icmp eq i64 %898, 2
  %900 = zext i1 %899 to i8
  store i8 %900, i8* %38, align 1, !tbaa !2450
  %901 = add i64 %867, -153
  %902 = add i64 %866, 18
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to i8*
  store i8 0, i8* %903, align 1
  %904 = load i64, i64* %PC, align 8
  %905 = add i64 %904, 50
  %906 = add i64 %904, 6
  %907 = load i8, i8* %29, align 1, !tbaa !2448
  %908 = icmp ne i8 %907, 0
  %909 = load i8, i8* %32, align 1, !tbaa !2449
  %910 = icmp ne i8 %909, 0
  %911 = load i8, i8* %38, align 1, !tbaa !2450
  %912 = icmp ne i8 %911, 0
  %913 = xor i1 %910, %912
  %914 = or i1 %908, %913
  %915 = select i1 %914, i64 %905, i64 %906
  store i64 %915, i64* %PC, align 8, !tbaa !2428
  br i1 %914, label %block_4034f0, label %block_4034c4

block_4034f0:                                     ; preds = %block_4034ac, %block_4034c4
  %916 = phi i64 [ %905, %block_4034ac ], [ %.pre15, %block_4034c4 ]
  %917 = load i64, i64* %RBP, align 8
  %918 = add i64 %917, -153
  %919 = add i64 %916, 6
  store i64 %919, i64* %PC, align 8
  %920 = inttoptr i64 %918 to i8*
  %921 = load i8, i8* %920, align 1
  store i8 %921, i8* %AL, align 1, !tbaa !2453
  %922 = and i8 %921, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %923 = zext i8 %922 to i32
  %924 = tail call i32 @llvm.ctpop.i32(i32 %923) #10
  %925 = trunc i32 %924 to i8
  %926 = xor i8 %925, 1
  store i8 %926, i8* %20, align 1, !tbaa !2446
  %927 = xor i8 %922, 1
  store i8 %927, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %928 = icmp eq i8 %927, 0
  %.v = select i1 %928, i64 19, i64 14
  %929 = add i64 %.v, %916
  store i64 %929, i64* %PC, align 8, !tbaa !2428
  %930 = add i64 %917, -8
  store i64 %930, i64* %RDI, align 8, !tbaa !2428
  br i1 %928, label %block_403503, label %block_4034fe
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404ca0__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404ca0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -16
  %14 = load i64, i64* %RDI, align 8
  %15 = add i64 %12, 7
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %16, align 8
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -16
  %19 = load i64, i64* %RSI, align 8
  %20 = load i64, i64* %PC, align 8
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %22, align 8
  %23 = load i64, i64* %RBP, align 8
  %24 = add i64 %23, -24
  %25 = load i64, i64* %RDX, align 8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %28, align 8
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -32
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %34 = load i64, i64* %33, align 1
  %35 = inttoptr i64 %30 to i64*
  store i64 %34, i64* %35, align 8
  %36 = load i64, i64* %RBP, align 8
  %37 = add i64 %36, -24
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RDX, align 8, !tbaa !2428
  %42 = add i64 %36, -48
  %43 = add i64 %38, 8
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -48
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %46 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %56 = lshr i64 %51, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %60 = shl i64 %51, 1
  %61 = icmp slt i64 %51, 0
  %62 = icmp slt i64 %60, 0
  %63 = xor i1 %61, %62
  store i64 %60, i64* %RDX, align 8, !tbaa !2428
  store i8 %57, i8* %52, align 1, !tbaa !2453
  %64 = trunc i64 %60 to i32
  %65 = and i32 %64, 254
  %66 = tail call i32 @llvm.ctpop.i32(i32 %65) #10
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  store i8 %69, i8* %53, align 1, !tbaa !2453
  store i8 0, i8* %54, align 1, !tbaa !2453
  %70 = icmp eq i64 %60, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %55, align 1, !tbaa !2453
  %72 = lshr i64 %51, 62
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %58, align 1, !tbaa !2453
  %75 = zext i1 %63 to i8
  store i8 %75, i8* %59, align 1, !tbaa !2453
  %76 = add i64 %45, -40
  %77 = add i64 %47, 16
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  store i64 %60, i64* %78, align 8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %80 = bitcast i64* %79 to double*
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %83 = bitcast i64* %82 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404ccd

block_404dde:                                     ; preds = %block_404dce
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %84 = add i64 %498, -16
  %85 = add i64 %510, 11
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %RDX, align 8, !tbaa !2428
  %88 = add i64 %498, -40
  %89 = add i64 %510, 15
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RSI, align 8, !tbaa !2428
  %92 = shl i64 %91, 3
  %93 = add i64 %92, %87
  %94 = add i64 %510, 20
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %33, align 1, !tbaa !2451
  store double 0.000000e+00, double* %80, align 1, !tbaa !2451
  %97 = add i64 %510, 24
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %86, align 8
  store i64 %98, i64* %RDX, align 8, !tbaa !2428
  %99 = add i64 %498, -48
  %100 = add i64 %510, 28
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %103 = shl i64 %102, 3
  %104 = add i64 %103, %98
  %105 = add i64 %510, 33
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i64*
  store i64 %96, i64* %106, align 8
  %107 = load i64, i64* %RBP, align 8
  %108 = add i64 %107, -40
  %109 = load i64, i64* %PC, align 8
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %108 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RDX, align 8, !tbaa !2428
  %113 = add i64 %107, -48
  %114 = add i64 %109, 8
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %113 to i64*
  store i64 %112, i64* %115, align 8
  %116 = load i64, i64* %RBP, align 8
  %117 = add i64 %116, -48
  %118 = load i64, i64* %PC, align 8
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = add i64 %121, -1
  %123 = icmp eq i64 %121, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %52, align 1, !tbaa !2432
  %125 = trunc i64 %122 to i32
  %126 = and i32 %125, 255
  %127 = tail call i32 @llvm.ctpop.i32(i32 %126) #10
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  store i8 %130, i8* %53, align 1, !tbaa !2446
  %131 = xor i64 %122, %121
  %132 = lshr i64 %131, 4
  %133 = trunc i64 %132 to i8
  %134 = and i8 %133, 1
  store i8 %134, i8* %54, align 1, !tbaa !2447
  %135 = icmp eq i64 %122, 0
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %55, align 1, !tbaa !2448
  %137 = lshr i64 %122, 63
  %138 = trunc i64 %137 to i8
  store i8 %138, i8* %58, align 1, !tbaa !2449
  %139 = lshr i64 %121, 63
  %140 = xor i64 %137, %139
  %141 = add nuw nsw i64 %140, %139
  %142 = icmp eq i64 %141, 2
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %59, align 1, !tbaa !2450
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %144 = ashr i64 %122, 63
  store i64 %144, i64* %680, align 8, !tbaa !2428
  %145 = load i64, i64* %RCX, align 8
  %146 = add i64 %118, 16
  store i64 %146, i64* %PC, align 8
  %147 = sext i64 %145 to i128
  %148 = and i128 %147, -18446744073709551616
  %149 = zext i64 %144 to i128
  %150 = shl nuw i128 %149, 64
  %151 = zext i64 %122 to i128
  %152 = or i128 %150, %151
  %153 = zext i64 %145 to i128
  %154 = or i128 %148, %153
  %155 = sdiv i128 %152, %154
  %156 = trunc i128 %155 to i64
  %157 = and i128 %155, 18446744073709551615
  %158 = sext i64 %156 to i128
  %159 = and i128 %158, -18446744073709551616
  %160 = or i128 %159, %157
  %161 = icmp eq i128 %155, %160
  br i1 %161, label %164, label %162

; <label>:162:                                    ; preds = %block_404dde
  %163 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %146, %struct.Memory* %MEMORY.2) #13
  %.pre20 = load i64, i64* %RBP, align 8
  %.pre21 = load i64, i64* %RAX, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

; <label>:164:                                    ; preds = %block_404dde
  %165 = srem i128 %152, %154
  %166 = trunc i128 %165 to i64
  store i64 %156, i64* %681, align 8, !tbaa !2428
  store i64 %166, i64* %680, align 8, !tbaa !2428
  store i8 0, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2446
  store i8 0, i8* %54, align 1, !tbaa !2447
  store i8 0, i8* %55, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %59, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2: ; preds = %164, %162
  %167 = phi i64 [ %.pre22, %162 ], [ %146, %164 ]
  %168 = phi i64 [ %.pre21, %162 ], [ %156, %164 ]
  %169 = phi i64 [ %.pre20, %162 ], [ %116, %164 ]
  %170 = phi %struct.Memory* [ %163, %162 ], [ %MEMORY.2, %164 ]
  %171 = add i64 %169, -40
  %172 = add i64 %167, 4
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to i64*
  store i64 %168, i64* %173, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, -126
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  br label %block_404d9d

block_404d9d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2
  %176 = phi i64 [ %.pre15, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %175, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ]
  %MEMORY.0 = phi %struct.Memory* [ %703, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %170, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %52, align 1, !tbaa !2432
  store i8 1, i8* %53, align 1, !tbaa !2446
  store i8 1, i8* %55, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %59, align 1, !tbaa !2450
  store i8 0, i8* %54, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -48
  %179 = add i64 %176, 8
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %RDX, align 8, !tbaa !2428
  %182 = add i64 %177, -24
  %183 = add i64 %176, 12
  store i64 %183, i64* %PC, align 8
  %184 = inttoptr i64 %182 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = sub i64 %181, %185
  %187 = icmp ult i64 %181, %185
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %52, align 1, !tbaa !2432
  %189 = trunc i64 %186 to i32
  %190 = and i32 %189, 255
  %191 = tail call i32 @llvm.ctpop.i32(i32 %190) #10
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = xor i8 %193, 1
  store i8 %194, i8* %53, align 1, !tbaa !2446
  %195 = xor i64 %185, %181
  %196 = xor i64 %195, %186
  %197 = lshr i64 %196, 4
  %198 = trunc i64 %197 to i8
  %199 = and i8 %198, 1
  store i8 %199, i8* %54, align 1, !tbaa !2447
  %200 = icmp eq i64 %186, 0
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %55, align 1, !tbaa !2448
  %202 = lshr i64 %186, 63
  %203 = trunc i64 %202 to i8
  store i8 %203, i8* %58, align 1, !tbaa !2449
  %204 = lshr i64 %181, 63
  %205 = lshr i64 %185, 63
  %206 = xor i64 %205, %204
  %207 = xor i64 %202, %204
  %208 = add nuw nsw i64 %207, %206
  %209 = icmp eq i64 %208, 2
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %59, align 1, !tbaa !2450
  %211 = add i64 %177, -49
  %212 = add i64 %176, 15
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to i8*
  store i8 0, i8* %213, align 1
  %214 = load i64, i64* %PC, align 8
  %215 = add i64 %214, 34
  %216 = add i64 %214, 6
  %217 = load i8, i8* %55, align 1, !tbaa !2448
  %218 = icmp ne i8 %217, 0
  %219 = load i8, i8* %58, align 1, !tbaa !2449
  %220 = icmp ne i8 %219, 0
  %221 = load i8, i8* %59, align 1, !tbaa !2450
  %222 = icmp ne i8 %221, 0
  %223 = xor i1 %220, %222
  %224 = or i1 %218, %223
  %225 = select i1 %224, i64 %215, i64 %216
  store i64 %225, i64* %PC, align 8, !tbaa !2428
  br i1 %224, label %block_404dce, label %block_404db2

block_404cdb:                                     ; preds = %block_404ccd
  %226 = add i64 %512, -16
  %227 = add i64 %548, 4
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i64*
  %229 = load i64, i64* %228, align 8
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = add i64 %548, 8
  store i64 %230, i64* %PC, align 8
  %231 = load i64, i64* %515, align 8
  %232 = add i64 %231, -1
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = icmp eq i64 %231, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %52, align 1, !tbaa !2432
  %235 = trunc i64 %232 to i32
  %236 = and i32 %235, 255
  %237 = tail call i32 @llvm.ctpop.i32(i32 %236) #10
  %238 = trunc i32 %237 to i8
  %239 = and i8 %238, 1
  %240 = xor i8 %239, 1
  store i8 %240, i8* %53, align 1, !tbaa !2446
  %241 = xor i64 %232, %231
  %242 = lshr i64 %241, 4
  %243 = trunc i64 %242 to i8
  %244 = and i8 %243, 1
  store i8 %244, i8* %54, align 1, !tbaa !2447
  %245 = icmp eq i64 %232, 0
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %55, align 1, !tbaa !2448
  %247 = lshr i64 %232, 63
  %248 = trunc i64 %247 to i8
  store i8 %248, i8* %58, align 1, !tbaa !2449
  %249 = lshr i64 %231, 63
  %250 = xor i64 %247, %249
  %251 = add nuw nsw i64 %250, %249
  %252 = icmp eq i64 %251, 2
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %59, align 1, !tbaa !2450
  %254 = shl i64 %232, 3
  %255 = add i64 %254, %229
  %256 = add i64 %548, 17
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %255 to i64*
  %258 = load i64, i64* %257, align 8
  store i64 %258, i64* %33, align 1, !tbaa !2451
  store double 0.000000e+00, double* %80, align 1, !tbaa !2451
  %259 = add i64 %548, 21
  store i64 %259, i64* %PC, align 8
  %260 = load i64, i64* %228, align 8
  store i64 %260, i64* %RAX, align 8, !tbaa !2428
  %261 = add i64 %548, 25
  store i64 %261, i64* %PC, align 8
  %262 = load i64, i64* %515, align 8
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = shl i64 %262, 3
  %264 = add i64 %263, %260
  %265 = add i64 %548, 30
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i64*
  %267 = load i64, i64* %266, align 8
  store i64 %267, i64* %81, align 1, !tbaa !2451
  store double 0.000000e+00, double* %83, align 1, !tbaa !2451
  %268 = add i64 %548, 34
  store i64 %268, i64* %PC, align 8
  %.cast7 = bitcast i64 %267 to double
  %269 = bitcast i64 %258 to double
  %270 = fcmp uno double %.cast7, %269
  br i1 %270, label %271, label %281

; <label>:271:                                    ; preds = %block_404cdb
  %272 = fadd double %269, %.cast7
  %273 = bitcast double %272 to i64
  %274 = and i64 %273, 9221120237041090560
  %275 = icmp eq i64 %274, 9218868437227405312
  %276 = and i64 %273, 2251799813685247
  %277 = icmp ne i64 %276, 0
  %278 = and i1 %275, %277
  br i1 %278, label %279, label %287

; <label>:279:                                    ; preds = %271
  %280 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %268, %struct.Memory* %MEMORY.3) #13
  %.pre23 = load i64, i64* %PC, align 8
  %.pre24 = load i8, i8* %52, align 1, !tbaa !2432
  %.pre25 = load i8, i8* %55, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:281:                                    ; preds = %block_404cdb
  %282 = fcmp ogt double %.cast7, %269
  br i1 %282, label %287, label %283

; <label>:283:                                    ; preds = %281
  %284 = fcmp olt double %.cast7, %269
  br i1 %284, label %287, label %285

; <label>:285:                                    ; preds = %283
  %286 = fcmp oeq double %.cast7, %269
  br i1 %286, label %287, label %291

; <label>:287:                                    ; preds = %285, %283, %281, %271
  %288 = phi i8 [ 0, %281 ], [ 0, %283 ], [ 1, %285 ], [ 1, %271 ]
  %289 = phi i8 [ 0, %281 ], [ 0, %283 ], [ 0, %285 ], [ 1, %271 ]
  %290 = phi i8 [ 0, %281 ], [ 1, %283 ], [ 0, %285 ], [ 1, %271 ]
  store i8 %288, i8* %55, align 1, !tbaa !2453
  store i8 %289, i8* %53, align 1, !tbaa !2453
  store i8 %290, i8* %52, align 1, !tbaa !2453
  br label %291

; <label>:291:                                    ; preds = %287, %285
  %292 = phi i8 [ %288, %287 ], [ %246, %285 ]
  %293 = phi i8 [ %290, %287 ], [ %234, %285 ]
  store i8 0, i8* %59, align 1, !tbaa !2453
  store i8 0, i8* %58, align 1, !tbaa !2453
  store i8 0, i8* %54, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %291, %279
  %294 = phi i8 [ %.pre25, %279 ], [ %292, %291 ]
  %295 = phi i8 [ %.pre24, %279 ], [ %293, %291 ]
  %296 = phi i64 [ %.pre23, %279 ], [ %268, %291 ]
  %297 = phi %struct.Memory* [ %280, %279 ], [ %MEMORY.3, %291 ]
  %298 = or i8 %295, %294
  %299 = icmp ne i8 %298, 0
  %.v29 = select i1 %299, i64 18, i64 6
  %300 = add i64 %.v29, %296
  store i64 %300, i64* %PC, align 8, !tbaa !2428
  br i1 %299, label %block_404d0f, label %block_404d03

block_404dd9:                                     ; preds = %block_404dce
  %301 = add i64 %498, -32
  %302 = add i64 %510, 76
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %301 to i64*
  %304 = load i64, i64* %303, align 8
  store i64 %304, i64* %33, align 1, !tbaa !2451
  store double 0.000000e+00, double* %80, align 1, !tbaa !2451
  %305 = add i64 %498, -16
  %306 = add i64 %510, 80
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to i64*
  %308 = load i64, i64* %307, align 8
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = add i64 %498, -48
  %310 = add i64 %510, 84
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %309 to i64*
  %312 = load i64, i64* %311, align 8
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = shl i64 %312, 3
  %314 = add i64 %313, %308
  %315 = add i64 %510, 89
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to i64*
  store i64 %304, i64* %316, align 8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 1
  store i64 %318, i64* %PC, align 8
  %319 = load i64, i64* %8, align 8, !tbaa !2428
  %320 = add i64 %319, 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RBP, align 8, !tbaa !2428
  store i64 %320, i64* %8, align 8, !tbaa !2428
  %323 = add i64 %317, 2
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %320 to i64*
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %PC, align 8, !tbaa !2428
  %326 = add i64 %319, 16
  store i64 %326, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_404db2:                                     ; preds = %block_404d9d
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -16
  %329 = add i64 %225, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = add i64 %327, -40
  %333 = add i64 %225, 8
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334, align 8
  store i64 %335, i64* %RCX, align 8, !tbaa !2428
  %336 = shl i64 %335, 3
  %337 = add i64 %336, %331
  %338 = add i64 %225, 13
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i64*
  %340 = load i64, i64* %339, align 8
  store i64 %340, i64* %33, align 1, !tbaa !2451
  store double 0.000000e+00, double* %80, align 1, !tbaa !2451
  %341 = add i64 %327, -32
  %342 = add i64 %225, 18
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i64*
  %344 = load i64, i64* %343, align 8
  store i64 %344, i64* %81, align 1, !tbaa !2451
  store double 0.000000e+00, double* %83, align 1, !tbaa !2451
  %345 = add i64 %225, 22
  store i64 %345, i64* %PC, align 8
  %.cast = bitcast i64 %344 to double
  %346 = bitcast i64 %340 to double
  %347 = fcmp uno double %.cast, %346
  br i1 %347, label %348, label %358

; <label>:348:                                    ; preds = %block_404db2
  %349 = fadd double %346, %.cast
  %350 = bitcast double %349 to i64
  %351 = and i64 %350, 9221120237041090560
  %352 = icmp eq i64 %351, 9218868437227405312
  %353 = and i64 %350, 2251799813685247
  %354 = icmp ne i64 %353, 0
  %355 = and i1 %352, %354
  br i1 %355, label %356, label %364

; <label>:356:                                    ; preds = %348
  %357 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %345, %struct.Memory* %MEMORY.0) #13
  %.pre16 = load i64, i64* %PC, align 8
  %.pre17 = load i8, i8* %55, align 1, !tbaa !2448
  %.pre18 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:358:                                    ; preds = %block_404db2
  %359 = fcmp ogt double %.cast, %346
  br i1 %359, label %364, label %360

; <label>:360:                                    ; preds = %358
  %361 = fcmp olt double %.cast, %346
  br i1 %361, label %364, label %362

; <label>:362:                                    ; preds = %360
  %363 = fcmp oeq double %.cast, %346
  br i1 %363, label %364, label %368

; <label>:364:                                    ; preds = %362, %360, %358, %348
  %365 = phi i8 [ 0, %358 ], [ 0, %360 ], [ 1, %362 ], [ 1, %348 ]
  %366 = phi i8 [ 0, %358 ], [ 0, %360 ], [ 0, %362 ], [ 1, %348 ]
  %367 = phi i8 [ 0, %358 ], [ 1, %360 ], [ 0, %362 ], [ 1, %348 ]
  store i8 %365, i8* %55, align 1, !tbaa !2453
  store i8 %366, i8* %53, align 1, !tbaa !2453
  store i8 %367, i8* %52, align 1, !tbaa !2453
  br label %368

; <label>:368:                                    ; preds = %364, %362
  %369 = phi i8 [ %365, %364 ], [ 0, %362 ]
  store i8 0, i8* %59, align 1, !tbaa !2453
  store i8 0, i8* %58, align 1, !tbaa !2453
  store i8 0, i8* %54, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %368, %356
  %370 = phi i64 [ %.pre18, %356 ], [ %327, %368 ]
  %371 = phi i8 [ %.pre17, %356 ], [ %369, %368 ]
  %372 = phi i64 [ %.pre16, %356 ], [ %345, %368 ]
  %373 = phi %struct.Memory* [ %357, %356 ], [ %MEMORY.0, %368 ]
  %374 = load i8, i8* %52, align 1, !tbaa !2432
  %375 = or i8 %374, %371
  %376 = icmp eq i8 %375, 0
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %DL, align 1, !tbaa !2453
  %378 = add i64 %370, -49
  %379 = add i64 %372, 6
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %378 to i8*
  store i8 %377, i8* %380, align 1
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_404dce

block_404d0f:                                     ; preds = %block_404d03, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %381 = phi i64 [ %.pre26, %block_404d03 ], [ %300, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %382 = load i64, i64* %RBP, align 8
  %383 = add i64 %382, -16
  %384 = add i64 %381, 4
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %383 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %382, -40
  %388 = add i64 %381, 8
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  %390 = load i64, i64* %389, align 8
  %391 = add i64 %390, -1
  store i64 %391, i64* %RCX, align 8, !tbaa !2428
  %392 = icmp eq i64 %390, 0
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %52, align 1, !tbaa !2432
  %394 = trunc i64 %391 to i32
  %395 = and i32 %394, 255
  %396 = tail call i32 @llvm.ctpop.i32(i32 %395) #10
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  store i8 %399, i8* %53, align 1, !tbaa !2446
  %400 = xor i64 %391, %390
  %401 = lshr i64 %400, 4
  %402 = trunc i64 %401 to i8
  %403 = and i8 %402, 1
  store i8 %403, i8* %54, align 1, !tbaa !2447
  %404 = icmp eq i64 %391, 0
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %55, align 1, !tbaa !2448
  %406 = lshr i64 %391, 63
  %407 = trunc i64 %406 to i8
  store i8 %407, i8* %58, align 1, !tbaa !2449
  %408 = lshr i64 %390, 63
  %409 = xor i64 %406, %408
  %410 = add nuw nsw i64 %409, %408
  %411 = icmp eq i64 %410, 2
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %59, align 1, !tbaa !2450
  %413 = shl i64 %391, 3
  %414 = add i64 %413, %386
  %415 = add i64 %381, 17
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i64*
  %417 = load i64, i64* %416, align 8
  store i64 %417, i64* %33, align 1, !tbaa !2451
  store double 0.000000e+00, double* %80, align 1, !tbaa !2451
  %418 = add i64 %381, 21
  store i64 %418, i64* %PC, align 8
  %419 = load i64, i64* %385, align 8
  store i64 %419, i64* %RAX, align 8, !tbaa !2428
  %420 = add i64 %382, -48
  %421 = add i64 %381, 25
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %420 to i64*
  %423 = load i64, i64* %422, align 8
  store i64 %423, i64* %RCX, align 8, !tbaa !2428
  %424 = shl i64 %423, 3
  %425 = add i64 %424, %419
  %426 = add i64 %381, 30
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to i64*
  store i64 %417, i64* %427, align 8
  %428 = load i64, i64* %RBP, align 8
  %429 = add i64 %428, -40
  %430 = load i64, i64* %PC, align 8
  %431 = add i64 %430, 4
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %429 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = add i64 %433, -1
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = icmp eq i64 %433, 0
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %52, align 1, !tbaa !2432
  %437 = trunc i64 %434 to i32
  %438 = and i32 %437, 255
  %439 = tail call i32 @llvm.ctpop.i32(i32 %438) #10
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  %442 = xor i8 %441, 1
  store i8 %442, i8* %53, align 1, !tbaa !2446
  %443 = xor i64 %434, %433
  %444 = lshr i64 %443, 4
  %445 = trunc i64 %444 to i8
  %446 = and i8 %445, 1
  store i8 %446, i8* %54, align 1, !tbaa !2447
  %447 = icmp eq i64 %434, 0
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %55, align 1, !tbaa !2448
  %449 = lshr i64 %434, 63
  %450 = trunc i64 %449 to i8
  store i8 %450, i8* %58, align 1, !tbaa !2449
  %451 = lshr i64 %433, 63
  %452 = xor i64 %449, %451
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %59, align 1, !tbaa !2450
  %456 = add i64 %428, -48
  %457 = add i64 %430, 12
  store i64 %457, i64* %PC, align 8
  %458 = inttoptr i64 %456 to i64*
  store i64 %434, i64* %458, align 8
  %459 = load i64, i64* %RBP, align 8
  %460 = add i64 %459, -40
  %461 = load i64, i64* %PC, align 8
  %462 = add i64 %461, 4
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %460 to i64*
  %464 = load i64, i64* %463, align 8
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = add i64 %461, 8
  store i64 %465, i64* %PC, align 8
  %466 = load i64, i64* %463, align 8
  %467 = add i64 %466, %464
  store i64 %467, i64* %RAX, align 8, !tbaa !2428
  %468 = icmp ult i64 %467, %464
  %469 = icmp ult i64 %467, %466
  %470 = or i1 %468, %469
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %52, align 1, !tbaa !2432
  %472 = trunc i64 %467 to i32
  %473 = and i32 %472, 255
  %474 = tail call i32 @llvm.ctpop.i32(i32 %473) #10
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = xor i8 %476, 1
  store i8 %477, i8* %53, align 1, !tbaa !2446
  %478 = xor i64 %466, %464
  %479 = xor i64 %478, %467
  %480 = lshr i64 %479, 4
  %481 = trunc i64 %480 to i8
  %482 = and i8 %481, 1
  store i8 %482, i8* %54, align 1, !tbaa !2447
  %483 = icmp eq i64 %467, 0
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %55, align 1, !tbaa !2448
  %485 = lshr i64 %467, 63
  %486 = trunc i64 %485 to i8
  store i8 %486, i8* %58, align 1, !tbaa !2449
  %487 = lshr i64 %464, 63
  %488 = lshr i64 %466, 63
  %489 = xor i64 %485, %487
  %490 = xor i64 %485, %488
  %491 = add nuw nsw i64 %489, %490
  %492 = icmp eq i64 %491, 2
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %59, align 1, !tbaa !2450
  %494 = add i64 %461, 12
  store i64 %494, i64* %PC, align 8
  store i64 %467, i64* %463, align 8
  %495 = load i64, i64* %PC, align 8
  %496 = add i64 %495, -120
  store i64 %496, i64* %PC, align 8, !tbaa !2428
  br label %block_404ccd

block_404dce:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_404d9d
  %497 = phi i64 [ %215, %block_404d9d ], [ %.pre19, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_404d9d ], [ %373, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -49
  %500 = add i64 %497, 3
  store i64 %500, i64* %PC, align 8
  %501 = inttoptr i64 %499 to i8*
  %502 = load i8, i8* %501, align 1
  store i8 %502, i8* %AL, align 1, !tbaa !2453
  %503 = and i8 %502, 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %504 = zext i8 %503 to i32
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #10
  %506 = trunc i32 %505 to i8
  %507 = xor i8 %506, 1
  store i8 %507, i8* %53, align 1, !tbaa !2446
  %508 = xor i8 %503, 1
  store i8 %508, i8* %55, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %59, align 1, !tbaa !2450
  store i8 0, i8* %54, align 1, !tbaa !2447
  %509 = icmp eq i8 %508, 0
  %.v = select i1 %509, i64 16, i64 11
  %510 = add i64 %.v, %497
  store i64 %510, i64* %PC, align 8, !tbaa !2428
  br i1 %509, label %block_404dde, label %block_404dd9

block_404ccd:                                     ; preds = %block_404d0f, %block_404ca0
  %511 = phi i64 [ %.pre, %block_404ca0 ], [ %496, %block_404d0f ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_404ca0 ], [ %297, %block_404d0f ]
  %512 = load i64, i64* %RBP, align 8
  %513 = add i64 %512, -40
  %514 = add i64 %511, 4
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to i64*
  %516 = load i64, i64* %515, align 8
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = add i64 %512, -8
  %518 = add i64 %511, 8
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %517 to i64*
  %520 = load i64, i64* %519, align 8
  %521 = sub i64 %516, %520
  %522 = icmp ult i64 %516, %520
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %52, align 1, !tbaa !2432
  %524 = trunc i64 %521 to i32
  %525 = and i32 %524, 255
  %526 = tail call i32 @llvm.ctpop.i32(i32 %525) #10
  %527 = trunc i32 %526 to i8
  %528 = and i8 %527, 1
  %529 = xor i8 %528, 1
  store i8 %529, i8* %53, align 1, !tbaa !2446
  %530 = xor i64 %520, %516
  %531 = xor i64 %530, %521
  %532 = lshr i64 %531, 4
  %533 = trunc i64 %532 to i8
  %534 = and i8 %533, 1
  store i8 %534, i8* %54, align 1, !tbaa !2447
  %535 = icmp eq i64 %521, 0
  %536 = zext i1 %535 to i8
  store i8 %536, i8* %55, align 1, !tbaa !2448
  %537 = lshr i64 %521, 63
  %538 = trunc i64 %537 to i8
  store i8 %538, i8* %58, align 1, !tbaa !2449
  %539 = lshr i64 %516, 63
  %540 = lshr i64 %520, 63
  %541 = xor i64 %540, %539
  %542 = xor i64 %537, %539
  %543 = add nuw nsw i64 %542, %541
  %544 = icmp eq i64 %543, 2
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %59, align 1, !tbaa !2450
  %546 = icmp ne i8 %538, 0
  %547 = xor i1 %546, %544
  %.v27 = select i1 %547, i64 14, i64 125
  %548 = add i64 %.v27, %511
  store i64 %548, i64* %PC, align 8, !tbaa !2428
  br i1 %547, label %block_404cdb, label %block_404d4a

block_404d58:                                     ; preds = %block_404d4a
  %549 = add i64 %512, -16
  %550 = add i64 %736, 4
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i64*
  %552 = load i64, i64* %551, align 8
  store i64 %552, i64* %RAX, align 8, !tbaa !2428
  %553 = add i64 %736, 8
  store i64 %553, i64* %PC, align 8
  %554 = load i64, i64* %515, align 8
  %555 = add i64 %554, -1
  store i64 %555, i64* %RCX, align 8, !tbaa !2428
  %556 = icmp eq i64 %554, 0
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %52, align 1, !tbaa !2432
  %558 = trunc i64 %555 to i32
  %559 = and i32 %558, 255
  %560 = tail call i32 @llvm.ctpop.i32(i32 %559) #10
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = xor i8 %562, 1
  store i8 %563, i8* %53, align 1, !tbaa !2446
  %564 = xor i64 %555, %554
  %565 = lshr i64 %564, 4
  %566 = trunc i64 %565 to i8
  %567 = and i8 %566, 1
  store i8 %567, i8* %54, align 1, !tbaa !2447
  %568 = icmp eq i64 %555, 0
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %55, align 1, !tbaa !2448
  %570 = lshr i64 %555, 63
  %571 = trunc i64 %570 to i8
  store i8 %571, i8* %58, align 1, !tbaa !2449
  %572 = lshr i64 %554, 63
  %573 = xor i64 %570, %572
  %574 = add nuw nsw i64 %573, %572
  %575 = icmp eq i64 %574, 2
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %59, align 1, !tbaa !2450
  %577 = shl i64 %555, 3
  %578 = add i64 %577, %552
  %579 = add i64 %736, 17
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i64*
  %581 = load i64, i64* %580, align 8
  store i64 %581, i64* %33, align 1, !tbaa !2451
  store double 0.000000e+00, double* %80, align 1, !tbaa !2451
  %582 = add i64 %736, 21
  store i64 %582, i64* %PC, align 8
  %583 = load i64, i64* %551, align 8
  store i64 %583, i64* %RAX, align 8, !tbaa !2428
  %584 = add i64 %512, -48
  %585 = add i64 %736, 25
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i64*
  %587 = load i64, i64* %586, align 8
  store i64 %587, i64* %RCX, align 8, !tbaa !2428
  %588 = shl i64 %587, 3
  %589 = add i64 %588, %583
  %590 = add i64 %736, 30
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %589 to i64*
  store i64 %581, i64* %591, align 8
  %592 = load i64, i64* %RBP, align 8
  %593 = add i64 %592, -40
  %594 = load i64, i64* %PC, align 8
  %595 = add i64 %594, 4
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %593 to i64*
  %597 = load i64, i64* %596, align 8
  %598 = add i64 %597, -1
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = icmp eq i64 %597, 0
  %600 = zext i1 %599 to i8
  store i8 %600, i8* %52, align 1, !tbaa !2432
  %601 = trunc i64 %598 to i32
  %602 = and i32 %601, 255
  %603 = tail call i32 @llvm.ctpop.i32(i32 %602) #10
  %604 = trunc i32 %603 to i8
  %605 = and i8 %604, 1
  %606 = xor i8 %605, 1
  store i8 %606, i8* %53, align 1, !tbaa !2446
  %607 = xor i64 %598, %597
  %608 = lshr i64 %607, 4
  %609 = trunc i64 %608 to i8
  %610 = and i8 %609, 1
  store i8 %610, i8* %54, align 1, !tbaa !2447
  %611 = icmp eq i64 %598, 0
  %612 = zext i1 %611 to i8
  store i8 %612, i8* %55, align 1, !tbaa !2448
  %613 = lshr i64 %598, 63
  %614 = trunc i64 %613 to i8
  store i8 %614, i8* %58, align 1, !tbaa !2449
  %615 = lshr i64 %597, 63
  %616 = xor i64 %613, %615
  %617 = add nuw nsw i64 %616, %615
  %618 = icmp eq i64 %617, 2
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %59, align 1, !tbaa !2450
  %620 = add i64 %592, -48
  %621 = add i64 %594, 12
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %620 to i64*
  store i64 %598, i64* %622, align 8
  %.pre10 = load i64, i64* %PC, align 8
  %.pre11 = load i64, i64* %RBP, align 8
  br label %block_404d82

block_404d03:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %623 = load i64, i64* %RBP, align 8
  %624 = add i64 %623, -40
  %625 = add i64 %300, 4
  store i64 %625, i64* %PC, align 8
  %626 = inttoptr i64 %624 to i64*
  %627 = load i64, i64* %626, align 8
  %628 = add i64 %627, 1
  store i64 %628, i64* %RAX, align 8, !tbaa !2428
  %629 = icmp eq i64 %627, -1
  %630 = icmp eq i64 %628, 0
  %631 = or i1 %629, %630
  %632 = zext i1 %631 to i8
  store i8 %632, i8* %52, align 1, !tbaa !2432
  %633 = trunc i64 %628 to i32
  %634 = and i32 %633, 255
  %635 = tail call i32 @llvm.ctpop.i32(i32 %634) #10
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = xor i8 %637, 1
  store i8 %638, i8* %53, align 1, !tbaa !2446
  %639 = xor i64 %628, %627
  %640 = lshr i64 %639, 4
  %641 = trunc i64 %640 to i8
  %642 = and i8 %641, 1
  store i8 %642, i8* %54, align 1, !tbaa !2447
  %643 = zext i1 %630 to i8
  store i8 %643, i8* %55, align 1, !tbaa !2448
  %644 = lshr i64 %628, 63
  %645 = trunc i64 %644 to i8
  store i8 %645, i8* %58, align 1, !tbaa !2449
  %646 = lshr i64 %627, 63
  %647 = xor i64 %644, %646
  %648 = add nuw nsw i64 %647, %644
  %649 = icmp eq i64 %648, 2
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %59, align 1, !tbaa !2450
  %651 = add i64 %300, 12
  store i64 %651, i64* %PC, align 8
  store i64 %628, i64* %626, align 8
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_404d0f

block_404d82:                                     ; preds = %block_404d4a, %block_404d58
  %652 = phi i64 [ %512, %block_404d4a ], [ %.pre11, %block_404d58 ]
  %653 = phi i64 [ %736, %block_404d4a ], [ %.pre10, %block_404d58 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %654 = add i64 %652, -48
  %655 = add i64 %653, 11
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %654 to i64*
  %657 = load i64, i64* %656, align 8
  %658 = add i64 %657, -1
  %659 = icmp eq i64 %657, 0
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %52, align 1, !tbaa !2432
  %661 = trunc i64 %658 to i32
  %662 = and i32 %661, 255
  %663 = tail call i32 @llvm.ctpop.i32(i32 %662) #10
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = xor i8 %665, 1
  store i8 %666, i8* %53, align 1, !tbaa !2446
  %667 = xor i64 %658, %657
  %668 = lshr i64 %667, 4
  %669 = trunc i64 %668 to i8
  %670 = and i8 %669, 1
  store i8 %670, i8* %54, align 1, !tbaa !2447
  %671 = icmp eq i64 %658, 0
  %672 = zext i1 %671 to i8
  store i8 %672, i8* %55, align 1, !tbaa !2448
  %673 = lshr i64 %658, 63
  %674 = trunc i64 %673 to i8
  store i8 %674, i8* %58, align 1, !tbaa !2449
  %675 = lshr i64 %657, 63
  %676 = xor i64 %673, %675
  %677 = add nuw nsw i64 %676, %675
  %678 = icmp eq i64 %677, 2
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %59, align 1, !tbaa !2450
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %682 = ashr i64 %658, 63
  store i64 %682, i64* %680, align 8, !tbaa !2428
  %683 = add i64 %653, 23
  store i64 %683, i64* %PC, align 8
  %684 = zext i64 %682 to i128
  %685 = shl nuw i128 %684, 64
  %686 = zext i64 %658 to i128
  %687 = or i128 %685, %686
  %688 = sdiv i128 %687, 2
  %689 = trunc i128 %688 to i64
  %690 = and i128 %688, 18446744073709551615
  %691 = sext i64 %689 to i128
  %692 = and i128 %691, -18446744073709551616
  %693 = or i128 %692, %690
  %694 = icmp eq i128 %688, %693
  br i1 %694, label %697, label %695

; <label>:695:                                    ; preds = %block_404d82
  %696 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %683, %struct.Memory* %MEMORY.3) #13
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i64, i64* %RAX, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:697:                                    ; preds = %block_404d82
  %698 = srem i128 %687, 2
  %699 = trunc i128 %698 to i64
  store i64 %689, i64* %681, align 8, !tbaa !2428
  store i64 %699, i64* %680, align 8, !tbaa !2428
  store i8 0, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2446
  store i8 0, i8* %54, align 1, !tbaa !2447
  store i8 0, i8* %55, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %59, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %697, %695
  %700 = phi i64 [ %.pre14, %695 ], [ %683, %697 ]
  %701 = phi i64 [ %.pre13, %695 ], [ %689, %697 ]
  %702 = phi i64 [ %.pre12, %695 ], [ %652, %697 ]
  %703 = phi %struct.Memory* [ %696, %695 ], [ %MEMORY.3, %697 ]
  %704 = add i64 %702, -40
  %705 = add i64 %700, 4
  store i64 %705, i64* %PC, align 8
  %706 = inttoptr i64 %704 to i64*
  store i64 %701, i64* %706, align 8
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_404d9d

block_404d4a:                                     ; preds = %block_404ccd
  %DL = bitcast %union.anon* %5 to i8*
  %AL = bitcast %union.anon* %3 to i8*
  %CL = bitcast %union.anon* %4 to i8*
  %707 = add i64 %548, 4
  store i64 %707, i64* %PC, align 8
  %708 = load i64, i64* %515, align 8
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = add i64 %548, 8
  store i64 %709, i64* %PC, align 8
  %710 = load i64, i64* %519, align 8
  %711 = sub i64 %708, %710
  %712 = icmp ult i64 %708, %710
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %52, align 1, !tbaa !2432
  %714 = trunc i64 %711 to i32
  %715 = and i32 %714, 255
  %716 = tail call i32 @llvm.ctpop.i32(i32 %715) #10
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  store i8 %719, i8* %53, align 1, !tbaa !2446
  %720 = xor i64 %710, %708
  %721 = xor i64 %720, %711
  %722 = lshr i64 %721, 4
  %723 = trunc i64 %722 to i8
  %724 = and i8 %723, 1
  store i8 %724, i8* %54, align 1, !tbaa !2447
  %725 = icmp eq i64 %711, 0
  %726 = zext i1 %725 to i8
  store i8 %726, i8* %55, align 1, !tbaa !2448
  %727 = lshr i64 %711, 63
  %728 = trunc i64 %727 to i8
  store i8 %728, i8* %58, align 1, !tbaa !2449
  %729 = lshr i64 %708, 63
  %730 = lshr i64 %710, 63
  %731 = xor i64 %730, %729
  %732 = xor i64 %727, %729
  %733 = add nuw nsw i64 %732, %731
  %734 = icmp eq i64 %733, 2
  %735 = zext i1 %734 to i8
  store i8 %735, i8* %59, align 1, !tbaa !2450
  %.v28 = select i1 %725, i64 14, i64 56
  %736 = add i64 %.v28, %548
  store i64 %736, i64* %PC, align 8, !tbaa !2428
  br i1 %725, label %block_404d58, label %block_404d82
}

; Function Attrs: noinline
define %struct.Memory* @sub_4029a0__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4029a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4029c8

block_402a11:                                     ; preds = %block_4029c8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4029d8:                                     ; preds = %block_4029c8
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 8376
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a90__ZN9benchmark4copyIPdS1_EEvT_S2_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 8439
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_404ae0__ZN9benchmark8heapsortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 8666
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404bd0__Z13verify_sortedIPdEvT_S1__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_4029c8

block_4029c8:                                     ; preds = %block_4029d8, %block_4029a0
  %190 = phi i64 [ %189, %block_4029d8 ], [ %.pre, %block_4029a0 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4029d8, label %block_402a11
}

; Function Attrs: noinline
define %struct.Memory* @sub_4065e0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4065e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406610__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406310__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_406310:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400960___cxx_global_var_init_14(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400960:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dPb_type* @dPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4799
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c20__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_403140__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403140:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403170__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a80___cxx_global_var_init_23(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10Pe_type* @DV10Pe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4447
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401be0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f50__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401f50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -36
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %66 = bitcast i64* %65 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401f70

block_401f80:                                     ; preds = %block_401f70
  %67 = add i64 %178, -16
  %68 = add i64 %211, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RDI, align 8, !tbaa !2428
  %71 = add i64 %178, -24
  %72 = add i64 %211, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %RSI, align 8, !tbaa !2428
  %75 = add i64 %178, -8
  %76 = add i64 %211, 12
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %178, -48
  %80 = add i64 %211, 16
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i64*
  store i64 %78, i64* %81, align 8
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -48
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 5
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %39, align 1, !tbaa !2451
  store double 0.000000e+00, double* %66, align 1, !tbaa !2451
  %88 = add i64 %84, 17552
  %89 = add i64 %84, 10
  %90 = load i64, i64* %RSP, align 8, !tbaa !2428
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92, align 8
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  store i64 %88, i64* %PC, align 8, !tbaa !2428
  %93 = tail call %struct.Memory* @sub_406420__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__renamed_(%struct.State* nonnull %0, i64 %88, %struct.Memory* %2)
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -56
  %96 = load i64, i64* %PC, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %97 = add i64 %96, 9
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %39, align 1
  %99 = inttoptr i64 %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, 16317
  %102 = add i64 %100, 5
  %103 = load i64, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %102, i64* %105, align 8
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  store i64 %101, i64* %PC, align 8, !tbaa !2428
  %106 = tail call %struct.Memory* @sub_405f60__ZNK12ValueWrapperIdEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %101, %struct.Memory* %2)
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 15960
  %109 = add i64 %107, 5
  %110 = load i64, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %2)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -36
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 3
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %119, 1
  %121 = zext i32 %120 to i64
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = icmp eq i32 %119, -1
  %123 = icmp eq i32 %120, 0
  %124 = or i1 %122, %123
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %12, align 1, !tbaa !2432
  %126 = and i32 %120, 255
  %127 = tail call i32 @llvm.ctpop.i32(i32 %126) #10
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  store i8 %130, i8* %19, align 1, !tbaa !2446
  %131 = xor i32 %120, %119
  %132 = lshr i32 %131, 4
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  store i8 %134, i8* %24, align 1, !tbaa !2447
  %135 = zext i1 %123 to i8
  store i8 %135, i8* %27, align 1, !tbaa !2448
  %136 = lshr i32 %120, 31
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %30, align 1, !tbaa !2449
  %138 = lshr i32 %119, 31
  %139 = xor i32 %136, %138
  %140 = add nuw nsw i32 %139, %136
  %141 = icmp eq i32 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %36, align 1, !tbaa !2450
  %143 = add i64 %116, 9
  store i64 %143, i64* %PC, align 8
  store i32 %120, i32* %118, align 4
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, -70
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  br label %block_401f70

block_401fbb:                                     ; preds = %block_401f70
  %146 = load i64, i64* %RSP, align 8
  %147 = add i64 %146, 64
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ugt i64 %146, -65
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %12, align 1, !tbaa !2432
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #10
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %19, align 1, !tbaa !2446
  %156 = xor i64 %147, %146
  %157 = lshr i64 %156, 4
  %158 = trunc i64 %157 to i8
  %159 = and i8 %158, 1
  store i8 %159, i8* %24, align 1, !tbaa !2447
  %160 = icmp eq i64 %147, 0
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %27, align 1, !tbaa !2448
  %162 = lshr i64 %147, 63
  %163 = trunc i64 %162 to i8
  store i8 %163, i8* %30, align 1, !tbaa !2449
  %164 = lshr i64 %146, 63
  %165 = xor i64 %162, %164
  %166 = add nuw nsw i64 %165, %162
  %167 = icmp eq i64 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %36, align 1, !tbaa !2450
  %169 = add i64 %211, 5
  store i64 %169, i64* %PC, align 8
  %170 = add i64 %146, 72
  %171 = inttoptr i64 %147 to i64*
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %RBP, align 8, !tbaa !2428
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %211, 6
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %170 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %176 = add i64 %146, 80
  store i64 %176, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401f70:                                     ; preds = %block_401f80, %block_401f50
  %177 = phi i64 [ %145, %block_401f80 ], [ %.pre, %block_401f50 ]
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -36
  %180 = add i64 %177, 3
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %185 = sub i32 %182, %184
  %186 = icmp ult i32 %182, %184
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %12, align 1, !tbaa !2432
  %188 = and i32 %185, 255
  %189 = tail call i32 @llvm.ctpop.i32(i32 %188) #10
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  store i8 %192, i8* %19, align 1, !tbaa !2446
  %193 = xor i32 %184, %182
  %194 = xor i32 %193, %185
  %195 = lshr i32 %194, 4
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  store i8 %197, i8* %24, align 1, !tbaa !2447
  %198 = icmp eq i32 %185, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %27, align 1, !tbaa !2448
  %200 = lshr i32 %185, 31
  %201 = trunc i32 %200 to i8
  store i8 %201, i8* %30, align 1, !tbaa !2449
  %202 = lshr i32 %182, 31
  %203 = lshr i32 %184, 31
  %204 = xor i32 %203, %202
  %205 = xor i32 %200, %202
  %206 = add nuw nsw i32 %205, %204
  %207 = icmp eq i32 %206, 2
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %36, align 1, !tbaa !2450
  %209 = icmp ne i8 %201, 0
  %210 = xor i1 %209, %207
  %.v = select i1 %210, i64 16, i64 75
  %211 = add i64 %.v, %177
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  br i1 %210, label %block_401f80, label %block_401fbb
}

; Function Attrs: noinline
define %struct.Memory* @sub_402740__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402740:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402768

block_4027b1:                                     ; preds = %block_402768
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402778:                                     ; preds = %block_402768
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 6296
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404010__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 11159
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405320__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 6602
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404160__Z13verify_sortedIP12ValueWrapperIdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402768

block_402768:                                     ; preds = %block_402778, %block_402740
  %190 = phi i64 [ %189, %block_402778 ], [ %.pre, %block_402740 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402778, label %block_4027b1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406744__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406744:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = xor i64 %4, %3
  %8 = lshr i64 %7, 4
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13 = lshr i64 %4, 63
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15 = lshr i64 %3, 63
  %16 = xor i64 %13, %15
  %17 = add nuw nsw i64 %16, %15
  %18 = icmp eq i64 %17, 2
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = icmp ult i64 %3, 8
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1, !tbaa !2432
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #10
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %6, align 1, !tbaa !2446
  store i8 %10, i8* %11, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %12, align 1, !tbaa !2448
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %14, align 1, !tbaa !2449
  store i8 %19, i8* %20, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4023b0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4023b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4023d8

block_402421:                                     ; preds = %block_4023d8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4023e8:                                     ; preds = %block_4023d8
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 7208
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404010__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 13943
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405a70__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 7514
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404160__Z13verify_sortedIP12ValueWrapperIdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_4023d8

block_4023d8:                                     ; preds = %block_4023e8, %block_4023b0
  %190 = phi i64 [ %189, %block_4023e8 ], [ %.pre, %block_4023b0 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4023e8, label %block_402421
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a20___cxx_global_var_init_20(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVMPb_type* @DVMPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4575
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c00__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_404240__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404240:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = add i64 %10, 12
  store i64 %40, i64* %PC, align 8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RSI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = lshr i64 %77, 63
  %79 = trunc i64 %78 to i8
  %80 = shl i64 %77, 1
  %81 = icmp slt i64 %77, 0
  %82 = icmp slt i64 %80, 0
  %83 = xor i1 %81, %82
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  store i8 %79, i8* %14, align 1, !tbaa !2453
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #10
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %90 = icmp eq i64 %80, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %29, align 1, !tbaa !2453
  %92 = lshr i64 %77, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %32, align 1, !tbaa !2453
  %95 = zext i1 %83 to i8
  store i8 %95, i8* %38, align 1, !tbaa !2453
  %96 = add i64 %71, -40
  %97 = add i64 %73, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %80, i64* %98, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_404271

block_40427f:                                     ; preds = %block_404271
  %99 = add i64 %360, -24
  %100 = add i64 %396, 4
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = add i64 %396, 8
  store i64 %103, i64* %PC, align 8
  %104 = load i64, i64* %363, align 8
  %105 = add i64 %104, -1
  %106 = shl i64 %105, 3
  store i64 %106, i64* %RCX, align 8, !tbaa !2428
  %107 = add i64 %106, %102
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = icmp ult i64 %107, %102
  %109 = icmp ult i64 %107, %106
  %110 = or i1 %108, %109
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %14, align 1, !tbaa !2432
  %112 = trunc i64 %107 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #10
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %21, align 1, !tbaa !2446
  %118 = xor i64 %106, %102
  %119 = xor i64 %118, %107
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %107, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %107, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %102, 63
  %128 = lshr i64 %105, 60
  %129 = and i64 %128, 1
  %130 = xor i64 %125, %127
  %131 = xor i64 %125, %129
  %132 = add nuw nsw i64 %130, %131
  %133 = icmp eq i64 %132, 2
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %38, align 1, !tbaa !2450
  %135 = add i64 %396, 23
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %101, align 8
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = add i64 %396, 27
  store i64 %137, i64* %PC, align 8
  %138 = load i64, i64* %363, align 8
  %139 = shl i64 %138, 3
  store i64 %139, i64* %RDX, align 8, !tbaa !2428
  %140 = add i64 %139, %136
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = icmp ult i64 %140, %136
  %142 = icmp ult i64 %140, %139
  %143 = or i1 %141, %142
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %14, align 1, !tbaa !2432
  %145 = trunc i64 %140 to i32
  %146 = and i32 %145, 255
  %147 = tail call i32 @llvm.ctpop.i32(i32 %146) #10
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  store i8 %150, i8* %21, align 1, !tbaa !2446
  %151 = xor i64 %139, %136
  %152 = xor i64 %151, %140
  %153 = lshr i64 %152, 4
  %154 = trunc i64 %153 to i8
  %155 = and i8 %154, 1
  store i8 %155, i8* %26, align 1, !tbaa !2447
  %156 = icmp eq i64 %140, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %29, align 1, !tbaa !2448
  %158 = lshr i64 %140, 63
  %159 = trunc i64 %158 to i8
  store i8 %159, i8* %32, align 1, !tbaa !2449
  %160 = lshr i64 %136, 63
  %161 = lshr i64 %138, 60
  %162 = and i64 %161, 1
  %163 = xor i64 %158, %160
  %164 = xor i64 %158, %162
  %165 = add nuw nsw i64 %163, %164
  %166 = icmp eq i64 %165, 2
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %38, align 1, !tbaa !2450
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  store i64 %140, i64* %RSI, align 8, !tbaa !2428
  %168 = add i64 %396, -4127
  %169 = add i64 %396, 45
  %170 = load i64, i64* %RSP, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %169, i64* %172, align 8
  store i64 %171, i64* %RSP, align 8, !tbaa !2428
  store i64 %168, i64* %PC, align 8, !tbaa !2428
  %173 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %168, %struct.Memory* %2)
  %174 = load i8, i8* %AL, align 1
  %175 = load i64, i64* %PC, align 8
  %176 = and i8 %174, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %177 = zext i8 %176 to i32
  %178 = tail call i32 @llvm.ctpop.i32(i32 %177) #10
  %179 = trunc i32 %178 to i8
  %180 = xor i8 %179, 1
  store i8 %180, i8* %21, align 1, !tbaa !2446
  %181 = xor i8 %176, 1
  store i8 %181, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %182 = icmp eq i8 %181, 0
  %.v25 = select i1 %182, i64 13, i64 8
  %183 = add i64 %.v25, %175
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  br i1 %182, label %block_4042b9, label %block_4042b4

block_404334:                                     ; preds = %block_40430c, %block_4042fe
  %184 = phi i64 [ %.pre13, %block_40430c ], [ %360, %block_4042fe ]
  %185 = phi i64 [ %.pre12, %block_40430c ], [ %591, %block_4042fe ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %186 = add i64 %184, -48
  %187 = add i64 %185, 11
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %186 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = add i64 %189, -1
  %191 = icmp eq i64 %189, 0
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %14, align 1, !tbaa !2432
  %193 = trunc i64 %190 to i32
  %194 = and i32 %193, 255
  %195 = tail call i32 @llvm.ctpop.i32(i32 %194) #10
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  store i8 %198, i8* %21, align 1, !tbaa !2446
  %199 = xor i64 %190, %189
  %200 = lshr i64 %199, 4
  %201 = trunc i64 %200 to i8
  %202 = and i8 %201, 1
  store i8 %202, i8* %26, align 1, !tbaa !2447
  %203 = icmp eq i64 %190, 0
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %29, align 1, !tbaa !2448
  %205 = lshr i64 %190, 63
  %206 = trunc i64 %205 to i8
  store i8 %206, i8* %32, align 1, !tbaa !2449
  %207 = lshr i64 %189, 63
  %208 = xor i64 %205, %207
  %209 = add nuw nsw i64 %208, %207
  %210 = icmp eq i64 %209, 2
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %38, align 1, !tbaa !2450
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %213 = ashr i64 %190, 63
  store i64 %213, i64* %RDX, align 8, !tbaa !2428
  %214 = add i64 %185, 23
  store i64 %214, i64* %PC, align 8
  %215 = zext i64 %213 to i128
  %216 = shl nuw i128 %215, 64
  %217 = zext i64 %190 to i128
  %218 = or i128 %216, %217
  %219 = sdiv i128 %218, 2
  %220 = trunc i128 %219 to i64
  %221 = and i128 %219, 18446744073709551615
  %222 = sext i64 %220 to i128
  %223 = and i128 %222, -18446744073709551616
  %224 = or i128 %223, %221
  %225 = icmp eq i128 %219, %224
  br i1 %225, label %228, label %226

; <label>:226:                                    ; preds = %block_404334
  %227 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %214, %struct.Memory* %2) #13
  %.pre14 = load i64, i64* %RBP, align 8
  %.pre15 = load i64, i64* %RAX, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:228:                                    ; preds = %block_404334
  %229 = srem i128 %218, 2
  %230 = trunc i128 %229 to i64
  store i64 %220, i64* %212, align 8, !tbaa !2428
  store i64 %230, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %228, %226
  %231 = phi i64 [ %.pre16, %226 ], [ %214, %228 ]
  %232 = phi i64 [ %.pre15, %226 ], [ %220, %228 ]
  %233 = phi i64 [ %.pre14, %226 ], [ %184, %228 ]
  %234 = phi %struct.Memory* [ %227, %226 ], [ %2, %228 ]
  %235 = add i64 %233, -40
  %236 = add i64 %231, 4
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i64*
  store i64 %232, i64* %237, align 8
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_40434f

block_4042b9:                                     ; preds = %block_40427f
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -40
  %240 = add i64 %183, 4
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = add i64 %242, 1
  store i64 %243, i64* %RAX, align 8, !tbaa !2428
  %244 = icmp eq i64 %242, -1
  %245 = icmp eq i64 %243, 0
  %246 = or i1 %244, %245
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %14, align 1, !tbaa !2432
  %248 = trunc i64 %243 to i32
  %249 = and i32 %248, 255
  %250 = tail call i32 @llvm.ctpop.i32(i32 %249) #10
  %251 = trunc i32 %250 to i8
  %252 = and i8 %251, 1
  %253 = xor i8 %252, 1
  store i8 %253, i8* %21, align 1, !tbaa !2446
  %254 = xor i64 %243, %242
  %255 = lshr i64 %254, 4
  %256 = trunc i64 %255 to i8
  %257 = and i8 %256, 1
  store i8 %257, i8* %26, align 1, !tbaa !2447
  %258 = zext i1 %245 to i8
  store i8 %258, i8* %29, align 1, !tbaa !2448
  %259 = lshr i64 %243, 63
  %260 = trunc i64 %259 to i8
  store i8 %260, i8* %32, align 1, !tbaa !2449
  %261 = lshr i64 %242, 63
  %262 = xor i64 %259, %261
  %263 = add nuw nsw i64 %262, %259
  %264 = icmp eq i64 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %38, align 1, !tbaa !2450
  %266 = add i64 %183, 12
  store i64 %266, i64* %PC, align 8
  store i64 %243, i64* %241, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_4042c5

block_404392:                                     ; preds = %block_404382
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %267 = add i64 %694, -24
  %268 = add i64 %706, 11
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %RDX, align 8, !tbaa !2428
  %271 = add i64 %694, -40
  %272 = add i64 %706, 15
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i64*
  %274 = load i64, i64* %273, align 8
  store i64 %274, i64* %RSI, align 8, !tbaa !2428
  %275 = add i64 %706, 19
  store i64 %275, i64* %PC, align 8
  %276 = load i64, i64* %269, align 8
  store i64 %276, i64* %RDI, align 8, !tbaa !2428
  %277 = add i64 %694, -48
  %278 = add i64 %706, 23
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i64*
  %280 = load i64, i64* %279, align 8
  store i64 %280, i64* %R8, align 8, !tbaa !2428
  %281 = shl i64 %274, 3
  %282 = add i64 %281, %270
  %283 = add i64 %706, 27
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %RDX, align 8, !tbaa !2428
  %286 = shl i64 %280, 3
  %287 = add i64 %286, %276
  %288 = add i64 %706, 31
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i64*
  store i64 %285, i64* %289, align 8
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -40
  %292 = load i64, i64* %PC, align 8
  %293 = add i64 %292, 4
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294, align 8
  store i64 %295, i64* %RDX, align 8, !tbaa !2428
  %296 = add i64 %290, -48
  %297 = add i64 %292, 8
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  store i64 %295, i64* %298, align 8
  %299 = load i64, i64* %RBP, align 8
  %300 = add i64 %299, -48
  %301 = load i64, i64* %PC, align 8
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %300 to i64*
  %304 = load i64, i64* %303, align 8
  %305 = add i64 %304, -1
  %306 = icmp eq i64 %304, 0
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %14, align 1, !tbaa !2432
  %308 = trunc i64 %305 to i32
  %309 = and i32 %308, 255
  %310 = tail call i32 @llvm.ctpop.i32(i32 %309) #10
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  store i8 %313, i8* %21, align 1, !tbaa !2446
  %314 = xor i64 %305, %304
  %315 = lshr i64 %314, 4
  %316 = trunc i64 %315 to i8
  %317 = and i8 %316, 1
  store i8 %317, i8* %26, align 1, !tbaa !2447
  %318 = icmp eq i64 %305, 0
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %29, align 1, !tbaa !2448
  %320 = lshr i64 %305, 63
  %321 = trunc i64 %320 to i8
  store i8 %321, i8* %32, align 1, !tbaa !2449
  %322 = lshr i64 %304, 63
  %323 = xor i64 %320, %322
  %324 = add nuw nsw i64 %323, %322
  %325 = icmp eq i64 %324, 2
  %326 = zext i1 %325 to i8
  store i8 %326, i8* %38, align 1, !tbaa !2450
  store i64 %305, i64* %RAX, align 8, !tbaa !2428
  %327 = ashr i64 %305, 63
  store i64 %327, i64* %RDX, align 8, !tbaa !2428
  %328 = load i64, i64* %RCX, align 8
  %329 = add i64 %301, 16
  store i64 %329, i64* %PC, align 8
  %330 = sext i64 %328 to i128
  %331 = and i128 %330, -18446744073709551616
  %332 = zext i64 %327 to i128
  %333 = shl nuw i128 %332, 64
  %334 = zext i64 %305 to i128
  %335 = or i128 %333, %334
  %336 = zext i64 %328 to i128
  %337 = or i128 %331, %336
  %338 = sdiv i128 %335, %337
  %339 = trunc i128 %338 to i64
  %340 = and i128 %338, 18446744073709551615
  %341 = sext i64 %339 to i128
  %342 = and i128 %341, -18446744073709551616
  %343 = or i128 %342, %340
  %344 = icmp eq i128 %338, %343
  br i1 %344, label %347, label %345

; <label>:345:                                    ; preds = %block_404392
  %346 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %329, %struct.Memory* %MEMORY.3) #13
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %RAX, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:347:                                    ; preds = %block_404392
  %348 = srem i128 %335, %337
  %349 = trunc i128 %348 to i64
  store i64 %339, i64* %212, align 8, !tbaa !2428
  store i64 %349, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %347, %345
  %350 = phi i64 [ %.pre21, %345 ], [ %329, %347 ]
  %351 = phi i64 [ %.pre20, %345 ], [ %339, %347 ]
  %352 = phi i64 [ %.pre19, %345 ], [ %299, %347 ]
  %353 = phi %struct.Memory* [ %346, %345 ], [ %MEMORY.3, %347 ]
  %354 = add i64 %352, -40
  %355 = add i64 %350, 4
  store i64 %355, i64* %PC, align 8
  %356 = inttoptr i64 %354 to i64*
  store i64 %351, i64* %356, align 8
  %357 = load i64, i64* %PC, align 8
  %358 = add i64 %357, -126
  store i64 %358, i64* %PC, align 8, !tbaa !2428
  br label %block_40434f

block_404271:                                     ; preds = %block_4042c5, %block_404240
  %359 = phi i64 [ %561, %block_4042c5 ], [ %.pre, %block_404240 ]
  %360 = load i64, i64* %RBP, align 8
  %361 = add i64 %360, -40
  %362 = add i64 %359, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = add i64 %360, -16
  %366 = add i64 %359, 8
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = sub i64 %364, %368
  %370 = icmp ult i64 %364, %368
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %14, align 1, !tbaa !2432
  %372 = trunc i64 %369 to i32
  %373 = and i32 %372, 255
  %374 = tail call i32 @llvm.ctpop.i32(i32 %373) #10
  %375 = trunc i32 %374 to i8
  %376 = and i8 %375, 1
  %377 = xor i8 %376, 1
  store i8 %377, i8* %21, align 1, !tbaa !2446
  %378 = xor i64 %368, %364
  %379 = xor i64 %378, %369
  %380 = lshr i64 %379, 4
  %381 = trunc i64 %380 to i8
  %382 = and i8 %381, 1
  store i8 %382, i8* %26, align 1, !tbaa !2447
  %383 = icmp eq i64 %369, 0
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %29, align 1, !tbaa !2448
  %385 = lshr i64 %369, 63
  %386 = trunc i64 %385 to i8
  store i8 %386, i8* %32, align 1, !tbaa !2449
  %387 = lshr i64 %364, 63
  %388 = lshr i64 %368, 63
  %389 = xor i64 %388, %387
  %390 = xor i64 %385, %387
  %391 = add nuw nsw i64 %390, %389
  %392 = icmp eq i64 %391, 2
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %38, align 1, !tbaa !2450
  %394 = icmp ne i8 %386, 0
  %395 = xor i1 %394, %392
  %.v23 = select i1 %395, i64 14, i64 141
  %396 = add i64 %.v23, %359
  store i64 %396, i64* %PC, align 8, !tbaa !2428
  br i1 %395, label %block_40427f, label %block_4042fe

block_40438d:                                     ; preds = %block_404382
  %397 = add i64 %694, -24
  %398 = add i64 %706, 73
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %397 to i64*
  %400 = load i64, i64* %399, align 8
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = add i64 %694, -48
  %402 = add i64 %706, 77
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %401 to i64*
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %RCX, align 8, !tbaa !2428
  %405 = add i64 %694, -8
  %406 = add i64 %706, 81
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %405 to i64*
  %408 = load i64, i64* %407, align 8
  store i64 %408, i64* %RDX, align 8, !tbaa !2428
  %409 = shl i64 %404, 3
  %410 = add i64 %409, %400
  %411 = add i64 %706, 85
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %410 to i64*
  store i64 %408, i64* %412, align 8
  %413 = load i64, i64* %RSP, align 8
  %414 = load i64, i64* %PC, align 8
  %415 = add i64 %413, 64
  store i64 %415, i64* %RSP, align 8, !tbaa !2428
  %416 = icmp ugt i64 %413, -65
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %14, align 1, !tbaa !2432
  %418 = trunc i64 %415 to i32
  %419 = and i32 %418, 255
  %420 = tail call i32 @llvm.ctpop.i32(i32 %419) #10
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  store i8 %423, i8* %21, align 1, !tbaa !2446
  %424 = xor i64 %415, %413
  %425 = lshr i64 %424, 4
  %426 = trunc i64 %425 to i8
  %427 = and i8 %426, 1
  store i8 %427, i8* %26, align 1, !tbaa !2447
  %428 = icmp eq i64 %415, 0
  %429 = zext i1 %428 to i8
  store i8 %429, i8* %29, align 1, !tbaa !2448
  %430 = lshr i64 %415, 63
  %431 = trunc i64 %430 to i8
  store i8 %431, i8* %32, align 1, !tbaa !2449
  %432 = lshr i64 %413, 63
  %433 = xor i64 %430, %432
  %434 = add nuw nsw i64 %433, %430
  %435 = icmp eq i64 %434, 2
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %38, align 1, !tbaa !2450
  %437 = add i64 %414, 5
  store i64 %437, i64* %PC, align 8
  %438 = add i64 %413, 72
  %439 = inttoptr i64 %415 to i64*
  %440 = load i64, i64* %439, align 8
  store i64 %440, i64* %RBP, align 8, !tbaa !2428
  store i64 %438, i64* %RSP, align 8, !tbaa !2428
  %441 = add i64 %414, 6
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %438 to i64*
  %443 = load i64, i64* %442, align 8
  store i64 %443, i64* %PC, align 8, !tbaa !2428
  %444 = add i64 %413, 80
  store i64 %444, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_4042b4:                                     ; preds = %block_40427f
  %445 = add i64 %183, 17
  store i64 %445, i64* %PC, align 8, !tbaa !2428
  br label %block_4042c5

block_4042c5:                                     ; preds = %block_4042b4, %block_4042b9
  %446 = phi i64 [ %445, %block_4042b4 ], [ %.pre22, %block_4042b9 ]
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -24
  %449 = add i64 %446, 4
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i64*
  %451 = load i64, i64* %450, align 8
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = add i64 %447, -40
  %453 = add i64 %446, 8
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %452 to i64*
  %455 = load i64, i64* %454, align 8
  %456 = add i64 %455, -1
  store i64 %456, i64* %RCX, align 8, !tbaa !2428
  %457 = icmp eq i64 %455, 0
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %14, align 1, !tbaa !2432
  %459 = trunc i64 %456 to i32
  %460 = and i32 %459, 255
  %461 = tail call i32 @llvm.ctpop.i32(i32 %460) #10
  %462 = trunc i32 %461 to i8
  %463 = and i8 %462, 1
  %464 = xor i8 %463, 1
  store i8 %464, i8* %21, align 1, !tbaa !2446
  %465 = xor i64 %456, %455
  %466 = lshr i64 %465, 4
  %467 = trunc i64 %466 to i8
  %468 = and i8 %467, 1
  store i8 %468, i8* %26, align 1, !tbaa !2447
  %469 = icmp eq i64 %456, 0
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %29, align 1, !tbaa !2448
  %471 = lshr i64 %456, 63
  %472 = trunc i64 %471 to i8
  store i8 %472, i8* %32, align 1, !tbaa !2449
  %473 = lshr i64 %455, 63
  %474 = xor i64 %471, %473
  %475 = add nuw nsw i64 %474, %473
  %476 = icmp eq i64 %475, 2
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %38, align 1, !tbaa !2450
  %478 = add i64 %446, 16
  store i64 %478, i64* %PC, align 8
  %479 = load i64, i64* %450, align 8
  store i64 %479, i64* %RDX, align 8, !tbaa !2428
  %480 = add i64 %447, -48
  %481 = add i64 %446, 20
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i64*
  %483 = load i64, i64* %482, align 8
  store i64 %483, i64* %RSI, align 8, !tbaa !2428
  %484 = shl i64 %456, 3
  %485 = add i64 %484, %451
  %486 = add i64 %446, 24
  store i64 %486, i64* %PC, align 8
  %487 = inttoptr i64 %485 to i64*
  %488 = load i64, i64* %487, align 8
  store i64 %488, i64* %RAX, align 8, !tbaa !2428
  %489 = shl i64 %483, 3
  %490 = add i64 %489, %479
  %491 = add i64 %446, 28
  store i64 %491, i64* %PC, align 8
  %492 = inttoptr i64 %490 to i64*
  store i64 %488, i64* %492, align 8
  %493 = load i64, i64* %RBP, align 8
  %494 = add i64 %493, -40
  %495 = load i64, i64* %PC, align 8
  %496 = add i64 %495, 4
  store i64 %496, i64* %PC, align 8
  %497 = inttoptr i64 %494 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = add i64 %498, -1
  store i64 %499, i64* %RAX, align 8, !tbaa !2428
  %500 = icmp eq i64 %498, 0
  %501 = zext i1 %500 to i8
  store i8 %501, i8* %14, align 1, !tbaa !2432
  %502 = trunc i64 %499 to i32
  %503 = and i32 %502, 255
  %504 = tail call i32 @llvm.ctpop.i32(i32 %503) #10
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  store i8 %507, i8* %21, align 1, !tbaa !2446
  %508 = xor i64 %499, %498
  %509 = lshr i64 %508, 4
  %510 = trunc i64 %509 to i8
  %511 = and i8 %510, 1
  store i8 %511, i8* %26, align 1, !tbaa !2447
  %512 = icmp eq i64 %499, 0
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %29, align 1, !tbaa !2448
  %514 = lshr i64 %499, 63
  %515 = trunc i64 %514 to i8
  store i8 %515, i8* %32, align 1, !tbaa !2449
  %516 = lshr i64 %498, 63
  %517 = xor i64 %514, %516
  %518 = add nuw nsw i64 %517, %516
  %519 = icmp eq i64 %518, 2
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %38, align 1, !tbaa !2450
  %521 = add i64 %493, -48
  %522 = add i64 %495, 12
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i64*
  store i64 %499, i64* %523, align 8
  %524 = load i64, i64* %RBP, align 8
  %525 = add i64 %524, -40
  %526 = load i64, i64* %PC, align 8
  %527 = add i64 %526, 4
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %525 to i64*
  %529 = load i64, i64* %528, align 8
  store i64 %529, i64* %RAX, align 8, !tbaa !2428
  %530 = add i64 %526, 8
  store i64 %530, i64* %PC, align 8
  %531 = load i64, i64* %528, align 8
  %532 = add i64 %531, %529
  store i64 %532, i64* %RAX, align 8, !tbaa !2428
  %533 = icmp ult i64 %532, %529
  %534 = icmp ult i64 %532, %531
  %535 = or i1 %533, %534
  %536 = zext i1 %535 to i8
  store i8 %536, i8* %14, align 1, !tbaa !2432
  %537 = trunc i64 %532 to i32
  %538 = and i32 %537, 255
  %539 = tail call i32 @llvm.ctpop.i32(i32 %538) #10
  %540 = trunc i32 %539 to i8
  %541 = and i8 %540, 1
  %542 = xor i8 %541, 1
  store i8 %542, i8* %21, align 1, !tbaa !2446
  %543 = xor i64 %531, %529
  %544 = xor i64 %543, %532
  %545 = lshr i64 %544, 4
  %546 = trunc i64 %545 to i8
  %547 = and i8 %546, 1
  store i8 %547, i8* %26, align 1, !tbaa !2447
  %548 = icmp eq i64 %532, 0
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %29, align 1, !tbaa !2448
  %550 = lshr i64 %532, 63
  %551 = trunc i64 %550 to i8
  store i8 %551, i8* %32, align 1, !tbaa !2449
  %552 = lshr i64 %529, 63
  %553 = lshr i64 %531, 63
  %554 = xor i64 %550, %552
  %555 = xor i64 %550, %553
  %556 = add nuw nsw i64 %554, %555
  %557 = icmp eq i64 %556, 2
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %38, align 1, !tbaa !2450
  %559 = add i64 %526, 12
  store i64 %559, i64* %PC, align 8
  store i64 %532, i64* %528, align 8
  %560 = load i64, i64* %PC, align 8
  %561 = add i64 %560, -136
  store i64 %561, i64* %PC, align 8, !tbaa !2428
  br label %block_404271

block_4042fe:                                     ; preds = %block_404271
  %CL = bitcast %union.anon* %4 to i8*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %562 = add i64 %396, 4
  store i64 %562, i64* %PC, align 8
  %563 = load i64, i64* %363, align 8
  store i64 %563, i64* %RAX, align 8, !tbaa !2428
  %564 = add i64 %396, 8
  store i64 %564, i64* %PC, align 8
  %565 = load i64, i64* %367, align 8
  %566 = sub i64 %563, %565
  %567 = icmp ult i64 %563, %565
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %14, align 1, !tbaa !2432
  %569 = trunc i64 %566 to i32
  %570 = and i32 %569, 255
  %571 = tail call i32 @llvm.ctpop.i32(i32 %570) #10
  %572 = trunc i32 %571 to i8
  %573 = and i8 %572, 1
  %574 = xor i8 %573, 1
  store i8 %574, i8* %21, align 1, !tbaa !2446
  %575 = xor i64 %565, %563
  %576 = xor i64 %575, %566
  %577 = lshr i64 %576, 4
  %578 = trunc i64 %577 to i8
  %579 = and i8 %578, 1
  store i8 %579, i8* %26, align 1, !tbaa !2447
  %580 = icmp eq i64 %566, 0
  %581 = zext i1 %580 to i8
  store i8 %581, i8* %29, align 1, !tbaa !2448
  %582 = lshr i64 %566, 63
  %583 = trunc i64 %582 to i8
  store i8 %583, i8* %32, align 1, !tbaa !2449
  %584 = lshr i64 %563, 63
  %585 = lshr i64 %565, 63
  %586 = xor i64 %585, %584
  %587 = xor i64 %582, %584
  %588 = add nuw nsw i64 %587, %586
  %589 = icmp eq i64 %588, 2
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %38, align 1, !tbaa !2450
  %.v24 = select i1 %580, i64 14, i64 54
  %591 = add i64 %.v24, %396
  store i64 %591, i64* %PC, align 8, !tbaa !2428
  br i1 %580, label %block_40430c, label %block_404334

block_404364:                                     ; preds = %block_40434f
  %592 = load i64, i64* %RBP, align 8
  %593 = add i64 %592, -8
  store i64 %593, i64* %RSI, align 8, !tbaa !2428
  %594 = add i64 %592, -24
  %595 = add i64 %692, 8
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = add i64 %592, -40
  %599 = add i64 %692, 12
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %598 to i64*
  %601 = load i64, i64* %600, align 8
  %602 = shl i64 %601, 3
  store i64 %602, i64* %RCX, align 8, !tbaa !2428
  %603 = add i64 %602, %597
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = icmp ult i64 %603, %597
  %605 = icmp ult i64 %603, %602
  %606 = or i1 %604, %605
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %14, align 1, !tbaa !2432
  %608 = trunc i64 %603 to i32
  %609 = and i32 %608, 255
  %610 = tail call i32 @llvm.ctpop.i32(i32 %609) #10
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  %613 = xor i8 %612, 1
  store i8 %613, i8* %21, align 1, !tbaa !2446
  %614 = xor i64 %602, %597
  %615 = xor i64 %614, %603
  %616 = lshr i64 %615, 4
  %617 = trunc i64 %616 to i8
  %618 = and i8 %617, 1
  store i8 %618, i8* %26, align 1, !tbaa !2447
  %619 = icmp eq i64 %603, 0
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %29, align 1, !tbaa !2448
  %621 = lshr i64 %603, 63
  %622 = trunc i64 %621 to i8
  store i8 %622, i8* %32, align 1, !tbaa !2449
  %623 = lshr i64 %597, 63
  %624 = lshr i64 %601, 60
  %625 = and i64 %624, 1
  %626 = xor i64 %621, %623
  %627 = xor i64 %621, %625
  %628 = add nuw nsw i64 %626, %627
  %629 = icmp eq i64 %628, 2
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %38, align 1, !tbaa !2450
  store i64 %603, i64* %RDI, align 8, !tbaa !2428
  %631 = add i64 %692, -4356
  %632 = add i64 %692, 27
  %633 = load i64, i64* %RSP, align 8, !tbaa !2428
  %634 = add i64 %633, -8
  %635 = inttoptr i64 %634 to i64*
  store i64 %632, i64* %635, align 8
  store i64 %634, i64* %RSP, align 8, !tbaa !2428
  store i64 %631, i64* %PC, align 8, !tbaa !2428
  %636 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %631, %struct.Memory* %MEMORY.3)
  %637 = load i64, i64* %RBP, align 8
  %638 = add i64 %637, -49
  %639 = load i8, i8* %AL, align 1
  %640 = load i64, i64* %PC, align 8
  %641 = add i64 %640, 3
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %638 to i8*
  store i8 %639, i8* %642, align 1
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_404382

block_40434f:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %643 = phi i64 [ %.pre17, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %358, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.3 = phi %struct.Memory* [ %234, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %353, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %644 = load i64, i64* %RBP, align 8
  %645 = add i64 %644, -48
  %646 = add i64 %643, 8
  store i64 %646, i64* %PC, align 8
  %647 = inttoptr i64 %645 to i64*
  %648 = load i64, i64* %647, align 8
  store i64 %648, i64* %RDX, align 8, !tbaa !2428
  %649 = add i64 %644, -32
  %650 = add i64 %643, 12
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %649 to i64*
  %652 = load i64, i64* %651, align 8
  %653 = sub i64 %648, %652
  %654 = icmp ult i64 %648, %652
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %14, align 1, !tbaa !2432
  %656 = trunc i64 %653 to i32
  %657 = and i32 %656, 255
  %658 = tail call i32 @llvm.ctpop.i32(i32 %657) #10
  %659 = trunc i32 %658 to i8
  %660 = and i8 %659, 1
  %661 = xor i8 %660, 1
  store i8 %661, i8* %21, align 1, !tbaa !2446
  %662 = xor i64 %652, %648
  %663 = xor i64 %662, %653
  %664 = lshr i64 %663, 4
  %665 = trunc i64 %664 to i8
  %666 = and i8 %665, 1
  store i8 %666, i8* %26, align 1, !tbaa !2447
  %667 = icmp eq i64 %653, 0
  %668 = zext i1 %667 to i8
  store i8 %668, i8* %29, align 1, !tbaa !2448
  %669 = lshr i64 %653, 63
  %670 = trunc i64 %669 to i8
  store i8 %670, i8* %32, align 1, !tbaa !2449
  %671 = lshr i64 %648, 63
  %672 = lshr i64 %652, 63
  %673 = xor i64 %672, %671
  %674 = xor i64 %669, %671
  %675 = add nuw nsw i64 %674, %673
  %676 = icmp eq i64 %675, 2
  %677 = zext i1 %676 to i8
  store i8 %677, i8* %38, align 1, !tbaa !2450
  %678 = add i64 %644, -49
  %679 = add i64 %643, 15
  store i64 %679, i64* %PC, align 8
  %680 = inttoptr i64 %678 to i8*
  store i8 0, i8* %680, align 1
  %681 = load i64, i64* %PC, align 8
  %682 = add i64 %681, 36
  %683 = add i64 %681, 6
  %684 = load i8, i8* %29, align 1, !tbaa !2448
  %685 = icmp ne i8 %684, 0
  %686 = load i8, i8* %32, align 1, !tbaa !2449
  %687 = icmp ne i8 %686, 0
  %688 = load i8, i8* %38, align 1, !tbaa !2450
  %689 = icmp ne i8 %688, 0
  %690 = xor i1 %687, %689
  %691 = or i1 %685, %690
  %692 = select i1 %691, i64 %682, i64 %683
  store i64 %692, i64* %PC, align 8, !tbaa !2428
  br i1 %691, label %block_404382, label %block_404364

block_404382:                                     ; preds = %block_40434f, %block_404364
  %693 = phi i64 [ %682, %block_40434f ], [ %.pre18, %block_404364 ]
  %694 = load i64, i64* %RBP, align 8
  %695 = add i64 %694, -49
  %696 = add i64 %693, 3
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %695 to i8*
  %698 = load i8, i8* %697, align 1
  store i8 %698, i8* %AL, align 1, !tbaa !2453
  %699 = and i8 %698, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %700 = zext i8 %699 to i32
  %701 = tail call i32 @llvm.ctpop.i32(i32 %700) #10
  %702 = trunc i32 %701 to i8
  %703 = xor i8 %702, 1
  store i8 %703, i8* %21, align 1, !tbaa !2446
  %704 = xor i8 %699, 1
  store i8 %704, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %705 = icmp eq i8 %704, 0
  %.v = select i1 %705, i64 16, i64 11
  %706 = add i64 %.v, %693
  store i64 %706, i64* %PC, align 8, !tbaa !2428
  br i1 %705, label %block_404392, label %block_40438d

block_40430c:                                     ; preds = %block_4042fe
  %707 = add i64 %360, -24
  %708 = add i64 %591, 4
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %707 to i64*
  %710 = load i64, i64* %709, align 8
  store i64 %710, i64* %RAX, align 8, !tbaa !2428
  %711 = add i64 %591, 8
  store i64 %711, i64* %PC, align 8
  %712 = load i64, i64* %363, align 8
  %713 = add i64 %712, -1
  store i64 %713, i64* %RCX, align 8, !tbaa !2428
  %714 = icmp eq i64 %712, 0
  %715 = zext i1 %714 to i8
  store i8 %715, i8* %14, align 1, !tbaa !2432
  %716 = trunc i64 %713 to i32
  %717 = and i32 %716, 255
  %718 = tail call i32 @llvm.ctpop.i32(i32 %717) #10
  %719 = trunc i32 %718 to i8
  %720 = and i8 %719, 1
  %721 = xor i8 %720, 1
  store i8 %721, i8* %21, align 1, !tbaa !2446
  %722 = xor i64 %713, %712
  %723 = lshr i64 %722, 4
  %724 = trunc i64 %723 to i8
  %725 = and i8 %724, 1
  store i8 %725, i8* %26, align 1, !tbaa !2447
  %726 = icmp eq i64 %713, 0
  %727 = zext i1 %726 to i8
  store i8 %727, i8* %29, align 1, !tbaa !2448
  %728 = lshr i64 %713, 63
  %729 = trunc i64 %728 to i8
  store i8 %729, i8* %32, align 1, !tbaa !2449
  %730 = lshr i64 %712, 63
  %731 = xor i64 %728, %730
  %732 = add nuw nsw i64 %731, %730
  %733 = icmp eq i64 %732, 2
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %38, align 1, !tbaa !2450
  %735 = add i64 %591, 16
  store i64 %735, i64* %PC, align 8
  %736 = load i64, i64* %709, align 8
  store i64 %736, i64* %RDX, align 8, !tbaa !2428
  %737 = add i64 %360, -48
  %738 = add i64 %591, 20
  store i64 %738, i64* %PC, align 8
  %739 = inttoptr i64 %737 to i64*
  %740 = load i64, i64* %739, align 8
  store i64 %740, i64* %RSI, align 8, !tbaa !2428
  %741 = shl i64 %713, 3
  %742 = add i64 %741, %710
  %743 = add i64 %591, 24
  store i64 %743, i64* %PC, align 8
  %744 = inttoptr i64 %742 to i64*
  %745 = load i64, i64* %744, align 8
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = shl i64 %740, 3
  %747 = add i64 %746, %736
  %748 = add i64 %591, 28
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %747 to i64*
  store i64 %745, i64* %749, align 8
  %750 = load i64, i64* %RBP, align 8
  %751 = add i64 %750, -40
  %752 = load i64, i64* %PC, align 8
  %753 = add i64 %752, 4
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %751 to i64*
  %755 = load i64, i64* %754, align 8
  %756 = add i64 %755, -1
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = icmp eq i64 %755, 0
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %14, align 1, !tbaa !2432
  %759 = trunc i64 %756 to i32
  %760 = and i32 %759, 255
  %761 = tail call i32 @llvm.ctpop.i32(i32 %760) #10
  %762 = trunc i32 %761 to i8
  %763 = and i8 %762, 1
  %764 = xor i8 %763, 1
  store i8 %764, i8* %21, align 1, !tbaa !2446
  %765 = xor i64 %756, %755
  %766 = lshr i64 %765, 4
  %767 = trunc i64 %766 to i8
  %768 = and i8 %767, 1
  store i8 %768, i8* %26, align 1, !tbaa !2447
  %769 = icmp eq i64 %756, 0
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %29, align 1, !tbaa !2448
  %771 = lshr i64 %756, 63
  %772 = trunc i64 %771 to i8
  store i8 %772, i8* %32, align 1, !tbaa !2449
  %773 = lshr i64 %755, 63
  %774 = xor i64 %771, %773
  %775 = add nuw nsw i64 %774, %773
  %776 = icmp eq i64 %775, 2
  %777 = zext i1 %776 to i8
  store i8 %777, i8* %38, align 1, !tbaa !2450
  %778 = add i64 %750, -48
  %779 = add i64 %752, 12
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %778 to i64*
  store i64 %756, i64* %780, align 8
  %.pre12 = load i64, i64* %PC, align 8
  %.pre13 = load i64, i64* %RBP, align 8
  br label %block_404334
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406060__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_406060:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404780__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404780:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2453
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #10
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %39, align 1, !tbaa !2453
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2453
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2453
  store i8 0, i8* %42, align 1, !tbaa !2453
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400b50_register_tm_clones(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400b50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 6328568, i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %RSI, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %8, -6328568
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %17 = ashr i64 %10, 3
  %18 = lshr i64 %17, 63
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  %19 = add nsw i64 %18, %17
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %19, 1
  store i64 %22, i64* %RSI, align 8, !tbaa !2428
  store i8 %21, i8* %11, align 1, !tbaa !2453
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #10
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %12, align 1, !tbaa !2453
  store i8 0, i8* %13, align 1, !tbaa !2453
  %29 = icmp eq i64 %22, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %14, align 1, !tbaa !2453
  %31 = lshr i64 %22, 63
  %32 = trunc i64 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !2453
  store i8 0, i8* %16, align 1, !tbaa !2453
  %.v = select i1 %29, i64 50, i64 29
  %33 = add i64 %.v, %9
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  br i1 %29, label %block_400b88, label %block_400b73

block_400b73:                                     ; preds = %block_400b50
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2448
  store i8 0, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %13, align 1, !tbaa !2447
  %34 = add i64 %33, 21
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br label %block_400b88

block_400b88:                                     ; preds = %block_400b73, %block_400b50
  %35 = phi i64 [ %34, %block_400b73 ], [ %33, %block_400b50 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %7, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %38 = add i64 %35, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %5 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %5, 8
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4065b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4065b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4065e0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_405fc0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405fc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406020__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406060__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403290__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403290:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #10
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %23, %22
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2448
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2450
  store i64 %23, i64* %21, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = add i64 %16, 18
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %16, 19
  store i64 %56, i64* %PC, align 8
  %57 = load i64, i64* %5, align 8, !tbaa !2428
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  store i64 %58, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %16, 20
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %64 = add i64 %57, 16
  store i64 %64, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404c20__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404c20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  store i64 %9, i64* %7, align 8, !tbaa !2428
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -24
  %13 = load i64, i64* %RDI, align 8
  %14 = add i64 %11, 7
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %12 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -24
  %18 = load i64, i64* %RSI, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -16
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %23 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RSI, align 8, !tbaa !2428
  %28 = add i64 %22, -32
  %29 = add i64 %24, 8
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -16
  %33 = load i64, i64* %PC, align 8
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC, align 8
  %35 = inttoptr i64 %32 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 8
  store i64 %37, i64* %RSI, align 8, !tbaa !2428
  %38 = icmp ugt i64 %36, -9
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !2432
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 255
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #10
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %46, i8* %47, align 1, !tbaa !2446
  %48 = xor i64 %37, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %37, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %37, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %36, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %56
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = add i64 %33, 12
  store i64 %65, i64* %PC, align 8
  store i64 %37, i64* %35, align 8
  %66 = bitcast %union.anon* %3 to i64**
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %4, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %69 = bitcast i64* %68 to double*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %72 = bitcast i64* %71 to double*
  %73 = bitcast [32 x %union.VectorReg]* %4 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404c40

block_404c7e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -1
  %76 = add i64 %193, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i8*
  store i8 0, i8* %77, align 1
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 14
  store i64 %79, i64* %PC, align 8, !tbaa !2428
  br label %block_404c90

block_404c90:                                     ; preds = %block_404c8c, %block_404c7e
  %80 = phi i64 [ %.pre15, %block_404c8c ], [ %79, %block_404c7e ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_404c8c ], [ %188, %block_404c7e ]
  %81 = load i64, i64* %RBP, align 8
  %82 = add i64 %81, -1
  %83 = add i64 %80, 3
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i8*
  %85 = load i8, i8* %84, align 1
  %86 = and i8 %85, 1
  store i8 0, i8* %40, align 1, !tbaa !2432
  %87 = zext i8 %86 to i32
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #10
  %89 = trunc i32 %88 to i8
  %90 = xor i8 %89, 1
  store i8 %90, i8* %47, align 1, !tbaa !2446
  %91 = xor i8 %86, 1
  store i8 %91, i8* %55, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %64, align 1, !tbaa !2450
  store i8 0, i8* %52, align 1, !tbaa !2447
  %92 = zext i8 %86 to i64
  store i64 %92, i64* %RAX, align 8, !tbaa !2428
  %93 = add i64 %80, 9
  store i64 %93, i64* %PC, align 8
  %94 = load i64, i64* %7, align 8, !tbaa !2428
  %95 = add i64 %94, 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RBP, align 8, !tbaa !2428
  store i64 %95, i64* %7, align 8, !tbaa !2428
  %98 = add i64 %80, 10
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %95 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %101 = add i64 %94, 16
  store i64 %101, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404c4e:                                     ; preds = %block_404c40
  %102 = add i64 %233, 4
  store i64 %102, i64* %PC, align 8
  %103 = load i64, i64* %202, align 8
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = add i64 %103, 8
  store i64 %104, i64* %RCX, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -9
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %40, align 1, !tbaa !2432
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #10
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %47, align 1, !tbaa !2446
  %113 = xor i64 %104, %103
  %114 = lshr i64 %113, 4
  %115 = trunc i64 %114 to i8
  %116 = and i8 %115, 1
  store i8 %116, i8* %52, align 1, !tbaa !2447
  %117 = icmp eq i64 %104, 0
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %55, align 1, !tbaa !2448
  %119 = lshr i64 %104, 63
  %120 = trunc i64 %119 to i8
  store i8 %120, i8* %58, align 1, !tbaa !2449
  %121 = lshr i64 %103, 63
  %122 = xor i64 %119, %121
  %123 = add nuw nsw i64 %122, %119
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %64, align 1, !tbaa !2450
  %126 = add i64 %233, 15
  store i64 %126, i64* %PC, align 8
  store i64 %104, i64* %202, align 8
  %127 = load i64*, i64** %66, align 8
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = load i64, i64* %127, align 8
  store i64 %130, i64* %67, align 1, !tbaa !2451
  store double 0.000000e+00, double* %69, align 1, !tbaa !2451
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RAX, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = icmp ugt i64 %135, -9
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %40, align 1, !tbaa !2432
  %139 = trunc i64 %136 to i32
  %140 = and i32 %139, 255
  %141 = tail call i32 @llvm.ctpop.i32(i32 %140) #10
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  %144 = xor i8 %143, 1
  store i8 %144, i8* %47, align 1, !tbaa !2446
  %145 = xor i64 %136, %135
  %146 = lshr i64 %145, 4
  %147 = trunc i64 %146 to i8
  %148 = and i8 %147, 1
  store i8 %148, i8* %52, align 1, !tbaa !2447
  %149 = icmp eq i64 %136, 0
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %55, align 1, !tbaa !2448
  %151 = lshr i64 %136, 63
  %152 = trunc i64 %151 to i8
  store i8 %152, i8* %58, align 1, !tbaa !2449
  %153 = lshr i64 %135, 63
  %154 = xor i64 %151, %153
  %155 = add nuw nsw i64 %154, %151
  %156 = icmp eq i64 %155, 2
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %64, align 1, !tbaa !2450
  %158 = add i64 %128, 19
  store i64 %158, i64* %PC, align 8
  store i64 %136, i64* %134, align 8
  %159 = load i64*, i64** %66, align 8
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC, align 8
  %162 = load i64, i64* %159, align 8
  store i64 %162, i64* %70, align 1, !tbaa !2451
  store double 0.000000e+00, double* %72, align 1, !tbaa !2451
  %163 = add i64 %160, 8
  store i64 %163, i64* %PC, align 8
  %.cast = bitcast i64 %162 to double
  %164 = load double, double* %73, align 1
  %165 = fcmp uno double %.cast, %164
  br i1 %165, label %166, label %176

; <label>:166:                                    ; preds = %block_404c4e
  %167 = fadd double %.cast, %164
  %168 = bitcast double %167 to i64
  %169 = and i64 %168, 9221120237041090560
  %170 = icmp eq i64 %169, 9218868437227405312
  %171 = and i64 %168, 2251799813685247
  %172 = icmp ne i64 %171, 0
  %173 = and i1 %170, %172
  br i1 %173, label %174, label %182

; <label>:174:                                    ; preds = %166
  %175 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %163, %struct.Memory* %MEMORY.1) #13
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:176:                                    ; preds = %block_404c4e
  %177 = fcmp ogt double %.cast, %164
  br i1 %177, label %182, label %178

; <label>:178:                                    ; preds = %176
  %179 = fcmp olt double %.cast, %164
  br i1 %179, label %182, label %180

; <label>:180:                                    ; preds = %178
  %181 = fcmp oeq double %.cast, %164
  br i1 %181, label %182, label %186

; <label>:182:                                    ; preds = %180, %178, %176, %166
  %183 = phi i8 [ 0, %176 ], [ 0, %178 ], [ 1, %180 ], [ 1, %166 ]
  %184 = phi i8 [ 0, %176 ], [ 0, %178 ], [ 0, %180 ], [ 1, %166 ]
  %185 = phi i8 [ 0, %176 ], [ 1, %178 ], [ 0, %180 ], [ 1, %166 ]
  store i8 %183, i8* %55, align 1, !tbaa !2453
  store i8 %184, i8* %47, align 1, !tbaa !2453
  store i8 %185, i8* %40, align 1, !tbaa !2453
  br label %186

; <label>:186:                                    ; preds = %182, %180
  store i8 0, i8* %64, align 1, !tbaa !2453
  store i8 0, i8* %58, align 1, !tbaa !2453
  store i8 0, i8* %52, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %186, %174
  %187 = phi i64 [ %.pre14, %174 ], [ %163, %186 ]
  %188 = phi %struct.Memory* [ %175, %174 ], [ %MEMORY.1, %186 ]
  %189 = load i8, i8* %40, align 1, !tbaa !2432
  %190 = load i8, i8* %55, align 1, !tbaa !2448
  %191 = or i8 %190, %189
  %192 = icmp ne i8 %191, 0
  %.v22 = select i1 %192, i64 15, i64 6
  %193 = add i64 %.v22, %187
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  br i1 %192, label %block_404c87, label %block_404c7e

block_404c8c:                                     ; preds = %block_404c40
  %194 = add i64 %199, -1
  %195 = add i64 %233, 4
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i8*
  store i8 1, i8* %196, align 1
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_404c90

block_404c87:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %197 = add i64 %193, -71
  store i64 %197, i64* %PC, align 8, !tbaa !2428
  br label %block_404c40

block_404c40:                                     ; preds = %block_404c87, %block_404c20
  %198 = phi i64 [ %.pre, %block_404c20 ], [ %197, %block_404c87 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_404c20 ], [ %188, %block_404c87 ]
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -16
  %201 = add i64 %198, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %199, -24
  %205 = add i64 %198, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = sub i64 %203, %207
  %209 = icmp ult i64 %203, %207
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %40, align 1, !tbaa !2432
  %211 = trunc i64 %208 to i32
  %212 = and i32 %211, 255
  %213 = tail call i32 @llvm.ctpop.i32(i32 %212) #10
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  store i8 %216, i8* %47, align 1, !tbaa !2446
  %217 = xor i64 %207, %203
  %218 = xor i64 %217, %208
  %219 = lshr i64 %218, 4
  %220 = trunc i64 %219 to i8
  %221 = and i8 %220, 1
  store i8 %221, i8* %52, align 1, !tbaa !2447
  %222 = icmp eq i64 %208, 0
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %55, align 1, !tbaa !2448
  %224 = lshr i64 %208, 63
  %225 = trunc i64 %224 to i8
  store i8 %225, i8* %58, align 1, !tbaa !2449
  %226 = lshr i64 %203, 63
  %227 = lshr i64 %207, 63
  %228 = xor i64 %227, %226
  %229 = xor i64 %224, %226
  %230 = add nuw nsw i64 %229, %228
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %64, align 1, !tbaa !2450
  %.v = select i1 %222, i64 76, i64 14
  %233 = add i64 %.v, %198
  store i64 %233, i64* %PC, align 8, !tbaa !2428
  br i1 %222, label %block_404c8c, label %block_404c4e
}

; Function Attrs: noinline
define %struct.Memory* @sub_406550__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406550:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406580__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_401ce0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401ce0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401d00__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a20__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402a20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402a48

block_402ac9:                                     ; preds = %block_402a48
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402a58:                                     ; preds = %block_402a48
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 6528
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043f0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 6623
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_404470__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 6914
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_4045b0__Z13verify_sortedI14PointerWrapperIdEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402a48

block_402a48:                                     ; preds = %block_402a58, %block_402a20
  %255 = phi i64 [ %254, %block_402a58 ], [ %.pre, %block_402a20 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402a58, label %block_402ac9
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401210__Z11start_timerv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401210:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -2865
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call fastcc %struct.Memory* @ext_4006e0_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %15 = load i64, i64* %RAX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* bitcast (%start_time_type* @start_time to i64*), align 8
  %17 = add i64 %16, 9
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 10
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %14
}

; Function Attrs: noinline
define %struct.Memory* @sub_405d60__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405d60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 5
  store i64 %52, i64* %PC, align 8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %54 = load i64, i64* %53, align 1
  %55 = inttoptr i64 %50 to i64*
  store i64 %54, i64* %55, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405d75

block_405d8f:                                     ; preds = %block_405d75
  %56 = add i64 %123, -16
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %57 = add i64 %122, -11631
  %58 = add i64 %122, 11
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -48
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX, align 8
  %67 = add i64 %65, 8
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -11538
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %70, %struct.Memory* %2)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX, align 8
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %80 = add i64 %78, 473
  %81 = add i64 %78, 12
  %82 = load i64, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %85 = tail call %struct.Memory* @sub_405f80__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__renamed_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -40
  %88 = load i64, i64* %PC, align 8
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC, align 8
  %90 = load i64, i64* %53, align 1
  %91 = inttoptr i64 %87 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -40
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %92, -32
  %99 = add i64 %94, 8
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i64*
  store i64 %97, i64* %100, align 8
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, -75
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br label %block_405d75

block_405d75:                                     ; preds = %block_405d8f, %block_405d60
  %103 = phi i64 [ %102, %block_405d8f ], [ %.pre, %block_405d60 ]
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -16
  store i64 %105, i64* %RDI, align 8, !tbaa !2428
  %106 = add i64 %104, -24
  store i64 %106, i64* %RSI, align 8, !tbaa !2428
  %107 = add i64 %103, -11541
  %108 = add i64 %103, 13
  %109 = load i64, i64* %RSP, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_403060__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %107, %struct.Memory* %2)
  %113 = load i8, i8* %AL, align 1
  %114 = load i64, i64* %PC, align 8
  %115 = and i8 %113, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %116 = zext i8 %115 to i32
  %117 = tail call i32 @llvm.ctpop.i32(i32 %116) #10
  %118 = trunc i32 %117 to i8
  %119 = xor i8 %118, 1
  store i8 %119, i8* %20, align 1, !tbaa !2446
  %120 = xor i8 %115, 1
  store i8 %120, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %121 = icmp eq i8 %120, 0
  %.v = select i1 %121, i64 13, i64 8
  %122 = add i64 %.v, %114
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP, align 8
  br i1 %121, label %block_405d8f, label %block_405d8a

block_405d8a:                                     ; preds = %block_405d75
  %124 = add i64 %123, -32
  %125 = add i64 %122, 63
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %124 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = add i64 %123, -8
  %129 = add i64 %122, 67
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  store i64 %127, i64* %130, align 8
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -8
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %53, align 1, !tbaa !2451
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %138 = bitcast i64* %137 to double*
  store double 0.000000e+00, double* %138, align 1, !tbaa !2451
  %139 = load i64, i64* %RSP, align 8
  %140 = add i64 %139, 48
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  %141 = icmp ugt i64 %139, -49
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %13, align 1, !tbaa !2432
  %143 = trunc i64 %140 to i32
  %144 = and i32 %143, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #10
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %20, align 1, !tbaa !2446
  %149 = xor i64 %139, 16
  %150 = xor i64 %149, %140
  %151 = lshr i64 %150, 4
  %152 = trunc i64 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %26, align 1, !tbaa !2447
  %154 = icmp eq i64 %140, 0
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %29, align 1, !tbaa !2448
  %156 = lshr i64 %140, 63
  %157 = trunc i64 %156 to i8
  store i8 %157, i8* %32, align 1, !tbaa !2449
  %158 = lshr i64 %139, 63
  %159 = xor i64 %156, %158
  %160 = add nuw nsw i64 %159, %156
  %161 = icmp eq i64 %160, 2
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %38, align 1, !tbaa !2450
  %163 = add i64 %133, 10
  store i64 %163, i64* %PC, align 8
  %164 = add i64 %139, 56
  %165 = inttoptr i64 %140 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RBP, align 8, !tbaa !2428
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %133, 11
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %164 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  %170 = add i64 %139, 64
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403c70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 118
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_403d00__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #10
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2446
  %94 = xor i64 %85, %84
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2447
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2448
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2449
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2450
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405600__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405600:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2432
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #10
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2446
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2447
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406000__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_406000:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401fd0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401fd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -88
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 80
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %PC, align 8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %53 = load i64, i64* %52, align 1
  %54 = inttoptr i64 %49 to i64*
  store i64 %53, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401ff0

block_402000:                                     ; preds = %block_401ff0
  %68 = add i64 %198, -8
  %69 = add i64 %231, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %72 = add i64 %198, -48
  %73 = add i64 %231, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -16
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %75, -56
  %82 = add i64 %77, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  store i64 %80, i64* %83, align 8
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -24
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = add i64 %84, -64
  %91 = add i64 %86, 8
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  store i64 %89, i64* %92, align 8
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -48
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %99 = add i64 %93, -56
  %100 = add i64 %95, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %103 = add i64 %93, -64
  %104 = add i64 %95, 13
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %52, align 1, !tbaa !2451
  store double 0.000000e+00, double* %67, align 1, !tbaa !2451
  %107 = add i64 %95, 17288
  %108 = add i64 %95, 18
  %109 = load i64, i64* %RSP, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_4063a0__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__renamed_(%struct.State* nonnull %0, i64 %107, %struct.Memory* %2)
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -72
  %115 = load i64, i64* %PC, align 8
  store i64 %114, i64* %RDI, align 8, !tbaa !2428
  %116 = add i64 %115, 9
  store i64 %116, i64* %PC, align 8
  %117 = load i64, i64* %52, align 1
  %118 = inttoptr i64 %114 to i64*
  store i64 %117, i64* %118, align 8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 16173
  %121 = add i64 %119, 5
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_405f60__ZNK12ValueWrapperIdEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, 15816
  %128 = add i64 %126, 5
  %129 = load i64, i64* %RSP, align 8, !tbaa !2428
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %128, i64* %131, align 8
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  %132 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %127, %struct.Memory* %2)
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -36
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = add i32 %138, 1
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = icmp eq i32 %138, -1
  %142 = icmp eq i32 %139, 0
  %143 = or i1 %141, %142
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %12, align 1, !tbaa !2432
  %145 = and i32 %139, 255
  %146 = tail call i32 @llvm.ctpop.i32(i32 %145) #10
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %19, align 1, !tbaa !2446
  %150 = xor i32 %139, %138
  %151 = lshr i32 %150, 4
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %25, align 1, !tbaa !2447
  %154 = zext i1 %142 to i8
  store i8 %154, i8* %28, align 1, !tbaa !2448
  %155 = lshr i32 %139, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %31, align 1, !tbaa !2449
  %157 = lshr i32 %138, 31
  %158 = xor i32 %155, %157
  %159 = add nuw nsw i32 %158, %155
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %37, align 1, !tbaa !2450
  %162 = add i64 %135, 9
  store i64 %162, i64* %PC, align 8
  store i32 %139, i32* %137, align 4
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, -86
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  br label %block_401ff0

block_40204b:                                     ; preds = %block_401ff0
  %165 = load i64, i64* %RSP, align 8
  %166 = add i64 %165, 80
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  %167 = icmp ugt i64 %165, -81
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %12, align 1, !tbaa !2432
  %169 = trunc i64 %166 to i32
  %170 = and i32 %169, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i64 %165, 16
  %176 = xor i64 %175, %166
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %25, align 1, !tbaa !2447
  %180 = icmp eq i64 %166, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %28, align 1, !tbaa !2448
  %182 = lshr i64 %166, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %31, align 1, !tbaa !2449
  %184 = lshr i64 %165, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %37, align 1, !tbaa !2450
  %189 = add i64 %231, 5
  store i64 %189, i64* %PC, align 8
  %190 = add i64 %165, 88
  %191 = inttoptr i64 %166 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RBP, align 8, !tbaa !2428
  store i64 %190, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %231, 6
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %190 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  %196 = add i64 %165, 96
  store i64 %196, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401ff0:                                     ; preds = %block_402000, %block_401fd0
  %197 = phi i64 [ %164, %block_402000 ], [ %.pre, %block_401fd0 ]
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -36
  %200 = add i64 %197, 3
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %205 = sub i32 %202, %204
  %206 = icmp ult i32 %202, %204
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %12, align 1, !tbaa !2432
  %208 = and i32 %205, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #10
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %19, align 1, !tbaa !2446
  %213 = xor i32 %204, %202
  %214 = xor i32 %213, %205
  %215 = lshr i32 %214, 4
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  store i8 %217, i8* %25, align 1, !tbaa !2447
  %218 = icmp eq i32 %205, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %28, align 1, !tbaa !2448
  %220 = lshr i32 %205, 31
  %221 = trunc i32 %220 to i8
  store i8 %221, i8* %31, align 1, !tbaa !2449
  %222 = lshr i32 %202, 31
  %223 = lshr i32 %204, 31
  %224 = xor i32 %223, %222
  %225 = xor i32 %220, %222
  %226 = add nuw nsw i32 %225, %224
  %227 = icmp eq i32 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %37, align 1, !tbaa !2450
  %229 = icmp ne i8 %221, 0
  %230 = xor i1 %229, %227
  %.v = select i1 %230, i64 16, i64 91
  %231 = add i64 %.v, %197
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  br i1 %230, label %block_402000, label %block_40204b
}

; Function Attrs: noinline
define %struct.Memory* @sub_404470__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404470:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -104
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 96
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  store i64 %37, i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  store i64 %38, i64* %RCX, align 8, !tbaa !2428
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 19
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RAX, align 8
  %49 = load i64, i64* %PC, align 8
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %50 = load i64, i64* %RCX, align 8
  store i64 %50, i64* %RSI, align 8, !tbaa !2428
  %51 = add i64 %49, 760
  %52 = add i64 %49, 11
  %53 = load i64, i64* %RSP, align 8, !tbaa !2428
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55, align 8
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  store i64 %51, i64* %PC, align 8, !tbaa !2428
  %56 = tail call %struct.Memory* @sub_404780__ZmiIdElR14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %51, %struct.Memory* %2)
  %57 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -32
  %60 = load i64, i64* %RAX, align 8
  %61 = add i64 %57, 11
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  store i64 %60, i64* %62, align 8
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -32
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = ashr i64 %68, 63
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %70 = load i64, i64* %RCX, align 8
  %71 = add i64 %65, 9
  store i64 %71, i64* %PC, align 8
  %72 = sext i64 %70 to i128
  %73 = and i128 %72, -18446744073709551616
  %74 = zext i64 %69 to i128
  %75 = shl nuw i128 %74, 64
  %76 = zext i64 %68 to i128
  %77 = or i128 %75, %76
  %78 = zext i64 %70 to i128
  %79 = or i128 %73, %78
  %80 = sdiv i128 %77, %79
  %81 = trunc i128 %80 to i64
  %82 = and i128 %80, 18446744073709551615
  %83 = sext i64 %81 to i128
  %84 = and i128 %83, -18446744073709551616
  %85 = or i128 %84, %82
  %86 = icmp eq i128 %80, %85
  br i1 %86, label %89, label %87

; <label>:87:                                     ; preds = %block_404470
  %88 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %71, %struct.Memory* %56) #13
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:89:                                     ; preds = %block_404470
  %90 = srem i128 %77, %79
  %91 = trunc i128 %90 to i64
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  store i64 %91, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %89, %87
  %92 = phi i64 [ %.pre7, %87 ], [ %63, %89 ]
  %93 = phi i64 [ %.pre6, %87 ], [ %71, %89 ]
  %94 = phi i64 [ %.pre, %87 ], [ %81, %89 ]
  %95 = phi %struct.Memory* [ %88, %87 ], [ %56, %89 ]
  %96 = add i64 %94, -1
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = icmp eq i64 %94, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %12, align 1, !tbaa !2432
  %99 = trunc i64 %96 to i32
  %100 = and i32 %99, 255
  %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #10
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* %19, align 1, !tbaa !2446
  %105 = xor i64 %96, %94
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  store i8 %108, i8* %24, align 1, !tbaa !2447
  %109 = icmp eq i64 %96, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %27, align 1, !tbaa !2448
  %111 = lshr i64 %96, 63
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %30, align 1, !tbaa !2449
  %113 = lshr i64 %94, 63
  %114 = xor i64 %111, %113
  %115 = add nuw nsw i64 %114, %113
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %36, align 1, !tbaa !2450
  %118 = add i64 %92, -24
  %119 = add i64 %93, 8
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %118 to i64*
  store i64 %96, i64* %120, align 8
  %121 = bitcast i64* %RAX to i64**
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %124 = bitcast i64* %123 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4044af

block_404518:                                     ; preds = %block_404523, %block_40450c
  %125 = phi i64 [ %468, %block_404523 ], [ %.pre9, %block_40450c ]
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = add i64 %125, 5
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = add i64 %130, -1
  %132 = icmp eq i64 %130, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %12, align 1, !tbaa !2432
  %134 = trunc i64 %131 to i32
  %135 = and i32 %134, 255
  %136 = tail call i32 @llvm.ctpop.i32(i32 %135) #10
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  store i8 %139, i8* %19, align 1, !tbaa !2446
  %140 = xor i64 %131, %130
  %141 = lshr i64 %140, 4
  %142 = trunc i64 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* %24, align 1, !tbaa !2447
  %144 = icmp eq i64 %131, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %27, align 1, !tbaa !2448
  %146 = lshr i64 %131, 63
  %147 = trunc i64 %146 to i8
  store i8 %147, i8* %30, align 1, !tbaa !2449
  %148 = lshr i64 %130, 63
  %149 = xor i64 %146, %148
  %150 = add nuw nsw i64 %149, %148
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %36, align 1, !tbaa !2450
  %153 = icmp ne i8 %147, 0
  %154 = xor i1 %153, %151
  %.v10 = select i1 %154, i64 146, i64 11
  %155 = add i64 %.v10, %125
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  br i1 %154, label %block_4045aa, label %block_404523

block_4044af:                                     ; preds = %block_4044ba, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %156 = phi i64 [ %327, %block_4044ba ], [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -24
  %159 = add i64 %156, 5
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i64*
  %161 = load i64, i64* %160, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %162 = trunc i64 %161 to i32
  %163 = and i32 %162, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #10
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  store i8 %167, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  %168 = icmp eq i64 %161, 0
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %27, align 1, !tbaa !2448
  %170 = lshr i64 %161, 63
  %171 = trunc i64 %170 to i8
  store i8 %171, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  %172 = icmp ne i8 %171, 0
  %.v = select i1 %172, i64 88, i64 6
  %173 = add i64 %.v, %159
  store i64 %173, i64* %PC, align 8, !tbaa !2428
  br i1 %172, label %block_40450c, label %block_4044ba

block_40450c:                                     ; preds = %block_4044af
  %174 = add i64 %157, -32
  %175 = add i64 %173, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %174 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = add i64 %177, -1
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = icmp eq i64 %177, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %12, align 1, !tbaa !2432
  %181 = trunc i64 %178 to i32
  %182 = and i32 %181, 255
  %183 = tail call i32 @llvm.ctpop.i32(i32 %182) #10
  %184 = trunc i32 %183 to i8
  %185 = and i8 %184, 1
  %186 = xor i8 %185, 1
  store i8 %186, i8* %19, align 1, !tbaa !2446
  %187 = xor i64 %178, %177
  %188 = lshr i64 %187, 4
  %189 = trunc i64 %188 to i8
  %190 = and i8 %189, 1
  store i8 %190, i8* %24, align 1, !tbaa !2447
  %191 = icmp eq i64 %178, 0
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %27, align 1, !tbaa !2448
  %193 = lshr i64 %178, 63
  %194 = trunc i64 %193 to i8
  store i8 %194, i8* %30, align 1, !tbaa !2449
  %195 = lshr i64 %177, 63
  %196 = xor i64 %193, %195
  %197 = add nuw nsw i64 %196, %195
  %198 = icmp eq i64 %197, 2
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %36, align 1, !tbaa !2450
  %200 = add i64 %173, 12
  store i64 %200, i64* %PC, align 8
  store i64 %178, i64* %160, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_404518

block_4045aa:                                     ; preds = %block_404518
  %201 = load i64, i64* %RSP, align 8
  %202 = add i64 %201, 96
  store i64 %202, i64* %RSP, align 8, !tbaa !2428
  %203 = icmp ugt i64 %201, -97
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %12, align 1, !tbaa !2432
  %205 = trunc i64 %202 to i32
  %206 = and i32 %205, 255
  %207 = tail call i32 @llvm.ctpop.i32(i32 %206) #10
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  store i8 %210, i8* %19, align 1, !tbaa !2446
  %211 = xor i64 %202, %201
  %212 = lshr i64 %211, 4
  %213 = trunc i64 %212 to i8
  %214 = and i8 %213, 1
  store i8 %214, i8* %24, align 1, !tbaa !2447
  %215 = icmp eq i64 %202, 0
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %27, align 1, !tbaa !2448
  %217 = lshr i64 %202, 63
  %218 = trunc i64 %217 to i8
  store i8 %218, i8* %30, align 1, !tbaa !2449
  %219 = lshr i64 %201, 63
  %220 = xor i64 %217, %219
  %221 = add nuw nsw i64 %220, %217
  %222 = icmp eq i64 %221, 2
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %36, align 1, !tbaa !2450
  %224 = add i64 %155, 5
  store i64 %224, i64* %PC, align 8
  %225 = add i64 %201, 104
  %226 = inttoptr i64 %202 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %RBP, align 8, !tbaa !2428
  store i64 %225, i64* %RSP, align 8, !tbaa !2428
  %228 = add i64 %155, 6
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %225 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %PC, align 8, !tbaa !2428
  %231 = add i64 %201, 112
  store i64 %231, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %95

block_4044ba:                                     ; preds = %block_4044af
  %232 = add i64 %157, -8
  store i64 %232, i64* %RDI, align 8, !tbaa !2428
  %233 = add i64 %173, 8
  store i64 %233, i64* %PC, align 8
  %234 = load i64, i64* %160, align 8
  store i64 %234, i64* %RSI, align 8, !tbaa !2428
  %235 = add i64 %173, 758
  %236 = add i64 %173, 13
  %237 = load i64, i64* %RSP, align 8, !tbaa !2428
  %238 = add i64 %237, -8
  %239 = inttoptr i64 %238 to i64*
  store i64 %236, i64* %239, align 8
  store i64 %238, i64* %RSP, align 8, !tbaa !2428
  store i64 %235, i64* %PC, align 8, !tbaa !2428
  %240 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %235, %struct.Memory* %95)
  %241 = load i64, i64* %RBP, align 8
  %242 = add i64 %241, -48
  %243 = load i64, i64* %PC, align 8
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  %244 = load i64, i64* %RAX, align 8
  %245 = add i64 %243, 8
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %242 to i64*
  store i64 %244, i64* %246, align 8
  %247 = load i64, i64* %PC, align 8
  %248 = add i64 %247, 625
  %249 = add i64 %247, 5
  %250 = load i64, i64* %RSP, align 8, !tbaa !2428
  %251 = add i64 %250, -8
  %252 = inttoptr i64 %251 to i64*
  store i64 %249, i64* %252, align 8
  store i64 %251, i64* %RSP, align 8, !tbaa !2428
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %253 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %248, %struct.Memory* %95)
  %254 = load i64*, i64** %121, align 8
  %255 = load i64, i64* %PC, align 8
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC, align 8
  %257 = load i64, i64* %254, align 8
  store i64 %257, i64* %122, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -40
  %260 = add i64 %255, 9
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %261, align 8
  %262 = load i64, i64* %RBP, align 8
  %263 = add i64 %262, -32
  %264 = load i64, i64* %PC, align 8
  %265 = add i64 %264, 4
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266, align 8
  store i64 %267, i64* %RDI, align 8, !tbaa !2428
  %268 = add i64 %262, -8
  %269 = add i64 %264, 8
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %268 to i64*
  %271 = load i64, i64* %270, align 8
  store i64 %271, i64* %RAX, align 8, !tbaa !2428
  %272 = add i64 %262, -56
  %273 = add i64 %264, 12
  store i64 %273, i64* %PC, align 8
  %274 = inttoptr i64 %272 to i64*
  store i64 %271, i64* %274, align 8
  %275 = load i64, i64* %RBP, align 8
  %276 = add i64 %275, -24
  %277 = load i64, i64* %PC, align 8
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279, align 8
  store i64 %280, i64* %RDX, align 8, !tbaa !2428
  %281 = add i64 %275, -40
  %282 = add i64 %277, 9
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %281 to i64*
  %284 = load i64, i64* %283, align 8
  store i64 %284, i64* %122, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %285 = add i64 %275, -56
  %286 = add i64 %277, 13
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %285 to i64*
  %288 = load i64, i64* %287, align 8
  store i64 %288, i64* %RSI, align 8, !tbaa !2428
  %289 = add i64 %277, 759
  %290 = add i64 %277, 18
  %291 = load i64, i64* %RSP, align 8, !tbaa !2428
  %292 = add i64 %291, -8
  %293 = inttoptr i64 %292 to i64*
  store i64 %290, i64* %293, align 8
  store i64 %292, i64* %RSP, align 8, !tbaa !2428
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  %294 = tail call %struct.Memory* @sub_4047e0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %289, %struct.Memory* %95)
  %295 = load i64, i64* %RBP, align 8
  %296 = add i64 %295, -24
  %297 = load i64, i64* %PC, align 8
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC, align 8
  %299 = inttoptr i64 %296 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = add i64 %300, -1
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = icmp ne i64 %300, 0
  %303 = zext i1 %302 to i8
  store i8 %303, i8* %12, align 1, !tbaa !2432
  %304 = trunc i64 %301 to i32
  %305 = and i32 %304, 255
  %306 = tail call i32 @llvm.ctpop.i32(i32 %305) #10
  %307 = trunc i32 %306 to i8
  %308 = and i8 %307, 1
  %309 = xor i8 %308, 1
  store i8 %309, i8* %19, align 1, !tbaa !2446
  %310 = xor i64 %300, 16
  %311 = xor i64 %310, %301
  %312 = lshr i64 %311, 4
  %313 = trunc i64 %312 to i8
  %314 = and i8 %313, 1
  store i8 %314, i8* %24, align 1, !tbaa !2447
  %315 = icmp eq i64 %301, 0
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %27, align 1, !tbaa !2448
  %317 = lshr i64 %301, 63
  %318 = trunc i64 %317 to i8
  store i8 %318, i8* %30, align 1, !tbaa !2449
  %319 = lshr i64 %300, 63
  %320 = xor i64 %317, %319
  %321 = xor i64 %317, 1
  %322 = add nuw nsw i64 %320, %321
  %323 = icmp eq i64 %322, 2
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %36, align 1, !tbaa !2450
  %325 = add i64 %297, 12
  store i64 %325, i64* %PC, align 8
  store i64 %301, i64* %299, align 8
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, -88
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  br label %block_4044af

block_404523:                                     ; preds = %block_404518
  %328 = add i64 %126, -8
  store i64 %328, i64* %RDI, align 8, !tbaa !2428
  %329 = add i64 %155, 8
  store i64 %329, i64* %PC, align 8
  %330 = load i64, i64* %129, align 8
  store i64 %330, i64* %RSI, align 8, !tbaa !2428
  %331 = add i64 %155, 653
  %332 = add i64 %155, 13
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %95)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -72
  %339 = load i64, i64* %PC, align 8
  store i64 %338, i64* %RDI, align 8, !tbaa !2428
  %340 = load i64, i64* %RAX, align 8
  %341 = add i64 %339, 8
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %338 to i64*
  store i64 %340, i64* %342, align 8
  %343 = load i64, i64* %PC, align 8
  %344 = add i64 %343, 520
  %345 = add i64 %343, 5
  %346 = load i64, i64* %RSP, align 8, !tbaa !2428
  %347 = add i64 %346, -8
  %348 = inttoptr i64 %347 to i64*
  store i64 %345, i64* %348, align 8
  store i64 %347, i64* %RSP, align 8, !tbaa !2428
  store i64 %344, i64* %PC, align 8, !tbaa !2428
  %349 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %344, %struct.Memory* %95)
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -8
  %352 = load i64, i64* %PC, align 8
  store i64 %351, i64* %RDI, align 8, !tbaa !2428
  %353 = load i64*, i64** %121, align 8
  %354 = add i64 %352, 8
  store i64 %354, i64* %PC, align 8
  %355 = load i64, i64* %353, align 8
  store i64 %355, i64* %122, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %356 = add i64 %350, -64
  %357 = add i64 %352, 13
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i64*
  store i64 %355, i64* %358, align 8
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, 502
  %361 = add i64 %359, 5
  %362 = load i64, i64* %RSP, align 8, !tbaa !2428
  %363 = add i64 %362, -8
  %364 = inttoptr i64 %363 to i64*
  store i64 %361, i64* %364, align 8
  store i64 %363, i64* %RSP, align 8, !tbaa !2428
  store i64 %360, i64* %PC, align 8, !tbaa !2428
  %365 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %360, %struct.Memory* %95)
  %366 = load i64, i64* %RBP, align 8
  %367 = add i64 %366, -8
  %368 = load i64, i64* %PC, align 8
  store i64 %367, i64* %RDI, align 8, !tbaa !2428
  %369 = load i64*, i64** %121, align 8
  %370 = add i64 %368, 8
  store i64 %370, i64* %PC, align 8
  %371 = load i64, i64* %369, align 8
  store i64 %371, i64* %122, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %372 = add i64 %366, -24
  %373 = add i64 %368, 12
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %372 to i64*
  %375 = load i64, i64* %374, align 8
  store i64 %375, i64* %RSI, align 8, !tbaa !2428
  %376 = add i64 %366, -96
  %377 = add i64 %368, 17
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i64*
  store i64 %371, i64* %378, align 8
  %379 = load i64, i64* %PC, align 8
  %380 = add i64 %379, 592
  %381 = add i64 %379, 5
  %382 = load i64, i64* %RSP, align 8, !tbaa !2428
  %383 = add i64 %382, -8
  %384 = inttoptr i64 %383 to i64*
  store i64 %381, i64* %384, align 8
  store i64 %383, i64* %RSP, align 8, !tbaa !2428
  store i64 %380, i64* %PC, align 8, !tbaa !2428
  %385 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %380, %struct.Memory* %95)
  %386 = load i64, i64* %RBP, align 8
  %387 = add i64 %386, -80
  %388 = load i64, i64* %PC, align 8
  store i64 %387, i64* %RDI, align 8, !tbaa !2428
  %389 = load i64, i64* %RAX, align 8
  %390 = add i64 %388, 8
  store i64 %390, i64* %PC, align 8
  %391 = inttoptr i64 %387 to i64*
  store i64 %389, i64* %391, align 8
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 467
  %394 = add i64 %392, 5
  %395 = load i64, i64* %RSP, align 8, !tbaa !2428
  %396 = add i64 %395, -8
  %397 = inttoptr i64 %396 to i64*
  store i64 %394, i64* %397, align 8
  store i64 %396, i64* %RSP, align 8, !tbaa !2428
  store i64 %393, i64* %PC, align 8, !tbaa !2428
  %398 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %393, %struct.Memory* %95)
  %399 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %19, align 1, !tbaa !2446
  store i8 1, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  store i8 0, i8* %24, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %400 = load i64, i64* %RBP, align 8
  %401 = add i64 %400, -96
  %402 = add i64 %399, 9
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %401 to i64*
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %122, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %405 = load i64*, i64** %121, align 8
  %406 = add i64 %399, 13
  store i64 %406, i64* %PC, align 8
  store i64 %404, i64* %405, align 8
  %407 = load i64, i64* %RBP, align 8
  %408 = add i64 %407, -24
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, 4
  store i64 %410, i64* %PC, align 8
  %411 = inttoptr i64 %408 to i64*
  %412 = load i64, i64* %411, align 8
  store i64 %412, i64* %RDI, align 8, !tbaa !2428
  %413 = add i64 %407, -8
  %414 = add i64 %409, 8
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %413 to i64*
  %416 = load i64, i64* %415, align 8
  store i64 %416, i64* %RAX, align 8, !tbaa !2428
  %417 = add i64 %407, -88
  %418 = add i64 %409, 12
  store i64 %418, i64* %PC, align 8
  %419 = inttoptr i64 %417 to i64*
  store i64 %416, i64* %419, align 8
  %420 = load i64, i64* %RBP, align 8
  %421 = add i64 %420, -64
  %422 = load i64, i64* %PC, align 8
  %423 = add i64 %422, 5
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %421 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %122, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %426 = add i64 %420, -88
  %427 = add i64 %422, 9
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %RSI, align 8, !tbaa !2428
  %430 = add i64 %422, 597
  %431 = add i64 %422, 14
  %432 = load i64, i64* %RSP, align 8, !tbaa !2428
  %433 = add i64 %432, -8
  %434 = inttoptr i64 %433 to i64*
  store i64 %431, i64* %434, align 8
  store i64 %433, i64* %RSP, align 8, !tbaa !2428
  store i64 %430, i64* %PC, align 8, !tbaa !2428
  %435 = tail call %struct.Memory* @sub_4047e0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %430, %struct.Memory* %95)
  %436 = load i64, i64* %RBP, align 8
  %437 = add i64 %436, -24
  %438 = load i64, i64* %PC, align 8
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %437 to i64*
  %441 = load i64, i64* %440, align 8
  %442 = add i64 %441, -1
  store i64 %442, i64* %RAX, align 8, !tbaa !2428
  %443 = icmp ne i64 %441, 0
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %12, align 1, !tbaa !2432
  %445 = trunc i64 %442 to i32
  %446 = and i32 %445, 255
  %447 = tail call i32 @llvm.ctpop.i32(i32 %446) #10
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  store i8 %450, i8* %19, align 1, !tbaa !2446
  %451 = xor i64 %441, 16
  %452 = xor i64 %451, %442
  %453 = lshr i64 %452, 4
  %454 = trunc i64 %453 to i8
  %455 = and i8 %454, 1
  store i8 %455, i8* %24, align 1, !tbaa !2447
  %456 = icmp eq i64 %442, 0
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %27, align 1, !tbaa !2448
  %458 = lshr i64 %442, 63
  %459 = trunc i64 %458 to i8
  store i8 %459, i8* %30, align 1, !tbaa !2449
  %460 = lshr i64 %441, 63
  %461 = xor i64 %458, %460
  %462 = xor i64 %458, 1
  %463 = add nuw nsw i64 %461, %462
  %464 = icmp eq i64 %463, 2
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %36, align 1, !tbaa !2450
  %466 = add i64 %438, 12
  store i64 %466, i64* %PC, align 8
  store i64 %442, i64* %440, align 8
  %467 = load i64, i64* %PC, align 8
  %468 = add i64 %467, -141
  store i64 %468, i64* %PC, align 8, !tbaa !2428
  br label %block_404518
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402170__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402170:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = bitcast %union.VectorReg* %4 to double*
  %51 = bitcast i64* %RCX to i64**
  %52 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_402180

block_4021af:                                     ; preds = %block_402180
  %53 = load i64, i64* %RSP, align 8
  %54 = add i64 %53, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  %55 = icmp ugt i64 %53, -17
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %14, align 1, !tbaa !2432
  %57 = trunc i64 %54 to i32
  %58 = and i32 %57, 255
  %59 = tail call i32 @llvm.ctpop.i32(i32 %58) #10
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = xor i8 %61, 1
  store i8 %62, i8* %21, align 1, !tbaa !2446
  %63 = xor i64 %53, 16
  %64 = xor i64 %63, %54
  %65 = lshr i64 %64, 4
  %66 = trunc i64 %65 to i8
  %67 = and i8 %66, 1
  store i8 %67, i8* %27, align 1, !tbaa !2447
  %68 = icmp eq i64 %54, 0
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %30, align 1, !tbaa !2448
  %70 = lshr i64 %54, 63
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %33, align 1, !tbaa !2449
  %72 = lshr i64 %53, 63
  %73 = xor i64 %70, %72
  %74 = add nuw nsw i64 %73, %70
  %75 = icmp eq i64 %74, 2
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %39, align 1, !tbaa !2450
  %77 = add i64 %120, 5
  store i64 %77, i64* %PC, align 8
  %78 = add i64 %53, 24
  %79 = inttoptr i64 %54 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RBP, align 8, !tbaa !2428
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %81 = add i64 %120, 6
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %78 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  %84 = add i64 %53, 32
  store i64 %84, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402180:                                     ; preds = %block_40218e, %block_402170
  %85 = phi i64 [ %.pre, %block_402170 ], [ %163, %block_40218e ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402170 ], [ %126, %block_40218e ]
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -8
  %88 = add i64 %85, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %86, -16
  %92 = add i64 %85, 8
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %90, %94
  %96 = icmp ult i64 %90, %94
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %14, align 1, !tbaa !2432
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #10
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %21, align 1, !tbaa !2446
  %104 = xor i64 %94, %90
  %105 = xor i64 %104, %95
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  store i8 %108, i8* %27, align 1, !tbaa !2447
  %109 = icmp eq i64 %95, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %30, align 1, !tbaa !2448
  %111 = lshr i64 %95, 63
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %33, align 1, !tbaa !2449
  %113 = lshr i64 %90, 63
  %114 = lshr i64 %94, 63
  %115 = xor i64 %114, %113
  %116 = xor i64 %111, %113
  %117 = add nuw nsw i64 %116, %115
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %39, align 1, !tbaa !2450
  %.v = select i1 %109, i64 47, i64 14
  %120 = add i64 %.v, %85
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  br i1 %109, label %block_4021af, label %block_40218e

block_40218e:                                     ; preds = %block_402180
  %121 = add i64 %120, -6686
  %122 = add i64 %120, 5
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call fastcc %struct.Memory* @ext_400770_rand(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %127 = load i32, i32* %EAX, align 4
  %128 = load i64, i64* %PC, align 8
  %129 = sitofp i32 %127 to double
  store double %129, double* %50, align 1, !tbaa !2451
  %130 = load i64, i64* %RBP, align 8
  %131 = add i64 %130, -8
  %132 = add i64 %128, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %RCX, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  store i64 %135, i64* %RDX, align 8, !tbaa !2428
  %136 = icmp ugt i64 %134, -9
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %14, align 1, !tbaa !2432
  %138 = trunc i64 %135 to i32
  %139 = and i32 %138, 255
  %140 = tail call i32 @llvm.ctpop.i32(i32 %139) #10
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  store i8 %143, i8* %21, align 1, !tbaa !2446
  %144 = xor i64 %135, %134
  %145 = lshr i64 %144, 4
  %146 = trunc i64 %145 to i8
  %147 = and i8 %146, 1
  store i8 %147, i8* %27, align 1, !tbaa !2447
  %148 = icmp eq i64 %135, 0
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %30, align 1, !tbaa !2448
  %150 = lshr i64 %135, 63
  %151 = trunc i64 %150 to i8
  store i8 %151, i8* %33, align 1, !tbaa !2449
  %152 = lshr i64 %134, 63
  %153 = xor i64 %150, %152
  %154 = add nuw nsw i64 %153, %150
  %155 = icmp eq i64 %154, 2
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %39, align 1, !tbaa !2450
  %157 = add i64 %128, 19
  store i64 %157, i64* %PC, align 8
  store i64 %135, i64* %133, align 8
  %158 = load i64*, i64** %51, align 8
  %159 = load i64, i64* %PC, align 8
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC, align 8
  %161 = load i64, i64* %52, align 1
  store i64 %161, i64* %158, align 8
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, -42
  store i64 %163, i64* %PC, align 8, !tbaa !2428
  br label %block_402180
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406240__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_406240:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007e0___cxx_global_var_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4007e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 ptrtoint (%VData_type* @VData to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%VData_type* @VData to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000) to i32), i32 255)) #10
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  br label %block_4007fb

block_4007fb:                                     ; preds = %block_4007fb, %block_4007e0
  %47 = phi i64 [ %98, %block_4007fb ], [ %42, %block_4007e0 ]
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = add i64 %47, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %48, -16
  %54 = add i64 %47, 11
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 5466
  %58 = add i64 %56, 5
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2Ev_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 ptrtoint (%VData_type* @VData to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2432
  store i8 %46, i8* %19, align 1, !tbaa !2446
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2447
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2448
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2449
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%VData_type* @VData to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %63, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2432
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #10
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2446
  %80 = xor i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2447
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2450
  %94 = add i64 %64, -8
  %95 = add i64 %63, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, -47
  %99 = add i64 %97, 6
  %100 = load i8, i8* %28, align 1, !tbaa !2448
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i64 %98, i64 %99
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_4007fb, label %block_400830

block_400830:                                     ; preds = %block_4007fb
  %103 = load i64, i64* %RSP, align 8
  %104 = add i64 %103, 16
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -17
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %12, align 1, !tbaa !2432
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #10
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %19, align 1, !tbaa !2446
  %113 = xor i64 %103, 16
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2447
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %28, align 1, !tbaa !2448
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %31, align 1, !tbaa !2449
  %122 = lshr i64 %103, 63
  %123 = xor i64 %120, %122
  %124 = add nuw nsw i64 %123, %120
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %37, align 1, !tbaa !2450
  %127 = add i64 %102, 5
  store i64 %127, i64* %PC, align 8
  %128 = add i64 %103, 24
  %129 = inttoptr i64 %104 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RBP, align 8, !tbaa !2428
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %102, 6
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %134 = add i64 %103, 32
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401e00__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401e00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = add i64 %9, 8
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %10 to i64*
  store i64 %13, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RDI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %RSI, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %33 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_401e11

block_401e1f:                                     ; preds = %block_401e11
  %34 = add i64 %113, 4
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %82, align 8
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  store i64 %36, i64* %RCX, align 8, !tbaa !2428
  %37 = icmp ugt i64 %35, -9
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %27, align 1, !tbaa !2432
  %39 = trunc i64 %36 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #10
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %28, align 1, !tbaa !2446
  %45 = xor i64 %36, %35
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %29, align 1, !tbaa !2447
  %49 = icmp eq i64 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %30, align 1, !tbaa !2448
  %51 = lshr i64 %36, 63
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %31, align 1, !tbaa !2449
  %53 = lshr i64 %35, 63
  %54 = xor i64 %51, %53
  %55 = add nuw nsw i64 %54, %51
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %32, align 1, !tbaa !2450
  %58 = add i64 %113, 15
  store i64 %58, i64* %PC, align 8
  store i64 %36, i64* %82, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -8
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RCX, align 8, !tbaa !2428
  %65 = load i64*, i64** %33, align 8
  %66 = add i64 %61, 7
  store i64 %66, i64* %PC, align 8
  store i64 %64, i64* %65, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, -36
  store i64 %68, i64* %PC, align 8, !tbaa !2428
  br label %block_401e11

block_401e3a:                                     ; preds = %block_401e11
  %69 = add i64 %113, 1
  store i64 %69, i64* %PC, align 8
  %70 = load i64, i64* %5, align 8, !tbaa !2428
  %71 = add i64 %70, 8
  %72 = inttoptr i64 %70 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %RBP, align 8, !tbaa !2428
  store i64 %71, i64* %5, align 8, !tbaa !2428
  %74 = add i64 %113, 2
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %71 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %77 = add i64 %70, 16
  store i64 %77, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401e11:                                     ; preds = %block_401e1f, %block_401e00
  %78 = phi i64 [ %68, %block_401e1f ], [ %.pre, %block_401e00 ]
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = add i64 %78, 4
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = add i64 %79, -24
  %85 = add i64 %78, 8
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %83, %87
  %89 = icmp ult i64 %83, %87
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %27, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #10
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %28, align 1, !tbaa !2446
  %97 = xor i64 %87, %83
  %98 = xor i64 %97, %88
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %29, align 1, !tbaa !2447
  %102 = icmp eq i64 %88, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2448
  %104 = lshr i64 %88, 63
  %105 = trunc i64 %104 to i8
  store i8 %105, i8* %31, align 1, !tbaa !2449
  %106 = lshr i64 %83, 63
  %107 = lshr i64 %87, 63
  %108 = xor i64 %107, %106
  %109 = xor i64 %104, %106
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %32, align 1, !tbaa !2450
  %.v = select i1 %102, i64 41, i64 14
  %113 = add i64 %.v, %78
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br i1 %102, label %block_401e3a, label %block_401e1f
}

; Function Attrs: noinline
define %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403020:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 598
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_403290__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #10
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2446
  %94 = xor i64 %85, %84
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2447
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2448
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2449
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2450
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline
define %struct.Memory* @sub_404e40__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #7 {
block_404e40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 96
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, -7080
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_4032b0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %RAX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %58, -1
  %61 = icmp eq i64 %58, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %13, align 1, !tbaa !2432
  %63 = trunc i64 %60 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #10
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %20, align 1, !tbaa !2446
  %69 = xor i64 %60, %58
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  store i8 %72, i8* %25, align 1, !tbaa !2447
  %73 = icmp eq i64 %60, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %28, align 1, !tbaa !2448
  %75 = lshr i64 %60, 63
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %31, align 1, !tbaa !2449
  %77 = lshr i64 %58, 63
  %78 = xor i64 %75, %77
  %79 = add nuw nsw i64 %78, %77
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %37, align 1, !tbaa !2450
  %82 = icmp ne i8 %76, 0
  %83 = xor i1 %82, %80
  %84 = or i1 %73, %83
  %.v = select i1 %84, i64 354, i64 10
  %85 = add i64 %.v, %59
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_404fc5, label %block_404e6d

block_404efd:                                     ; preds = %block_404ee0
  %86 = add i64 %131, -40
  store i64 %86, i64* %RSI, align 8, !tbaa !2428
  %87 = add i64 %130, 243
  %88 = add i64 %130, 36
  %89 = load i64, i64* %RSP, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91, align 8
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %92 = tail call %struct.Memory* @sub_404ff0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %326)
  %93 = load i8, i8* %AL, align 1
  %94 = load i64, i64* %PC, align 8
  %95 = and i8 %93, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %96 = zext i8 %95 to i32
  %97 = tail call i32 @llvm.ctpop.i32(i32 %96) #10
  %98 = trunc i32 %97 to i8
  %99 = xor i8 %98, 1
  store i8 %99, i8* %20, align 1, !tbaa !2446
  %100 = xor i8 %95, 1
  store i8 %100, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i8 %100, 0
  %.v38 = select i1 %101, i64 13, i64 8
  %102 = add i64 %.v38, %94
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_404f2e, label %block_404f29

block_404ee0:                                     ; preds = %block_404f02, %block_404edb
  %.sink4 = phi i64 [ %419, %block_404f02 ], [ %134, %block_404edb ]
  %103 = load i64, i64* %RBP, align 8
  %104 = add i64 %103, -32
  store i64 %104, i64* %RDI, align 8, !tbaa !2428
  %105 = add i64 %.sink4, -7760
  %106 = add i64 %.sink4, 9
  %107 = load i64, i64* %RSP, align 8, !tbaa !2428
  %108 = add i64 %107, -8
  %109 = inttoptr i64 %108 to i64*
  store i64 %106, i64* %109, align 8
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  store i64 %105, i64* %PC, align 8, !tbaa !2428
  %110 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %105, %struct.Memory* %326)
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -24
  %113 = load i64, i64* %PC, align 8
  store i64 %112, i64* %RSI, align 8, !tbaa !2428
  %114 = load i64, i64* %RAX, align 8
  store i64 %114, i64* %RDI, align 8, !tbaa !2428
  %115 = add i64 %113, -7737
  %116 = add i64 %113, 12
  %117 = load i64, i64* %RSP, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %116, i64* %119, align 8
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %120 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %115, %struct.Memory* %326)
  %121 = load i8, i8* %AL, align 1
  %122 = load i64, i64* %PC, align 8
  %123 = and i8 %121, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %124 = zext i8 %123 to i32
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #10
  %126 = trunc i32 %125 to i8
  %127 = xor i8 %126, 1
  store i8 %127, i8* %20, align 1, !tbaa !2446
  %128 = xor i8 %123, 1
  store i8 %128, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %129 = icmp eq i8 %128, 0
  %.v37 = select i1 %129, i64 13, i64 8
  %130 = add i64 %.v37, %122
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -32
  store i64 %132, i64* %RDI, align 8, !tbaa !2428
  br i1 %129, label %block_404f02, label %block_404efd

block_404ed6:                                     ; preds = %block_404eb7
  %133 = add i64 %372, 157
  br label %block_404f73

block_404edb:                                     ; preds = %block_404eb7
  %134 = add i64 %372, 5
  br label %block_404ee0

block_404f73:                                     ; preds = %block_404f29, %block_404ed6
  %.sink = phi i64 [ %373, %block_404f29 ], [ %133, %block_404ed6 ]
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -40
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %137 = add i64 %135, -8
  %138 = add i64 %.sink, 15
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = add i64 %135, -56
  %142 = add i64 %.sink, 19
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %140, i64* %143, align 8
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, -7334
  %146 = add i64 %144, 5
  %147 = load i64, i64* %RSP, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %150 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %145, %struct.Memory* %326)
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -64
  %153 = load i64, i64* %RAX, align 8
  %154 = load i64, i64* %PC, align 8
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %152 to i64*
  store i64 %153, i64* %156, align 8
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -56
  %159 = load i64, i64* %PC, align 8
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RDI, align 8, !tbaa !2428
  %163 = add i64 %157, -64
  %164 = add i64 %159, 8
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RSI, align 8, !tbaa !2428
  %167 = add i64 %159, -335
  %168 = add i64 %159, 13
  %169 = load i64, i64* %RSP, align 8, !tbaa !2428
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %168, i64* %171, align 8
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  store i64 %167, i64* %PC, align 8, !tbaa !2428
  %172 = tail call %struct.Memory* @sub_404e40__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %167, %struct.Memory* %150)
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -40
  %175 = load i64, i64* %PC, align 8
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %176 = add i64 %175, -7356
  %177 = add i64 %175, 16
  %178 = load i64, i64* %RSP, align 8, !tbaa !2428
  %179 = add i64 %178, -8
  %180 = inttoptr i64 %179 to i64*
  store i64 %177, i64* %180, align 8
  store i64 %179, i64* %RSP, align 8, !tbaa !2428
  store i64 %176, i64* %PC, align 8, !tbaa !2428
  %181 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %176, %struct.Memory* %172)
  %182 = load i64, i64* %RBP, align 8
  %183 = add i64 %182, -72
  %184 = load i64, i64* %RAX, align 8
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %183 to i64*
  store i64 %184, i64* %187, align 8
  %188 = load i64, i64* %RBP, align 8
  %189 = add i64 %188, -16
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %189 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RAX, align 8, !tbaa !2428
  %194 = add i64 %188, -80
  %195 = add i64 %190, 8
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  store i64 %193, i64* %196, align 8
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -72
  %199 = load i64, i64* %PC, align 8
  %200 = add i64 %199, 4
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %198 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %RDI, align 8, !tbaa !2428
  %203 = add i64 %197, -80
  %204 = add i64 %199, 8
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RSI, align 8, !tbaa !2428
  %207 = add i64 %199, -376
  %208 = add i64 %199, 13
  %209 = load i64, i64* %RSP, align 8, !tbaa !2428
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %208, i64* %211, align 8
  store i64 %210, i64* %RSP, align 8, !tbaa !2428
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  %212 = tail call %struct.Memory* @sub_404e40__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %207, %struct.Memory* %181)
  %.pre34 = load i64, i64* %PC, align 8
  br label %block_404fc5

block_404e92:                                     ; preds = %block_404e8d, %block_404e92
  %.sink8 = phi i64 [ %249, %block_404e92 ], [ %251, %block_404e8d ]
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -40
  store i64 %214, i64* %RDI, align 8, !tbaa !2428
  %215 = add i64 %.sink8, 318
  %216 = add i64 %.sink8, 9
  %217 = load i64, i64* %RSP, align 8, !tbaa !2428
  %218 = add i64 %217, -8
  %219 = inttoptr i64 %218 to i64*
  store i64 %216, i64* %219, align 8
  store i64 %218, i64* %RSP, align 8, !tbaa !2428
  store i64 %215, i64* %PC, align 8, !tbaa !2428
  %220 = tail call %struct.Memory* @sub_404fd0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %215, %struct.Memory* %326)
  %221 = load i64, i64* %RAX, align 8
  %222 = load i64, i64* %PC, align 8
  store i64 %221, i64* %RDI, align 8, !tbaa !2428
  %223 = add i64 %222, -7691
  %224 = add i64 %222, 8
  %225 = load i64, i64* %RSP, align 8, !tbaa !2428
  %226 = add i64 %225, -8
  %227 = inttoptr i64 %226 to i64*
  store i64 %224, i64* %227, align 8
  store i64 %226, i64* %RSP, align 8, !tbaa !2428
  store i64 %223, i64* %PC, align 8, !tbaa !2428
  %228 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %223, %struct.Memory* %326)
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -24
  %231 = load i64, i64* %PC, align 8
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX, align 8
  store i64 %232, i64* %RSI, align 8, !tbaa !2428
  %233 = add i64 %231, -7667
  %234 = add i64 %231, 12
  %235 = load i64, i64* %RSP, align 8, !tbaa !2428
  %236 = add i64 %235, -8
  %237 = inttoptr i64 %236 to i64*
  store i64 %234, i64* %237, align 8
  store i64 %236, i64* %RSP, align 8, !tbaa !2428
  store i64 %233, i64* %PC, align 8, !tbaa !2428
  %238 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %233, %struct.Memory* %326)
  %239 = load i8, i8* %AL, align 1
  %240 = load i64, i64* %PC, align 8
  %241 = and i8 %239, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %242 = zext i8 %241 to i32
  %243 = tail call i32 @llvm.ctpop.i32(i32 %242) #10
  %244 = trunc i32 %243 to i8
  %245 = xor i8 %244, 1
  store i8 %245, i8* %20, align 1, !tbaa !2446
  %246 = xor i8 %241, 1
  store i8 %246, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %247 = icmp eq i8 %246, 0
  %.v35 = select i1 %247, i64 13, i64 8
  %248 = add i64 %.v35, %240
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %249 = add i64 %248, -42
  br i1 %247, label %block_404e92, label %block_404eb7

block_404e8d:                                     ; preds = %block_404e6d, %block_404f2e
  %250 = phi i64 [ %.pre, %block_404e6d ], [ %318, %block_404f2e ]
  %251 = add i64 %250, 5
  br label %block_404e92

block_404f2e:                                     ; preds = %block_404efd
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -40
  store i64 %253, i64* %RDI, align 8, !tbaa !2428
  %254 = add i64 %102, -7838
  %255 = add i64 %102, 9
  %256 = load i64, i64* %RSP, align 8, !tbaa !2428
  %257 = add i64 %256, -8
  %258 = inttoptr i64 %257 to i64*
  store i64 %255, i64* %258, align 8
  store i64 %257, i64* %RSP, align 8, !tbaa !2428
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  %259 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %254, %struct.Memory* %326)
  %260 = load i64, i64* %RBP, align 8
  %261 = add i64 %260, -32
  %262 = load i64, i64* %PC, align 8
  store i64 %261, i64* %RDI, align 8, !tbaa !2428
  %263 = load i64*, i64** %327, align 8
  %264 = add i64 %262, 7
  store i64 %264, i64* %PC, align 8
  %265 = load i64, i64* %263, align 8
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = add i64 %260, -48
  %267 = add i64 %262, 11
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  store i64 %265, i64* %268, align 8
  %269 = load i64, i64* %PC, align 8
  %270 = add i64 %269, -7858
  %271 = add i64 %269, 5
  %272 = load i64, i64* %RSP, align 8, !tbaa !2428
  %273 = add i64 %272, -8
  %274 = inttoptr i64 %273 to i64*
  store i64 %271, i64* %274, align 8
  store i64 %273, i64* %RSP, align 8, !tbaa !2428
  store i64 %270, i64* %PC, align 8, !tbaa !2428
  %275 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %270, %struct.Memory* %326)
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -40
  %278 = load i64, i64* %PC, align 8
  store i64 %277, i64* %RDI, align 8, !tbaa !2428
  %279 = add i64 %276, -96
  %280 = load i64, i64* %RAX, align 8
  %281 = add i64 %278, 8
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %279 to i64*
  store i64 %280, i64* %282, align 8
  %283 = load i64, i64* %PC, align 8
  %284 = add i64 %283, -7871
  %285 = add i64 %283, 5
  %286 = load i64, i64* %RSP, align 8, !tbaa !2428
  %287 = add i64 %286, -8
  %288 = inttoptr i64 %287 to i64*
  store i64 %285, i64* %288, align 8
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  store i64 %284, i64* %PC, align 8, !tbaa !2428
  %289 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %284, %struct.Memory* %326)
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -32
  %292 = load i64, i64* %PC, align 8
  store i64 %291, i64* %RDI, align 8, !tbaa !2428
  %293 = add i64 %290, -96
  %294 = add i64 %292, 8
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  %297 = add i64 %292, 11
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %RDX, align 8, !tbaa !2428
  %300 = load i64*, i64** %327, align 8
  %301 = add i64 %292, 14
  store i64 %301, i64* %PC, align 8
  store i64 %299, i64* %300, align 8
  %302 = load i64, i64* %PC, align 8
  %303 = add i64 %302, -7890
  %304 = add i64 %302, 5
  %305 = load i64, i64* %RSP, align 8, !tbaa !2428
  %306 = add i64 %305, -8
  %307 = inttoptr i64 %306 to i64*
  store i64 %304, i64* %307, align 8
  store i64 %306, i64* %RSP, align 8, !tbaa !2428
  store i64 %303, i64* %PC, align 8, !tbaa !2428
  %308 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %303, %struct.Memory* %326)
  %309 = load i64, i64* %RBP, align 8
  %310 = add i64 %309, -48
  %311 = load i64, i64* %PC, align 8
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313, align 8
  store i64 %314, i64* %RCX, align 8, !tbaa !2428
  %315 = load i64*, i64** %327, align 8
  %316 = add i64 %311, 7
  store i64 %316, i64* %PC, align 8
  store i64 %314, i64* %315, align 8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, -225
  store i64 %318, i64* %PC, align 8, !tbaa !2428
  br label %block_404e8d

block_404e6d:                                     ; preds = %block_404e40
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -8
  store i64 %320, i64* %RDI, align 8, !tbaa !2428
  %321 = add i64 %85, -7645
  %322 = add i64 %85, 9
  %323 = load i64, i64* %RSP, align 8, !tbaa !2428
  %324 = add i64 %323, -8
  %325 = inttoptr i64 %324 to i64*
  store i64 %322, i64* %325, align 8
  store i64 %324, i64* %RSP, align 8, !tbaa !2428
  store i64 %321, i64* %PC, align 8, !tbaa !2428
  %326 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %321, %struct.Memory* %57)
  %327 = bitcast %union.anon* %3 to i64**
  %328 = load i64*, i64** %327, align 8
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC, align 8
  %331 = load i64, i64* %328, align 8
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -24
  %334 = add i64 %329, 7
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  store i64 %331, i64* %335, align 8
  %336 = load i64, i64* %RBP, align 8
  %337 = add i64 %336, -8
  %338 = load i64, i64* %PC, align 8
  %339 = add i64 %338, 4
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = add i64 %336, -32
  %343 = add i64 %338, 8
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  store i64 %341, i64* %344, align 8
  %345 = load i64, i64* %RBP, align 8
  %346 = add i64 %345, -16
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349, align 8
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = add i64 %345, -40
  %352 = add i64 %347, 8
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  store i64 %350, i64* %353, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_404e8d

block_404eb7:                                     ; preds = %block_404e92
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -32
  store i64 %355, i64* %RDI, align 8, !tbaa !2428
  %356 = add i64 %354, -40
  store i64 %356, i64* %RSI, align 8, !tbaa !2428
  %357 = add i64 %248, 313
  %358 = add i64 %248, 23
  %359 = load i64, i64* %RSP, align 8, !tbaa !2428
  %360 = add i64 %359, -8
  %361 = inttoptr i64 %360 to i64*
  store i64 %358, i64* %361, align 8
  store i64 %360, i64* %RSP, align 8, !tbaa !2428
  store i64 %357, i64* %PC, align 8, !tbaa !2428
  %362 = tail call %struct.Memory* @sub_404ff0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %357, %struct.Memory* %326)
  %363 = load i8, i8* %AL, align 1
  %364 = load i64, i64* %PC, align 8
  %365 = and i8 %363, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %366 = zext i8 %365 to i32
  %367 = tail call i32 @llvm.ctpop.i32(i32 %366) #10
  %368 = trunc i32 %367 to i8
  %369 = xor i8 %368, 1
  store i8 %369, i8* %20, align 1, !tbaa !2446
  %370 = xor i8 %365, 1
  store i8 %370, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %371 = icmp eq i8 %370, 0
  %.v36 = select i1 %371, i64 13, i64 8
  %372 = add i64 %.v36, %364
  store i64 %372, i64* %PC, align 8, !tbaa !2428
  br i1 %371, label %block_404edb, label %block_404ed6

block_404f29:                                     ; preds = %block_404efd
  %373 = add i64 %102, 74
  br label %block_404f73

block_404fc5:                                     ; preds = %block_404f73, %block_404e40
  %374 = phi i64 [ %85, %block_404e40 ], [ %.pre34, %block_404f73 ]
  %MEMORY.4 = phi %struct.Memory* [ %57, %block_404e40 ], [ %212, %block_404f73 ]
  %375 = load i64, i64* %RSP, align 8
  %376 = add i64 %375, 96
  store i64 %376, i64* %RSP, align 8, !tbaa !2428
  %377 = icmp ugt i64 %375, -97
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %13, align 1, !tbaa !2432
  %379 = trunc i64 %376 to i32
  %380 = and i32 %379, 255
  %381 = tail call i32 @llvm.ctpop.i32(i32 %380) #10
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  store i8 %384, i8* %20, align 1, !tbaa !2446
  %385 = xor i64 %376, %375
  %386 = lshr i64 %385, 4
  %387 = trunc i64 %386 to i8
  %388 = and i8 %387, 1
  store i8 %388, i8* %25, align 1, !tbaa !2447
  %389 = icmp eq i64 %376, 0
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %28, align 1, !tbaa !2448
  %391 = lshr i64 %376, 63
  %392 = trunc i64 %391 to i8
  store i8 %392, i8* %31, align 1, !tbaa !2449
  %393 = lshr i64 %375, 63
  %394 = xor i64 %391, %393
  %395 = add nuw nsw i64 %394, %391
  %396 = icmp eq i64 %395, 2
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %37, align 1, !tbaa !2450
  %398 = add i64 %374, 5
  store i64 %398, i64* %PC, align 8
  %399 = add i64 %375, 104
  %400 = inttoptr i64 %376 to i64*
  %401 = load i64, i64* %400, align 8
  store i64 %401, i64* %RBP, align 8, !tbaa !2428
  store i64 %399, i64* %RSP, align 8, !tbaa !2428
  %402 = add i64 %374, 6
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %399 to i64*
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %PC, align 8, !tbaa !2428
  %405 = add i64 %375, 112
  store i64 %405, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_404f02:                                     ; preds = %block_404ee0
  %406 = add i64 %130, -7282
  %407 = add i64 %130, 9
  %408 = load i64, i64* %RSP, align 8, !tbaa !2428
  %409 = add i64 %408, -8
  %410 = inttoptr i64 %409 to i64*
  store i64 %407, i64* %410, align 8
  store i64 %409, i64* %RSP, align 8, !tbaa !2428
  store i64 %406, i64* %PC, align 8, !tbaa !2428
  %411 = tail call %struct.Memory* @sub_403290__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %406, %struct.Memory* %326)
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -88
  %414 = load i64, i64* %RAX, align 8
  %415 = load i64, i64* %PC, align 8
  %416 = add i64 %415, 4
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %413 to i64*
  store i64 %414, i64* %417, align 8
  %418 = load i64, i64* %PC, align 8
  %419 = add i64 %418, -47
  br label %block_404ee0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401c80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401ca0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d00__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401d00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401d20__ZN12ValueWrapperIS_IS_IdEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4047b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2453
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #10
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2453
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2453
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2453
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = trunc i64 %55 to i8
  %57 = and i8 %56, 1
  store i8 %57, i8* %54, align 1, !tbaa !2453
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2453
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2432
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #10
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2446
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2447
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2448
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2449
  %83 = and i64 %55, 1
  %84 = lshr i64 %62, 63
  %85 = xor i64 %81, %83
  %86 = xor i64 %81, %84
  %87 = add nuw nsw i64 %85, %86
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %58, align 1, !tbaa !2450
  %90 = add i64 %34, 16
  store i64 %90, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -8
  %93 = load i64, i64* %PC, align 8
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = add i64 %93, 5
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %5, align 8, !tbaa !2428
  %99 = add i64 %98, 8
  %100 = inttoptr i64 %98 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %RBP, align 8, !tbaa !2428
  store i64 %99, i64* %5, align 8, !tbaa !2428
  %102 = add i64 %93, 6
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %99 to i64*
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %PC, align 8, !tbaa !2428
  %105 = add i64 %98, 16
  store i64 %105, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403110__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403110:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403140__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_403d80__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_403d80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -184
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 176
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RSI, align 8
  %41 = add i64 %9, 14
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC, align 8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %48 = load i64, i64* %47, align 1
  %49 = inttoptr i64 %44 to i64*
  store i64 %48, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RDI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = lshr i64 %77, 63
  %79 = trunc i64 %78 to i8
  %80 = shl i64 %77, 1
  %81 = icmp slt i64 %77, 0
  %82 = icmp slt i64 %80, 0
  %83 = xor i1 %81, %82
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  store i8 %79, i8* %13, align 1, !tbaa !2453
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #10
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %90 = icmp eq i64 %80, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %29, align 1, !tbaa !2453
  %92 = lshr i64 %77, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %32, align 1, !tbaa !2453
  %95 = zext i1 %83 to i8
  store i8 %95, i8* %38, align 1, !tbaa !2453
  %96 = add i64 %71, -40
  %97 = add i64 %73, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %80, i64* %98, align 8
  %99 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_403db4

block_403e98:                                     ; preds = %block_403db4
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %100 to i8*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %100, i64 0, i32 0
  %101 = add i64 %302, 4
  store i64 %101, i64* %PC, align 8
  %102 = load i64, i64* %269, align 8
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = add i64 %302, 8
  store i64 %103, i64* %PC, align 8
  %104 = load i64, i64* %273, align 8
  %105 = sub i64 %102, %104
  %106 = icmp ult i64 %102, %104
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %13, align 1, !tbaa !2432
  %108 = trunc i64 %105 to i32
  %109 = and i32 %108, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #10
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %20, align 1, !tbaa !2446
  %114 = xor i64 %104, %102
  %115 = xor i64 %114, %105
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2447
  %119 = icmp eq i64 %105, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %29, align 1, !tbaa !2448
  %121 = lshr i64 %105, 63
  %122 = trunc i64 %121 to i8
  store i8 %122, i8* %32, align 1, !tbaa !2449
  %123 = lshr i64 %102, 63
  %124 = lshr i64 %104, 63
  %125 = xor i64 %124, %123
  %126 = xor i64 %121, %123
  %127 = add nuw nsw i64 %126, %125
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %38, align 1, !tbaa !2450
  %.v21 = select i1 %119, i64 14, i64 105
  %130 = add i64 %.v21, %302
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  br i1 %119, label %block_403ea6, label %block_403f01

block_403f73:                                     ; preds = %block_403f60
  %131 = add i64 %578, -40
  %132 = add i64 %590, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %RSI, align 8, !tbaa !2428
  %135 = add i64 %590, -547
  %136 = add i64 %590, 13
  %137 = load i64, i64* %RSP, align 8, !tbaa !2428
  %138 = add i64 %137, -8
  %139 = inttoptr i64 %138 to i64*
  store i64 %136, i64* %139, align 8
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  %140 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %135, %struct.Memory* %MEMORY.2)
  %141 = load i64, i64* %RBP, align 8
  %142 = add i64 %141, -112
  %143 = load i64, i64* %PC, align 8
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %144 = load i64, i64* %RAX, align 8
  %145 = add i64 %143, 8
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %142 to i64*
  store i64 %144, i64* %146, align 8
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, -680
  %149 = add i64 %147, 5
  %150 = load i64, i64* %RSP, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %149, i64* %152, align 8
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %153 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.2)
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -8
  %156 = load i64, i64* %PC, align 8
  store i64 %155, i64* %RDI, align 8, !tbaa !2428
  %157 = add i64 %154, -48
  %158 = add i64 %156, 8
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = add i64 %154, -168
  %162 = load i64, i64* %RAX, align 8
  %163 = add i64 %156, 15
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  store i64 %162, i64* %164, align 8
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, -588
  %167 = add i64 %165, 5
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %166, %struct.Memory* %MEMORY.2)
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -120
  %174 = load i64, i64* %PC, align 8
  store i64 %173, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RAX, align 8
  %176 = add i64 %174, 8
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %173 to i64*
  store i64 %175, i64* %177, align 8
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, -713
  %180 = add i64 %178, 5
  %181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183, align 8
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %184 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %179, %struct.Memory* %MEMORY.2)
  %185 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -168
  %188 = add i64 %185, 14
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %RDI, align 8, !tbaa !2428
  %191 = add i64 %185, 17
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %190 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RDX, align 8, !tbaa !2428
  %194 = load i64*, i64** %99, align 8
  %195 = add i64 %185, 20
  store i64 %195, i64* %PC, align 8
  store i64 %193, i64* %194, align 8
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -40
  %198 = load i64, i64* %PC, align 8
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = add i64 %196, -48
  %203 = add i64 %198, 8
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %201, i64* %204, align 8
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -48
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = add i64 %210, -1
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = icmp eq i64 %210, 0
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %13, align 1, !tbaa !2432
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #10
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %20, align 1, !tbaa !2446
  %220 = xor i64 %211, %210
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %26, align 1, !tbaa !2447
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %29, align 1, !tbaa !2448
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %32, align 1, !tbaa !2449
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %228
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %38, align 1, !tbaa !2450
  %233 = ashr i64 %211, 63
  store i64 %233, i64* %RDX, align 8, !tbaa !2428
  %234 = load i64, i64* %RSI, align 8
  %235 = add i64 %207, 13
  store i64 %235, i64* %PC, align 8
  %236 = sext i64 %234 to i128
  %237 = and i128 %236, -18446744073709551616
  %238 = zext i64 %233 to i128
  %239 = shl nuw i128 %238, 64
  %240 = zext i64 %211 to i128
  %241 = or i128 %239, %240
  %242 = zext i64 %234 to i128
  %243 = or i128 %237, %242
  %244 = sdiv i128 %241, %243
  %245 = trunc i128 %244 to i64
  %246 = and i128 %244, 18446744073709551615
  %247 = sext i64 %245 to i128
  %248 = and i128 %247, -18446744073709551616
  %249 = or i128 %248, %246
  %250 = icmp eq i128 %244, %249
  br i1 %250, label %253, label %251

; <label>:251:                                    ; preds = %block_403f73
  %252 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %235, %struct.Memory* %MEMORY.2) #13
  %.pre16 = load i64, i64* %RBP, align 8
  %.pre17 = load i64, i64* %RAX, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:253:                                    ; preds = %block_403f73
  %254 = srem i128 %241, %243
  %255 = trunc i128 %254 to i64
  store i64 %245, i64* %661, align 8, !tbaa !2428
  store i64 %255, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %253, %251
  %256 = phi i64 [ %.pre18, %251 ], [ %235, %253 ]
  %257 = phi i64 [ %.pre17, %251 ], [ %245, %253 ]
  %258 = phi i64 [ %.pre16, %251 ], [ %205, %253 ]
  %259 = phi %struct.Memory* [ %252, %251 ], [ %MEMORY.2, %253 ]
  %260 = add i64 %258, -40
  %261 = add i64 %256, 4
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i64*
  store i64 %257, i64* %262, align 8
  %263 = load i64, i64* %PC, align 8
  %264 = add i64 %263, -191
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  br label %block_403f1c

block_403db4:                                     ; preds = %block_403e2c, %block_403d80
  %265 = phi i64 [ %526, %block_403e2c ], [ %.pre, %block_403d80 ]
  %266 = load i64, i64* %RBP, align 8
  %267 = add i64 %266, -40
  %268 = add i64 %265, 4
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = add i64 %266, -24
  %272 = add i64 %265, 8
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = sub i64 %270, %274
  %276 = icmp ult i64 %270, %274
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %13, align 1, !tbaa !2432
  %278 = trunc i64 %275 to i32
  %279 = and i32 %278, 255
  %280 = tail call i32 @llvm.ctpop.i32(i32 %279) #10
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  store i8 %283, i8* %20, align 1, !tbaa !2446
  %284 = xor i64 %274, %270
  %285 = xor i64 %284, %275
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  store i8 %288, i8* %26, align 1, !tbaa !2447
  %289 = icmp eq i64 %275, 0
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %29, align 1, !tbaa !2448
  %291 = lshr i64 %275, 63
  %292 = trunc i64 %291 to i8
  store i8 %292, i8* %32, align 1, !tbaa !2449
  %293 = lshr i64 %270, 63
  %294 = lshr i64 %274, 63
  %295 = xor i64 %294, %293
  %296 = xor i64 %291, %293
  %297 = add nuw nsw i64 %296, %295
  %298 = icmp eq i64 %297, 2
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %38, align 1, !tbaa !2450
  %300 = icmp ne i8 %292, 0
  %301 = xor i1 %300, %298
  %.v20 = select i1 %301, i64 14, i64 228
  %302 = add i64 %.v20, %265
  store i64 %302, i64* %PC, align 8, !tbaa !2428
  br i1 %301, label %block_403dc2, label %block_403e98

block_403f6e:                                     ; preds = %block_403f60
  %303 = add i64 %578, -48
  %304 = add i64 %590, 122
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %303 to i64*
  %306 = load i64, i64* %305, align 8
  store i64 %306, i64* %RSI, align 8, !tbaa !2428
  %307 = add i64 %590, -542
  %308 = add i64 %590, 127
  %309 = load i64, i64* %RSP, align 8, !tbaa !2428
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %308, i64* %311, align 8
  store i64 %310, i64* %RSP, align 8, !tbaa !2428
  store i64 %307, i64* %PC, align 8, !tbaa !2428
  %312 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %307, %struct.Memory* %MEMORY.2)
  %313 = load i64, i64* %RBP, align 8
  %314 = add i64 %313, -128
  %315 = load i64, i64* %PC, align 8
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %316 = load i64, i64* %RAX, align 8
  %317 = add i64 %315, 8
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %314 to i64*
  store i64 %316, i64* %318, align 8
  %319 = load i64, i64* %PC, align 8
  %320 = add i64 %319, -789
  %321 = add i64 %319, 5
  %322 = load i64, i64* %RSP, align 8, !tbaa !2428
  %323 = add i64 %322, -8
  %324 = inttoptr i64 %323 to i64*
  store i64 %321, i64* %324, align 8
  store i64 %323, i64* %RSP, align 8, !tbaa !2428
  store i64 %320, i64* %PC, align 8, !tbaa !2428
  %325 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %320, %struct.Memory* %312)
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -16
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RSI, align 8, !tbaa !2428
  %332 = load i64*, i64** %99, align 8
  %333 = add i64 %328, 7
  store i64 %333, i64* %PC, align 8
  store i64 %331, i64* %332, align 8
  %334 = load i64, i64* %RSP, align 8
  %335 = load i64, i64* %PC, align 8
  %336 = add i64 %334, 176
  store i64 %336, i64* %RSP, align 8, !tbaa !2428
  %337 = icmp ugt i64 %334, -177
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %13, align 1, !tbaa !2432
  %339 = trunc i64 %336 to i32
  %340 = and i32 %339, 255
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340) #10
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  store i8 %344, i8* %20, align 1, !tbaa !2446
  %345 = xor i64 %334, 16
  %346 = xor i64 %345, %336
  %347 = lshr i64 %346, 4
  %348 = trunc i64 %347 to i8
  %349 = and i8 %348, 1
  store i8 %349, i8* %26, align 1, !tbaa !2447
  %350 = icmp eq i64 %336, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %29, align 1, !tbaa !2448
  %352 = lshr i64 %336, 63
  %353 = trunc i64 %352 to i8
  store i8 %353, i8* %32, align 1, !tbaa !2449
  %354 = lshr i64 %334, 63
  %355 = xor i64 %352, %354
  %356 = add nuw nsw i64 %355, %352
  %357 = icmp eq i64 %356, 2
  %358 = zext i1 %357 to i8
  store i8 %358, i8* %38, align 1, !tbaa !2450
  %359 = add i64 %335, 8
  store i64 %359, i64* %PC, align 8
  %360 = add i64 %334, 184
  %361 = inttoptr i64 %336 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RBP, align 8, !tbaa !2428
  store i64 %360, i64* %RSP, align 8, !tbaa !2428
  %363 = add i64 %335, 9
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %360 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %PC, align 8, !tbaa !2428
  %366 = add i64 %334, 192
  store i64 %366, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %325

block_403e1b:                                     ; preds = %block_403dc2
  %367 = add i64 %901, 17
  store i64 %367, i64* %PC, align 8, !tbaa !2428
  br label %block_403e2c

block_403e2c:                                     ; preds = %block_403e20, %block_403e1b
  %368 = phi i64 [ %.pre19, %block_403e20 ], [ %367, %block_403e1b ]
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -8
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = add i64 %369, -40
  %372 = add i64 %368, 8
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = add i64 %374, -1
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = icmp eq i64 %374, 0
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %13, align 1, !tbaa !2432
  %378 = trunc i64 %375 to i32
  %379 = and i32 %378, 255
  %380 = tail call i32 @llvm.ctpop.i32(i32 %379) #10
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  store i8 %383, i8* %20, align 1, !tbaa !2446
  %384 = xor i64 %375, %374
  %385 = lshr i64 %384, 4
  %386 = trunc i64 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %26, align 1, !tbaa !2447
  %388 = icmp eq i64 %375, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %29, align 1, !tbaa !2448
  %390 = lshr i64 %375, 63
  %391 = trunc i64 %390 to i8
  store i8 %391, i8* %32, align 1, !tbaa !2449
  %392 = lshr i64 %374, 63
  %393 = xor i64 %390, %392
  %394 = add nuw nsw i64 %393, %392
  %395 = icmp eq i64 %394, 2
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %38, align 1, !tbaa !2450
  store i64 %375, i64* %RSI, align 8, !tbaa !2428
  %397 = add i64 %368, -220
  %398 = add i64 %368, 20
  %399 = load i64, i64* %RSP, align 8, !tbaa !2428
  %400 = add i64 %399, -8
  %401 = inttoptr i64 %400 to i64*
  store i64 %398, i64* %401, align 8
  store i64 %400, i64* %RSP, align 8, !tbaa !2428
  store i64 %397, i64* %PC, align 8, !tbaa !2428
  %402 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %397, %struct.Memory* %2)
  %403 = load i64, i64* %RBP, align 8
  %404 = add i64 %403, -72
  %405 = load i64, i64* %PC, align 8
  store i64 %404, i64* %RDI, align 8, !tbaa !2428
  %406 = load i64, i64* %RAX, align 8
  %407 = add i64 %405, 8
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %404 to i64*
  store i64 %406, i64* %408, align 8
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, -360
  %411 = add i64 %409, 5
  %412 = load i64, i64* %RSP, align 8, !tbaa !2428
  %413 = add i64 %412, -8
  %414 = inttoptr i64 %413 to i64*
  store i64 %411, i64* %414, align 8
  store i64 %413, i64* %RSP, align 8, !tbaa !2428
  store i64 %410, i64* %PC, align 8, !tbaa !2428
  %415 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %410, %struct.Memory* %2)
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -8
  %418 = load i64, i64* %PC, align 8
  store i64 %417, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %416, -48
  %420 = add i64 %418, 8
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i64*
  %422 = load i64, i64* %421, align 8
  store i64 %422, i64* %RSI, align 8, !tbaa !2428
  %423 = add i64 %416, -144
  %424 = load i64, i64* %RAX, align 8
  %425 = add i64 %418, 15
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %423 to i64*
  store i64 %424, i64* %426, align 8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, -268
  %429 = add i64 %427, 5
  %430 = load i64, i64* %RSP, align 8, !tbaa !2428
  %431 = add i64 %430, -8
  %432 = inttoptr i64 %431 to i64*
  store i64 %429, i64* %432, align 8
  store i64 %431, i64* %RSP, align 8, !tbaa !2428
  store i64 %428, i64* %PC, align 8, !tbaa !2428
  %433 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %428, %struct.Memory* %2)
  %434 = load i64, i64* %RBP, align 8
  %435 = add i64 %434, -80
  %436 = load i64, i64* %PC, align 8
  store i64 %435, i64* %RDI, align 8, !tbaa !2428
  %437 = load i64, i64* %RAX, align 8
  %438 = add i64 %436, 8
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %435 to i64*
  store i64 %437, i64* %439, align 8
  %440 = load i64, i64* %PC, align 8
  %441 = add i64 %440, -393
  %442 = add i64 %440, 5
  %443 = load i64, i64* %RSP, align 8, !tbaa !2428
  %444 = add i64 %443, -8
  %445 = inttoptr i64 %444 to i64*
  store i64 %442, i64* %445, align 8
  store i64 %444, i64* %RSP, align 8, !tbaa !2428
  store i64 %441, i64* %PC, align 8, !tbaa !2428
  %446 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %441, %struct.Memory* %2)
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -144
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, 7
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %448 to i64*
  %452 = load i64, i64* %451, align 8
  store i64 %452, i64* %RSI, align 8, !tbaa !2428
  %453 = add i64 %449, 10
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %452 to i64*
  %455 = load i64, i64* %454, align 8
  store i64 %455, i64* %RDI, align 8, !tbaa !2428
  %456 = load i64*, i64** %99, align 8
  %457 = add i64 %449, 13
  store i64 %457, i64* %PC, align 8
  store i64 %455, i64* %456, align 8
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -40
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = add i64 %463, -1
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = icmp eq i64 %463, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %13, align 1, !tbaa !2432
  %467 = trunc i64 %464 to i32
  %468 = and i32 %467, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468) #10
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %20, align 1, !tbaa !2446
  %473 = xor i64 %464, %463
  %474 = lshr i64 %473, 4
  %475 = trunc i64 %474 to i8
  %476 = and i8 %475, 1
  store i8 %476, i8* %26, align 1, !tbaa !2447
  %477 = icmp eq i64 %464, 0
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %29, align 1, !tbaa !2448
  %479 = lshr i64 %464, 63
  %480 = trunc i64 %479 to i8
  store i8 %480, i8* %32, align 1, !tbaa !2449
  %481 = lshr i64 %463, 63
  %482 = xor i64 %479, %481
  %483 = add nuw nsw i64 %482, %481
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %38, align 1, !tbaa !2450
  %486 = add i64 %458, -48
  %487 = add i64 %460, 12
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i64*
  store i64 %464, i64* %488, align 8
  %489 = load i64, i64* %RBP, align 8
  %490 = add i64 %489, -40
  %491 = load i64, i64* %PC, align 8
  %492 = add i64 %491, 4
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %490 to i64*
  %494 = load i64, i64* %493, align 8
  store i64 %494, i64* %RAX, align 8, !tbaa !2428
  %495 = add i64 %491, 8
  store i64 %495, i64* %PC, align 8
  %496 = load i64, i64* %493, align 8
  %497 = add i64 %496, %494
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = icmp ult i64 %497, %494
  %499 = icmp ult i64 %497, %496
  %500 = or i1 %498, %499
  %501 = zext i1 %500 to i8
  store i8 %501, i8* %13, align 1, !tbaa !2432
  %502 = trunc i64 %497 to i32
  %503 = and i32 %502, 255
  %504 = tail call i32 @llvm.ctpop.i32(i32 %503) #10
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  store i8 %507, i8* %20, align 1, !tbaa !2446
  %508 = xor i64 %496, %494
  %509 = xor i64 %508, %497
  %510 = lshr i64 %509, 4
  %511 = trunc i64 %510 to i8
  %512 = and i8 %511, 1
  store i8 %512, i8* %26, align 1, !tbaa !2447
  %513 = icmp eq i64 %497, 0
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %29, align 1, !tbaa !2448
  %515 = lshr i64 %497, 63
  %516 = trunc i64 %515 to i8
  store i8 %516, i8* %32, align 1, !tbaa !2449
  %517 = lshr i64 %494, 63
  %518 = lshr i64 %496, 63
  %519 = xor i64 %515, %517
  %520 = xor i64 %515, %518
  %521 = add nuw nsw i64 %519, %520
  %522 = icmp eq i64 %521, 2
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %38, align 1, !tbaa !2450
  %524 = add i64 %491, 12
  store i64 %524, i64* %PC, align 8
  store i64 %497, i64* %493, align 8
  %525 = load i64, i64* %PC, align 8
  %526 = add i64 %525, -223
  store i64 %526, i64* %PC, align 8, !tbaa !2428
  br label %block_403db4

block_403f1c:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %527 = phi i64 [ %.pre14, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %264, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %MEMORY.2 = phi %struct.Memory* [ %683, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %259, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %528 = load i64, i64* %RBP, align 8
  %529 = add i64 %528, -48
  %530 = add i64 %527, 8
  store i64 %530, i64* %PC, align 8
  %531 = inttoptr i64 %529 to i64*
  %532 = load i64, i64* %531, align 8
  store i64 %532, i64* %RDX, align 8, !tbaa !2428
  %533 = add i64 %528, -32
  %534 = add i64 %527, 12
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %533 to i64*
  %536 = load i64, i64* %535, align 8
  %537 = sub i64 %532, %536
  %538 = icmp ult i64 %532, %536
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %13, align 1, !tbaa !2432
  %540 = trunc i64 %537 to i32
  %541 = and i32 %540, 255
  %542 = tail call i32 @llvm.ctpop.i32(i32 %541) #10
  %543 = trunc i32 %542 to i8
  %544 = and i8 %543, 1
  %545 = xor i8 %544, 1
  store i8 %545, i8* %20, align 1, !tbaa !2446
  %546 = xor i64 %536, %532
  %547 = xor i64 %546, %537
  %548 = lshr i64 %547, 4
  %549 = trunc i64 %548 to i8
  %550 = and i8 %549, 1
  store i8 %550, i8* %26, align 1, !tbaa !2447
  %551 = icmp eq i64 %537, 0
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %29, align 1, !tbaa !2448
  %553 = lshr i64 %537, 63
  %554 = trunc i64 %553 to i8
  store i8 %554, i8* %32, align 1, !tbaa !2449
  %555 = lshr i64 %532, 63
  %556 = lshr i64 %536, 63
  %557 = xor i64 %556, %555
  %558 = xor i64 %553, %555
  %559 = add nuw nsw i64 %558, %557
  %560 = icmp eq i64 %559, 2
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %38, align 1, !tbaa !2450
  %562 = add i64 %528, -153
  %563 = add i64 %527, 18
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i8*
  store i8 0, i8* %564, align 1
  %565 = load i64, i64* %PC, align 8
  %566 = add i64 %565, 50
  %567 = add i64 %565, 6
  %568 = load i8, i8* %29, align 1, !tbaa !2448
  %569 = icmp ne i8 %568, 0
  %570 = load i8, i8* %32, align 1, !tbaa !2449
  %571 = icmp ne i8 %570, 0
  %572 = load i8, i8* %38, align 1, !tbaa !2450
  %573 = icmp ne i8 %572, 0
  %574 = xor i1 %571, %573
  %575 = or i1 %569, %574
  %576 = select i1 %575, i64 %566, i64 %567
  store i64 %576, i64* %PC, align 8, !tbaa !2428
  br i1 %575, label %block_403f60, label %block_403f34

block_403f60:                                     ; preds = %block_403f34, %block_403f1c
  %577 = phi i64 [ %.pre15, %block_403f34 ], [ %566, %block_403f1c ]
  %578 = load i64, i64* %RBP, align 8
  %579 = add i64 %578, -153
  %580 = add i64 %577, 6
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %579 to i8*
  %582 = load i8, i8* %581, align 1
  store i8 %582, i8* %AL, align 1, !tbaa !2453
  %583 = and i8 %582, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %584 = zext i8 %583 to i32
  %585 = tail call i32 @llvm.ctpop.i32(i32 %584) #10
  %586 = trunc i32 %585 to i8
  %587 = xor i8 %586, 1
  store i8 %587, i8* %20, align 1, !tbaa !2446
  %588 = xor i8 %583, 1
  store i8 %588, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %589 = icmp eq i8 %588, 0
  %.v = select i1 %589, i64 19, i64 14
  %590 = add i64 %.v, %577
  store i64 %590, i64* %PC, align 8, !tbaa !2428
  %591 = add i64 %578, -8
  store i64 %591, i64* %RDI, align 8, !tbaa !2428
  br i1 %589, label %block_403f73, label %block_403f6e

block_403f34:                                     ; preds = %block_403f1c
  %592 = load i64, i64* %RBP, align 8
  %593 = add i64 %592, -8
  store i64 %593, i64* %RDI, align 8, !tbaa !2428
  %594 = add i64 %592, -40
  %595 = add i64 %576, 8
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %RSI, align 8, !tbaa !2428
  %598 = add i64 %576, -484
  %599 = add i64 %576, 13
  %600 = load i64, i64* %RSP, align 8, !tbaa !2428
  %601 = add i64 %600, -8
  %602 = inttoptr i64 %601 to i64*
  store i64 %599, i64* %602, align 8
  store i64 %601, i64* %RSP, align 8, !tbaa !2428
  store i64 %598, i64* %PC, align 8, !tbaa !2428
  %603 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %598, %struct.Memory* %MEMORY.2)
  %604 = load i64, i64* %RBP, align 8
  %605 = add i64 %604, -104
  %606 = load i64, i64* %PC, align 8
  store i64 %605, i64* %RDI, align 8, !tbaa !2428
  %607 = load i64, i64* %RAX, align 8
  %608 = add i64 %606, 8
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %605 to i64*
  store i64 %607, i64* %609, align 8
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, -617
  %612 = add i64 %610, 5
  %613 = load i64, i64* %RSP, align 8, !tbaa !2428
  %614 = add i64 %613, -8
  %615 = inttoptr i64 %614 to i64*
  store i64 %612, i64* %615, align 8
  store i64 %614, i64* %RSP, align 8, !tbaa !2428
  store i64 %611, i64* %PC, align 8, !tbaa !2428
  %616 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %611, %struct.Memory* %MEMORY.2)
  %617 = load i64, i64* %RBP, align 8
  %618 = add i64 %617, -16
  %619 = load i64, i64* %PC, align 8
  store i64 %618, i64* %RSI, align 8, !tbaa !2428
  %620 = load i64, i64* %RAX, align 8
  store i64 %620, i64* %RDI, align 8, !tbaa !2428
  %621 = add i64 %619, -3310
  %622 = add i64 %619, 12
  %623 = load i64, i64* %RSP, align 8, !tbaa !2428
  %624 = add i64 %623, -8
  %625 = inttoptr i64 %624 to i64*
  store i64 %622, i64* %625, align 8
  store i64 %624, i64* %RSP, align 8, !tbaa !2428
  store i64 %621, i64* %PC, align 8, !tbaa !2428
  %626 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %621, %struct.Memory* %MEMORY.2)
  %627 = load i64, i64* %RBP, align 8
  %628 = add i64 %627, -153
  %629 = load i8, i8* %AL, align 1
  %630 = load i64, i64* %PC, align 8
  %631 = add i64 %630, 6
  store i64 %631, i64* %PC, align 8
  %632 = inttoptr i64 %628 to i8*
  store i8 %629, i8* %632, align 1
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_403f60

block_403f01:                                     ; preds = %block_403ea6, %block_403e98
  %633 = phi i64 [ %266, %block_403e98 ], [ %.pre10, %block_403ea6 ]
  %634 = phi i64 [ %130, %block_403e98 ], [ %.pre9, %block_403ea6 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_403e98 ], [ %761, %block_403ea6 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %635 = add i64 %633, -48
  %636 = add i64 %634, 11
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %635 to i64*
  %638 = load i64, i64* %637, align 8
  %639 = add i64 %638, -1
  %640 = icmp eq i64 %638, 0
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %13, align 1, !tbaa !2432
  %642 = trunc i64 %639 to i32
  %643 = and i32 %642, 255
  %644 = tail call i32 @llvm.ctpop.i32(i32 %643) #10
  %645 = trunc i32 %644 to i8
  %646 = and i8 %645, 1
  %647 = xor i8 %646, 1
  store i8 %647, i8* %20, align 1, !tbaa !2446
  %648 = xor i64 %639, %638
  %649 = lshr i64 %648, 4
  %650 = trunc i64 %649 to i8
  %651 = and i8 %650, 1
  store i8 %651, i8* %26, align 1, !tbaa !2447
  %652 = icmp eq i64 %639, 0
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %29, align 1, !tbaa !2448
  %654 = lshr i64 %639, 63
  %655 = trunc i64 %654 to i8
  store i8 %655, i8* %32, align 1, !tbaa !2449
  %656 = lshr i64 %638, 63
  %657 = xor i64 %654, %656
  %658 = add nuw nsw i64 %657, %656
  %659 = icmp eq i64 %658, 2
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %38, align 1, !tbaa !2450
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %662 = ashr i64 %639, 63
  store i64 %662, i64* %RDX, align 8, !tbaa !2428
  %663 = add i64 %634, 23
  store i64 %663, i64* %PC, align 8
  %664 = zext i64 %662 to i128
  %665 = shl nuw i128 %664, 64
  %666 = zext i64 %639 to i128
  %667 = or i128 %665, %666
  %668 = sdiv i128 %667, 2
  %669 = trunc i128 %668 to i64
  %670 = and i128 %668, 18446744073709551615
  %671 = sext i64 %669 to i128
  %672 = and i128 %671, -18446744073709551616
  %673 = or i128 %672, %670
  %674 = icmp eq i128 %668, %673
  br i1 %674, label %677, label %675

; <label>:675:                                    ; preds = %block_403f01
  %676 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %663, %struct.Memory* %MEMORY.4) #13
  %.pre11 = load i64, i64* %RBP, align 8
  %.pre12 = load i64, i64* %RAX, align 8
  %.pre13 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:677:                                    ; preds = %block_403f01
  %678 = srem i128 %667, 2
  %679 = trunc i128 %678 to i64
  store i64 %669, i64* %661, align 8, !tbaa !2428
  store i64 %679, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %677, %675
  %680 = phi i64 [ %.pre13, %675 ], [ %663, %677 ]
  %681 = phi i64 [ %.pre12, %675 ], [ %669, %677 ]
  %682 = phi i64 [ %.pre11, %675 ], [ %633, %677 ]
  %683 = phi %struct.Memory* [ %676, %675 ], [ %MEMORY.4, %677 ]
  %684 = add i64 %682, -40
  %685 = add i64 %680, 4
  store i64 %685, i64* %PC, align 8
  %686 = inttoptr i64 %684 to i64*
  store i64 %681, i64* %686, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_403f1c

block_403ea6:                                     ; preds = %block_403e98
  %687 = add i64 %266, -8
  store i64 %687, i64* %RDI, align 8, !tbaa !2428
  %688 = add i64 %130, 8
  store i64 %688, i64* %PC, align 8
  %689 = load i64, i64* %269, align 8
  %690 = add i64 %689, -1
  store i64 %690, i64* %RAX, align 8, !tbaa !2428
  %691 = icmp eq i64 %689, 0
  %692 = zext i1 %691 to i8
  store i8 %692, i8* %13, align 1, !tbaa !2432
  %693 = trunc i64 %690 to i32
  %694 = and i32 %693, 255
  %695 = tail call i32 @llvm.ctpop.i32(i32 %694) #10
  %696 = trunc i32 %695 to i8
  %697 = and i8 %696, 1
  %698 = xor i8 %697, 1
  store i8 %698, i8* %20, align 1, !tbaa !2446
  %699 = xor i64 %690, %689
  %700 = lshr i64 %699, 4
  %701 = trunc i64 %700 to i8
  %702 = and i8 %701, 1
  store i8 %702, i8* %26, align 1, !tbaa !2447
  %703 = icmp eq i64 %690, 0
  %704 = zext i1 %703 to i8
  store i8 %704, i8* %29, align 1, !tbaa !2448
  %705 = lshr i64 %690, 63
  %706 = trunc i64 %705 to i8
  store i8 %706, i8* %32, align 1, !tbaa !2449
  %707 = lshr i64 %689, 63
  %708 = xor i64 %705, %707
  %709 = add nuw nsw i64 %708, %707
  %710 = icmp eq i64 %709, 2
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %38, align 1, !tbaa !2450
  store i64 %690, i64* %RSI, align 8, !tbaa !2428
  %712 = add i64 %130, -342
  %713 = add i64 %130, 20
  %714 = load i64, i64* %RSP, align 8, !tbaa !2428
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %713, i64* %716, align 8
  store i64 %715, i64* %RSP, align 8, !tbaa !2428
  store i64 %712, i64* %PC, align 8, !tbaa !2428
  %717 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %712, %struct.Memory* %2)
  %718 = load i64, i64* %RBP, align 8
  %719 = add i64 %718, -88
  %720 = load i64, i64* %PC, align 8
  store i64 %719, i64* %RDI, align 8, !tbaa !2428
  %721 = load i64, i64* %RAX, align 8
  %722 = add i64 %720, 8
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %719 to i64*
  store i64 %721, i64* %723, align 8
  %724 = load i64, i64* %PC, align 8
  %725 = add i64 %724, -482
  %726 = add i64 %724, 5
  %727 = load i64, i64* %RSP, align 8, !tbaa !2428
  %728 = add i64 %727, -8
  %729 = inttoptr i64 %728 to i64*
  store i64 %726, i64* %729, align 8
  store i64 %728, i64* %RSP, align 8, !tbaa !2428
  store i64 %725, i64* %PC, align 8, !tbaa !2428
  %730 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %725, %struct.Memory* %717)
  %731 = load i64, i64* %RBP, align 8
  %732 = add i64 %731, -8
  %733 = load i64, i64* %PC, align 8
  store i64 %732, i64* %RDI, align 8, !tbaa !2428
  %734 = add i64 %731, -48
  %735 = add i64 %733, 8
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to i64*
  %737 = load i64, i64* %736, align 8
  store i64 %737, i64* %RSI, align 8, !tbaa !2428
  %738 = add i64 %731, -152
  %739 = load i64, i64* %RAX, align 8
  %740 = add i64 %733, 15
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %738 to i64*
  store i64 %739, i64* %741, align 8
  %742 = load i64, i64* %PC, align 8
  %743 = add i64 %742, -390
  %744 = add i64 %742, 5
  %745 = load i64, i64* %RSP, align 8, !tbaa !2428
  %746 = add i64 %745, -8
  %747 = inttoptr i64 %746 to i64*
  store i64 %744, i64* %747, align 8
  store i64 %746, i64* %RSP, align 8, !tbaa !2428
  store i64 %743, i64* %PC, align 8, !tbaa !2428
  %748 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %743, %struct.Memory* %730)
  %749 = load i64, i64* %RBP, align 8
  %750 = add i64 %749, -96
  %751 = load i64, i64* %PC, align 8
  store i64 %750, i64* %RDI, align 8, !tbaa !2428
  %752 = load i64, i64* %RAX, align 8
  %753 = add i64 %751, 8
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %750 to i64*
  store i64 %752, i64* %754, align 8
  %755 = load i64, i64* %PC, align 8
  %756 = add i64 %755, -515
  %757 = add i64 %755, 5
  %758 = load i64, i64* %RSP, align 8, !tbaa !2428
  %759 = add i64 %758, -8
  %760 = inttoptr i64 %759 to i64*
  store i64 %757, i64* %760, align 8
  store i64 %759, i64* %RSP, align 8, !tbaa !2428
  store i64 %756, i64* %PC, align 8, !tbaa !2428
  %761 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %756, %struct.Memory* %748)
  %762 = load i64, i64* %RBP, align 8
  %763 = add i64 %762, -152
  %764 = load i64, i64* %PC, align 8
  %765 = add i64 %764, 7
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %763 to i64*
  %767 = load i64, i64* %766, align 8
  store i64 %767, i64* %RSI, align 8, !tbaa !2428
  %768 = add i64 %764, 10
  store i64 %768, i64* %PC, align 8
  %769 = inttoptr i64 %767 to i64*
  %770 = load i64, i64* %769, align 8
  store i64 %770, i64* %RDI, align 8, !tbaa !2428
  %771 = load i64*, i64** %99, align 8
  %772 = add i64 %764, 13
  store i64 %772, i64* %PC, align 8
  store i64 %770, i64* %771, align 8
  %773 = load i64, i64* %RBP, align 8
  %774 = add i64 %773, -40
  %775 = load i64, i64* %PC, align 8
  %776 = add i64 %775, 4
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %774 to i64*
  %778 = load i64, i64* %777, align 8
  %779 = add i64 %778, -1
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = icmp eq i64 %778, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %13, align 1, !tbaa !2432
  %782 = trunc i64 %779 to i32
  %783 = and i32 %782, 255
  %784 = tail call i32 @llvm.ctpop.i32(i32 %783) #10
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  store i8 %787, i8* %20, align 1, !tbaa !2446
  %788 = xor i64 %779, %778
  %789 = lshr i64 %788, 4
  %790 = trunc i64 %789 to i8
  %791 = and i8 %790, 1
  store i8 %791, i8* %26, align 1, !tbaa !2447
  %792 = icmp eq i64 %779, 0
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %29, align 1, !tbaa !2448
  %794 = lshr i64 %779, 63
  %795 = trunc i64 %794 to i8
  store i8 %795, i8* %32, align 1, !tbaa !2449
  %796 = lshr i64 %778, 63
  %797 = xor i64 %794, %796
  %798 = add nuw nsw i64 %797, %796
  %799 = icmp eq i64 %798, 2
  %800 = zext i1 %799 to i8
  store i8 %800, i8* %38, align 1, !tbaa !2450
  %801 = add i64 %773, -48
  %802 = add i64 %775, 12
  store i64 %802, i64* %PC, align 8
  %803 = inttoptr i64 %801 to i64*
  store i64 %779, i64* %803, align 8
  %.pre9 = load i64, i64* %PC, align 8
  %.pre10 = load i64, i64* %RBP, align 8
  br label %block_403f01

block_403dc2:                                     ; preds = %block_403db4
  %804 = add i64 %266, -8
  store i64 %804, i64* %RDI, align 8, !tbaa !2428
  %805 = add i64 %302, 8
  store i64 %805, i64* %PC, align 8
  %806 = load i64, i64* %269, align 8
  %807 = add i64 %806, -1
  store i64 %807, i64* %RAX, align 8, !tbaa !2428
  %808 = icmp eq i64 %806, 0
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %13, align 1, !tbaa !2432
  %810 = trunc i64 %807 to i32
  %811 = and i32 %810, 255
  %812 = tail call i32 @llvm.ctpop.i32(i32 %811) #10
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  store i8 %815, i8* %20, align 1, !tbaa !2446
  %816 = xor i64 %807, %806
  %817 = lshr i64 %816, 4
  %818 = trunc i64 %817 to i8
  %819 = and i8 %818, 1
  store i8 %819, i8* %26, align 1, !tbaa !2447
  %820 = icmp eq i64 %807, 0
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %29, align 1, !tbaa !2448
  %822 = lshr i64 %807, 63
  %823 = trunc i64 %822 to i8
  store i8 %823, i8* %32, align 1, !tbaa !2449
  %824 = lshr i64 %806, 63
  %825 = xor i64 %822, %824
  %826 = add nuw nsw i64 %825, %824
  %827 = icmp eq i64 %826, 2
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %38, align 1, !tbaa !2450
  store i64 %807, i64* %RSI, align 8, !tbaa !2428
  %829 = add i64 %302, -114
  %830 = add i64 %302, 20
  %831 = load i64, i64* %RSP, align 8, !tbaa !2428
  %832 = add i64 %831, -8
  %833 = inttoptr i64 %832 to i64*
  store i64 %830, i64* %833, align 8
  store i64 %832, i64* %RSP, align 8, !tbaa !2428
  store i64 %829, i64* %PC, align 8, !tbaa !2428
  %834 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %829, %struct.Memory* %2)
  %835 = load i64, i64* %RBP, align 8
  %836 = add i64 %835, -56
  %837 = load i64, i64* %PC, align 8
  store i64 %836, i64* %RDI, align 8, !tbaa !2428
  %838 = load i64, i64* %RAX, align 8
  %839 = add i64 %837, 8
  store i64 %839, i64* %PC, align 8
  %840 = inttoptr i64 %836 to i64*
  store i64 %838, i64* %840, align 8
  %841 = load i64, i64* %PC, align 8
  %842 = add i64 %841, -254
  %843 = add i64 %841, 5
  %844 = load i64, i64* %RSP, align 8, !tbaa !2428
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %843, i64* %846, align 8
  store i64 %845, i64* %RSP, align 8, !tbaa !2428
  store i64 %842, i64* %PC, align 8, !tbaa !2428
  %847 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %842, %struct.Memory* %2)
  %848 = load i64, i64* %RBP, align 8
  %849 = add i64 %848, -8
  %850 = load i64, i64* %PC, align 8
  store i64 %849, i64* %RDI, align 8, !tbaa !2428
  %851 = add i64 %848, -40
  %852 = add i64 %850, 8
  store i64 %852, i64* %PC, align 8
  %853 = inttoptr i64 %851 to i64*
  %854 = load i64, i64* %853, align 8
  store i64 %854, i64* %RSI, align 8, !tbaa !2428
  %855 = add i64 %848, -136
  %856 = load i64, i64* %RAX, align 8
  %857 = add i64 %850, 15
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %855 to i64*
  store i64 %856, i64* %858, align 8
  %859 = load i64, i64* %PC, align 8
  %860 = add i64 %859, -162
  %861 = add i64 %859, 5
  %862 = load i64, i64* %RSP, align 8, !tbaa !2428
  %863 = add i64 %862, -8
  %864 = inttoptr i64 %863 to i64*
  store i64 %861, i64* %864, align 8
  store i64 %863, i64* %RSP, align 8, !tbaa !2428
  store i64 %860, i64* %PC, align 8, !tbaa !2428
  %865 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %860, %struct.Memory* %2)
  %866 = load i64, i64* %RBP, align 8
  %867 = add i64 %866, -64
  %868 = load i64, i64* %PC, align 8
  store i64 %867, i64* %RDI, align 8, !tbaa !2428
  %869 = load i64, i64* %RAX, align 8
  %870 = add i64 %868, 8
  store i64 %870, i64* %PC, align 8
  %871 = inttoptr i64 %867 to i64*
  store i64 %869, i64* %871, align 8
  %872 = load i64, i64* %PC, align 8
  %873 = add i64 %872, -287
  %874 = add i64 %872, 5
  %875 = load i64, i64* %RSP, align 8, !tbaa !2428
  %876 = add i64 %875, -8
  %877 = inttoptr i64 %876 to i64*
  store i64 %874, i64* %877, align 8
  store i64 %876, i64* %RSP, align 8, !tbaa !2428
  store i64 %873, i64* %PC, align 8, !tbaa !2428
  %878 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %873, %struct.Memory* %2)
  %879 = load i64, i64* %RBP, align 8
  %880 = add i64 %879, -136
  %881 = load i64, i64* %PC, align 8
  %882 = add i64 %881, 7
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %880 to i64*
  %884 = load i64, i64* %883, align 8
  store i64 %884, i64* %RDI, align 8, !tbaa !2428
  %885 = load i64, i64* %RAX, align 8
  store i64 %885, i64* %RSI, align 8, !tbaa !2428
  %886 = add i64 %881, -2980
  %887 = add i64 %881, 15
  %888 = load i64, i64* %RSP, align 8, !tbaa !2428
  %889 = add i64 %888, -8
  %890 = inttoptr i64 %889 to i64*
  store i64 %887, i64* %890, align 8
  store i64 %889, i64* %RSP, align 8, !tbaa !2428
  store i64 %886, i64* %PC, align 8, !tbaa !2428
  %891 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %886, %struct.Memory* %2)
  %892 = load i8, i8* %AL, align 1
  %893 = load i64, i64* %PC, align 8
  %894 = and i8 %892, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %895 = zext i8 %894 to i32
  %896 = tail call i32 @llvm.ctpop.i32(i32 %895) #10
  %897 = trunc i32 %896 to i8
  %898 = xor i8 %897, 1
  store i8 %898, i8* %20, align 1, !tbaa !2446
  %899 = xor i8 %894, 1
  store i8 %899, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %900 = icmp eq i8 %899, 0
  %.v22 = select i1 %900, i64 13, i64 8
  %901 = add i64 %.v22, %893
  store i64 %901, i64* %PC, align 8, !tbaa !2428
  br i1 %900, label %block_403e20, label %block_403e1b

block_403e20:                                     ; preds = %block_403dc2
  %902 = load i64, i64* %RBP, align 8
  %903 = add i64 %902, -40
  %904 = add i64 %901, 4
  store i64 %904, i64* %PC, align 8
  %905 = inttoptr i64 %903 to i64*
  %906 = load i64, i64* %905, align 8
  %907 = add i64 %906, 1
  store i64 %907, i64* %RAX, align 8, !tbaa !2428
  %908 = icmp eq i64 %906, -1
  %909 = icmp eq i64 %907, 0
  %910 = or i1 %908, %909
  %911 = zext i1 %910 to i8
  store i8 %911, i8* %13, align 1, !tbaa !2432
  %912 = trunc i64 %907 to i32
  %913 = and i32 %912, 255
  %914 = tail call i32 @llvm.ctpop.i32(i32 %913) #10
  %915 = trunc i32 %914 to i8
  %916 = and i8 %915, 1
  %917 = xor i8 %916, 1
  store i8 %917, i8* %20, align 1, !tbaa !2446
  %918 = xor i64 %907, %906
  %919 = lshr i64 %918, 4
  %920 = trunc i64 %919 to i8
  %921 = and i8 %920, 1
  store i8 %921, i8* %26, align 1, !tbaa !2447
  %922 = zext i1 %909 to i8
  store i8 %922, i8* %29, align 1, !tbaa !2448
  %923 = lshr i64 %907, 63
  %924 = trunc i64 %923 to i8
  store i8 %924, i8* %32, align 1, !tbaa !2449
  %925 = lshr i64 %906, 63
  %926 = xor i64 %923, %925
  %927 = add nuw nsw i64 %926, %923
  %928 = icmp eq i64 %927, 2
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %38, align 1, !tbaa !2450
  %930 = add i64 %901, 12
  store i64 %930, i64* %PC, align 8
  store i64 %907, i64* %905, align 8
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_403e2c
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a60___cxx_global_var_init_22(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10Pb_type* @DV10Pb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4479
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401be0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400bc0_frame_dummy(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400bc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400b50_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_400980___cxx_global_var_init_15(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400980:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dPe_type* @dPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4767
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c20__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400ae0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400ae0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %11 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %RSI, align 8, !tbaa !2428
  store i64 %12, i64* %RDX, align 8, !tbaa !2428
  %15 = and i64 %12, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 240
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #10
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %4, align 1, !tbaa !2446
  %22 = icmp eq i64 %15, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %5, align 1, !tbaa !2448
  %24 = lshr i64 %12, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %26 = load i64, i64* %RAX, align 8
  %27 = add i64 %1, 14
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %15, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %15, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %28, i64* %33, align 16
  %34 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_406740___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_4066d0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %34, 27
  %36 = add i64 %15, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37, align 8
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %38 = load i64, i64* getelementptr inbounds (%seg_608ff0__got_type, %seg_608ff0__got_type* @seg_608ff0__got, i64 0, i32 0), align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = tail call fastcc %struct.Memory* @ext_620928___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC, align 8
  %42 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %41, %struct.Memory* %39)
  ret %struct.Memory* %42
}

; Function Attrs: noinline
define %struct.Memory* @sub_405630__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_405630:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = icmp eq i64 %60, 0
  %62 = zext i1 %61 to i8
  %63 = lshr i64 %60, 63
  %64 = add nsw i64 %60, -1
  store i8 %62, i8* %13, align 1, !tbaa !2432
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #10
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i64 %64, %60
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2447
  %75 = icmp eq i64 %64, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2448
  %77 = lshr i64 %64, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2449
  %79 = xor i64 %77, %63
  %80 = add nuw nsw i64 %79, %63
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2450
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 269, i64 25
  %86 = add i64 %.v, %51
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_40574d, label %block_405659

block_4056bb:                                     ; preds = %block_4056b6, %block_4056d2
  %87 = phi i64 [ %446, %block_4056b6 ], [ %.pre36, %block_4056d2 ]
  %.sink4 = phi i64 [ %229, %block_4056b6 ], [ %226, %block_4056d2 ]
  %MEMORY.0 = phi %struct.Memory* [ %405, %block_4056b6 ], [ %125, %block_4056d2 ]
  %88 = add i64 %87, -32
  %89 = add i64 %.sink4, 4
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = add i64 %.sink4, 8
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %310, align 1, !tbaa !2451
  store double 0.000000e+00, double* %312, align 1, !tbaa !2451
  %95 = add i64 %87, -24
  %96 = add i64 %.sink4, 13
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %335, align 1, !tbaa !2451
  store double 0.000000e+00, double* %337, align 1, !tbaa !2451
  %99 = add i64 %.sink4, 17
  store i64 %99, i64* %PC, align 8
  %.cast = bitcast i64 %98 to double
  %100 = bitcast i64 %94 to double
  %101 = fcmp uno double %.cast, %100
  br i1 %101, label %102, label %112

; <label>:102:                                    ; preds = %block_4056bb
  %103 = fadd double %100, %.cast
  %104 = bitcast double %103 to i64
  %105 = and i64 %104, 9221120237041090560
  %106 = icmp eq i64 %105, 9218868437227405312
  %107 = and i64 %104, 2251799813685247
  %108 = icmp ne i64 %107, 0
  %109 = and i1 %106, %108
  br i1 %109, label %110, label %118

; <label>:110:                                    ; preds = %102
  %111 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %99, %struct.Memory* %MEMORY.0) #13
  %.pre37 = load i64, i64* %PC, align 8
  %.pre38 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:112:                                    ; preds = %block_4056bb
  %113 = fcmp ogt double %.cast, %100
  br i1 %113, label %118, label %114

; <label>:114:                                    ; preds = %112
  %115 = fcmp olt double %.cast, %100
  br i1 %115, label %118, label %116

; <label>:116:                                    ; preds = %114
  %117 = fcmp oeq double %.cast, %100
  br i1 %117, label %118, label %122

; <label>:118:                                    ; preds = %116, %114, %112, %102
  %119 = phi i8 [ 0, %112 ], [ 0, %114 ], [ 1, %116 ], [ 1, %102 ]
  %120 = phi i8 [ 0, %112 ], [ 0, %114 ], [ 0, %116 ], [ 1, %102 ]
  %121 = phi i8 [ 0, %112 ], [ 1, %114 ], [ 0, %116 ], [ 1, %102 ]
  store i8 %119, i8* %29, align 1, !tbaa !2453
  store i8 %120, i8* %20, align 1, !tbaa !2453
  store i8 %121, i8* %13, align 1, !tbaa !2453
  br label %122

; <label>:122:                                    ; preds = %118, %116
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %122, %110
  %123 = phi i64 [ %.pre38, %110 ], [ %87, %122 ]
  %124 = phi i64 [ %.pre37, %110 ], [ %99, %122 ]
  %125 = phi %struct.Memory* [ %111, %110 ], [ %MEMORY.0, %122 ]
  %126 = load i8, i8* %13, align 1, !tbaa !2432
  %127 = load i8, i8* %29, align 1, !tbaa !2448
  %128 = or i8 %127, %126
  %129 = icmp ne i8 %128, 0
  %.v54 = select i1 %129, i64 23, i64 6
  %130 = add i64 %.v54, %124
  %131 = add i64 %123, -32
  %132 = add i64 %130, 4
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  br i1 %129, label %block_4056e3, label %block_4056d2

block_405676:                                     ; preds = %block_405659, %block_4056f6
  %.pre = phi i64 [ %.pre.pre, %block_405659 ], [ %171, %block_4056f6 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_405659 ], [ %125, %block_4056f6 ]
  br label %block_40567b

block_4056f6:                                     ; preds = %block_4056e3
  %135 = add i64 %201, 4
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %174, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %201, 8
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %310, align 1, !tbaa !2451
  store double 0.000000e+00, double* %312, align 1, !tbaa !2451
  %140 = add i64 %123, -48
  %141 = add i64 %201, 13
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %140 to i64*
  store i64 %139, i64* %142, align 8
  %143 = load i64, i64* %RBP, align 8
  %144 = add i64 %143, -32
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %144 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RAX, align 8, !tbaa !2428
  %149 = add i64 %145, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %310, align 1, !tbaa !2451
  store double 0.000000e+00, double* %312, align 1, !tbaa !2451
  %152 = add i64 %143, -40
  %153 = add i64 %145, 12
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = add i64 %145, 16
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %155 to i64*
  store i64 %151, i64* %157, align 8
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -48
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 5
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %310, align 1, !tbaa !2451
  store double 0.000000e+00, double* %312, align 1, !tbaa !2451
  %164 = add i64 %158, -32
  %165 = add i64 %160, 9
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %160, 13
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i64*
  store i64 %163, i64* %169, align 8
  %170 = load i64, i64* %PC, align 8
  %171 = add i64 %170, -170
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  br label %block_405676

block_4056e3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %172 = add i64 %123, -40
  %173 = add i64 %130, 8
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = sub i64 %134, %175
  %177 = icmp ult i64 %134, %175
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %13, align 1, !tbaa !2432
  %179 = trunc i64 %176 to i32
  %180 = and i32 %179, 255
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180) #10
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  store i8 %184, i8* %20, align 1, !tbaa !2446
  %185 = xor i64 %175, %134
  %186 = xor i64 %185, %176
  %187 = lshr i64 %186, 4
  %188 = trunc i64 %187 to i8
  %189 = and i8 %188, 1
  store i8 %189, i8* %26, align 1, !tbaa !2447
  %190 = icmp eq i64 %176, 0
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %29, align 1, !tbaa !2448
  %192 = lshr i64 %176, 63
  %193 = trunc i64 %192 to i8
  store i8 %193, i8* %32, align 1, !tbaa !2449
  %194 = lshr i64 %134, 63
  %195 = lshr i64 %175, 63
  %196 = xor i64 %195, %194
  %197 = xor i64 %192, %194
  %198 = add nuw nsw i64 %197, %196
  %199 = icmp eq i64 %198, 2
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %38, align 1, !tbaa !2450
  %.v42 = select i1 %177, i64 19, i64 14
  %201 = add i64 %.v42, %130
  store i64 %201, i64* %PC, align 8, !tbaa !2428
  br i1 %177, label %block_4056f6, label %block_4056f1

block_4056d2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %202 = add i64 %134, 8
  store i64 %202, i64* %RAX, align 8, !tbaa !2428
  %203 = icmp ugt i64 %134, -9
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %13, align 1, !tbaa !2432
  %205 = trunc i64 %202 to i32
  %206 = and i32 %205, 255
  %207 = tail call i32 @llvm.ctpop.i32(i32 %206) #10
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  store i8 %210, i8* %20, align 1, !tbaa !2446
  %211 = xor i64 %202, %134
  %212 = lshr i64 %211, 4
  %213 = trunc i64 %212 to i8
  %214 = and i8 %213, 1
  store i8 %214, i8* %26, align 1, !tbaa !2447
  %215 = icmp eq i64 %202, 0
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %29, align 1, !tbaa !2448
  %217 = lshr i64 %202, 63
  %218 = trunc i64 %217 to i8
  store i8 %218, i8* %32, align 1, !tbaa !2449
  %219 = lshr i64 %134, 63
  %220 = xor i64 %217, %219
  %221 = add nuw nsw i64 %220, %217
  %222 = icmp eq i64 %221, 2
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %38, align 1, !tbaa !2450
  %224 = add i64 %130, 12
  store i64 %224, i64* %PC, align 8
  store i64 %202, i64* %133, align 8
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, -35
  %.pre36 = load i64, i64* %RBP, align 8
  br label %block_4056bb

block_4056f1:                                     ; preds = %block_4056e3
  %227 = add i64 %201, 52
  br label %block_405725

block_4056b1:                                     ; preds = %block_4056a3
  %228 = add i64 %480, 116
  br label %block_405725

block_4056b6:                                     ; preds = %block_4056a3
  %229 = add i64 %480, 5
  br label %block_4056bb

block_405725:                                     ; preds = %block_4056b1, %block_4056f1
  %230 = phi i64 [ %446, %block_4056b1 ], [ %123, %block_4056f1 ]
  %.sink8 = phi i64 [ %228, %block_4056b1 ], [ %227, %block_4056f1 ]
  %MEMORY.2 = phi %struct.Memory* [ %405, %block_4056b1 ], [ %125, %block_4056f1 ]
  %231 = add i64 %230, -8
  %232 = add i64 %.sink8, 4
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i64*
  %234 = load i64, i64* %233, align 8
  store i64 %234, i64* %RDI, align 8, !tbaa !2428
  %235 = add i64 %230, -40
  %236 = add i64 %.sink8, 8
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = add i64 %238, 8
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = icmp ugt i64 %238, -9
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %13, align 1, !tbaa !2432
  %242 = trunc i64 %239 to i32
  %243 = and i32 %242, 255
  %244 = tail call i32 @llvm.ctpop.i32(i32 %243) #10
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  store i8 %247, i8* %20, align 1, !tbaa !2446
  %248 = xor i64 %239, %238
  %249 = lshr i64 %248, 4
  %250 = trunc i64 %249 to i8
  %251 = and i8 %250, 1
  store i8 %251, i8* %26, align 1, !tbaa !2447
  %252 = icmp eq i64 %239, 0
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %29, align 1, !tbaa !2448
  %254 = lshr i64 %239, 63
  %255 = trunc i64 %254 to i8
  store i8 %255, i8* %32, align 1, !tbaa !2449
  %256 = lshr i64 %238, 63
  %257 = xor i64 %254, %256
  %258 = add nuw nsw i64 %257, %254
  %259 = icmp eq i64 %258, 2
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %38, align 1, !tbaa !2450
  store i64 %239, i64* %RSI, align 8, !tbaa !2428
  %261 = add i64 %.sink8, -245
  %262 = add i64 %.sink8, 20
  %263 = load i64, i64* %RSP, align 8, !tbaa !2428
  %264 = add i64 %263, -8
  %265 = inttoptr i64 %264 to i64*
  store i64 %262, i64* %265, align 8
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  store i64 %261, i64* %PC, align 8, !tbaa !2428
  %266 = tail call %struct.Memory* @sub_405630__ZN9benchmark9quicksortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %261, %struct.Memory* %MEMORY.2)
  %267 = load i64, i64* %RBP, align 8
  %268 = add i64 %267, -40
  %269 = load i64, i64* %PC, align 8
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %268 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = add i64 %272, 8
  store i64 %273, i64* %RAX, align 8, !tbaa !2428
  %274 = icmp ugt i64 %272, -9
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %13, align 1, !tbaa !2432
  %276 = trunc i64 %273 to i32
  %277 = and i32 %276, 255
  %278 = tail call i32 @llvm.ctpop.i32(i32 %277) #10
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  store i8 %281, i8* %20, align 1, !tbaa !2446
  %282 = xor i64 %273, %272
  %283 = lshr i64 %282, 4
  %284 = trunc i64 %283 to i8
  %285 = and i8 %284, 1
  store i8 %285, i8* %26, align 1, !tbaa !2447
  %286 = icmp eq i64 %273, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %29, align 1, !tbaa !2448
  %288 = lshr i64 %273, 63
  %289 = trunc i64 %288 to i8
  store i8 %289, i8* %32, align 1, !tbaa !2449
  %290 = lshr i64 %272, 63
  %291 = xor i64 %288, %290
  %292 = add nuw nsw i64 %291, %288
  %293 = icmp eq i64 %292, 2
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %38, align 1, !tbaa !2450
  %295 = add i64 %267, -16
  %296 = add i64 %269, 12
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RSI, align 8, !tbaa !2428
  store i64 %273, i64* %RDI, align 8, !tbaa !2428
  %299 = add i64 %269, -265
  %300 = add i64 %269, 20
  %301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303, align 8
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  %304 = tail call %struct.Memory* @sub_405630__ZN9benchmark9quicksortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %299, %struct.Memory* %266)
  %.pre39 = load i64, i64* %PC, align 8
  br label %block_40574d

block_405659:                                     ; preds = %block_405630
  %305 = add i64 %86, 4
  store i64 %305, i64* %PC, align 8
  %306 = load i64, i64* %57, align 8
  store i64 %306, i64* %RAX, align 8, !tbaa !2428
  %307 = add i64 %86, 8
  store i64 %307, i64* %PC, align 8
  %308 = inttoptr i64 %306 to i64*
  %309 = load i64, i64* %308, align 8
  %310 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %309, i64* %310, align 1, !tbaa !2451
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %312 = bitcast i64* %311 to double*
  store double 0.000000e+00, double* %312, align 1, !tbaa !2451
  %313 = add i64 %49, -24
  %314 = add i64 %86, 13
  store i64 %314, i64* %PC, align 8
  %315 = bitcast [32 x %union.VectorReg]* %3 to double*
  %316 = inttoptr i64 %313 to i64*
  store i64 %309, i64* %316, align 8
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -8
  %319 = load i64, i64* %PC, align 8
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %318 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = add i64 %317, -32
  %324 = add i64 %319, 8
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  store i64 %322, i64* %325, align 8
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -16
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = add i64 %326, -40
  %333 = add i64 %328, 8
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  store i64 %331, i64* %334, align 8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %337 = bitcast i64* %336 to double*
  %.pre.pre = load i64, i64* %PC, align 8
  br label %block_405676

block_40567b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_405676
  %338 = phi i64 [ %.pre, %block_405676 ], [ %407, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %.sink17 = phi i64 [ 5, %block_405676 ], [ -35, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_405676 ], [ %405, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %339 = add i64 %.sink17, %338
  %340 = load i64, i64* %RBP, align 8
  %341 = add i64 %340, -24
  %342 = add i64 %339, 5
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i64*
  %344 = load i64, i64* %343, align 8
  store i64 %344, i64* %310, align 1, !tbaa !2451
  store double 0.000000e+00, double* %312, align 1, !tbaa !2451
  %345 = add i64 %340, -40
  %346 = add i64 %339, 9
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %345 to i64*
  %348 = load i64, i64* %347, align 8
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = add i64 %348, -8
  store i64 %349, i64* %RCX, align 8, !tbaa !2428
  %350 = icmp ugt i64 %348, 7
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %13, align 1, !tbaa !2432
  %352 = trunc i64 %349 to i32
  %353 = and i32 %352, 255
  %354 = tail call i32 @llvm.ctpop.i32(i32 %353) #10
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  store i8 %357, i8* %20, align 1, !tbaa !2446
  %358 = xor i64 %348, 16
  %359 = xor i64 %358, %349
  %360 = lshr i64 %359, 4
  %361 = trunc i64 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %26, align 1, !tbaa !2447
  %363 = icmp eq i64 %349, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %29, align 1, !tbaa !2448
  %365 = lshr i64 %349, 63
  %366 = trunc i64 %365 to i8
  store i8 %366, i8* %32, align 1, !tbaa !2449
  %367 = lshr i64 %348, 63
  %368 = xor i64 %365, %367
  %369 = xor i64 %365, 1
  %370 = add nuw nsw i64 %368, %369
  %371 = icmp eq i64 %370, 2
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %38, align 1, !tbaa !2450
  %373 = add i64 %339, 20
  store i64 %373, i64* %PC, align 8
  store i64 %349, i64* %347, align 8
  %374 = load i64, i64* %RAX, align 8
  %375 = add i64 %374, -8
  %376 = load i64, i64* %PC, align 8
  %377 = add i64 %376, 5
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %375 to i64*
  %379 = load i64, i64* %378, align 8
  store i64 %379, i64* %335, align 1, !tbaa !2451
  store double 0.000000e+00, double* %337, align 1, !tbaa !2451
  %380 = add i64 %376, 9
  store i64 %380, i64* %PC, align 8
  %.cast27 = bitcast i64 %379 to double
  %381 = load double, double* %315, align 1
  %382 = fcmp uno double %.cast27, %381
  br i1 %382, label %383, label %393

; <label>:383:                                    ; preds = %block_40567b
  %384 = fadd double %.cast27, %381
  %385 = bitcast double %384 to i64
  %386 = and i64 %385, 9221120237041090560
  %387 = icmp eq i64 %386, 9218868437227405312
  %388 = and i64 %385, 2251799813685247
  %389 = icmp ne i64 %388, 0
  %390 = and i1 %387, %389
  br i1 %390, label %391, label %399

; <label>:391:                                    ; preds = %383
  %392 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %380, %struct.Memory* %MEMORY.3) #13
  %.pre35 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:393:                                    ; preds = %block_40567b
  %394 = fcmp ogt double %.cast27, %381
  br i1 %394, label %399, label %395

; <label>:395:                                    ; preds = %393
  %396 = fcmp olt double %.cast27, %381
  br i1 %396, label %399, label %397

; <label>:397:                                    ; preds = %395
  %398 = fcmp oeq double %.cast27, %381
  br i1 %398, label %399, label %403

; <label>:399:                                    ; preds = %397, %395, %393, %383
  %400 = phi i8 [ 0, %393 ], [ 0, %395 ], [ 1, %397 ], [ 1, %383 ]
  %401 = phi i8 [ 0, %393 ], [ 0, %395 ], [ 0, %397 ], [ 1, %383 ]
  %402 = phi i8 [ 0, %393 ], [ 1, %395 ], [ 0, %397 ], [ 1, %383 ]
  store i8 %400, i8* %29, align 1, !tbaa !2453
  store i8 %401, i8* %20, align 1, !tbaa !2453
  store i8 %402, i8* %13, align 1, !tbaa !2453
  br label %403

; <label>:403:                                    ; preds = %399, %397
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %403, %391
  %404 = phi i64 [ %.pre35, %391 ], [ %380, %403 ]
  %405 = phi %struct.Memory* [ %392, %391 ], [ %MEMORY.3, %403 ]
  %406 = add i64 %404, 11
  %407 = add i64 %404, 6
  %408 = load i8, i8* %13, align 1, !tbaa !2432
  %409 = load i8, i8* %29, align 1, !tbaa !2448
  %410 = or i8 %409, %408
  %411 = icmp ne i8 %410, 0
  %412 = select i1 %411, i64 %406, i64 %407
  store i64 %412, i64* %PC, align 8, !tbaa !2428
  br i1 %411, label %block_4056a3, label %block_40567b

block_40574d:                                     ; preds = %block_405725, %block_405630
  %413 = phi i64 [ %86, %block_405630 ], [ %.pre39, %block_405725 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_405630 ], [ %304, %block_405725 ]
  %414 = load i64, i64* %RSP, align 8
  %415 = add i64 %414, 48
  store i64 %415, i64* %RSP, align 8, !tbaa !2428
  %416 = icmp ugt i64 %414, -49
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %13, align 1, !tbaa !2432
  %418 = trunc i64 %415 to i32
  %419 = and i32 %418, 255
  %420 = tail call i32 @llvm.ctpop.i32(i32 %419) #10
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  store i8 %423, i8* %20, align 1, !tbaa !2446
  %424 = xor i64 %414, 16
  %425 = xor i64 %424, %415
  %426 = lshr i64 %425, 4
  %427 = trunc i64 %426 to i8
  %428 = and i8 %427, 1
  store i8 %428, i8* %26, align 1, !tbaa !2447
  %429 = icmp eq i64 %415, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %29, align 1, !tbaa !2448
  %431 = lshr i64 %415, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %32, align 1, !tbaa !2449
  %433 = lshr i64 %414, 63
  %434 = xor i64 %431, %433
  %435 = add nuw nsw i64 %434, %431
  %436 = icmp eq i64 %435, 2
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %38, align 1, !tbaa !2450
  %438 = add i64 %413, 5
  store i64 %438, i64* %PC, align 8
  %439 = add i64 %414, 56
  %440 = inttoptr i64 %415 to i64*
  %441 = load i64, i64* %440, align 8
  store i64 %441, i64* %RBP, align 8, !tbaa !2428
  store i64 %439, i64* %RSP, align 8, !tbaa !2428
  %442 = add i64 %413, 6
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %439 to i64*
  %444 = load i64, i64* %443, align 8
  store i64 %444, i64* %PC, align 8, !tbaa !2428
  %445 = add i64 %414, 64
  store i64 %445, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_4056a3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %446 = load i64, i64* %RBP, align 8
  %447 = add i64 %446, -32
  %448 = add i64 %412, 4
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %447 to i64*
  %450 = load i64, i64* %449, align 8
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = add i64 %446, -40
  %452 = add i64 %412, 8
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453, align 8
  %455 = sub i64 %450, %454
  %456 = icmp ult i64 %450, %454
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %13, align 1, !tbaa !2432
  %458 = trunc i64 %455 to i32
  %459 = and i32 %458, 255
  %460 = tail call i32 @llvm.ctpop.i32(i32 %459) #10
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  store i8 %463, i8* %20, align 1, !tbaa !2446
  %464 = xor i64 %454, %450
  %465 = xor i64 %464, %455
  %466 = lshr i64 %465, 4
  %467 = trunc i64 %466 to i8
  %468 = and i8 %467, 1
  store i8 %468, i8* %26, align 1, !tbaa !2447
  %469 = icmp eq i64 %455, 0
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %29, align 1, !tbaa !2448
  %471 = lshr i64 %455, 63
  %472 = trunc i64 %471 to i8
  store i8 %472, i8* %32, align 1, !tbaa !2449
  %473 = lshr i64 %450, 63
  %474 = lshr i64 %454, 63
  %475 = xor i64 %474, %473
  %476 = xor i64 %471, %473
  %477 = add nuw nsw i64 %476, %475
  %478 = icmp eq i64 %477, 2
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %38, align 1, !tbaa !2450
  %.v41 = select i1 %456, i64 19, i64 14
  %480 = add i64 %.v41, %412
  store i64 %480, i64* %PC, align 8, !tbaa !2428
  br i1 %456, label %block_4056b6, label %block_4056b1
}

; Function Attrs: noinline
define %struct.Memory* @sub_4020e0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4020e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -88
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 80
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %PC, align 8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %53 = load i64, i64* %52, align 1
  %54 = inttoptr i64 %49 to i64*
  store i64 %53, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402100

block_402110:                                     ; preds = %block_402100
  %68 = add i64 %198, -8
  %69 = add i64 %231, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %72 = add i64 %198, -48
  %73 = add i64 %231, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -16
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %75, -56
  %82 = add i64 %77, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  store i64 %80, i64* %83, align 8
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -24
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = add i64 %84, -64
  %91 = add i64 %86, 8
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  store i64 %89, i64* %92, align 8
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -48
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %99 = add i64 %93, -56
  %100 = add i64 %95, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %103 = add i64 %93, -64
  %104 = add i64 %95, 13
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %52, align 1, !tbaa !2451
  store double 0.000000e+00, double* %67, align 1, !tbaa !2451
  %107 = add i64 %95, 15416
  %108 = add i64 %95, 18
  %109 = load i64, i64* %RSP, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_405d60__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__renamed_(%struct.State* nonnull %0, i64 %107, %struct.Memory* %2)
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -72
  %115 = load i64, i64* %PC, align 8
  store i64 %114, i64* %RDI, align 8, !tbaa !2428
  %116 = add i64 %115, 9
  store i64 %116, i64* %PC, align 8
  %117 = load i64, i64* %52, align 1
  %118 = inttoptr i64 %114 to i64*
  store i64 %117, i64* %118, align 8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 15517
  %121 = add i64 %119, 5
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_405de0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, 15544
  %128 = add i64 %126, 5
  %129 = load i64, i64* %RSP, align 8, !tbaa !2428
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %128, i64* %131, align 8
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  %132 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %127, %struct.Memory* %2)
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -36
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = add i32 %138, 1
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = icmp eq i32 %138, -1
  %142 = icmp eq i32 %139, 0
  %143 = or i1 %141, %142
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %12, align 1, !tbaa !2432
  %145 = and i32 %139, 255
  %146 = tail call i32 @llvm.ctpop.i32(i32 %145) #10
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %19, align 1, !tbaa !2446
  %150 = xor i32 %139, %138
  %151 = lshr i32 %150, 4
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %25, align 1, !tbaa !2447
  %154 = zext i1 %142 to i8
  store i8 %154, i8* %28, align 1, !tbaa !2448
  %155 = lshr i32 %139, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %31, align 1, !tbaa !2449
  %157 = lshr i32 %138, 31
  %158 = xor i32 %155, %157
  %159 = add nuw nsw i32 %158, %155
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %37, align 1, !tbaa !2450
  %162 = add i64 %135, 9
  store i64 %162, i64* %PC, align 8
  store i32 %139, i32* %137, align 4
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, -86
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  br label %block_402100

block_40215b:                                     ; preds = %block_402100
  %165 = load i64, i64* %RSP, align 8
  %166 = add i64 %165, 80
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  %167 = icmp ugt i64 %165, -81
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %12, align 1, !tbaa !2432
  %169 = trunc i64 %166 to i32
  %170 = and i32 %169, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i64 %165, 16
  %176 = xor i64 %175, %166
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %25, align 1, !tbaa !2447
  %180 = icmp eq i64 %166, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %28, align 1, !tbaa !2448
  %182 = lshr i64 %166, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %31, align 1, !tbaa !2449
  %184 = lshr i64 %165, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %37, align 1, !tbaa !2450
  %189 = add i64 %231, 5
  store i64 %189, i64* %PC, align 8
  %190 = add i64 %165, 88
  %191 = inttoptr i64 %166 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RBP, align 8, !tbaa !2428
  store i64 %190, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %231, 6
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %190 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  %196 = add i64 %165, 96
  store i64 %196, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402100:                                     ; preds = %block_402110, %block_4020e0
  %197 = phi i64 [ %164, %block_402110 ], [ %.pre, %block_4020e0 ]
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -36
  %200 = add i64 %197, 3
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %205 = sub i32 %202, %204
  %206 = icmp ult i32 %202, %204
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %12, align 1, !tbaa !2432
  %208 = and i32 %205, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #10
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %19, align 1, !tbaa !2446
  %213 = xor i32 %204, %202
  %214 = xor i32 %213, %205
  %215 = lshr i32 %214, 4
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  store i8 %217, i8* %25, align 1, !tbaa !2447
  %218 = icmp eq i32 %205, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %28, align 1, !tbaa !2448
  %220 = lshr i32 %205, 31
  %221 = trunc i32 %220 to i8
  store i8 %221, i8* %31, align 1, !tbaa !2449
  %222 = lshr i32 %202, 31
  %223 = lshr i32 %204, 31
  %224 = xor i32 %223, %222
  %225 = xor i32 %220, %222
  %226 = add nuw nsw i32 %225, %224
  %227 = icmp eq i32 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %37, align 1, !tbaa !2450
  %229 = icmp ne i8 %221, 0
  %230 = xor i1 %229, %227
  %.v = select i1 %230, i64 16, i64 91
  %231 = add i64 %.v, %197
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  br i1 %230, label %block_402110, label %block_40215b
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ac0___cxx_global_var_init_25(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400ac0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10MPe_type* @DV10MPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4383
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401be0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403260:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 8
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %28, i64* %29, align 1, !tbaa !2451
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %31 = bitcast i64* %30 to double*
  store double 0.000000e+00, double* %31, align 1, !tbaa !2451
  %32 = add i64 %20, -16
  %33 = add i64 %22, 12
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RSI, align 8, !tbaa !2428
  %36 = add i64 %22, 16
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %38, i64* %39, align 1, !tbaa !2451
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %41 = bitcast i64* %40 to double*
  store double 0.000000e+00, double* %41, align 1, !tbaa !2451
  %42 = add i64 %22, 20
  store i64 %42, i64* %PC, align 8
  %43 = bitcast i64 %38 to double
  %44 = bitcast i64 %28 to double
  %45 = fcmp uno double %43, %44
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %block_403260
  %47 = fadd double %44, %43
  %48 = bitcast double %47 to i64
  %49 = and i64 %48, 9221120237041090560
  %50 = icmp eq i64 %49, 9218868437227405312
  %51 = and i64 %48, 2251799813685247
  %52 = icmp ne i64 %51, 0
  %53 = and i1 %50, %52
  br i1 %53, label %54, label %62

; <label>:54:                                     ; preds = %46
  %55 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %42, %struct.Memory* %2) #13
  %.pre = load i64, i64* %PC, align 8
  %.pre1 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %.pre2 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:56:                                     ; preds = %block_403260
  %57 = fcmp ogt double %43, %44
  br i1 %57, label %62, label %58

; <label>:58:                                     ; preds = %56
  %59 = fcmp olt double %43, %44
  br i1 %59, label %62, label %60

; <label>:60:                                     ; preds = %58
  %61 = fcmp oeq double %43, %44
  br i1 %61, label %62, label %69

; <label>:62:                                     ; preds = %60, %58, %56, %46
  %63 = phi i8 [ 0, %56 ], [ 0, %58 ], [ 1, %60 ], [ 1, %46 ]
  %64 = phi i8 [ 0, %56 ], [ 0, %58 ], [ 0, %60 ], [ 1, %46 ]
  %65 = phi i8 [ 0, %56 ], [ 1, %58 ], [ 0, %60 ], [ 1, %46 ]
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %66, align 1, !tbaa !2453
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %67, align 1, !tbaa !2453
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %65, i8* %68, align 1, !tbaa !2453
  br label %69

; <label>:69:                                     ; preds = %62, %60
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %70, align 1, !tbaa !2453
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %71, align 1, !tbaa !2453
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %72, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %69, %54
  %.pre-phi5 = phi i8* [ %72, %69 ], [ %.pre4, %54 ]
  %.pre-phi3 = phi i8* [ %70, %69 ], [ %.pre2, %54 ]
  %.pre-phi = phi i8* [ %71, %69 ], [ %.pre1, %54 ]
  %73 = phi i64 [ %42, %69 ], [ %.pre, %54 ]
  %74 = phi %struct.Memory* [ %2, %69 ], [ %55, %54 ]
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %76 = load i8, i8* %75, align 1, !tbaa !2432
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %78 = load i8, i8* %77, align 1, !tbaa !2448
  %79 = or i8 %78, %76
  %80 = icmp eq i8 %79, 0
  store i8 0, i8* %75, align 1, !tbaa !2432
  %81 = zext i1 %80 to i32
  %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #10
  %83 = trunc i32 %82 to i8
  %84 = xor i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %84, i8* %85, align 1, !tbaa !2446
  %86 = xor i1 %80, true
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi3, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi5, align 1, !tbaa !2447
  %88 = zext i1 %80 to i64
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %73, 9
  store i64 %89, i64* %PC, align 8
  %90 = load i64, i64* %5, align 8, !tbaa !2428
  %91 = add i64 %90, 8
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RBP, align 8, !tbaa !2428
  store i64 %91, i64* %5, align 8, !tbaa !2428
  %94 = add i64 %73, 10
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %91 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %PC, align 8, !tbaa !2428
  %97 = add i64 %90, 16
  store i64 %97, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %74
}

; Function Attrs: noinline
define %struct.Memory* @sub_405950__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405950:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -104
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -32
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %20 = add i64 %8, -16
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %11, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -16
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -24
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, -7422
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_40597c

block_4059d2:                                     ; preds = %block_4059b6
  %56 = add i64 %262, 37
  store i64 %56, i64* %PC, align 8, !tbaa !2428
  br label %block_4059f7

block_405991:                                     ; preds = %block_40597c
  %57 = load i64, i64* %RSP, align 8
  %58 = add i64 %57, 96
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  %59 = icmp ugt i64 %57, -97
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %13, align 1, !tbaa !2432
  %61 = trunc i64 %58 to i32
  %62 = and i32 %61, 255
  %63 = tail call i32 @llvm.ctpop.i32(i32 %62) #10
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  store i8 %66, i8* %14, align 1, !tbaa !2446
  %67 = xor i64 %58, %57
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  store i8 %70, i8* %15, align 1, !tbaa !2447
  %71 = icmp eq i64 %58, 0
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %16, align 1, !tbaa !2448
  %73 = lshr i64 %58, 63
  %74 = trunc i64 %73 to i8
  store i8 %74, i8* %17, align 1, !tbaa !2449
  %75 = lshr i64 %57, 63
  %76 = xor i64 %73, %75
  %77 = add nuw nsw i64 %76, %73
  %78 = icmp eq i64 %77, 2
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %18, align 1, !tbaa !2450
  %80 = add i64 %107, 209
  store i64 %80, i64* %PC, align 8
  %81 = add i64 %57, 104
  %82 = inttoptr i64 %58 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RBP, align 8, !tbaa !2428
  store i64 %81, i64* %RSP, align 8, !tbaa !2428
  %84 = add i64 %107, 210
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %81 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  %87 = add i64 %57, 112
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %48

block_40597c:                                     ; preds = %block_405a02, %block_405950
  %88 = phi i64 [ %.pre, %block_405950 ], [ %293, %block_405a02 ]
  %89 = load i64, i64* %RBP, align 8
  %90 = add i64 %89, -24
  store i64 %90, i64* %RDI, align 8, !tbaa !2428
  %91 = add i64 %89, -16
  store i64 %91, i64* %RSI, align 8, !tbaa !2428
  %92 = add i64 %88, -7372
  %93 = add i64 %88, 13
  %94 = load i64, i64* %RSP, align 8, !tbaa !2428
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %93, i64* %96, align 8
  store i64 %95, i64* %RSP, align 8, !tbaa !2428
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  %97 = tail call %struct.Memory* @sub_403cb0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %92, %struct.Memory* %48)
  %98 = load i8, i8* %AL, align 1
  %99 = load i64, i64* %PC, align 8
  %100 = and i8 %98, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %101 = zext i8 %100 to i32
  %102 = tail call i32 @llvm.ctpop.i32(i32 %101) #10
  %103 = trunc i32 %102 to i8
  %104 = xor i8 %103, 1
  store i8 %104, i8* %14, align 1, !tbaa !2446
  %105 = xor i8 %100, 1
  store i8 %105, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %106 = icmp eq i8 %105, 0
  %.v9 = select i1 %106, i64 13, i64 8
  %107 = add i64 %.v9, %99
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  br i1 %106, label %block_405996, label %block_405991

block_405996:                                     ; preds = %block_40597c
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -24
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = add i64 %107, -7350
  %111 = add i64 %107, 9
  %112 = load i64, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %112, -8
  %114 = inttoptr i64 %113 to i64*
  store i64 %111, i64* %114, align 8
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  store i64 %110, i64* %PC, align 8, !tbaa !2428
  %115 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %110, %struct.Memory* %48)
  %116 = load i64*, i64** %55, align 8
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 3
  store i64 %118, i64* %PC, align 8
  %119 = load i64, i64* %116, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = load i64, i64* %RBP, align 8
  %121 = add i64 %120, -40
  %122 = add i64 %117, 7
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %123, align 8
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -24
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %125 to i64*
  %129 = load i64, i64* %128, align 8
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = add i64 %124, -48
  %131 = add i64 %126, 8
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %129, i64* %132, align 8
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -48
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = add i64 %133, -56
  %140 = add i64 %135, 8
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %138, i64* %141, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4059b6

block_4059d7:                                     ; preds = %block_4059b6
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -56
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = add i64 %262, -1799
  %145 = add i64 %262, 9
  %146 = load i64, i64* %RSP, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %145, i64* %148, align 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @sub_4052d0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %144, %struct.Memory* %48)
  %150 = load i64, i64* %RAX, align 8
  %151 = load i64, i64* %PC, align 8
  store i64 %150, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %151, -7424
  %153 = add i64 %151, 8
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %48)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -40
  %160 = load i64, i64* %PC, align 8
  store i64 %159, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %RAX, align 8
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = add i64 %160, -10120
  %163 = add i64 %160, 12
  %164 = load i64, i64* %RSP, align 8, !tbaa !2428
  %165 = add i64 %164, -8
  %166 = inttoptr i64 %165 to i64*
  store i64 %163, i64* %166, align 8
  store i64 %165, i64* %RSP, align 8, !tbaa !2428
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  %167 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %162, %struct.Memory* %48)
  %168 = load i64, i64* %RBP, align 8
  %169 = add i64 %168, -65
  %170 = load i8, i8* %AL, align 1
  %171 = load i64, i64* %PC, align 8
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %169 to i8*
  store i8 %170, i8* %173, align 1
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4059f7

block_405a07:                                     ; preds = %block_4059f7
  %174 = add i64 %224, -56
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = add i64 %236, -7463
  %176 = add i64 %236, 9
  %177 = load i64, i64* %RSP, align 8, !tbaa !2428
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %179, align 8
  store i64 %178, i64* %RSP, align 8, !tbaa !2428
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %180 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %175, %struct.Memory* %48)
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -48
  %183 = load i64, i64* %PC, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %184 = add i64 %181, -80
  %185 = load i64, i64* %RAX, align 8
  %186 = add i64 %183, 8
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  store i64 %185, i64* %187, align 8
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -7480
  %190 = add i64 %188, 5
  %191 = load i64, i64* %RSP, align 8, !tbaa !2428
  %192 = add i64 %191, -8
  %193 = inttoptr i64 %192 to i64*
  store i64 %190, i64* %193, align 8
  store i64 %192, i64* %RSP, align 8, !tbaa !2428
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  %194 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %189, %struct.Memory* %48)
  %195 = load i64, i64* %RBP, align 8
  %196 = add i64 %195, -80
  %197 = load i64, i64* %PC, align 8
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %196 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = add i64 %197, 7
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RCX, align 8, !tbaa !2428
  %204 = load i64*, i64** %55, align 8
  %205 = add i64 %197, 10
  store i64 %205, i64* %PC, align 8
  store i64 %203, i64* %204, align 8
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -48
  %208 = load i64, i64* %PC, align 8
  store i64 %207, i64* %RDI, align 8, !tbaa !2428
  %209 = add i64 %208, -1879
  %210 = add i64 %208, 9
  %211 = load i64, i64* %RSP, align 8, !tbaa !2428
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %210, i64* %213, align 8
  store i64 %212, i64* %RSP, align 8, !tbaa !2428
  store i64 %209, i64* %PC, align 8, !tbaa !2428
  %214 = tail call %struct.Memory* @sub_4052d0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %209, %struct.Memory* %48)
  %215 = load i64, i64* %RBP, align 8
  %216 = add i64 %215, -88
  %217 = load i64, i64* %RAX, align 8
  %218 = load i64, i64* %PC, align 8
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %216 to i64*
  store i64 %217, i64* %220, align 8
  %221 = load i64, i64* %PC, align 8
  %222 = add i64 %221, -126
  store i64 %222, i64* %PC, align 8, !tbaa !2428
  br label %block_4059b6

block_4059f7:                                     ; preds = %block_4059d7, %block_4059d2
  %223 = phi i64 [ %.pre8, %block_4059d7 ], [ %56, %block_4059d2 ]
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -65
  %226 = add i64 %223, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i8*
  %228 = load i8, i8* %227, align 1
  store i8 %228, i8* %AL, align 1, !tbaa !2453
  %229 = and i8 %228, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %230 = zext i8 %229 to i32
  %231 = tail call i32 @llvm.ctpop.i32(i32 %230) #10
  %232 = trunc i32 %231 to i8
  %233 = xor i8 %232, 1
  store i8 %233, i8* %14, align 1, !tbaa !2446
  %234 = xor i8 %229, 1
  store i8 %234, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %235 = icmp eq i8 %234, 0
  %.v = select i1 %235, i64 16, i64 11
  %236 = add i64 %.v, %223
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  br i1 %235, label %block_405a07, label %block_405a02

block_4059b6:                                     ; preds = %block_405a07, %block_405996
  %237 = phi i64 [ %.pre7, %block_405996 ], [ %222, %block_405a07 ]
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -48
  store i64 %239, i64* %RDI, align 8, !tbaa !2428
  %240 = add i64 %238, -8
  store i64 %240, i64* %RSI, align 8, !tbaa !2428
  %241 = add i64 %237, -7430
  %242 = add i64 %237, 13
  %243 = load i64, i64* %RSP, align 8, !tbaa !2428
  %244 = add i64 %243, -8
  %245 = inttoptr i64 %244 to i64*
  store i64 %242, i64* %245, align 8
  store i64 %244, i64* %RSP, align 8, !tbaa !2428
  store i64 %241, i64* %PC, align 8, !tbaa !2428
  %246 = tail call %struct.Memory* @sub_403cb0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %241, %struct.Memory* %48)
  %247 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2453
  %248 = load i8, i8* %AL, align 1
  %249 = and i8 %248, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %250 = zext i8 %249 to i32
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #10
  %252 = trunc i32 %251 to i8
  %253 = xor i8 %252, 1
  store i8 %253, i8* %14, align 1, !tbaa !2446
  %254 = xor i8 %249, 1
  store i8 %254, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %255 = load i64, i64* %RBP, align 8
  %256 = add i64 %255, -65
  %257 = add i64 %247, 9
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i8*
  store i8 0, i8* %258, align 1
  %259 = load i64, i64* %PC, align 8
  %260 = load i8, i8* %16, align 1, !tbaa !2448
  %261 = icmp eq i8 %260, 0
  %.v12 = select i1 %261, i64 11, i64 6
  %262 = add i64 %.v12, %259
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br i1 %261, label %block_4059d7, label %block_4059d2

block_405a02:                                     ; preds = %block_4059f7
  %263 = add i64 %224, -48
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  %264 = add i64 %236, -7458
  %265 = add i64 %236, 64
  %266 = load i64, i64* %RSP, align 8, !tbaa !2428
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 %265, i64* %268, align 8
  store i64 %267, i64* %RSP, align 8, !tbaa !2428
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  %269 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %264, %struct.Memory* %48)
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -24
  %272 = load i64, i64* %PC, align 8
  store i64 %271, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %273 = add i64 %270, -40
  %274 = add i64 %272, 10
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RCX, align 8, !tbaa !2428
  %277 = load i64*, i64** %55, align 8
  %278 = add i64 %272, 13
  store i64 %278, i64* %PC, align 8
  store i64 %276, i64* %277, align 8
  %279 = load i64, i64* %PC, align 8
  %280 = add i64 %279, -7647
  %281 = add i64 %279, 5
  %282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %280, %struct.Memory* %48)
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -64
  %288 = load i64, i64* %RAX, align 8
  %289 = load i64, i64* %PC, align 8
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  store i64 %288, i64* %291, align 8
  %292 = load i64, i64* %PC, align 8
  %293 = add i64 %292, -220
  store i64 %293, i64* %PC, align 8, !tbaa !2428
  br label %block_40597c
}

; Function Attrs: noinline
define %struct.Memory* @sub_403980__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403980:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_403994

block_4039ae:                                     ; preds = %block_403994
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -8
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %58 = add i64 %136, 706
  %59 = add i64 %136, 11
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %66, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 799
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %71, %struct.Memory* %2)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -24
  %79 = load i64, i64* %PC, align 8
  store i64 %78, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %80 = add i64 %77, -48
  %81 = load i64, i64* %RAX, align 8
  %82 = add i64 %79, 10
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %83, align 8
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 672
  %86 = add i64 %84, 5
  %87 = load i64, i64* %RSP, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %86, i64* %89, align 8
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %90 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %85, %struct.Memory* %2)
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -40
  %93 = load i64, i64* %PC, align 8
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %94 = load i64, i64* %RAX, align 8
  %95 = add i64 %93, 8
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %92 to i64*
  store i64 %94, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 771
  %99 = add i64 %97, 5
  %100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %99, i64* %102, align 8
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  store i64 %98, i64* %PC, align 8, !tbaa !2428
  %103 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %98, %struct.Memory* %2)
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -48
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = add i64 %106, 7
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %109 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RCX, align 8, !tbaa !2428
  %113 = load i64*, i64** %55, align 8
  %114 = add i64 %106, 10
  store i64 %114, i64* %PC, align 8
  store i64 %112, i64* %113, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, -88
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br label %block_403994

block_403994:                                     ; preds = %block_4039ae, %block_403980
  %117 = phi i64 [ %116, %block_4039ae ], [ %.pre, %block_403980 ]
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -8
  store i64 %119, i64* %RDI, align 8, !tbaa !2428
  %120 = add i64 %118, -16
  store i64 %120, i64* %RSI, align 8, !tbaa !2428
  %121 = add i64 %117, 796
  %122 = add i64 %117, 13
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_403cb0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %2)
  %127 = load i8, i8* %AL, align 1
  %128 = load i64, i64* %PC, align 8
  %129 = and i8 %127, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %130 = zext i8 %129 to i32
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #10
  %132 = trunc i32 %131 to i8
  %133 = xor i8 %132, 1
  store i8 %133, i8* %20, align 1, !tbaa !2446
  %134 = xor i8 %129, 1
  store i8 %134, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %135 = icmp eq i8 %134, 0
  %.v = select i1 %135, i64 13, i64 8
  %136 = add i64 %.v, %128
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  br i1 %135, label %block_4039ae, label %block_4039a9

block_4039a9:                                     ; preds = %block_403994
  %137 = load i64, i64* %RSP, align 8
  %138 = add i64 %137, 48
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %139 = icmp ugt i64 %137, -49
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %13, align 1, !tbaa !2432
  %141 = trunc i64 %138 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #10
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %20, align 1, !tbaa !2446
  %147 = xor i64 %137, 16
  %148 = xor i64 %147, %138
  %149 = lshr i64 %148, 4
  %150 = trunc i64 %149 to i8
  %151 = and i8 %150, 1
  store i8 %151, i8* %26, align 1, !tbaa !2447
  %152 = icmp eq i64 %138, 0
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %29, align 1, !tbaa !2448
  %154 = lshr i64 %138, 63
  %155 = trunc i64 %154 to i8
  store i8 %155, i8* %32, align 1, !tbaa !2449
  %156 = lshr i64 %137, 63
  %157 = xor i64 %154, %156
  %158 = add nuw nsw i64 %157, %154
  %159 = icmp eq i64 %158, 2
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %38, align 1, !tbaa !2450
  %161 = add i64 %136, 77
  store i64 %161, i64* %PC, align 8
  %162 = add i64 %137, 56
  %163 = inttoptr i64 %138 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RBP, align 8, !tbaa !2428
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  %165 = add i64 %136, 78
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %162 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %PC, align 8, !tbaa !2428
  %168 = add i64 %137, 64
  store i64 %168, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402f60__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402f60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 17
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %28, -32
  %35 = add i64 %30, 8
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RAX, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i32, i32* %ECX, align 4
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = add i64 %38, 162
  %42 = add i64 %38, 10
  %43 = load i64, i64* %RSP, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %46 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %41, %struct.Memory* %2)
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -40
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_402f8c

block_402ff3:                                     ; preds = %block_402fa6
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -1
  %55 = add i64 %128, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i8*
  store i8 0, i8* %56, align 1
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 14
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  br label %block_403005

block_402fa6:                                     ; preds = %block_402f8c
  %59 = add i64 %153, -16
  store i64 %59, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %60 = add i64 %152, 122
  %61 = add i64 %152, 11
  %62 = load i64, i64* %RSP, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64, align 8
  store i64 %63, i64* %RSP, align 8, !tbaa !2428
  store i64 %60, i64* %PC, align 8, !tbaa !2428
  %65 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %60, %struct.Memory* %46)
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %PC, align 8
  store i64 %67, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %RAX, align 8
  %70 = add i64 %68, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %69, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 215
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %46)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -32
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %82 = add i64 %79, -64
  %83 = load i64, i64* %RAX, align 8
  %84 = add i64 %81, 10
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %85, align 8
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 88
  %88 = add i64 %86, 5
  %89 = load i64, i64* %RSP, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91, align 8
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %92 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %46)
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -56
  %95 = load i64, i64* %PC, align 8
  store i64 %94, i64* %RDI, align 8, !tbaa !2428
  %96 = load i64, i64* %RAX, align 8
  %97 = add i64 %95, 8
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  store i64 %96, i64* %98, align 8
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 187
  %101 = add i64 %99, 5
  %102 = load i64, i64* %RSP, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104, align 8
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %105 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %100, %struct.Memory* %46)
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -64
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %RAX, align 8
  store i64 %112, i64* %RSI, align 8, !tbaa !2428
  %113 = add i64 %108, 214
  %114 = add i64 %108, 12
  %115 = load i64, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %114, i64* %117, align 8
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %118 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %113, %struct.Memory* %46)
  %119 = load i8, i8* %AL, align 1
  %120 = load i64, i64* %PC, align 8
  %121 = and i8 %119, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %122 = zext i8 %121 to i32
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #10
  %124 = trunc i32 %123 to i8
  %125 = xor i8 %124, 1
  store i8 %125, i8* %13, align 1, !tbaa !2446
  %126 = xor i8 %121, 1
  store i8 %126, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %127 = icmp eq i8 %126, 0
  %.v13 = select i1 %127, i64 13, i64 8
  %128 = add i64 %.v13, %120
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  br i1 %127, label %block_402ff3, label %block_402fee

block_402fee:                                     ; preds = %block_402fa6
  %129 = add i64 %128, -98
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  br label %block_402f8c

block_402fa1:                                     ; preds = %block_402f8c
  %130 = add i64 %153, -1
  %131 = add i64 %152, 100
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i8*
  store i8 1, i8* %132, align 1
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_403005

block_402f8c:                                     ; preds = %block_402fee, %block_402f60
  %133 = phi i64 [ %129, %block_402fee ], [ %.pre, %block_402f60 ]
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -16
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = add i64 %134, -24
  store i64 %136, i64* %RSI, align 8, !tbaa !2428
  %137 = add i64 %133, 212
  %138 = add i64 %133, 13
  %139 = load i64, i64* %RSP, align 8, !tbaa !2428
  %140 = add i64 %139, -8
  %141 = inttoptr i64 %140 to i64*
  store i64 %138, i64* %141, align 8
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  store i64 %137, i64* %PC, align 8, !tbaa !2428
  %142 = tail call %struct.Memory* @sub_403060__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %137, %struct.Memory* %46)
  %143 = load i8, i8* %AL, align 1
  %144 = load i64, i64* %PC, align 8
  %145 = and i8 %143, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %146 = zext i8 %145 to i32
  %147 = tail call i32 @llvm.ctpop.i32(i32 %146) #10
  %148 = trunc i32 %147 to i8
  %149 = xor i8 %148, 1
  store i8 %149, i8* %13, align 1, !tbaa !2446
  %150 = xor i8 %145, 1
  store i8 %150, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %151 = icmp eq i8 %150, 0
  %.v = select i1 %151, i64 13, i64 8
  %152 = add i64 %.v, %144
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %153 = load i64, i64* %RBP, align 8
  br i1 %151, label %block_402fa6, label %block_402fa1

block_403005:                                     ; preds = %block_402fa1, %block_402ff3
  %154 = phi i64 [ %.pre12, %block_402fa1 ], [ %58, %block_402ff3 ]
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -1
  %157 = add i64 %154, 3
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to i8*
  %159 = load i8, i8* %158, align 1
  %160 = and i8 %159, 1
  %161 = zext i8 %160 to i64
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RSP, align 8
  %163 = add i64 %162, 64
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  %164 = icmp ugt i64 %162, -65
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %12, align 1, !tbaa !2432
  %166 = trunc i64 %163 to i32
  %167 = and i32 %166, 255
  %168 = tail call i32 @llvm.ctpop.i32(i32 %167) #10
  %169 = trunc i32 %168 to i8
  %170 = and i8 %169, 1
  %171 = xor i8 %170, 1
  store i8 %171, i8* %13, align 1, !tbaa !2446
  %172 = xor i64 %163, %162
  %173 = lshr i64 %172, 4
  %174 = trunc i64 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* %14, align 1, !tbaa !2447
  %176 = icmp eq i64 %163, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %15, align 1, !tbaa !2448
  %178 = lshr i64 %163, 63
  %179 = trunc i64 %178 to i8
  store i8 %179, i8* %16, align 1, !tbaa !2449
  %180 = lshr i64 %162, 63
  %181 = xor i64 %178, %180
  %182 = add nuw nsw i64 %181, %178
  %183 = icmp eq i64 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %17, align 1, !tbaa !2450
  %185 = add i64 %154, 13
  store i64 %185, i64* %PC, align 8
  %186 = add i64 %162, 72
  %187 = inttoptr i64 %163 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RBP, align 8, !tbaa !2428
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  %189 = add i64 %154, 14
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %186 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  %192 = add i64 %162, 80
  store i64 %192, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %46
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400b10__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400b10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403060__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403060:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = icmp eq i64 %28, %35
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = xor i1 %39, true
  store i8 0, i8* %36, align 1, !tbaa !2432
  %44 = zext i1 %43 to i32
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #10
  %46 = trunc i32 %45 to i8
  %47 = xor i8 %46, 1
  store i8 %47, i8* %37, align 1, !tbaa !2446
  %48 = zext i1 %39 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2447
  %49 = zext i1 %43 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401c20__ZN14PointerWrapperIdEC2EPd(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_401c20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %30, align 8
  %31 = add i64 %22, 12
  store i64 %31, i64* %PC, align 8
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  store i64 %33, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %22, 13
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = add i64 %32, 16
  store i64 %39, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f20__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405f20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405f40__ZNK12ValueWrapperIS_IdEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402c00__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402c00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c28

block_402c71:                                     ; preds = %block_402c28
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402c38:                                     ; preds = %block_402c28
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 2408
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_4035a0__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 2471
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_4035f0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 2714
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036f0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402c28

block_402c28:                                     ; preds = %block_402c38, %block_402c00
  %190 = phi i64 [ %189, %block_402c38 ], [ %.pre, %block_402c00 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402c38, label %block_402c71
}

; Function Attrs: noinline
define %struct.Memory* @sub_403230__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403230:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_405f60__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_405f60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 8
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %22, i64* %23, align 1, !tbaa !2451
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %25, align 1, !tbaa !2451
  %26 = add i64 %16, 9
  store i64 %26, i64* %PC, align 8
  %27 = load i64, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %27 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  store i64 %28, i64* %5, align 8, !tbaa !2428
  %31 = add i64 %16, 10
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  %34 = add i64 %27, 16
  store i64 %34, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406640__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406640:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406670__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_406330__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406330:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -24
  %39 = add i64 %8, 12
  store i64 %39, i64* %PC, align 8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %41 = load i64, i64* %40, align 1
  %42 = inttoptr i64 %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RDI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RSI, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_406345

block_406345:                                     ; preds = %block_406353, %block_406330
  %55 = phi i64 [ %142, %block_406353 ], [ %.pre, %block_406330 ]
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -24
  %58 = add i64 %55, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RAX, align 8, !tbaa !2428
  %61 = add i64 %56, -32
  %62 = add i64 %55, 8
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %60, %64
  %66 = icmp ult i64 %60, %64
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %12, align 1, !tbaa !2432
  %68 = trunc i64 %65 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #10
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %19, align 1, !tbaa !2446
  %74 = xor i64 %64, %60
  %75 = xor i64 %74, %65
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %25, align 1, !tbaa !2447
  %79 = icmp eq i64 %65, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %28, align 1, !tbaa !2448
  %81 = lshr i64 %65, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %31, align 1, !tbaa !2449
  %83 = lshr i64 %60, 63
  %84 = lshr i64 %64, 63
  %85 = xor i64 %84, %83
  %86 = xor i64 %81, %83
  %87 = add nuw nsw i64 %86, %85
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %37, align 1, !tbaa !2450
  %.v = select i1 %79, i64 59, i64 14
  %90 = add i64 %.v, %55
  %91 = add i64 %56, -16
  %92 = add i64 %90, 4
  store i64 %92, i64* %PC, align 8
  br i1 %79, label %block_406380, label %block_406353

block_406353:                                     ; preds = %block_406345
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %93 = add i64 %90, 8
  store i64 %93, i64* %PC, align 8
  %94 = load i64, i64* %59, align 8
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = add i64 %94, 8
  store i64 %95, i64* %RCX, align 8, !tbaa !2428
  %96 = icmp ugt i64 %94, -9
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %12, align 1, !tbaa !2432
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #10
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %19, align 1, !tbaa !2446
  %104 = xor i64 %95, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %25, align 1, !tbaa !2447
  %108 = icmp eq i64 %95, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %28, align 1, !tbaa !2448
  %110 = lshr i64 %95, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %31, align 1, !tbaa !2449
  %112 = lshr i64 %94, 63
  %113 = xor i64 %110, %112
  %114 = add nuw nsw i64 %113, %110
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %37, align 1, !tbaa !2450
  %117 = add i64 %90, 19
  store i64 %117, i64* %PC, align 8
  store i64 %95, i64* %59, align 8
  %118 = load i64, i64* %RAX, align 8
  %119 = load i64, i64* %PC, align 8
  store i64 %118, i64* %RSI, align 8, !tbaa !2428
  %120 = add i64 %119, -998
  %121 = add i64 %119, 8
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_405f80__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -40
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 5
  store i64 %129, i64* %PC, align 8
  %130 = load i64, i64* %40, align 1
  %131 = inttoptr i64 %127 to i64*
  store i64 %130, i64* %131, align 8
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -40
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %132, -16
  %139 = add i64 %134, 8
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %137, i64* %140, align 8
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, -54
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  br label %block_406345

block_406380:                                     ; preds = %block_406345
  %143 = inttoptr i64 %91 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RAX, align 8, !tbaa !2428
  %145 = add i64 %56, -8
  %146 = add i64 %90, 8
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %144, i64* %147, align 8
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -8
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %40, align 1, !tbaa !2451
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %155 = bitcast i64* %154 to double*
  store double 0.000000e+00, double* %155, align 1, !tbaa !2451
  %156 = load i64, i64* %RSP, align 8
  %157 = add i64 %156, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  %158 = icmp ugt i64 %156, -49
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %12, align 1, !tbaa !2432
  %160 = trunc i64 %157 to i32
  %161 = and i32 %160, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #10
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %19, align 1, !tbaa !2446
  %166 = xor i64 %156, 16
  %167 = xor i64 %166, %157
  %168 = lshr i64 %167, 4
  %169 = trunc i64 %168 to i8
  %170 = and i8 %169, 1
  store i8 %170, i8* %25, align 1, !tbaa !2447
  %171 = icmp eq i64 %157, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %28, align 1, !tbaa !2448
  %173 = lshr i64 %157, 63
  %174 = trunc i64 %173 to i8
  store i8 %174, i8* %31, align 1, !tbaa !2449
  %175 = lshr i64 %156, 63
  %176 = xor i64 %173, %175
  %177 = add nuw nsw i64 %176, %173
  %178 = icmp eq i64 %177, 2
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %37, align 1, !tbaa !2450
  %180 = add i64 %150, 10
  store i64 %180, i64* %PC, align 8
  %181 = add i64 %156, 56
  %182 = inttoptr i64 %157 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RBP, align 8, !tbaa !2428
  store i64 %181, i64* %RSP, align 8, !tbaa !2428
  %184 = add i64 %150, 11
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %181 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %PC, align 8, !tbaa !2428
  %187 = add i64 %156, 64
  store i64 %187, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405ea0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405ea0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405ec0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_403170__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403170:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4031a0__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_406490__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406490:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -56
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 48
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5
  store i64 %53, i64* %PC, align 8
  %54 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = load i64, i64* %54, align 1
  %56 = inttoptr i64 %51 to i64*
  store i64 %55, i64* %56, align 8
  %57 = bitcast %union.VectorReg* %4 to double*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast i64* %58 to double*
  %60 = bitcast %union.anon* %3 to double**
  %.pre = load i64, i64* %PC, align 8
  br label %block_4064a5

block_4064bf:                                     ; preds = %block_4064a5
  %61 = add i64 %160, -8
  store i64 %61, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %62 = add i64 %160, -24
  %63 = add i64 %159, 11
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %54, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %66 = add i64 %160, -40
  %67 = add i64 %159, 16
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %66 to i64*
  store i64 %65, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -7679
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %70, %struct.Memory* %2)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %78, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %77 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, -7580
  %84 = add i64 %82, 5
  %85 = load i64, i64* %RSP, align 8, !tbaa !2428
  %86 = add i64 %85, -8
  %87 = inttoptr i64 %86 to i64*
  store i64 %84, i64* %87, align 8
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  %88 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %83, %struct.Memory* %2)
  %89 = load i64, i64* %RBP, align 8
  %90 = add i64 %89, -40
  %91 = load i64, i64* %PC, align 8
  %92 = add i64 %91, 5
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %90 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %54, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %95 = load double*, double** %60, align 8
  %96 = add i64 %91, 9
  store i64 %96, i64* %PC, align 8
  %.cast = bitcast i64 %94 to double
  %97 = load double, double* %95, align 8
  %98 = fadd double %.cast, %97
  store double %98, double* %57, align 1, !tbaa !2451
  store i64 0, i64* %58, align 1, !tbaa !2451
  %99 = add i64 %89, -24
  %100 = add i64 %91, 14
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to double*
  store double %98, double* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, -74
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  br label %block_4064a5

block_4064ba:                                     ; preds = %block_4064a5
  %104 = add i64 %160, -24
  %105 = add i64 %159, 63
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %54, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %14, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #10
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %21, align 1, !tbaa !2446
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %27, align 1, !tbaa !2447
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %30, align 1, !tbaa !2448
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %33, align 1, !tbaa !2449
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %39, align 1, !tbaa !2450
  %132 = add i64 %159, 68
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %159, 69
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4064a5:                                     ; preds = %block_4064bf, %block_406490
  %140 = phi i64 [ %103, %block_4064bf ], [ %.pre, %block_406490 ]
  %141 = load i64, i64* %RBP, align 8
  %142 = add i64 %141, -8
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = add i64 %141, -16
  store i64 %143, i64* %RSI, align 8, !tbaa !2428
  %144 = add i64 %140, -7573
  %145 = add i64 %140, 13
  %146 = load i64, i64* %RSP, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %145, i64* %148, align 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @sub_404710__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %144, %struct.Memory* %2)
  %150 = load i8, i8* %AL, align 1
  %151 = load i64, i64* %PC, align 8
  %152 = and i8 %150, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %153 = zext i8 %152 to i32
  %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #10
  %155 = trunc i32 %154 to i8
  %156 = xor i8 %155, 1
  store i8 %156, i8* %21, align 1, !tbaa !2446
  %157 = xor i8 %152, 1
  store i8 %157, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %158 = icmp eq i8 %157, 0
  %.v = select i1 %158, i64 13, i64 8
  %159 = add i64 %.v, %151
  store i64 %159, i64* %PC, align 8, !tbaa !2428
  %160 = load i64, i64* %RBP, align 8
  br i1 %158, label %block_4064bf, label %block_4064ba
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a00___cxx_global_var_init_19(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVPe_type* @DVPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4607
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c00__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_405de0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405de0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 116
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e60__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4030b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4030e0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_4060c0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_4060c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402f00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402f00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_402f60__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__renamed_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #10
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2446
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %.v, %84
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_402f50, label %block_402f35

block_402f35:                                     ; preds = %block_402f00
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %95 = add i64 %92, -10293
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402f50

block_402f50:                                     ; preds = %block_402f35, %block_402f00
  %107 = phi i64 [ %92, %block_402f00 ], [ %.pre, %block_402f35 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_402f00 ], [ %100, %block_402f35 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #10
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2446
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2450
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400690__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400690:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_608ff0__got_type* @seg_608ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #10
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_4006a2, label %block_4006a0

block_4006a0:                                     ; preds = %block_400690
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_4006a2

block_4006a2:                                     ; preds = %block_4006a0, %block_400690
  %27 = phi i64 [ %22, %block_400690 ], [ %.pre1, %block_4006a0 ]
  %28 = phi i64 [ %4, %block_400690 ], [ %.pre, %block_4006a0 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400690 ], [ %26, %block_4006a0 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #10
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %29, %28
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2447
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4047e0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4047e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -184
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 176
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RSI, align 8
  %41 = add i64 %9, 14
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RDI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 5
  store i64 %58, i64* %PC, align 8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %60 = load i64, i64* %59, align 1
  %61 = inttoptr i64 %56 to i64*
  store i64 %60, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -24
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = lshr i64 %77, 63
  %79 = trunc i64 %78 to i8
  %80 = shl i64 %77, 1
  %81 = icmp slt i64 %77, 0
  %82 = icmp slt i64 %80, 0
  %83 = xor i1 %81, %82
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  store i8 %79, i8* %13, align 1, !tbaa !2453
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #10
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %90 = icmp eq i64 %80, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %29, align 1, !tbaa !2453
  %92 = lshr i64 %77, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %32, align 1, !tbaa !2453
  %95 = zext i1 %83 to i8
  store i8 %95, i8* %38, align 1, !tbaa !2453
  %96 = add i64 %71, -40
  %97 = add i64 %73, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %80, i64* %98, align 8
  %99 = bitcast %union.anon* %3 to i64**
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %101 = bitcast i64* %100 to double*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %104 = bitcast i64* %103 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404814

block_40487f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %105 = load i64, i64* %RBP, align 8
  %106 = add i64 %105, -40
  %107 = add i64 %855, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %RAX, align 8, !tbaa !2428
  %111 = icmp eq i64 %109, -1
  %112 = icmp eq i64 %110, 0
  %113 = or i1 %111, %112
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %13, align 1, !tbaa !2432
  %115 = trunc i64 %110 to i32
  %116 = and i32 %115, 255
  %117 = tail call i32 @llvm.ctpop.i32(i32 %116) #10
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  store i8 %120, i8* %20, align 1, !tbaa !2446
  %121 = xor i64 %110, %109
  %122 = lshr i64 %121, 4
  %123 = trunc i64 %122 to i8
  %124 = and i8 %123, 1
  store i8 %124, i8* %26, align 1, !tbaa !2447
  %125 = zext i1 %112 to i8
  store i8 %125, i8* %29, align 1, !tbaa !2448
  %126 = lshr i64 %110, 63
  %127 = trunc i64 %126 to i8
  store i8 %127, i8* %32, align 1, !tbaa !2449
  %128 = lshr i64 %109, 63
  %129 = xor i64 %126, %128
  %130 = add nuw nsw i64 %129, %126
  %131 = icmp eq i64 %130, 2
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %38, align 1, !tbaa !2450
  %133 = add i64 %855, 12
  store i64 %133, i64* %PC, align 8
  store i64 %110, i64* %108, align 8
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_40488b

block_4049d9:                                     ; preds = %block_4049cb
  %134 = add i64 %723, -32
  %135 = add i64 %735, 127
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %138 = add i64 %723, -48
  %139 = add i64 %735, 131
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i64*
  %141 = load i64, i64* %140, align 8
  store i64 %141, i64* %RSI, align 8, !tbaa !2428
  %142 = add i64 %723, -176
  %143 = add i64 %735, 139
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %142 to i64*
  store i64 %137, i64* %144, align 8
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, -692
  %147 = add i64 %145, 5
  %148 = load i64, i64* %RSP, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150, align 8
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %151 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %146, %struct.Memory* %MEMORY.4)
  %152 = load i64, i64* %RBP, align 8
  %153 = add i64 %152, -128
  %154 = load i64, i64* %PC, align 8
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %155 = load i64, i64* %RAX, align 8
  %156 = add i64 %154, 8
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %153 to i64*
  store i64 %155, i64* %157, align 8
  %158 = load i64, i64* %PC, align 8
  %159 = add i64 %158, -817
  %160 = add i64 %158, 5
  %161 = load i64, i64* %RSP, align 8, !tbaa !2428
  %162 = add i64 %161, -8
  %163 = inttoptr i64 %162 to i64*
  store i64 %160, i64* %163, align 8
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  store i64 %159, i64* %PC, align 8, !tbaa !2428
  %164 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %159, %struct.Memory* %151)
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -176
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, 8
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %166 to i64*
  %170 = load i64, i64* %169, align 8
  store i64 %170, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %171 = load i64*, i64** %99, align 8
  %172 = add i64 %167, 12
  store i64 %172, i64* %PC, align 8
  store i64 %170, i64* %171, align 8
  %173 = load i64, i64* %RSP, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %173, 176
  store i64 %175, i64* %RSP, align 8, !tbaa !2428
  %176 = icmp ugt i64 %173, -177
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %13, align 1, !tbaa !2432
  %178 = trunc i64 %175 to i32
  %179 = and i32 %178, 255
  %180 = tail call i32 @llvm.ctpop.i32(i32 %179) #10
  %181 = trunc i32 %180 to i8
  %182 = and i8 %181, 1
  %183 = xor i8 %182, 1
  store i8 %183, i8* %20, align 1, !tbaa !2446
  %184 = xor i64 %173, 16
  %185 = xor i64 %184, %175
  %186 = lshr i64 %185, 4
  %187 = trunc i64 %186 to i8
  %188 = and i8 %187, 1
  store i8 %188, i8* %26, align 1, !tbaa !2447
  %189 = icmp eq i64 %175, 0
  %190 = zext i1 %189 to i8
  store i8 %190, i8* %29, align 1, !tbaa !2448
  %191 = lshr i64 %175, 63
  %192 = trunc i64 %191 to i8
  store i8 %192, i8* %32, align 1, !tbaa !2449
  %193 = lshr i64 %173, 63
  %194 = xor i64 %191, %193
  %195 = add nuw nsw i64 %194, %191
  %196 = icmp eq i64 %195, 2
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %38, align 1, !tbaa !2450
  %198 = add i64 %174, 8
  store i64 %198, i64* %PC, align 8
  %199 = add i64 %173, 184
  %200 = inttoptr i64 %175 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %RBP, align 8, !tbaa !2428
  store i64 %199, i64* %RSP, align 8, !tbaa !2428
  %202 = add i64 %174, 9
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %199 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %PC, align 8, !tbaa !2428
  %205 = add i64 %173, 192
  store i64 %205, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %164

block_404909:                                     ; preds = %block_4048fb
  %206 = add i64 %392, -8
  store i64 %206, i64* %RDI, align 8, !tbaa !2428
  %207 = add i64 %671, 8
  store i64 %207, i64* %PC, align 8
  %208 = load i64, i64* %395, align 8
  %209 = add i64 %208, -1
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = icmp eq i64 %208, 0
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %13, align 1, !tbaa !2432
  %212 = trunc i64 %209 to i32
  %213 = and i32 %212, 255
  %214 = tail call i32 @llvm.ctpop.i32(i32 %213) #10
  %215 = trunc i32 %214 to i8
  %216 = and i8 %215, 1
  %217 = xor i8 %216, 1
  store i8 %217, i8* %20, align 1, !tbaa !2446
  %218 = xor i64 %209, %208
  %219 = lshr i64 %218, 4
  %220 = trunc i64 %219 to i8
  %221 = and i8 %220, 1
  store i8 %221, i8* %26, align 1, !tbaa !2447
  %222 = icmp eq i64 %209, 0
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %29, align 1, !tbaa !2448
  %224 = lshr i64 %209, 63
  %225 = trunc i64 %224 to i8
  store i8 %225, i8* %32, align 1, !tbaa !2449
  %226 = lshr i64 %208, 63
  %227 = xor i64 %224, %226
  %228 = add nuw nsw i64 %227, %226
  %229 = icmp eq i64 %228, 2
  %230 = zext i1 %229 to i8
  store i8 %230, i8* %38, align 1, !tbaa !2450
  store i64 %209, i64* %RSI, align 8, !tbaa !2428
  %231 = add i64 %671, -345
  %232 = add i64 %671, 20
  %233 = load i64, i64* %RSP, align 8, !tbaa !2428
  %234 = add i64 %233, -8
  %235 = inttoptr i64 %234 to i64*
  store i64 %232, i64* %235, align 8
  store i64 %234, i64* %RSP, align 8, !tbaa !2428
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  %236 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %231, %struct.Memory* %MEMORY.0)
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -88
  %239 = load i64, i64* %PC, align 8
  store i64 %238, i64* %RDI, align 8, !tbaa !2428
  %240 = load i64, i64* %RAX, align 8
  %241 = add i64 %239, 8
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %238 to i64*
  store i64 %240, i64* %242, align 8
  %243 = load i64, i64* %PC, align 8
  %244 = add i64 %243, -485
  %245 = add i64 %243, 5
  %246 = load i64, i64* %RSP, align 8, !tbaa !2428
  %247 = add i64 %246, -8
  %248 = inttoptr i64 %247 to i64*
  store i64 %245, i64* %248, align 8
  store i64 %247, i64* %RSP, align 8, !tbaa !2428
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  %249 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %244, %struct.Memory* %236)
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -8
  %252 = load i64, i64* %PC, align 8
  store i64 %251, i64* %RDI, align 8, !tbaa !2428
  %253 = load i64*, i64** %99, align 8
  %254 = add i64 %252, 8
  store i64 %254, i64* %PC, align 8
  %255 = load i64, i64* %253, align 8
  store i64 %255, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %256 = add i64 %250, -48
  %257 = add i64 %252, 12
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i64*
  %259 = load i64, i64* %258, align 8
  store i64 %259, i64* %RSI, align 8, !tbaa !2428
  %260 = add i64 %250, -152
  %261 = add i64 %252, 20
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i64*
  store i64 %255, i64* %262, align 8
  %263 = load i64, i64* %PC, align 8
  %264 = add i64 %263, -398
  %265 = add i64 %263, 5
  %266 = load i64, i64* %RSP, align 8, !tbaa !2428
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 %265, i64* %268, align 8
  store i64 %267, i64* %RSP, align 8, !tbaa !2428
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  %269 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %264, %struct.Memory* %249)
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -96
  %272 = load i64, i64* %PC, align 8
  store i64 %271, i64* %RDI, align 8, !tbaa !2428
  %273 = load i64, i64* %RAX, align 8
  %274 = add i64 %272, 8
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %271 to i64*
  store i64 %273, i64* %275, align 8
  %276 = load i64, i64* %PC, align 8
  %277 = add i64 %276, -523
  %278 = add i64 %276, 5
  %279 = load i64, i64* %RSP, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %278, i64* %281, align 8
  store i64 %280, i64* %RSP, align 8, !tbaa !2428
  store i64 %277, i64* %PC, align 8, !tbaa !2428
  %282 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %277, %struct.Memory* %269)
  %283 = load i64, i64* %RBP, align 8
  %284 = add i64 %283, -152
  %285 = load i64, i64* %PC, align 8
  %286 = add i64 %285, 8
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %284 to i64*
  %288 = load i64, i64* %287, align 8
  store i64 %288, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %289 = load i64*, i64** %99, align 8
  %290 = add i64 %285, 12
  store i64 %290, i64* %PC, align 8
  store i64 %288, i64* %289, align 8
  %291 = load i64, i64* %RBP, align 8
  %292 = add i64 %291, -40
  %293 = load i64, i64* %PC, align 8
  %294 = add i64 %293, 4
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %292 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = add i64 %296, -1
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %298 = icmp eq i64 %296, 0
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %13, align 1, !tbaa !2432
  %300 = trunc i64 %297 to i32
  %301 = and i32 %300, 255
  %302 = tail call i32 @llvm.ctpop.i32(i32 %301) #10
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  store i8 %305, i8* %20, align 1, !tbaa !2446
  %306 = xor i64 %297, %296
  %307 = lshr i64 %306, 4
  %308 = trunc i64 %307 to i8
  %309 = and i8 %308, 1
  store i8 %309, i8* %26, align 1, !tbaa !2447
  %310 = icmp eq i64 %297, 0
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %29, align 1, !tbaa !2448
  %312 = lshr i64 %297, 63
  %313 = trunc i64 %312 to i8
  store i8 %313, i8* %32, align 1, !tbaa !2449
  %314 = lshr i64 %296, 63
  %315 = xor i64 %312, %314
  %316 = add nuw nsw i64 %315, %314
  %317 = icmp eq i64 %316, 2
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %38, align 1, !tbaa !2450
  %319 = add i64 %291, -48
  %320 = add i64 %293, 12
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  store i64 %297, i64* %321, align 8
  %.pre10 = load i64, i64* %PC, align 8
  %.pre11 = load i64, i64* %RBP, align 8
  br label %block_404968

block_40499b:                                     ; preds = %block_404983
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -8
  store i64 %323, i64* %RDI, align 8, !tbaa !2428
  %324 = add i64 %322, -40
  %325 = add i64 %721, 8
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326, align 8
  store i64 %327, i64* %RSI, align 8, !tbaa !2428
  %328 = add i64 %721, -491
  %329 = add i64 %721, 13
  %330 = load i64, i64* %RSP, align 8, !tbaa !2428
  %331 = add i64 %330, -8
  %332 = inttoptr i64 %331 to i64*
  store i64 %329, i64* %332, align 8
  store i64 %331, i64* %RSP, align 8, !tbaa !2428
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  %333 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %328, %struct.Memory* %MEMORY.3)
  %334 = load i64, i64* %RBP, align 8
  %335 = add i64 %334, -104
  %336 = load i64, i64* %PC, align 8
  store i64 %335, i64* %RDI, align 8, !tbaa !2428
  %337 = load i64, i64* %RAX, align 8
  %338 = add i64 %336, 8
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %335 to i64*
  store i64 %337, i64* %339, align 8
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, -624
  %342 = add i64 %340, 5
  %343 = load i64, i64* %RSP, align 8, !tbaa !2428
  %344 = add i64 %343, -8
  %345 = inttoptr i64 %344 to i64*
  store i64 %342, i64* %345, align 8
  store i64 %344, i64* %RSP, align 8, !tbaa !2428
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  %346 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %341, %struct.Memory* %MEMORY.3)
  %347 = load i64*, i64** %99, align 8
  %348 = load i64, i64* %PC, align 8
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC, align 8
  %350 = load i64, i64* %347, align 8
  store i64 %350, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %351 = load i64, i64* %RBP, align 8
  %352 = add i64 %351, -32
  %353 = add i64 %348, 9
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %352 to i64*
  %355 = load i64, i64* %354, align 8
  store i64 %355, i64* %102, align 1, !tbaa !2451
  store double 0.000000e+00, double* %104, align 1, !tbaa !2451
  %356 = add i64 %348, 13
  store i64 %356, i64* %PC, align 8
  %.cast = bitcast i64 %355 to double
  %357 = bitcast i64 %350 to double
  %358 = fcmp uno double %.cast, %357
  br i1 %358, label %359, label %369

; <label>:359:                                    ; preds = %block_40499b
  %360 = fadd double %357, %.cast
  %361 = bitcast double %360 to i64
  %362 = and i64 %361, 9221120237041090560
  %363 = icmp eq i64 %362, 9218868437227405312
  %364 = and i64 %361, 2251799813685247
  %365 = icmp ne i64 %364, 0
  %366 = and i1 %363, %365
  br i1 %366, label %367, label %375

; <label>:367:                                    ; preds = %359
  %368 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %356, %struct.Memory* %MEMORY.3) #13
  %.pre16 = load i64, i64* %PC, align 8
  %.pre17 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:369:                                    ; preds = %block_40499b
  %370 = fcmp ogt double %.cast, %357
  br i1 %370, label %375, label %371

; <label>:371:                                    ; preds = %369
  %372 = fcmp olt double %.cast, %357
  br i1 %372, label %375, label %373

; <label>:373:                                    ; preds = %371
  %374 = fcmp oeq double %.cast, %357
  br i1 %374, label %375, label %379

; <label>:375:                                    ; preds = %373, %371, %369, %359
  %376 = phi i8 [ 0, %369 ], [ 0, %371 ], [ 1, %373 ], [ 1, %359 ]
  %377 = phi i8 [ 0, %369 ], [ 0, %371 ], [ 0, %373 ], [ 1, %359 ]
  %378 = phi i8 [ 0, %369 ], [ 1, %371 ], [ 0, %373 ], [ 1, %359 ]
  store i8 %376, i8* %29, align 1, !tbaa !2453
  store i8 %377, i8* %20, align 1, !tbaa !2453
  store i8 %378, i8* %13, align 1, !tbaa !2453
  br label %379

; <label>:379:                                    ; preds = %375, %373
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %379, %367
  %380 = phi i64 [ %.pre17, %367 ], [ %351, %379 ]
  %381 = phi i64 [ %.pre16, %367 ], [ %356, %379 ]
  %382 = phi %struct.Memory* [ %368, %367 ], [ %MEMORY.3, %379 ]
  %383 = load i8, i8* %13, align 1, !tbaa !2432
  %384 = load i8, i8* %29, align 1, !tbaa !2448
  %385 = or i8 %384, %383
  %386 = icmp eq i8 %385, 0
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %CL, align 1, !tbaa !2453
  %388 = add i64 %380, -153
  %389 = add i64 %381, 9
  store i64 %389, i64* %PC, align 8
  %390 = inttoptr i64 %388 to i8*
  store i8 %387, i8* %390, align 1
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_4049cb

block_404814:                                     ; preds = %block_40488b, %block_4047e0
  %391 = phi i64 [ %.pre, %block_4047e0 ], [ %586, %block_40488b ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4047e0 ], [ %509, %block_40488b ]
  %392 = load i64, i64* %RBP, align 8
  %393 = add i64 %392, -40
  %394 = add i64 %391, 4
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %393 to i64*
  %396 = load i64, i64* %395, align 8
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = add i64 %392, -16
  %398 = add i64 %391, 8
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %397 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = sub i64 %396, %400
  %402 = icmp ult i64 %396, %400
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %13, align 1, !tbaa !2432
  %404 = trunc i64 %401 to i32
  %405 = and i32 %404, 255
  %406 = tail call i32 @llvm.ctpop.i32(i32 %405) #10
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  store i8 %409, i8* %20, align 1, !tbaa !2446
  %410 = xor i64 %400, %396
  %411 = xor i64 %410, %401
  %412 = lshr i64 %411, 4
  %413 = trunc i64 %412 to i8
  %414 = and i8 %413, 1
  store i8 %414, i8* %26, align 1, !tbaa !2447
  %415 = icmp eq i64 %401, 0
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %29, align 1, !tbaa !2448
  %417 = lshr i64 %401, 63
  %418 = trunc i64 %417 to i8
  store i8 %418, i8* %32, align 1, !tbaa !2449
  %419 = lshr i64 %396, 63
  %420 = lshr i64 %400, 63
  %421 = xor i64 %420, %419
  %422 = xor i64 %417, %419
  %423 = add nuw nsw i64 %422, %421
  %424 = icmp eq i64 %423, 2
  %425 = zext i1 %424 to i8
  store i8 %425, i8* %38, align 1, !tbaa !2450
  %426 = icmp ne i8 %418, 0
  %427 = xor i1 %426, %424
  %.v24 = select i1 %427, i64 14, i64 231
  %428 = add i64 %.v24, %391
  store i64 %428, i64* %PC, align 8, !tbaa !2428
  br i1 %427, label %block_404822, label %block_4048fb

block_40488b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_40487f
  %429 = phi i64 [ %849, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %.pre23, %block_40487f ]
  %430 = load i64, i64* %RBP, align 8
  %431 = add i64 %430, -8
  store i64 %431, i64* %RDI, align 8, !tbaa !2428
  %432 = add i64 %430, -40
  %433 = add i64 %429, 8
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %432 to i64*
  %435 = load i64, i64* %434, align 8
  %436 = add i64 %435, -1
  store i64 %436, i64* %RAX, align 8, !tbaa !2428
  %437 = icmp eq i64 %435, 0
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %13, align 1, !tbaa !2432
  %439 = trunc i64 %436 to i32
  %440 = and i32 %439, 255
  %441 = tail call i32 @llvm.ctpop.i32(i32 %440) #10
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  %444 = xor i8 %443, 1
  store i8 %444, i8* %20, align 1, !tbaa !2446
  %445 = xor i64 %436, %435
  %446 = lshr i64 %445, 4
  %447 = trunc i64 %446 to i8
  %448 = and i8 %447, 1
  store i8 %448, i8* %26, align 1, !tbaa !2447
  %449 = icmp eq i64 %436, 0
  %450 = zext i1 %449 to i8
  store i8 %450, i8* %29, align 1, !tbaa !2448
  %451 = lshr i64 %436, 63
  %452 = trunc i64 %451 to i8
  store i8 %452, i8* %32, align 1, !tbaa !2449
  %453 = lshr i64 %435, 63
  %454 = xor i64 %451, %453
  %455 = add nuw nsw i64 %454, %453
  %456 = icmp eq i64 %455, 2
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %38, align 1, !tbaa !2450
  store i64 %436, i64* %RSI, align 8, !tbaa !2428
  %458 = add i64 %429, -219
  %459 = add i64 %429, 20
  %460 = load i64, i64* %RSP, align 8, !tbaa !2428
  %461 = add i64 %460, -8
  %462 = inttoptr i64 %461 to i64*
  store i64 %459, i64* %462, align 8
  store i64 %461, i64* %RSP, align 8, !tbaa !2428
  store i64 %458, i64* %PC, align 8, !tbaa !2428
  %463 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %458, %struct.Memory* %848)
  %464 = load i64, i64* %RBP, align 8
  %465 = add i64 %464, -72
  %466 = load i64, i64* %PC, align 8
  store i64 %465, i64* %RDI, align 8, !tbaa !2428
  %467 = load i64, i64* %RAX, align 8
  %468 = add i64 %466, 8
  store i64 %468, i64* %PC, align 8
  %469 = inttoptr i64 %465 to i64*
  store i64 %467, i64* %469, align 8
  %470 = load i64, i64* %PC, align 8
  %471 = add i64 %470, -359
  %472 = add i64 %470, 5
  %473 = load i64, i64* %RSP, align 8, !tbaa !2428
  %474 = add i64 %473, -8
  %475 = inttoptr i64 %474 to i64*
  store i64 %472, i64* %475, align 8
  store i64 %474, i64* %RSP, align 8, !tbaa !2428
  store i64 %471, i64* %PC, align 8, !tbaa !2428
  %476 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %471, %struct.Memory* %463)
  %477 = load i64, i64* %RBP, align 8
  %478 = add i64 %477, -8
  %479 = load i64, i64* %PC, align 8
  store i64 %478, i64* %RDI, align 8, !tbaa !2428
  %480 = load i64*, i64** %99, align 8
  %481 = add i64 %479, 8
  store i64 %481, i64* %PC, align 8
  %482 = load i64, i64* %480, align 8
  store i64 %482, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %483 = add i64 %477, -48
  %484 = add i64 %479, 12
  store i64 %484, i64* %PC, align 8
  %485 = inttoptr i64 %483 to i64*
  %486 = load i64, i64* %485, align 8
  store i64 %486, i64* %RSI, align 8, !tbaa !2428
  %487 = add i64 %477, -144
  %488 = add i64 %479, 20
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i64*
  store i64 %482, i64* %489, align 8
  %490 = load i64, i64* %PC, align 8
  %491 = add i64 %490, -272
  %492 = add i64 %490, 5
  %493 = load i64, i64* %RSP, align 8, !tbaa !2428
  %494 = add i64 %493, -8
  %495 = inttoptr i64 %494 to i64*
  store i64 %492, i64* %495, align 8
  store i64 %494, i64* %RSP, align 8, !tbaa !2428
  store i64 %491, i64* %PC, align 8, !tbaa !2428
  %496 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %491, %struct.Memory* %476)
  %497 = load i64, i64* %RBP, align 8
  %498 = add i64 %497, -80
  %499 = load i64, i64* %PC, align 8
  store i64 %498, i64* %RDI, align 8, !tbaa !2428
  %500 = load i64, i64* %RAX, align 8
  %501 = add i64 %499, 8
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %498 to i64*
  store i64 %500, i64* %502, align 8
  %503 = load i64, i64* %PC, align 8
  %504 = add i64 %503, -397
  %505 = add i64 %503, 5
  %506 = load i64, i64* %RSP, align 8, !tbaa !2428
  %507 = add i64 %506, -8
  %508 = inttoptr i64 %507 to i64*
  store i64 %505, i64* %508, align 8
  store i64 %507, i64* %RSP, align 8, !tbaa !2428
  store i64 %504, i64* %PC, align 8, !tbaa !2428
  %509 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %504, %struct.Memory* %496)
  %510 = load i64, i64* %RBP, align 8
  %511 = add i64 %510, -144
  %512 = load i64, i64* %PC, align 8
  %513 = add i64 %512, 8
  store i64 %513, i64* %PC, align 8
  %514 = inttoptr i64 %511 to i64*
  %515 = load i64, i64* %514, align 8
  store i64 %515, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %516 = load i64*, i64** %99, align 8
  %517 = add i64 %512, 12
  store i64 %517, i64* %PC, align 8
  store i64 %515, i64* %516, align 8
  %518 = load i64, i64* %RBP, align 8
  %519 = add i64 %518, -40
  %520 = load i64, i64* %PC, align 8
  %521 = add i64 %520, 4
  store i64 %521, i64* %PC, align 8
  %522 = inttoptr i64 %519 to i64*
  %523 = load i64, i64* %522, align 8
  %524 = add i64 %523, -1
  store i64 %524, i64* %RAX, align 8, !tbaa !2428
  %525 = icmp eq i64 %523, 0
  %526 = zext i1 %525 to i8
  store i8 %526, i8* %13, align 1, !tbaa !2432
  %527 = trunc i64 %524 to i32
  %528 = and i32 %527, 255
  %529 = tail call i32 @llvm.ctpop.i32(i32 %528) #10
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  store i8 %532, i8* %20, align 1, !tbaa !2446
  %533 = xor i64 %524, %523
  %534 = lshr i64 %533, 4
  %535 = trunc i64 %534 to i8
  %536 = and i8 %535, 1
  store i8 %536, i8* %26, align 1, !tbaa !2447
  %537 = icmp eq i64 %524, 0
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %29, align 1, !tbaa !2448
  %539 = lshr i64 %524, 63
  %540 = trunc i64 %539 to i8
  store i8 %540, i8* %32, align 1, !tbaa !2449
  %541 = lshr i64 %523, 63
  %542 = xor i64 %539, %541
  %543 = add nuw nsw i64 %542, %541
  %544 = icmp eq i64 %543, 2
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %38, align 1, !tbaa !2450
  %546 = add i64 %518, -48
  %547 = add i64 %520, 12
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i64*
  store i64 %524, i64* %548, align 8
  %549 = load i64, i64* %RBP, align 8
  %550 = add i64 %549, -40
  %551 = load i64, i64* %PC, align 8
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %550 to i64*
  %554 = load i64, i64* %553, align 8
  store i64 %554, i64* %RAX, align 8, !tbaa !2428
  %555 = add i64 %551, 8
  store i64 %555, i64* %PC, align 8
  %556 = load i64, i64* %553, align 8
  %557 = add i64 %556, %554
  store i64 %557, i64* %RAX, align 8, !tbaa !2428
  %558 = icmp ult i64 %557, %554
  %559 = icmp ult i64 %557, %556
  %560 = or i1 %558, %559
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %13, align 1, !tbaa !2432
  %562 = trunc i64 %557 to i32
  %563 = and i32 %562, 255
  %564 = tail call i32 @llvm.ctpop.i32(i32 %563) #10
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  store i8 %567, i8* %20, align 1, !tbaa !2446
  %568 = xor i64 %556, %554
  %569 = xor i64 %568, %557
  %570 = lshr i64 %569, 4
  %571 = trunc i64 %570 to i8
  %572 = and i8 %571, 1
  store i8 %572, i8* %26, align 1, !tbaa !2447
  %573 = icmp eq i64 %557, 0
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %29, align 1, !tbaa !2448
  %575 = lshr i64 %557, 63
  %576 = trunc i64 %575 to i8
  store i8 %576, i8* %32, align 1, !tbaa !2449
  %577 = lshr i64 %554, 63
  %578 = lshr i64 %556, 63
  %579 = xor i64 %575, %577
  %580 = xor i64 %575, %578
  %581 = add nuw nsw i64 %579, %580
  %582 = icmp eq i64 %581, 2
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %38, align 1, !tbaa !2450
  %584 = add i64 %551, 12
  store i64 %584, i64* %PC, align 8
  store i64 %557, i64* %553, align 8
  %585 = load i64, i64* %PC, align 8
  %586 = add i64 %585, -226
  store i64 %586, i64* %PC, align 8, !tbaa !2428
  br label %block_404814

block_404968:                                     ; preds = %block_4048fb, %block_404909
  %587 = phi i64 [ %392, %block_4048fb ], [ %.pre11, %block_404909 ]
  %588 = phi i64 [ %671, %block_4048fb ], [ %.pre10, %block_404909 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_4048fb ], [ %282, %block_404909 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %589 = add i64 %587, -48
  %590 = add i64 %588, 11
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %589 to i64*
  %592 = load i64, i64* %591, align 8
  %593 = add i64 %592, -1
  %594 = icmp eq i64 %592, 0
  %595 = zext i1 %594 to i8
  store i8 %595, i8* %13, align 1, !tbaa !2432
  %596 = trunc i64 %593 to i32
  %597 = and i32 %596, 255
  %598 = tail call i32 @llvm.ctpop.i32(i32 %597) #10
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  %601 = xor i8 %600, 1
  store i8 %601, i8* %20, align 1, !tbaa !2446
  %602 = xor i64 %593, %592
  %603 = lshr i64 %602, 4
  %604 = trunc i64 %603 to i8
  %605 = and i8 %604, 1
  store i8 %605, i8* %26, align 1, !tbaa !2447
  %606 = icmp eq i64 %593, 0
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %29, align 1, !tbaa !2448
  %608 = lshr i64 %593, 63
  %609 = trunc i64 %608 to i8
  store i8 %609, i8* %32, align 1, !tbaa !2449
  %610 = lshr i64 %592, 63
  %611 = xor i64 %608, %610
  %612 = add nuw nsw i64 %611, %610
  %613 = icmp eq i64 %612, 2
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %38, align 1, !tbaa !2450
  store i64 %593, i64* %RAX, align 8, !tbaa !2428
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %616 = ashr i64 %593, 63
  store i64 %616, i64* %RDX, align 8, !tbaa !2428
  %617 = add i64 %588, 23
  store i64 %617, i64* %PC, align 8
  %618 = zext i64 %616 to i128
  %619 = shl nuw i128 %618, 64
  %620 = zext i64 %593 to i128
  %621 = or i128 %619, %620
  %622 = sdiv i128 %621, 2
  %623 = trunc i128 %622 to i64
  %624 = and i128 %622, 18446744073709551615
  %625 = sext i64 %623 to i128
  %626 = and i128 %625, -18446744073709551616
  %627 = or i128 %626, %624
  %628 = icmp eq i128 %622, %627
  br i1 %628, label %631, label %629

; <label>:629:                                    ; preds = %block_404968
  %630 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %617, %struct.Memory* %MEMORY.2) #13
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i64, i64* %RAX, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:631:                                    ; preds = %block_404968
  %632 = srem i128 %621, 2
  %633 = trunc i128 %632 to i64
  store i64 %623, i64* %615, align 8, !tbaa !2428
  store i64 %633, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %631, %629
  %634 = phi i64 [ %.pre14, %629 ], [ %617, %631 ]
  %635 = phi i64 [ %.pre13, %629 ], [ %623, %631 ]
  %636 = phi i64 [ %.pre12, %629 ], [ %587, %631 ]
  %637 = phi %struct.Memory* [ %630, %629 ], [ %MEMORY.2, %631 ]
  %638 = add i64 %636, -40
  %639 = add i64 %634, 4
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %638 to i64*
  store i64 %635, i64* %640, align 8
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_404983

block_4048fb:                                     ; preds = %block_404814
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %CL = bitcast %union.anon* %641 to i8*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %641, i64 0, i32 0
  %642 = add i64 %428, 4
  store i64 %642, i64* %PC, align 8
  %643 = load i64, i64* %395, align 8
  store i64 %643, i64* %RAX, align 8, !tbaa !2428
  %644 = add i64 %428, 8
  store i64 %644, i64* %PC, align 8
  %645 = load i64, i64* %399, align 8
  %646 = sub i64 %643, %645
  %647 = icmp ult i64 %643, %645
  %648 = zext i1 %647 to i8
  store i8 %648, i8* %13, align 1, !tbaa !2432
  %649 = trunc i64 %646 to i32
  %650 = and i32 %649, 255
  %651 = tail call i32 @llvm.ctpop.i32(i32 %650) #10
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  %654 = xor i8 %653, 1
  store i8 %654, i8* %20, align 1, !tbaa !2446
  %655 = xor i64 %645, %643
  %656 = xor i64 %655, %646
  %657 = lshr i64 %656, 4
  %658 = trunc i64 %657 to i8
  %659 = and i8 %658, 1
  store i8 %659, i8* %26, align 1, !tbaa !2447
  %660 = icmp eq i64 %646, 0
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %29, align 1, !tbaa !2448
  %662 = lshr i64 %646, 63
  %663 = trunc i64 %662 to i8
  store i8 %663, i8* %32, align 1, !tbaa !2449
  %664 = lshr i64 %643, 63
  %665 = lshr i64 %645, 63
  %666 = xor i64 %665, %664
  %667 = xor i64 %662, %664
  %668 = add nuw nsw i64 %667, %666
  %669 = icmp eq i64 %668, 2
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %38, align 1, !tbaa !2450
  %.v25 = select i1 %660, i64 14, i64 109
  %671 = add i64 %.v25, %428
  store i64 %671, i64* %PC, align 8, !tbaa !2428
  br i1 %660, label %block_404909, label %block_404968

block_404983:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %672 = phi i64 [ %.pre15, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %988, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.3 = phi %struct.Memory* [ %637, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %983, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %673 = load i64, i64* %RBP, align 8
  %674 = add i64 %673, -48
  %675 = add i64 %672, 8
  store i64 %675, i64* %PC, align 8
  %676 = inttoptr i64 %674 to i64*
  %677 = load i64, i64* %676, align 8
  store i64 %677, i64* %RDX, align 8, !tbaa !2428
  %678 = add i64 %673, -24
  %679 = add i64 %672, 12
  store i64 %679, i64* %PC, align 8
  %680 = inttoptr i64 %678 to i64*
  %681 = load i64, i64* %680, align 8
  %682 = sub i64 %677, %681
  %683 = icmp ult i64 %677, %681
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %13, align 1, !tbaa !2432
  %685 = trunc i64 %682 to i32
  %686 = and i32 %685, 255
  %687 = tail call i32 @llvm.ctpop.i32(i32 %686) #10
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  %690 = xor i8 %689, 1
  store i8 %690, i8* %20, align 1, !tbaa !2446
  %691 = xor i64 %681, %677
  %692 = xor i64 %691, %682
  %693 = lshr i64 %692, 4
  %694 = trunc i64 %693 to i8
  %695 = and i8 %694, 1
  store i8 %695, i8* %26, align 1, !tbaa !2447
  %696 = icmp eq i64 %682, 0
  %697 = zext i1 %696 to i8
  store i8 %697, i8* %29, align 1, !tbaa !2448
  %698 = lshr i64 %682, 63
  %699 = trunc i64 %698 to i8
  store i8 %699, i8* %32, align 1, !tbaa !2449
  %700 = lshr i64 %677, 63
  %701 = lshr i64 %681, 63
  %702 = xor i64 %701, %700
  %703 = xor i64 %698, %700
  %704 = add nuw nsw i64 %703, %702
  %705 = icmp eq i64 %704, 2
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %38, align 1, !tbaa !2450
  %707 = add i64 %673, -153
  %708 = add i64 %672, 18
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %707 to i8*
  store i8 0, i8* %709, align 1
  %710 = load i64, i64* %PC, align 8
  %711 = add i64 %710, 54
  %712 = add i64 %710, 6
  %713 = load i8, i8* %29, align 1, !tbaa !2448
  %714 = icmp ne i8 %713, 0
  %715 = load i8, i8* %32, align 1, !tbaa !2449
  %716 = icmp ne i8 %715, 0
  %717 = load i8, i8* %38, align 1, !tbaa !2450
  %718 = icmp ne i8 %717, 0
  %719 = xor i1 %716, %718
  %720 = or i1 %714, %719
  %721 = select i1 %720, i64 %711, i64 %712
  store i64 %721, i64* %PC, align 8, !tbaa !2428
  br i1 %720, label %block_4049cb, label %block_40499b

block_4049cb:                                     ; preds = %block_404983, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %722 = phi i64 [ %711, %block_404983 ], [ %.pre18, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2 ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_404983 ], [ %382, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2 ]
  %723 = load i64, i64* %RBP, align 8
  %724 = add i64 %723, -153
  %725 = add i64 %722, 6
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to i8*
  %727 = load i8, i8* %726, align 1
  store i8 %727, i8* %AL, align 1, !tbaa !2453
  %728 = and i8 %727, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %729 = zext i8 %728 to i32
  %730 = tail call i32 @llvm.ctpop.i32(i32 %729) #10
  %731 = trunc i32 %730 to i8
  %732 = xor i8 %731, 1
  store i8 %732, i8* %20, align 1, !tbaa !2446
  %733 = xor i8 %728, 1
  store i8 %733, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %734 = icmp eq i8 %733, 0
  %.v = select i1 %734, i64 19, i64 14
  %735 = add i64 %.v, %722
  store i64 %735, i64* %PC, align 8, !tbaa !2428
  %736 = add i64 %723, -8
  store i64 %736, i64* %RDI, align 8, !tbaa !2428
  br i1 %734, label %block_4049de, label %block_4049d9

block_404822:                                     ; preds = %block_404814
  %737 = add i64 %392, -8
  store i64 %737, i64* %RDI, align 8, !tbaa !2428
  %738 = add i64 %428, 8
  store i64 %738, i64* %PC, align 8
  %739 = load i64, i64* %395, align 8
  %740 = add i64 %739, -1
  store i64 %740, i64* %RAX, align 8, !tbaa !2428
  %741 = icmp eq i64 %739, 0
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %13, align 1, !tbaa !2432
  %743 = trunc i64 %740 to i32
  %744 = and i32 %743, 255
  %745 = tail call i32 @llvm.ctpop.i32(i32 %744) #10
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  %748 = xor i8 %747, 1
  store i8 %748, i8* %20, align 1, !tbaa !2446
  %749 = xor i64 %740, %739
  %750 = lshr i64 %749, 4
  %751 = trunc i64 %750 to i8
  %752 = and i8 %751, 1
  store i8 %752, i8* %26, align 1, !tbaa !2447
  %753 = icmp eq i64 %740, 0
  %754 = zext i1 %753 to i8
  store i8 %754, i8* %29, align 1, !tbaa !2448
  %755 = lshr i64 %740, 63
  %756 = trunc i64 %755 to i8
  store i8 %756, i8* %32, align 1, !tbaa !2449
  %757 = lshr i64 %739, 63
  %758 = xor i64 %755, %757
  %759 = add nuw nsw i64 %758, %757
  %760 = icmp eq i64 %759, 2
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %38, align 1, !tbaa !2450
  store i64 %740, i64* %RSI, align 8, !tbaa !2428
  %762 = add i64 %428, -114
  %763 = add i64 %428, 20
  %764 = load i64, i64* %RSP, align 8, !tbaa !2428
  %765 = add i64 %764, -8
  %766 = inttoptr i64 %765 to i64*
  store i64 %763, i64* %766, align 8
  store i64 %765, i64* %RSP, align 8, !tbaa !2428
  store i64 %762, i64* %PC, align 8, !tbaa !2428
  %767 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %762, %struct.Memory* %MEMORY.0)
  %768 = load i64, i64* %RBP, align 8
  %769 = add i64 %768, -56
  %770 = load i64, i64* %PC, align 8
  store i64 %769, i64* %RDI, align 8, !tbaa !2428
  %771 = load i64, i64* %RAX, align 8
  %772 = add i64 %770, 8
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %769 to i64*
  store i64 %771, i64* %773, align 8
  %774 = load i64, i64* %PC, align 8
  %775 = add i64 %774, -254
  %776 = add i64 %774, 5
  %777 = load i64, i64* %RSP, align 8, !tbaa !2428
  %778 = add i64 %777, -8
  %779 = inttoptr i64 %778 to i64*
  store i64 %776, i64* %779, align 8
  store i64 %778, i64* %RSP, align 8, !tbaa !2428
  store i64 %775, i64* %PC, align 8, !tbaa !2428
  %780 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %775, %struct.Memory* %MEMORY.0)
  %781 = load i64, i64* %RBP, align 8
  %782 = add i64 %781, -8
  %783 = load i64, i64* %PC, align 8
  store i64 %782, i64* %RDI, align 8, !tbaa !2428
  %784 = load i64*, i64** %99, align 8
  %785 = add i64 %783, 8
  store i64 %785, i64* %PC, align 8
  %786 = load i64, i64* %784, align 8
  store i64 %786, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %787 = add i64 %781, -40
  %788 = add i64 %783, 12
  store i64 %788, i64* %PC, align 8
  %789 = inttoptr i64 %787 to i64*
  %790 = load i64, i64* %789, align 8
  store i64 %790, i64* %RSI, align 8, !tbaa !2428
  %791 = add i64 %781, -136
  %792 = add i64 %783, 20
  store i64 %792, i64* %PC, align 8
  %793 = inttoptr i64 %791 to i64*
  store i64 %786, i64* %793, align 8
  %794 = load i64, i64* %PC, align 8
  %795 = add i64 %794, -167
  %796 = add i64 %794, 5
  %797 = load i64, i64* %RSP, align 8, !tbaa !2428
  %798 = add i64 %797, -8
  %799 = inttoptr i64 %798 to i64*
  store i64 %796, i64* %799, align 8
  store i64 %798, i64* %RSP, align 8, !tbaa !2428
  store i64 %795, i64* %PC, align 8, !tbaa !2428
  %800 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %795, %struct.Memory* %MEMORY.0)
  %801 = load i64, i64* %RBP, align 8
  %802 = add i64 %801, -64
  %803 = load i64, i64* %PC, align 8
  store i64 %802, i64* %RDI, align 8, !tbaa !2428
  %804 = load i64, i64* %RAX, align 8
  %805 = add i64 %803, 8
  store i64 %805, i64* %PC, align 8
  %806 = inttoptr i64 %802 to i64*
  store i64 %804, i64* %806, align 8
  %807 = load i64, i64* %PC, align 8
  %808 = add i64 %807, -292
  %809 = add i64 %807, 5
  %810 = load i64, i64* %RSP, align 8, !tbaa !2428
  %811 = add i64 %810, -8
  %812 = inttoptr i64 %811 to i64*
  store i64 %809, i64* %812, align 8
  store i64 %811, i64* %RSP, align 8, !tbaa !2428
  store i64 %808, i64* %PC, align 8, !tbaa !2428
  %813 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %808, %struct.Memory* %MEMORY.0)
  %814 = load i64*, i64** %99, align 8
  %815 = load i64, i64* %PC, align 8
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC, align 8
  %817 = load i64, i64* %814, align 8
  store i64 %817, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %818 = load i64, i64* %RBP, align 8
  %819 = add i64 %818, -136
  %820 = add i64 %815, 12
  store i64 %820, i64* %PC, align 8
  %821 = inttoptr i64 %819 to i64*
  %822 = load i64, i64* %821, align 8
  store i64 %822, i64* %102, align 1, !tbaa !2451
  store double 0.000000e+00, double* %104, align 1, !tbaa !2451
  %823 = add i64 %815, 16
  store i64 %823, i64* %PC, align 8
  %824 = bitcast i64 %817 to double
  %.cast7 = bitcast i64 %822 to double
  %825 = fcmp uno double %824, %.cast7
  br i1 %825, label %826, label %836

; <label>:826:                                    ; preds = %block_404822
  %827 = fadd double %824, %.cast7
  %828 = bitcast double %827 to i64
  %829 = and i64 %828, 9221120237041090560
  %830 = icmp eq i64 %829, 9218868437227405312
  %831 = and i64 %828, 2251799813685247
  %832 = icmp ne i64 %831, 0
  %833 = and i1 %830, %832
  br i1 %833, label %834, label %842

; <label>:834:                                    ; preds = %826
  %835 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %823, %struct.Memory* %MEMORY.0) #13
  %.pre22 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:836:                                    ; preds = %block_404822
  %837 = fcmp ogt double %824, %.cast7
  br i1 %837, label %842, label %838

; <label>:838:                                    ; preds = %836
  %839 = fcmp olt double %824, %.cast7
  br i1 %839, label %842, label %840

; <label>:840:                                    ; preds = %838
  %841 = fcmp oeq double %824, %.cast7
  br i1 %841, label %842, label %846

; <label>:842:                                    ; preds = %840, %838, %836, %826
  %843 = phi i8 [ 0, %836 ], [ 0, %838 ], [ 1, %840 ], [ 1, %826 ]
  %844 = phi i8 [ 0, %836 ], [ 0, %838 ], [ 0, %840 ], [ 1, %826 ]
  %845 = phi i8 [ 0, %836 ], [ 1, %838 ], [ 0, %840 ], [ 1, %826 ]
  store i8 %843, i8* %29, align 1, !tbaa !2453
  store i8 %844, i8* %20, align 1, !tbaa !2453
  store i8 %845, i8* %13, align 1, !tbaa !2453
  br label %846

; <label>:846:                                    ; preds = %842, %840
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %846, %834
  %847 = phi i64 [ %.pre22, %834 ], [ %823, %846 ]
  %848 = phi %struct.Memory* [ %835, %834 ], [ %MEMORY.0, %846 ]
  %849 = add i64 %847, 18
  %850 = add i64 %847, 6
  %851 = load i8, i8* %13, align 1, !tbaa !2432
  %852 = load i8, i8* %29, align 1, !tbaa !2448
  %853 = or i8 %852, %851
  %854 = icmp ne i8 %853, 0
  %855 = select i1 %854, i64 %849, i64 %850
  store i64 %855, i64* %PC, align 8, !tbaa !2428
  br i1 %854, label %block_40488b, label %block_40487f

block_4049de:                                     ; preds = %block_4049cb
  %856 = add i64 %723, -40
  %857 = add i64 %735, 8
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %856 to i64*
  %859 = load i64, i64* %858, align 8
  store i64 %859, i64* %RSI, align 8, !tbaa !2428
  %860 = add i64 %735, -558
  %861 = add i64 %735, 13
  %862 = load i64, i64* %RSP, align 8, !tbaa !2428
  %863 = add i64 %862, -8
  %864 = inttoptr i64 %863 to i64*
  store i64 %861, i64* %864, align 8
  store i64 %863, i64* %RSP, align 8, !tbaa !2428
  store i64 %860, i64* %PC, align 8, !tbaa !2428
  %865 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %860, %struct.Memory* %MEMORY.4)
  %866 = load i64, i64* %RBP, align 8
  %867 = add i64 %866, -112
  %868 = load i64, i64* %PC, align 8
  store i64 %867, i64* %RDI, align 8, !tbaa !2428
  %869 = load i64, i64* %RAX, align 8
  %870 = add i64 %868, 8
  store i64 %870, i64* %PC, align 8
  %871 = inttoptr i64 %867 to i64*
  store i64 %869, i64* %871, align 8
  %872 = load i64, i64* %PC, align 8
  %873 = add i64 %872, -691
  %874 = add i64 %872, 5
  %875 = load i64, i64* %RSP, align 8, !tbaa !2428
  %876 = add i64 %875, -8
  %877 = inttoptr i64 %876 to i64*
  store i64 %874, i64* %877, align 8
  store i64 %876, i64* %RSP, align 8, !tbaa !2428
  store i64 %873, i64* %PC, align 8, !tbaa !2428
  %878 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %873, %struct.Memory* %865)
  %879 = load i64, i64* %RBP, align 8
  %880 = add i64 %879, -8
  %881 = load i64, i64* %PC, align 8
  store i64 %880, i64* %RDI, align 8, !tbaa !2428
  %882 = load i64*, i64** %99, align 8
  %883 = add i64 %881, 8
  store i64 %883, i64* %PC, align 8
  %884 = load i64, i64* %882, align 8
  store i64 %884, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %885 = add i64 %879, -48
  %886 = add i64 %881, 12
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i64*
  %888 = load i64, i64* %887, align 8
  store i64 %888, i64* %RSI, align 8, !tbaa !2428
  %889 = add i64 %879, -168
  %890 = add i64 %881, 20
  store i64 %890, i64* %PC, align 8
  %891 = inttoptr i64 %889 to i64*
  store i64 %884, i64* %891, align 8
  %892 = load i64, i64* %PC, align 8
  %893 = add i64 %892, -604
  %894 = add i64 %892, 5
  %895 = load i64, i64* %RSP, align 8, !tbaa !2428
  %896 = add i64 %895, -8
  %897 = inttoptr i64 %896 to i64*
  store i64 %894, i64* %897, align 8
  store i64 %896, i64* %RSP, align 8, !tbaa !2428
  store i64 %893, i64* %PC, align 8, !tbaa !2428
  %898 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %893, %struct.Memory* %878)
  %899 = load i64, i64* %RBP, align 8
  %900 = add i64 %899, -120
  %901 = load i64, i64* %PC, align 8
  store i64 %900, i64* %RDI, align 8, !tbaa !2428
  %902 = load i64, i64* %RAX, align 8
  %903 = add i64 %901, 8
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %900 to i64*
  store i64 %902, i64* %904, align 8
  %905 = load i64, i64* %PC, align 8
  %906 = add i64 %905, -729
  %907 = add i64 %905, 5
  %908 = load i64, i64* %RSP, align 8, !tbaa !2428
  %909 = add i64 %908, -8
  %910 = inttoptr i64 %909 to i64*
  store i64 %907, i64* %910, align 8
  store i64 %909, i64* %RSP, align 8, !tbaa !2428
  store i64 %906, i64* %PC, align 8, !tbaa !2428
  %911 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %906, %struct.Memory* %898)
  %912 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %913 = load i64, i64* %RBP, align 8
  %914 = add i64 %913, -168
  %915 = add i64 %912, 15
  store i64 %915, i64* %PC, align 8
  %916 = inttoptr i64 %914 to i64*
  %917 = load i64, i64* %916, align 8
  store i64 %917, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %101, align 1, !tbaa !2451
  %918 = load i64*, i64** %99, align 8
  %919 = add i64 %912, 19
  store i64 %919, i64* %PC, align 8
  store i64 %917, i64* %918, align 8
  %920 = load i64, i64* %RBP, align 8
  %921 = add i64 %920, -40
  %922 = load i64, i64* %PC, align 8
  %923 = add i64 %922, 4
  store i64 %923, i64* %PC, align 8
  %924 = inttoptr i64 %921 to i64*
  %925 = load i64, i64* %924, align 8
  store i64 %925, i64* %RAX, align 8, !tbaa !2428
  %926 = add i64 %920, -48
  %927 = add i64 %922, 8
  store i64 %927, i64* %PC, align 8
  %928 = inttoptr i64 %926 to i64*
  store i64 %925, i64* %928, align 8
  %929 = load i64, i64* %RBP, align 8
  %930 = add i64 %929, -48
  %931 = load i64, i64* %PC, align 8
  %932 = add i64 %931, 4
  store i64 %932, i64* %PC, align 8
  %933 = inttoptr i64 %930 to i64*
  %934 = load i64, i64* %933, align 8
  %935 = add i64 %934, -1
  store i64 %935, i64* %RAX, align 8, !tbaa !2428
  %936 = icmp eq i64 %934, 0
  %937 = zext i1 %936 to i8
  store i8 %937, i8* %13, align 1, !tbaa !2432
  %938 = trunc i64 %935 to i32
  %939 = and i32 %938, 255
  %940 = tail call i32 @llvm.ctpop.i32(i32 %939) #10
  %941 = trunc i32 %940 to i8
  %942 = and i8 %941, 1
  %943 = xor i8 %942, 1
  store i8 %943, i8* %20, align 1, !tbaa !2446
  %944 = xor i64 %935, %934
  %945 = lshr i64 %944, 4
  %946 = trunc i64 %945 to i8
  %947 = and i8 %946, 1
  store i8 %947, i8* %26, align 1, !tbaa !2447
  %948 = icmp eq i64 %935, 0
  %949 = zext i1 %948 to i8
  store i8 %949, i8* %29, align 1, !tbaa !2448
  %950 = lshr i64 %935, 63
  %951 = trunc i64 %950 to i8
  store i8 %951, i8* %32, align 1, !tbaa !2449
  %952 = lshr i64 %934, 63
  %953 = xor i64 %950, %952
  %954 = add nuw nsw i64 %953, %952
  %955 = icmp eq i64 %954, 2
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %38, align 1, !tbaa !2450
  %957 = ashr i64 %935, 63
  store i64 %957, i64* %RDX, align 8, !tbaa !2428
  %958 = load i64, i64* %RSI, align 8
  %959 = add i64 %931, 13
  store i64 %959, i64* %PC, align 8
  %960 = sext i64 %958 to i128
  %961 = and i128 %960, -18446744073709551616
  %962 = zext i64 %957 to i128
  %963 = shl nuw i128 %962, 64
  %964 = zext i64 %935 to i128
  %965 = or i128 %963, %964
  %966 = zext i64 %958 to i128
  %967 = or i128 %961, %966
  %968 = sdiv i128 %965, %967
  %969 = trunc i128 %968 to i64
  %970 = and i128 %968, 18446744073709551615
  %971 = sext i64 %969 to i128
  %972 = and i128 %971, -18446744073709551616
  %973 = or i128 %972, %970
  %974 = icmp eq i128 %968, %973
  br i1 %974, label %977, label %975

; <label>:975:                                    ; preds = %block_4049de
  %976 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %959, %struct.Memory* %911) #13
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %RAX, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:977:                                    ; preds = %block_4049de
  %978 = srem i128 %965, %967
  %979 = trunc i128 %978 to i64
  store i64 %969, i64* %615, align 8, !tbaa !2428
  store i64 %979, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %977, %975
  %980 = phi i64 [ %.pre21, %975 ], [ %959, %977 ]
  %981 = phi i64 [ %.pre20, %975 ], [ %969, %977 ]
  %982 = phi i64 [ %.pre19, %975 ], [ %929, %977 ]
  %983 = phi %struct.Memory* [ %976, %975 ], [ %911, %977 ]
  %984 = add i64 %982, -40
  %985 = add i64 %980, 4
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %984 to i64*
  store i64 %981, i64* %986, align 8
  %987 = load i64, i64* %PC, align 8
  %988 = add i64 %987, -199
  store i64 %988, i64* %PC, align 8, !tbaa !2428
  br label %block_404983
}

; Function Attrs: noinline
define %struct.Memory* @sub_405020__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #7 {
block_405020:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = icmp eq i64 %60, 0
  %62 = zext i1 %61 to i8
  %63 = lshr i64 %60, 63
  %64 = add nsw i64 %60, -1
  store i8 %62, i8* %13, align 1, !tbaa !2432
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #10
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i64 %64, %60
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2447
  %75 = icmp eq i64 %64, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2448
  %77 = lshr i64 %64, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2449
  %79 = xor i64 %77, %63
  %80 = add nuw nsw i64 %79, %63
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2450
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 266, i64 25
  %86 = add i64 %.v, %51
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_40513a, label %block_405049

block_4050e9:                                     ; preds = %block_4050c0
  %87 = add i64 %257, 4
  store i64 %87, i64* %PC, align 8
  %88 = load i64, i64* %230, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %257, 7
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = add i64 %315, -48
  %93 = add i64 %257, 11
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  store i64 %91, i64* %94, align 8
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -32
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = add i64 %95, -40
  %102 = add i64 %97, 8
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %RCX, align 8, !tbaa !2428
  %105 = inttoptr i64 %100 to i64*
  %106 = add i64 %97, 11
  store i64 %106, i64* %PC, align 8
  %107 = load i64, i64* %105, align 8
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %.cast = inttoptr i64 %104 to i64*
  %108 = add i64 %97, 14
  store i64 %108, i64* %PC, align 8
  store i64 %107, i64* %.cast, align 8
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -32
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %110 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RAX, align 8, !tbaa !2428
  %115 = add i64 %109, -48
  %116 = add i64 %111, 8
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RCX, align 8, !tbaa !2428
  %119 = inttoptr i64 %114 to i64*
  %120 = add i64 %111, 11
  store i64 %120, i64* %PC, align 8
  store i64 %118, i64* %119, align 8
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, -169
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  br label %block_405064

block_4050e4:                                     ; preds = %block_4050c0
  %123 = add i64 %257, 46
  br label %block_405112

block_405112:                                     ; preds = %block_4050a1, %block_4050e4
  %124 = phi i64 [ %258, %block_4050a1 ], [ %315, %block_4050e4 ]
  %.sink = phi i64 [ %429, %block_4050a1 ], [ %123, %block_4050e4 ]
  %125 = add i64 %124, -8
  %126 = add i64 %.sink, 4
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = add i64 %124, -40
  %130 = add i64 %.sink, 8
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = add i64 %132, 8
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = icmp ugt i64 %132, -9
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %13, align 1, !tbaa !2432
  %136 = trunc i64 %133 to i32
  %137 = and i32 %136, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #10
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %20, align 1, !tbaa !2446
  %142 = xor i64 %133, %132
  %143 = lshr i64 %142, 4
  %144 = trunc i64 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %26, align 1, !tbaa !2447
  %146 = icmp eq i64 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %29, align 1, !tbaa !2448
  %148 = lshr i64 %133, 63
  %149 = trunc i64 %148 to i8
  store i8 %149, i8* %32, align 1, !tbaa !2449
  %150 = lshr i64 %132, 63
  %151 = xor i64 %148, %150
  %152 = add nuw nsw i64 %151, %148
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %38, align 1, !tbaa !2450
  store i64 %133, i64* %RSI, align 8, !tbaa !2428
  %155 = add i64 %.sink, -242
  %156 = add i64 %.sink, 20
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_405020__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %2)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -40
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = add i64 %166, 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -9
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %13, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #10
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %20, align 1, !tbaa !2446
  %176 = xor i64 %167, %166
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %26, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %29, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %32, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %38, align 1, !tbaa !2450
  %189 = add i64 %161, -16
  %190 = add i64 %163, 12
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RSI, align 8, !tbaa !2428
  store i64 %167, i64* %RDI, align 8, !tbaa !2428
  %193 = add i64 %163, -262
  %194 = add i64 %163, 20
  %195 = load i64, i64* %RSP, align 8, !tbaa !2428
  %196 = add i64 %195, -8
  %197 = inttoptr i64 %196 to i64*
  store i64 %194, i64* %197, align 8
  store i64 %196, i64* %RSP, align 8, !tbaa !2428
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  %198 = tail call %struct.Memory* @sub_405020__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %193, %struct.Memory* %160)
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_40513a

block_405049:                                     ; preds = %block_405020
  %199 = add i64 %86, 4
  store i64 %199, i64* %PC, align 8
  %200 = load i64, i64* %57, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = add i64 %86, 7
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %49, -24
  %205 = add i64 %86, 11
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -8
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = add i64 %207, -32
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  store i64 %212, i64* %215, align 8
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -16
  %218 = load i64, i64* %PC, align 8
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %217 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = add i64 %216, -40
  %223 = add i64 %218, 8
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i64*
  store i64 %221, i64* %224, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405064

block_4050c0:                                     ; preds = %block_4050ab
  %225 = add i64 %314, 26
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %316 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = add i64 %315, -40
  %229 = add i64 %314, 30
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = sub i64 %227, %231
  %233 = icmp ult i64 %227, %231
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %13, align 1, !tbaa !2432
  %235 = trunc i64 %232 to i32
  %236 = and i32 %235, 255
  %237 = tail call i32 @llvm.ctpop.i32(i32 %236) #10
  %238 = trunc i32 %237 to i8
  %239 = and i8 %238, 1
  %240 = xor i8 %239, 1
  store i8 %240, i8* %20, align 1, !tbaa !2446
  %241 = xor i64 %231, %227
  %242 = xor i64 %241, %232
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %26, align 1, !tbaa !2447
  %246 = icmp eq i64 %232, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %29, align 1, !tbaa !2448
  %248 = lshr i64 %232, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %32, align 1, !tbaa !2449
  %250 = lshr i64 %227, 63
  %251 = lshr i64 %231, 63
  %252 = xor i64 %251, %250
  %253 = xor i64 %248, %250
  %254 = add nuw nsw i64 %253, %252
  %255 = icmp eq i64 %254, 2
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %38, align 1, !tbaa !2450
  %.v35 = select i1 %233, i64 41, i64 36
  %257 = add i64 %.v35, %314
  store i64 %257, i64* %PC, align 8, !tbaa !2428
  br i1 %233, label %block_4050e9, label %block_4050e4

block_405089:                                     ; preds = %block_405069
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -32
  %260 = add i64 %365, 14
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i64*
  %262 = load i64, i64* %261, align 8
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = add i64 %258, -40
  %264 = add i64 %365, 18
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %263 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = sub i64 %262, %266
  %268 = icmp ult i64 %262, %266
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %13, align 1, !tbaa !2432
  %270 = trunc i64 %267 to i32
  %271 = and i32 %270, 255
  %272 = tail call i32 @llvm.ctpop.i32(i32 %271) #10
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  store i8 %275, i8* %20, align 1, !tbaa !2446
  %276 = xor i64 %266, %262
  %277 = xor i64 %276, %267
  %278 = lshr i64 %277, 4
  %279 = trunc i64 %278 to i8
  %280 = and i8 %279, 1
  store i8 %280, i8* %26, align 1, !tbaa !2447
  %281 = icmp eq i64 %267, 0
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %29, align 1, !tbaa !2448
  %283 = lshr i64 %267, 63
  %284 = trunc i64 %283 to i8
  store i8 %284, i8* %32, align 1, !tbaa !2449
  %285 = lshr i64 %262, 63
  %286 = lshr i64 %266, 63
  %287 = xor i64 %286, %285
  %288 = xor i64 %283, %285
  %289 = add nuw nsw i64 %288, %287
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %38, align 1, !tbaa !2450
  %.v33 = select i1 %268, i64 29, i64 24
  %292 = add i64 %.v33, %365
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  br i1 %268, label %block_4050a6, label %block_4050a1

block_4050ab:                                     ; preds = %block_4050c5, %block_4050a6
  %293 = phi i64 [ %.pre30, %block_4050c5 ], [ %258, %block_4050a6 ]
  %.sink8 = phi i64 [ %395, %block_4050c5 ], [ %367, %block_4050a6 ]
  %294 = add i64 %293, -24
  store i64 %294, i64* %RSI, align 8, !tbaa !2428
  %295 = add i64 %293, -32
  %296 = add i64 %.sink8, 8
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RDI, align 8, !tbaa !2428
  %299 = add i64 %.sink8, -8187
  %300 = add i64 %.sink8, 13
  %301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303, align 8
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  %304 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %299, %struct.Memory* %2)
  %305 = load i8, i8* %AL, align 1
  %306 = load i64, i64* %PC, align 8
  %307 = and i8 %305, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %308 = zext i8 %307 to i32
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308) #10
  %310 = trunc i32 %309 to i8
  %311 = xor i8 %310, 1
  store i8 %311, i8* %20, align 1, !tbaa !2446
  %312 = xor i8 %307, 1
  store i8 %312, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %313 = icmp eq i8 %312, 0
  %.v34 = select i1 %313, i64 13, i64 8
  %314 = add i64 %.v34, %306
  store i64 %314, i64* %PC, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -32
  br i1 %313, label %block_4050c5, label %block_4050c0

block_405069:                                     ; preds = %block_405064, %block_405069
  %.sink4 = phi i64 [ %431, %block_405064 ], [ %366, %block_405069 ]
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -24
  store i64 %318, i64* %RDI, align 8, !tbaa !2428
  %319 = add i64 %317, -40
  %320 = add i64 %.sink4, 8
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = add i64 %322, -8
  store i64 %323, i64* %RAX, align 8, !tbaa !2428
  %324 = icmp ugt i64 %322, 7
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %13, align 1, !tbaa !2432
  %326 = trunc i64 %323 to i32
  %327 = and i32 %326, 255
  %328 = tail call i32 @llvm.ctpop.i32(i32 %327) #10
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = xor i8 %330, 1
  store i8 %331, i8* %20, align 1, !tbaa !2446
  %332 = xor i64 %322, 16
  %333 = xor i64 %332, %323
  %334 = lshr i64 %333, 4
  %335 = trunc i64 %334 to i8
  %336 = and i8 %335, 1
  store i8 %336, i8* %26, align 1, !tbaa !2447
  %337 = icmp eq i64 %323, 0
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %29, align 1, !tbaa !2448
  %339 = lshr i64 %323, 63
  %340 = trunc i64 %339 to i8
  store i8 %340, i8* %32, align 1, !tbaa !2449
  %341 = lshr i64 %322, 63
  %342 = xor i64 %339, %341
  %343 = xor i64 %339, 1
  %344 = add nuw nsw i64 %342, %343
  %345 = icmp eq i64 %344, 2
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %38, align 1, !tbaa !2450
  %347 = add i64 %.sink4, 16
  store i64 %347, i64* %PC, align 8
  store i64 %323, i64* %321, align 8
  %348 = load i64, i64* %RAX, align 8
  %349 = load i64, i64* %PC, align 8
  store i64 %348, i64* %RSI, align 8, !tbaa !2428
  %350 = add i64 %349, -8137
  %351 = add i64 %349, 8
  %352 = load i64, i64* %RSP, align 8, !tbaa !2428
  %353 = add i64 %352, -8
  %354 = inttoptr i64 %353 to i64*
  store i64 %351, i64* %354, align 8
  store i64 %353, i64* %RSP, align 8, !tbaa !2428
  store i64 %350, i64* %PC, align 8, !tbaa !2428
  %355 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %350, %struct.Memory* %2)
  %356 = load i8, i8* %AL, align 1
  %357 = load i64, i64* %PC, align 8
  %358 = and i8 %356, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %359 = zext i8 %358 to i32
  %360 = tail call i32 @llvm.ctpop.i32(i32 %359) #10
  %361 = trunc i32 %360 to i8
  %362 = xor i8 %361, 1
  store i8 %362, i8* %20, align 1, !tbaa !2446
  %363 = xor i8 %358, 1
  store i8 %363, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %364 = icmp eq i8 %363, 0
  %.v32 = select i1 %364, i64 13, i64 8
  %365 = add i64 %.v32, %357
  store i64 %365, i64* %PC, align 8, !tbaa !2428
  %366 = add i64 %365, -37
  br i1 %364, label %block_405069, label %block_405089

block_4050a6:                                     ; preds = %block_405089
  %367 = add i64 %292, 5
  br label %block_4050ab

block_4050c5:                                     ; preds = %block_4050ab
  %368 = add i64 %314, 4
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %316 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = add i64 %370, 8
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = icmp ugt i64 %370, -9
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %13, align 1, !tbaa !2432
  %374 = trunc i64 %371 to i32
  %375 = and i32 %374, 255
  %376 = tail call i32 @llvm.ctpop.i32(i32 %375) #10
  %377 = trunc i32 %376 to i8
  %378 = and i8 %377, 1
  %379 = xor i8 %378, 1
  store i8 %379, i8* %20, align 1, !tbaa !2446
  %380 = xor i64 %371, %370
  %381 = lshr i64 %380, 4
  %382 = trunc i64 %381 to i8
  %383 = and i8 %382, 1
  store i8 %383, i8* %26, align 1, !tbaa !2447
  %384 = icmp eq i64 %371, 0
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %29, align 1, !tbaa !2448
  %386 = lshr i64 %371, 63
  %387 = trunc i64 %386 to i8
  store i8 %387, i8* %32, align 1, !tbaa !2449
  %388 = lshr i64 %370, 63
  %389 = xor i64 %386, %388
  %390 = add nuw nsw i64 %389, %386
  %391 = icmp eq i64 %390, 2
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %38, align 1, !tbaa !2450
  %393 = add i64 %314, 12
  store i64 %393, i64* %PC, align 8
  store i64 %371, i64* %369, align 8
  %394 = load i64, i64* %PC, align 8
  %395 = add i64 %394, -38
  %.pre30 = load i64, i64* %RBP, align 8
  br label %block_4050ab

block_40513a:                                     ; preds = %block_405112, %block_405020
  %396 = phi i64 [ %86, %block_405020 ], [ %.pre31, %block_405112 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_405020 ], [ %198, %block_405112 ]
  %397 = load i64, i64* %RSP, align 8
  %398 = add i64 %397, 48
  store i64 %398, i64* %RSP, align 8, !tbaa !2428
  %399 = icmp ugt i64 %397, -49
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %13, align 1, !tbaa !2432
  %401 = trunc i64 %398 to i32
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #10
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %20, align 1, !tbaa !2446
  %407 = xor i64 %397, 16
  %408 = xor i64 %407, %398
  %409 = lshr i64 %408, 4
  %410 = trunc i64 %409 to i8
  %411 = and i8 %410, 1
  store i8 %411, i8* %26, align 1, !tbaa !2447
  %412 = icmp eq i64 %398, 0
  %413 = zext i1 %412 to i8
  store i8 %413, i8* %29, align 1, !tbaa !2448
  %414 = lshr i64 %398, 63
  %415 = trunc i64 %414 to i8
  store i8 %415, i8* %32, align 1, !tbaa !2449
  %416 = lshr i64 %397, 63
  %417 = xor i64 %414, %416
  %418 = add nuw nsw i64 %417, %414
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  store i8 %420, i8* %38, align 1, !tbaa !2450
  %421 = add i64 %396, 5
  store i64 %421, i64* %PC, align 8
  %422 = add i64 %397, 56
  %423 = inttoptr i64 %398 to i64*
  %424 = load i64, i64* %423, align 8
  store i64 %424, i64* %RBP, align 8, !tbaa !2428
  store i64 %422, i64* %RSP, align 8, !tbaa !2428
  %425 = add i64 %396, 6
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %422 to i64*
  %427 = load i64, i64* %426, align 8
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  %428 = add i64 %397, 64
  store i64 %428, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_4050a1:                                     ; preds = %block_405089
  %429 = add i64 %292, 113
  br label %block_405112

block_405064:                                     ; preds = %block_405049, %block_4050e9
  %430 = phi i64 [ %.pre, %block_405049 ], [ %122, %block_4050e9 ]
  %431 = add i64 %430, 5
  br label %block_405069
}

; Function Attrs: noinline
define %struct.Memory* @sub_403200__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403200:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403230__ZltI12ValueWrapperIdEEbRKS0_IT_ES5__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008a0___cxx_global_var_init_12(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4008a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000) to i32), i32 255)) #10
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  br label %block_4008bb

block_4008bb:                                     ; preds = %block_4008bb, %block_4008a0
  %47 = phi i64 [ %98, %block_4008bb ], [ %42, %block_4008a0 ]
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = add i64 %47, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %48, -16
  %54 = add i64 %47, 11
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 5274
  %58 = add i64 %56, 5
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2Ev_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2432
  store i8 %46, i8* %19, align 1, !tbaa !2446
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2447
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2448
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2449
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %63, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2432
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #10
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2446
  %80 = xor i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2447
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2450
  %94 = add i64 %64, -8
  %95 = add i64 %63, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, -47
  %99 = add i64 %97, 6
  %100 = load i8, i8* %28, align 1, !tbaa !2448
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i64 %98, i64 %99
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_4008bb, label %block_4008f0

block_4008f0:                                     ; preds = %block_4008bb
  %103 = load i64, i64* %RSP, align 8
  %104 = add i64 %103, 16
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -17
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %12, align 1, !tbaa !2432
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #10
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %19, align 1, !tbaa !2446
  %113 = xor i64 %103, 16
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2447
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %28, align 1, !tbaa !2448
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %31, align 1, !tbaa !2449
  %122 = lshr i64 %103, 63
  %123 = xor i64 %120, %122
  %124 = add nuw nsw i64 %123, %120
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %37, align 1, !tbaa !2450
  %127 = add i64 %102, 5
  store i64 %127, i64* %PC, align 8
  %128 = add i64 %103, 24
  %129 = inttoptr i64 %104 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RBP, align 8, !tbaa !2428
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %102, 6
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %134 = add i64 %103, 32
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d20__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401d20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IdEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_406020__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406020:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406080__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_4060c0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_404740:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404bd0__Z13verify_sortedIPdEvT_S1_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404bd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_404c20__ZN9benchmark9is_sortedIPdEEbT_S2__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #10
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %.v, %65
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_404c10, label %block_404bf5

block_404bf5:                                     ; preds = %block_404bd0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %76 = add i64 %73, -17653
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_404c10

block_404c10:                                     ; preds = %block_404bf5, %block_404bd0
  %88 = phi i64 [ %73, %block_404bd0 ], [ %.pre, %block_404bf5 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_404bd0 ], [ %81, %block_404bf5 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #10
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_402db0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402db0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %5, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %8, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, 1256
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_4032b0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -32
  %61 = load i64, i64* %RAX, align 8
  %62 = add i64 %58, 11
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %63, align 8
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = ashr i64 %69, 63
  store i64 %70, i64* %RDX, align 8, !tbaa !2428
  %71 = load i64, i64* %RCX, align 8
  %72 = add i64 %66, 9
  store i64 %72, i64* %PC, align 8
  %73 = sext i64 %71 to i128
  %74 = and i128 %73, -18446744073709551616
  %75 = zext i64 %70 to i128
  %76 = shl nuw i128 %75, 64
  %77 = zext i64 %69 to i128
  %78 = or i128 %76, %77
  %79 = zext i64 %71 to i128
  %80 = or i128 %74, %79
  %81 = sdiv i128 %78, %80
  %82 = trunc i128 %81 to i64
  %83 = and i128 %81, 18446744073709551615
  %84 = sext i64 %82 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = or i128 %85, %83
  %87 = icmp eq i128 %81, %86
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %block_402db0
  %89 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %72, %struct.Memory* %57) #13
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:90:                                     ; preds = %block_402db0
  %91 = srem i128 %78, %80
  %92 = trunc i128 %91 to i64
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  store i64 %92, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %90, %88
  %93 = phi i64 [ %.pre7, %88 ], [ %64, %90 ]
  %94 = phi i64 [ %.pre6, %88 ], [ %72, %90 ]
  %95 = phi i64 [ %.pre, %88 ], [ %82, %90 ]
  %96 = phi %struct.Memory* [ %89, %88 ], [ %57, %90 ]
  %97 = add i64 %95, -1
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = icmp eq i64 %95, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %12, align 1, !tbaa !2432
  %100 = trunc i64 %97 to i32
  %101 = and i32 %100, 255
  %102 = tail call i32 @llvm.ctpop.i32(i32 %101) #10
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  store i8 %105, i8* %19, align 1, !tbaa !2446
  %106 = xor i64 %97, %95
  %107 = lshr i64 %106, 4
  %108 = trunc i64 %107 to i8
  %109 = and i8 %108, 1
  store i8 %109, i8* %25, align 1, !tbaa !2447
  %110 = icmp eq i64 %97, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %28, align 1, !tbaa !2448
  %112 = lshr i64 %97, 63
  %113 = trunc i64 %112 to i8
  store i8 %113, i8* %31, align 1, !tbaa !2449
  %114 = lshr i64 %95, 63
  %115 = xor i64 %112, %114
  %116 = add nuw nsw i64 %115, %114
  %117 = icmp eq i64 %116, 2
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %37, align 1, !tbaa !2450
  %119 = add i64 %93, -24
  %120 = add i64 %94, 8
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %97, i64* %121, align 8
  %122 = bitcast i64* %RAX to i64**
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %125 = bitcast i64* %124 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_402def

block_402ef2:                                     ; preds = %block_402e5e
  %126 = load i64, i64* %RSP, align 8
  %127 = add i64 %126, 112
  store i64 %127, i64* %RSP, align 8, !tbaa !2428
  %128 = icmp ugt i64 %126, -113
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %12, align 1, !tbaa !2432
  %130 = trunc i64 %127 to i32
  %131 = and i32 %130, 255
  %132 = tail call i32 @llvm.ctpop.i32(i32 %131) #10
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* %19, align 1, !tbaa !2446
  %136 = xor i64 %126, 16
  %137 = xor i64 %136, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %25, align 1, !tbaa !2447
  %141 = icmp eq i64 %127, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %28, align 1, !tbaa !2448
  %143 = lshr i64 %127, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %31, align 1, !tbaa !2449
  %145 = lshr i64 %126, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %37, align 1, !tbaa !2450
  %150 = add i64 %338, 5
  store i64 %150, i64* %PC, align 8
  %151 = add i64 %126, 120
  %152 = inttoptr i64 %127 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RBP, align 8, !tbaa !2428
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %338, 6
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %157 = add i64 %126, 128
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %96

block_402dfa:                                     ; preds = %block_402def
  %158 = add i64 %264, -8
  store i64 %158, i64* %RDI, align 8, !tbaa !2428
  %159 = add i64 %280, 8
  store i64 %159, i64* %PC, align 8
  %160 = load i64, i64* %267, align 8
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = add i64 %280, 1254
  %162 = add i64 %280, 13
  %163 = load i64, i64* %RSP, align 8, !tbaa !2428
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165, align 8
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %166 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %161, %struct.Memory* %96)
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -48
  %169 = load i64, i64* %PC, align 8
  store i64 %168, i64* %RDI, align 8, !tbaa !2428
  %170 = load i64, i64* %RAX, align 8
  %171 = add i64 %169, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %168 to i64*
  store i64 %170, i64* %172, align 8
  %173 = load i64, i64* %PC, align 8
  %174 = add i64 %173, 641
  %175 = add i64 %173, 5
  %176 = load i64, i64* %RSP, align 8, !tbaa !2428
  %177 = add i64 %176, -8
  %178 = inttoptr i64 %177 to i64*
  store i64 %175, i64* %178, align 8
  store i64 %177, i64* %RSP, align 8, !tbaa !2428
  store i64 %174, i64* %PC, align 8, !tbaa !2428
  %179 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %174, %struct.Memory* %96)
  %180 = load i64*, i64** %122, align 8
  %181 = load i64, i64* %PC, align 8
  %182 = add i64 %181, 3
  store i64 %182, i64* %PC, align 8
  %183 = load i64, i64* %180, align 8
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = load i64, i64* %RBP, align 8
  %185 = add i64 %184, -40
  %186 = add i64 %181, 7
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %185 to i64*
  store i64 %183, i64* %187, align 8
  %188 = load i64, i64* %RBP, align 8
  %189 = add i64 %188, -32
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %189 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RDI, align 8, !tbaa !2428
  %194 = add i64 %188, -8
  %195 = add i64 %190, 8
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = add i64 %188, -56
  %199 = add i64 %190, 12
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -24
  %203 = load i64, i64* %PC, align 8
  %204 = add i64 %203, 4
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %202 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RDX, align 8, !tbaa !2428
  %207 = add i64 %201, -40
  %208 = add i64 %203, 8
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %201, -64
  %212 = add i64 %203, 12
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to i64*
  store i64 %210, i64* %213, align 8
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -56
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218, align 8
  store i64 %219, i64* %RSI, align 8, !tbaa !2428
  %220 = add i64 %214, -64
  %221 = add i64 %216, 9
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %220 to i64*
  %223 = load i64, i64* %222, align 8
  store i64 %223, i64* %123, align 1, !tbaa !2451
  store double 0.000000e+00, double* %125, align 1, !tbaa !2451
  %224 = add i64 %216, 1245
  %225 = add i64 %216, 14
  %226 = load i64, i64* %RSP, align 8, !tbaa !2428
  %227 = add i64 %226, -8
  %228 = inttoptr i64 %227 to i64*
  store i64 %225, i64* %228, align 8
  store i64 %227, i64* %RSP, align 8, !tbaa !2428
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  %229 = tail call %struct.Memory* @sub_403310__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %224, %struct.Memory* %96)
  %230 = load i64, i64* %RBP, align 8
  %231 = add i64 %230, -24
  %232 = load i64, i64* %PC, align 8
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %231 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = add i64 %235, -1
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = icmp ne i64 %235, 0
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %12, align 1, !tbaa !2432
  %239 = trunc i64 %236 to i32
  %240 = and i32 %239, 255
  %241 = tail call i32 @llvm.ctpop.i32(i32 %240) #10
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  %244 = xor i8 %243, 1
  store i8 %244, i8* %19, align 1, !tbaa !2446
  %245 = xor i64 %235, 16
  %246 = xor i64 %245, %236
  %247 = lshr i64 %246, 4
  %248 = trunc i64 %247 to i8
  %249 = and i8 %248, 1
  store i8 %249, i8* %25, align 1, !tbaa !2447
  %250 = icmp eq i64 %236, 0
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %28, align 1, !tbaa !2448
  %252 = lshr i64 %236, 63
  %253 = trunc i64 %252 to i8
  store i8 %253, i8* %31, align 1, !tbaa !2449
  %254 = lshr i64 %235, 63
  %255 = xor i64 %252, %254
  %256 = xor i64 %252, 1
  %257 = add nuw nsw i64 %255, %256
  %258 = icmp eq i64 %257, 2
  %259 = zext i1 %258 to i8
  store i8 %259, i8* %37, align 1, !tbaa !2450
  %260 = add i64 %232, 12
  store i64 %260, i64* %PC, align 8
  store i64 %236, i64* %234, align 8
  %261 = load i64, i64* %PC, align 8
  %262 = add i64 %261, -94
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br label %block_402def

block_402def:                                     ; preds = %block_402dfa, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %263 = phi i64 [ %262, %block_402dfa ], [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %264 = load i64, i64* %RBP, align 8
  %265 = add i64 %264, -24
  %266 = add i64 %263, 5
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i64*
  %268 = load i64, i64* %267, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %269 = trunc i64 %268 to i32
  %270 = and i32 %269, 255
  %271 = tail call i32 @llvm.ctpop.i32(i32 %270) #10
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  store i8 %274, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %275 = icmp eq i64 %268, 0
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %28, align 1, !tbaa !2448
  %277 = lshr i64 %268, 63
  %278 = trunc i64 %277 to i8
  store i8 %278, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %279 = icmp ne i8 %278, 0
  %.v = select i1 %279, i64 94, i64 6
  %280 = add i64 %.v, %266
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  br i1 %279, label %block_402e52, label %block_402dfa

block_402e52:                                     ; preds = %block_402def
  %281 = add i64 %264, -32
  %282 = add i64 %280, 4
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %281 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = add i64 %284, -1
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = icmp eq i64 %284, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %12, align 1, !tbaa !2432
  %288 = trunc i64 %285 to i32
  %289 = and i32 %288, 255
  %290 = tail call i32 @llvm.ctpop.i32(i32 %289) #10
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  store i8 %293, i8* %19, align 1, !tbaa !2446
  %294 = xor i64 %285, %284
  %295 = lshr i64 %294, 4
  %296 = trunc i64 %295 to i8
  %297 = and i8 %296, 1
  store i8 %297, i8* %25, align 1, !tbaa !2447
  %298 = icmp eq i64 %285, 0
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %28, align 1, !tbaa !2448
  %300 = lshr i64 %285, 63
  %301 = trunc i64 %300 to i8
  store i8 %301, i8* %31, align 1, !tbaa !2449
  %302 = lshr i64 %284, 63
  %303 = xor i64 %300, %302
  %304 = add nuw nsw i64 %303, %302
  %305 = icmp eq i64 %304, 2
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %37, align 1, !tbaa !2450
  %307 = add i64 %280, 12
  store i64 %307, i64* %PC, align 8
  store i64 %285, i64* %267, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_402e5e

block_402e5e:                                     ; preds = %block_402e69, %block_402e52
  %308 = phi i64 [ %489, %block_402e69 ], [ %.pre9, %block_402e52 ]
  %309 = load i64, i64* %RBP, align 8
  %310 = add i64 %309, -24
  %311 = add i64 %308, 5
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i64*
  %313 = load i64, i64* %312, align 8
  %314 = add i64 %313, -1
  %315 = icmp eq i64 %313, 0
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %12, align 1, !tbaa !2432
  %317 = trunc i64 %314 to i32
  %318 = and i32 %317, 255
  %319 = tail call i32 @llvm.ctpop.i32(i32 %318) #10
  %320 = trunc i32 %319 to i8
  %321 = and i8 %320, 1
  %322 = xor i8 %321, 1
  store i8 %322, i8* %19, align 1, !tbaa !2446
  %323 = xor i64 %314, %313
  %324 = lshr i64 %323, 4
  %325 = trunc i64 %324 to i8
  %326 = and i8 %325, 1
  store i8 %326, i8* %25, align 1, !tbaa !2447
  %327 = icmp eq i64 %314, 0
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %28, align 1, !tbaa !2448
  %329 = lshr i64 %314, 63
  %330 = trunc i64 %329 to i8
  store i8 %330, i8* %31, align 1, !tbaa !2449
  %331 = lshr i64 %313, 63
  %332 = xor i64 %329, %331
  %333 = add nuw nsw i64 %332, %331
  %334 = icmp eq i64 %333, 2
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %37, align 1, !tbaa !2450
  %336 = icmp ne i8 %330, 0
  %337 = xor i1 %336, %334
  %.v10 = select i1 %337, i64 148, i64 11
  %338 = add i64 %.v10, %308
  store i64 %338, i64* %PC, align 8, !tbaa !2428
  br i1 %337, label %block_402ef2, label %block_402e69

block_402e69:                                     ; preds = %block_402e5e
  %339 = add i64 %309, -8
  store i64 %339, i64* %RDI, align 8, !tbaa !2428
  %340 = add i64 %338, 8
  store i64 %340, i64* %PC, align 8
  %341 = load i64, i64* %312, align 8
  store i64 %341, i64* %RSI, align 8, !tbaa !2428
  %342 = add i64 %338, 1143
  %343 = add i64 %338, 13
  %344 = load i64, i64* %RSP, align 8, !tbaa !2428
  %345 = add i64 %344, -8
  %346 = inttoptr i64 %345 to i64*
  store i64 %343, i64* %346, align 8
  store i64 %345, i64* %RSP, align 8, !tbaa !2428
  store i64 %342, i64* %PC, align 8, !tbaa !2428
  %347 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %342, %struct.Memory* %96)
  %348 = load i64, i64* %RBP, align 8
  %349 = add i64 %348, -80
  %350 = load i64, i64* %PC, align 8
  store i64 %349, i64* %RDI, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX, align 8
  %352 = add i64 %350, 8
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %349 to i64*
  store i64 %351, i64* %353, align 8
  %354 = load i64, i64* %PC, align 8
  %355 = add i64 %354, 530
  %356 = add i64 %354, 5
  %357 = load i64, i64* %RSP, align 8, !tbaa !2428
  %358 = add i64 %357, -8
  %359 = inttoptr i64 %358 to i64*
  store i64 %356, i64* %359, align 8
  store i64 %358, i64* %RSP, align 8, !tbaa !2428
  store i64 %355, i64* %PC, align 8, !tbaa !2428
  %360 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %355, %struct.Memory* %96)
  %361 = load i64, i64* %RBP, align 8
  %362 = add i64 %361, -8
  %363 = load i64, i64* %PC, align 8
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %364 = load i64*, i64** %122, align 8
  %365 = add i64 %363, 7
  store i64 %365, i64* %PC, align 8
  %366 = load i64, i64* %364, align 8
  store i64 %366, i64* %RAX, align 8, !tbaa !2428
  %367 = add i64 %361, -72
  %368 = add i64 %363, 11
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %367 to i64*
  store i64 %366, i64* %369, align 8
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 514
  %372 = add i64 %370, 5
  %373 = load i64, i64* %RSP, align 8, !tbaa !2428
  %374 = add i64 %373, -8
  %375 = inttoptr i64 %374 to i64*
  store i64 %372, i64* %375, align 8
  store i64 %374, i64* %RSP, align 8, !tbaa !2428
  store i64 %371, i64* %PC, align 8, !tbaa !2428
  %376 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %371, %struct.Memory* %96)
  %377 = load i64, i64* %RBP, align 8
  %378 = add i64 %377, -8
  %379 = load i64, i64* %PC, align 8
  store i64 %378, i64* %RDI, align 8, !tbaa !2428
  %380 = add i64 %377, -24
  %381 = add i64 %379, 8
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %380 to i64*
  %383 = load i64, i64* %382, align 8
  store i64 %383, i64* %RSI, align 8, !tbaa !2428
  %384 = add i64 %377, -112
  %385 = load i64, i64* %RAX, align 8
  %386 = add i64 %379, 12
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %384 to i64*
  store i64 %385, i64* %387, align 8
  %388 = load i64, i64* %PC, align 8
  %389 = add i64 %388, 1089
  %390 = add i64 %388, 5
  %391 = load i64, i64* %RSP, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %390, i64* %393, align 8
  store i64 %392, i64* %RSP, align 8, !tbaa !2428
  store i64 %389, i64* %PC, align 8, !tbaa !2428
  %394 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %389, %struct.Memory* %96)
  %395 = load i64, i64* %RBP, align 8
  %396 = add i64 %395, -88
  %397 = load i64, i64* %PC, align 8
  store i64 %396, i64* %RDI, align 8, !tbaa !2428
  %398 = load i64, i64* %RAX, align 8
  %399 = add i64 %397, 8
  store i64 %399, i64* %PC, align 8
  %400 = inttoptr i64 %396 to i64*
  store i64 %398, i64* %400, align 8
  %401 = load i64, i64* %PC, align 8
  %402 = add i64 %401, 484
  %403 = add i64 %401, 5
  %404 = load i64, i64* %RSP, align 8, !tbaa !2428
  %405 = add i64 %404, -8
  %406 = inttoptr i64 %405 to i64*
  store i64 %403, i64* %406, align 8
  store i64 %405, i64* %RSP, align 8, !tbaa !2428
  store i64 %402, i64* %PC, align 8, !tbaa !2428
  %407 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %402, %struct.Memory* %96)
  %408 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %19, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %409 = load i64, i64* %RBP, align 8
  %410 = add i64 %409, -112
  %411 = add i64 %408, 8
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %410 to i64*
  %413 = load i64, i64* %412, align 8
  store i64 %413, i64* %RSI, align 8, !tbaa !2428
  %414 = add i64 %408, 11
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %413 to i64*
  %416 = load i64, i64* %415, align 8
  store i64 %416, i64* %RDI, align 8, !tbaa !2428
  %417 = load i64*, i64** %122, align 8
  %418 = add i64 %408, 14
  store i64 %418, i64* %PC, align 8
  store i64 %416, i64* %417, align 8
  %419 = load i64, i64* %RBP, align 8
  %420 = add i64 %419, -24
  %421 = load i64, i64* %PC, align 8
  %422 = add i64 %421, 4
  store i64 %422, i64* %PC, align 8
  %423 = inttoptr i64 %420 to i64*
  %424 = load i64, i64* %423, align 8
  store i64 %424, i64* %RDI, align 8, !tbaa !2428
  %425 = add i64 %419, -8
  %426 = add i64 %421, 8
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to i64*
  %428 = load i64, i64* %427, align 8
  store i64 %428, i64* %RAX, align 8, !tbaa !2428
  %429 = add i64 %419, -96
  %430 = add i64 %421, 12
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %429 to i64*
  store i64 %428, i64* %431, align 8
  %432 = load i64, i64* %RBP, align 8
  %433 = add i64 %432, -72
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 4
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %433 to i64*
  %437 = load i64, i64* %436, align 8
  store i64 %437, i64* %RAX, align 8, !tbaa !2428
  %438 = add i64 %432, -104
  %439 = add i64 %434, 8
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %438 to i64*
  store i64 %437, i64* %440, align 8
  %441 = load i64, i64* %RBP, align 8
  %442 = add i64 %441, -96
  %443 = load i64, i64* %PC, align 8
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445, align 8
  store i64 %446, i64* %RSI, align 8, !tbaa !2428
  %447 = add i64 %441, -104
  %448 = add i64 %443, 9
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %447 to i64*
  %450 = load i64, i64* %449, align 8
  store i64 %450, i64* %123, align 1, !tbaa !2451
  store double 0.000000e+00, double* %125, align 1, !tbaa !2451
  %451 = add i64 %443, 1085
  %452 = add i64 %443, 14
  %453 = load i64, i64* %RSP, align 8, !tbaa !2428
  %454 = add i64 %453, -8
  %455 = inttoptr i64 %454 to i64*
  store i64 %452, i64* %455, align 8
  store i64 %454, i64* %RSP, align 8, !tbaa !2428
  store i64 %451, i64* %PC, align 8, !tbaa !2428
  %456 = tail call %struct.Memory* @sub_403310__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %451, %struct.Memory* %96)
  %457 = load i64, i64* %RBP, align 8
  %458 = add i64 %457, -24
  %459 = load i64, i64* %PC, align 8
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461, align 8
  %463 = add i64 %462, -1
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = icmp ne i64 %462, 0
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %12, align 1, !tbaa !2432
  %466 = trunc i64 %463 to i32
  %467 = and i32 %466, 255
  %468 = tail call i32 @llvm.ctpop.i32(i32 %467) #10
  %469 = trunc i32 %468 to i8
  %470 = and i8 %469, 1
  %471 = xor i8 %470, 1
  store i8 %471, i8* %19, align 1, !tbaa !2446
  %472 = xor i64 %462, 16
  %473 = xor i64 %472, %463
  %474 = lshr i64 %473, 4
  %475 = trunc i64 %474 to i8
  %476 = and i8 %475, 1
  store i8 %476, i8* %25, align 1, !tbaa !2447
  %477 = icmp eq i64 %463, 0
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %28, align 1, !tbaa !2448
  %479 = lshr i64 %463, 63
  %480 = trunc i64 %479 to i8
  store i8 %480, i8* %31, align 1, !tbaa !2449
  %481 = lshr i64 %462, 63
  %482 = xor i64 %479, %481
  %483 = xor i64 %479, 1
  %484 = add nuw nsw i64 %482, %483
  %485 = icmp eq i64 %484, 2
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %37, align 1, !tbaa !2450
  %487 = add i64 %459, 12
  store i64 %487, i64* %PC, align 8
  store i64 %463, i64* %461, align 8
  %488 = load i64, i64* %PC, align 8
  %489 = add i64 %488, -143
  store i64 %489, i64* %PC, align 8, !tbaa !2428
  br label %block_402e5e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4045b0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4045b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_404610__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__renamed_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #10
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2446
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %.v, %84
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_404600, label %block_4045e5

block_4045e5:                                     ; preds = %block_4045b0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %95 = add i64 %92, -16101
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_404600

block_404600:                                     ; preds = %block_4045e5, %block_4045b0
  %107 = phi i64 [ %92, %block_4045b0 ], [ %.pre, %block_4045e5 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_4045b0 ], [ %100, %block_4045e5 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #10
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2446
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2450
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4052f0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4052f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2432
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #10
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2446
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2447
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406200__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406200:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406260__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_4062a0__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403cb0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403cb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = icmp eq i64 %28, %35
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = xor i1 %39, true
  store i8 0, i8* %36, align 1, !tbaa !2432
  %44 = zext i1 %43 to i32
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #10
  %46 = trunc i32 %45 to i8
  %47 = xor i8 %46, 1
  store i8 %47, i8* %37, align 1, !tbaa !2446
  %48 = zext i1 %39 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2447
  %49 = zext i1 %43 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406420__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406420:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -24
  %39 = add i64 %8, 12
  store i64 %39, i64* %PC, align 8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %41 = load i64, i64* %40, align 1
  %42 = inttoptr i64 %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RDI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RSI, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_406435

block_406435:                                     ; preds = %block_406443, %block_406420
  %55 = phi i64 [ %142, %block_406443 ], [ %.pre, %block_406420 ]
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -24
  %58 = add i64 %55, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RAX, align 8, !tbaa !2428
  %61 = add i64 %56, -32
  %62 = add i64 %55, 8
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %60, %64
  %66 = icmp ult i64 %60, %64
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %12, align 1, !tbaa !2432
  %68 = trunc i64 %65 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #10
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %19, align 1, !tbaa !2446
  %74 = xor i64 %64, %60
  %75 = xor i64 %74, %65
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %25, align 1, !tbaa !2447
  %79 = icmp eq i64 %65, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %28, align 1, !tbaa !2448
  %81 = lshr i64 %65, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %31, align 1, !tbaa !2449
  %83 = lshr i64 %60, 63
  %84 = lshr i64 %64, 63
  %85 = xor i64 %84, %83
  %86 = xor i64 %81, %83
  %87 = add nuw nsw i64 %86, %85
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %37, align 1, !tbaa !2450
  %.v = select i1 %79, i64 59, i64 14
  %90 = add i64 %.v, %55
  %91 = add i64 %56, -16
  %92 = add i64 %90, 4
  store i64 %92, i64* %PC, align 8
  br i1 %79, label %block_406470, label %block_406443

block_406443:                                     ; preds = %block_406435
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %93 = add i64 %90, 8
  store i64 %93, i64* %PC, align 8
  %94 = load i64, i64* %59, align 8
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = add i64 %94, 8
  store i64 %95, i64* %RCX, align 8, !tbaa !2428
  %96 = icmp ugt i64 %94, -9
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %12, align 1, !tbaa !2432
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #10
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %19, align 1, !tbaa !2446
  %104 = xor i64 %95, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %25, align 1, !tbaa !2447
  %108 = icmp eq i64 %95, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %28, align 1, !tbaa !2448
  %110 = lshr i64 %95, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %31, align 1, !tbaa !2449
  %112 = lshr i64 %94, 63
  %113 = xor i64 %110, %112
  %114 = add nuw nsw i64 %113, %110
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %37, align 1, !tbaa !2450
  %117 = add i64 %90, 19
  store i64 %117, i64* %PC, align 8
  store i64 %95, i64* %59, align 8
  %118 = load i64, i64* %RAX, align 8
  %119 = load i64, i64* %PC, align 8
  store i64 %118, i64* %RSI, align 8, !tbaa !2428
  %120 = add i64 %119, -406
  %121 = add i64 %119, 8
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_4062c0__ZplIdE12ValueWrapperIT_ERKS2_S4__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -40
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 5
  store i64 %129, i64* %PC, align 8
  %130 = load i64, i64* %40, align 1
  %131 = inttoptr i64 %127 to i64*
  store i64 %130, i64* %131, align 8
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -40
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %132, -16
  %139 = add i64 %134, 8
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %137, i64* %140, align 8
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, -54
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  br label %block_406435

block_406470:                                     ; preds = %block_406435
  %143 = inttoptr i64 %91 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RAX, align 8, !tbaa !2428
  %145 = add i64 %56, -8
  %146 = add i64 %90, 8
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %144, i64* %147, align 8
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -8
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %40, align 1, !tbaa !2451
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %155 = bitcast i64* %154 to double*
  store double 0.000000e+00, double* %155, align 1, !tbaa !2451
  %156 = load i64, i64* %RSP, align 8
  %157 = add i64 %156, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  %158 = icmp ugt i64 %156, -49
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %12, align 1, !tbaa !2432
  %160 = trunc i64 %157 to i32
  %161 = and i32 %160, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #10
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %19, align 1, !tbaa !2446
  %166 = xor i64 %156, 16
  %167 = xor i64 %166, %157
  %168 = lshr i64 %167, 4
  %169 = trunc i64 %168 to i8
  %170 = and i8 %169, 1
  store i8 %170, i8* %25, align 1, !tbaa !2447
  %171 = icmp eq i64 %157, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %28, align 1, !tbaa !2448
  %173 = lshr i64 %157, 63
  %174 = trunc i64 %173 to i8
  store i8 %174, i8* %31, align 1, !tbaa !2449
  %175 = lshr i64 %156, 63
  %176 = xor i64 %173, %175
  %177 = add nuw nsw i64 %176, %173
  %178 = icmp eq i64 %177, 2
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %37, align 1, !tbaa !2450
  %180 = add i64 %150, 10
  store i64 %180, i64* %PC, align 8
  %181 = add i64 %156, 56
  %182 = inttoptr i64 %157 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RBP, align 8, !tbaa !2428
  store i64 %181, i64* %RSP, align 8, !tbaa !2428
  %184 = add i64 %150, 11
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %181 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %PC, align 8, !tbaa !2428
  %187 = add i64 %156, 64
  store i64 %187, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4036f0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4036f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_403740__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #10
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %.v, %65
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_403730, label %block_403715

block_403715:                                     ; preds = %block_4036f0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %76 = add i64 %73, -12309
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_403730

block_403730:                                     ; preds = %block_403715, %block_4036f0
  %88 = phi i64 [ %73, %block_4036f0 ], [ %.pre, %block_403715 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_4036f0 ], [ %81, %block_403715 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #10
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009c0___cxx_global_var_init_17(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4009c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dMPe_type* @dMPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4703
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c20__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_403ce0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401e40__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401e40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = add i64 %9, 8
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %10 to i64*
  store i64 %13, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RDI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %RSI, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %33 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_401e51

block_401e5f:                                     ; preds = %block_401e51
  %34 = add i64 %113, 4
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %82, align 8
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  store i64 %36, i64* %RCX, align 8, !tbaa !2428
  %37 = icmp ugt i64 %35, -9
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %27, align 1, !tbaa !2432
  %39 = trunc i64 %36 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #10
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %28, align 1, !tbaa !2446
  %45 = xor i64 %36, %35
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %29, align 1, !tbaa !2447
  %49 = icmp eq i64 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %30, align 1, !tbaa !2448
  %51 = lshr i64 %36, 63
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %31, align 1, !tbaa !2449
  %53 = lshr i64 %35, 63
  %54 = xor i64 %51, %53
  %55 = add nuw nsw i64 %54, %51
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %32, align 1, !tbaa !2450
  %58 = add i64 %113, 15
  store i64 %58, i64* %PC, align 8
  store i64 %36, i64* %82, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -8
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RCX, align 8, !tbaa !2428
  %65 = load i64*, i64** %33, align 8
  %66 = add i64 %61, 7
  store i64 %66, i64* %PC, align 8
  store i64 %64, i64* %65, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, -36
  store i64 %68, i64* %PC, align 8, !tbaa !2428
  br label %block_401e51

block_401e7a:                                     ; preds = %block_401e51
  %69 = add i64 %113, 1
  store i64 %69, i64* %PC, align 8
  %70 = load i64, i64* %5, align 8, !tbaa !2428
  %71 = add i64 %70, 8
  %72 = inttoptr i64 %70 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %RBP, align 8, !tbaa !2428
  store i64 %71, i64* %5, align 8, !tbaa !2428
  %74 = add i64 %113, 2
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %71 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %77 = add i64 %70, 16
  store i64 %77, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401e51:                                     ; preds = %block_401e5f, %block_401e40
  %78 = phi i64 [ %68, %block_401e5f ], [ %.pre, %block_401e40 ]
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = add i64 %78, 4
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = add i64 %79, -24
  %85 = add i64 %78, 8
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %83, %87
  %89 = icmp ult i64 %83, %87
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %27, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #10
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %28, align 1, !tbaa !2446
  %97 = xor i64 %87, %83
  %98 = xor i64 %97, %88
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %29, align 1, !tbaa !2447
  %102 = icmp eq i64 %88, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2448
  %104 = lshr i64 %88, 63
  %105 = trunc i64 %104 to i8
  store i8 %105, i8* %31, align 1, !tbaa !2449
  %106 = lshr i64 %83, 63
  %107 = lshr i64 %87, 63
  %108 = xor i64 %107, %106
  %109 = xor i64 %104, %106
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %32, align 1, !tbaa !2450
  %.v = select i1 %102, i64 41, i64 14
  %113 = add i64 %.v, %78
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br i1 %102, label %block_401e7a, label %block_401e5f
}

; Function Attrs: noinline
define %struct.Memory* @sub_401e80__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401e80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %PC, align 8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %53 = load i64, i64* %52, align 1
  %54 = inttoptr i64 %49 to i64*
  store i64 %53, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401ea0

block_401eb0:                                     ; preds = %block_401ea0
  %68 = add i64 %126, -8
  %69 = add i64 %159, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RDI, align 8, !tbaa !2428
  %72 = add i64 %126, -16
  %73 = add i64 %159, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  %76 = add i64 %126, -24
  %77 = add i64 %159, 13
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %52, align 1, !tbaa !2451
  store double 0.000000e+00, double* %67, align 1, !tbaa !2451
  %80 = add i64 %159, 18000
  %81 = add i64 %159, 18
  %82 = load i64, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %85 = tail call %struct.Memory* @sub_406500__ZN9benchmark10accumulateIPddEET0_T_S3_S2__renamed_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 16190
  %88 = add i64 %86, 5
  %89 = load i64, i64* %RSP, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91, align 8
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %92 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %2)
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -36
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = add i32 %98, 1
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = icmp eq i32 %98, -1
  %102 = icmp eq i32 %99, 0
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %12, align 1, !tbaa !2432
  %105 = and i32 %99, 255
  %106 = tail call i32 @llvm.ctpop.i32(i32 %105) #10
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  store i8 %109, i8* %19, align 1, !tbaa !2446
  %110 = xor i32 %99, %98
  %111 = lshr i32 %110, 4
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  store i8 %113, i8* %25, align 1, !tbaa !2447
  %114 = zext i1 %102 to i8
  store i8 %114, i8* %28, align 1, !tbaa !2448
  %115 = lshr i32 %99, 31
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %31, align 1, !tbaa !2449
  %117 = lshr i32 %98, 31
  %118 = xor i32 %115, %117
  %119 = add nuw nsw i32 %118, %115
  %120 = icmp eq i32 %119, 2
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %37, align 1, !tbaa !2450
  %122 = add i64 %95, 9
  store i64 %122, i64* %PC, align 8
  store i32 %99, i32* %97, align 4
  %123 = load i64, i64* %PC, align 8
  %124 = add i64 %123, -48
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  br label %block_401ea0

block_401ea0:                                     ; preds = %block_401eb0, %block_401e80
  %125 = phi i64 [ %124, %block_401eb0 ], [ %.pre, %block_401e80 ]
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -36
  %128 = add i64 %125, 3
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %133 = sub i32 %130, %132
  %134 = icmp ult i32 %130, %132
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %12, align 1, !tbaa !2432
  %136 = and i32 %133, 255
  %137 = tail call i32 @llvm.ctpop.i32(i32 %136) #10
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  store i8 %140, i8* %19, align 1, !tbaa !2446
  %141 = xor i32 %132, %130
  %142 = xor i32 %141, %133
  %143 = lshr i32 %142, 4
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %25, align 1, !tbaa !2447
  %146 = icmp eq i32 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %28, align 1, !tbaa !2448
  %148 = lshr i32 %133, 31
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %31, align 1, !tbaa !2449
  %150 = lshr i32 %130, 31
  %151 = lshr i32 %132, 31
  %152 = xor i32 %151, %150
  %153 = xor i32 %148, %150
  %154 = add nuw nsw i32 %153, %152
  %155 = icmp eq i32 %154, 2
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %37, align 1, !tbaa !2450
  %157 = icmp ne i8 %149, 0
  %158 = xor i1 %157, %155
  %.v = select i1 %158, i64 16, i64 53
  %159 = add i64 %.v, %125
  store i64 %159, i64* %PC, align 8, !tbaa !2428
  br i1 %158, label %block_401eb0, label %block_401ed5

block_401ed5:                                     ; preds = %block_401ea0
  %160 = load i64, i64* %RSP, align 8
  %161 = add i64 %160, 48
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  %162 = icmp ugt i64 %160, -49
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %12, align 1, !tbaa !2432
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #10
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %19, align 1, !tbaa !2446
  %170 = xor i64 %160, 16
  %171 = xor i64 %170, %161
  %172 = lshr i64 %171, 4
  %173 = trunc i64 %172 to i8
  %174 = and i8 %173, 1
  store i8 %174, i8* %25, align 1, !tbaa !2447
  %175 = icmp eq i64 %161, 0
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %28, align 1, !tbaa !2448
  %177 = lshr i64 %161, 63
  %178 = trunc i64 %177 to i8
  store i8 %178, i8* %31, align 1, !tbaa !2449
  %179 = lshr i64 %160, 63
  %180 = xor i64 %177, %179
  %181 = add nuw nsw i64 %180, %177
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %37, align 1, !tbaa !2450
  %184 = add i64 %159, 5
  store i64 %184, i64* %PC, align 8
  %185 = add i64 %160, 56
  %186 = inttoptr i64 %161 to i64*
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %RBP, align 8, !tbaa !2428
  store i64 %185, i64* %RSP, align 8, !tbaa !2428
  %188 = add i64 %159, 6
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %185 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %PC, align 8, !tbaa !2428
  %191 = add i64 %160, 64
  store i64 %191, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cc0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401cc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401ce0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402690__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402690:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4026b8

block_402739:                                     ; preds = %block_4026b8
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4026c8:                                     ; preds = %block_4026b8
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 7440
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043f0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 11583
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405440__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 7826
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_4045b0__Z13verify_sortedI14PointerWrapperIdEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_4026b8

block_4026b8:                                     ; preds = %block_4026c8, %block_402690
  %255 = phi i64 [ %254, %block_4026c8 ], [ %.pre, %block_402690 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_4026c8, label %block_402739
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4035a0__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4035a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = bitcast i64* %RAX to i64**
  %33 = bitcast i64* %RCX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_4035b0

block_4035e7:                                     ; preds = %block_4035b0
  %34 = add i64 %78, 1
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %78, 2
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4035b0:                                     ; preds = %block_4035be, %block_4035a0
  %43 = phi i64 [ %140, %block_4035be ], [ %.pre, %block_4035a0 ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = add i64 %44, -16
  %50 = add i64 %43, 8
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %48, %52
  %54 = icmp ult i64 %48, %52
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %26, align 1, !tbaa !2432
  %56 = trunc i64 %53 to i32
  %57 = and i32 %56, 255
  %58 = tail call i32 @llvm.ctpop.i32(i32 %57) #10
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 1
  %61 = xor i8 %60, 1
  store i8 %61, i8* %27, align 1, !tbaa !2446
  %62 = xor i64 %52, %48
  %63 = xor i64 %62, %53
  %64 = lshr i64 %63, 4
  %65 = trunc i64 %64 to i8
  %66 = and i8 %65, 1
  store i8 %66, i8* %28, align 1, !tbaa !2447
  %67 = icmp eq i64 %53, 0
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %29, align 1, !tbaa !2448
  %69 = lshr i64 %53, 63
  %70 = trunc i64 %69 to i8
  store i8 %70, i8* %30, align 1, !tbaa !2449
  %71 = lshr i64 %48, 63
  %72 = lshr i64 %52, 63
  %73 = xor i64 %72, %71
  %74 = xor i64 %69, %71
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %31, align 1, !tbaa !2450
  %.v = select i1 %67, i64 55, i64 14
  %78 = add i64 %.v, %43
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  br i1 %67, label %block_4035e7, label %block_4035be

block_4035be:                                     ; preds = %block_4035b0
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = load i64, i64* %47, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %80, 8
  store i64 %81, i64* %RCX, align 8, !tbaa !2428
  %82 = icmp ugt i64 %80, -9
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %26, align 1, !tbaa !2432
  %84 = trunc i64 %81 to i32
  %85 = and i32 %84, 255
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #10
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %27, align 1, !tbaa !2446
  %90 = xor i64 %81, %80
  %91 = lshr i64 %90, 4
  %92 = trunc i64 %91 to i8
  %93 = and i8 %92, 1
  store i8 %93, i8* %28, align 1, !tbaa !2447
  %94 = icmp eq i64 %81, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %29, align 1, !tbaa !2448
  %96 = lshr i64 %81, 63
  %97 = trunc i64 %96 to i8
  store i8 %97, i8* %30, align 1, !tbaa !2449
  %98 = lshr i64 %80, 63
  %99 = xor i64 %96, %98
  %100 = add nuw nsw i64 %99, %96
  %101 = icmp eq i64 %100, 2
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %31, align 1, !tbaa !2450
  %103 = add i64 %78, 15
  store i64 %103, i64* %PC, align 8
  store i64 %81, i64* %47, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -24
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RCX, align 8, !tbaa !2428
  %110 = add i64 %109, 8
  store i64 %110, i64* %RDX, align 8, !tbaa !2428
  %111 = icmp ugt i64 %109, -9
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %26, align 1, !tbaa !2432
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #10
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %27, align 1, !tbaa !2446
  %119 = xor i64 %110, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %28, align 1, !tbaa !2447
  %123 = icmp eq i64 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %110, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %30, align 1, !tbaa !2449
  %127 = lshr i64 %109, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %31, align 1, !tbaa !2450
  %132 = add i64 %106, 15
  store i64 %132, i64* %PC, align 8
  store i64 %110, i64* %108, align 8
  %133 = load i64*, i64** %32, align 8
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %133, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64*, i64** %33, align 8
  %138 = add i64 %134, 6
  store i64 %138, i64* %PC, align 8
  store i64 %136, i64* %137, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, -50
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  br label %block_4035b0
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f00__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405f00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405f20__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404ff0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404ff0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2432
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #10
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2446
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2447
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4031d0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4031d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403200__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403d00__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403d00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #10
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %23, %22
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2448
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2450
  store i64 %23, i64* %21, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = add i64 %16, 18
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %16, 19
  store i64 %56, i64* %PC, align 8
  %57 = load i64, i64* %5, align 8, !tbaa !2428
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  store i64 %58, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %16, 20
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %64 = add i64 %57, 16
  store i64 %64, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401ee0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401ee0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 5
  store i64 %50, i64* %PC, align 8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %52 = load i64, i64* %51, align 1
  %53 = inttoptr i64 %48 to i64*
  store i64 %52, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -36
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %66 = bitcast i64* %65 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401f00

block_401f10:                                     ; preds = %block_401f00
  %67 = add i64 %174, -8
  %68 = add i64 %207, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RAX, align 8, !tbaa !2428
  %71 = add i64 %174, -48
  %72 = add i64 %207, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to i64*
  store i64 %70, i64* %73, align 8
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -16
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %75 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %74, -56
  %81 = add i64 %76, 8
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 %79, i64* %82, align 8
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -24
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 5
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %51, align 1, !tbaa !2451
  store double 0.000000e+00, double* %66, align 1, !tbaa !2451
  %89 = add i64 %83, -48
  %90 = add i64 %85, 9
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %93 = add i64 %83, -56
  %94 = add i64 %85, 13
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  %97 = add i64 %85, 17776
  %98 = add i64 %85, 18
  %99 = load i64, i64* %RSP, align 8, !tbaa !2428
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 %98, i64* %101, align 8
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  store i64 %97, i64* %PC, align 8, !tbaa !2428
  %102 = tail call %struct.Memory* @sub_406490__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__renamed_(%struct.State* nonnull %0, i64 %97, %struct.Memory* %2)
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 16078
  %105 = add i64 %103, 5
  %106 = load i64, i64* %RSP, align 8, !tbaa !2428
  %107 = add i64 %106, -8
  %108 = inttoptr i64 %107 to i64*
  store i64 %105, i64* %108, align 8
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  store i64 %104, i64* %PC, align 8, !tbaa !2428
  %109 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %104, %struct.Memory* %2)
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -36
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 3
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  %117 = zext i32 %116 to i64
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = icmp eq i32 %115, -1
  %119 = icmp eq i32 %116, 0
  %120 = or i1 %118, %119
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %12, align 1, !tbaa !2432
  %122 = and i32 %116, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #10
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %19, align 1, !tbaa !2446
  %127 = xor i32 %116, %115
  %128 = lshr i32 %127, 4
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  store i8 %130, i8* %24, align 1, !tbaa !2447
  %131 = zext i1 %119 to i8
  store i8 %131, i8* %27, align 1, !tbaa !2448
  %132 = lshr i32 %116, 31
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %30, align 1, !tbaa !2449
  %134 = lshr i32 %115, 31
  %135 = xor i32 %132, %134
  %136 = add nuw nsw i32 %135, %132
  %137 = icmp eq i32 %136, 2
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %36, align 1, !tbaa !2450
  %139 = add i64 %112, 9
  store i64 %139, i64* %PC, align 8
  store i32 %116, i32* %114, align 4
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, -64
  store i64 %141, i64* %PC, align 8, !tbaa !2428
  br label %block_401f00

block_401f45:                                     ; preds = %block_401f00
  %142 = load i64, i64* %RSP, align 8
  %143 = add i64 %142, 64
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ugt i64 %142, -65
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %12, align 1, !tbaa !2432
  %146 = trunc i64 %143 to i32
  %147 = and i32 %146, 255
  %148 = tail call i32 @llvm.ctpop.i32(i32 %147) #10
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  store i8 %151, i8* %19, align 1, !tbaa !2446
  %152 = xor i64 %143, %142
  %153 = lshr i64 %152, 4
  %154 = trunc i64 %153 to i8
  %155 = and i8 %154, 1
  store i8 %155, i8* %24, align 1, !tbaa !2447
  %156 = icmp eq i64 %143, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %27, align 1, !tbaa !2448
  %158 = lshr i64 %143, 63
  %159 = trunc i64 %158 to i8
  store i8 %159, i8* %30, align 1, !tbaa !2449
  %160 = lshr i64 %142, 63
  %161 = xor i64 %158, %160
  %162 = add nuw nsw i64 %161, %158
  %163 = icmp eq i64 %162, 2
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %36, align 1, !tbaa !2450
  %165 = add i64 %207, 5
  store i64 %165, i64* %PC, align 8
  %166 = add i64 %142, 72
  %167 = inttoptr i64 %143 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %RBP, align 8, !tbaa !2428
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %207, 6
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %166 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  %172 = add i64 %142, 80
  store i64 %172, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401f00:                                     ; preds = %block_401f10, %block_401ee0
  %173 = phi i64 [ %141, %block_401f10 ], [ %.pre, %block_401ee0 ]
  %174 = load i64, i64* %RBP, align 8
  %175 = add i64 %174, -36
  %176 = add i64 %173, 3
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i64
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %181 = sub i32 %178, %180
  %182 = icmp ult i32 %178, %180
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %12, align 1, !tbaa !2432
  %184 = and i32 %181, 255
  %185 = tail call i32 @llvm.ctpop.i32(i32 %184) #10
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  %188 = xor i8 %187, 1
  store i8 %188, i8* %19, align 1, !tbaa !2446
  %189 = xor i32 %180, %178
  %190 = xor i32 %189, %181
  %191 = lshr i32 %190, 4
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  store i8 %193, i8* %24, align 1, !tbaa !2447
  %194 = icmp eq i32 %181, 0
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %27, align 1, !tbaa !2448
  %196 = lshr i32 %181, 31
  %197 = trunc i32 %196 to i8
  store i8 %197, i8* %30, align 1, !tbaa !2449
  %198 = lshr i32 %178, 31
  %199 = lshr i32 %180, 31
  %200 = xor i32 %199, %198
  %201 = xor i32 %196, %198
  %202 = add nuw nsw i32 %201, %200
  %203 = icmp eq i32 %202, 2
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %36, align 1, !tbaa !2450
  %205 = icmp ne i8 %197, 0
  %206 = xor i1 %205, %203
  %.v = select i1 %206, i64 16, i64 69
  %207 = add i64 %.v, %173
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  br i1 %206, label %block_401f10, label %block_401f45
}

; Function Attrs: noinline
define %struct.Memory* @sub_404610__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404610:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 17
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %28, -32
  %35 = add i64 %30, 8
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RAX, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i32, i32* %ECX, align 4
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = add i64 %38, 162
  %42 = add i64 %38, 10
  %43 = load i64, i64* %RSP, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %46 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %41, %struct.Memory* %2)
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -40
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = bitcast %union.anon* %3 to i64**
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %56 = bitcast i64* %55 to double*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast i64* %58 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40463c

block_404656:                                     ; preds = %block_40463c
  %60 = add i64 %218, -16
  store i64 %60, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %61 = add i64 %217, 122
  %62 = add i64 %217, 11
  %63 = load i64, i64* %RSP, align 8, !tbaa !2428
  %64 = add i64 %63, -8
  %65 = inttoptr i64 %64 to i64*
  store i64 %62, i64* %65, align 8
  store i64 %64, i64* %RSP, align 8, !tbaa !2428
  store i64 %61, i64* %PC, align 8, !tbaa !2428
  %66 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %61, %struct.Memory* %MEMORY.1)
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %PC, align 8
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %70 = load i64, i64* %RAX, align 8
  %71 = add i64 %69, 8
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %70, i64* %72, align 8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 215
  %75 = add i64 %73, 5
  %76 = load i64, i64* %RSP, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78, align 8
  store i64 %77, i64* %RSP, align 8, !tbaa !2428
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  %79 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %74, %struct.Memory* %MEMORY.1)
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -32
  %82 = load i64, i64* %PC, align 8
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %83 = load i64*, i64** %53, align 8
  %84 = add i64 %82, 10
  store i64 %84, i64* %PC, align 8
  %85 = load i64, i64* %83, align 8
  store i64 %85, i64* %54, align 1, !tbaa !2451
  store double 0.000000e+00, double* %56, align 1, !tbaa !2451
  %86 = add i64 %80, -64
  %87 = add i64 %82, 15
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i64*
  store i64 %85, i64* %88, align 8
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 83
  %91 = add i64 %89, 5
  %92 = load i64, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94, align 8
  store i64 %93, i64* %RSP, align 8, !tbaa !2428
  store i64 %90, i64* %PC, align 8, !tbaa !2428
  %95 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %90, %struct.Memory* %MEMORY.1)
  %96 = load i64, i64* %RBP, align 8
  %97 = add i64 %96, -56
  %98 = load i64, i64* %PC, align 8
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX, align 8
  %100 = add i64 %98, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %97 to i64*
  store i64 %99, i64* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, 182
  %104 = add i64 %102, 5
  %105 = load i64, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %105, -8
  %107 = inttoptr i64 %106 to i64*
  store i64 %104, i64* %107, align 8
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  %108 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %103, %struct.Memory* %MEMORY.1)
  %109 = load i64*, i64** %53, align 8
  %110 = load i64, i64* %PC, align 8
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC, align 8
  %112 = load i64, i64* %109, align 8
  store i64 %112, i64* %54, align 1, !tbaa !2451
  store double 0.000000e+00, double* %56, align 1, !tbaa !2451
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -64
  %115 = add i64 %110, 9
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %57, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %118 = add i64 %110, 13
  store i64 %118, i64* %PC, align 8
  %119 = bitcast i64 %112 to double
  %.cast = bitcast i64 %117 to double
  %120 = fcmp uno double %119, %.cast
  br i1 %120, label %121, label %131

; <label>:121:                                    ; preds = %block_404656
  %122 = fadd double %119, %.cast
  %123 = bitcast double %122 to i64
  %124 = and i64 %123, 9221120237041090560
  %125 = icmp eq i64 %124, 9218868437227405312
  %126 = and i64 %123, 2251799813685247
  %127 = icmp ne i64 %126, 0
  %128 = and i1 %125, %127
  br i1 %128, label %129, label %137

; <label>:129:                                    ; preds = %121
  %130 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %118, %struct.Memory* %MEMORY.1) #13
  %.pre12 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:131:                                    ; preds = %block_404656
  %132 = fcmp ogt double %119, %.cast
  br i1 %132, label %137, label %133

; <label>:133:                                    ; preds = %131
  %134 = fcmp olt double %119, %.cast
  br i1 %134, label %137, label %135

; <label>:135:                                    ; preds = %133
  %136 = fcmp oeq double %119, %.cast
  br i1 %136, label %137, label %141

; <label>:137:                                    ; preds = %135, %133, %131, %121
  %138 = phi i8 [ 0, %131 ], [ 0, %133 ], [ 1, %135 ], [ 1, %121 ]
  %139 = phi i8 [ 0, %131 ], [ 0, %133 ], [ 0, %135 ], [ 1, %121 ]
  %140 = phi i8 [ 0, %131 ], [ 1, %133 ], [ 0, %135 ], [ 1, %121 ]
  store i8 %138, i8* %15, align 1, !tbaa !2453
  store i8 %139, i8* %13, align 1, !tbaa !2453
  store i8 %140, i8* %12, align 1, !tbaa !2453
  br label %141

; <label>:141:                                    ; preds = %137, %135
  store i8 0, i8* %17, align 1, !tbaa !2453
  store i8 0, i8* %16, align 1, !tbaa !2453
  store i8 0, i8* %14, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %141, %129
  %142 = phi i64 [ %.pre12, %129 ], [ %118, %141 ]
  %143 = phi %struct.Memory* [ %130, %129 ], [ %MEMORY.1, %141 ]
  %144 = load i8, i8* %12, align 1, !tbaa !2432
  %145 = load i8, i8* %15, align 1, !tbaa !2448
  %146 = or i8 %145, %144
  %147 = icmp ne i8 %146, 0
  %.v18 = select i1 %147, i64 15, i64 6
  %148 = add i64 %.v18, %142
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  br i1 %147, label %block_4046ab, label %block_4046a2

block_4046b4:                                     ; preds = %block_4046a2, %block_404651
  %149 = phi i64 [ %197, %block_4046a2 ], [ %.pre13, %block_404651 ]
  %MEMORY.0 = phi %struct.Memory* [ %143, %block_4046a2 ], [ %MEMORY.1, %block_404651 ]
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -1
  %152 = add i64 %149, 3
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %151 to i8*
  %154 = load i8, i8* %153, align 1
  %155 = and i8 %154, 1
  %156 = zext i8 %155 to i64
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = load i64, i64* %RSP, align 8
  %158 = add i64 %157, 64
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  %159 = icmp ugt i64 %157, -65
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %12, align 1, !tbaa !2432
  %161 = trunc i64 %158 to i32
  %162 = and i32 %161, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #10
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %13, align 1, !tbaa !2446
  %167 = xor i64 %158, %157
  %168 = lshr i64 %167, 4
  %169 = trunc i64 %168 to i8
  %170 = and i8 %169, 1
  store i8 %170, i8* %14, align 1, !tbaa !2447
  %171 = icmp eq i64 %158, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %15, align 1, !tbaa !2448
  %173 = lshr i64 %158, 63
  %174 = trunc i64 %173 to i8
  store i8 %174, i8* %16, align 1, !tbaa !2449
  %175 = lshr i64 %157, 63
  %176 = xor i64 %173, %175
  %177 = add nuw nsw i64 %176, %173
  %178 = icmp eq i64 %177, 2
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %17, align 1, !tbaa !2450
  %180 = add i64 %149, 13
  store i64 %180, i64* %PC, align 8
  %181 = add i64 %157, 72
  %182 = inttoptr i64 %158 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RBP, align 8, !tbaa !2428
  store i64 %181, i64* %RSP, align 8, !tbaa !2428
  %184 = add i64 %149, 14
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %181 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %PC, align 8, !tbaa !2428
  %187 = add i64 %157, 80
  store i64 %187, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404651:                                     ; preds = %block_40463c
  %188 = add i64 %218, -1
  %189 = add i64 %217, 99
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i8*
  store i8 1, i8* %190, align 1
  %.pre13 = load i64, i64* %PC, align 8
  br label %block_4046b4

block_4046ab:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %191 = add i64 %148, -111
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  br label %block_40463c

block_4046a2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -1
  %194 = add i64 %148, 4
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %193 to i8*
  store i8 0, i8* %195, align 1
  %196 = load i64, i64* %PC, align 8
  %197 = add i64 %196, 14
  store i64 %197, i64* %PC, align 8, !tbaa !2428
  br label %block_4046b4

block_40463c:                                     ; preds = %block_4046ab, %block_404610
  %198 = phi i64 [ %.pre, %block_404610 ], [ %191, %block_4046ab ]
  %MEMORY.1 = phi %struct.Memory* [ %46, %block_404610 ], [ %143, %block_4046ab ]
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -16
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = add i64 %199, -24
  store i64 %201, i64* %RSI, align 8, !tbaa !2428
  %202 = add i64 %198, 212
  %203 = add i64 %198, 13
  %204 = load i64, i64* %RSP, align 8, !tbaa !2428
  %205 = add i64 %204, -8
  %206 = inttoptr i64 %205 to i64*
  store i64 %203, i64* %206, align 8
  store i64 %205, i64* %RSP, align 8, !tbaa !2428
  store i64 %202, i64* %PC, align 8, !tbaa !2428
  %207 = tail call %struct.Memory* @sub_404710__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %202, %struct.Memory* %MEMORY.1)
  %208 = load i8, i8* %AL, align 1
  %209 = load i64, i64* %PC, align 8
  %210 = and i8 %208, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %211 = zext i8 %210 to i32
  %212 = tail call i32 @llvm.ctpop.i32(i32 %211) #10
  %213 = trunc i32 %212 to i8
  %214 = xor i8 %213, 1
  store i8 %214, i8* %13, align 1, !tbaa !2446
  %215 = xor i8 %210, 1
  store i8 %215, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %216 = icmp eq i8 %215, 0
  %.v = select i1 %216, i64 13, i64 8
  %217 = add i64 %.v, %209
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %218 = load i64, i64* %RBP, align 8
  br i1 %216, label %block_404656, label %block_404651
}

; Function Attrs: noinline
define %struct.Memory* @sub_4066a0__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4066a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, -18752
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_401d70__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401c00__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_401c00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %30, align 8
  %31 = add i64 %22, 12
  store i64 %31, i64* %PC, align 8
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  store i64 %33, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %22, 13
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = add i64 %32, 16
  store i64 %39, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402870__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402870:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402898

block_4028e1:                                     ; preds = %block_402898
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4028a8:                                     ; preds = %block_402898
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 3320
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_4035a0__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 10087
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405020__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 3626
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036f0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402898

block_402898:                                     ; preds = %block_4028a8, %block_402870
  %190 = phi i64 [ %189, %block_4028a8 ], [ %.pre, %block_402870 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4028a8, label %block_4028e1
}

; Function Attrs: noinline
define %struct.Memory* @sub_405a70__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405a70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %10, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -24
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, 8
  store i64 %64, i64* %RSI, align 8, !tbaa !2428
  %65 = icmp ugt i64 %63, -9
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %14, align 1, !tbaa !2432
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #10
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %21, align 1, !tbaa !2446
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %26, align 1, !tbaa !2447
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %29, align 1, !tbaa !2448
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %32, align 1, !tbaa !2449
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %38, align 1, !tbaa !2450
  %86 = add i64 %60, 12
  store i64 %86, i64* %PC, align 8
  store i64 %64, i64* %62, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405a94

block_405afd:                                     ; preds = %block_405aed
  %87 = add i64 %329, -48
  %88 = add i64 %341, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %329, -40
  %92 = add i64 %341, 8
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = inttoptr i64 %90 to i64*
  %96 = add i64 %341, 11
  store i64 %96, i64* %PC, align 8
  %97 = load i64, i64* %95, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %.cast = inttoptr i64 %94 to i64*
  %98 = add i64 %341, 14
  store i64 %98, i64* %PC, align 8
  store i64 %97, i64* %.cast, align 8
  %99 = load i64, i64* %RBP, align 8
  %100 = add i64 %99, -40
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %104, -8
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = icmp ugt i64 %104, 7
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %14, align 1, !tbaa !2432
  %108 = trunc i64 %105 to i32
  %109 = and i32 %108, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #10
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %21, align 1, !tbaa !2446
  %114 = xor i64 %104, 16
  %115 = xor i64 %114, %105
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2447
  %119 = icmp eq i64 %105, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %29, align 1, !tbaa !2448
  %121 = lshr i64 %105, 63
  %122 = trunc i64 %121 to i8
  store i8 %122, i8* %32, align 1, !tbaa !2449
  %123 = lshr i64 %104, 63
  %124 = xor i64 %121, %123
  %125 = xor i64 %121, 1
  %126 = add nuw nsw i64 %124, %125
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %38, align 1, !tbaa !2450
  %129 = add i64 %101, 12
  store i64 %129, i64* %PC, align 8
  store i64 %105, i64* %103, align 8
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %130, -90
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  br label %block_405abd

block_405b38:                                     ; preds = %block_405a94
  %132 = load i64, i64* %RSP, align 8
  %133 = add i64 %132, 64
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %134 = icmp ugt i64 %132, -65
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %14, align 1, !tbaa !2432
  %136 = trunc i64 %133 to i32
  %137 = and i32 %136, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #10
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %21, align 1, !tbaa !2446
  %142 = xor i64 %133, %132
  %143 = lshr i64 %142, 4
  %144 = trunc i64 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %26, align 1, !tbaa !2447
  %146 = icmp eq i64 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %29, align 1, !tbaa !2448
  %148 = lshr i64 %133, 63
  %149 = trunc i64 %148 to i8
  store i8 %149, i8* %32, align 1, !tbaa !2449
  %150 = lshr i64 %132, 63
  %151 = xor i64 %148, %150
  %152 = add nuw nsw i64 %151, %148
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %38, align 1, !tbaa !2450
  %155 = add i64 %198, 5
  store i64 %155, i64* %PC, align 8
  %156 = add i64 %132, 72
  %157 = inttoptr i64 %133 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RBP, align 8, !tbaa !2428
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  %159 = add i64 %198, 6
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %156 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %162 = add i64 %132, 80
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_405a94:                                     ; preds = %block_405af8, %block_405a70
  %163 = phi i64 [ %.pre, %block_405a70 ], [ %327, %block_405af8 ]
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -24
  %166 = add i64 %163, 4
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %165 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = add i64 %164, -16
  %170 = add i64 %163, 8
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = sub i64 %168, %172
  %174 = icmp ult i64 %168, %172
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %14, align 1, !tbaa !2432
  %176 = trunc i64 %173 to i32
  %177 = and i32 %176, 255
  %178 = tail call i32 @llvm.ctpop.i32(i32 %177) #10
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  store i8 %181, i8* %21, align 1, !tbaa !2446
  %182 = xor i64 %172, %168
  %183 = xor i64 %182, %173
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  store i8 %186, i8* %26, align 1, !tbaa !2447
  %187 = icmp eq i64 %173, 0
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %29, align 1, !tbaa !2448
  %189 = lshr i64 %173, 63
  %190 = trunc i64 %189 to i8
  store i8 %190, i8* %32, align 1, !tbaa !2449
  %191 = lshr i64 %168, 63
  %192 = lshr i64 %172, 63
  %193 = xor i64 %192, %191
  %194 = xor i64 %189, %191
  %195 = add nuw nsw i64 %194, %193
  %196 = icmp eq i64 %195, 2
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %38, align 1, !tbaa !2450
  %.v7 = select i1 %187, i64 164, i64 14
  %198 = add i64 %.v7, %163
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  br i1 %187, label %block_405b38, label %block_405aa2

block_405ad2:                                     ; preds = %block_405abd
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -32
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = add i64 %199, -48
  %202 = add i64 %285, 8
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = add i64 %204, -8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = icmp ugt i64 %204, 7
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %14, align 1, !tbaa !2432
  %208 = trunc i64 %205 to i32
  %209 = and i32 %208, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #10
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %21, align 1, !tbaa !2446
  %214 = xor i64 %204, 16
  %215 = xor i64 %214, %205
  %216 = lshr i64 %215, 4
  %217 = trunc i64 %216 to i8
  %218 = and i8 %217, 1
  store i8 %218, i8* %26, align 1, !tbaa !2447
  %219 = icmp eq i64 %205, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %29, align 1, !tbaa !2448
  %221 = lshr i64 %205, 63
  %222 = trunc i64 %221 to i8
  store i8 %222, i8* %32, align 1, !tbaa !2449
  %223 = lshr i64 %204, 63
  %224 = xor i64 %221, %223
  %225 = xor i64 %221, 1
  %226 = add nuw nsw i64 %224, %225
  %227 = icmp eq i64 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %38, align 1, !tbaa !2450
  %229 = add i64 %285, 16
  store i64 %229, i64* %PC, align 8
  store i64 %205, i64* %203, align 8
  %230 = load i64, i64* %RAX, align 8
  %231 = load i64, i64* %PC, align 8
  store i64 %230, i64* %RSI, align 8, !tbaa !2428
  %232 = add i64 %231, -10370
  %233 = add i64 %231, 8
  %234 = load i64, i64* %RSP, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %233, i64* %236, align 8
  store i64 %235, i64* %RSP, align 8, !tbaa !2428
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  %237 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %232, %struct.Memory* %2)
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -49
  %240 = load i8, i8* %AL, align 1
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, 3
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %239 to i8*
  store i8 %240, i8* %243, align 1
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_405aed

block_405abd:                                     ; preds = %block_405aa2, %block_405afd
  %244 = phi i64 [ %.pre5, %block_405aa2 ], [ %131, %block_405afd ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %245 = load i64, i64* %RBP, align 8
  %246 = add i64 %245, -40
  %247 = add i64 %244, 8
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RDX, align 8, !tbaa !2428
  %250 = add i64 %245, -8
  %251 = add i64 %244, 12
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = sub i64 %249, %253
  %255 = icmp ult i64 %249, %253
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %14, align 1, !tbaa !2432
  %257 = trunc i64 %254 to i32
  %258 = and i32 %257, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #10
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %21, align 1, !tbaa !2446
  %263 = xor i64 %253, %249
  %264 = xor i64 %263, %254
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %26, align 1, !tbaa !2447
  %268 = icmp eq i64 %254, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %29, align 1, !tbaa !2448
  %270 = lshr i64 %254, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %32, align 1, !tbaa !2449
  %272 = lshr i64 %249, 63
  %273 = lshr i64 %253, 63
  %274 = xor i64 %273, %272
  %275 = xor i64 %270, %272
  %276 = add nuw nsw i64 %275, %274
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %38, align 1, !tbaa !2450
  %279 = add i64 %245, -49
  %280 = add i64 %244, 15
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %279 to i8*
  store i8 0, i8* %281, align 1
  %282 = load i64, i64* %PC, align 8
  %283 = load i8, i8* %29, align 1, !tbaa !2448
  %284 = icmp ne i8 %283, 0
  %.v10 = select i1 %284, i64 33, i64 6
  %285 = add i64 %.v10, %282
  store i64 %285, i64* %PC, align 8, !tbaa !2428
  %286 = icmp eq i8 %283, 1
  br i1 %286, label %block_405aed, label %block_405ad2

block_405af8:                                     ; preds = %block_405aed
  %287 = add i64 %329, -40
  %288 = add i64 %341, 40
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i64*
  %290 = load i64, i64* %289, align 8
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = add i64 %329, -32
  %292 = add i64 %341, 44
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to i64*
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %RCX, align 8, !tbaa !2428
  %295 = inttoptr i64 %290 to i64*
  %296 = add i64 %341, 47
  store i64 %296, i64* %PC, align 8
  store i64 %294, i64* %295, align 8
  %297 = load i64, i64* %RBP, align 8
  %298 = add i64 %297, -24
  %299 = load i64, i64* %PC, align 8
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301, align 8
  %303 = add i64 %302, 8
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = icmp ugt i64 %302, -9
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %14, align 1, !tbaa !2432
  %306 = trunc i64 %303 to i32
  %307 = and i32 %306, 255
  %308 = tail call i32 @llvm.ctpop.i32(i32 %307) #10
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  store i8 %311, i8* %21, align 1, !tbaa !2446
  %312 = xor i64 %303, %302
  %313 = lshr i64 %312, 4
  %314 = trunc i64 %313 to i8
  %315 = and i8 %314, 1
  store i8 %315, i8* %26, align 1, !tbaa !2447
  %316 = icmp eq i64 %303, 0
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %29, align 1, !tbaa !2448
  %318 = lshr i64 %303, 63
  %319 = trunc i64 %318 to i8
  store i8 %319, i8* %32, align 1, !tbaa !2449
  %320 = lshr i64 %302, 63
  %321 = xor i64 %318, %320
  %322 = add nuw nsw i64 %321, %318
  %323 = icmp eq i64 %322, 2
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %38, align 1, !tbaa !2450
  %325 = add i64 %299, 12
  store i64 %325, i64* %PC, align 8
  store i64 %303, i64* %301, align 8
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, -159
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  br label %block_405a94

block_405aed:                                     ; preds = %block_405abd, %block_405ad2
  %328 = phi i64 [ %285, %block_405abd ], [ %.pre6, %block_405ad2 ]
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -49
  %331 = add i64 %328, 3
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %330 to i8*
  %333 = load i8, i8* %332, align 1
  store i8 %333, i8* %AL, align 1, !tbaa !2453
  %334 = and i8 %333, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %335 = zext i8 %334 to i32
  %336 = tail call i32 @llvm.ctpop.i32(i32 %335) #10
  %337 = trunc i32 %336 to i8
  %338 = xor i8 %337, 1
  store i8 %338, i8* %21, align 1, !tbaa !2446
  %339 = xor i8 %334, 1
  store i8 %339, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %340 = icmp eq i8 %339, 0
  %.v = select i1 %340, i64 16, i64 11
  %341 = add i64 %.v, %328
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  br i1 %340, label %block_405afd, label %block_405af8

block_405aa2:                                     ; preds = %block_405a94
  %342 = add i64 %198, 4
  store i64 %342, i64* %PC, align 8
  %343 = load i64, i64* %167, align 8
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = add i64 %198, 7
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %343 to i64*
  %346 = load i64, i64* %345, align 8
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = add i64 %164, -32
  %348 = add i64 %198, 11
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %347 to i64*
  store i64 %346, i64* %349, align 8
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -24
  %352 = load i64, i64* %PC, align 8
  %353 = add i64 %352, 4
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %351 to i64*
  %355 = load i64, i64* %354, align 8
  store i64 %355, i64* %RAX, align 8, !tbaa !2428
  %356 = add i64 %350, -40
  %357 = add i64 %352, 8
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i64*
  store i64 %355, i64* %358, align 8
  %359 = load i64, i64* %RBP, align 8
  %360 = add i64 %359, -40
  %361 = load i64, i64* %PC, align 8
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = add i64 %359, -48
  %366 = add i64 %361, 8
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i64*
  store i64 %364, i64* %367, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_405abd
}

; Function Attrs: noinline
define %struct.Memory* @sub_405880__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405880:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %10, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -24
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, 8
  store i64 %64, i64* %RSI, align 8, !tbaa !2428
  %65 = icmp ugt i64 %63, -9
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %14, align 1, !tbaa !2432
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #10
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %21, align 1, !tbaa !2446
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %26, align 1, !tbaa !2447
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %29, align 1, !tbaa !2448
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %32, align 1, !tbaa !2449
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %38, align 1, !tbaa !2450
  %86 = add i64 %60, 12
  store i64 %86, i64* %PC, align 8
  store i64 %64, i64* %62, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4058a4

block_4058b2:                                     ; preds = %block_4058a4
  %87 = add i64 %279, 4
  store i64 %87, i64* %PC, align 8
  %88 = load i64, i64* %248, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %279, 7
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = add i64 %245, -32
  %93 = add i64 %279, 11
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  store i64 %91, i64* %94, align 8
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -24
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = add i64 %95, -40
  %102 = add i64 %97, 8
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %100, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -40
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %104, -48
  %111 = add i64 %106, 8
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_4058cd

block_405948:                                     ; preds = %block_4058a4
  %113 = load i64, i64* %RSP, align 8
  %114 = add i64 %113, 64
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %115 = icmp ugt i64 %113, -65
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %14, align 1, !tbaa !2432
  %117 = trunc i64 %114 to i32
  %118 = and i32 %117, 255
  %119 = tail call i32 @llvm.ctpop.i32(i32 %118) #10
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  store i8 %122, i8* %21, align 1, !tbaa !2446
  %123 = xor i64 %114, %113
  %124 = lshr i64 %123, 4
  %125 = trunc i64 %124 to i8
  %126 = and i8 %125, 1
  store i8 %126, i8* %26, align 1, !tbaa !2447
  %127 = icmp eq i64 %114, 0
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %29, align 1, !tbaa !2448
  %129 = lshr i64 %114, 63
  %130 = trunc i64 %129 to i8
  store i8 %130, i8* %32, align 1, !tbaa !2449
  %131 = lshr i64 %113, 63
  %132 = xor i64 %129, %131
  %133 = add nuw nsw i64 %132, %129
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %38, align 1, !tbaa !2450
  %136 = add i64 %279, 5
  store i64 %136, i64* %PC, align 8
  %137 = add i64 %113, 72
  %138 = inttoptr i64 %114 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RBP, align 8, !tbaa !2428
  store i64 %137, i64* %RSP, align 8, !tbaa !2428
  %140 = add i64 %279, 6
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %137 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  %143 = add i64 %113, 80
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_40590d:                                     ; preds = %block_4058fd
  %144 = add i64 %190, -48
  %145 = add i64 %202, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = add i64 %190, -40
  %149 = add i64 %202, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RCX, align 8, !tbaa !2428
  %152 = inttoptr i64 %147 to i64*
  %153 = add i64 %202, 11
  store i64 %153, i64* %PC, align 8
  %154 = load i64, i64* %152, align 8
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %.cast = inttoptr i64 %151 to i64*
  %155 = add i64 %202, 14
  store i64 %155, i64* %PC, align 8
  store i64 %154, i64* %.cast, align 8
  %156 = load i64, i64* %RBP, align 8
  %157 = add i64 %156, -40
  %158 = load i64, i64* %PC, align 8
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = add i64 %161, -8
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = icmp ugt i64 %161, 7
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %14, align 1, !tbaa !2432
  %165 = trunc i64 %162 to i32
  %166 = and i32 %165, 255
  %167 = tail call i32 @llvm.ctpop.i32(i32 %166) #10
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  store i8 %170, i8* %21, align 1, !tbaa !2446
  %171 = xor i64 %161, 16
  %172 = xor i64 %171, %162
  %173 = lshr i64 %172, 4
  %174 = trunc i64 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* %26, align 1, !tbaa !2447
  %176 = icmp eq i64 %162, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %29, align 1, !tbaa !2448
  %178 = lshr i64 %162, 63
  %179 = trunc i64 %178 to i8
  store i8 %179, i8* %32, align 1, !tbaa !2449
  %180 = lshr i64 %161, 63
  %181 = xor i64 %178, %180
  %182 = xor i64 %178, 1
  %183 = add nuw nsw i64 %181, %182
  %184 = icmp eq i64 %183, 2
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %38, align 1, !tbaa !2450
  %186 = add i64 %158, 12
  store i64 %186, i64* %PC, align 8
  store i64 %162, i64* %160, align 8
  %187 = load i64, i64* %PC, align 8
  %188 = add i64 %187, -90
  store i64 %188, i64* %PC, align 8, !tbaa !2428
  br label %block_4058cd

block_4058fd:                                     ; preds = %block_4058cd, %block_4058e2
  %189 = phi i64 [ %366, %block_4058cd ], [ %.pre6, %block_4058e2 ]
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -49
  %192 = add i64 %189, 3
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %191 to i8*
  %194 = load i8, i8* %193, align 1
  store i8 %194, i8* %AL, align 1, !tbaa !2453
  %195 = and i8 %194, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %196 = zext i8 %195 to i32
  %197 = tail call i32 @llvm.ctpop.i32(i32 %196) #10
  %198 = trunc i32 %197 to i8
  %199 = xor i8 %198, 1
  store i8 %199, i8* %21, align 1, !tbaa !2446
  %200 = xor i8 %195, 1
  store i8 %200, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %201 = icmp eq i8 %200, 0
  %.v = select i1 %201, i64 16, i64 11
  %202 = add i64 %.v, %189
  store i64 %202, i64* %PC, align 8, !tbaa !2428
  br i1 %201, label %block_40590d, label %block_405908

block_405908:                                     ; preds = %block_4058fd
  %203 = add i64 %190, -40
  %204 = add i64 %202, 40
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = add i64 %190, -32
  %208 = add i64 %202, 44
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = inttoptr i64 %206 to i64*
  %212 = add i64 %202, 47
  store i64 %212, i64* %PC, align 8
  store i64 %210, i64* %211, align 8
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -24
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %214 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = add i64 %218, 8
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = icmp ugt i64 %218, -9
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %14, align 1, !tbaa !2432
  %222 = trunc i64 %219 to i32
  %223 = and i32 %222, 255
  %224 = tail call i32 @llvm.ctpop.i32(i32 %223) #10
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  store i8 %227, i8* %21, align 1, !tbaa !2446
  %228 = xor i64 %219, %218
  %229 = lshr i64 %228, 4
  %230 = trunc i64 %229 to i8
  %231 = and i8 %230, 1
  store i8 %231, i8* %26, align 1, !tbaa !2447
  %232 = icmp eq i64 %219, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %29, align 1, !tbaa !2448
  %234 = lshr i64 %219, 63
  %235 = trunc i64 %234 to i8
  store i8 %235, i8* %32, align 1, !tbaa !2449
  %236 = lshr i64 %218, 63
  %237 = xor i64 %234, %236
  %238 = add nuw nsw i64 %237, %234
  %239 = icmp eq i64 %238, 2
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %38, align 1, !tbaa !2450
  %241 = add i64 %215, 12
  store i64 %241, i64* %PC, align 8
  store i64 %219, i64* %217, align 8
  %242 = load i64, i64* %PC, align 8
  %243 = add i64 %242, -159
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  br label %block_4058a4

block_4058a4:                                     ; preds = %block_405908, %block_405880
  %244 = phi i64 [ %.pre, %block_405880 ], [ %243, %block_405908 ]
  %245 = load i64, i64* %RBP, align 8
  %246 = add i64 %245, -24
  %247 = add i64 %244, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RAX, align 8, !tbaa !2428
  %250 = add i64 %245, -16
  %251 = add i64 %244, 8
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = sub i64 %249, %253
  %255 = icmp ult i64 %249, %253
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %14, align 1, !tbaa !2432
  %257 = trunc i64 %254 to i32
  %258 = and i32 %257, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #10
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %21, align 1, !tbaa !2446
  %263 = xor i64 %253, %249
  %264 = xor i64 %263, %254
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %26, align 1, !tbaa !2447
  %268 = icmp eq i64 %254, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %29, align 1, !tbaa !2448
  %270 = lshr i64 %254, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %32, align 1, !tbaa !2449
  %272 = lshr i64 %249, 63
  %273 = lshr i64 %253, 63
  %274 = xor i64 %273, %272
  %275 = xor i64 %270, %272
  %276 = add nuw nsw i64 %275, %274
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %38, align 1, !tbaa !2450
  %.v7 = select i1 %268, i64 164, i64 14
  %279 = add i64 %.v7, %244
  store i64 %279, i64* %PC, align 8, !tbaa !2428
  br i1 %268, label %block_405948, label %block_4058b2

block_4058e2:                                     ; preds = %block_4058cd
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -32
  store i64 %281, i64* %RDI, align 8, !tbaa !2428
  %282 = add i64 %280, -48
  %283 = add i64 %366, 8
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = add i64 %285, -8
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = icmp ugt i64 %285, 7
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %14, align 1, !tbaa !2432
  %289 = trunc i64 %286 to i32
  %290 = and i32 %289, 255
  %291 = tail call i32 @llvm.ctpop.i32(i32 %290) #10
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %21, align 1, !tbaa !2446
  %295 = xor i64 %285, 16
  %296 = xor i64 %295, %286
  %297 = lshr i64 %296, 4
  %298 = trunc i64 %297 to i8
  %299 = and i8 %298, 1
  store i8 %299, i8* %26, align 1, !tbaa !2447
  %300 = icmp eq i64 %286, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %29, align 1, !tbaa !2448
  %302 = lshr i64 %286, 63
  %303 = trunc i64 %302 to i8
  store i8 %303, i8* %32, align 1, !tbaa !2449
  %304 = lshr i64 %285, 63
  %305 = xor i64 %302, %304
  %306 = xor i64 %302, 1
  %307 = add nuw nsw i64 %305, %306
  %308 = icmp eq i64 %307, 2
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %38, align 1, !tbaa !2450
  %310 = add i64 %366, 16
  store i64 %310, i64* %PC, align 8
  store i64 %286, i64* %284, align 8
  %311 = load i64, i64* %RAX, align 8
  %312 = load i64, i64* %PC, align 8
  store i64 %311, i64* %RSI, align 8, !tbaa !2428
  %313 = add i64 %312, -10306
  %314 = add i64 %312, 8
  %315 = load i64, i64* %RSP, align 8, !tbaa !2428
  %316 = add i64 %315, -8
  %317 = inttoptr i64 %316 to i64*
  store i64 %314, i64* %317, align 8
  store i64 %316, i64* %RSP, align 8, !tbaa !2428
  store i64 %313, i64* %PC, align 8, !tbaa !2428
  %318 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %313, %struct.Memory* %2)
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -49
  %321 = load i8, i8* %AL, align 1
  %322 = load i64, i64* %PC, align 8
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %320 to i8*
  store i8 %321, i8* %324, align 1
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_4058fd

block_4058cd:                                     ; preds = %block_40590d, %block_4058b2
  %325 = phi i64 [ %.pre5, %block_4058b2 ], [ %188, %block_40590d ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -40
  %328 = add i64 %325, 8
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %RDX, align 8, !tbaa !2428
  %331 = add i64 %326, -8
  %332 = add i64 %325, 12
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = sub i64 %330, %334
  %336 = icmp ult i64 %330, %334
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %14, align 1, !tbaa !2432
  %338 = trunc i64 %335 to i32
  %339 = and i32 %338, 255
  %340 = tail call i32 @llvm.ctpop.i32(i32 %339) #10
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  store i8 %343, i8* %21, align 1, !tbaa !2446
  %344 = xor i64 %334, %330
  %345 = xor i64 %344, %335
  %346 = lshr i64 %345, 4
  %347 = trunc i64 %346 to i8
  %348 = and i8 %347, 1
  store i8 %348, i8* %26, align 1, !tbaa !2447
  %349 = icmp eq i64 %335, 0
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %29, align 1, !tbaa !2448
  %351 = lshr i64 %335, 63
  %352 = trunc i64 %351 to i8
  store i8 %352, i8* %32, align 1, !tbaa !2449
  %353 = lshr i64 %330, 63
  %354 = lshr i64 %334, 63
  %355 = xor i64 %354, %353
  %356 = xor i64 %351, %353
  %357 = add nuw nsw i64 %356, %355
  %358 = icmp eq i64 %357, 2
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %38, align 1, !tbaa !2450
  %360 = add i64 %326, -49
  %361 = add i64 %325, 15
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i8*
  store i8 0, i8* %362, align 1
  %363 = load i64, i64* %PC, align 8
  %364 = load i8, i8* %29, align 1, !tbaa !2448
  %365 = icmp ne i8 %364, 0
  %.v10 = select i1 %365, i64 33, i64 6
  %366 = add i64 %.v10, %363
  store i64 %366, i64* %PC, align 8, !tbaa !2428
  %367 = icmp eq i8 %364, 1
  br i1 %367, label %block_4058fd, label %block_4058e2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b50__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402b50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402b78

block_402bf9:                                     ; preds = %block_402b78
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402b88:                                     ; preds = %block_402b78
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 3552
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403980__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 3647
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_403a00__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 3954
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b50__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402b78

block_402b78:                                     ; preds = %block_402b88, %block_402b50
  %255 = phi i64 [ %254, %block_402b88 ], [ %.pre, %block_402b50 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402b88, label %block_402bf9
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401c40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c60__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_405140__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #7 {
block_405140:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 96
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, -5176
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_403d20__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %RAX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %58, -1
  %61 = icmp eq i64 %58, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %13, align 1, !tbaa !2432
  %63 = trunc i64 %60 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #10
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %20, align 1, !tbaa !2446
  %69 = xor i64 %60, %58
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  store i8 %72, i8* %25, align 1, !tbaa !2447
  %73 = icmp eq i64 %60, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %28, align 1, !tbaa !2448
  %75 = lshr i64 %60, 63
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %31, align 1, !tbaa !2449
  %77 = lshr i64 %58, 63
  %78 = xor i64 %75, %77
  %79 = add nuw nsw i64 %78, %77
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %37, align 1, !tbaa !2450
  %82 = icmp ne i8 %76, 0
  %83 = xor i1 %82, %80
  %84 = or i1 %73, %83
  %.v = select i1 %84, i64 354, i64 10
  %85 = add i64 %.v, %59
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_4052c5, label %block_40516d

block_4051fd:                                     ; preds = %block_4051e0
  %86 = add i64 %132, -40
  store i64 %86, i64* %RSI, align 8, !tbaa !2428
  %87 = add i64 %131, 243
  %88 = add i64 %131, 36
  %89 = load i64, i64* %RSP, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91, align 8
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %92 = tail call %struct.Memory* @sub_4052f0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %326)
  %93 = load i8, i8* %AL, align 1
  %94 = load i64, i64* %PC, align 8
  %95 = and i8 %93, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %96 = zext i8 %95 to i32
  %97 = tail call i32 @llvm.ctpop.i32(i32 %96) #10
  %98 = trunc i32 %97 to i8
  %99 = xor i8 %98, 1
  store i8 %99, i8* %20, align 1, !tbaa !2446
  %100 = xor i8 %95, 1
  store i8 %100, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i8 %100, 0
  %.v38 = select i1 %101, i64 13, i64 8
  %102 = add i64 %.v38, %94
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_40522e, label %block_405229

block_4051d6:                                     ; preds = %block_4051b7
  %103 = add i64 %372, 157
  br label %block_405273

block_4051e0:                                     ; preds = %block_405202, %block_4051db
  %.sink4 = phi i64 [ %419, %block_405202 ], [ %134, %block_4051db ]
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -32
  store i64 %105, i64* %RDI, align 8, !tbaa !2428
  %106 = add i64 %.sink4, -5376
  %107 = add i64 %.sink4, 9
  %108 = load i64, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110, align 8
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %111 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %106, %struct.Memory* %326)
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, -24
  %114 = load i64, i64* %PC, align 8
  store i64 %113, i64* %RSI, align 8, !tbaa !2428
  %115 = load i64, i64* %RAX, align 8
  store i64 %115, i64* %RDI, align 8, !tbaa !2428
  %116 = add i64 %114, -8073
  %117 = add i64 %114, 12
  %118 = load i64, i64* %RSP, align 8, !tbaa !2428
  %119 = add i64 %118, -8
  %120 = inttoptr i64 %119 to i64*
  store i64 %117, i64* %120, align 8
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %121 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %116, %struct.Memory* %326)
  %122 = load i8, i8* %AL, align 1
  %123 = load i64, i64* %PC, align 8
  %124 = and i8 %122, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %125 = zext i8 %124 to i32
  %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #10
  %127 = trunc i32 %126 to i8
  %128 = xor i8 %127, 1
  store i8 %128, i8* %20, align 1, !tbaa !2446
  %129 = xor i8 %124, 1
  store i8 %129, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %130 = icmp eq i8 %129, 0
  %.v37 = select i1 %130, i64 13, i64 8
  %131 = add i64 %.v37, %123
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -32
  store i64 %133, i64* %RDI, align 8, !tbaa !2428
  br i1 %130, label %block_405202, label %block_4051fd

block_4051db:                                     ; preds = %block_4051b7
  %134 = add i64 %372, 5
  br label %block_4051e0

block_405273:                                     ; preds = %block_405229, %block_4051d6
  %.sink = phi i64 [ %373, %block_405229 ], [ %103, %block_4051d6 ]
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -40
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %137 = add i64 %135, -8
  %138 = add i64 %.sink, 15
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = add i64 %135, -56
  %142 = add i64 %.sink, 19
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %140, i64* %143, align 8
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, -5430
  %146 = add i64 %144, 5
  %147 = load i64, i64* %RSP, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %150 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %145, %struct.Memory* %326)
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -64
  %153 = load i64, i64* %RAX, align 8
  %154 = load i64, i64* %PC, align 8
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %152 to i64*
  store i64 %153, i64* %156, align 8
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -56
  %159 = load i64, i64* %PC, align 8
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RDI, align 8, !tbaa !2428
  %163 = add i64 %157, -64
  %164 = add i64 %159, 8
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RSI, align 8, !tbaa !2428
  %167 = add i64 %159, -335
  %168 = add i64 %159, 13
  %169 = load i64, i64* %RSP, align 8, !tbaa !2428
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %168, i64* %171, align 8
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  store i64 %167, i64* %PC, align 8, !tbaa !2428
  %172 = tail call %struct.Memory* @sub_405140__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %167, %struct.Memory* %150)
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -40
  %175 = load i64, i64* %PC, align 8
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %176 = add i64 %175, -5452
  %177 = add i64 %175, 16
  %178 = load i64, i64* %RSP, align 8, !tbaa !2428
  %179 = add i64 %178, -8
  %180 = inttoptr i64 %179 to i64*
  store i64 %177, i64* %180, align 8
  store i64 %179, i64* %RSP, align 8, !tbaa !2428
  store i64 %176, i64* %PC, align 8, !tbaa !2428
  %181 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %176, %struct.Memory* %172)
  %182 = load i64, i64* %RBP, align 8
  %183 = add i64 %182, -72
  %184 = load i64, i64* %RAX, align 8
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %183 to i64*
  store i64 %184, i64* %187, align 8
  %188 = load i64, i64* %RBP, align 8
  %189 = add i64 %188, -16
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %189 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RAX, align 8, !tbaa !2428
  %194 = add i64 %188, -80
  %195 = add i64 %190, 8
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  store i64 %193, i64* %196, align 8
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -72
  %199 = load i64, i64* %PC, align 8
  %200 = add i64 %199, 4
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %198 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %RDI, align 8, !tbaa !2428
  %203 = add i64 %197, -80
  %204 = add i64 %199, 8
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RSI, align 8, !tbaa !2428
  %207 = add i64 %199, -376
  %208 = add i64 %199, 13
  %209 = load i64, i64* %RSP, align 8, !tbaa !2428
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %208, i64* %211, align 8
  store i64 %210, i64* %RSP, align 8, !tbaa !2428
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  %212 = tail call %struct.Memory* @sub_405140__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %207, %struct.Memory* %181)
  %.pre34 = load i64, i64* %PC, align 8
  br label %block_4052c5

block_405192:                                     ; preds = %block_40518d, %block_405192
  %.sink8 = phi i64 [ %249, %block_405192 ], [ %251, %block_40518d ]
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -40
  store i64 %214, i64* %RDI, align 8, !tbaa !2428
  %215 = add i64 %.sink8, 318
  %216 = add i64 %.sink8, 9
  %217 = load i64, i64* %RSP, align 8, !tbaa !2428
  %218 = add i64 %217, -8
  %219 = inttoptr i64 %218 to i64*
  store i64 %216, i64* %219, align 8
  store i64 %218, i64* %RSP, align 8, !tbaa !2428
  store i64 %215, i64* %PC, align 8, !tbaa !2428
  %220 = tail call %struct.Memory* @sub_4052d0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %215, %struct.Memory* %326)
  %221 = load i64, i64* %RAX, align 8
  %222 = load i64, i64* %PC, align 8
  store i64 %221, i64* %RDI, align 8, !tbaa !2428
  %223 = add i64 %222, -5307
  %224 = add i64 %222, 8
  %225 = load i64, i64* %RSP, align 8, !tbaa !2428
  %226 = add i64 %225, -8
  %227 = inttoptr i64 %226 to i64*
  store i64 %224, i64* %227, align 8
  store i64 %226, i64* %RSP, align 8, !tbaa !2428
  store i64 %223, i64* %PC, align 8, !tbaa !2428
  %228 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %223, %struct.Memory* %326)
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -24
  %231 = load i64, i64* %PC, align 8
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX, align 8
  store i64 %232, i64* %RSI, align 8, !tbaa !2428
  %233 = add i64 %231, -8003
  %234 = add i64 %231, 12
  %235 = load i64, i64* %RSP, align 8, !tbaa !2428
  %236 = add i64 %235, -8
  %237 = inttoptr i64 %236 to i64*
  store i64 %234, i64* %237, align 8
  store i64 %236, i64* %RSP, align 8, !tbaa !2428
  store i64 %233, i64* %PC, align 8, !tbaa !2428
  %238 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %233, %struct.Memory* %326)
  %239 = load i8, i8* %AL, align 1
  %240 = load i64, i64* %PC, align 8
  %241 = and i8 %239, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %242 = zext i8 %241 to i32
  %243 = tail call i32 @llvm.ctpop.i32(i32 %242) #10
  %244 = trunc i32 %243 to i8
  %245 = xor i8 %244, 1
  store i8 %245, i8* %20, align 1, !tbaa !2446
  %246 = xor i8 %241, 1
  store i8 %246, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %247 = icmp eq i8 %246, 0
  %.v35 = select i1 %247, i64 13, i64 8
  %248 = add i64 %.v35, %240
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %249 = add i64 %248, -42
  br i1 %247, label %block_405192, label %block_4051b7

block_40518d:                                     ; preds = %block_40516d, %block_40522e
  %250 = phi i64 [ %.pre, %block_40516d ], [ %318, %block_40522e ]
  %251 = add i64 %250, 5
  br label %block_405192

block_40522e:                                     ; preds = %block_4051fd
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -40
  store i64 %253, i64* %RDI, align 8, !tbaa !2428
  %254 = add i64 %102, -5454
  %255 = add i64 %102, 9
  %256 = load i64, i64* %RSP, align 8, !tbaa !2428
  %257 = add i64 %256, -8
  %258 = inttoptr i64 %257 to i64*
  store i64 %255, i64* %258, align 8
  store i64 %257, i64* %RSP, align 8, !tbaa !2428
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  %259 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %254, %struct.Memory* %326)
  %260 = load i64, i64* %RBP, align 8
  %261 = add i64 %260, -32
  %262 = load i64, i64* %PC, align 8
  store i64 %261, i64* %RDI, align 8, !tbaa !2428
  %263 = load i64*, i64** %327, align 8
  %264 = add i64 %262, 7
  store i64 %264, i64* %PC, align 8
  %265 = load i64, i64* %263, align 8
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = add i64 %260, -48
  %267 = add i64 %262, 11
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  store i64 %265, i64* %268, align 8
  %269 = load i64, i64* %PC, align 8
  %270 = add i64 %269, -5474
  %271 = add i64 %269, 5
  %272 = load i64, i64* %RSP, align 8, !tbaa !2428
  %273 = add i64 %272, -8
  %274 = inttoptr i64 %273 to i64*
  store i64 %271, i64* %274, align 8
  store i64 %273, i64* %RSP, align 8, !tbaa !2428
  store i64 %270, i64* %PC, align 8, !tbaa !2428
  %275 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %270, %struct.Memory* %326)
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -40
  %278 = load i64, i64* %PC, align 8
  store i64 %277, i64* %RDI, align 8, !tbaa !2428
  %279 = add i64 %276, -96
  %280 = load i64, i64* %RAX, align 8
  %281 = add i64 %278, 8
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %279 to i64*
  store i64 %280, i64* %282, align 8
  %283 = load i64, i64* %PC, align 8
  %284 = add i64 %283, -5487
  %285 = add i64 %283, 5
  %286 = load i64, i64* %RSP, align 8, !tbaa !2428
  %287 = add i64 %286, -8
  %288 = inttoptr i64 %287 to i64*
  store i64 %285, i64* %288, align 8
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  store i64 %284, i64* %PC, align 8, !tbaa !2428
  %289 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %284, %struct.Memory* %326)
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -32
  %292 = load i64, i64* %PC, align 8
  store i64 %291, i64* %RDI, align 8, !tbaa !2428
  %293 = add i64 %290, -96
  %294 = add i64 %292, 8
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  %297 = add i64 %292, 11
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %RDX, align 8, !tbaa !2428
  %300 = load i64*, i64** %327, align 8
  %301 = add i64 %292, 14
  store i64 %301, i64* %PC, align 8
  store i64 %299, i64* %300, align 8
  %302 = load i64, i64* %PC, align 8
  %303 = add i64 %302, -5506
  %304 = add i64 %302, 5
  %305 = load i64, i64* %RSP, align 8, !tbaa !2428
  %306 = add i64 %305, -8
  %307 = inttoptr i64 %306 to i64*
  store i64 %304, i64* %307, align 8
  store i64 %306, i64* %RSP, align 8, !tbaa !2428
  store i64 %303, i64* %PC, align 8, !tbaa !2428
  %308 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %303, %struct.Memory* %326)
  %309 = load i64, i64* %RBP, align 8
  %310 = add i64 %309, -48
  %311 = load i64, i64* %PC, align 8
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313, align 8
  store i64 %314, i64* %RCX, align 8, !tbaa !2428
  %315 = load i64*, i64** %327, align 8
  %316 = add i64 %311, 7
  store i64 %316, i64* %PC, align 8
  store i64 %314, i64* %315, align 8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, -225
  store i64 %318, i64* %PC, align 8, !tbaa !2428
  br label %block_40518d

block_40516d:                                     ; preds = %block_405140
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -8
  store i64 %320, i64* %RDI, align 8, !tbaa !2428
  %321 = add i64 %85, -5261
  %322 = add i64 %85, 9
  %323 = load i64, i64* %RSP, align 8, !tbaa !2428
  %324 = add i64 %323, -8
  %325 = inttoptr i64 %324 to i64*
  store i64 %322, i64* %325, align 8
  store i64 %324, i64* %RSP, align 8, !tbaa !2428
  store i64 %321, i64* %PC, align 8, !tbaa !2428
  %326 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %321, %struct.Memory* %57)
  %327 = bitcast %union.anon* %3 to i64**
  %328 = load i64*, i64** %327, align 8
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC, align 8
  %331 = load i64, i64* %328, align 8
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -24
  %334 = add i64 %329, 7
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  store i64 %331, i64* %335, align 8
  %336 = load i64, i64* %RBP, align 8
  %337 = add i64 %336, -8
  %338 = load i64, i64* %PC, align 8
  %339 = add i64 %338, 4
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = add i64 %336, -32
  %343 = add i64 %338, 8
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  store i64 %341, i64* %344, align 8
  %345 = load i64, i64* %RBP, align 8
  %346 = add i64 %345, -16
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349, align 8
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = add i64 %345, -40
  %352 = add i64 %347, 8
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  store i64 %350, i64* %353, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40518d

block_4051b7:                                     ; preds = %block_405192
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -32
  store i64 %355, i64* %RDI, align 8, !tbaa !2428
  %356 = add i64 %354, -40
  store i64 %356, i64* %RSI, align 8, !tbaa !2428
  %357 = add i64 %248, 313
  %358 = add i64 %248, 23
  %359 = load i64, i64* %RSP, align 8, !tbaa !2428
  %360 = add i64 %359, -8
  %361 = inttoptr i64 %360 to i64*
  store i64 %358, i64* %361, align 8
  store i64 %360, i64* %RSP, align 8, !tbaa !2428
  store i64 %357, i64* %PC, align 8, !tbaa !2428
  %362 = tail call %struct.Memory* @sub_4052f0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %357, %struct.Memory* %326)
  %363 = load i8, i8* %AL, align 1
  %364 = load i64, i64* %PC, align 8
  %365 = and i8 %363, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %366 = zext i8 %365 to i32
  %367 = tail call i32 @llvm.ctpop.i32(i32 %366) #10
  %368 = trunc i32 %367 to i8
  %369 = xor i8 %368, 1
  store i8 %369, i8* %20, align 1, !tbaa !2446
  %370 = xor i8 %365, 1
  store i8 %370, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %371 = icmp eq i8 %370, 0
  %.v36 = select i1 %371, i64 13, i64 8
  %372 = add i64 %.v36, %364
  store i64 %372, i64* %PC, align 8, !tbaa !2428
  br i1 %371, label %block_4051db, label %block_4051d6

block_405229:                                     ; preds = %block_4051fd
  %373 = add i64 %102, 74
  br label %block_405273

block_4052c5:                                     ; preds = %block_405273, %block_405140
  %374 = phi i64 [ %85, %block_405140 ], [ %.pre34, %block_405273 ]
  %MEMORY.4 = phi %struct.Memory* [ %57, %block_405140 ], [ %212, %block_405273 ]
  %375 = load i64, i64* %RSP, align 8
  %376 = add i64 %375, 96
  store i64 %376, i64* %RSP, align 8, !tbaa !2428
  %377 = icmp ugt i64 %375, -97
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %13, align 1, !tbaa !2432
  %379 = trunc i64 %376 to i32
  %380 = and i32 %379, 255
  %381 = tail call i32 @llvm.ctpop.i32(i32 %380) #10
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  store i8 %384, i8* %20, align 1, !tbaa !2446
  %385 = xor i64 %376, %375
  %386 = lshr i64 %385, 4
  %387 = trunc i64 %386 to i8
  %388 = and i8 %387, 1
  store i8 %388, i8* %25, align 1, !tbaa !2447
  %389 = icmp eq i64 %376, 0
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %28, align 1, !tbaa !2448
  %391 = lshr i64 %376, 63
  %392 = trunc i64 %391 to i8
  store i8 %392, i8* %31, align 1, !tbaa !2449
  %393 = lshr i64 %375, 63
  %394 = xor i64 %391, %393
  %395 = add nuw nsw i64 %394, %391
  %396 = icmp eq i64 %395, 2
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %37, align 1, !tbaa !2450
  %398 = add i64 %374, 5
  store i64 %398, i64* %PC, align 8
  %399 = add i64 %375, 104
  %400 = inttoptr i64 %376 to i64*
  %401 = load i64, i64* %400, align 8
  store i64 %401, i64* %RBP, align 8, !tbaa !2428
  store i64 %399, i64* %RSP, align 8, !tbaa !2428
  %402 = add i64 %374, 6
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %399 to i64*
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %PC, align 8, !tbaa !2428
  %405 = add i64 %375, 112
  store i64 %405, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_405202:                                     ; preds = %block_4051e0
  %406 = add i64 %131, -5378
  %407 = add i64 %131, 9
  %408 = load i64, i64* %RSP, align 8, !tbaa !2428
  %409 = add i64 %408, -8
  %410 = inttoptr i64 %409 to i64*
  store i64 %407, i64* %410, align 8
  store i64 %409, i64* %RSP, align 8, !tbaa !2428
  store i64 %406, i64* %PC, align 8, !tbaa !2428
  %411 = tail call %struct.Memory* @sub_403d00__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %406, %struct.Memory* %326)
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -88
  %414 = load i64, i64* %RAX, align 8
  %415 = load i64, i64* %PC, align 8
  %416 = add i64 %415, 4
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %413 to i64*
  store i64 %414, i64* %417, align 8
  %418 = load i64, i64* %PC, align 8
  %419 = add i64 %418, -47
  br label %block_4051e0
}

; Function Attrs: noinline
define %struct.Memory* @sub_404060__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404060:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 18
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %47, -8
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = sub i64 %52, %56
  %58 = lshr i64 %57, 2
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = ashr i64 %57, 3
  store i64 %61, i64* %RSI, align 8, !tbaa !2428
  store i8 %60, i8* %12, align 1, !tbaa !2453
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #10
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %19, align 1, !tbaa !2453
  store i8 0, i8* %24, align 1, !tbaa !2453
  %68 = icmp eq i64 %61, 0
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %27, align 1, !tbaa !2453
  %70 = lshr i64 %61, 63
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %30, align 1, !tbaa !2453
  store i8 0, i8* %36, align 1, !tbaa !2453
  %72 = add i64 %47, -32
  %73 = add i64 %49, 19
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %61, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -32
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = ashr i64 %80, 63
  store i64 %81, i64* %RDX, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX, align 8
  %83 = add i64 %77, 9
  store i64 %83, i64* %PC, align 8
  %84 = sext i64 %82 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = zext i64 %81 to i128
  %87 = shl nuw i128 %86, 64
  %88 = zext i64 %80 to i128
  %89 = or i128 %87, %88
  %90 = zext i64 %82 to i128
  %91 = or i128 %85, %90
  %92 = sdiv i128 %89, %91
  %93 = trunc i128 %92 to i64
  %94 = and i128 %92, 18446744073709551615
  %95 = sext i64 %93 to i128
  %96 = and i128 %95, -18446744073709551616
  %97 = or i128 %96, %94
  %98 = icmp eq i128 %92, %97
  br i1 %98, label %101, label %99

; <label>:99:                                     ; preds = %block_404060
  %100 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %83, %struct.Memory* %2) #13
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:101:                                    ; preds = %block_404060
  %102 = srem i128 %89, %91
  %103 = trunc i128 %102 to i64
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  store i64 %103, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %101, %99
  %104 = phi i64 [ %.pre7, %99 ], [ %75, %101 ]
  %105 = phi i64 [ %.pre6, %99 ], [ %83, %101 ]
  %106 = phi i64 [ %.pre, %99 ], [ %93, %101 ]
  %107 = phi %struct.Memory* [ %100, %99 ], [ %2, %101 ]
  %108 = add i64 %106, -1
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = icmp eq i64 %106, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %12, align 1, !tbaa !2432
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = tail call i32 @llvm.ctpop.i32(i32 %112) #10
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  store i8 %116, i8* %19, align 1, !tbaa !2446
  %117 = xor i64 %108, %106
  %118 = lshr i64 %117, 4
  %119 = trunc i64 %118 to i8
  %120 = and i8 %119, 1
  store i8 %120, i8* %24, align 1, !tbaa !2447
  %121 = icmp eq i64 %108, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %27, align 1, !tbaa !2448
  %123 = lshr i64 %108, 63
  %124 = trunc i64 %123 to i8
  store i8 %124, i8* %30, align 1, !tbaa !2449
  %125 = lshr i64 %106, 63
  %126 = xor i64 %123, %125
  %127 = add nuw nsw i64 %126, %125
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %36, align 1, !tbaa !2450
  %130 = add i64 %104, -24
  %131 = add i64 %105, 8
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %108, i64* %132, align 8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %135 = bitcast i64* %134 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_40409b

block_4040fc:                                     ; preds = %block_4040f1
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %19, align 1, !tbaa !2446
  store i8 1, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  store i8 0, i8* %24, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %136 = add i64 %232, -8
  %137 = add i64 %261, 8
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RCX, align 8, !tbaa !2428
  %140 = add i64 %261, 12
  store i64 %140, i64* %PC, align 8
  %141 = load i64, i64* %235, align 8
  store i64 %141, i64* %RSI, align 8, !tbaa !2428
  %142 = shl i64 %141, 3
  %143 = add i64 %142, %139
  %144 = add i64 %261, 16
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i64*
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %RCX, align 8, !tbaa !2428
  %147 = add i64 %232, -56
  %148 = add i64 %261, 20
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %147 to i64*
  store i64 %146, i64* %149, align 8
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -8
  %152 = load i64, i64* %PC, align 8
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RCX, align 8, !tbaa !2428
  %156 = add i64 %152, 8
  store i64 %156, i64* %PC, align 8
  %157 = load i64, i64* %154, align 8
  store i64 %157, i64* %RSI, align 8, !tbaa !2428
  %158 = add i64 %150, -24
  %159 = add i64 %152, 12
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %RDI, align 8, !tbaa !2428
  %162 = inttoptr i64 %155 to i64*
  %163 = add i64 %152, 15
  store i64 %163, i64* %PC, align 8
  %164 = load i64, i64* %162, align 8
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = shl i64 %161, 3
  %166 = add i64 %165, %157
  %167 = add i64 %152, 19
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  store i64 %164, i64* %168, align 8
  %169 = load i64, i64* %RBP, align 8
  %170 = add i64 %169, -24
  %171 = load i64, i64* %PC, align 8
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173, align 8
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = add i64 %169, -8
  %176 = add i64 %171, 8
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RSI, align 8, !tbaa !2428
  %179 = add i64 %169, -56
  %180 = add i64 %171, 12
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RCX, align 8, !tbaa !2428
  %183 = add i64 %169, -64
  %184 = add i64 %171, 16
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i64*
  store i64 %182, i64* %185, align 8
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -64
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, 5
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %187 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %133, align 1, !tbaa !2451
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %192 = add i64 %188, 269
  %193 = add i64 %188, 10
  %194 = load i64, i64* %RSP, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %193, i64* %196, align 8
  store i64 %195, i64* %RSP, align 8, !tbaa !2428
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  %197 = tail call %struct.Memory* @sub_404240__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %192, %struct.Memory* %107)
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -24
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = add i64 %203, -1
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = icmp ne i64 %203, 0
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %12, align 1, !tbaa !2432
  %207 = trunc i64 %204 to i32
  %208 = and i32 %207, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #10
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %19, align 1, !tbaa !2446
  %213 = xor i64 %203, 16
  %214 = xor i64 %213, %204
  %215 = lshr i64 %214, 4
  %216 = trunc i64 %215 to i8
  %217 = and i8 %216, 1
  store i8 %217, i8* %24, align 1, !tbaa !2447
  %218 = icmp eq i64 %204, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %27, align 1, !tbaa !2448
  %220 = lshr i64 %204, 63
  %221 = trunc i64 %220 to i8
  store i8 %221, i8* %30, align 1, !tbaa !2449
  %222 = lshr i64 %203, 63
  %223 = xor i64 %220, %222
  %224 = xor i64 %220, 1
  %225 = add nuw nsw i64 %223, %224
  %226 = icmp eq i64 %225, 2
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %36, align 1, !tbaa !2450
  %228 = add i64 %200, 12
  store i64 %228, i64* %PC, align 8
  store i64 %204, i64* %202, align 8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, -88
  store i64 %230, i64* %PC, align 8, !tbaa !2428
  br label %block_4040f1

block_4040f1:                                     ; preds = %block_4040e5, %block_4040fc
  %231 = phi i64 [ %.pre9, %block_4040e5 ], [ %230, %block_4040fc ]
  %232 = load i64, i64* %RBP, align 8
  %233 = add i64 %232, -24
  %234 = add i64 %231, 5
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %233 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = add i64 %236, -1
  %238 = icmp eq i64 %236, 0
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %12, align 1, !tbaa !2432
  %240 = trunc i64 %237 to i32
  %241 = and i32 %240, 255
  %242 = tail call i32 @llvm.ctpop.i32(i32 %241) #10
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  store i8 %245, i8* %19, align 1, !tbaa !2446
  %246 = xor i64 %237, %236
  %247 = lshr i64 %246, 4
  %248 = trunc i64 %247 to i8
  %249 = and i8 %248, 1
  store i8 %249, i8* %24, align 1, !tbaa !2447
  %250 = icmp eq i64 %237, 0
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %27, align 1, !tbaa !2448
  %252 = lshr i64 %237, 63
  %253 = trunc i64 %252 to i8
  store i8 %253, i8* %30, align 1, !tbaa !2449
  %254 = lshr i64 %236, 63
  %255 = xor i64 %252, %254
  %256 = add nuw nsw i64 %255, %254
  %257 = icmp eq i64 %256, 2
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %36, align 1, !tbaa !2450
  %259 = icmp ne i8 %253, 0
  %260 = xor i1 %259, %257
  %.v10 = select i1 %260, i64 93, i64 11
  %261 = add i64 %.v10, %231
  store i64 %261, i64* %PC, align 8, !tbaa !2428
  br i1 %260, label %block_40414e, label %block_4040fc

block_40414e:                                     ; preds = %block_4040f1
  %262 = load i64, i64* %RSP, align 8
  %263 = add i64 %262, 64
  store i64 %263, i64* %RSP, align 8, !tbaa !2428
  %264 = icmp ugt i64 %262, -65
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = trunc i64 %263 to i32
  %267 = and i32 %266, 255
  %268 = tail call i32 @llvm.ctpop.i32(i32 %267) #10
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  store i8 %271, i8* %19, align 1, !tbaa !2446
  %272 = xor i64 %263, %262
  %273 = lshr i64 %272, 4
  %274 = trunc i64 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %24, align 1, !tbaa !2447
  %276 = icmp eq i64 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %27, align 1, !tbaa !2448
  %278 = lshr i64 %263, 63
  %279 = trunc i64 %278 to i8
  store i8 %279, i8* %30, align 1, !tbaa !2449
  %280 = lshr i64 %262, 63
  %281 = xor i64 %278, %280
  %282 = add nuw nsw i64 %281, %278
  %283 = icmp eq i64 %282, 2
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %36, align 1, !tbaa !2450
  %285 = add i64 %261, 5
  store i64 %285, i64* %PC, align 8
  %286 = add i64 %262, 72
  %287 = inttoptr i64 %263 to i64*
  %288 = load i64, i64* %287, align 8
  store i64 %288, i64* %RBP, align 8, !tbaa !2428
  store i64 %286, i64* %RSP, align 8, !tbaa !2428
  %289 = add i64 %261, 6
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %286 to i64*
  %291 = load i64, i64* %290, align 8
  store i64 %291, i64* %PC, align 8, !tbaa !2428
  %292 = add i64 %262, 80
  store i64 %292, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %107

block_40409b:                                     ; preds = %block_4040a6, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %293 = phi i64 [ %390, %block_4040a6 ], [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %294 = load i64, i64* %RBP, align 8
  %295 = add i64 %294, -24
  %296 = add i64 %293, 5
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %299 = trunc i64 %298 to i32
  %300 = and i32 %299, 255
  %301 = tail call i32 @llvm.ctpop.i32(i32 %300) #10
  %302 = trunc i32 %301 to i8
  %303 = and i8 %302, 1
  %304 = xor i8 %303, 1
  store i8 %304, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  %305 = icmp eq i64 %298, 0
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %27, align 1, !tbaa !2448
  %307 = lshr i64 %298, 63
  %308 = trunc i64 %307 to i8
  store i8 %308, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  %309 = icmp ne i8 %308, 0
  %.v = select i1 %309, i64 69, i64 6
  %310 = add i64 %.v, %296
  store i64 %310, i64* %PC, align 8, !tbaa !2428
  br i1 %309, label %block_4040e5, label %block_4040a6

block_4040a6:                                     ; preds = %block_40409b
  %311 = add i64 %294, -8
  %312 = add i64 %310, 4
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  store i64 %314, i64* %RAX, align 8, !tbaa !2428
  %315 = add i64 %310, 8
  store i64 %315, i64* %PC, align 8
  %316 = load i64, i64* %297, align 8
  store i64 %316, i64* %RCX, align 8, !tbaa !2428
  %317 = shl i64 %316, 3
  %318 = add i64 %317, %314
  %319 = add i64 %310, 12
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = add i64 %294, -40
  %323 = add i64 %310, 16
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i64*
  store i64 %321, i64* %324, align 8
  %325 = load i64, i64* %RBP, align 8
  %326 = add i64 %325, -32
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %326 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %325, -8
  %332 = add i64 %327, 8
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %RSI, align 8, !tbaa !2428
  %335 = add i64 %325, -24
  %336 = add i64 %327, 12
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %RDX, align 8, !tbaa !2428
  %339 = add i64 %325, -40
  %340 = add i64 %327, 16
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %325, -48
  %344 = add i64 %327, 20
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %343 to i64*
  store i64 %342, i64* %345, align 8
  %346 = load i64, i64* %RBP, align 8
  %347 = add i64 %346, -48
  %348 = load i64, i64* %PC, align 8
  %349 = add i64 %348, 5
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350, align 8
  store i64 %351, i64* %133, align 1, !tbaa !2451
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %352 = add i64 %348, 374
  %353 = add i64 %348, 10
  %354 = load i64, i64* %RSP, align 8, !tbaa !2428
  %355 = add i64 %354, -8
  %356 = inttoptr i64 %355 to i64*
  store i64 %353, i64* %356, align 8
  store i64 %355, i64* %RSP, align 8, !tbaa !2428
  store i64 %352, i64* %PC, align 8, !tbaa !2428
  %357 = tail call %struct.Memory* @sub_404240__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %352, %struct.Memory* %107)
  %358 = load i64, i64* %RBP, align 8
  %359 = add i64 %358, -24
  %360 = load i64, i64* %PC, align 8
  %361 = add i64 %360, 4
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %359 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = add i64 %363, -1
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = icmp ne i64 %363, 0
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %12, align 1, !tbaa !2432
  %367 = trunc i64 %364 to i32
  %368 = and i32 %367, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #10
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %19, align 1, !tbaa !2446
  %373 = xor i64 %363, 16
  %374 = xor i64 %373, %364
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %24, align 1, !tbaa !2447
  %378 = icmp eq i64 %364, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %27, align 1, !tbaa !2448
  %380 = lshr i64 %364, 63
  %381 = trunc i64 %380 to i8
  store i8 %381, i8* %30, align 1, !tbaa !2449
  %382 = lshr i64 %363, 63
  %383 = xor i64 %380, %382
  %384 = xor i64 %380, 1
  %385 = add nuw nsw i64 %383, %384
  %386 = icmp eq i64 %385, 2
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %36, align 1, !tbaa !2450
  %388 = add i64 %360, 12
  store i64 %388, i64* %PC, align 8
  store i64 %364, i64* %362, align 8
  %389 = load i64, i64* %PC, align 8
  %390 = add i64 %389, -69
  store i64 %390, i64* %PC, align 8, !tbaa !2428
  br label %block_40409b

block_4040e5:                                     ; preds = %block_40409b
  %391 = add i64 %294, -32
  %392 = add i64 %310, 4
  store i64 %392, i64* %PC, align 8
  %393 = inttoptr i64 %391 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = add i64 %394, -1
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = icmp eq i64 %394, 0
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %12, align 1, !tbaa !2432
  %398 = trunc i64 %395 to i32
  %399 = and i32 %398, 255
  %400 = tail call i32 @llvm.ctpop.i32(i32 %399) #10
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  %403 = xor i8 %402, 1
  store i8 %403, i8* %19, align 1, !tbaa !2446
  %404 = xor i64 %395, %394
  %405 = lshr i64 %404, 4
  %406 = trunc i64 %405 to i8
  %407 = and i8 %406, 1
  store i8 %407, i8* %24, align 1, !tbaa !2447
  %408 = icmp eq i64 %395, 0
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %27, align 1, !tbaa !2448
  %410 = lshr i64 %395, 63
  %411 = trunc i64 %410 to i8
  store i8 %411, i8* %30, align 1, !tbaa !2449
  %412 = lshr i64 %394, 63
  %413 = xor i64 %410, %412
  %414 = add nuw nsw i64 %413, %412
  %415 = icmp eq i64 %414, 2
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %36, align 1, !tbaa !2450
  %417 = add i64 %310, 12
  store i64 %417, i64* %PC, align 8
  store i64 %395, i64* %297, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_4040f1
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e80__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405e80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405ea0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_405320__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #7 {
block_405320:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = icmp eq i64 %60, 0
  %62 = zext i1 %61 to i8
  %63 = lshr i64 %60, 63
  %64 = add nsw i64 %60, -1
  store i8 %62, i8* %13, align 1, !tbaa !2432
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #10
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i64 %64, %60
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2447
  %75 = icmp eq i64 %64, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2448
  %77 = lshr i64 %64, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2449
  %79 = xor i64 %77, %63
  %80 = add nuw nsw i64 %79, %63
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2450
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 266, i64 25
  %86 = add i64 %.v, %51
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_40543a, label %block_405349

block_4053e4:                                     ; preds = %block_4053c0
  %87 = add i64 %340, 46
  br label %block_405412

block_405369:                                     ; preds = %block_405364, %block_405369
  %.sink4 = phi i64 [ %431, %block_405364 ], [ %137, %block_405369 ]
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -24
  store i64 %89, i64* %RDI, align 8, !tbaa !2428
  %90 = add i64 %88, -40
  %91 = add i64 %.sink4, 8
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, -8
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = icmp ugt i64 %93, 7
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %13, align 1, !tbaa !2432
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #10
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %20, align 1, !tbaa !2446
  %103 = xor i64 %93, 16
  %104 = xor i64 %103, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %26, align 1, !tbaa !2447
  %108 = icmp eq i64 %94, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %29, align 1, !tbaa !2448
  %110 = lshr i64 %94, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %32, align 1, !tbaa !2449
  %112 = lshr i64 %93, 63
  %113 = xor i64 %110, %112
  %114 = xor i64 %110, 1
  %115 = add nuw nsw i64 %113, %114
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %38, align 1, !tbaa !2450
  %118 = add i64 %.sink4, 16
  store i64 %118, i64* %PC, align 8
  store i64 %94, i64* %92, align 8
  %119 = load i64, i64* %RAX, align 8
  %120 = load i64, i64* %PC, align 8
  store i64 %119, i64* %RSI, align 8, !tbaa !2428
  %121 = add i64 %120, -8473
  %122 = add i64 %120, 8
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %2)
  %127 = load i8, i8* %AL, align 1
  %128 = load i64, i64* %PC, align 8
  %129 = and i8 %127, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %130 = zext i8 %129 to i32
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #10
  %132 = trunc i32 %131 to i8
  %133 = xor i8 %132, 1
  store i8 %133, i8* %20, align 1, !tbaa !2446
  %134 = xor i8 %129, 1
  store i8 %134, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %135 = icmp eq i8 %134, 0
  %.v32 = select i1 %135, i64 13, i64 8
  %136 = add i64 %.v32, %128
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %137 = add i64 %136, -37
  br i1 %135, label %block_405369, label %block_405389

block_4053e9:                                     ; preds = %block_4053c0
  %138 = add i64 %340, 4
  store i64 %138, i64* %PC, align 8
  %139 = load i64, i64* %313, align 8
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = add i64 %340, 7
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %RAX, align 8, !tbaa !2428
  %143 = add i64 %306, -48
  %144 = add i64 %340, 11
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i64*
  store i64 %142, i64* %145, align 8
  %146 = load i64, i64* %RBP, align 8
  %147 = add i64 %146, -32
  %148 = load i64, i64* %PC, align 8
  %149 = add i64 %148, 4
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %147 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  %152 = add i64 %146, -40
  %153 = add i64 %148, 8
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RCX, align 8, !tbaa !2428
  %156 = inttoptr i64 %151 to i64*
  %157 = add i64 %148, 11
  store i64 %157, i64* %PC, align 8
  %158 = load i64, i64* %156, align 8
  store i64 %158, i64* %RAX, align 8, !tbaa !2428
  %.cast = inttoptr i64 %155 to i64*
  %159 = add i64 %148, 14
  store i64 %159, i64* %PC, align 8
  store i64 %158, i64* %.cast, align 8
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -32
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = add i64 %160, -48
  %167 = add i64 %162, 8
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RCX, align 8, !tbaa !2428
  %170 = inttoptr i64 %165 to i64*
  %171 = add i64 %162, 11
  store i64 %171, i64* %PC, align 8
  store i64 %169, i64* %170, align 8
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, -169
  store i64 %173, i64* %PC, align 8, !tbaa !2428
  br label %block_405364

block_405412:                                     ; preds = %block_4053a1, %block_4053e4
  %174 = phi i64 [ %249, %block_4053a1 ], [ %306, %block_4053e4 ]
  %.sink = phi i64 [ %429, %block_4053a1 ], [ %87, %block_4053e4 ]
  %175 = add i64 %174, -8
  %176 = add i64 %.sink, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %174, -40
  %180 = add i64 %.sink, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = add i64 %182, 8
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = icmp ugt i64 %182, -9
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %13, align 1, !tbaa !2432
  %186 = trunc i64 %183 to i32
  %187 = and i32 %186, 255
  %188 = tail call i32 @llvm.ctpop.i32(i32 %187) #10
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  store i8 %191, i8* %20, align 1, !tbaa !2446
  %192 = xor i64 %183, %182
  %193 = lshr i64 %192, 4
  %194 = trunc i64 %193 to i8
  %195 = and i8 %194, 1
  store i8 %195, i8* %26, align 1, !tbaa !2447
  %196 = icmp eq i64 %183, 0
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %29, align 1, !tbaa !2448
  %198 = lshr i64 %183, 63
  %199 = trunc i64 %198 to i8
  store i8 %199, i8* %32, align 1, !tbaa !2449
  %200 = lshr i64 %182, 63
  %201 = xor i64 %198, %200
  %202 = add nuw nsw i64 %201, %198
  %203 = icmp eq i64 %202, 2
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %38, align 1, !tbaa !2450
  store i64 %183, i64* %RSI, align 8, !tbaa !2428
  %205 = add i64 %.sink, -242
  %206 = add i64 %.sink, 20
  %207 = load i64, i64* %RSP, align 8, !tbaa !2428
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %209, align 8
  store i64 %208, i64* %RSP, align 8, !tbaa !2428
  store i64 %205, i64* %PC, align 8, !tbaa !2428
  %210 = tail call %struct.Memory* @sub_405320__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %205, %struct.Memory* %2)
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -40
  %213 = load i64, i64* %PC, align 8
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = add i64 %216, 8
  store i64 %217, i64* %RAX, align 8, !tbaa !2428
  %218 = icmp ugt i64 %216, -9
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %13, align 1, !tbaa !2432
  %220 = trunc i64 %217 to i32
  %221 = and i32 %220, 255
  %222 = tail call i32 @llvm.ctpop.i32(i32 %221) #10
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  store i8 %225, i8* %20, align 1, !tbaa !2446
  %226 = xor i64 %217, %216
  %227 = lshr i64 %226, 4
  %228 = trunc i64 %227 to i8
  %229 = and i8 %228, 1
  store i8 %229, i8* %26, align 1, !tbaa !2447
  %230 = icmp eq i64 %217, 0
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %29, align 1, !tbaa !2448
  %232 = lshr i64 %217, 63
  %233 = trunc i64 %232 to i8
  store i8 %233, i8* %32, align 1, !tbaa !2449
  %234 = lshr i64 %216, 63
  %235 = xor i64 %232, %234
  %236 = add nuw nsw i64 %235, %232
  %237 = icmp eq i64 %236, 2
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %38, align 1, !tbaa !2450
  %239 = add i64 %211, -16
  %240 = add i64 %213, 12
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241, align 8
  store i64 %242, i64* %RSI, align 8, !tbaa !2428
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %213, -262
  %244 = add i64 %213, 20
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call %struct.Memory* @sub_405320__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %243, %struct.Memory* %210)
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_40543a

block_405389:                                     ; preds = %block_405369
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -32
  %251 = add i64 %136, 14
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = add i64 %249, -40
  %255 = add i64 %136, 18
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = sub i64 %253, %257
  %259 = icmp ult i64 %253, %257
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %13, align 1, !tbaa !2432
  %261 = trunc i64 %258 to i32
  %262 = and i32 %261, 255
  %263 = tail call i32 @llvm.ctpop.i32(i32 %262) #10
  %264 = trunc i32 %263 to i8
  %265 = and i8 %264, 1
  %266 = xor i8 %265, 1
  store i8 %266, i8* %20, align 1, !tbaa !2446
  %267 = xor i64 %257, %253
  %268 = xor i64 %267, %258
  %269 = lshr i64 %268, 4
  %270 = trunc i64 %269 to i8
  %271 = and i8 %270, 1
  store i8 %271, i8* %26, align 1, !tbaa !2447
  %272 = icmp eq i64 %258, 0
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %29, align 1, !tbaa !2448
  %274 = lshr i64 %258, 63
  %275 = trunc i64 %274 to i8
  store i8 %275, i8* %32, align 1, !tbaa !2449
  %276 = lshr i64 %253, 63
  %277 = lshr i64 %257, 63
  %278 = xor i64 %277, %276
  %279 = xor i64 %274, %276
  %280 = add nuw nsw i64 %279, %278
  %281 = icmp eq i64 %280, 2
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %38, align 1, !tbaa !2450
  %.v33 = select i1 %259, i64 29, i64 24
  %283 = add i64 %.v33, %136
  store i64 %283, i64* %PC, align 8, !tbaa !2428
  br i1 %259, label %block_4053a6, label %block_4053a1

block_4053ab:                                     ; preds = %block_4053c5, %block_4053a6
  %284 = phi i64 [ %.pre30, %block_4053c5 ], [ %249, %block_4053a6 ]
  %.sink8 = phi i64 [ %395, %block_4053c5 ], [ %367, %block_4053a6 ]
  %285 = add i64 %284, -24
  store i64 %285, i64* %RSI, align 8, !tbaa !2428
  %286 = add i64 %284, -32
  %287 = add i64 %.sink8, 8
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to i64*
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %RDI, align 8, !tbaa !2428
  %290 = add i64 %.sink8, -8523
  %291 = add i64 %.sink8, 13
  %292 = load i64, i64* %RSP, align 8, !tbaa !2428
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %291, i64* %294, align 8
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  store i64 %290, i64* %PC, align 8, !tbaa !2428
  %295 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %290, %struct.Memory* %2)
  %296 = load i8, i8* %AL, align 1
  %297 = load i64, i64* %PC, align 8
  %298 = and i8 %296, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %299 = zext i8 %298 to i32
  %300 = tail call i32 @llvm.ctpop.i32(i32 %299) #10
  %301 = trunc i32 %300 to i8
  %302 = xor i8 %301, 1
  store i8 %302, i8* %20, align 1, !tbaa !2446
  %303 = xor i8 %298, 1
  store i8 %303, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %304 = icmp eq i8 %303, 0
  %.v34 = select i1 %304, i64 13, i64 8
  %305 = add i64 %.v34, %297
  store i64 %305, i64* %PC, align 8, !tbaa !2428
  %306 = load i64, i64* %RBP, align 8
  %307 = add i64 %306, -32
  br i1 %304, label %block_4053c5, label %block_4053c0

block_4053c0:                                     ; preds = %block_4053ab
  %308 = add i64 %305, 26
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i64*
  %310 = load i64, i64* %309, align 8
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = add i64 %306, -40
  %312 = add i64 %305, 30
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = sub i64 %310, %314
  %316 = icmp ult i64 %310, %314
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %13, align 1, !tbaa !2432
  %318 = trunc i64 %315 to i32
  %319 = and i32 %318, 255
  %320 = tail call i32 @llvm.ctpop.i32(i32 %319) #10
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  store i8 %323, i8* %20, align 1, !tbaa !2446
  %324 = xor i64 %314, %310
  %325 = xor i64 %324, %315
  %326 = lshr i64 %325, 4
  %327 = trunc i64 %326 to i8
  %328 = and i8 %327, 1
  store i8 %328, i8* %26, align 1, !tbaa !2447
  %329 = icmp eq i64 %315, 0
  %330 = zext i1 %329 to i8
  store i8 %330, i8* %29, align 1, !tbaa !2448
  %331 = lshr i64 %315, 63
  %332 = trunc i64 %331 to i8
  store i8 %332, i8* %32, align 1, !tbaa !2449
  %333 = lshr i64 %310, 63
  %334 = lshr i64 %314, 63
  %335 = xor i64 %334, %333
  %336 = xor i64 %331, %333
  %337 = add nuw nsw i64 %336, %335
  %338 = icmp eq i64 %337, 2
  %339 = zext i1 %338 to i8
  store i8 %339, i8* %38, align 1, !tbaa !2450
  %.v35 = select i1 %316, i64 41, i64 36
  %340 = add i64 %.v35, %305
  store i64 %340, i64* %PC, align 8, !tbaa !2428
  br i1 %316, label %block_4053e9, label %block_4053e4

block_405349:                                     ; preds = %block_405320
  %341 = add i64 %86, 4
  store i64 %341, i64* %PC, align 8
  %342 = load i64, i64* %57, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %86, 7
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = add i64 %49, -24
  %347 = add i64 %86, 11
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %346 to i64*
  store i64 %345, i64* %348, align 8
  %349 = load i64, i64* %RBP, align 8
  %350 = add i64 %349, -8
  %351 = load i64, i64* %PC, align 8
  %352 = add i64 %351, 4
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %350 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %RAX, align 8, !tbaa !2428
  %355 = add i64 %349, -32
  %356 = add i64 %351, 8
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  store i64 %354, i64* %357, align 8
  %358 = load i64, i64* %RBP, align 8
  %359 = add i64 %358, -16
  %360 = load i64, i64* %PC, align 8
  %361 = add i64 %360, 4
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %359 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = add i64 %358, -40
  %365 = add i64 %360, 8
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i64*
  store i64 %363, i64* %366, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405364

block_4053a6:                                     ; preds = %block_405389
  %367 = add i64 %283, 5
  br label %block_4053ab

block_4053c5:                                     ; preds = %block_4053ab
  %368 = add i64 %305, 4
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %307 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = add i64 %370, 8
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = icmp ugt i64 %370, -9
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %13, align 1, !tbaa !2432
  %374 = trunc i64 %371 to i32
  %375 = and i32 %374, 255
  %376 = tail call i32 @llvm.ctpop.i32(i32 %375) #10
  %377 = trunc i32 %376 to i8
  %378 = and i8 %377, 1
  %379 = xor i8 %378, 1
  store i8 %379, i8* %20, align 1, !tbaa !2446
  %380 = xor i64 %371, %370
  %381 = lshr i64 %380, 4
  %382 = trunc i64 %381 to i8
  %383 = and i8 %382, 1
  store i8 %383, i8* %26, align 1, !tbaa !2447
  %384 = icmp eq i64 %371, 0
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %29, align 1, !tbaa !2448
  %386 = lshr i64 %371, 63
  %387 = trunc i64 %386 to i8
  store i8 %387, i8* %32, align 1, !tbaa !2449
  %388 = lshr i64 %370, 63
  %389 = xor i64 %386, %388
  %390 = add nuw nsw i64 %389, %386
  %391 = icmp eq i64 %390, 2
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %38, align 1, !tbaa !2450
  %393 = add i64 %305, 12
  store i64 %393, i64* %PC, align 8
  store i64 %371, i64* %369, align 8
  %394 = load i64, i64* %PC, align 8
  %395 = add i64 %394, -38
  %.pre30 = load i64, i64* %RBP, align 8
  br label %block_4053ab

block_40543a:                                     ; preds = %block_405412, %block_405320
  %396 = phi i64 [ %86, %block_405320 ], [ %.pre31, %block_405412 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_405320 ], [ %248, %block_405412 ]
  %397 = load i64, i64* %RSP, align 8
  %398 = add i64 %397, 48
  store i64 %398, i64* %RSP, align 8, !tbaa !2428
  %399 = icmp ugt i64 %397, -49
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %13, align 1, !tbaa !2432
  %401 = trunc i64 %398 to i32
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #10
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %20, align 1, !tbaa !2446
  %407 = xor i64 %397, 16
  %408 = xor i64 %407, %398
  %409 = lshr i64 %408, 4
  %410 = trunc i64 %409 to i8
  %411 = and i8 %410, 1
  store i8 %411, i8* %26, align 1, !tbaa !2447
  %412 = icmp eq i64 %398, 0
  %413 = zext i1 %412 to i8
  store i8 %413, i8* %29, align 1, !tbaa !2448
  %414 = lshr i64 %398, 63
  %415 = trunc i64 %414 to i8
  store i8 %415, i8* %32, align 1, !tbaa !2449
  %416 = lshr i64 %397, 63
  %417 = xor i64 %414, %416
  %418 = add nuw nsw i64 %417, %414
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  store i8 %420, i8* %38, align 1, !tbaa !2450
  %421 = add i64 %396, 5
  store i64 %421, i64* %PC, align 8
  %422 = add i64 %397, 56
  %423 = inttoptr i64 %398 to i64*
  %424 = load i64, i64* %423, align 8
  store i64 %424, i64* %RBP, align 8, !tbaa !2428
  store i64 %422, i64* %RSP, align 8, !tbaa !2428
  %425 = add i64 %396, 6
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %422 to i64*
  %427 = load i64, i64* %426, align 8
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  %428 = add i64 %397, 64
  store i64 %428, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_4053a1:                                     ; preds = %block_405389
  %429 = add i64 %283, 113
  br label %block_405412

block_405364:                                     ; preds = %block_405349, %block_4053e9
  %430 = phi i64 [ %.pre, %block_405349 ], [ %173, %block_4053e9 ]
  %431 = add i64 %430, 5
  br label %block_405369
}

; Function Attrs: noinline
define %struct.Memory* @sub_406260__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406260:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_4062c0__ZplIdE12ValueWrapperIT_ERKS2_S4__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 134
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406310__ZN12ValueWrapperIS_IdEEC2IS0_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404fd0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404fd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #10
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2447
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2448
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2450
  store i64 %23, i64* %21, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -8
  %55 = add i64 %16, 18
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %16, 19
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %16, 20
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405ee0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405ee0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405f00__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401230__Z5timerv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401230:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %11, -2897
  %13 = add i64 %11, 8
  %14 = add i64 %8, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %13, i64* %15, align 8
  store i64 %14, i64* %7, align 8, !tbaa !2428
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %16 = tail call fastcc %struct.Memory* @ext_4006e0_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %17 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %18 = load i64, i64* %PC, align 8
  %19 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 8) to double*), align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %21 = load i64, i64* %RAX, align 8
  store i64 %21, i64* bitcast (%end_time_type* @end_time to i64*), align 8
  %22 = load i64, i64* bitcast (%start_time_type* @start_time to i64*), align 8
  %23 = sub i64 %21, %22
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ult i64 %21, %22
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #10
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, %21
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2447
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2448
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = lshr i64 %21, 63
  %47 = lshr i64 %22, 63
  %48 = xor i64 %47, %46
  %49 = xor i64 %43, %46
  %50 = add nuw nsw i64 %49, %48
  %51 = icmp eq i64 %50, 2
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = sitofp i64 %23 to double
  %55 = bitcast %union.VectorReg* %4 to double*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to <2 x i32>*
  %58 = load <2 x i32>, <2 x i32>* %57, align 1
  %59 = fdiv double %54, %19
  store double %59, double* %55, align 1, !tbaa !2451
  %.cast = bitcast double %59 to <2 x i32>
  %60 = extractelement <2 x i32> %.cast, i32 0
  %61 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %60, i32* %61, align 1, !tbaa !2454
  %62 = extractelement <2 x i32> %.cast, i32 1
  %63 = getelementptr inbounds i8, i8* %17, i64 4
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1, !tbaa !2454
  %65 = extractelement <2 x i32> %58, i32 0
  %66 = bitcast i64* %20 to i32*
  store i32 %65, i32* %66, align 1, !tbaa !2454
  %67 = extractelement <2 x i32> %58, i32 1
  %68 = getelementptr inbounds i8, i8* %17, i64 12
  %69 = bitcast i8* %68 to i32*
  store i32 %67, i32* %69, align 1, !tbaa !2454
  %70 = add i64 %18, 45
  store i64 %70, i64* %PC, align 8
  %71 = load i64, i64* %7, align 8, !tbaa !2428
  %72 = add i64 %71, 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %RBP, align 8, !tbaa !2428
  store i64 %72, i64* %7, align 8, !tbaa !2428
  %75 = add i64 %18, 46
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %72 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %78 = add i64 %71, 16
  store i64 %78, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %16
}

; Function Attrs: noinline
define %struct.Memory* @sub_4031a0__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4031a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4031d0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405e00__Z9check_sumd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405e00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 16) to i64*), align 16
  %41 = bitcast %union.VectorReg* %4 to double*
  %42 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %40, i64* %42, align 1, !tbaa !2451
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %44 = bitcast i64* %43 to double*
  store double 0.000000e+00, double* %44, align 1, !tbaa !2451
  %45 = add i64 %7, -16
  %46 = add i64 %10, 20
  store i64 %46, i64* %PC, align 8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %48 = load i64, i64* %47, align 1
  %49 = inttoptr i64 %45 to i64*
  store i64 %48, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %47, align 1, !tbaa !2451
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to double*
  store double 0.000000e+00, double* %57, align 1, !tbaa !2451
  %58 = load double, double* %41, align 1
  %59 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
  %60 = fmul double %58, %59
  store double %60, double* %41, align 1, !tbaa !2451
  %61 = add i64 %52, 18
  store i64 %61, i64* %PC, align 8
  %62 = bitcast i64 %55 to double
  %63 = fcmp uno double %62, %60
  br i1 %63, label %64, label %74

; <label>:64:                                     ; preds = %block_405e00
  %65 = fadd double %62, %60
  %66 = bitcast double %65 to i64
  %67 = and i64 %66, 9221120237041090560
  %68 = icmp eq i64 %67, 9218868437227405312
  %69 = and i64 %66, 2251799813685247
  %70 = icmp ne i64 %69, 0
  %71 = and i1 %68, %70
  br i1 %71, label %72, label %80

; <label>:72:                                     ; preds = %64
  %73 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %61, %struct.Memory* %2) #13
  %.pre = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:74:                                     ; preds = %block_405e00
  %75 = fcmp ogt double %62, %60
  br i1 %75, label %80, label %76

; <label>:76:                                     ; preds = %74
  %77 = fcmp olt double %62, %60
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %76
  %79 = fcmp oeq double %62, %60
  br i1 %79, label %80, label %84

; <label>:80:                                     ; preds = %78, %76, %74, %64
  %81 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 1, %78 ], [ 1, %64 ]
  %82 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 0, %78 ], [ 1, %64 ]
  %83 = phi i8 [ 0, %74 ], [ 1, %76 ], [ 0, %78 ], [ 1, %64 ]
  store i8 %81, i8* %30, align 1, !tbaa !2453
  store i8 %82, i8* %21, align 1, !tbaa !2453
  store i8 %83, i8* %14, align 1, !tbaa !2453
  br label %84

; <label>:84:                                     ; preds = %80, %78
  store i8 0, i8* %39, align 1, !tbaa !2453
  store i8 0, i8* %33, align 1, !tbaa !2453
  store i8 0, i8* %27, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %84, %72
  %85 = phi i64 [ %.pre, %72 ], [ %61, %84 ]
  %86 = phi %struct.Memory* [ %73, %72 ], [ %2, %84 ]
  %87 = add i64 %85, 17
  %88 = add i64 %85, 6
  %89 = load i8, i8* %30, align 1, !tbaa !2448
  %90 = icmp eq i8 %89, 0
  %91 = select i1 %90, i64 %87, i64 %88
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  br i1 %90, label %block_405e38, label %block_405e2d

block_405e53:                                     ; preds = %block_405e38, %block_405e33
  %92 = phi i64 [ %.pre2, %block_405e38 ], [ %125, %block_405e33 ]
  %MEMORY.0 = phi %struct.Memory* [ %138, %block_405e38 ], [ %86, %block_405e33 ]
  %93 = load i64, i64* %RSP, align 8
  %94 = add i64 %93, 16
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %95 = icmp ugt i64 %93, -17
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %14, align 1, !tbaa !2432
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #10
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %21, align 1, !tbaa !2446
  %103 = xor i64 %93, 16
  %104 = xor i64 %103, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %27, align 1, !tbaa !2447
  %108 = icmp eq i64 %94, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %30, align 1, !tbaa !2448
  %110 = lshr i64 %94, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %33, align 1, !tbaa !2449
  %112 = lshr i64 %93, 63
  %113 = xor i64 %110, %112
  %114 = add nuw nsw i64 %113, %110
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %39, align 1, !tbaa !2450
  %117 = add i64 %92, 5
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %93, 24
  %119 = inttoptr i64 %94 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RBP, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %92, 6
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %118 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %PC, align 8, !tbaa !2428
  %124 = add i64 %93, 32
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405e33:                                     ; preds = %block_405e2d
  %125 = add i64 %128, 32
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  br label %block_405e53

block_405e2d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %126 = load i8, i8* %21, align 1, !tbaa !2446
  %127 = icmp ne i8 %126, 0
  %.v = select i1 %127, i64 11, i64 6
  %128 = add i64 %.v, %91
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %129 = icmp eq i8 %126, 1
  br i1 %129, label %block_405e38, label %block_405e33

block_405e38:                                     ; preds = %block_405e2d, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %130 = phi i64 [ %128, %block_405e2d ], [ %87, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1033), i64* %RDI, align 8, !tbaa !2428
  %131 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %132 = zext i32 %131 to i64
  store i64 %132, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %133 = add i64 %130, -22328
  %134 = add i64 %130, 24
  %135 = load i64, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %135, -8
  %137 = inttoptr i64 %136 to i64*
  store i64 %134, i64* %137, align 8
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %138 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %86)
  %139 = load i64, i64* %RBP, align 8
  %140 = add i64 %139, -12
  %141 = load i32, i32* %EAX, align 4
  %142 = load i64, i64* %PC, align 8
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %140 to i32*
  store i32 %141, i32* %144, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_405e53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4021c0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4021c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_4021d4

block_4021e2:                                     ; preds = %block_4021d4
  %54 = add i64 %159, -32
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %193, 8
  store i64 %55, i64* %PC, align 8
  %56 = load i64, i64* %162, align 8
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %56, 8
  store i64 %57, i64* %RCX, align 8, !tbaa !2428
  %58 = icmp ugt i64 %56, -9
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %12, align 1, !tbaa !2432
  %60 = trunc i64 %57 to i32
  %61 = and i32 %60, 255
  %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #10
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  store i8 %65, i8* %19, align 1, !tbaa !2446
  %66 = xor i64 %57, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %24, align 1, !tbaa !2447
  %70 = icmp eq i64 %57, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %27, align 1, !tbaa !2448
  %72 = lshr i64 %57, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %30, align 1, !tbaa !2449
  %74 = lshr i64 %56, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %36, align 1, !tbaa !2450
  %79 = add i64 %193, 19
  store i64 %79, i64* %PC, align 8
  store i64 %57, i64* %162, align 8
  %80 = load i64, i64* %RAX, align 8
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RSI, align 8, !tbaa !2428
  %82 = add i64 %81, -1157
  %83 = add i64 %81, 8
  %84 = load i64, i64* %RSP, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86, align 8
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  store i64 %82, i64* %PC, align 8, !tbaa !2428
  %87 = tail call %struct.Memory* @sub_401d70__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %82, %struct.Memory* %2)
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -24
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = add i64 %93, 8
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = icmp ugt i64 %93, -9
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %12, align 1, !tbaa !2432
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #10
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %19, align 1, !tbaa !2446
  %103 = xor i64 %94, %93
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %24, align 1, !tbaa !2447
  %107 = icmp eq i64 %94, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %27, align 1, !tbaa !2448
  %109 = lshr i64 %94, 63
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %30, align 1, !tbaa !2449
  %111 = lshr i64 %93, 63
  %112 = xor i64 %109, %111
  %113 = add nuw nsw i64 %112, %109
  %114 = icmp eq i64 %113, 2
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %36, align 1, !tbaa !2450
  %116 = add i64 %90, 15
  store i64 %116, i64* %PC, align 8
  store i64 %94, i64* %92, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -32
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i64*, i64** %53, align 8
  %124 = add i64 %119, 7
  store i64 %124, i64* %PC, align 8
  store i64 %122, i64* %123, align 8
  %125 = load i64, i64* %PC, align 8
  %126 = add i64 %125, -63
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_4021d4

block_402218:                                     ; preds = %block_4021d4
  %127 = load i64, i64* %RSP, align 8
  %128 = add i64 %127, 32
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %129 = icmp ugt i64 %127, -33
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %12, align 1, !tbaa !2432
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #10
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %19, align 1, !tbaa !2446
  %137 = xor i64 %128, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %24, align 1, !tbaa !2447
  %141 = icmp eq i64 %128, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !2448
  %143 = lshr i64 %128, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %30, align 1, !tbaa !2449
  %145 = lshr i64 %127, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %36, align 1, !tbaa !2450
  %150 = add i64 %193, 5
  store i64 %150, i64* %PC, align 8
  %151 = add i64 %127, 40
  %152 = inttoptr i64 %128 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RBP, align 8, !tbaa !2428
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %193, 6
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %157 = add i64 %127, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4021d4:                                     ; preds = %block_4021e2, %block_4021c0
  %158 = phi i64 [ %126, %block_4021e2 ], [ %.pre, %block_4021c0 ]
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -8
  %161 = add i64 %158, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %159, -16
  %165 = add i64 %158, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %163, %167
  %169 = icmp ult i64 %163, %167
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %12, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #10
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %19, align 1, !tbaa !2446
  %177 = xor i64 %167, %163
  %178 = xor i64 %177, %168
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %24, align 1, !tbaa !2447
  %182 = icmp eq i64 %168, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %27, align 1, !tbaa !2448
  %184 = lshr i64 %168, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %30, align 1, !tbaa !2449
  %186 = lshr i64 %163, 63
  %187 = lshr i64 %167, 63
  %188 = xor i64 %187, %186
  %189 = xor i64 %184, %186
  %190 = add nuw nsw i64 %189, %188
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %36, align 1, !tbaa !2450
  %.v = select i1 %182, i64 68, i64 14
  %193 = add i64 %.v, %158
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  br i1 %182, label %block_402218, label %block_4021e2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400900___cxx_global_var_init_13(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400900:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000) to i32), i32 255)) #10
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  br label %block_40091b

block_40091b:                                     ; preds = %block_40091b, %block_400900
  %47 = phi i64 [ %98, %block_40091b ], [ %42, %block_400900 ]
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = add i64 %47, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %48, -16
  %54 = add i64 %47, 11
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4890
  %58 = add i64 %56, 5
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_401c40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2432
  store i8 %46, i8* %19, align 1, !tbaa !2446
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2447
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2448
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2449
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %63, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2432
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #10
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2446
  %80 = xor i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2447
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2450
  %94 = add i64 %64, -8
  %95 = add i64 %63, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, -47
  %99 = add i64 %97, 6
  %100 = load i8, i8* %28, align 1, !tbaa !2448
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i64 %98, i64 %99
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_40091b, label %block_400950

block_400950:                                     ; preds = %block_40091b
  %103 = load i64, i64* %RSP, align 8
  %104 = add i64 %103, 16
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -17
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %12, align 1, !tbaa !2432
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #10
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %19, align 1, !tbaa !2446
  %113 = xor i64 %103, 16
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2447
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %28, align 1, !tbaa !2448
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %31, align 1, !tbaa !2449
  %122 = lshr i64 %103, 63
  %123 = xor i64 %120, %122
  %124 = add nuw nsw i64 %123, %120
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %37, align 1, !tbaa !2450
  %127 = add i64 %102, 5
  store i64 %127, i64* %PC, align 8
  %128 = add i64 %103, 24
  %129 = inttoptr i64 %104 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RBP, align 8, !tbaa !2428
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %102, 6
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %134 = add i64 %103, 32
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_4061e0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_4061e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4052d0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4052d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #10
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2447
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2448
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2450
  store i64 %23, i64* %21, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -8
  %55 = add i64 %16, 18
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %16, 19
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %16, 20
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400780__GLOBAL__sub_I_stepanov_abstraction_cpp(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400780:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 95
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_4007e0___cxx_global_var_init_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 183
  %17 = add i64 %15, 5
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  store i64 %19, i64* %5, align 8, !tbaa !2428
  store i64 %16, i64* %PC, align 8, !tbaa !2428
  %21 = tail call %struct.Memory* @sub_400840___cxx_global_var_init_11_renamed_(%struct.State* nonnull %0, i64 %16, %struct.Memory* %14)
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 274
  %24 = add i64 %22, 5
  %25 = load i64, i64* %5, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %5, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4008a0___cxx_global_var_init_12_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %21)
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 365
  %31 = add i64 %29, 5
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %31, i64* %34, align 8
  store i64 %33, i64* %5, align 8, !tbaa !2428
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %35 = tail call %struct.Memory* @sub_400900___cxx_global_var_init_13_renamed_(%struct.State* nonnull %0, i64 %30, %struct.Memory* %28)
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 456
  %38 = add i64 %36, 5
  %39 = load i64, i64* %5, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %38, i64* %41, align 8
  store i64 %40, i64* %5, align 8, !tbaa !2428
  store i64 %37, i64* %PC, align 8, !tbaa !2428
  %42 = tail call %struct.Memory* @sub_400960___cxx_global_var_init_14_renamed_(%struct.State* nonnull %0, i64 %37, %struct.Memory* %35)
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 483
  %45 = add i64 %43, 5
  %46 = load i64, i64* %5, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48, align 8
  store i64 %47, i64* %5, align 8, !tbaa !2428
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  %49 = tail call %struct.Memory* @sub_400980___cxx_global_var_init_15_renamed_(%struct.State* nonnull %0, i64 %44, %struct.Memory* %42)
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 510
  %52 = add i64 %50, 5
  %53 = load i64, i64* %5, align 8, !tbaa !2428
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55, align 8
  store i64 %54, i64* %5, align 8, !tbaa !2428
  store i64 %51, i64* %PC, align 8, !tbaa !2428
  %56 = tail call %struct.Memory* @sub_4009a0___cxx_global_var_init_16_renamed_(%struct.State* nonnull %0, i64 %51, %struct.Memory* %49)
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 537
  %59 = add i64 %57, 5
  %60 = load i64, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %5, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4009c0___cxx_global_var_init_17_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %56)
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 564
  %66 = add i64 %64, 5
  %67 = load i64, i64* %5, align 8, !tbaa !2428
  %68 = add i64 %67, -8
  %69 = inttoptr i64 %68 to i64*
  store i64 %66, i64* %69, align 8
  store i64 %68, i64* %5, align 8, !tbaa !2428
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %70 = tail call %struct.Memory* @sub_4009e0___cxx_global_var_init_18_renamed_(%struct.State* nonnull %0, i64 %65, %struct.Memory* %63)
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 591
  %73 = add i64 %71, 5
  %74 = load i64, i64* %5, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %5, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_400a00___cxx_global_var_init_19_renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %70)
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 618
  %80 = add i64 %78, 5
  %81 = load i64, i64* %5, align 8, !tbaa !2428
  %82 = add i64 %81, -8
  %83 = inttoptr i64 %82 to i64*
  store i64 %80, i64* %83, align 8
  store i64 %82, i64* %5, align 8, !tbaa !2428
  store i64 %79, i64* %PC, align 8, !tbaa !2428
  %84 = tail call %struct.Memory* @sub_400a20___cxx_global_var_init_20_renamed_(%struct.State* nonnull %0, i64 %79, %struct.Memory* %77)
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 645
  %87 = add i64 %85, 5
  %88 = load i64, i64* %5, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %87, i64* %90, align 8
  store i64 %89, i64* %5, align 8, !tbaa !2428
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  %91 = tail call %struct.Memory* @sub_400a40___cxx_global_var_init_21_renamed_(%struct.State* nonnull %0, i64 %86, %struct.Memory* %84)
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 672
  %94 = add i64 %92, 5
  %95 = load i64, i64* %5, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %94, i64* %97, align 8
  store i64 %96, i64* %5, align 8, !tbaa !2428
  store i64 %93, i64* %PC, align 8, !tbaa !2428
  %98 = tail call %struct.Memory* @sub_400a60___cxx_global_var_init_22_renamed_(%struct.State* nonnull %0, i64 %93, %struct.Memory* %91)
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 699
  %101 = add i64 %99, 5
  %102 = load i64, i64* %5, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104, align 8
  store i64 %103, i64* %5, align 8, !tbaa !2428
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %105 = tail call %struct.Memory* @sub_400a80___cxx_global_var_init_23_renamed_(%struct.State* nonnull %0, i64 %100, %struct.Memory* %98)
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 726
  %108 = add i64 %106, 5
  %109 = load i64, i64* %5, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %5, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_400aa0___cxx_global_var_init_24_renamed_(%struct.State* nonnull %0, i64 %107, %struct.Memory* %105)
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 753
  %115 = add i64 %113, 5
  %116 = load i64, i64* %5, align 8, !tbaa !2428
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i64*
  store i64 %115, i64* %118, align 8
  store i64 %117, i64* %5, align 8, !tbaa !2428
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  %119 = tail call %struct.Memory* @sub_400ac0___cxx_global_var_init_25_renamed_(%struct.State* nonnull %0, i64 %114, %struct.Memory* %112)
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 1
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %5, align 8, !tbaa !2428
  %123 = add i64 %122, 8
  %124 = inttoptr i64 %122 to i64*
  %125 = load i64, i64* %124, align 8
  store i64 %125, i64* %RBP, align 8, !tbaa !2428
  store i64 %123, i64* %5, align 8, !tbaa !2428
  %126 = add i64 %120, 2
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %123 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %129 = add i64 %122, 16
  store i64 %129, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %119
}

; Function Attrs: noinline
define %struct.Memory* @sub_402060__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402060:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -36
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %66 = bitcast i64* %65 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402080

block_402090:                                     ; preds = %block_402080
  %67 = add i64 %178, -16
  %68 = add i64 %211, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RDI, align 8, !tbaa !2428
  %71 = add i64 %178, -24
  %72 = add i64 %211, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %RSI, align 8, !tbaa !2428
  %75 = add i64 %178, -8
  %76 = add i64 %211, 12
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %178, -48
  %80 = add i64 %211, 16
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i64*
  store i64 %78, i64* %81, align 8
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -48
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 5
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %39, align 1, !tbaa !2451
  store double 0.000000e+00, double* %66, align 1, !tbaa !2451
  %88 = add i64 %84, 17040
  %89 = add i64 %84, 10
  %90 = load i64, i64* %RSP, align 8, !tbaa !2428
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92, align 8
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  store i64 %88, i64* %PC, align 8, !tbaa !2428
  %93 = tail call %struct.Memory* @sub_406330__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__renamed_(%struct.State* nonnull %0, i64 %88, %struct.Memory* %2)
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -56
  %96 = load i64, i64* %PC, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %97 = add i64 %96, 9
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %39, align 1
  %99 = inttoptr i64 %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, 15661
  %102 = add i64 %100, 5
  %103 = load i64, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %102, i64* %105, align 8
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  store i64 %101, i64* %PC, align 8, !tbaa !2428
  %106 = tail call %struct.Memory* @sub_405de0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %101, %struct.Memory* %2)
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 15688
  %109 = add i64 %107, 5
  %110 = load i64, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %2)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -36
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 3
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %119, 1
  %121 = zext i32 %120 to i64
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = icmp eq i32 %119, -1
  %123 = icmp eq i32 %120, 0
  %124 = or i1 %122, %123
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %12, align 1, !tbaa !2432
  %126 = and i32 %120, 255
  %127 = tail call i32 @llvm.ctpop.i32(i32 %126) #10
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  store i8 %130, i8* %19, align 1, !tbaa !2446
  %131 = xor i32 %120, %119
  %132 = lshr i32 %131, 4
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  store i8 %134, i8* %24, align 1, !tbaa !2447
  %135 = zext i1 %123 to i8
  store i8 %135, i8* %27, align 1, !tbaa !2448
  %136 = lshr i32 %120, 31
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %30, align 1, !tbaa !2449
  %138 = lshr i32 %119, 31
  %139 = xor i32 %136, %138
  %140 = add nuw nsw i32 %139, %136
  %141 = icmp eq i32 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %36, align 1, !tbaa !2450
  %143 = add i64 %116, 9
  store i64 %143, i64* %PC, align 8
  store i32 %120, i32* %118, align 4
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, -70
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  br label %block_402080

block_4020cb:                                     ; preds = %block_402080
  %146 = load i64, i64* %RSP, align 8
  %147 = add i64 %146, 64
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ugt i64 %146, -65
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %12, align 1, !tbaa !2432
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #10
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %19, align 1, !tbaa !2446
  %156 = xor i64 %147, %146
  %157 = lshr i64 %156, 4
  %158 = trunc i64 %157 to i8
  %159 = and i8 %158, 1
  store i8 %159, i8* %24, align 1, !tbaa !2447
  %160 = icmp eq i64 %147, 0
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %27, align 1, !tbaa !2448
  %162 = lshr i64 %147, 63
  %163 = trunc i64 %162 to i8
  store i8 %163, i8* %30, align 1, !tbaa !2449
  %164 = lshr i64 %146, 63
  %165 = xor i64 %162, %164
  %166 = add nuw nsw i64 %165, %162
  %167 = icmp eq i64 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %36, align 1, !tbaa !2450
  %169 = add i64 %211, 5
  store i64 %169, i64* %PC, align 8
  %170 = add i64 %146, 72
  %171 = inttoptr i64 %147 to i64*
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %RBP, align 8, !tbaa !2428
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %211, 6
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %170 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %176 = add i64 %146, 80
  store i64 %176, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402080:                                     ; preds = %block_402090, %block_402060
  %177 = phi i64 [ %145, %block_402090 ], [ %.pre, %block_402060 ]
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -36
  %180 = add i64 %177, 3
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %185 = sub i32 %182, %184
  %186 = icmp ult i32 %182, %184
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %12, align 1, !tbaa !2432
  %188 = and i32 %185, 255
  %189 = tail call i32 @llvm.ctpop.i32(i32 %188) #10
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  store i8 %192, i8* %19, align 1, !tbaa !2446
  %193 = xor i32 %184, %182
  %194 = xor i32 %193, %185
  %195 = lshr i32 %194, 4
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  store i8 %197, i8* %24, align 1, !tbaa !2447
  %198 = icmp eq i32 %185, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %27, align 1, !tbaa !2448
  %200 = lshr i32 %185, 31
  %201 = trunc i32 %200 to i8
  store i8 %201, i8* %30, align 1, !tbaa !2449
  %202 = lshr i32 %182, 31
  %203 = lshr i32 %184, 31
  %204 = xor i32 %203, %202
  %205 = xor i32 %200, %202
  %206 = add nuw nsw i32 %205, %204
  %207 = icmp eq i32 %206, 2
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %36, align 1, !tbaa !2450
  %209 = icmp ne i8 %201, 0
  %210 = xor i1 %209, %207
  %.v = select i1 %210, i64 16, i64 75
  %211 = add i64 %.v, %177
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  br i1 %210, label %block_402090, label %block_4020cb
}

; Function Attrs: noinline
define %struct.Memory* @sub_405b40__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_405b40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -120
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -32
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %20 = add i64 %8, -16
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %11, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -16
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -24
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, -5262
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %58 = bitcast i64* %57 to double*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %61 = bitcast i64* %60 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_405b6c

block_405bf7:                                     ; preds = %block_405bc4, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %62 = phi i64 [ %.pre10, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %246, %block_405bc4 ]
  %MEMORY.0 = phi %struct.Memory* [ %135, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %MEMORY.2, %block_405bc4 ]
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -65
  %65 = add i64 %62, 3
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i8*
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %AL, align 1, !tbaa !2453
  %68 = and i8 %67, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %69 = zext i8 %68 to i32
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #10
  %71 = trunc i32 %70 to i8
  %72 = xor i8 %71, 1
  store i8 %72, i8* %14, align 1, !tbaa !2446
  %73 = xor i8 %68, 1
  store i8 %73, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %74 = icmp eq i8 %73, 0
  %.v = select i1 %74, i64 16, i64 11
  %75 = add i64 %.v, %62
  store i64 %75, i64* %PC, align 8, !tbaa !2428
  br i1 %74, label %block_405c07, label %block_405c02

block_405bc9:                                     ; preds = %block_405ba8
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -56
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %76, -40
  %79 = add i64 %311, 9
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %78 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %82 = add i64 %76, -80
  %83 = add i64 %311, 14
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  store i64 %81, i64* %84, align 8
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, -1527
  %87 = add i64 %85, 5
  %88 = load i64, i64* %RSP, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %87, i64* %90, align 8
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  %91 = tail call %struct.Memory* @sub_4055e0__ZmmIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %86, %struct.Memory* %MEMORY.2)
  %92 = load i64, i64* %RAX, align 8
  %93 = load i64, i64* %PC, align 8
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %94 = add i64 %93, -5276
  %95 = add i64 %93, 8
  %96 = load i64, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %95, i64* %98, align 8
  store i64 %97, i64* %RSP, align 8, !tbaa !2428
  store i64 %94, i64* %PC, align 8, !tbaa !2428
  %99 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %94, %struct.Memory* %MEMORY.2)
  %100 = load i64*, i64** %55, align 8
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC, align 8
  %103 = load i64, i64* %100, align 8
  store i64 %103, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -80
  %106 = add i64 %101, 9
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %105 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %59, align 1, !tbaa !2451
  store double 0.000000e+00, double* %61, align 1, !tbaa !2451
  %109 = add i64 %101, 13
  store i64 %109, i64* %PC, align 8
  %110 = bitcast i64 %103 to double
  %.cast = bitcast i64 %108 to double
  %111 = fcmp uno double %110, %.cast
  br i1 %111, label %112, label %122

; <label>:112:                                    ; preds = %block_405bc9
  %113 = fadd double %110, %.cast
  %114 = bitcast double %113 to i64
  %115 = and i64 %114, 9221120237041090560
  %116 = icmp eq i64 %115, 9218868437227405312
  %117 = and i64 %114, 2251799813685247
  %118 = icmp ne i64 %117, 0
  %119 = and i1 %116, %118
  br i1 %119, label %120, label %128

; <label>:120:                                    ; preds = %112
  %121 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %109, %struct.Memory* %MEMORY.2) #13
  %.pre8 = load i64, i64* %PC, align 8
  %.pre9 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:122:                                    ; preds = %block_405bc9
  %123 = fcmp ogt double %110, %.cast
  br i1 %123, label %128, label %124

; <label>:124:                                    ; preds = %122
  %125 = fcmp olt double %110, %.cast
  br i1 %125, label %128, label %126

; <label>:126:                                    ; preds = %124
  %127 = fcmp oeq double %110, %.cast
  br i1 %127, label %128, label %132

; <label>:128:                                    ; preds = %126, %124, %122, %112
  %129 = phi i8 [ 0, %122 ], [ 0, %124 ], [ 1, %126 ], [ 1, %112 ]
  %130 = phi i8 [ 0, %122 ], [ 0, %124 ], [ 0, %126 ], [ 1, %112 ]
  %131 = phi i8 [ 0, %122 ], [ 1, %124 ], [ 0, %126 ], [ 1, %112 ]
  store i8 %129, i8* %16, align 1, !tbaa !2453
  store i8 %130, i8* %14, align 1, !tbaa !2453
  store i8 %131, i8* %13, align 1, !tbaa !2453
  br label %132

; <label>:132:                                    ; preds = %128, %126
  store i8 0, i8* %18, align 1, !tbaa !2453
  store i8 0, i8* %17, align 1, !tbaa !2453
  store i8 0, i8* %15, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %132, %120
  %133 = phi i64 [ %.pre9, %120 ], [ %104, %132 ]
  %134 = phi i64 [ %.pre8, %120 ], [ %109, %132 ]
  %135 = phi %struct.Memory* [ %121, %120 ], [ %MEMORY.2, %132 ]
  %136 = load i8, i8* %13, align 1, !tbaa !2432
  %137 = load i8, i8* %16, align 1, !tbaa !2448
  %138 = or i8 %137, %136
  %139 = icmp eq i8 %138, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %CL, align 1, !tbaa !2453
  %141 = add i64 %133, -65
  %142 = add i64 %134, 6
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i8*
  store i8 %140, i8* %143, align 1
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_405bf7

block_405c07:                                     ; preds = %block_405bf7
  %144 = add i64 %63, -56
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %145 = add i64 %75, -5319
  %146 = add i64 %75, 9
  %147 = load i64, i64* %RSP, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %150 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %145, %struct.Memory* %MEMORY.0)
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -48
  %153 = load i64, i64* %PC, align 8
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %154 = load i64*, i64** %55, align 8
  %155 = add i64 %153, 8
  store i64 %155, i64* %PC, align 8
  %156 = load i64, i64* %154, align 8
  store i64 %156, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %157 = add i64 %151, -88
  %158 = add i64 %153, 13
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i64*
  store i64 %156, i64* %159, align 8
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, -5341
  %162 = add i64 %160, 5
  %163 = load i64, i64* %RSP, align 8, !tbaa !2428
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165, align 8
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %166 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %161, %struct.Memory* %150)
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -88
  %169 = load i64, i64* %PC, align 8
  %170 = add i64 %169, 5
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %168 to i64*
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %173 = load i64*, i64** %55, align 8
  %174 = add i64 %169, 9
  store i64 %174, i64* %PC, align 8
  store i64 %172, i64* %173, align 8
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -48
  %177 = load i64, i64* %PC, align 8
  store i64 %176, i64* %RDI, align 8, !tbaa !2428
  %178 = add i64 %177, -1611
  %179 = add i64 %177, 9
  %180 = load i64, i64* %RSP, align 8, !tbaa !2428
  %181 = add i64 %180, -8
  %182 = inttoptr i64 %181 to i64*
  store i64 %179, i64* %182, align 8
  store i64 %181, i64* %RSP, align 8, !tbaa !2428
  store i64 %178, i64* %PC, align 8, !tbaa !2428
  %183 = tail call %struct.Memory* @sub_4055e0__ZmmIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %178, %struct.Memory* %166)
  %184 = load i64, i64* %RBP, align 8
  %185 = add i64 %184, -96
  %186 = load i64, i64* %RAX, align 8
  %187 = load i64, i64* %PC, align 8
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %185 to i64*
  store i64 %186, i64* %189, align 8
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, -144
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  br label %block_405ba8

block_405b6c:                                     ; preds = %block_405c02, %block_405b40
  %192 = phi i64 [ %.pre, %block_405b40 ], [ %285, %block_405c02 ]
  %MEMORY.1 = phi %struct.Memory* [ %48, %block_405b40 ], [ %277, %block_405c02 ]
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -24
  store i64 %194, i64* %RDI, align 8, !tbaa !2428
  %195 = add i64 %193, -16
  store i64 %195, i64* %RSI, align 8, !tbaa !2428
  %196 = add i64 %192, -5212
  %197 = add i64 %192, 13
  %198 = load i64, i64* %RSP, align 8, !tbaa !2428
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %197, i64* %200, align 8
  store i64 %199, i64* %RSP, align 8, !tbaa !2428
  store i64 %196, i64* %PC, align 8, !tbaa !2428
  %201 = tail call %struct.Memory* @sub_404710__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %196, %struct.Memory* %MEMORY.1)
  %202 = load i8, i8* %AL, align 1
  %203 = load i64, i64* %PC, align 8
  %204 = and i8 %202, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %205 = zext i8 %204 to i32
  %206 = tail call i32 @llvm.ctpop.i32(i32 %205) #10
  %207 = trunc i32 %206 to i8
  %208 = xor i8 %207, 1
  store i8 %208, i8* %14, align 1, !tbaa !2446
  %209 = xor i8 %204, 1
  store i8 %209, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %210 = icmp eq i8 %209, 0
  %.v11 = select i1 %210, i64 13, i64 8
  %211 = add i64 %.v11, %203
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  br i1 %210, label %block_405b86, label %block_405b81

block_405b86:                                     ; preds = %block_405b6c
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -24
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %214 = add i64 %211, -5190
  %215 = add i64 %211, 9
  %216 = load i64, i64* %RSP, align 8, !tbaa !2428
  %217 = add i64 %216, -8
  %218 = inttoptr i64 %217 to i64*
  store i64 %215, i64* %218, align 8
  store i64 %217, i64* %RSP, align 8, !tbaa !2428
  store i64 %214, i64* %PC, align 8, !tbaa !2428
  %219 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %214, %struct.Memory* %MEMORY.1)
  %220 = load i64*, i64** %55, align 8
  %221 = load i64, i64* %PC, align 8
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC, align 8
  %223 = load i64, i64* %220, align 8
  store i64 %223, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -40
  %226 = add i64 %221, 9
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i64*
  store i64 %223, i64* %227, align 8
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -24
  %230 = load i64, i64* %PC, align 8
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %229 to i64*
  %233 = load i64, i64* %232, align 8
  store i64 %233, i64* %RAX, align 8, !tbaa !2428
  %234 = add i64 %228, -48
  %235 = add i64 %230, 8
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i64*
  store i64 %233, i64* %236, align 8
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -48
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 4
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %238 to i64*
  %242 = load i64, i64* %241, align 8
  store i64 %242, i64* %RAX, align 8, !tbaa !2428
  %243 = add i64 %237, -56
  %244 = add i64 %239, 8
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i64*
  store i64 %242, i64* %245, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_405ba8

block_405bc4:                                     ; preds = %block_405ba8
  %246 = add i64 %311, 51
  store i64 %246, i64* %PC, align 8, !tbaa !2428
  br label %block_405bf7

block_405c02:                                     ; preds = %block_405bf7
  %247 = add i64 %63, -48
  store i64 %247, i64* %RDI, align 8, !tbaa !2428
  %248 = add i64 %63, -40
  %249 = add i64 %75, 68
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i64*
  %251 = load i64, i64* %250, align 8
  store i64 %251, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %252 = add i64 %63, -104
  %253 = add i64 %75, 73
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %252 to i64*
  store i64 %251, i64* %254, align 8
  %255 = load i64, i64* %PC, align 8
  %256 = add i64 %255, -5387
  %257 = add i64 %255, 5
  %258 = load i64, i64* %RSP, align 8, !tbaa !2428
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260, align 8
  store i64 %259, i64* %RSP, align 8, !tbaa !2428
  store i64 %256, i64* %PC, align 8, !tbaa !2428
  %261 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %256, %struct.Memory* %MEMORY.0)
  %262 = load i64, i64* %RBP, align 8
  %263 = add i64 %262, -24
  %264 = load i64, i64* %PC, align 8
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %265 = add i64 %262, -104
  %266 = add i64 %264, 11
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %269 = load i64*, i64** %55, align 8
  %270 = add i64 %264, 15
  store i64 %270, i64* %PC, align 8
  store i64 %268, i64* %269, align 8
  %271 = load i64, i64* %PC, align 8
  %272 = add i64 %271, -5519
  %273 = add i64 %271, 5
  %274 = load i64, i64* %RSP, align 8, !tbaa !2428
  %275 = add i64 %274, -8
  %276 = inttoptr i64 %275 to i64*
  store i64 %273, i64* %276, align 8
  store i64 %275, i64* %RSP, align 8, !tbaa !2428
  store i64 %272, i64* %PC, align 8, !tbaa !2428
  %277 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %272, %struct.Memory* %261)
  %278 = load i64, i64* %RBP, align 8
  %279 = add i64 %278, -64
  %280 = load i64, i64* %RAX, align 8
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %279 to i64*
  store i64 %280, i64* %283, align 8
  %284 = load i64, i64* %PC, align 8
  %285 = add i64 %284, -252
  store i64 %285, i64* %PC, align 8, !tbaa !2428
  br label %block_405b6c

block_405ba8:                                     ; preds = %block_405b86, %block_405c07
  %286 = phi i64 [ %.pre7, %block_405b86 ], [ %191, %block_405c07 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_405b86 ], [ %183, %block_405c07 ]
  %287 = load i64, i64* %RBP, align 8
  %288 = add i64 %287, -48
  store i64 %288, i64* %RDI, align 8, !tbaa !2428
  %289 = add i64 %287, -8
  store i64 %289, i64* %RSI, align 8, !tbaa !2428
  %290 = add i64 %286, -5272
  %291 = add i64 %286, 13
  %292 = load i64, i64* %RSP, align 8, !tbaa !2428
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %291, i64* %294, align 8
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  store i64 %290, i64* %PC, align 8, !tbaa !2428
  %295 = tail call %struct.Memory* @sub_404710__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %290, %struct.Memory* %MEMORY.2)
  %296 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2453
  %297 = load i8, i8* %AL, align 1
  %298 = and i8 %297, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %299 = zext i8 %298 to i32
  %300 = tail call i32 @llvm.ctpop.i32(i32 %299) #10
  %301 = trunc i32 %300 to i8
  %302 = xor i8 %301, 1
  store i8 %302, i8* %14, align 1, !tbaa !2446
  %303 = xor i8 %298, 1
  store i8 %303, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %304 = load i64, i64* %RBP, align 8
  %305 = add i64 %304, -65
  %306 = add i64 %296, 9
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to i8*
  store i8 0, i8* %307, align 1
  %308 = load i64, i64* %PC, align 8
  %309 = load i8, i8* %16, align 1, !tbaa !2448
  %310 = icmp eq i8 %309, 0
  %.v14 = select i1 %310, i64 11, i64 6
  %311 = add i64 %.v14, %308
  store i64 %311, i64* %PC, align 8, !tbaa !2428
  br i1 %310, label %block_405bc9, label %block_405bc4

block_405b81:                                     ; preds = %block_405b6c
  %312 = load i64, i64* %RSP, align 8
  %313 = add i64 %312, 112
  store i64 %313, i64* %RSP, align 8, !tbaa !2428
  %314 = icmp ugt i64 %312, -113
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %13, align 1, !tbaa !2432
  %316 = trunc i64 %313 to i32
  %317 = and i32 %316, 255
  %318 = tail call i32 @llvm.ctpop.i32(i32 %317) #10
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  store i8 %321, i8* %14, align 1, !tbaa !2446
  %322 = xor i64 %312, 16
  %323 = xor i64 %322, %313
  %324 = lshr i64 %323, 4
  %325 = trunc i64 %324 to i8
  %326 = and i8 %325, 1
  store i8 %326, i8* %15, align 1, !tbaa !2447
  %327 = icmp eq i64 %313, 0
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %16, align 1, !tbaa !2448
  %329 = lshr i64 %313, 63
  %330 = trunc i64 %329 to i8
  store i8 %330, i8* %17, align 1, !tbaa !2449
  %331 = lshr i64 %312, 63
  %332 = xor i64 %329, %331
  %333 = add nuw nsw i64 %332, %329
  %334 = icmp eq i64 %333, 2
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %18, align 1, !tbaa !2450
  %336 = add i64 %211, 241
  store i64 %336, i64* %PC, align 8
  %337 = add i64 %312, 120
  %338 = inttoptr i64 %313 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RBP, align 8, !tbaa !2428
  store i64 %337, i64* %RSP, align 8, !tbaa !2428
  %340 = add i64 %211, 242
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %337 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %PC, align 8, !tbaa !2428
  %343 = add i64 %312, 128
  store i64 %343, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403d20__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403d20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2453
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #10
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %39, align 1, !tbaa !2453
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2453
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2453
  store i8 0, i8* %42, align 1, !tbaa !2453
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400ff0__Z17summarize_simplefP8_IO_FILEPKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400ff0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -104
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 96
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #10
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 %9, %12
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %12, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %12, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %9, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = bitcast %union.VectorReg* %5 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %40, align 1, !tbaa !2456
  %41 = add i64 %8, -16
  %42 = load i64, i64* %RDI, align 8
  %43 = add i64 %11, 14
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -16
  %47 = load i64, i64* %RSI, align 8
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i64*
  store i64 %47, i64* %50, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -32
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 5
  store i64 %54, i64* %PC, align 8
  %55 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  %56 = load i64, i64* %55, align 1
  %57 = inttoptr i64 %52 to i64*
  store i64 %56, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -36
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 7
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i32*
  store i32 12, i32* %62, align 4
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -20
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 7
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i32*
  store i32 0, i32* %67, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_401016

block_401053:                                     ; preds = %block_401026
  %68 = add i64 %696, 3
  store i64 %68, i64* %PC, align 8
  %69 = load i32, i32* %662, align 4
  %70 = zext i32 %69 to i64
  store i64 %70, i64* %RAX, align 8, !tbaa !2428
  %71 = add i64 %696, 6
  store i64 %71, i64* %PC, align 8
  store i32 %69, i32* %667, align 4
  %.pre14 = load i64, i64* %PC, align 8
  %.pre15 = load i64, i64* %RBP, align 8
  br label %block_401059

block_401192:                                     ; preds = %block_40118b, %block_4011a2
  %72 = phi i64 [ %.pre13, %block_40118b ], [ %180, %block_4011a2 ]
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -20
  %75 = add i64 %72, 3
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %80 = sub i32 %77, %79
  %81 = icmp ult i32 %77, %79
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %15, align 1, !tbaa !2432
  %83 = and i32 %80, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %22, align 1, !tbaa !2446
  %88 = xor i32 %79, %77
  %89 = xor i32 %88, %80
  %90 = lshr i32 %89, 4
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %27, align 1, !tbaa !2447
  %93 = icmp eq i32 %80, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2448
  %95 = lshr i32 %80, 31
  %96 = trunc i32 %95 to i8
  store i8 %96, i8* %33, align 1, !tbaa !2449
  %97 = lshr i32 %77, 31
  %98 = lshr i32 %79, 31
  %99 = xor i32 %98, %97
  %100 = xor i32 %95, %97
  %101 = add nuw nsw i32 %100, %99
  %102 = icmp eq i32 %101, 2
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %39, align 1, !tbaa !2450
  %104 = icmp ne i8 %96, 0
  %105 = xor i1 %104, %102
  %.v17 = select i1 %105, i64 16, i64 63
  %106 = add i64 %.v17, %72
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  br i1 %105, label %block_4011a2, label %block_4011d1

block_4011a2:                                     ; preds = %block_401192
  %107 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = add i64 %106, 12
  store i64 %108, i64* %PC, align 8
  %109 = load i32, i32* %76, align 4
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 4
  store i64 %111, i64* %RCX, align 8, !tbaa !2428
  %112 = add i64 %111, %107
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = icmp ult i64 %112, %107
  %114 = icmp ult i64 %112, %111
  %115 = or i1 %113, %114
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %15, align 1, !tbaa !2432
  %117 = trunc i64 %112 to i32
  %118 = and i32 %117, 255
  %119 = tail call i32 @llvm.ctpop.i32(i32 %118) #10
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  store i8 %122, i8* %22, align 1, !tbaa !2446
  %123 = xor i64 %111, %107
  %124 = xor i64 %123, %112
  %125 = lshr i64 %124, 4
  %126 = trunc i64 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %27, align 1, !tbaa !2447
  %128 = icmp eq i64 %112, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %30, align 1, !tbaa !2448
  %130 = lshr i64 %112, 63
  %131 = trunc i64 %130 to i8
  store i8 %131, i8* %33, align 1, !tbaa !2449
  %132 = lshr i64 %107, 63
  %133 = lshr i64 %110, 59
  %134 = and i64 %133, 1
  %135 = xor i64 %130, %132
  %136 = xor i64 %130, %134
  %137 = add nuw nsw i64 %135, %136
  %138 = icmp eq i64 %137, 2
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %39, align 1, !tbaa !2450
  %140 = inttoptr i64 %112 to i64*
  %141 = add i64 %106, 23
  store i64 %141, i64* %PC, align 8
  %142 = load i64, i64* %140, align 8
  store i64 %142, i64* %55, align 1, !tbaa !2451
  store double 0.000000e+00, double* %308, align 1, !tbaa !2451
  %143 = add i64 %73, -32
  %144 = add i64 %106, 28
  store i64 %144, i64* %PC, align 8
  %.cast = bitcast i64 %142 to double
  %145 = inttoptr i64 %143 to double*
  %146 = load double, double* %145, align 8
  %147 = fadd double %.cast, %146
  store double %147, double* %607, align 1, !tbaa !2451
  store i64 0, i64* %238, align 1, !tbaa !2451
  %148 = add i64 %106, 33
  store i64 %148, i64* %PC, align 8
  store double %147, double* %145, align 8
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -20
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = add i32 %154, 1
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = icmp eq i32 %154, -1
  %158 = icmp eq i32 %155, 0
  %159 = or i1 %157, %158
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %15, align 1, !tbaa !2432
  %161 = and i32 %155, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #10
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %22, align 1, !tbaa !2446
  %166 = xor i32 %155, %154
  %167 = lshr i32 %166, 4
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  store i8 %169, i8* %27, align 1, !tbaa !2447
  %170 = zext i1 %158 to i8
  store i8 %170, i8* %30, align 1, !tbaa !2448
  %171 = lshr i32 %155, 31
  %172 = trunc i32 %171 to i8
  store i8 %172, i8* %33, align 1, !tbaa !2449
  %173 = lshr i32 %154, 31
  %174 = xor i32 %171, %173
  %175 = add nuw nsw i32 %174, %171
  %176 = icmp eq i32 %175, 2
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %39, align 1, !tbaa !2450
  %178 = add i64 %151, 9
  store i64 %178, i64* %PC, align 8
  store i32 %155, i32* %153, align 4
  %179 = load i64, i64* %PC, align 8
  %180 = add i64 %179, -58
  store i64 %180, i64* %PC, align 8, !tbaa !2428
  br label %block_401192

block_4011d1:                                     ; preds = %block_401192
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 203), i64* %RSI, align 8, !tbaa !2428
  %181 = add i64 %73, -8
  %182 = add i64 %106, 14
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %181 to i64*
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = add i64 %73, -16
  %186 = add i64 %106, 18
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %185 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RDX, align 8, !tbaa !2428
  %189 = add i64 %73, -32
  %190 = add i64 %106, 23
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %55, align 1, !tbaa !2451
  store double 0.000000e+00, double* %308, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %193 = add i64 %106, -2721
  %194 = add i64 %106, 30
  %195 = load i64, i64* %RSP, align 8, !tbaa !2428
  %196 = add i64 %195, -8
  %197 = inttoptr i64 %196 to i64*
  store i64 %194, i64* %197, align 8
  store i64 %196, i64* %RSP, align 8, !tbaa !2428
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  %198 = tail call fastcc %struct.Memory* @ext_620938_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %199 = load i64, i64* %PC, align 8
  store i32 0, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %200 = load i64, i64* %RBP, align 8
  %201 = add i64 %200, -96
  %202 = load i32, i32* %EAX, align 4
  %203 = add i64 %199, 14
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %204, align 4
  %205 = load i64, i64* %RSP, align 8
  %206 = load i64, i64* %PC, align 8
  %207 = add i64 %205, 96
  store i64 %207, i64* %RSP, align 8, !tbaa !2428
  %208 = icmp ugt i64 %205, -97
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %15, align 1, !tbaa !2432
  %210 = trunc i64 %207 to i32
  %211 = and i32 %210, 255
  %212 = tail call i32 @llvm.ctpop.i32(i32 %211) #10
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = xor i8 %214, 1
  store i8 %215, i8* %22, align 1, !tbaa !2446
  %216 = xor i64 %207, %205
  %217 = lshr i64 %216, 4
  %218 = trunc i64 %217 to i8
  %219 = and i8 %218, 1
  store i8 %219, i8* %27, align 1, !tbaa !2447
  %220 = icmp eq i64 %207, 0
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %30, align 1, !tbaa !2448
  %222 = lshr i64 %207, 63
  %223 = trunc i64 %222 to i8
  store i8 %223, i8* %33, align 1, !tbaa !2449
  %224 = lshr i64 %205, 63
  %225 = xor i64 %222, %224
  %226 = add nuw nsw i64 %225, %222
  %227 = icmp eq i64 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %39, align 1, !tbaa !2450
  %229 = add i64 %206, 5
  store i64 %229, i64* %PC, align 8
  %230 = add i64 %205, 104
  %231 = inttoptr i64 %207 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RBP, align 8, !tbaa !2428
  store i64 %230, i64* %RSP, align 8, !tbaa !2428
  %233 = add i64 %206, 6
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %230 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %PC, align 8, !tbaa !2428
  %236 = add i64 %205, 112
  store i64 %236, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %198

block_40106c:                                     ; preds = %block_401016
  %EDX = bitcast %union.anon* %4 to i32*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %AL = bitcast %union.anon* %3 to i8*
  %R10D = bitcast %union.anon* %237 to i32*
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 262), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 115), i64* %RCX, align 8, !tbaa !2428
  %239 = add i64 %698, -8
  %240 = add i64 %731, 24
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241, align 8
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %698, -36
  %244 = add i64 %731, 27
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i32*
  %246 = load i32, i32* %245, align 4
  %247 = add i32 %246, -12
  %248 = zext i32 %247 to i64
  store i64 %248, i64* %RAX, align 8, !tbaa !2428
  %249 = icmp ult i32 %246, 12
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %15, align 1, !tbaa !2432
  %251 = and i32 %247, 255
  %252 = tail call i32 @llvm.ctpop.i32(i32 %251) #10
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  %255 = xor i8 %254, 1
  store i8 %255, i8* %22, align 1, !tbaa !2446
  %256 = xor i32 %247, %246
  %257 = lshr i32 %256, 4
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  store i8 %259, i8* %27, align 1, !tbaa !2447
  %260 = icmp eq i32 %247, 0
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %30, align 1, !tbaa !2448
  %262 = lshr i32 %247, 31
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %33, align 1, !tbaa !2449
  %264 = lshr i32 %246, 31
  %265 = xor i32 %262, %264
  %266 = add nuw nsw i32 %265, %264
  %267 = icmp eq i32 %266, 2
  %268 = zext i1 %267 to i8
  store i8 %268, i8* %39, align 1, !tbaa !2450
  store i64 %248, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %269 = add i64 %731, -2364
  %270 = add i64 %731, 39
  %271 = load i64, i64* %RSP, align 8, !tbaa !2428
  %272 = add i64 %271, -8
  %273 = inttoptr i64 %272 to i64*
  store i64 %270, i64* %273, align 8
  store i64 %272, i64* %RSP, align 8, !tbaa !2428
  store i64 %269, i64* %PC, align 8, !tbaa !2428
  %274 = tail call fastcc %struct.Memory* @ext_620938_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %275 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 296), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 115), i64* %RCX, align 8, !tbaa !2428
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -8
  %278 = add i64 %275, 24
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i64*
  %280 = load i64, i64* %279, align 8
  store i64 %280, i64* %RDI, align 8, !tbaa !2428
  %281 = add i64 %276, -36
  %282 = add i64 %275, 27
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %281 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %RDX, align 8, !tbaa !2428
  %286 = add i64 %276, -44
  %287 = load i32, i32* %EAX, align 4
  %288 = add i64 %275, 30
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %286 to i32*
  store i32 %287, i32* %289, align 4
  %290 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %291 = add i64 %290, -2433
  %292 = add i64 %290, 7
  %293 = load i64, i64* %RSP, align 8, !tbaa !2428
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  store i64 %292, i64* %295, align 8
  store i64 %294, i64* %RSP, align 8, !tbaa !2428
  store i64 %291, i64* %PC, align 8, !tbaa !2428
  %296 = tail call fastcc %struct.Memory* @ext_620938_fprintf(%struct.State* nonnull %0, %struct.Memory* %274)
  %297 = load i64, i64* %RBP, align 8
  %298 = add i64 %297, -20
  %299 = load i64, i64* %PC, align 8
  %300 = add i64 %299, 7
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %298 to i32*
  store i32 0, i32* %301, align 4
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -48
  %304 = load i32, i32* %EAX, align 4
  %305 = load i64, i64* %PC, align 8
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %303 to i32*
  store i32 %304, i32* %307, align 4
  %308 = bitcast i64* %238 to double*
  %309 = getelementptr inbounds %union.anon, %union.anon* %237, i64 0, i32 0
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_4010c2

block_4010d2:                                     ; preds = %block_4010c2
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 314), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 159), i64* %R8, align 8, !tbaa !2428
  %310 = add i64 %733, -8
  %311 = add i64 %766, 24
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %RDI, align 8, !tbaa !2428
  %314 = add i64 %766, 27
  store i64 %314, i64* %PC, align 8
  %315 = load i32, i32* %736, align 4
  %316 = zext i32 %315 to i64
  store i64 %316, i64* %RDX, align 8, !tbaa !2428
  %317 = add i64 %733, -36
  %318 = add i64 %766, 31
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i32*
  %320 = load i32, i32* %319, align 4
  %321 = sext i32 %320 to i64
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %322, i64* %RCX, align 8, !tbaa !2428
  %323 = add i64 %766, 43
  store i64 %323, i64* %PC, align 8
  %324 = load i32, i32* %736, align 4
  %325 = sext i32 %324 to i64
  %326 = shl nsw i64 %325, 4
  store i64 %326, i64* %R9, align 8, !tbaa !2428
  %327 = add i64 %326, %322
  store i64 %327, i64* %RCX, align 8, !tbaa !2428
  %328 = icmp ult i64 %327, %322
  %329 = icmp ult i64 %327, %326
  %330 = or i1 %328, %329
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %15, align 1, !tbaa !2432
  %332 = trunc i64 %327 to i32
  %333 = and i32 %332, 255
  %334 = tail call i32 @llvm.ctpop.i32(i32 %333) #10
  %335 = trunc i32 %334 to i8
  %336 = and i8 %335, 1
  %337 = xor i8 %336, 1
  store i8 %337, i8* %22, align 1, !tbaa !2446
  %338 = xor i64 %326, %322
  %339 = xor i64 %338, %327
  %340 = lshr i64 %339, 4
  %341 = trunc i64 %340 to i8
  %342 = and i8 %341, 1
  store i8 %342, i8* %27, align 1, !tbaa !2447
  %343 = icmp eq i64 %327, 0
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %30, align 1, !tbaa !2448
  %345 = lshr i64 %327, 63
  %346 = trunc i64 %345 to i8
  store i8 %346, i8* %33, align 1, !tbaa !2449
  %347 = lshr i64 %322, 63
  %348 = lshr i64 %325, 59
  %349 = and i64 %348, 1
  %350 = xor i64 %345, %347
  %351 = xor i64 %345, %349
  %352 = add nuw nsw i64 %350, %351
  %353 = icmp eq i64 %352, 2
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %39, align 1, !tbaa !2450
  %355 = add i64 %327, 8
  %356 = add i64 %766, 54
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %RCX, align 8, !tbaa !2428
  %359 = add i64 %733, -56
  %360 = add i64 %766, 58
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  store i64 %313, i64* %361, align 8
  %362 = load i64, i64* %RCX, align 8
  %363 = load i64, i64* %PC, align 8
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %364 = load i64, i64* %RBP, align 8
  %365 = add i64 %364, -64
  %366 = load i64, i64* %RSI, align 8
  %367 = add i64 %363, 7
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %365 to i64*
  store i64 %366, i64* %368, align 8
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -72
  %371 = load i64, i64* %R8, align 8
  %372 = load i64, i64* %PC, align 8
  %373 = add i64 %372, 4
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %370 to i64*
  store i64 %371, i64* %374, align 8
  %375 = load i64, i64* %RBP, align 8
  %376 = add i64 %375, -80
  %377 = load i64, i64* %RAX, align 8
  %378 = load i64, i64* %PC, align 8
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %376 to i64*
  store i64 %377, i64* %380, align 8
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -84
  %383 = load i32, i32* %EDX, align 4
  %384 = load i64, i64* %PC, align 8
  %385 = add i64 %384, 3
  store i64 %385, i64* %PC, align 8
  %386 = inttoptr i64 %382 to i32*
  store i32 %383, i32* %386, align 4
  %387 = load i64, i64* %PC, align 8
  %388 = add i64 %387, -2606
  %389 = add i64 %387, 5
  %390 = load i64, i64* %RSP, align 8, !tbaa !2428
  %391 = add i64 %390, -8
  %392 = inttoptr i64 %391 to i64*
  store i64 %389, i64* %392, align 8
  store i64 %391, i64* %RSP, align 8, !tbaa !2428
  store i64 %388, i64* %PC, align 8, !tbaa !2428
  %393 = tail call fastcc %struct.Memory* @ext_4006f0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %394 = load i64, i64* %RBP, align 8
  %395 = add i64 %394, -80
  %396 = load i64, i64* %PC, align 8
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %395 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = load i64, i64* %RAX, align 8
  %401 = sub i64 %399, %400
  store i64 %401, i64* %RCX, align 8, !tbaa !2428
  %402 = icmp ult i64 %399, %400
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %15, align 1, !tbaa !2432
  %404 = trunc i64 %401 to i32
  %405 = and i32 %404, 255
  %406 = tail call i32 @llvm.ctpop.i32(i32 %405) #10
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  store i8 %409, i8* %22, align 1, !tbaa !2446
  %410 = xor i64 %400, %399
  %411 = xor i64 %410, %401
  %412 = lshr i64 %411, 4
  %413 = trunc i64 %412 to i8
  %414 = and i8 %413, 1
  store i8 %414, i8* %27, align 1, !tbaa !2447
  %415 = icmp eq i64 %401, 0
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %30, align 1, !tbaa !2448
  %417 = lshr i64 %401, 63
  %418 = trunc i64 %417 to i8
  store i8 %418, i8* %33, align 1, !tbaa !2449
  %419 = lshr i64 %399, 63
  %420 = lshr i64 %400, 63
  %421 = xor i64 %420, %419
  %422 = xor i64 %417, %419
  %423 = add nuw nsw i64 %422, %421
  %424 = icmp eq i64 %423, 2
  %425 = zext i1 %424 to i8
  store i8 %425, i8* %39, align 1, !tbaa !2450
  %426 = and i64 %401, 4294967295
  store i64 %426, i64* %RDX, align 8, !tbaa !2428
  %427 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %428 = add i64 %394, -20
  %429 = add i64 %396, 21
  store i64 %429, i64* %PC, align 8
  %430 = inttoptr i64 %428 to i32*
  %431 = load i32, i32* %430, align 4
  %432 = sext i32 %431 to i64
  %433 = shl nsw i64 %432, 4
  store i64 %433, i64* %RCX, align 8, !tbaa !2428
  %434 = add i64 %433, %427
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = icmp ult i64 %434, %427
  %436 = icmp ult i64 %434, %433
  %437 = or i1 %435, %436
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %15, align 1, !tbaa !2432
  %439 = trunc i64 %434 to i32
  %440 = and i32 %439, 255
  %441 = tail call i32 @llvm.ctpop.i32(i32 %440) #10
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  %444 = xor i8 %443, 1
  store i8 %444, i8* %22, align 1, !tbaa !2446
  %445 = xor i64 %433, %427
  %446 = xor i64 %445, %434
  %447 = lshr i64 %446, 4
  %448 = trunc i64 %447 to i8
  %449 = and i8 %448, 1
  store i8 %449, i8* %27, align 1, !tbaa !2447
  %450 = icmp eq i64 %434, 0
  %451 = zext i1 %450 to i8
  store i8 %451, i8* %30, align 1, !tbaa !2448
  %452 = lshr i64 %434, 63
  %453 = trunc i64 %452 to i8
  store i8 %453, i8* %33, align 1, !tbaa !2449
  %454 = lshr i64 %427, 63
  %455 = lshr i64 %432, 59
  %456 = and i64 %455, 1
  %457 = xor i64 %452, %454
  %458 = xor i64 %452, %456
  %459 = add nuw nsw i64 %457, %458
  %460 = icmp eq i64 %459, 2
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %39, align 1, !tbaa !2450
  %462 = add i64 %434, 8
  %463 = add i64 %396, 32
  store i64 %463, i64* %PC, align 8
  %464 = inttoptr i64 %462 to i64*
  %465 = load i64, i64* %464, align 8
  store i64 %465, i64* %R9, align 8, !tbaa !2428
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %466 = add i64 %396, 44
  store i64 %466, i64* %PC, align 8
  %467 = load i32, i32* %430, align 4
  %468 = sext i32 %467 to i64
  %469 = shl nsw i64 %468, 4
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = add i64 %469, %427
  store i64 %470, i64* %RAX, align 8, !tbaa !2428
  %471 = icmp ult i64 %470, %427
  %472 = icmp ult i64 %470, %469
  %473 = or i1 %471, %472
  %474 = zext i1 %473 to i8
  store i8 %474, i8* %15, align 1, !tbaa !2432
  %475 = trunc i64 %470 to i32
  %476 = and i32 %475, 255
  %477 = tail call i32 @llvm.ctpop.i32(i32 %476) #10
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  store i8 %480, i8* %22, align 1, !tbaa !2446
  %481 = xor i64 %469, %427
  %482 = xor i64 %481, %470
  %483 = lshr i64 %482, 4
  %484 = trunc i64 %483 to i8
  %485 = and i8 %484, 1
  store i8 %485, i8* %27, align 1, !tbaa !2447
  %486 = icmp eq i64 %470, 0
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %30, align 1, !tbaa !2448
  %488 = lshr i64 %470, 63
  %489 = trunc i64 %488 to i8
  store i8 %489, i8* %33, align 1, !tbaa !2449
  %490 = lshr i64 %468, 59
  %491 = and i64 %490, 1
  %492 = xor i64 %488, %454
  %493 = xor i64 %488, %491
  %494 = add nuw nsw i64 %492, %493
  %495 = icmp eq i64 %494, 2
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %39, align 1, !tbaa !2450
  %497 = inttoptr i64 %470 to i64*
  %498 = add i64 %396, 55
  store i64 %498, i64* %PC, align 8
  %499 = load i64, i64* %497, align 8
  store i64 %499, i64* %55, align 1, !tbaa !2451
  store double 0.000000e+00, double* %308, align 1, !tbaa !2451
  %500 = add i64 %394, -56
  %501 = add i64 %396, 59
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %500 to i64*
  %503 = load i64, i64* %502, align 8
  store i64 %503, i64* %RDI, align 8, !tbaa !2428
  %504 = add i64 %394, -64
  %505 = add i64 %396, 63
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %504 to i64*
  %507 = load i64, i64* %506, align 8
  store i64 %507, i64* %RSI, align 8, !tbaa !2428
  %508 = add i64 %394, -84
  %509 = add i64 %396, 67
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to i32*
  %511 = load i32, i32* %510, align 4
  %512 = zext i32 %511 to i64
  store i64 %512, i64* %309, align 8, !tbaa !2428
  %513 = add i64 %394, -88
  %514 = load i32, i32* %EDX, align 4
  %515 = add i64 %396, 70
  store i64 %515, i64* %PC, align 8
  %516 = inttoptr i64 %513 to i32*
  store i32 %514, i32* %516, align 4
  %517 = load i32, i32* %R10D, align 4
  %518 = zext i32 %517 to i64
  %519 = load i64, i64* %PC, align 8
  store i64 %518, i64* %RDX, align 8, !tbaa !2428
  %520 = load i64, i64* %RBP, align 8
  %521 = add i64 %520, -88
  %522 = add i64 %519, 6
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i32*
  %524 = load i32, i32* %523, align 4
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RCX, align 8, !tbaa !2428
  %526 = add i64 %520, -72
  %527 = add i64 %519, 10
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %526 to i64*
  %529 = load i64, i64* %528, align 8
  store i64 %529, i64* %R8, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %530 = add i64 %519, -2617
  %531 = add i64 %519, 17
  %532 = load i64, i64* %RSP, align 8, !tbaa !2428
  %533 = add i64 %532, -8
  %534 = inttoptr i64 %533 to i64*
  store i64 %531, i64* %534, align 8
  store i64 %533, i64* %RSP, align 8, !tbaa !2428
  store i64 %530, i64* %PC, align 8, !tbaa !2428
  %535 = tail call fastcc %struct.Memory* @ext_620938_fprintf(%struct.State* nonnull %0, %struct.Memory* %393)
  %536 = load i64, i64* %RBP, align 8
  %537 = add i64 %536, -92
  %538 = load i32, i32* %EAX, align 4
  %539 = load i64, i64* %PC, align 8
  %540 = add i64 %539, 3
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %537 to i32*
  store i32 %538, i32* %541, align 4
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -20
  %544 = load i64, i64* %PC, align 8
  %545 = add i64 %544, 3
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %543 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = add i32 %547, 1
  %549 = zext i32 %548 to i64
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = icmp eq i32 %547, -1
  %551 = icmp eq i32 %548, 0
  %552 = or i1 %550, %551
  %553 = zext i1 %552 to i8
  store i8 %553, i8* %15, align 1, !tbaa !2432
  %554 = and i32 %548, 255
  %555 = tail call i32 @llvm.ctpop.i32(i32 %554) #10
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = xor i8 %557, 1
  store i8 %558, i8* %22, align 1, !tbaa !2446
  %559 = xor i32 %548, %547
  %560 = lshr i32 %559, 4
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  store i8 %562, i8* %27, align 1, !tbaa !2447
  %563 = zext i1 %551 to i8
  store i8 %563, i8* %30, align 1, !tbaa !2448
  %564 = lshr i32 %548, 31
  %565 = trunc i32 %564 to i8
  store i8 %565, i8* %33, align 1, !tbaa !2449
  %566 = lshr i32 %547, 31
  %567 = xor i32 %564, %566
  %568 = add nuw nsw i32 %567, %564
  %569 = icmp eq i32 %568, 2
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %39, align 1, !tbaa !2450
  %571 = add i64 %544, 9
  store i64 %571, i64* %PC, align 8
  store i32 %548, i32* %546, align 4
  %572 = load i64, i64* %PC, align 8
  %573 = add i64 %572, -196
  store i64 %573, i64* %PC, align 8, !tbaa !2428
  br label %block_4010c2

block_401059:                                     ; preds = %block_401026, %block_401053
  %574 = phi i64 [ %658, %block_401026 ], [ %.pre15, %block_401053 ]
  %575 = phi i64 [ %696, %block_401026 ], [ %.pre14, %block_401053 ]
  %576 = add i64 %574, -20
  %577 = add i64 %575, 8
  store i64 %577, i64* %PC, align 8
  %578 = inttoptr i64 %576 to i32*
  %579 = load i32, i32* %578, align 4
  %580 = add i32 %579, 1
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = icmp eq i32 %579, -1
  %583 = icmp eq i32 %580, 0
  %584 = or i1 %582, %583
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %15, align 1, !tbaa !2432
  %586 = and i32 %580, 255
  %587 = tail call i32 @llvm.ctpop.i32(i32 %586) #10
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  %590 = xor i8 %589, 1
  store i8 %590, i8* %22, align 1, !tbaa !2446
  %591 = xor i32 %580, %579
  %592 = lshr i32 %591, 4
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  store i8 %594, i8* %27, align 1, !tbaa !2447
  %595 = zext i1 %583 to i8
  store i8 %595, i8* %30, align 1, !tbaa !2448
  %596 = lshr i32 %580, 31
  %597 = trunc i32 %596 to i8
  store i8 %597, i8* %33, align 1, !tbaa !2449
  %598 = lshr i32 %579, 31
  %599 = xor i32 %596, %598
  %600 = add nuw nsw i32 %599, %596
  %601 = icmp eq i32 %600, 2
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %39, align 1, !tbaa !2450
  %603 = add i64 %575, 14
  store i64 %603, i64* %PC, align 8
  store i32 %580, i32* %578, align 4
  %604 = load i64, i64* %PC, align 8
  %605 = add i64 %604, -81
  store i64 %605, i64* %PC, align 8, !tbaa !2428
  br label %block_401016

block_40118b:                                     ; preds = %block_4010c2
  %606 = add i64 %766, 7
  store i64 %606, i64* %PC, align 8
  store i32 0, i32* %736, align 4
  %607 = bitcast %union.VectorReg* %5 to double*
  %.pre13 = load i64, i64* %PC, align 8
  br label %block_401192

block_401026:                                     ; preds = %block_401016
  %608 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %608, i64* %RAX, align 8, !tbaa !2428
  %609 = add i64 %731, 12
  store i64 %609, i64* %PC, align 8
  %610 = load i32, i32* %701, align 4
  %611 = sext i32 %610 to i64
  %612 = shl nsw i64 %611, 4
  store i64 %612, i64* %RCX, align 8, !tbaa !2428
  %613 = add i64 %612, %608
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = icmp ult i64 %613, %608
  %615 = icmp ult i64 %613, %612
  %616 = or i1 %614, %615
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %15, align 1, !tbaa !2432
  %618 = trunc i64 %613 to i32
  %619 = and i32 %618, 255
  %620 = tail call i32 @llvm.ctpop.i32(i32 %619) #10
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = xor i8 %622, 1
  store i8 %623, i8* %22, align 1, !tbaa !2446
  %624 = xor i64 %612, %608
  %625 = xor i64 %624, %613
  %626 = lshr i64 %625, 4
  %627 = trunc i64 %626 to i8
  %628 = and i8 %627, 1
  store i8 %628, i8* %27, align 1, !tbaa !2447
  %629 = icmp eq i64 %613, 0
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %30, align 1, !tbaa !2448
  %631 = lshr i64 %613, 63
  %632 = trunc i64 %631 to i8
  store i8 %632, i8* %33, align 1, !tbaa !2449
  %633 = lshr i64 %608, 63
  %634 = lshr i64 %611, 59
  %635 = and i64 %634, 1
  %636 = xor i64 %631, %633
  %637 = xor i64 %631, %635
  %638 = add nuw nsw i64 %636, %637
  %639 = icmp eq i64 %638, 2
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %39, align 1, !tbaa !2450
  %641 = add i64 %613, 8
  %642 = add i64 %731, 23
  store i64 %642, i64* %PC, align 8
  %643 = inttoptr i64 %641 to i64*
  %644 = load i64, i64* %643, align 8
  store i64 %644, i64* %RDI, align 8, !tbaa !2428
  %645 = add i64 %731, -2358
  %646 = add i64 %731, 28
  %647 = load i64, i64* %RSP, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %646, i64* %649, align 8
  store i64 %648, i64* %RSP, align 8, !tbaa !2428
  store i64 %645, i64* %PC, align 8, !tbaa !2428
  %650 = tail call fastcc %struct.Memory* @ext_4006f0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %651 = load i32, i32* %EAX, align 4
  %652 = zext i32 %651 to i64
  %653 = load i64, i64* %PC, align 8
  store i64 %652, i64* %RDX, align 8, !tbaa !2428
  %654 = load i64, i64* %RBP, align 8
  %655 = add i64 %654, -40
  %656 = add i64 %653, 5
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %655 to i32*
  store i32 %651, i32* %657, align 4
  %658 = load i64, i64* %RBP, align 8
  %659 = add i64 %658, -40
  %660 = load i64, i64* %PC, align 8
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC, align 8
  %662 = inttoptr i64 %659 to i32*
  %663 = load i32, i32* %662, align 4
  %664 = zext i32 %663 to i64
  store i64 %664, i64* %RDX, align 8, !tbaa !2428
  %665 = add i64 %658, -36
  %666 = add i64 %660, 6
  store i64 %666, i64* %PC, align 8
  %667 = inttoptr i64 %665 to i32*
  %668 = load i32, i32* %667, align 4
  %669 = sub i32 %663, %668
  %670 = icmp ult i32 %663, %668
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %15, align 1, !tbaa !2432
  %672 = and i32 %669, 255
  %673 = tail call i32 @llvm.ctpop.i32(i32 %672) #10
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  store i8 %676, i8* %22, align 1, !tbaa !2446
  %677 = xor i32 %668, %663
  %678 = xor i32 %677, %669
  %679 = lshr i32 %678, 4
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  store i8 %681, i8* %27, align 1, !tbaa !2447
  %682 = icmp eq i32 %669, 0
  %683 = zext i1 %682 to i8
  store i8 %683, i8* %30, align 1, !tbaa !2448
  %684 = lshr i32 %669, 31
  %685 = trunc i32 %684 to i8
  store i8 %685, i8* %33, align 1, !tbaa !2449
  %686 = lshr i32 %663, 31
  %687 = lshr i32 %668, 31
  %688 = xor i32 %687, %686
  %689 = xor i32 %684, %686
  %690 = add nuw nsw i32 %689, %688
  %691 = icmp eq i32 %690, 2
  %692 = zext i1 %691 to i8
  store i8 %692, i8* %39, align 1, !tbaa !2450
  %693 = icmp ne i8 %685, 0
  %694 = xor i1 %693, %691
  %695 = or i1 %682, %694
  %.v18 = select i1 %695, i64 18, i64 12
  %696 = add i64 %.v18, %660
  store i64 %696, i64* %PC, align 8, !tbaa !2428
  br i1 %695, label %block_401059, label %block_401053

block_401016:                                     ; preds = %block_401059, %block_400ff0
  %697 = phi i64 [ %.pre, %block_400ff0 ], [ %605, %block_401059 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400ff0 ], [ %650, %block_401059 ]
  %698 = load i64, i64* %RBP, align 8
  %699 = add i64 %698, -20
  %700 = add i64 %697, 3
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %699 to i32*
  %702 = load i32, i32* %701, align 4
  %703 = zext i32 %702 to i64
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %705 = sub i32 %702, %704
  %706 = icmp ult i32 %702, %704
  %707 = zext i1 %706 to i8
  store i8 %707, i8* %15, align 1, !tbaa !2432
  %708 = and i32 %705, 255
  %709 = tail call i32 @llvm.ctpop.i32(i32 %708) #10
  %710 = trunc i32 %709 to i8
  %711 = and i8 %710, 1
  %712 = xor i8 %711, 1
  store i8 %712, i8* %22, align 1, !tbaa !2446
  %713 = xor i32 %704, %702
  %714 = xor i32 %713, %705
  %715 = lshr i32 %714, 4
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  store i8 %717, i8* %27, align 1, !tbaa !2447
  %718 = icmp eq i32 %705, 0
  %719 = zext i1 %718 to i8
  store i8 %719, i8* %30, align 1, !tbaa !2448
  %720 = lshr i32 %705, 31
  %721 = trunc i32 %720 to i8
  store i8 %721, i8* %33, align 1, !tbaa !2449
  %722 = lshr i32 %702, 31
  %723 = lshr i32 %704, 31
  %724 = xor i32 %723, %722
  %725 = xor i32 %720, %722
  %726 = add nuw nsw i32 %725, %724
  %727 = icmp eq i32 %726, 2
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %39, align 1, !tbaa !2450
  %729 = icmp ne i8 %721, 0
  %730 = xor i1 %729, %727
  %.v = select i1 %730, i64 16, i64 86
  %731 = add i64 %.v, %697
  store i64 %731, i64* %PC, align 8, !tbaa !2428
  br i1 %730, label %block_401026, label %block_40106c

block_4010c2:                                     ; preds = %block_4010d2, %block_40106c
  %732 = phi i64 [ %.pre12, %block_40106c ], [ %573, %block_4010d2 ]
  %MEMORY.3 = phi %struct.Memory* [ %296, %block_40106c ], [ %535, %block_4010d2 ]
  %733 = load i64, i64* %RBP, align 8
  %734 = add i64 %733, -20
  %735 = add i64 %732, 3
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to i32*
  %737 = load i32, i32* %736, align 4
  %738 = zext i32 %737 to i64
  store i64 %738, i64* %RAX, align 8, !tbaa !2428
  %739 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %740 = sub i32 %737, %739
  %741 = icmp ult i32 %737, %739
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %15, align 1, !tbaa !2432
  %743 = and i32 %740, 255
  %744 = tail call i32 @llvm.ctpop.i32(i32 %743) #10
  %745 = trunc i32 %744 to i8
  %746 = and i8 %745, 1
  %747 = xor i8 %746, 1
  store i8 %747, i8* %22, align 1, !tbaa !2446
  %748 = xor i32 %739, %737
  %749 = xor i32 %748, %740
  %750 = lshr i32 %749, 4
  %751 = trunc i32 %750 to i8
  %752 = and i8 %751, 1
  store i8 %752, i8* %27, align 1, !tbaa !2447
  %753 = icmp eq i32 %740, 0
  %754 = zext i1 %753 to i8
  store i8 %754, i8* %30, align 1, !tbaa !2448
  %755 = lshr i32 %740, 31
  %756 = trunc i32 %755 to i8
  store i8 %756, i8* %33, align 1, !tbaa !2449
  %757 = lshr i32 %737, 31
  %758 = lshr i32 %739, 31
  %759 = xor i32 %758, %757
  %760 = xor i32 %755, %757
  %761 = add nuw nsw i32 %760, %759
  %762 = icmp eq i32 %761, 2
  %763 = zext i1 %762 to i8
  store i8 %763, i8* %39, align 1, !tbaa !2450
  %764 = icmp ne i8 %756, 0
  %765 = xor i1 %764, %762
  %.v16 = select i1 %765, i64 16, i64 201
  %766 = add i64 %.v16, %732
  store i64 %766, i64* %PC, align 8, !tbaa !2428
  br i1 %765, label %block_4010d2, label %block_40118b
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401be0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_401be0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %30, align 8
  %31 = add i64 %22, 12
  store i64 %31, i64* %PC, align 8
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  store i64 %33, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %22, 13
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = add i64 %32, 16
  store i64 %39, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400cd0__Z9summarizePKciiii(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400cd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %7 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = load i64, i64* %RBP, align 8
  %13 = add i64 %1, 1
  store i64 %13, i64* %PC, align 8
  %14 = load i64, i64* %RSP, align 8, !tbaa !2428
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %12, i64* %16, align 8
  %17 = load i64, i64* %PC, align 8
  store i64 %15, i64* %RBP, align 8, !tbaa !2428
  %18 = add i64 %14, -136
  store i64 %18, i64* %RSP, align 8, !tbaa !2428
  %19 = icmp ult i64 %15, 128
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1, !tbaa !2432
  %22 = trunc i64 %18 to i32
  %23 = and i32 %22, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #10
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1, !tbaa !2446
  %29 = xor i64 %15, %18
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = icmp eq i64 %18, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !2448
  %37 = lshr i64 %18, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1, !tbaa !2449
  %40 = lshr i64 %15, 63
  %41 = xor i64 %37, %40
  %42 = add nuw nsw i64 %41, %40
  %43 = icmp eq i64 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1, !tbaa !2450
  %46 = bitcast [32 x %union.VectorReg]* %8 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %46, align 1, !tbaa !2456
  %47 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 8) to i64*), align 8
  %48 = bitcast %union.VectorReg* %9 to double*
  %49 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %47, i64* %49, align 1, !tbaa !2451
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %51 = bitcast i64* %50 to double*
  store double 0.000000e+00, double* %51, align 1, !tbaa !2451
  %52 = add i64 %14, -16
  %53 = load i64, i64* %RDI, align 8
  %54 = add i64 %17, 25
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -12
  %58 = load i32, i32* %ESI, align 4
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %61, align 4
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -16
  %64 = load i32, i32* %EDX, align 4
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 3
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %63 to i32*
  store i32 %64, i32* %67, align 4
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -20
  %70 = load i32, i32* %ECX, align 4
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %69 to i32*
  store i32 %70, i32* %73, align 4
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -24
  %76 = load i32, i32* %R8D, align 4
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %75 to i32*
  store i32 %76, i32* %79, align 4
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -12
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 5
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %81 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = sitofp i32 %85 to double
  %87 = bitcast %union.VectorReg* %10 to double*
  store double %86, double* %87, align 1, !tbaa !2451
  %88 = add i64 %80, -16
  %89 = add i64 %82, 10
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = sitofp i32 %91 to double
  %93 = bitcast %union.VectorReg* %11 to double*
  store double %92, double* %93, align 1, !tbaa !2451
  %94 = fmul double %86, %92
  %95 = load double, double* %48, align 1
  %96 = fdiv double %94, %95
  store double %96, double* %87, align 1, !tbaa !2451
  %97 = add i64 %80, -40
  %98 = add i64 %82, 23
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to double*
  store double %96, double* %99, align 8
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -48
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, 5
  store i64 %103, i64* %PC, align 8
  %104 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %105 = load i64, i64* %104, align 1
  %106 = inttoptr i64 %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = load i64, i64* %RBP, align 8
  %108 = add i64 %107, -56
  %109 = load i64, i64* %PC, align 8
  %110 = add i64 %109, 5
  store i64 %110, i64* %PC, align 8
  %111 = load i64, i64* %104, align 1
  %112 = inttoptr i64 %108 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -60
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 7
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i32*
  store i32 12, i32* %117, align 4
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -28
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 7
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %119 to i32*
  store i32 0, i32* %122, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400d26

block_400f98:                                     ; preds = %block_400f48
  %123 = add i64 %863, -8
  %124 = add i64 %896, 4
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %RSI, align 8, !tbaa !2428
  %127 = add i64 %863, -56
  %128 = add i64 %896, 9
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to double*
  %130 = load double, double* %129, align 8
  %131 = add i32 %869, -1
  %132 = zext i32 %131 to i64
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = icmp eq i32 %869, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %21, align 1, !tbaa !2432
  %135 = and i32 %131, 255
  %136 = tail call i32 @llvm.ctpop.i32(i32 %135) #10
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  store i8 %139, i8* %28, align 1, !tbaa !2446
  %140 = xor i32 %131, %869
  %141 = lshr i32 %140, 4
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* %33, align 1, !tbaa !2447
  %144 = icmp eq i32 %131, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %36, align 1, !tbaa !2448
  %146 = lshr i32 %131, 31
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %39, align 1, !tbaa !2449
  %148 = xor i32 %146, %888
  %149 = add nuw nsw i32 %148, %888
  %150 = icmp eq i32 %149, 2
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %45, align 1, !tbaa !2450
  %152 = sitofp i32 %131 to double
  store double %152, double* %48, align 1, !tbaa !2451
  %153 = fdiv double %130, %152
  store double %153, double* %1022, align 1, !tbaa !2451
  store i64 0, i64* %795, align 1, !tbaa !2451
  %154 = add i64 %863, -120
  %155 = add i64 %896, 31
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %154 to i64*
  store i64 %126, i64* %156, align 8
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, -2295
  %159 = add i64 %157, 5
  %160 = load i64, i64* %RSP, align 8, !tbaa !2428
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %162, align 8
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  store i64 %158, i64* %PC, align 8, !tbaa !2428
  %163 = tail call fastcc %struct.Memory* @ext_6208f8_exp(%struct.State* nonnull %0, %struct.Memory* %MEMORY.4)
  %164 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 242), i64* %RDI, align 8, !tbaa !2428
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -120
  %167 = add i64 %164, 14
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RSI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %170 = add i64 %164, -2236
  %171 = add i64 %164, 21
  %172 = load i64, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %172, -8
  %174 = inttoptr i64 %173 to i64*
  store i64 %171, i64* %174, align 8
  store i64 %173, i64* %RSP, align 8, !tbaa !2428
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  %175 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %163)
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -124
  %178 = load i32, i32* %EAX, align 4
  %179 = load i64, i64* %PC, align 8
  %180 = add i64 %179, 3
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %177 to i32*
  store i32 %178, i32* %181, align 4
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_400fd4

block_400d36:                                     ; preds = %block_400d26
  %182 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = add i64 %946, 12
  store i64 %183, i64* %PC, align 8
  %184 = load i32, i32* %916, align 4
  %185 = sext i32 %184 to i64
  %186 = shl nsw i64 %185, 4
  store i64 %186, i64* %RCX, align 8, !tbaa !2428
  %187 = add i64 %186, %182
  store i64 %187, i64* %RAX, align 8, !tbaa !2428
  %188 = icmp ult i64 %187, %182
  %189 = icmp ult i64 %187, %186
  %190 = or i1 %188, %189
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %21, align 1, !tbaa !2432
  %192 = trunc i64 %187 to i32
  %193 = and i32 %192, 255
  %194 = tail call i32 @llvm.ctpop.i32(i32 %193) #10
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  %197 = xor i8 %196, 1
  store i8 %197, i8* %28, align 1, !tbaa !2446
  %198 = xor i64 %186, %182
  %199 = xor i64 %198, %187
  %200 = lshr i64 %199, 4
  %201 = trunc i64 %200 to i8
  %202 = and i8 %201, 1
  store i8 %202, i8* %33, align 1, !tbaa !2447
  %203 = icmp eq i64 %187, 0
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %36, align 1, !tbaa !2448
  %205 = lshr i64 %187, 63
  %206 = trunc i64 %205 to i8
  store i8 %206, i8* %39, align 1, !tbaa !2449
  %207 = lshr i64 %182, 63
  %208 = lshr i64 %185, 59
  %209 = and i64 %208, 1
  %210 = xor i64 %205, %207
  %211 = xor i64 %205, %209
  %212 = add nuw nsw i64 %210, %211
  %213 = icmp eq i64 %212, 2
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %45, align 1, !tbaa !2450
  %215 = add i64 %187, 8
  %216 = add i64 %946, 23
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RDI, align 8, !tbaa !2428
  %219 = add i64 %946, -1606
  %220 = add i64 %946, 28
  %221 = load i64, i64* %RSP, align 8, !tbaa !2428
  %222 = add i64 %221, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 %220, i64* %223, align 8
  store i64 %222, i64* %RSP, align 8, !tbaa !2428
  store i64 %219, i64* %PC, align 8, !tbaa !2428
  %224 = tail call fastcc %struct.Memory* @ext_4006f0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.5)
  %225 = load i32, i32* %EAX, align 4
  %226 = zext i32 %225 to i64
  %227 = load i64, i64* %PC, align 8
  store i64 %226, i64* %RDX, align 8, !tbaa !2428
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -64
  %230 = add i64 %227, 5
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i32*
  store i32 %225, i32* %231, align 4
  %232 = load i64, i64* %RBP, align 8
  %233 = add i64 %232, -64
  %234 = load i64, i64* %PC, align 8
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236, align 4
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RDX, align 8, !tbaa !2428
  %239 = add i64 %232, -60
  %240 = add i64 %234, 6
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = sub i32 %237, %242
  %244 = icmp ult i32 %237, %242
  %245 = zext i1 %244 to i8
  store i8 %245, i8* %21, align 1, !tbaa !2432
  %246 = and i32 %243, 255
  %247 = tail call i32 @llvm.ctpop.i32(i32 %246) #10
  %248 = trunc i32 %247 to i8
  %249 = and i8 %248, 1
  %250 = xor i8 %249, 1
  store i8 %250, i8* %28, align 1, !tbaa !2446
  %251 = xor i32 %242, %237
  %252 = xor i32 %251, %243
  %253 = lshr i32 %252, 4
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  store i8 %255, i8* %33, align 1, !tbaa !2447
  %256 = icmp eq i32 %243, 0
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %36, align 1, !tbaa !2448
  %258 = lshr i32 %243, 31
  %259 = trunc i32 %258 to i8
  store i8 %259, i8* %39, align 1, !tbaa !2449
  %260 = lshr i32 %237, 31
  %261 = lshr i32 %242, 31
  %262 = xor i32 %261, %260
  %263 = xor i32 %258, %260
  %264 = add nuw nsw i32 %263, %262
  %265 = icmp eq i32 %264, 2
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %45, align 1, !tbaa !2450
  %267 = icmp ne i8 %259, 0
  %268 = xor i1 %267, %265
  %269 = or i1 %256, %268
  %.v30 = select i1 %269, i64 18, i64 12
  %270 = add i64 %.v30, %234
  store i64 %270, i64* %PC, align 8, !tbaa !2428
  br i1 %269, label %block_400d69, label %block_400d63

block_400dda:                                     ; preds = %block_400dca
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 160), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 159), i64* %RCX, align 8, !tbaa !2428
  %271 = add i64 %761, 23
  store i64 %271, i64* %PC, align 8
  %272 = load i32, i32* %731, align 4
  %273 = zext i32 %272 to i64
  store i64 %273, i64* %RSI, align 8, !tbaa !2428
  %274 = add i64 %728, -60
  %275 = add i64 %761, 27
  store i64 %275, i64* %PC, align 8
  %276 = inttoptr i64 %274 to i32*
  %277 = load i32, i32* %276, align 4
  %278 = sext i32 %277 to i64
  store i64 %278, i64* %RAX, align 8, !tbaa !2428
  %279 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %279, i64* %RDX, align 8, !tbaa !2428
  %280 = add i64 %761, 39
  store i64 %280, i64* %PC, align 8
  %281 = load i32, i32* %731, align 4
  %282 = sext i32 %281 to i64
  %283 = shl nsw i64 %282, 4
  store i64 %283, i64* %R8, align 8, !tbaa !2428
  %284 = add i64 %283, %279
  store i64 %284, i64* %RDX, align 8, !tbaa !2428
  %285 = icmp ult i64 %284, %279
  %286 = icmp ult i64 %284, %283
  %287 = or i1 %285, %286
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %21, align 1, !tbaa !2432
  %289 = trunc i64 %284 to i32
  %290 = and i32 %289, 255
  %291 = tail call i32 @llvm.ctpop.i32(i32 %290) #10
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %28, align 1, !tbaa !2446
  %295 = xor i64 %283, %279
  %296 = xor i64 %295, %284
  %297 = lshr i64 %296, 4
  %298 = trunc i64 %297 to i8
  %299 = and i8 %298, 1
  store i8 %299, i8* %33, align 1, !tbaa !2447
  %300 = icmp eq i64 %284, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %36, align 1, !tbaa !2448
  %302 = lshr i64 %284, 63
  %303 = trunc i64 %302 to i8
  store i8 %303, i8* %39, align 1, !tbaa !2449
  %304 = lshr i64 %279, 63
  %305 = lshr i64 %282, 59
  %306 = and i64 %305, 1
  %307 = xor i64 %302, %304
  %308 = xor i64 %302, %306
  %309 = add nuw nsw i64 %307, %308
  %310 = icmp eq i64 %309, 2
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %45, align 1, !tbaa !2450
  %312 = add i64 %284, 8
  %313 = add i64 %761, 50
  store i64 %313, i64* %PC, align 8
  %314 = inttoptr i64 %312 to i64*
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %RDX, align 8, !tbaa !2428
  %316 = add i64 %728, -80
  %317 = add i64 %761, 54
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %316 to i64*
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 160), i64* %318, align 8
  %319 = load i64, i64* %RDX, align 8
  %320 = load i64, i64* %PC, align 8
  store i64 %319, i64* %RDI, align 8, !tbaa !2428
  %321 = load i64, i64* %RBP, align 8
  %322 = add i64 %321, -88
  %323 = load i64, i64* %RAX, align 8
  %324 = add i64 %320, 7
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %322 to i64*
  store i64 %323, i64* %325, align 8
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -96
  %328 = load i64, i64* %RCX, align 8
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 4
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %327 to i64*
  store i64 %328, i64* %331, align 8
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -100
  %334 = load i32, i32* %ESI, align 4
  %335 = load i64, i64* %PC, align 8
  %336 = add i64 %335, 3
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %333 to i32*
  store i32 %334, i32* %337, align 4
  %338 = load i64, i64* %PC, align 8
  %339 = add i64 %338, -1838
  %340 = add i64 %338, 5
  %341 = load i64, i64* %RSP, align 8, !tbaa !2428
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %340, i64* %343, align 8
  store i64 %342, i64* %RSP, align 8, !tbaa !2428
  store i64 %339, i64* %PC, align 8, !tbaa !2428
  %344 = tail call fastcc %struct.Memory* @ext_4006f0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %345 = load i64, i64* %RBP, align 8
  %346 = add i64 %345, -88
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349, align 8
  %351 = load i64, i64* %RAX, align 8
  %352 = sub i64 %350, %351
  store i64 %352, i64* %RCX, align 8, !tbaa !2428
  %353 = icmp ult i64 %350, %351
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %21, align 1, !tbaa !2432
  %355 = trunc i64 %352 to i32
  %356 = and i32 %355, 255
  %357 = tail call i32 @llvm.ctpop.i32(i32 %356) #10
  %358 = trunc i32 %357 to i8
  %359 = and i8 %358, 1
  %360 = xor i8 %359, 1
  store i8 %360, i8* %28, align 1, !tbaa !2446
  %361 = xor i64 %351, %350
  %362 = xor i64 %361, %352
  %363 = lshr i64 %362, 4
  %364 = trunc i64 %363 to i8
  %365 = and i8 %364, 1
  store i8 %365, i8* %33, align 1, !tbaa !2447
  %366 = icmp eq i64 %352, 0
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %36, align 1, !tbaa !2448
  %368 = lshr i64 %352, 63
  %369 = trunc i64 %368 to i8
  store i8 %369, i8* %39, align 1, !tbaa !2449
  %370 = lshr i64 %350, 63
  %371 = lshr i64 %351, 63
  %372 = xor i64 %371, %370
  %373 = xor i64 %368, %370
  %374 = add nuw nsw i64 %373, %372
  %375 = icmp eq i64 %374, 2
  %376 = zext i1 %375 to i8
  store i8 %376, i8* %45, align 1, !tbaa !2450
  %377 = and i64 %352, 4294967295
  store i64 %377, i64* %RSI, align 8, !tbaa !2428
  %378 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = add i64 %345, -28
  %380 = add i64 %347, 21
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i32*
  %382 = load i32, i32* %381, align 4
  %383 = sext i32 %382 to i64
  %384 = shl nsw i64 %383, 4
  store i64 %384, i64* %RCX, align 8, !tbaa !2428
  %385 = add i64 %384, %378
  store i64 %385, i64* %RAX, align 8, !tbaa !2428
  %386 = icmp ult i64 %385, %378
  %387 = icmp ult i64 %385, %384
  %388 = or i1 %386, %387
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %21, align 1, !tbaa !2432
  %390 = trunc i64 %385 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #10
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %28, align 1, !tbaa !2446
  %396 = xor i64 %384, %378
  %397 = xor i64 %396, %385
  %398 = lshr i64 %397, 4
  %399 = trunc i64 %398 to i8
  %400 = and i8 %399, 1
  store i8 %400, i8* %33, align 1, !tbaa !2447
  %401 = icmp eq i64 %385, 0
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %36, align 1, !tbaa !2448
  %403 = lshr i64 %385, 63
  %404 = trunc i64 %403 to i8
  store i8 %404, i8* %39, align 1, !tbaa !2449
  %405 = lshr i64 %378, 63
  %406 = lshr i64 %383, 59
  %407 = and i64 %406, 1
  %408 = xor i64 %403, %405
  %409 = xor i64 %403, %407
  %410 = add nuw nsw i64 %408, %409
  %411 = icmp eq i64 %410, 2
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %45, align 1, !tbaa !2450
  %413 = add i64 %385, 8
  %414 = add i64 %347, 32
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %413 to i64*
  %416 = load i64, i64* %415, align 8
  store i64 %416, i64* %R8, align 8, !tbaa !2428
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %417 = add i64 %347, 44
  store i64 %417, i64* %PC, align 8
  %418 = load i32, i32* %381, align 4
  %419 = sext i32 %418 to i64
  %420 = shl nsw i64 %419, 4
  store i64 %420, i64* %RCX, align 8, !tbaa !2428
  %421 = add i64 %420, %378
  store i64 %421, i64* %RAX, align 8, !tbaa !2428
  %422 = icmp ult i64 %421, %378
  %423 = icmp ult i64 %421, %420
  %424 = or i1 %422, %423
  %425 = zext i1 %424 to i8
  store i8 %425, i8* %21, align 1, !tbaa !2432
  %426 = trunc i64 %421 to i32
  %427 = and i32 %426, 255
  %428 = tail call i32 @llvm.ctpop.i32(i32 %427) #10
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = xor i8 %430, 1
  store i8 %431, i8* %28, align 1, !tbaa !2446
  %432 = xor i64 %420, %378
  %433 = xor i64 %432, %421
  %434 = lshr i64 %433, 4
  %435 = trunc i64 %434 to i8
  %436 = and i8 %435, 1
  store i8 %436, i8* %33, align 1, !tbaa !2447
  %437 = icmp eq i64 %421, 0
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %36, align 1, !tbaa !2448
  %439 = lshr i64 %421, 63
  %440 = trunc i64 %439 to i8
  store i8 %440, i8* %39, align 1, !tbaa !2449
  %441 = lshr i64 %419, 59
  %442 = and i64 %441, 1
  %443 = xor i64 %439, %405
  %444 = xor i64 %439, %442
  %445 = add nuw nsw i64 %443, %444
  %446 = icmp eq i64 %445, 2
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %45, align 1, !tbaa !2450
  %448 = inttoptr i64 %421 to i64*
  %449 = add i64 %347, 55
  store i64 %449, i64* %PC, align 8
  %450 = load i64, i64* %448, align 8
  store i64 %450, i64* %104, align 1, !tbaa !2451
  store double 0.000000e+00, double* %859, align 1, !tbaa !2451
  %451 = add i64 %345, -40
  %452 = add i64 %347, 60
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453, align 8
  store i64 %454, i64* %49, align 1, !tbaa !2451
  store double 0.000000e+00, double* %51, align 1, !tbaa !2451
  %455 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %456 = add i64 %347, 72
  store i64 %456, i64* %PC, align 8
  %457 = load i32, i32* %381, align 4
  %458 = sext i32 %457 to i64
  %459 = shl nsw i64 %458, 4
  store i64 %459, i64* %RCX, align 8, !tbaa !2428
  %460 = add i64 %459, %455
  store i64 %460, i64* %RAX, align 8, !tbaa !2428
  %461 = icmp ult i64 %460, %455
  %462 = icmp ult i64 %460, %459
  %463 = or i1 %461, %462
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %21, align 1, !tbaa !2432
  %465 = trunc i64 %460 to i32
  %466 = and i32 %465, 255
  %467 = tail call i32 @llvm.ctpop.i32(i32 %466) #10
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = xor i8 %469, 1
  store i8 %470, i8* %28, align 1, !tbaa !2446
  %471 = xor i64 %459, %455
  %472 = xor i64 %471, %460
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  store i8 %475, i8* %33, align 1, !tbaa !2447
  %476 = icmp eq i64 %460, 0
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %36, align 1, !tbaa !2448
  %478 = lshr i64 %460, 63
  %479 = trunc i64 %478 to i8
  store i8 %479, i8* %39, align 1, !tbaa !2449
  %480 = lshr i64 %455, 63
  %481 = lshr i64 %458, 59
  %482 = and i64 %481, 1
  %483 = xor i64 %478, %480
  %484 = xor i64 %478, %482
  %485 = add nuw nsw i64 %483, %484
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %45, align 1, !tbaa !2450
  %488 = inttoptr i64 %460 to double*
  %489 = add i64 %347, 83
  store i64 %489, i64* %PC, align 8
  %490 = bitcast i64 %454 to double
  %491 = load double, double* %488, align 8
  %492 = fdiv double %490, %491
  store double %492, double* %48, align 1, !tbaa !2451
  store i64 0, i64* %50, align 1, !tbaa !2451
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %493 = load i64, i64* %RBP, align 8
  %494 = add i64 %493, -28
  %495 = add i64 %347, 95
  store i64 %495, i64* %PC, align 8
  %496 = inttoptr i64 %494 to i32*
  %497 = load i32, i32* %496, align 4
  %498 = sext i32 %497 to i64
  %499 = shl nsw i64 %498, 4
  store i64 %499, i64* %RCX, align 8, !tbaa !2428
  %500 = add i64 %499, %455
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = icmp ult i64 %500, %455
  %502 = icmp ult i64 %500, %499
  %503 = or i1 %501, %502
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %21, align 1, !tbaa !2432
  %505 = trunc i64 %500 to i32
  %506 = and i32 %505, 255
  %507 = tail call i32 @llvm.ctpop.i32(i32 %506) #10
  %508 = trunc i32 %507 to i8
  %509 = and i8 %508, 1
  %510 = xor i8 %509, 1
  store i8 %510, i8* %28, align 1, !tbaa !2446
  %511 = xor i64 %499, %455
  %512 = xor i64 %511, %500
  %513 = lshr i64 %512, 4
  %514 = trunc i64 %513 to i8
  %515 = and i8 %514, 1
  store i8 %515, i8* %33, align 1, !tbaa !2447
  %516 = icmp eq i64 %500, 0
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %36, align 1, !tbaa !2448
  %518 = lshr i64 %500, 63
  %519 = trunc i64 %518 to i8
  store i8 %519, i8* %39, align 1, !tbaa !2449
  %520 = lshr i64 %498, 59
  %521 = and i64 %520, 1
  %522 = xor i64 %518, %480
  %523 = xor i64 %518, %521
  %524 = add nuw nsw i64 %522, %523
  %525 = icmp eq i64 %524, 2
  %526 = zext i1 %525 to i8
  store i8 %526, i8* %45, align 1, !tbaa !2450
  %527 = inttoptr i64 %500 to i64*
  %528 = add i64 %347, 106
  store i64 %528, i64* %PC, align 8
  %529 = load i64, i64* %527, align 8
  store i64 %529, i64* %797, align 1, !tbaa !2451
  store double 0.000000e+00, double* %860, align 1, !tbaa !2451
  %530 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %530, i64* %RAX, align 8, !tbaa !2428
  %531 = add i64 %347, 118
  store i64 %531, i64* %PC, align 8
  %532 = bitcast i64 %529 to double
  %533 = inttoptr i64 %530 to double*
  %534 = load double, double* %533, align 8
  %535 = fdiv double %532, %534
  store double %535, double* %87, align 1, !tbaa !2451
  store i64 0, i64* %796, align 1, !tbaa !2451
  %536 = add i64 %493, -80
  %537 = add i64 %347, 122
  store i64 %537, i64* %PC, align 8
  %538 = inttoptr i64 %536 to i64*
  %539 = load i64, i64* %538, align 8
  store i64 %539, i64* %RDI, align 8, !tbaa !2428
  %540 = add i64 %493, -100
  %541 = add i64 %347, 126
  store i64 %541, i64* %PC, align 8
  %542 = inttoptr i64 %540 to i32*
  %543 = load i32, i32* %542, align 4
  %544 = zext i32 %543 to i64
  store i64 %544, i64* %861, align 8, !tbaa !2428
  %545 = add i64 %493, -104
  %546 = load i32, i32* %ESI, align 4
  %547 = add i64 %347, 129
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %545 to i32*
  store i32 %546, i32* %548, align 4
  %549 = load i32, i32* %R9D, align 4
  %550 = zext i32 %549 to i64
  %551 = load i64, i64* %PC, align 8
  store i64 %550, i64* %RSI, align 8, !tbaa !2428
  %552 = load i64, i64* %RBP, align 8
  %553 = add i64 %552, -104
  %554 = add i64 %551, 6
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %553 to i32*
  %556 = load i32, i32* %555, align 4
  %557 = zext i32 %556 to i64
  store i64 %557, i64* %RDX, align 8, !tbaa !2428
  %558 = add i64 %552, -96
  %559 = add i64 %551, 10
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i64*
  %561 = load i64, i64* %560, align 8
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %562 = add i64 %551, -1956
  %563 = add i64 %551, 17
  %564 = load i64, i64* %RSP, align 8, !tbaa !2428
  %565 = add i64 %564, -8
  %566 = inttoptr i64 %565 to i64*
  store i64 %563, i64* %566, align 8
  store i64 %565, i64* %RSP, align 8, !tbaa !2428
  store i64 %562, i64* %PC, align 8, !tbaa !2428
  %567 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %344)
  %568 = load i64, i64* %RBP, align 8
  %569 = add i64 %568, -108
  %570 = load i32, i32* %EAX, align 4
  %571 = load i64, i64* %PC, align 8
  %572 = add i64 %571, 3
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %569 to i32*
  store i32 %570, i32* %573, align 4
  %574 = load i64, i64* %RBP, align 8
  %575 = add i64 %574, -28
  %576 = load i64, i64* %PC, align 8
  %577 = add i64 %576, 3
  store i64 %577, i64* %PC, align 8
  %578 = inttoptr i64 %575 to i32*
  %579 = load i32, i32* %578, align 4
  %580 = add i32 %579, 1
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = icmp eq i32 %579, -1
  %583 = icmp eq i32 %580, 0
  %584 = or i1 %582, %583
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %21, align 1, !tbaa !2432
  %586 = and i32 %580, 255
  %587 = tail call i32 @llvm.ctpop.i32(i32 %586) #10
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  %590 = xor i8 %589, 1
  store i8 %590, i8* %28, align 1, !tbaa !2446
  %591 = xor i32 %580, %579
  %592 = lshr i32 %591, 4
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  store i8 %594, i8* %33, align 1, !tbaa !2447
  %595 = zext i1 %583 to i8
  store i8 %595, i8* %36, align 1, !tbaa !2448
  %596 = lshr i32 %580, 31
  %597 = trunc i32 %596 to i8
  store i8 %597, i8* %39, align 1, !tbaa !2449
  %598 = lshr i32 %579, 31
  %599 = xor i32 %596, %598
  %600 = add nuw nsw i32 %599, %596
  %601 = icmp eq i32 %600, 2
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %45, align 1, !tbaa !2450
  %603 = add i64 %576, 9
  store i64 %603, i64* %PC, align 8
  store i32 %580, i32* %578, align 4
  %604 = load i64, i64* %PC, align 8
  %605 = add i64 %604, -247
  store i64 %605, i64* %PC, align 8, !tbaa !2428
  br label %block_400dca

block_400fd4:                                     ; preds = %block_400f37, %block_400f0c, %block_400f98
  %606 = phi i64 [ %716, %block_400f0c ], [ %911, %block_400f37 ], [ %.pre23, %block_400f98 ]
  %MEMORY.0 = phi %struct.Memory* [ %686, %block_400f0c ], [ %686, %block_400f37 ], [ %175, %block_400f98 ]
  store i32 0, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %607 = load i64, i64* %RSP, align 8
  %608 = add i64 %607, 128
  store i64 %608, i64* %RSP, align 8, !tbaa !2428
  %609 = icmp ugt i64 %607, -129
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %21, align 1, !tbaa !2432
  %611 = trunc i64 %608 to i32
  %612 = and i32 %611, 255
  %613 = tail call i32 @llvm.ctpop.i32(i32 %612) #10
  %614 = trunc i32 %613 to i8
  %615 = and i8 %614, 1
  %616 = xor i8 %615, 1
  store i8 %616, i8* %28, align 1, !tbaa !2446
  %617 = xor i64 %608, %607
  %618 = lshr i64 %617, 4
  %619 = trunc i64 %618 to i8
  %620 = and i8 %619, 1
  store i8 %620, i8* %33, align 1, !tbaa !2447
  %621 = icmp eq i64 %608, 0
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %36, align 1, !tbaa !2448
  %623 = lshr i64 %608, 63
  %624 = trunc i64 %623 to i8
  store i8 %624, i8* %39, align 1, !tbaa !2449
  %625 = lshr i64 %607, 63
  %626 = xor i64 %623, %625
  %627 = add nuw nsw i64 %626, %623
  %628 = icmp eq i64 %627, 2
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %45, align 1, !tbaa !2450
  %630 = add i64 %606, 19
  store i64 %630, i64* %PC, align 8
  %631 = add i64 %607, 136
  %632 = inttoptr i64 %608 to i64*
  %633 = load i64, i64* %632, align 8
  store i64 %633, i64* %RBP, align 8, !tbaa !2428
  store i64 %631, i64* %RSP, align 8, !tbaa !2428
  %634 = add i64 %606, 20
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %631 to i64*
  %636 = load i64, i64* %635, align 8
  store i64 %636, i64* %PC, align 8, !tbaa !2428
  %637 = add i64 %607, 144
  store i64 %637, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400ecd:                                     ; preds = %block_400ec6, %block_400edd
  %638 = phi i64 [ %.pre21, %block_400ec6 ], [ %1020, %block_400edd ]
  %639 = load i64, i64* %RBP, align 8
  %640 = add i64 %639, -28
  %641 = add i64 %638, 3
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i32*
  %643 = load i32, i32* %642, align 4
  %644 = zext i32 %643 to i64
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %646 = sub i32 %643, %645
  %647 = icmp ult i32 %643, %645
  %648 = zext i1 %647 to i8
  store i8 %648, i8* %21, align 1, !tbaa !2432
  %649 = and i32 %646, 255
  %650 = tail call i32 @llvm.ctpop.i32(i32 %649) #10
  %651 = trunc i32 %650 to i8
  %652 = and i8 %651, 1
  %653 = xor i8 %652, 1
  store i8 %653, i8* %28, align 1, !tbaa !2446
  %654 = xor i32 %645, %643
  %655 = xor i32 %654, %646
  %656 = lshr i32 %655, 4
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  store i8 %658, i8* %33, align 1, !tbaa !2447
  %659 = icmp eq i32 %646, 0
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %36, align 1, !tbaa !2448
  %661 = lshr i32 %646, 31
  %662 = trunc i32 %661 to i8
  store i8 %662, i8* %39, align 1, !tbaa !2449
  %663 = lshr i32 %643, 31
  %664 = lshr i32 %645, 31
  %665 = xor i32 %664, %663
  %666 = xor i32 %661, %663
  %667 = add nuw nsw i32 %666, %665
  %668 = icmp eq i32 %667, 2
  %669 = zext i1 %668 to i8
  store i8 %669, i8* %45, align 1, !tbaa !2450
  %670 = icmp ne i8 %662, 0
  %671 = xor i1 %670, %668
  %.v27 = select i1 %671, i64 16, i64 63
  %672 = add i64 %.v27, %638
  store i64 %672, i64* %PC, align 8, !tbaa !2428
  br i1 %671, label %block_400edd, label %block_400f0c

block_400f0c:                                     ; preds = %block_400ecd
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 203), i64* %RDI, align 8, !tbaa !2428
  %673 = add i64 %639, -8
  %674 = add i64 %672, 14
  store i64 %674, i64* %PC, align 8
  %675 = inttoptr i64 %673 to i64*
  %676 = load i64, i64* %675, align 8
  store i64 %676, i64* %RSI, align 8, !tbaa !2428
  %677 = add i64 %639, -48
  %678 = add i64 %672, 19
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %677 to i64*
  %680 = load i64, i64* %679, align 8
  store i64 %680, i64* %104, align 1, !tbaa !2451
  store double 0.000000e+00, double* %859, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %681 = add i64 %672, -2060
  %682 = add i64 %672, 26
  %683 = load i64, i64* %RSP, align 8, !tbaa !2428
  %684 = add i64 %683, -8
  %685 = inttoptr i64 %684 to i64*
  store i64 %682, i64* %685, align 8
  store i64 %684, i64* %RSP, align 8, !tbaa !2428
  store i64 %681, i64* %PC, align 8, !tbaa !2428
  %686 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %687 = load i64, i64* %PC, align 8
  %688 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %689 = add i32 %688, -1
  %690 = icmp eq i32 %688, 0
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %21, align 1, !tbaa !2432
  %692 = and i32 %689, 255
  %693 = tail call i32 @llvm.ctpop.i32(i32 %692) #10
  %694 = trunc i32 %693 to i8
  %695 = and i8 %694, 1
  %696 = xor i8 %695, 1
  store i8 %696, i8* %28, align 1, !tbaa !2446
  %697 = xor i32 %689, %688
  %698 = lshr i32 %697, 4
  %699 = trunc i32 %698 to i8
  %700 = and i8 %699, 1
  store i8 %700, i8* %33, align 1, !tbaa !2447
  %701 = icmp eq i32 %689, 0
  %702 = zext i1 %701 to i8
  store i8 %702, i8* %36, align 1, !tbaa !2448
  %703 = lshr i32 %689, 31
  %704 = trunc i32 %703 to i8
  store i8 %704, i8* %39, align 1, !tbaa !2449
  %705 = lshr i32 %688, 31
  %706 = xor i32 %703, %705
  %707 = add nuw nsw i32 %706, %705
  %708 = icmp eq i32 %707, 2
  %709 = zext i1 %708 to i8
  store i8 %709, i8* %45, align 1, !tbaa !2450
  %710 = load i64, i64* %RBP, align 8
  %711 = add i64 %710, -112
  %712 = load i32, i32* %EAX, align 4
  %713 = add i64 %687, 11
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %711 to i32*
  store i32 %712, i32* %714, align 4
  %715 = load i64, i64* %PC, align 8
  %716 = add i64 %715, 163
  %717 = add i64 %715, 6
  %718 = load i8, i8* %36, align 1, !tbaa !2448
  %719 = icmp ne i8 %718, 0
  %720 = load i8, i8* %39, align 1, !tbaa !2449
  %721 = icmp ne i8 %720, 0
  %722 = load i8, i8* %45, align 1, !tbaa !2450
  %723 = icmp ne i8 %722, 0
  %724 = xor i1 %721, %723
  %725 = or i1 %719, %724
  %726 = select i1 %725, i64 %716, i64 %717
  store i64 %726, i64* %PC, align 8, !tbaa !2428
  br i1 %725, label %block_400fd4, label %block_400f37

block_400dca:                                     ; preds = %block_400d7c, %block_400dda
  %727 = phi i64 [ %.pre20, %block_400d7c ], [ %605, %block_400dda ]
  %MEMORY.2 = phi %struct.Memory* [ %847, %block_400d7c ], [ %567, %block_400dda ]
  %728 = load i64, i64* %RBP, align 8
  %729 = add i64 %728, -28
  %730 = add i64 %727, 3
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %729 to i32*
  %732 = load i32, i32* %731, align 4
  %733 = zext i32 %732 to i64
  store i64 %733, i64* %RAX, align 8, !tbaa !2428
  %734 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %735 = sub i32 %732, %734
  %736 = icmp ult i32 %732, %734
  %737 = zext i1 %736 to i8
  store i8 %737, i8* %21, align 1, !tbaa !2432
  %738 = and i32 %735, 255
  %739 = tail call i32 @llvm.ctpop.i32(i32 %738) #10
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  store i8 %742, i8* %28, align 1, !tbaa !2446
  %743 = xor i32 %734, %732
  %744 = xor i32 %743, %735
  %745 = lshr i32 %744, 4
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  store i8 %747, i8* %33, align 1, !tbaa !2447
  %748 = icmp eq i32 %735, 0
  %749 = zext i1 %748 to i8
  store i8 %749, i8* %36, align 1, !tbaa !2448
  %750 = lshr i32 %735, 31
  %751 = trunc i32 %750 to i8
  store i8 %751, i8* %39, align 1, !tbaa !2449
  %752 = lshr i32 %732, 31
  %753 = lshr i32 %734, 31
  %754 = xor i32 %753, %752
  %755 = xor i32 %750, %752
  %756 = add nuw nsw i32 %755, %754
  %757 = icmp eq i32 %756, 2
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %45, align 1, !tbaa !2450
  %759 = icmp ne i8 %751, 0
  %760 = xor i1 %759, %757
  %.v26 = select i1 %760, i64 16, i64 252
  %761 = add i64 %.v26, %727
  store i64 %761, i64* %PC, align 8, !tbaa !2428
  br i1 %760, label %block_400dda, label %block_400ec6

block_400d69:                                     ; preds = %block_400d63, %block_400d36
  %762 = phi i64 [ %.pre25, %block_400d63 ], [ %232, %block_400d36 ]
  %763 = phi i64 [ %.pre24, %block_400d63 ], [ %270, %block_400d36 ]
  %764 = add i64 %762, -28
  %765 = add i64 %763, 8
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %764 to i32*
  %767 = load i32, i32* %766, align 4
  %768 = add i32 %767, 1
  %769 = zext i32 %768 to i64
  store i64 %769, i64* %RAX, align 8, !tbaa !2428
  %770 = icmp eq i32 %767, -1
  %771 = icmp eq i32 %768, 0
  %772 = or i1 %770, %771
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %21, align 1, !tbaa !2432
  %774 = and i32 %768, 255
  %775 = tail call i32 @llvm.ctpop.i32(i32 %774) #10
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = xor i8 %777, 1
  store i8 %778, i8* %28, align 1, !tbaa !2446
  %779 = xor i32 %768, %767
  %780 = lshr i32 %779, 4
  %781 = trunc i32 %780 to i8
  %782 = and i8 %781, 1
  store i8 %782, i8* %33, align 1, !tbaa !2447
  %783 = zext i1 %771 to i8
  store i8 %783, i8* %36, align 1, !tbaa !2448
  %784 = lshr i32 %768, 31
  %785 = trunc i32 %784 to i8
  store i8 %785, i8* %39, align 1, !tbaa !2449
  %786 = lshr i32 %767, 31
  %787 = xor i32 %784, %786
  %788 = add nuw nsw i32 %787, %784
  %789 = icmp eq i32 %788, 2
  %790 = zext i1 %789 to i8
  store i8 %790, i8* %45, align 1, !tbaa !2450
  %791 = add i64 %763, 14
  store i64 %791, i64* %PC, align 8
  store i32 %768, i32* %766, align 4
  %792 = load i64, i64* %PC, align 8
  %793 = add i64 %792, -81
  store i64 %793, i64* %PC, align 8, !tbaa !2428
  br label %block_400d26

block_400d7c:                                     ; preds = %block_400d26
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %797 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  %AL = bitcast %union.anon* %3 to i8*
  %R9D = bitcast %union.anon* %794 to i32*
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 55), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 115), i64* %RDX, align 8, !tbaa !2428
  %798 = add i64 %913, -60
  %799 = add i64 %946, 23
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %798 to i32*
  %801 = load i32, i32* %800, align 4
  %802 = add i32 %801, -12
  %803 = zext i32 %802 to i64
  store i64 %803, i64* %RAX, align 8, !tbaa !2428
  %804 = icmp ult i32 %801, 12
  %805 = zext i1 %804 to i8
  store i8 %805, i8* %21, align 1, !tbaa !2432
  %806 = and i32 %802, 255
  %807 = tail call i32 @llvm.ctpop.i32(i32 %806) #10
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = xor i8 %809, 1
  store i8 %810, i8* %28, align 1, !tbaa !2446
  %811 = xor i32 %802, %801
  %812 = lshr i32 %811, 4
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  store i8 %814, i8* %33, align 1, !tbaa !2447
  %815 = icmp eq i32 %802, 0
  %816 = zext i1 %815 to i8
  store i8 %816, i8* %36, align 1, !tbaa !2448
  %817 = lshr i32 %802, 31
  %818 = trunc i32 %817 to i8
  store i8 %818, i8* %39, align 1, !tbaa !2449
  %819 = lshr i32 %801, 31
  %820 = xor i32 %817, %819
  %821 = add nuw nsw i32 %820, %819
  %822 = icmp eq i32 %821, 2
  %823 = zext i1 %822 to i8
  store i8 %823, i8* %45, align 1, !tbaa !2450
  store i64 %803, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %824 = add i64 %946, -1660
  %825 = add i64 %946, 35
  %826 = load i64, i64* %RSP, align 8, !tbaa !2428
  %827 = add i64 %826, -8
  %828 = inttoptr i64 %827 to i64*
  store i64 %825, i64* %828, align 8
  store i64 %827, i64* %RSP, align 8, !tbaa !2428
  store i64 %824, i64* %PC, align 8, !tbaa !2428
  %829 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.5)
  %830 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 117), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 115), i64* %RDX, align 8, !tbaa !2428
  %831 = load i64, i64* %RBP, align 8
  %832 = add i64 %831, -60
  %833 = add i64 %830, 23
  store i64 %833, i64* %PC, align 8
  %834 = inttoptr i64 %832 to i32*
  %835 = load i32, i32* %834, align 4
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RSI, align 8, !tbaa !2428
  %837 = add i64 %831, -68
  %838 = load i32, i32* %EAX, align 4
  %839 = add i64 %830, 26
  store i64 %839, i64* %PC, align 8
  %840 = inttoptr i64 %837 to i32*
  store i32 %838, i32* %840, align 4
  %841 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %842 = add i64 %841, -1721
  %843 = add i64 %841, 7
  %844 = load i64, i64* %RSP, align 8, !tbaa !2428
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %843, i64* %846, align 8
  store i64 %845, i64* %RSP, align 8, !tbaa !2428
  store i64 %842, i64* %PC, align 8, !tbaa !2428
  %847 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %829)
  %848 = load i64, i64* %RBP, align 8
  %849 = add i64 %848, -28
  %850 = load i64, i64* %PC, align 8
  %851 = add i64 %850, 7
  store i64 %851, i64* %PC, align 8
  %852 = inttoptr i64 %849 to i32*
  store i32 0, i32* %852, align 4
  %853 = load i64, i64* %RBP, align 8
  %854 = add i64 %853, -72
  %855 = load i32, i32* %EAX, align 4
  %856 = load i64, i64* %PC, align 8
  %857 = add i64 %856, 3
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %854 to i32*
  store i32 %855, i32* %858, align 4
  %859 = bitcast i64* %795 to double*
  %860 = bitcast i64* %796 to double*
  %861 = getelementptr inbounds %union.anon, %union.anon* %794, i64 0, i32 0
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_400dca

block_400f48:                                     ; preds = %block_400f41, %block_400f58
  %862 = phi i64 [ %.pre22, %block_400f41 ], [ %1114, %block_400f58 ]
  %MEMORY.4 = phi %struct.Memory* [ %686, %block_400f41 ], [ %1073, %block_400f58 ]
  %863 = load i64, i64* %RBP, align 8
  %864 = add i64 %863, -28
  %865 = add i64 %862, 3
  store i64 %865, i64* %PC, align 8
  %866 = inttoptr i64 %864 to i32*
  %867 = load i32, i32* %866, align 4
  %868 = zext i32 %867 to i64
  store i64 %868, i64* %RAX, align 8, !tbaa !2428
  %869 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %870 = sub i32 %867, %869
  %871 = icmp ult i32 %867, %869
  %872 = zext i1 %871 to i8
  store i8 %872, i8* %21, align 1, !tbaa !2432
  %873 = and i32 %870, 255
  %874 = tail call i32 @llvm.ctpop.i32(i32 %873) #10
  %875 = trunc i32 %874 to i8
  %876 = and i8 %875, 1
  %877 = xor i8 %876, 1
  store i8 %877, i8* %28, align 1, !tbaa !2446
  %878 = xor i32 %869, %867
  %879 = xor i32 %878, %870
  %880 = lshr i32 %879, 4
  %881 = trunc i32 %880 to i8
  %882 = and i8 %881, 1
  store i8 %882, i8* %33, align 1, !tbaa !2447
  %883 = icmp eq i32 %870, 0
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %36, align 1, !tbaa !2448
  %885 = lshr i32 %870, 31
  %886 = trunc i32 %885 to i8
  store i8 %886, i8* %39, align 1, !tbaa !2449
  %887 = lshr i32 %867, 31
  %888 = lshr i32 %869, 31
  %889 = xor i32 %888, %887
  %890 = xor i32 %885, %887
  %891 = add nuw nsw i32 %890, %889
  %892 = icmp eq i32 %891, 2
  %893 = zext i1 %892 to i8
  store i8 %893, i8* %45, align 1, !tbaa !2450
  %894 = icmp ne i8 %886, 0
  %895 = xor i1 %894, %892
  %.v29 = select i1 %895, i64 16, i64 80
  %896 = add i64 %.v29, %862
  store i64 %896, i64* %PC, align 8, !tbaa !2428
  br i1 %895, label %block_400f58, label %block_400f98

block_400f37:                                     ; preds = %block_400f0c
  %897 = load i64, i64* %RBP, align 8
  %898 = add i64 %897, -24
  %899 = add i64 %726, 4
  store i64 %899, i64* %PC, align 8
  %900 = inttoptr i64 %898 to i32*
  %901 = load i32, i32* %900, align 4
  store i8 0, i8* %21, align 1, !tbaa !2432
  %902 = and i32 %901, 255
  %903 = tail call i32 @llvm.ctpop.i32(i32 %902) #10
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = xor i8 %905, 1
  store i8 %906, i8* %28, align 1, !tbaa !2446
  store i8 0, i8* %33, align 1, !tbaa !2447
  %907 = icmp eq i32 %901, 0
  %908 = zext i1 %907 to i8
  store i8 %908, i8* %36, align 1, !tbaa !2448
  %909 = lshr i32 %901, 31
  %910 = trunc i32 %909 to i8
  store i8 %910, i8* %39, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2450
  %.v28 = select i1 %907, i64 157, i64 10
  %911 = add i64 %.v28, %726
  store i64 %911, i64* %PC, align 8, !tbaa !2428
  br i1 %907, label %block_400fd4, label %block_400f41

block_400d26:                                     ; preds = %block_400d69, %block_400cd0
  %912 = phi i64 [ %.pre, %block_400cd0 ], [ %793, %block_400d69 ]
  %MEMORY.5 = phi %struct.Memory* [ %2, %block_400cd0 ], [ %224, %block_400d69 ]
  %913 = load i64, i64* %RBP, align 8
  %914 = add i64 %913, -28
  %915 = add i64 %912, 3
  store i64 %915, i64* %PC, align 8
  %916 = inttoptr i64 %914 to i32*
  %917 = load i32, i32* %916, align 4
  %918 = zext i32 %917 to i64
  store i64 %918, i64* %RAX, align 8, !tbaa !2428
  %919 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %920 = sub i32 %917, %919
  %921 = icmp ult i32 %917, %919
  %922 = zext i1 %921 to i8
  store i8 %922, i8* %21, align 1, !tbaa !2432
  %923 = and i32 %920, 255
  %924 = tail call i32 @llvm.ctpop.i32(i32 %923) #10
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  store i8 %927, i8* %28, align 1, !tbaa !2446
  %928 = xor i32 %919, %917
  %929 = xor i32 %928, %920
  %930 = lshr i32 %929, 4
  %931 = trunc i32 %930 to i8
  %932 = and i8 %931, 1
  store i8 %932, i8* %33, align 1, !tbaa !2447
  %933 = icmp eq i32 %920, 0
  %934 = zext i1 %933 to i8
  store i8 %934, i8* %36, align 1, !tbaa !2448
  %935 = lshr i32 %920, 31
  %936 = trunc i32 %935 to i8
  store i8 %936, i8* %39, align 1, !tbaa !2449
  %937 = lshr i32 %917, 31
  %938 = lshr i32 %919, 31
  %939 = xor i32 %938, %937
  %940 = xor i32 %935, %937
  %941 = add nuw nsw i32 %940, %939
  %942 = icmp eq i32 %941, 2
  %943 = zext i1 %942 to i8
  store i8 %943, i8* %45, align 1, !tbaa !2450
  %944 = icmp ne i8 %936, 0
  %945 = xor i1 %944, %942
  %.v = select i1 %945, i64 16, i64 86
  %946 = add i64 %.v, %912
  store i64 %946, i64* %PC, align 8, !tbaa !2428
  br i1 %945, label %block_400d36, label %block_400d7c

block_400edd:                                     ; preds = %block_400ecd
  %947 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %947, i64* %RAX, align 8, !tbaa !2428
  %948 = add i64 %672, 12
  store i64 %948, i64* %PC, align 8
  %949 = load i32, i32* %642, align 4
  %950 = sext i32 %949 to i64
  %951 = shl nsw i64 %950, 4
  store i64 %951, i64* %RCX, align 8, !tbaa !2428
  %952 = add i64 %951, %947
  store i64 %952, i64* %RAX, align 8, !tbaa !2428
  %953 = icmp ult i64 %952, %947
  %954 = icmp ult i64 %952, %951
  %955 = or i1 %953, %954
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %21, align 1, !tbaa !2432
  %957 = trunc i64 %952 to i32
  %958 = and i32 %957, 255
  %959 = tail call i32 @llvm.ctpop.i32(i32 %958) #10
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  %962 = xor i8 %961, 1
  store i8 %962, i8* %28, align 1, !tbaa !2446
  %963 = xor i64 %951, %947
  %964 = xor i64 %963, %952
  %965 = lshr i64 %964, 4
  %966 = trunc i64 %965 to i8
  %967 = and i8 %966, 1
  store i8 %967, i8* %33, align 1, !tbaa !2447
  %968 = icmp eq i64 %952, 0
  %969 = zext i1 %968 to i8
  store i8 %969, i8* %36, align 1, !tbaa !2448
  %970 = lshr i64 %952, 63
  %971 = trunc i64 %970 to i8
  store i8 %971, i8* %39, align 1, !tbaa !2449
  %972 = lshr i64 %947, 63
  %973 = lshr i64 %950, 59
  %974 = and i64 %973, 1
  %975 = xor i64 %970, %972
  %976 = xor i64 %970, %974
  %977 = add nuw nsw i64 %975, %976
  %978 = icmp eq i64 %977, 2
  %979 = zext i1 %978 to i8
  store i8 %979, i8* %45, align 1, !tbaa !2450
  %980 = inttoptr i64 %952 to i64*
  %981 = add i64 %672, 23
  store i64 %981, i64* %PC, align 8
  %982 = load i64, i64* %980, align 8
  store i64 %982, i64* %104, align 1, !tbaa !2451
  store double 0.000000e+00, double* %859, align 1, !tbaa !2451
  %983 = add i64 %639, -48
  %984 = add i64 %672, 28
  store i64 %984, i64* %PC, align 8
  %.cast = bitcast i64 %982 to double
  %985 = inttoptr i64 %983 to double*
  %986 = load double, double* %985, align 8
  %987 = fadd double %.cast, %986
  store double %987, double* %1022, align 1, !tbaa !2451
  store i64 0, i64* %795, align 1, !tbaa !2451
  %988 = add i64 %672, 33
  store i64 %988, i64* %PC, align 8
  store double %987, double* %985, align 8
  %989 = load i64, i64* %RBP, align 8
  %990 = add i64 %989, -28
  %991 = load i64, i64* %PC, align 8
  %992 = add i64 %991, 3
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %990 to i32*
  %994 = load i32, i32* %993, align 4
  %995 = add i32 %994, 1
  %996 = zext i32 %995 to i64
  store i64 %996, i64* %RAX, align 8, !tbaa !2428
  %997 = icmp eq i32 %994, -1
  %998 = icmp eq i32 %995, 0
  %999 = or i1 %997, %998
  %1000 = zext i1 %999 to i8
  store i8 %1000, i8* %21, align 1, !tbaa !2432
  %1001 = and i32 %995, 255
  %1002 = tail call i32 @llvm.ctpop.i32(i32 %1001) #10
  %1003 = trunc i32 %1002 to i8
  %1004 = and i8 %1003, 1
  %1005 = xor i8 %1004, 1
  store i8 %1005, i8* %28, align 1, !tbaa !2446
  %1006 = xor i32 %995, %994
  %1007 = lshr i32 %1006, 4
  %1008 = trunc i32 %1007 to i8
  %1009 = and i8 %1008, 1
  store i8 %1009, i8* %33, align 1, !tbaa !2447
  %1010 = zext i1 %998 to i8
  store i8 %1010, i8* %36, align 1, !tbaa !2448
  %1011 = lshr i32 %995, 31
  %1012 = trunc i32 %1011 to i8
  store i8 %1012, i8* %39, align 1, !tbaa !2449
  %1013 = lshr i32 %994, 31
  %1014 = xor i32 %1011, %1013
  %1015 = add nuw nsw i32 %1014, %1011
  %1016 = icmp eq i32 %1015, 2
  %1017 = zext i1 %1016 to i8
  store i8 %1017, i8* %45, align 1, !tbaa !2450
  %1018 = add i64 %991, 9
  store i64 %1018, i64* %PC, align 8
  store i32 %995, i32* %993, align 4
  %1019 = load i64, i64* %PC, align 8
  %1020 = add i64 %1019, -58
  store i64 %1020, i64* %PC, align 8, !tbaa !2428
  br label %block_400ecd

block_400ec6:                                     ; preds = %block_400dca
  %1021 = add i64 %761, 7
  store i64 %1021, i64* %PC, align 8
  store i32 0, i32* %731, align 4
  %1022 = bitcast [32 x %union.VectorReg]* %8 to double*
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_400ecd

block_400d63:                                     ; preds = %block_400d36
  %1023 = add i64 %270, 3
  store i64 %1023, i64* %PC, align 8
  %1024 = load i32, i32* %236, align 4
  %1025 = zext i32 %1024 to i64
  store i64 %1025, i64* %RAX, align 8, !tbaa !2428
  %1026 = add i64 %270, 6
  store i64 %1026, i64* %PC, align 8
  store i32 %1024, i32* %241, align 4
  %.pre24 = load i64, i64* %PC, align 8
  %.pre25 = load i64, i64* %RBP, align 8
  br label %block_400d69

block_400f58:                                     ; preds = %block_400f48
  %1027 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %1027, i64* %RAX, align 8, !tbaa !2428
  %1028 = add i64 %896, 12
  store i64 %1028, i64* %PC, align 8
  %1029 = load i32, i32* %866, align 4
  %1030 = sext i32 %1029 to i64
  %1031 = shl nsw i64 %1030, 4
  store i64 %1031, i64* %RCX, align 8, !tbaa !2428
  %1032 = add i64 %1031, %1027
  store i64 %1032, i64* %RAX, align 8, !tbaa !2428
  %1033 = icmp ult i64 %1032, %1027
  %1034 = icmp ult i64 %1032, %1031
  %1035 = or i1 %1033, %1034
  %1036 = zext i1 %1035 to i8
  store i8 %1036, i8* %21, align 1, !tbaa !2432
  %1037 = trunc i64 %1032 to i32
  %1038 = and i32 %1037, 255
  %1039 = tail call i32 @llvm.ctpop.i32(i32 %1038) #10
  %1040 = trunc i32 %1039 to i8
  %1041 = and i8 %1040, 1
  %1042 = xor i8 %1041, 1
  store i8 %1042, i8* %28, align 1, !tbaa !2446
  %1043 = xor i64 %1031, %1027
  %1044 = xor i64 %1043, %1032
  %1045 = lshr i64 %1044, 4
  %1046 = trunc i64 %1045 to i8
  %1047 = and i8 %1046, 1
  store i8 %1047, i8* %33, align 1, !tbaa !2447
  %1048 = icmp eq i64 %1032, 0
  %1049 = zext i1 %1048 to i8
  store i8 %1049, i8* %36, align 1, !tbaa !2448
  %1050 = lshr i64 %1032, 63
  %1051 = trunc i64 %1050 to i8
  store i8 %1051, i8* %39, align 1, !tbaa !2449
  %1052 = lshr i64 %1027, 63
  %1053 = lshr i64 %1030, 59
  %1054 = and i64 %1053, 1
  %1055 = xor i64 %1050, %1052
  %1056 = xor i64 %1050, %1054
  %1057 = add nuw nsw i64 %1055, %1056
  %1058 = icmp eq i64 %1057, 2
  %1059 = zext i1 %1058 to i8
  store i8 %1059, i8* %45, align 1, !tbaa !2450
  %1060 = inttoptr i64 %1032 to i64*
  %1061 = add i64 %896, 23
  store i64 %1061, i64* %PC, align 8
  %1062 = load i64, i64* %1060, align 8
  store i64 %1062, i64* %104, align 1, !tbaa !2451
  store double 0.000000e+00, double* %859, align 1, !tbaa !2451
  store i64 %1027, i64* %RAX, align 8, !tbaa !2428
  %1063 = add i64 %896, 35
  store i64 %1063, i64* %PC, align 8
  %1064 = bitcast i64 %1062 to double
  %1065 = inttoptr i64 %1027 to double*
  %1066 = load double, double* %1065, align 8
  %1067 = fdiv double %1064, %1066
  store double %1067, double* %1022, align 1, !tbaa !2451
  store i64 0, i64* %795, align 1, !tbaa !2451
  %1068 = add i64 %896, -2120
  %1069 = add i64 %896, 40
  %1070 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1071 = add i64 %1070, -8
  %1072 = inttoptr i64 %1071 to i64*
  store i64 %1069, i64* %1072, align 8
  store i64 %1071, i64* %RSP, align 8, !tbaa !2428
  store i64 %1068, i64* %PC, align 8, !tbaa !2428
  %1073 = tail call fastcc %struct.Memory* @ext_6208b8_log(%struct.State* nonnull %0, %struct.Memory* %MEMORY.4)
  %1074 = load i64, i64* %RBP, align 8
  %1075 = add i64 %1074, -56
  %1076 = load i64, i64* %PC, align 8
  %1077 = add i64 %1076, 5
  store i64 %1077, i64* %PC, align 8
  %1078 = load double, double* %1022, align 1
  %1079 = inttoptr i64 %1075 to double*
  %1080 = load double, double* %1079, align 8
  %1081 = fadd double %1078, %1080
  store double %1081, double* %1022, align 1, !tbaa !2451
  %1082 = add i64 %1076, 10
  store i64 %1082, i64* %PC, align 8
  store double %1081, double* %1079, align 8
  %1083 = load i64, i64* %RBP, align 8
  %1084 = add i64 %1083, -28
  %1085 = load i64, i64* %PC, align 8
  %1086 = add i64 %1085, 3
  store i64 %1086, i64* %PC, align 8
  %1087 = inttoptr i64 %1084 to i32*
  %1088 = load i32, i32* %1087, align 4
  %1089 = add i32 %1088, 1
  %1090 = zext i32 %1089 to i64
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = icmp eq i32 %1088, -1
  %1092 = icmp eq i32 %1089, 0
  %1093 = or i1 %1091, %1092
  %1094 = zext i1 %1093 to i8
  store i8 %1094, i8* %21, align 1, !tbaa !2432
  %1095 = and i32 %1089, 255
  %1096 = tail call i32 @llvm.ctpop.i32(i32 %1095) #10
  %1097 = trunc i32 %1096 to i8
  %1098 = and i8 %1097, 1
  %1099 = xor i8 %1098, 1
  store i8 %1099, i8* %28, align 1, !tbaa !2446
  %1100 = xor i32 %1089, %1088
  %1101 = lshr i32 %1100, 4
  %1102 = trunc i32 %1101 to i8
  %1103 = and i8 %1102, 1
  store i8 %1103, i8* %33, align 1, !tbaa !2447
  %1104 = zext i1 %1092 to i8
  store i8 %1104, i8* %36, align 1, !tbaa !2448
  %1105 = lshr i32 %1089, 31
  %1106 = trunc i32 %1105 to i8
  store i8 %1106, i8* %39, align 1, !tbaa !2449
  %1107 = lshr i32 %1088, 31
  %1108 = xor i32 %1105, %1107
  %1109 = add nuw nsw i32 %1108, %1105
  %1110 = icmp eq i32 %1109, 2
  %1111 = zext i1 %1110 to i8
  store i8 %1111, i8* %45, align 1, !tbaa !2450
  %1112 = add i64 %1085, 9
  store i64 %1112, i64* %PC, align 8
  store i32 %1089, i32* %1087, align 4
  %1113 = load i64, i64* %PC, align 8
  %1114 = add i64 %1113, -75
  store i64 %1114, i64* %PC, align 8, !tbaa !2428
  br label %block_400f48

block_400f41:                                     ; preds = %block_400f37
  %1115 = add i64 %897, -28
  %1116 = add i64 %911, 7
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1115 to i32*
  store i32 1, i32* %1117, align 4
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_400f48
}

; Function Attrs: noinline
define %struct.Memory* @sub_403a00__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_403a00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %5, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %8, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, 776
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_403d20__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -32
  %61 = load i64, i64* %RAX, align 8
  %62 = add i64 %58, 11
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %63, align 8
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = ashr i64 %69, 63
  store i64 %70, i64* %RDX, align 8, !tbaa !2428
  %71 = load i64, i64* %RCX, align 8
  %72 = add i64 %66, 9
  store i64 %72, i64* %PC, align 8
  %73 = sext i64 %71 to i128
  %74 = and i128 %73, -18446744073709551616
  %75 = zext i64 %70 to i128
  %76 = shl nuw i128 %75, 64
  %77 = zext i64 %69 to i128
  %78 = or i128 %76, %77
  %79 = zext i64 %71 to i128
  %80 = or i128 %74, %79
  %81 = sdiv i128 %78, %80
  %82 = trunc i128 %81 to i64
  %83 = and i128 %81, 18446744073709551615
  %84 = sext i64 %82 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = or i128 %85, %83
  %87 = icmp eq i128 %81, %86
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %block_403a00
  %89 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %72, %struct.Memory* %57) #13
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:90:                                     ; preds = %block_403a00
  %91 = srem i128 %78, %80
  %92 = trunc i128 %91 to i64
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  store i64 %92, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %90, %88
  %93 = phi i64 [ %.pre7, %88 ], [ %64, %90 ]
  %94 = phi i64 [ %.pre6, %88 ], [ %72, %90 ]
  %95 = phi i64 [ %.pre, %88 ], [ %82, %90 ]
  %96 = phi %struct.Memory* [ %89, %88 ], [ %57, %90 ]
  %97 = add i64 %95, -1
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = icmp eq i64 %95, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %12, align 1, !tbaa !2432
  %100 = trunc i64 %97 to i32
  %101 = and i32 %100, 255
  %102 = tail call i32 @llvm.ctpop.i32(i32 %101) #10
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  store i8 %105, i8* %19, align 1, !tbaa !2446
  %106 = xor i64 %97, %95
  %107 = lshr i64 %106, 4
  %108 = trunc i64 %107 to i8
  %109 = and i8 %108, 1
  store i8 %109, i8* %25, align 1, !tbaa !2447
  %110 = icmp eq i64 %97, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %28, align 1, !tbaa !2448
  %112 = lshr i64 %97, 63
  %113 = trunc i64 %112 to i8
  store i8 %113, i8* %31, align 1, !tbaa !2449
  %114 = lshr i64 %95, 63
  %115 = xor i64 %112, %114
  %116 = add nuw nsw i64 %115, %114
  %117 = icmp eq i64 %116, 2
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %37, align 1, !tbaa !2450
  %119 = add i64 %93, -24
  %120 = add i64 %94, 8
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %97, i64* %121, align 8
  %122 = bitcast i64* %RAX to i64**
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %125 = bitcast i64* %124 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_403a3f

block_403b42:                                     ; preds = %block_403aae
  %126 = load i64, i64* %RSP, align 8
  %127 = add i64 %126, 112
  store i64 %127, i64* %RSP, align 8, !tbaa !2428
  %128 = icmp ugt i64 %126, -113
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %12, align 1, !tbaa !2432
  %130 = trunc i64 %127 to i32
  %131 = and i32 %130, 255
  %132 = tail call i32 @llvm.ctpop.i32(i32 %131) #10
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* %19, align 1, !tbaa !2446
  %136 = xor i64 %126, 16
  %137 = xor i64 %136, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %25, align 1, !tbaa !2447
  %141 = icmp eq i64 %127, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %28, align 1, !tbaa !2448
  %143 = lshr i64 %127, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %31, align 1, !tbaa !2449
  %145 = lshr i64 %126, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %37, align 1, !tbaa !2450
  %150 = add i64 %339, 5
  store i64 %150, i64* %PC, align 8
  %151 = add i64 %126, 120
  %152 = inttoptr i64 %127 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RBP, align 8, !tbaa !2428
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %339, 6
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %157 = add i64 %126, 128
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %96

block_403ab9:                                     ; preds = %block_403aae
  %158 = add i64 %310, -8
  store i64 %158, i64* %RDI, align 8, !tbaa !2428
  %159 = add i64 %339, 8
  store i64 %159, i64* %PC, align 8
  %160 = load i64, i64* %313, align 8
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = add i64 %339, 663
  %162 = add i64 %339, 13
  %163 = load i64, i64* %RSP, align 8, !tbaa !2428
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165, align 8
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %166 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %161, %struct.Memory* %96)
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -80
  %169 = load i64, i64* %PC, align 8
  store i64 %168, i64* %RDI, align 8, !tbaa !2428
  %170 = load i64, i64* %RAX, align 8
  %171 = add i64 %169, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %168 to i64*
  store i64 %170, i64* %172, align 8
  %173 = load i64, i64* %PC, align 8
  %174 = add i64 %173, 530
  %175 = add i64 %173, 5
  %176 = load i64, i64* %RSP, align 8, !tbaa !2428
  %177 = add i64 %176, -8
  %178 = inttoptr i64 %177 to i64*
  store i64 %175, i64* %178, align 8
  store i64 %177, i64* %RSP, align 8, !tbaa !2428
  store i64 %174, i64* %PC, align 8, !tbaa !2428
  %179 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %174, %struct.Memory* %96)
  %180 = load i64, i64* %RBP, align 8
  %181 = add i64 %180, -8
  %182 = load i64, i64* %PC, align 8
  store i64 %181, i64* %RDI, align 8, !tbaa !2428
  %183 = load i64*, i64** %122, align 8
  %184 = add i64 %182, 7
  store i64 %184, i64* %PC, align 8
  %185 = load i64, i64* %183, align 8
  store i64 %185, i64* %RAX, align 8, !tbaa !2428
  %186 = add i64 %180, -72
  %187 = add i64 %182, 11
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %186 to i64*
  store i64 %185, i64* %188, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 514
  %191 = add i64 %189, 5
  %192 = load i64, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %191, i64* %194, align 8
  store i64 %193, i64* %RSP, align 8, !tbaa !2428
  store i64 %190, i64* %PC, align 8, !tbaa !2428
  %195 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %190, %struct.Memory* %96)
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -8
  %198 = load i64, i64* %PC, align 8
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %199 = add i64 %196, -24
  %200 = add i64 %198, 8
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %RSI, align 8, !tbaa !2428
  %203 = add i64 %196, -112
  %204 = load i64, i64* %RAX, align 8
  %205 = add i64 %198, 12
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %203 to i64*
  store i64 %204, i64* %206, align 8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 609
  %209 = add i64 %207, 5
  %210 = load i64, i64* %RSP, align 8, !tbaa !2428
  %211 = add i64 %210, -8
  %212 = inttoptr i64 %211 to i64*
  store i64 %209, i64* %212, align 8
  store i64 %211, i64* %RSP, align 8, !tbaa !2428
  store i64 %208, i64* %PC, align 8, !tbaa !2428
  %213 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %208, %struct.Memory* %96)
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -88
  %216 = load i64, i64* %PC, align 8
  store i64 %215, i64* %RDI, align 8, !tbaa !2428
  %217 = load i64, i64* %RAX, align 8
  %218 = add i64 %216, 8
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %215 to i64*
  store i64 %217, i64* %219, align 8
  %220 = load i64, i64* %PC, align 8
  %221 = add i64 %220, 484
  %222 = add i64 %220, 5
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %96)
  %227 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %19, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -112
  %230 = add i64 %227, 8
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RSI, align 8, !tbaa !2428
  %233 = add i64 %227, 11
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %232 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %RDI, align 8, !tbaa !2428
  %236 = load i64*, i64** %122, align 8
  %237 = add i64 %227, 14
  store i64 %237, i64* %PC, align 8
  store i64 %235, i64* %236, align 8
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -24
  %240 = load i64, i64* %PC, align 8
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %239 to i64*
  %243 = load i64, i64* %242, align 8
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %244 = add i64 %238, -8
  %245 = add i64 %240, 8
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i64*
  %247 = load i64, i64* %246, align 8
  store i64 %247, i64* %RAX, align 8, !tbaa !2428
  %248 = add i64 %238, -96
  %249 = add i64 %240, 12
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i64*
  store i64 %247, i64* %250, align 8
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -72
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i64*
  %256 = load i64, i64* %255, align 8
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = add i64 %251, -104
  %258 = add i64 %253, 8
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  store i64 %256, i64* %259, align 8
  %260 = load i64, i64* %RBP, align 8
  %261 = add i64 %260, -96
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264, align 8
  store i64 %265, i64* %RSI, align 8, !tbaa !2428
  %266 = add i64 %260, -104
  %267 = add i64 %262, 9
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268, align 8
  store i64 %269, i64* %123, align 1, !tbaa !2451
  store double 0.000000e+00, double* %125, align 1, !tbaa !2451
  %270 = add i64 %262, 605
  %271 = add i64 %262, 14
  %272 = load i64, i64* %RSP, align 8, !tbaa !2428
  %273 = add i64 %272, -8
  %274 = inttoptr i64 %273 to i64*
  store i64 %271, i64* %274, align 8
  store i64 %273, i64* %RSP, align 8, !tbaa !2428
  store i64 %270, i64* %PC, align 8, !tbaa !2428
  %275 = tail call %struct.Memory* @sub_403d80__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %270, %struct.Memory* %96)
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -24
  %278 = load i64, i64* %PC, align 8
  %279 = add i64 %278, 4
  store i64 %279, i64* %PC, align 8
  %280 = inttoptr i64 %277 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = add i64 %281, -1
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = icmp ne i64 %281, 0
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %12, align 1, !tbaa !2432
  %285 = trunc i64 %282 to i32
  %286 = and i32 %285, 255
  %287 = tail call i32 @llvm.ctpop.i32(i32 %286) #10
  %288 = trunc i32 %287 to i8
  %289 = and i8 %288, 1
  %290 = xor i8 %289, 1
  store i8 %290, i8* %19, align 1, !tbaa !2446
  %291 = xor i64 %281, 16
  %292 = xor i64 %291, %282
  %293 = lshr i64 %292, 4
  %294 = trunc i64 %293 to i8
  %295 = and i8 %294, 1
  store i8 %295, i8* %25, align 1, !tbaa !2447
  %296 = icmp eq i64 %282, 0
  %297 = zext i1 %296 to i8
  store i8 %297, i8* %28, align 1, !tbaa !2448
  %298 = lshr i64 %282, 63
  %299 = trunc i64 %298 to i8
  store i8 %299, i8* %31, align 1, !tbaa !2449
  %300 = lshr i64 %281, 63
  %301 = xor i64 %298, %300
  %302 = xor i64 %298, 1
  %303 = add nuw nsw i64 %301, %302
  %304 = icmp eq i64 %303, 2
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %37, align 1, !tbaa !2450
  %306 = add i64 %278, 12
  store i64 %306, i64* %PC, align 8
  store i64 %282, i64* %280, align 8
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, -143
  store i64 %308, i64* %PC, align 8, !tbaa !2428
  br label %block_403aae

block_403aae:                                     ; preds = %block_403aa2, %block_403ab9
  %309 = phi i64 [ %.pre9, %block_403aa2 ], [ %308, %block_403ab9 ]
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -24
  %312 = add i64 %309, 5
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = add i64 %314, -1
  %316 = icmp eq i64 %314, 0
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %12, align 1, !tbaa !2432
  %318 = trunc i64 %315 to i32
  %319 = and i32 %318, 255
  %320 = tail call i32 @llvm.ctpop.i32(i32 %319) #10
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  store i8 %323, i8* %19, align 1, !tbaa !2446
  %324 = xor i64 %315, %314
  %325 = lshr i64 %324, 4
  %326 = trunc i64 %325 to i8
  %327 = and i8 %326, 1
  store i8 %327, i8* %25, align 1, !tbaa !2447
  %328 = icmp eq i64 %315, 0
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %28, align 1, !tbaa !2448
  %330 = lshr i64 %315, 63
  %331 = trunc i64 %330 to i8
  store i8 %331, i8* %31, align 1, !tbaa !2449
  %332 = lshr i64 %314, 63
  %333 = xor i64 %330, %332
  %334 = add nuw nsw i64 %333, %332
  %335 = icmp eq i64 %334, 2
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %37, align 1, !tbaa !2450
  %337 = icmp ne i8 %331, 0
  %338 = xor i1 %337, %335
  %.v10 = select i1 %338, i64 148, i64 11
  %339 = add i64 %.v10, %309
  store i64 %339, i64* %PC, align 8, !tbaa !2428
  br i1 %338, label %block_403b42, label %block_403ab9

block_403a3f:                                     ; preds = %block_403a4a, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %340 = phi i64 [ %462, %block_403a4a ], [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %341 = load i64, i64* %RBP, align 8
  %342 = add i64 %341, -24
  %343 = add i64 %340, 5
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  %345 = load i64, i64* %344, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %346 = trunc i64 %345 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #10
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %352 = icmp eq i64 %345, 0
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %28, align 1, !tbaa !2448
  %354 = lshr i64 %345, 63
  %355 = trunc i64 %354 to i8
  store i8 %355, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %356 = icmp ne i8 %355, 0
  %.v = select i1 %356, i64 94, i64 6
  %357 = add i64 %.v, %343
  store i64 %357, i64* %PC, align 8, !tbaa !2428
  br i1 %356, label %block_403aa2, label %block_403a4a

block_403a4a:                                     ; preds = %block_403a3f
  %358 = add i64 %341, -8
  store i64 %358, i64* %RDI, align 8, !tbaa !2428
  %359 = add i64 %357, 8
  store i64 %359, i64* %PC, align 8
  %360 = load i64, i64* %344, align 8
  store i64 %360, i64* %RSI, align 8, !tbaa !2428
  %361 = add i64 %357, 774
  %362 = add i64 %357, 13
  %363 = load i64, i64* %RSP, align 8, !tbaa !2428
  %364 = add i64 %363, -8
  %365 = inttoptr i64 %364 to i64*
  store i64 %362, i64* %365, align 8
  store i64 %364, i64* %RSP, align 8, !tbaa !2428
  store i64 %361, i64* %PC, align 8, !tbaa !2428
  %366 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %361, %struct.Memory* %96)
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -48
  %369 = load i64, i64* %PC, align 8
  store i64 %368, i64* %RDI, align 8, !tbaa !2428
  %370 = load i64, i64* %RAX, align 8
  %371 = add i64 %369, 8
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %368 to i64*
  store i64 %370, i64* %372, align 8
  %373 = load i64, i64* %PC, align 8
  %374 = add i64 %373, 641
  %375 = add i64 %373, 5
  %376 = load i64, i64* %RSP, align 8, !tbaa !2428
  %377 = add i64 %376, -8
  %378 = inttoptr i64 %377 to i64*
  store i64 %375, i64* %378, align 8
  store i64 %377, i64* %RSP, align 8, !tbaa !2428
  store i64 %374, i64* %PC, align 8, !tbaa !2428
  %379 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %374, %struct.Memory* %96)
  %380 = load i64*, i64** %122, align 8
  %381 = load i64, i64* %PC, align 8
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC, align 8
  %383 = load i64, i64* %380, align 8
  store i64 %383, i64* %RAX, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP, align 8
  %385 = add i64 %384, -40
  %386 = add i64 %381, 7
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %385 to i64*
  store i64 %383, i64* %387, align 8
  %388 = load i64, i64* %RBP, align 8
  %389 = add i64 %388, -32
  %390 = load i64, i64* %PC, align 8
  %391 = add i64 %390, 4
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %389 to i64*
  %393 = load i64, i64* %392, align 8
  store i64 %393, i64* %RDI, align 8, !tbaa !2428
  %394 = add i64 %388, -8
  %395 = add i64 %390, 8
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %394 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = add i64 %388, -56
  %399 = add i64 %390, 12
  store i64 %399, i64* %PC, align 8
  %400 = inttoptr i64 %398 to i64*
  store i64 %397, i64* %400, align 8
  %401 = load i64, i64* %RBP, align 8
  %402 = add i64 %401, -24
  %403 = load i64, i64* %PC, align 8
  %404 = add i64 %403, 4
  store i64 %404, i64* %PC, align 8
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405, align 8
  store i64 %406, i64* %RDX, align 8, !tbaa !2428
  %407 = add i64 %401, -40
  %408 = add i64 %403, 8
  store i64 %408, i64* %PC, align 8
  %409 = inttoptr i64 %407 to i64*
  %410 = load i64, i64* %409, align 8
  store i64 %410, i64* %RAX, align 8, !tbaa !2428
  %411 = add i64 %401, -64
  %412 = add i64 %403, 12
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i64*
  store i64 %410, i64* %413, align 8
  %414 = load i64, i64* %RBP, align 8
  %415 = add i64 %414, -56
  %416 = load i64, i64* %PC, align 8
  %417 = add i64 %416, 4
  store i64 %417, i64* %PC, align 8
  %418 = inttoptr i64 %415 to i64*
  %419 = load i64, i64* %418, align 8
  store i64 %419, i64* %RSI, align 8, !tbaa !2428
  %420 = add i64 %414, -64
  %421 = add i64 %416, 9
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %420 to i64*
  %423 = load i64, i64* %422, align 8
  store i64 %423, i64* %123, align 1, !tbaa !2451
  store double 0.000000e+00, double* %125, align 1, !tbaa !2451
  %424 = add i64 %416, 765
  %425 = add i64 %416, 14
  %426 = load i64, i64* %RSP, align 8, !tbaa !2428
  %427 = add i64 %426, -8
  %428 = inttoptr i64 %427 to i64*
  store i64 %425, i64* %428, align 8
  store i64 %427, i64* %RSP, align 8, !tbaa !2428
  store i64 %424, i64* %PC, align 8, !tbaa !2428
  %429 = tail call %struct.Memory* @sub_403d80__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %424, %struct.Memory* %96)
  %430 = load i64, i64* %RBP, align 8
  %431 = add i64 %430, -24
  %432 = load i64, i64* %PC, align 8
  %433 = add i64 %432, 4
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %431 to i64*
  %435 = load i64, i64* %434, align 8
  %436 = add i64 %435, -1
  store i64 %436, i64* %RAX, align 8, !tbaa !2428
  %437 = icmp ne i64 %435, 0
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %12, align 1, !tbaa !2432
  %439 = trunc i64 %436 to i32
  %440 = and i32 %439, 255
  %441 = tail call i32 @llvm.ctpop.i32(i32 %440) #10
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  %444 = xor i8 %443, 1
  store i8 %444, i8* %19, align 1, !tbaa !2446
  %445 = xor i64 %435, 16
  %446 = xor i64 %445, %436
  %447 = lshr i64 %446, 4
  %448 = trunc i64 %447 to i8
  %449 = and i8 %448, 1
  store i8 %449, i8* %25, align 1, !tbaa !2447
  %450 = icmp eq i64 %436, 0
  %451 = zext i1 %450 to i8
  store i8 %451, i8* %28, align 1, !tbaa !2448
  %452 = lshr i64 %436, 63
  %453 = trunc i64 %452 to i8
  store i8 %453, i8* %31, align 1, !tbaa !2449
  %454 = lshr i64 %435, 63
  %455 = xor i64 %452, %454
  %456 = xor i64 %452, 1
  %457 = add nuw nsw i64 %455, %456
  %458 = icmp eq i64 %457, 2
  %459 = zext i1 %458 to i8
  store i8 %459, i8* %37, align 1, !tbaa !2450
  %460 = add i64 %432, 12
  store i64 %460, i64* %PC, align 8
  store i64 %436, i64* %434, align 8
  %461 = load i64, i64* %PC, align 8
  %462 = add i64 %461, -94
  store i64 %462, i64* %PC, align 8, !tbaa !2428
  br label %block_403a3f

block_403aa2:                                     ; preds = %block_403a3f
  %463 = add i64 %341, -32
  %464 = add i64 %357, 4
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %463 to i64*
  %466 = load i64, i64* %465, align 8
  %467 = add i64 %466, -1
  store i64 %467, i64* %RAX, align 8, !tbaa !2428
  %468 = icmp eq i64 %466, 0
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %12, align 1, !tbaa !2432
  %470 = trunc i64 %467 to i32
  %471 = and i32 %470, 255
  %472 = tail call i32 @llvm.ctpop.i32(i32 %471) #10
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = xor i8 %474, 1
  store i8 %475, i8* %19, align 1, !tbaa !2446
  %476 = xor i64 %467, %466
  %477 = lshr i64 %476, 4
  %478 = trunc i64 %477 to i8
  %479 = and i8 %478, 1
  store i8 %479, i8* %25, align 1, !tbaa !2447
  %480 = icmp eq i64 %467, 0
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %28, align 1, !tbaa !2448
  %482 = lshr i64 %467, 63
  %483 = trunc i64 %482 to i8
  store i8 %483, i8* %31, align 1, !tbaa !2449
  %484 = lshr i64 %466, 63
  %485 = xor i64 %482, %484
  %486 = add nuw nsw i64 %485, %484
  %487 = icmp eq i64 %486, 2
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %37, align 1, !tbaa !2450
  %489 = add i64 %357, 12
  store i64 %489, i64* %PC, align 8
  store i64 %467, i64* %344, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_403aae
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4032b0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4032b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2453
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #10
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %39, align 1, !tbaa !2453
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2453
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2453
  store i8 0, i8* %42, align 1, !tbaa !2453
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402220__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402220:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_402234

block_402242:                                     ; preds = %block_402234
  %54 = add i64 %159, -32
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %193, 8
  store i64 %55, i64* %PC, align 8
  %56 = load i64, i64* %162, align 8
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %56, 8
  store i64 %57, i64* %RCX, align 8, !tbaa !2428
  %58 = icmp ugt i64 %56, -9
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %12, align 1, !tbaa !2432
  %60 = trunc i64 %57 to i32
  %61 = and i32 %60, 255
  %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #10
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  store i8 %65, i8* %19, align 1, !tbaa !2446
  %66 = xor i64 %57, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %24, align 1, !tbaa !2447
  %70 = icmp eq i64 %57, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %27, align 1, !tbaa !2448
  %72 = lshr i64 %57, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %30, align 1, !tbaa !2449
  %74 = lshr i64 %56, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %36, align 1, !tbaa !2450
  %79 = add i64 %193, 19
  store i64 %79, i64* %PC, align 8
  store i64 %57, i64* %162, align 8
  %80 = load i64, i64* %RAX, align 8
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RSI, align 8, !tbaa !2428
  %82 = add i64 %81, -1221
  %83 = add i64 %81, 8
  %84 = load i64, i64* %RSP, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86, align 8
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  store i64 %82, i64* %PC, align 8, !tbaa !2428
  %87 = tail call %struct.Memory* @sub_401d90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %82, %struct.Memory* %2)
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -24
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = add i64 %93, 8
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = icmp ugt i64 %93, -9
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %12, align 1, !tbaa !2432
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #10
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %19, align 1, !tbaa !2446
  %103 = xor i64 %94, %93
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %24, align 1, !tbaa !2447
  %107 = icmp eq i64 %94, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %27, align 1, !tbaa !2448
  %109 = lshr i64 %94, 63
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %30, align 1, !tbaa !2449
  %111 = lshr i64 %93, 63
  %112 = xor i64 %109, %111
  %113 = add nuw nsw i64 %112, %109
  %114 = icmp eq i64 %113, 2
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %36, align 1, !tbaa !2450
  %116 = add i64 %90, 15
  store i64 %116, i64* %PC, align 8
  store i64 %94, i64* %92, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -32
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i64*, i64** %53, align 8
  %124 = add i64 %119, 7
  store i64 %124, i64* %PC, align 8
  store i64 %122, i64* %123, align 8
  %125 = load i64, i64* %PC, align 8
  %126 = add i64 %125, -63
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_402234

block_402278:                                     ; preds = %block_402234
  %127 = load i64, i64* %RSP, align 8
  %128 = add i64 %127, 32
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %129 = icmp ugt i64 %127, -33
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %12, align 1, !tbaa !2432
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #10
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %19, align 1, !tbaa !2446
  %137 = xor i64 %128, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %24, align 1, !tbaa !2447
  %141 = icmp eq i64 %128, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !2448
  %143 = lshr i64 %128, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %30, align 1, !tbaa !2449
  %145 = lshr i64 %127, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %36, align 1, !tbaa !2450
  %150 = add i64 %193, 5
  store i64 %150, i64* %PC, align 8
  %151 = add i64 %127, 40
  %152 = inttoptr i64 %128 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RBP, align 8, !tbaa !2428
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %193, 6
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %157 = add i64 %127, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402234:                                     ; preds = %block_402242, %block_402220
  %158 = phi i64 [ %126, %block_402242 ], [ %.pre, %block_402220 ]
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -8
  %161 = add i64 %158, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %159, -16
  %165 = add i64 %158, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %163, %167
  %169 = icmp ult i64 %163, %167
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %12, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #10
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %19, align 1, !tbaa !2446
  %177 = xor i64 %167, %163
  %178 = xor i64 %177, %168
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %24, align 1, !tbaa !2447
  %182 = icmp eq i64 %168, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %27, align 1, !tbaa !2448
  %184 = lshr i64 %168, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %30, align 1, !tbaa !2449
  %186 = lshr i64 %163, 63
  %187 = lshr i64 %167, 63
  %188 = xor i64 %187, %186
  %189 = xor i64 %184, %186
  %190 = add nuw nsw i64 %189, %188
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %36, align 1, !tbaa !2450
  %.v = select i1 %182, i64 68, i64 14
  %193 = add i64 %.v, %158
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  br i1 %182, label %block_402278, label %block_402242
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e60__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405e60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e80__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4043f0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4043f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %58 = bitcast i64* %57 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404404

block_40441e:                                     ; preds = %block_404404
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -8
  store i64 %60, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %61 = add i64 %170, 690
  %62 = add i64 %170, 11
  %63 = load i64, i64* %RSP, align 8, !tbaa !2428
  %64 = add i64 %63, -8
  %65 = inttoptr i64 %64 to i64*
  store i64 %62, i64* %65, align 8
  store i64 %64, i64* %RSP, align 8, !tbaa !2428
  store i64 %61, i64* %PC, align 8, !tbaa !2428
  %66 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2)
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -32
  %69 = load i64, i64* %PC, align 8
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %70 = load i64, i64* %RAX, align 8
  %71 = add i64 %69, 8
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %70, i64* %72, align 8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 783
  %75 = add i64 %73, 5
  %76 = load i64, i64* %RSP, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78, align 8
  store i64 %77, i64* %RSP, align 8, !tbaa !2428
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  %79 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %74, %struct.Memory* %2)
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -24
  %82 = load i64, i64* %PC, align 8
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %83 = load i64*, i64** %55, align 8
  %84 = add i64 %82, 10
  store i64 %84, i64* %PC, align 8
  %85 = load i64, i64* %83, align 8
  store i64 %85, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %86 = add i64 %80, -48
  %87 = add i64 %82, 15
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i64*
  store i64 %85, i64* %88, align 8
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 651
  %91 = add i64 %89, 5
  %92 = load i64, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94, align 8
  store i64 %93, i64* %RSP, align 8, !tbaa !2428
  store i64 %90, i64* %PC, align 8, !tbaa !2428
  %95 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %90, %struct.Memory* %2)
  %96 = load i64, i64* %RBP, align 8
  %97 = add i64 %96, -40
  %98 = load i64, i64* %PC, align 8
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX, align 8
  %100 = add i64 %98, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %97 to i64*
  store i64 %99, i64* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, 750
  %104 = add i64 %102, 5
  %105 = load i64, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %105, -8
  %107 = inttoptr i64 %106 to i64*
  store i64 %104, i64* %107, align 8
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  %108 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %103, %struct.Memory* %2)
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -48
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %110 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %58, align 1, !tbaa !2451
  %115 = load i64*, i64** %55, align 8
  %116 = add i64 %111, 9
  store i64 %116, i64* %PC, align 8
  store i64 %114, i64* %115, align 8
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, -92
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  br label %block_404404

block_404419:                                     ; preds = %block_404404
  %119 = load i64, i64* %RSP, align 8
  %120 = add i64 %119, 48
  store i64 %120, i64* %RSP, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -49
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %13, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #10
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %20, align 1, !tbaa !2446
  %129 = xor i64 %119, 16
  %130 = xor i64 %129, %120
  %131 = lshr i64 %130, 4
  %132 = trunc i64 %131 to i8
  %133 = and i8 %132, 1
  store i8 %133, i8* %26, align 1, !tbaa !2447
  %134 = icmp eq i64 %120, 0
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %29, align 1, !tbaa !2448
  %136 = lshr i64 %120, 63
  %137 = trunc i64 %136 to i8
  store i8 %137, i8* %32, align 1, !tbaa !2449
  %138 = lshr i64 %119, 63
  %139 = xor i64 %136, %138
  %140 = add nuw nsw i64 %139, %136
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %38, align 1, !tbaa !2450
  %143 = add i64 %170, 81
  store i64 %143, i64* %PC, align 8
  %144 = add i64 %119, 56
  %145 = inttoptr i64 %120 to i64*
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %RBP, align 8, !tbaa !2428
  store i64 %144, i64* %RSP, align 8, !tbaa !2428
  %147 = add i64 %170, 82
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %144 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %150 = add i64 %119, 64
  store i64 %150, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_404404:                                     ; preds = %block_40441e, %block_4043f0
  %151 = phi i64 [ %118, %block_40441e ], [ %.pre, %block_4043f0 ]
  %152 = load i64, i64* %RBP, align 8
  %153 = add i64 %152, -8
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %154 = add i64 %152, -16
  store i64 %154, i64* %RSI, align 8, !tbaa !2428
  %155 = add i64 %151, 780
  %156 = add i64 %151, 13
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_404710__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %2)
  %161 = load i8, i8* %AL, align 1
  %162 = load i64, i64* %PC, align 8
  %163 = and i8 %161, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %164 = zext i8 %163 to i32
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #10
  %166 = trunc i32 %165 to i8
  %167 = xor i8 %166, 1
  store i8 %167, i8* %20, align 1, !tbaa !2446
  %168 = xor i8 %163, 1
  store i8 %168, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %169 = icmp eq i8 %168, 0
  %.v = select i1 %169, i64 13, i64 8
  %170 = add i64 %.v, %162
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_40441e, label %block_404419
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404760__ZppIdER14PointerWrapperIT_ES3_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #10
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %23, %22
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2448
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2450
  store i64 %23, i64* %21, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = add i64 %16, 18
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %16, 19
  store i64 %56, i64* %PC, align 8
  %57 = load i64, i64* %5, align 8, !tbaa !2428
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  store i64 %58, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %16, 20
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %64 = add i64 %57, 16
  store i64 %64, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406580__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406580:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4065b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400b20_deregister_tm_clones(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400b48:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %PC, align 8
  store i64 6328568, i64* %RAX, align 8, !tbaa !2428
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !2432
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2447
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %12, align 1, !tbaa !2448
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !2449
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !2450
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %8, 40
  store i64 %15, i64* %PC, align 8
  %16 = load i64, i64* %7, align 8
  store i64 %16, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %17 = add i64 %8, 41
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %5 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %PC, align 8, !tbaa !2428
  %20 = add i64 %5, 8
  store i64 %20, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400840___cxx_global_var_init_11(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400840:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 ptrtoint (%V10Data_type* @V10Data to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%V10Data_type* @V10Data to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000) to i32), i32 255)) #10
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  br label %block_40085b

block_40085b:                                     ; preds = %block_40085b, %block_400840
  %47 = phi i64 [ %98, %block_40085b ], [ %42, %block_400840 ]
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = add i64 %47, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %48, -16
  %54 = add i64 %47, 11
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 5082
  %58 = add i64 %56, 5
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_401c40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 ptrtoint (%V10Data_type* @V10Data to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2432
  store i8 %46, i8* %19, align 1, !tbaa !2446
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2447
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2448
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2449
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %63, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2432
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #10
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2446
  %80 = xor i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2447
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2450
  %94 = add i64 %64, -8
  %95 = add i64 %63, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, -47
  %99 = add i64 %97, 6
  %100 = load i8, i8* %28, align 1, !tbaa !2448
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i64 %98, i64 %99
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_40085b, label %block_400890

block_400890:                                     ; preds = %block_40085b
  %103 = load i64, i64* %RSP, align 8
  %104 = add i64 %103, 16
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -17
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %12, align 1, !tbaa !2432
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #10
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %19, align 1, !tbaa !2446
  %113 = xor i64 %103, 16
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2447
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %28, align 1, !tbaa !2448
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %31, align 1, !tbaa !2449
  %122 = lshr i64 %103, 63
  %123 = xor i64 %120, %122
  %124 = add nuw nsw i64 %123, %120
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %37, align 1, !tbaa !2450
  %127 = add i64 %102, 5
  store i64 %127, i64* %PC, align 8
  %128 = add i64 %103, 24
  %129 = inttoptr i64 %104 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RBP, align 8, !tbaa !2428
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %102, 6
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %134 = add i64 %103, 32
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_4062a0__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_4062a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4030e0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4030e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403110__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b90___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400b90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %.b = load i1, i1* @seg_609100__bss.0.0, align 8
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = zext i1 %.b to i32
  %5 = tail call i32 @llvm.ctpop.i32(i32 %4) #10
  %6 = trunc i32 %5 to i8
  %7 = xor i8 %6, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7, i8* %8, align 1, !tbaa !2446
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !2447
  %10 = xor i1 %.b, true
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11, i8* %12, align 1, !tbaa !2448
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !2449
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !2450
  %.v = select i1 %.b, i64 32, i64 9
  %15 = add i64 %.v, %1
  store i64 %15, i64* %PC, align 8, !tbaa !2428
  br i1 %.b, label %block_400bb0, label %block_400b99

block_400bb0:                                     ; preds = %block_400b90
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !2428
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %21 = add i64 %18, 8
  store i64 %21, i64* %17, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400b99:                                     ; preds = %block_400b90
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %15, 1
  store i64 %23, i64* %PC, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %22, i64* %27, align 8
  %28 = load i64, i64* %PC, align 8
  store i64 %26, i64* %RBP, align 8, !tbaa !2428
  %29 = add i64 %28, -122
  %30 = add i64 %28, 8
  %31 = add i64 %25, -16
  %32 = inttoptr i64 %31 to i64*
  store i64 %30, i64* %32, align 8
  store i64 %31, i64* %24, align 8, !tbaa !2428
  store i64 %29, i64* %PC, align 8, !tbaa !2428
  %33 = tail call %struct.Memory* @sub_400b20_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %29, %struct.Memory* %2)
  %34 = load i64, i64* %PC, align 8
  store i1 true, i1* @seg_609100__bss.0.0, align 8
  %35 = add i64 %34, 8
  store i64 %35, i64* %PC, align 8
  %36 = load i64, i64* %24, align 8, !tbaa !2428
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  store i64 %37, i64* %24, align 8, !tbaa !2428
  %40 = add i64 %34, 9
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = add i64 %36, 16
  store i64 %43, i64* %24, align 8, !tbaa !2428
  ret %struct.Memory* %33
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403d50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2453
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #10
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2453
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2453
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2453
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = trunc i64 %55 to i8
  %57 = and i8 %56, 1
  store i8 %57, i8* %54, align 1, !tbaa !2453
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2453
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2432
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #10
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2446
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2447
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2448
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2449
  %83 = and i64 %55, 1
  %84 = lshr i64 %62, 63
  %85 = xor i64 %81, %83
  %86 = xor i64 %81, %84
  %87 = add nuw nsw i64 %85, %86
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %58, align 1, !tbaa !2450
  %90 = add i64 %34, 16
  store i64 %90, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -8
  %93 = load i64, i64* %PC, align 8
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = add i64 %93, 5
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %5, align 8, !tbaa !2428
  %99 = add i64 %98, 8
  %100 = inttoptr i64 %98 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %RBP, align 8, !tbaa !2428
  store i64 %99, i64* %5, align 8, !tbaa !2428
  %102 = add i64 %93, 6
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %99 to i64*
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %PC, align 8, !tbaa !2428
  %105 = add i64 %98, 16
  store i64 %105, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4027c0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4027c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4027e8

block_402869:                                     ; preds = %block_4027e8
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4027f8:                                     ; preds = %block_4027e8
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 4464
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403980__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 10511
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405140__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 4866
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b50__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_4027e8

block_4027e8:                                     ; preds = %block_4027f8, %block_4027c0
  %255 = phi i64 [ %254, %block_4027f8 ], [ %.pre, %block_4027c0 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_4027f8, label %block_402869
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009a0___cxx_global_var_init_16(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4009a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dMPb_type* @dMPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4735
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c20__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_405ec0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405ec0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405ee0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402280__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402280:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4022a8

block_4022f1:                                     ; preds = %block_4022a8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4022b8:                                     ; preds = %block_4022a8
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 10200
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a90__ZN9benchmark4copyIPdS1_EEvT_S2_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 14775
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405c80__ZN9benchmark13insertionSortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 10490
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404bd0__Z13verify_sortedIPdEvT_S1__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_4022a8

block_4022a8:                                     ; preds = %block_4022b8, %block_402280
  %190 = phi i64 [ %189, %block_4022b8 ], [ %.pre, %block_402280 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4022b8, label %block_4022f1
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401d70__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_401d70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 12
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %32, i64* %33, align 1, !tbaa !2451
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  store double 0.000000e+00, double* %35, align 1, !tbaa !2451
  %36 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %36, align 8
  %37 = add i64 %22, 17
  store i64 %37, i64* %PC, align 8
  %38 = load i64, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  store i64 %39, i64* %5, align 8, !tbaa !2428
  %42 = add i64 %22, 18
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  %45 = add i64 %38, 16
  store i64 %45, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402c80__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402c80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402ca8

block_402d29:                                     ; preds = %block_402ca8
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402cb8:                                     ; preds = %block_402ca8
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 96
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402d30__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 191
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_402db0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 498
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402f00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402ca8

block_402ca8:                                     ; preds = %block_402cb8, %block_402c80
  %255 = phi i64 [ %254, %block_402cb8 ], [ %.pre, %block_402c80 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402cb8, label %block_402d29
}

; Function Attrs: noinline
define %struct.Memory* @sub_405440__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_405440:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -120
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 112
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  store i64 %39, i64* %RAX, align 8, !tbaa !2428
  %40 = add i64 %6, -16
  store i64 %40, i64* %RCX, align 8, !tbaa !2428
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %9, 19
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RAX, align 8
  %51 = load i64, i64* %PC, align 8
  store i64 %50, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RCX, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %51, -3288
  %54 = add i64 %51, 11
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_404780__ZmiIdElR14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %2)
  %59 = load i64, i64* %RAX, align 8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %59, -1
  %62 = icmp eq i64 %59, 0
  %63 = zext i1 %62 to i8
  store i8 %63, i8* %13, align 1, !tbaa !2432
  %64 = trunc i64 %61 to i32
  %65 = and i32 %64, 255
  %66 = tail call i32 @llvm.ctpop.i32(i32 %65) #10
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  store i8 %69, i8* %20, align 1, !tbaa !2446
  %70 = xor i64 %61, %59
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %26, align 1, !tbaa !2447
  %74 = icmp eq i64 %61, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %29, align 1, !tbaa !2448
  %76 = lshr i64 %61, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* %32, align 1, !tbaa !2449
  %78 = lshr i64 %59, 63
  %79 = xor i64 %76, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2450
  %83 = icmp ne i8 %77, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %74, %84
  %.v = select i1 %85, i64 372, i64 10
  %86 = add i64 %.v, %60
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_4055d7, label %block_40546d

block_4054dc:                                     ; preds = %block_4054c7
  %87 = add i64 %222, 169
  br label %block_405585

block_405502:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %88 = add i64 %271, -3490
  %89 = add i64 %271, 9
  %90 = load i64, i64* %RSP, align 8, !tbaa !2428
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92, align 8
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  store i64 %88, i64* %PC, align 8, !tbaa !2428
  %93 = tail call %struct.Memory* @sub_404760__ZppIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %88, %struct.Memory* %266)
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -96
  %96 = load i64, i64* %RAX, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99, align 8
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, -41
  br label %block_4054e6

block_405529:                                     ; preds = %block_405514
  %102 = add i64 %409, 92
  br label %block_405585

block_4055d7:                                     ; preds = %block_405585, %block_405440
  %103 = phi i64 [ %86, %block_405440 ], [ %.pre40, %block_405585 ]
  %MEMORY.0 = phi %struct.Memory* [ %58, %block_405440 ], [ %351, %block_405585 ]
  %104 = load i64, i64* %RSP, align 8
  %105 = add i64 %104, 112
  store i64 %105, i64* %RSP, align 8, !tbaa !2428
  %106 = icmp ugt i64 %104, -113
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %13, align 1, !tbaa !2432
  %108 = trunc i64 %105 to i32
  %109 = and i32 %108, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #10
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %20, align 1, !tbaa !2446
  %114 = xor i64 %104, 16
  %115 = xor i64 %114, %105
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2447
  %119 = icmp eq i64 %105, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %29, align 1, !tbaa !2448
  %121 = lshr i64 %105, 63
  %122 = trunc i64 %121 to i8
  store i8 %122, i8* %32, align 1, !tbaa !2449
  %123 = lshr i64 %104, 63
  %124 = xor i64 %121, %123
  %125 = add nuw nsw i64 %124, %121
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %38, align 1, !tbaa !2450
  %128 = add i64 %103, 5
  store i64 %128, i64* %PC, align 8
  %129 = add i64 %104, 120
  %130 = inttoptr i64 %105 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RBP, align 8, !tbaa !2428
  store i64 %129, i64* %RSP, align 8, !tbaa !2428
  %132 = add i64 %103, 6
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %129 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %PC, align 8, !tbaa !2428
  %135 = add i64 %104, 128
  store i64 %135, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405494:                                     ; preds = %block_40548f, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %136 = phi i64 [ %.pre, %block_40548f ], [ %198, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %.sink17 = phi i64 [ 5, %block_40548f ], [ -46, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_40548f ], [ %196, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %137 = add i64 %.sink17, %136
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -40
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = add i64 %138, -24
  %141 = add i64 %137, 9
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %140 to i64*
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %365, align 1, !tbaa !2451
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %144 = add i64 %138, -88
  %145 = add i64 %137, 14
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i64*
  store i64 %143, i64* %146, align 8
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, 318
  %149 = add i64 %147, 5
  %150 = load i64, i64* %RSP, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %149, i64* %152, align 8
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %153 = tail call %struct.Memory* @sub_4055e0__ZmmIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %154 = load i64, i64* %RAX, align 8
  %155 = load i64, i64* %PC, align 8
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %156 = add i64 %155, -3431
  %157 = add i64 %155, 8
  %158 = load i64, i64* %RSP, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160, align 8
  store i64 %159, i64* %RSP, align 8, !tbaa !2428
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %161 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %156, %struct.Memory* %MEMORY.1)
  %162 = load i64*, i64** %360, align 8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = load i64, i64* %162, align 8
  store i64 %165, i64* %365, align 1, !tbaa !2451
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -88
  %168 = add i64 %163, 9
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i64*
  %170 = load i64, i64* %169, align 8
  store i64 %170, i64* %390, align 1, !tbaa !2451
  store double 0.000000e+00, double* %392, align 1, !tbaa !2451
  %171 = add i64 %163, 13
  store i64 %171, i64* %PC, align 8
  %172 = bitcast i64 %165 to double
  %.cast28 = bitcast i64 %170 to double
  %173 = fcmp uno double %172, %.cast28
  br i1 %173, label %174, label %184

; <label>:174:                                    ; preds = %block_405494
  %175 = fadd double %172, %.cast28
  %176 = bitcast double %175 to i64
  %177 = and i64 %176, 9221120237041090560
  %178 = icmp eq i64 %177, 9218868437227405312
  %179 = and i64 %176, 2251799813685247
  %180 = icmp ne i64 %179, 0
  %181 = and i1 %178, %180
  br i1 %181, label %182, label %190

; <label>:182:                                    ; preds = %174
  %183 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %171, %struct.Memory* %MEMORY.1) #13
  %.pre37 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:184:                                    ; preds = %block_405494
  %185 = fcmp ogt double %172, %.cast28
  br i1 %185, label %190, label %186

; <label>:186:                                    ; preds = %184
  %187 = fcmp olt double %172, %.cast28
  br i1 %187, label %190, label %188

; <label>:188:                                    ; preds = %186
  %189 = fcmp oeq double %172, %.cast28
  br i1 %189, label %190, label %194

; <label>:190:                                    ; preds = %188, %186, %184, %174
  %191 = phi i8 [ 0, %184 ], [ 0, %186 ], [ 1, %188 ], [ 1, %174 ]
  %192 = phi i8 [ 0, %184 ], [ 0, %186 ], [ 0, %188 ], [ 1, %174 ]
  %193 = phi i8 [ 0, %184 ], [ 1, %186 ], [ 0, %188 ], [ 1, %174 ]
  store i8 %191, i8* %29, align 1, !tbaa !2453
  store i8 %192, i8* %20, align 1, !tbaa !2453
  store i8 %193, i8* %13, align 1, !tbaa !2453
  br label %194

; <label>:194:                                    ; preds = %190, %188
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %194, %182
  %195 = phi i64 [ %.pre37, %182 ], [ %171, %194 ]
  %196 = phi %struct.Memory* [ %183, %182 ], [ %MEMORY.1, %194 ]
  %197 = add i64 %195, 11
  %198 = add i64 %195, 6
  %199 = load i8, i8* %13, align 1, !tbaa !2432
  %200 = load i8, i8* %29, align 1, !tbaa !2448
  %201 = or i8 %200, %199
  %202 = icmp ne i8 %201, 0
  %203 = select i1 %202, i64 %197, i64 %198
  store i64 %203, i64* %PC, align 8, !tbaa !2428
  br i1 %202, label %block_4054c7, label %block_405494

block_4054c7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -32
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = add i64 %204, -40
  store i64 %206, i64* %RSI, align 8, !tbaa !2428
  %207 = add i64 %203, 313
  %208 = add i64 %203, 13
  %209 = load i64, i64* %RSP, align 8, !tbaa !2428
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %208, i64* %211, align 8
  store i64 %210, i64* %RSP, align 8, !tbaa !2428
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  %212 = tail call %struct.Memory* @sub_405600__ZltIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %207, %struct.Memory* %196)
  %213 = load i8, i8* %AL, align 1
  %214 = load i64, i64* %PC, align 8
  %215 = and i8 %213, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %216 = zext i8 %215 to i32
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #10
  %218 = trunc i32 %217 to i8
  %219 = xor i8 %218, 1
  store i8 %219, i8* %20, align 1, !tbaa !2446
  %220 = xor i8 %215, 1
  store i8 %220, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %221 = icmp eq i8 %220, 0
  %.v42 = select i1 %221, i64 13, i64 8
  %222 = add i64 %.v42, %214
  store i64 %222, i64* %PC, align 8, !tbaa !2428
  br i1 %221, label %block_4054e1, label %block_4054dc

block_4054e6:                                     ; preds = %block_4054e1, %block_405502
  %.sink4 = phi i64 [ %410, %block_4054e1 ], [ %101, %block_405502 ]
  %MEMORY.2 = phi %struct.Memory* [ %212, %block_4054e1 ], [ %93, %block_405502 ]
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -32
  store i64 %224, i64* %RDI, align 8, !tbaa !2428
  %225 = add i64 %.sink4, -3494
  %226 = add i64 %.sink4, 9
  %227 = load i64, i64* %RSP, align 8, !tbaa !2428
  %228 = add i64 %227, -8
  %229 = inttoptr i64 %228 to i64*
  store i64 %226, i64* %229, align 8
  store i64 %228, i64* %RSP, align 8, !tbaa !2428
  store i64 %225, i64* %PC, align 8, !tbaa !2428
  %230 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %225, %struct.Memory* %MEMORY.2)
  %231 = load i64*, i64** %360, align 8
  %232 = load i64, i64* %PC, align 8
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC, align 8
  %234 = load i64, i64* %231, align 8
  store i64 %234, i64* %365, align 1, !tbaa !2451
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %235 = load i64, i64* %RBP, align 8
  %236 = add i64 %235, -24
  %237 = add i64 %232, 9
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i64*
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %390, align 1, !tbaa !2451
  store double 0.000000e+00, double* %392, align 1, !tbaa !2451
  %240 = add i64 %232, 13
  store i64 %240, i64* %PC, align 8
  %.cast = bitcast i64 %239 to double
  %241 = bitcast i64 %234 to double
  %242 = fcmp uno double %.cast, %241
  br i1 %242, label %243, label %253

; <label>:243:                                    ; preds = %block_4054e6
  %244 = fadd double %241, %.cast
  %245 = bitcast double %244 to i64
  %246 = and i64 %245, 9221120237041090560
  %247 = icmp eq i64 %246, 9218868437227405312
  %248 = and i64 %245, 2251799813685247
  %249 = icmp ne i64 %248, 0
  %250 = and i1 %247, %249
  br i1 %250, label %251, label %259

; <label>:251:                                    ; preds = %243
  %252 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %240, %struct.Memory* %MEMORY.2) #13
  %.pre38 = load i64, i64* %PC, align 8
  %.pre39 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:253:                                    ; preds = %block_4054e6
  %254 = fcmp ogt double %.cast, %241
  br i1 %254, label %259, label %255

; <label>:255:                                    ; preds = %253
  %256 = fcmp olt double %.cast, %241
  br i1 %256, label %259, label %257

; <label>:257:                                    ; preds = %255
  %258 = fcmp oeq double %.cast, %241
  br i1 %258, label %259, label %263

; <label>:259:                                    ; preds = %257, %255, %253, %243
  %260 = phi i8 [ 0, %253 ], [ 0, %255 ], [ 1, %257 ], [ 1, %243 ]
  %261 = phi i8 [ 0, %253 ], [ 0, %255 ], [ 0, %257 ], [ 1, %243 ]
  %262 = phi i8 [ 0, %253 ], [ 1, %255 ], [ 0, %257 ], [ 1, %243 ]
  store i8 %260, i8* %29, align 1, !tbaa !2453
  store i8 %261, i8* %20, align 1, !tbaa !2453
  store i8 %262, i8* %13, align 1, !tbaa !2453
  br label %263

; <label>:263:                                    ; preds = %259, %257
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %263, %251
  %264 = phi i64 [ %.pre39, %251 ], [ %235, %263 ]
  %265 = phi i64 [ %.pre38, %251 ], [ %240, %263 ]
  %266 = phi %struct.Memory* [ %252, %251 ], [ %MEMORY.2, %263 ]
  %267 = load i8, i8* %13, align 1, !tbaa !2432
  %268 = load i8, i8* %29, align 1, !tbaa !2448
  %269 = or i8 %268, %267
  %270 = icmp ne i8 %269, 0
  %.v54 = select i1 %270, i64 24, i64 6
  %271 = add i64 %.v54, %265
  %272 = add i64 %264, -32
  %273 = add i64 %271, 4
  store i64 %273, i64* %PC, align 8
  store i64 %272, i64* %RDI, align 8, !tbaa !2428
  br i1 %270, label %block_405514, label %block_405502

block_405585:                                     ; preds = %block_405529, %block_4054dc
  %.sink = phi i64 [ %102, %block_405529 ], [ %87, %block_4054dc ]
  %MEMORY.3 = phi %struct.Memory* [ %399, %block_405529 ], [ %212, %block_4054dc ]
  %274 = load i64, i64* %RBP, align 8
  %275 = add i64 %274, -40
  store i64 %275, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %276 = add i64 %274, -8
  %277 = add i64 %.sink, 15
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i64*
  %279 = load i64, i64* %278, align 8
  store i64 %279, i64* %RCX, align 8, !tbaa !2428
  %280 = add i64 %274, -56
  %281 = add i64 %.sink, 19
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %280 to i64*
  store i64 %279, i64* %282, align 8
  %283 = load i64, i64* %PC, align 8
  %284 = add i64 %283, -3560
  %285 = add i64 %283, 5
  %286 = load i64, i64* %RSP, align 8, !tbaa !2428
  %287 = add i64 %286, -8
  %288 = inttoptr i64 %287 to i64*
  store i64 %285, i64* %288, align 8
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  store i64 %284, i64* %PC, align 8, !tbaa !2428
  %289 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %284, %struct.Memory* %MEMORY.3)
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -64
  %292 = load i64, i64* %RAX, align 8
  %293 = load i64, i64* %PC, align 8
  %294 = add i64 %293, 4
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %291 to i64*
  store i64 %292, i64* %295, align 8
  %296 = load i64, i64* %RBP, align 8
  %297 = add i64 %296, -56
  %298 = load i64, i64* %PC, align 8
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300, align 8
  store i64 %301, i64* %RDI, align 8, !tbaa !2428
  %302 = add i64 %296, -64
  %303 = add i64 %298, 8
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %RSI, align 8, !tbaa !2428
  %306 = add i64 %298, -353
  %307 = add i64 %298, 13
  %308 = load i64, i64* %RSP, align 8, !tbaa !2428
  %309 = add i64 %308, -8
  %310 = inttoptr i64 %309 to i64*
  store i64 %307, i64* %310, align 8
  store i64 %309, i64* %RSP, align 8, !tbaa !2428
  store i64 %306, i64* %PC, align 8, !tbaa !2428
  %311 = tail call %struct.Memory* @sub_405440__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %306, %struct.Memory* %289)
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -40
  %314 = load i64, i64* %PC, align 8
  store i64 %313, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %315 = add i64 %314, -3582
  %316 = add i64 %314, 16
  %317 = load i64, i64* %RSP, align 8, !tbaa !2428
  %318 = add i64 %317, -8
  %319 = inttoptr i64 %318 to i64*
  store i64 %316, i64* %319, align 8
  store i64 %318, i64* %RSP, align 8, !tbaa !2428
  store i64 %315, i64* %PC, align 8, !tbaa !2428
  %320 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %315, %struct.Memory* %311)
  %321 = load i64, i64* %RBP, align 8
  %322 = add i64 %321, -72
  %323 = load i64, i64* %RAX, align 8
  %324 = load i64, i64* %PC, align 8
  %325 = add i64 %324, 4
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %322 to i64*
  store i64 %323, i64* %326, align 8
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -16
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 4
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %328 to i64*
  %332 = load i64, i64* %331, align 8
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = add i64 %327, -80
  %334 = add i64 %329, 8
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  store i64 %332, i64* %335, align 8
  %336 = load i64, i64* %RBP, align 8
  %337 = add i64 %336, -72
  %338 = load i64, i64* %PC, align 8
  %339 = add i64 %338, 4
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %341, i64* %RDI, align 8, !tbaa !2428
  %342 = add i64 %336, -80
  %343 = add i64 %338, 8
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %RSI, align 8, !tbaa !2428
  %346 = add i64 %338, -394
  %347 = add i64 %338, 13
  %348 = load i64, i64* %RSP, align 8, !tbaa !2428
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350, align 8
  store i64 %349, i64* %RSP, align 8, !tbaa !2428
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  %351 = tail call %struct.Memory* @sub_405440__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %346, %struct.Memory* %320)
  %.pre40 = load i64, i64* %PC, align 8
  br label %block_4055d7

block_40548f:                                     ; preds = %block_40552e, %block_40546d
  %.pre = phi i64 [ %.pre.pre, %block_40546d ], [ %485, %block_40552e ]
  %MEMORY.4 = phi %struct.Memory* [ %359, %block_40546d ], [ %475, %block_40552e ]
  br label %block_405494

block_40546d:                                     ; preds = %block_405440
  %352 = load i64, i64* %RBP, align 8
  %353 = add i64 %352, -8
  store i64 %353, i64* %RDI, align 8, !tbaa !2428
  %354 = add i64 %86, -3373
  %355 = add i64 %86, 9
  %356 = load i64, i64* %RSP, align 8, !tbaa !2428
  %357 = add i64 %356, -8
  %358 = inttoptr i64 %357 to i64*
  store i64 %355, i64* %358, align 8
  store i64 %357, i64* %RSP, align 8, !tbaa !2428
  store i64 %354, i64* %PC, align 8, !tbaa !2428
  %359 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %354, %struct.Memory* %58)
  %360 = bitcast %union.anon* %3 to i64**
  %361 = load i64*, i64** %360, align 8
  %362 = load i64, i64* %PC, align 8
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC, align 8
  %364 = load i64, i64* %361, align 8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %364, i64* %365, align 1, !tbaa !2451
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %367 = bitcast i64* %366 to double*
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -24
  %370 = add i64 %362, 9
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i64*
  store i64 %364, i64* %371, align 8
  %372 = load i64, i64* %RBP, align 8
  %373 = add i64 %372, -8
  %374 = load i64, i64* %PC, align 8
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %373 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = add i64 %372, -32
  %379 = add i64 %374, 8
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %378 to i64*
  store i64 %377, i64* %380, align 8
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -16
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %381, -40
  %388 = add i64 %383, 8
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  store i64 %386, i64* %389, align 8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %392 = bitcast i64* %391 to double*
  %.pre.pre = load i64, i64* %PC, align 8
  br label %block_40548f

block_405514:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %393 = add i64 %264, -40
  store i64 %393, i64* %RSI, align 8, !tbaa !2428
  %394 = add i64 %271, 236
  %395 = add i64 %271, 13
  %396 = load i64, i64* %RSP, align 8, !tbaa !2428
  %397 = add i64 %396, -8
  %398 = inttoptr i64 %397 to i64*
  store i64 %395, i64* %398, align 8
  store i64 %397, i64* %RSP, align 8, !tbaa !2428
  store i64 %394, i64* %PC, align 8, !tbaa !2428
  %399 = tail call %struct.Memory* @sub_405600__ZltIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %394, %struct.Memory* %266)
  %400 = load i8, i8* %AL, align 1
  %401 = load i64, i64* %PC, align 8
  %402 = and i8 %400, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %403 = zext i8 %402 to i32
  %404 = tail call i32 @llvm.ctpop.i32(i32 %403) #10
  %405 = trunc i32 %404 to i8
  %406 = xor i8 %405, 1
  store i8 %406, i8* %20, align 1, !tbaa !2446
  %407 = xor i8 %402, 1
  store i8 %407, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %408 = icmp eq i8 %407, 0
  %.v43 = select i1 %408, i64 13, i64 8
  %409 = add i64 %.v43, %401
  store i64 %409, i64* %PC, align 8, !tbaa !2428
  br i1 %408, label %block_40552e, label %block_405529

block_4054e1:                                     ; preds = %block_4054c7
  %410 = add i64 %222, 5
  br label %block_4054e6

block_40552e:                                     ; preds = %block_405514
  %411 = load i64, i64* %RBP, align 8
  %412 = add i64 %411, -40
  store i64 %412, i64* %RDI, align 8, !tbaa !2428
  %413 = add i64 %409, -3566
  %414 = add i64 %409, 9
  %415 = load i64, i64* %RSP, align 8, !tbaa !2428
  %416 = add i64 %415, -8
  %417 = inttoptr i64 %416 to i64*
  store i64 %414, i64* %417, align 8
  store i64 %416, i64* %RSP, align 8, !tbaa !2428
  store i64 %413, i64* %PC, align 8, !tbaa !2428
  %418 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %413, %struct.Memory* %399)
  %419 = load i64, i64* %RBP, align 8
  %420 = add i64 %419, -32
  %421 = load i64, i64* %PC, align 8
  store i64 %420, i64* %RDI, align 8, !tbaa !2428
  %422 = load i64*, i64** %360, align 8
  %423 = add i64 %421, 8
  store i64 %423, i64* %PC, align 8
  %424 = load i64, i64* %422, align 8
  store i64 %424, i64* %365, align 1, !tbaa !2451
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %425 = add i64 %419, -48
  %426 = add i64 %421, 13
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to i64*
  store i64 %424, i64* %427, align 8
  %428 = load i64, i64* %PC, align 8
  %429 = add i64 %428, -3588
  %430 = add i64 %428, 5
  %431 = load i64, i64* %RSP, align 8, !tbaa !2428
  %432 = add i64 %431, -8
  %433 = inttoptr i64 %432 to i64*
  store i64 %430, i64* %433, align 8
  store i64 %432, i64* %RSP, align 8, !tbaa !2428
  store i64 %429, i64* %PC, align 8, !tbaa !2428
  %434 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %429, %struct.Memory* %418)
  %435 = load i64, i64* %RBP, align 8
  %436 = add i64 %435, -40
  %437 = load i64, i64* %PC, align 8
  store i64 %436, i64* %RDI, align 8, !tbaa !2428
  %438 = load i64*, i64** %360, align 8
  %439 = add i64 %437, 8
  store i64 %439, i64* %PC, align 8
  %440 = load i64, i64* %438, align 8
  store i64 %440, i64* %365, align 1, !tbaa !2451
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %441 = add i64 %435, -104
  %442 = add i64 %437, 13
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i64*
  store i64 %440, i64* %443, align 8
  %444 = load i64, i64* %PC, align 8
  %445 = add i64 %444, -3606
  %446 = add i64 %444, 5
  %447 = load i64, i64* %RSP, align 8, !tbaa !2428
  %448 = add i64 %447, -8
  %449 = inttoptr i64 %448 to i64*
  store i64 %446, i64* %449, align 8
  store i64 %448, i64* %RSP, align 8, !tbaa !2428
  store i64 %445, i64* %PC, align 8, !tbaa !2428
  %450 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %445, %struct.Memory* %434)
  %451 = load i64, i64* %RBP, align 8
  %452 = add i64 %451, -32
  %453 = load i64, i64* %PC, align 8
  store i64 %452, i64* %RDI, align 8, !tbaa !2428
  %454 = add i64 %451, -104
  %455 = add i64 %453, 9
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %454 to i64*
  %457 = load i64, i64* %456, align 8
  store i64 %457, i64* %365, align 1, !tbaa !2451
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %458 = load i64*, i64** %360, align 8
  %459 = add i64 %453, 13
  store i64 %459, i64* %PC, align 8
  store i64 %457, i64* %458, align 8
  %460 = load i64, i64* %RBP, align 8
  %461 = add i64 %460, -48
  %462 = load i64, i64* %PC, align 8
  %463 = add i64 %462, 5
  store i64 %463, i64* %PC, align 8
  %464 = inttoptr i64 %461 to i64*
  %465 = load i64, i64* %464, align 8
  store i64 %465, i64* %365, align 1, !tbaa !2451
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %466 = add i64 %460, -112
  %467 = add i64 %462, 10
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i64*
  store i64 %465, i64* %468, align 8
  %469 = load i64, i64* %PC, align 8
  %470 = add i64 %469, -3634
  %471 = add i64 %469, 5
  %472 = load i64, i64* %RSP, align 8, !tbaa !2428
  %473 = add i64 %472, -8
  %474 = inttoptr i64 %473 to i64*
  store i64 %471, i64* %474, align 8
  store i64 %473, i64* %RSP, align 8, !tbaa !2428
  store i64 %470, i64* %PC, align 8, !tbaa !2428
  %475 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %470, %struct.Memory* %450)
  %476 = load i64, i64* %RBP, align 8
  %477 = add i64 %476, -112
  %478 = load i64, i64* %PC, align 8
  %479 = add i64 %478, 5
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480, align 8
  store i64 %481, i64* %365, align 1, !tbaa !2451
  store double 0.000000e+00, double* %367, align 1, !tbaa !2451
  %482 = load i64*, i64** %360, align 8
  %483 = add i64 %478, 9
  store i64 %483, i64* %PC, align 8
  store i64 %481, i64* %482, align 8
  %484 = load i64, i64* %PC, align 8
  %485 = add i64 %484, -241
  store i64 %485, i64* %PC, align 8, !tbaa !2428
  br label %block_40548f
}

; Function Attrs: noinline
define %struct.Memory* @sub_400aa0___cxx_global_var_init_24(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400aa0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10MPb_type* @DV10MPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4415
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401be0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_4037d0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4037d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = add i64 %10, 12
  store i64 %40, i64* %PC, align 8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RSI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = lshr i64 %77, 63
  %79 = trunc i64 %78 to i8
  %80 = shl i64 %77, 1
  %81 = icmp slt i64 %77, 0
  %82 = icmp slt i64 %80, 0
  %83 = xor i1 %81, %82
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  store i8 %79, i8* %14, align 1, !tbaa !2453
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #10
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %90 = icmp eq i64 %80, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %29, align 1, !tbaa !2453
  %92 = lshr i64 %77, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %32, align 1, !tbaa !2453
  %95 = zext i1 %83 to i8
  store i8 %95, i8* %38, align 1, !tbaa !2453
  %96 = add i64 %71, -40
  %97 = add i64 %73, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %80, i64* %98, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403801

block_40391d:                                     ; preds = %block_403912
  %99 = add i64 %252, -24
  %100 = add i64 %264, 73
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = add i64 %252, -48
  %104 = add i64 %264, 77
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %RCX, align 8, !tbaa !2428
  %107 = add i64 %252, -8
  %108 = add i64 %264, 81
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RDX, align 8, !tbaa !2428
  %111 = shl i64 %106, 3
  %112 = add i64 %111, %102
  %113 = add i64 %264, 85
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %114, align 8
  %115 = load i64, i64* %RSP, align 8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %115, 64
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  %118 = icmp ugt i64 %115, -65
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %14, align 1, !tbaa !2432
  %120 = trunc i64 %117 to i32
  %121 = and i32 %120, 255
  %122 = tail call i32 @llvm.ctpop.i32(i32 %121) #10
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  store i8 %125, i8* %21, align 1, !tbaa !2446
  %126 = xor i64 %117, %115
  %127 = lshr i64 %126, 4
  %128 = trunc i64 %127 to i8
  %129 = and i8 %128, 1
  store i8 %129, i8* %26, align 1, !tbaa !2447
  %130 = icmp eq i64 %117, 0
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %29, align 1, !tbaa !2448
  %132 = lshr i64 %117, 63
  %133 = trunc i64 %132 to i8
  store i8 %133, i8* %32, align 1, !tbaa !2449
  %134 = lshr i64 %115, 63
  %135 = xor i64 %132, %134
  %136 = add nuw nsw i64 %135, %132
  %137 = icmp eq i64 %136, 2
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %38, align 1, !tbaa !2450
  %139 = add i64 %116, 5
  store i64 %139, i64* %PC, align 8
  %140 = add i64 %115, 72
  %141 = inttoptr i64 %117 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %RBP, align 8, !tbaa !2428
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  %143 = add i64 %116, 6
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %140 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %146 = add i64 %115, 80
  store i64 %146, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4038c4:                                     ; preds = %block_40388e, %block_40389c
  %147 = phi i64 [ %744, %block_40388e ], [ %.pre13, %block_40389c ]
  %148 = phi i64 [ %504, %block_40388e ], [ %.pre12, %block_40389c ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %149 = add i64 %147, -48
  %150 = add i64 %148, 11
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %149 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = add i64 %152, -1
  %154 = icmp eq i64 %152, 0
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %14, align 1, !tbaa !2432
  %156 = trunc i64 %153 to i32
  %157 = and i32 %156, 255
  %158 = tail call i32 @llvm.ctpop.i32(i32 %157) #10
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = xor i8 %160, 1
  store i8 %161, i8* %21, align 1, !tbaa !2446
  %162 = xor i64 %153, %152
  %163 = lshr i64 %162, 4
  %164 = trunc i64 %163 to i8
  %165 = and i8 %164, 1
  store i8 %165, i8* %26, align 1, !tbaa !2447
  %166 = icmp eq i64 %153, 0
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %29, align 1, !tbaa !2448
  %168 = lshr i64 %153, 63
  %169 = trunc i64 %168 to i8
  store i8 %169, i8* %32, align 1, !tbaa !2449
  %170 = lshr i64 %152, 63
  %171 = xor i64 %168, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %38, align 1, !tbaa !2450
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %176 = ashr i64 %153, 63
  store i64 %176, i64* %RDX, align 8, !tbaa !2428
  %177 = add i64 %148, 23
  store i64 %177, i64* %PC, align 8
  %178 = zext i64 %176 to i128
  %179 = shl nuw i128 %178, 64
  %180 = zext i64 %153 to i128
  %181 = or i128 %179, %180
  %182 = sdiv i128 %181, 2
  %183 = trunc i128 %182 to i64
  %184 = and i128 %182, 18446744073709551615
  %185 = sext i64 %183 to i128
  %186 = and i128 %185, -18446744073709551616
  %187 = or i128 %186, %184
  %188 = icmp eq i128 %182, %187
  br i1 %188, label %191, label %189

; <label>:189:                                    ; preds = %block_4038c4
  %190 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %177, %struct.Memory* %2) #13
  %.pre14 = load i64, i64* %RBP, align 8
  %.pre15 = load i64, i64* %RAX, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:191:                                    ; preds = %block_4038c4
  %192 = srem i128 %181, 2
  %193 = trunc i128 %192 to i64
  store i64 %183, i64* %175, align 8, !tbaa !2428
  store i64 %193, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %191, %189
  %194 = phi i64 [ %.pre16, %189 ], [ %177, %191 ]
  %195 = phi i64 [ %.pre15, %189 ], [ %183, %191 ]
  %196 = phi i64 [ %.pre14, %189 ], [ %147, %191 ]
  %197 = phi %struct.Memory* [ %190, %189 ], [ %2, %191 ]
  %198 = add i64 %196, -40
  %199 = add i64 %194, 4
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %195, i64* %200, align 8
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_4038df

block_4038df:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %201 = phi i64 [ %.pre17, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %742, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %197, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %737, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -48
  %204 = add i64 %201, 8
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RDX, align 8, !tbaa !2428
  %207 = add i64 %202, -32
  %208 = add i64 %201, 12
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = sub i64 %206, %210
  %212 = icmp ult i64 %206, %210
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %14, align 1, !tbaa !2432
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #10
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %21, align 1, !tbaa !2446
  %220 = xor i64 %210, %206
  %221 = xor i64 %220, %211
  %222 = lshr i64 %221, 4
  %223 = trunc i64 %222 to i8
  %224 = and i8 %223, 1
  store i8 %224, i8* %26, align 1, !tbaa !2447
  %225 = icmp eq i64 %211, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %29, align 1, !tbaa !2448
  %227 = lshr i64 %211, 63
  %228 = trunc i64 %227 to i8
  store i8 %228, i8* %32, align 1, !tbaa !2449
  %229 = lshr i64 %206, 63
  %230 = lshr i64 %210, 63
  %231 = xor i64 %230, %229
  %232 = xor i64 %227, %229
  %233 = add nuw nsw i64 %232, %231
  %234 = icmp eq i64 %233, 2
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %38, align 1, !tbaa !2450
  %236 = add i64 %202, -49
  %237 = add i64 %201, 15
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i8*
  store i8 0, i8* %238, align 1
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 36
  %241 = add i64 %239, 6
  %242 = load i8, i8* %29, align 1, !tbaa !2448
  %243 = icmp ne i8 %242, 0
  %244 = load i8, i8* %32, align 1, !tbaa !2449
  %245 = icmp ne i8 %244, 0
  %246 = load i8, i8* %38, align 1, !tbaa !2450
  %247 = icmp ne i8 %246, 0
  %248 = xor i1 %245, %247
  %249 = or i1 %243, %248
  %250 = select i1 %249, i64 %240, i64 %241
  store i64 %250, i64* %PC, align 8, !tbaa !2428
  br i1 %249, label %block_403912, label %block_4038f4

block_403912:                                     ; preds = %block_4038f4, %block_4038df
  %251 = phi i64 [ %.pre18, %block_4038f4 ], [ %240, %block_4038df ]
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -49
  %254 = add i64 %251, 3
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i8*
  %256 = load i8, i8* %255, align 1
  store i8 %256, i8* %AL, align 1, !tbaa !2453
  %257 = and i8 %256, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %258 = zext i8 %257 to i32
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #10
  %260 = trunc i32 %259 to i8
  %261 = xor i8 %260, 1
  store i8 %261, i8* %21, align 1, !tbaa !2446
  %262 = xor i8 %257, 1
  store i8 %262, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %263 = icmp eq i8 %262, 0
  %.v = select i1 %263, i64 16, i64 11
  %264 = add i64 %.v, %251
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  br i1 %263, label %block_403922, label %block_40391d

block_40389c:                                     ; preds = %block_40388e
  %265 = add i64 %744, -24
  %266 = add i64 %504, 4
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = add i64 %504, 8
  store i64 %269, i64* %PC, align 8
  %270 = load i64, i64* %747, align 8
  %271 = add i64 %270, -1
  store i64 %271, i64* %RCX, align 8, !tbaa !2428
  %272 = icmp eq i64 %270, 0
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %14, align 1, !tbaa !2432
  %274 = trunc i64 %271 to i32
  %275 = and i32 %274, 255
  %276 = tail call i32 @llvm.ctpop.i32(i32 %275) #10
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = xor i8 %278, 1
  store i8 %279, i8* %21, align 1, !tbaa !2446
  %280 = xor i64 %271, %270
  %281 = lshr i64 %280, 4
  %282 = trunc i64 %281 to i8
  %283 = and i8 %282, 1
  store i8 %283, i8* %26, align 1, !tbaa !2447
  %284 = icmp eq i64 %271, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %29, align 1, !tbaa !2448
  %286 = lshr i64 %271, 63
  %287 = trunc i64 %286 to i8
  store i8 %287, i8* %32, align 1, !tbaa !2449
  %288 = lshr i64 %270, 63
  %289 = xor i64 %286, %288
  %290 = add nuw nsw i64 %289, %288
  %291 = icmp eq i64 %290, 2
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %38, align 1, !tbaa !2450
  %293 = add i64 %504, 16
  store i64 %293, i64* %PC, align 8
  %294 = load i64, i64* %267, align 8
  store i64 %294, i64* %RDX, align 8, !tbaa !2428
  %295 = add i64 %744, -48
  %296 = add i64 %504, 20
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RSI, align 8, !tbaa !2428
  %299 = shl i64 %271, 3
  %300 = add i64 %299, %268
  %301 = add i64 %504, 24
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %300 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = shl i64 %298, 3
  %305 = add i64 %304, %294
  %306 = add i64 %504, 28
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to i64*
  store i64 %303, i64* %307, align 8
  %308 = load i64, i64* %RBP, align 8
  %309 = add i64 %308, -40
  %310 = load i64, i64* %PC, align 8
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %309 to i64*
  %313 = load i64, i64* %312, align 8
  %314 = add i64 %313, -1
  store i64 %314, i64* %RAX, align 8, !tbaa !2428
  %315 = icmp eq i64 %313, 0
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %14, align 1, !tbaa !2432
  %317 = trunc i64 %314 to i32
  %318 = and i32 %317, 255
  %319 = tail call i32 @llvm.ctpop.i32(i32 %318) #10
  %320 = trunc i32 %319 to i8
  %321 = and i8 %320, 1
  %322 = xor i8 %321, 1
  store i8 %322, i8* %21, align 1, !tbaa !2446
  %323 = xor i64 %314, %313
  %324 = lshr i64 %323, 4
  %325 = trunc i64 %324 to i8
  %326 = and i8 %325, 1
  store i8 %326, i8* %26, align 1, !tbaa !2447
  %327 = icmp eq i64 %314, 0
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %29, align 1, !tbaa !2448
  %329 = lshr i64 %314, 63
  %330 = trunc i64 %329 to i8
  store i8 %330, i8* %32, align 1, !tbaa !2449
  %331 = lshr i64 %313, 63
  %332 = xor i64 %329, %331
  %333 = add nuw nsw i64 %332, %331
  %334 = icmp eq i64 %333, 2
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %38, align 1, !tbaa !2450
  %336 = add i64 %308, -48
  %337 = add i64 %310, 12
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  store i64 %314, i64* %338, align 8
  %.pre12 = load i64, i64* %PC, align 8
  %.pre13 = load i64, i64* %RBP, align 8
  br label %block_4038c4

block_40380f:                                     ; preds = %block_403801
  %339 = add i64 %744, -24
  %340 = add i64 %780, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %780, 8
  store i64 %343, i64* %PC, align 8
  %344 = load i64, i64* %747, align 8
  %345 = add i64 %344, -1
  %346 = shl i64 %345, 3
  store i64 %346, i64* %RCX, align 8, !tbaa !2428
  %347 = add i64 %346, %342
  store i64 %347, i64* %RAX, align 8, !tbaa !2428
  %348 = icmp ult i64 %347, %342
  %349 = icmp ult i64 %347, %346
  %350 = or i1 %348, %349
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %14, align 1, !tbaa !2432
  %352 = trunc i64 %347 to i32
  %353 = and i32 %352, 255
  %354 = tail call i32 @llvm.ctpop.i32(i32 %353) #10
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  store i8 %357, i8* %21, align 1, !tbaa !2446
  %358 = xor i64 %346, %342
  %359 = xor i64 %358, %347
  %360 = lshr i64 %359, 4
  %361 = trunc i64 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %26, align 1, !tbaa !2447
  %363 = icmp eq i64 %347, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %29, align 1, !tbaa !2448
  %365 = lshr i64 %347, 63
  %366 = trunc i64 %365 to i8
  store i8 %366, i8* %32, align 1, !tbaa !2449
  %367 = lshr i64 %342, 63
  %368 = lshr i64 %345, 60
  %369 = and i64 %368, 1
  %370 = xor i64 %365, %367
  %371 = xor i64 %365, %369
  %372 = add nuw nsw i64 %370, %371
  %373 = icmp eq i64 %372, 2
  %374 = zext i1 %373 to i8
  store i8 %374, i8* %38, align 1, !tbaa !2450
  %375 = add i64 %780, 23
  store i64 %375, i64* %PC, align 8
  %376 = load i64, i64* %341, align 8
  store i64 %376, i64* %RCX, align 8, !tbaa !2428
  %377 = add i64 %780, 27
  store i64 %377, i64* %PC, align 8
  %378 = load i64, i64* %747, align 8
  %379 = shl i64 %378, 3
  store i64 %379, i64* %RDX, align 8, !tbaa !2428
  %380 = add i64 %379, %376
  store i64 %380, i64* %RCX, align 8, !tbaa !2428
  %381 = icmp ult i64 %380, %376
  %382 = icmp ult i64 %380, %379
  %383 = or i1 %381, %382
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %14, align 1, !tbaa !2432
  %385 = trunc i64 %380 to i32
  %386 = and i32 %385, 255
  %387 = tail call i32 @llvm.ctpop.i32(i32 %386) #10
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  store i8 %390, i8* %21, align 1, !tbaa !2446
  %391 = xor i64 %379, %376
  %392 = xor i64 %391, %380
  %393 = lshr i64 %392, 4
  %394 = trunc i64 %393 to i8
  %395 = and i8 %394, 1
  store i8 %395, i8* %26, align 1, !tbaa !2447
  %396 = icmp eq i64 %380, 0
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %29, align 1, !tbaa !2448
  %398 = lshr i64 %380, 63
  %399 = trunc i64 %398 to i8
  store i8 %399, i8* %32, align 1, !tbaa !2449
  %400 = lshr i64 %376, 63
  %401 = lshr i64 %378, 60
  %402 = and i64 %401, 1
  %403 = xor i64 %398, %400
  %404 = xor i64 %398, %402
  %405 = add nuw nsw i64 %403, %404
  %406 = icmp eq i64 %405, 2
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %38, align 1, !tbaa !2450
  store i64 %347, i64* %RDI, align 8, !tbaa !2428
  store i64 %380, i64* %RSI, align 8, !tbaa !2428
  %408 = add i64 %780, -1887
  %409 = add i64 %780, 45
  %410 = load i64, i64* %RSP, align 8, !tbaa !2428
  %411 = add i64 %410, -8
  %412 = inttoptr i64 %411 to i64*
  store i64 %409, i64* %412, align 8
  store i64 %411, i64* %RSP, align 8, !tbaa !2428
  store i64 %408, i64* %PC, align 8, !tbaa !2428
  %413 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %408, %struct.Memory* %2)
  %414 = load i8, i8* %AL, align 1
  %415 = load i64, i64* %PC, align 8
  %416 = and i8 %414, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %417 = zext i8 %416 to i32
  %418 = tail call i32 @llvm.ctpop.i32(i32 %417) #10
  %419 = trunc i32 %418 to i8
  %420 = xor i8 %419, 1
  store i8 %420, i8* %21, align 1, !tbaa !2446
  %421 = xor i8 %416, 1
  store i8 %421, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %422 = icmp eq i8 %421, 0
  %.v25 = select i1 %422, i64 13, i64 8
  %423 = add i64 %.v25, %415
  store i64 %423, i64* %PC, align 8, !tbaa !2428
  br i1 %422, label %block_403849, label %block_403844

block_4038f4:                                     ; preds = %block_4038df
  %424 = load i64, i64* %RBP, align 8
  %425 = add i64 %424, -8
  store i64 %425, i64* %RSI, align 8, !tbaa !2428
  %426 = add i64 %424, -24
  %427 = add i64 %250, 8
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = add i64 %424, -40
  %431 = add i64 %250, 12
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %430 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = shl i64 %433, 3
  store i64 %434, i64* %RCX, align 8, !tbaa !2428
  %435 = add i64 %434, %429
  store i64 %435, i64* %RAX, align 8, !tbaa !2428
  %436 = icmp ult i64 %435, %429
  %437 = icmp ult i64 %435, %434
  %438 = or i1 %436, %437
  %439 = zext i1 %438 to i8
  store i8 %439, i8* %14, align 1, !tbaa !2432
  %440 = trunc i64 %435 to i32
  %441 = and i32 %440, 255
  %442 = tail call i32 @llvm.ctpop.i32(i32 %441) #10
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  store i8 %445, i8* %21, align 1, !tbaa !2446
  %446 = xor i64 %434, %429
  %447 = xor i64 %446, %435
  %448 = lshr i64 %447, 4
  %449 = trunc i64 %448 to i8
  %450 = and i8 %449, 1
  store i8 %450, i8* %26, align 1, !tbaa !2447
  %451 = icmp eq i64 %435, 0
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %29, align 1, !tbaa !2448
  %453 = lshr i64 %435, 63
  %454 = trunc i64 %453 to i8
  store i8 %454, i8* %32, align 1, !tbaa !2449
  %455 = lshr i64 %429, 63
  %456 = lshr i64 %433, 60
  %457 = and i64 %456, 1
  %458 = xor i64 %453, %455
  %459 = xor i64 %453, %457
  %460 = add nuw nsw i64 %458, %459
  %461 = icmp eq i64 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %38, align 1, !tbaa !2450
  store i64 %435, i64* %RDI, align 8, !tbaa !2428
  %463 = add i64 %250, -2116
  %464 = add i64 %250, 27
  %465 = load i64, i64* %RSP, align 8, !tbaa !2428
  %466 = add i64 %465, -8
  %467 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %467, align 8
  store i64 %466, i64* %RSP, align 8, !tbaa !2428
  store i64 %463, i64* %PC, align 8, !tbaa !2428
  %468 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %463, %struct.Memory* %MEMORY.1)
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -49
  %471 = load i8, i8* %AL, align 1
  %472 = load i64, i64* %PC, align 8
  %473 = add i64 %472, 3
  store i64 %473, i64* %PC, align 8
  %474 = inttoptr i64 %470 to i8*
  store i8 %471, i8* %474, align 1
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_403912

block_40388e:                                     ; preds = %block_403801
  %CL = bitcast %union.anon* %4 to i8*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %475 = add i64 %780, 4
  store i64 %475, i64* %PC, align 8
  %476 = load i64, i64* %747, align 8
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = add i64 %780, 8
  store i64 %477, i64* %PC, align 8
  %478 = load i64, i64* %751, align 8
  %479 = sub i64 %476, %478
  %480 = icmp ult i64 %476, %478
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %14, align 1, !tbaa !2432
  %482 = trunc i64 %479 to i32
  %483 = and i32 %482, 255
  %484 = tail call i32 @llvm.ctpop.i32(i32 %483) #10
  %485 = trunc i32 %484 to i8
  %486 = and i8 %485, 1
  %487 = xor i8 %486, 1
  store i8 %487, i8* %21, align 1, !tbaa !2446
  %488 = xor i64 %478, %476
  %489 = xor i64 %488, %479
  %490 = lshr i64 %489, 4
  %491 = trunc i64 %490 to i8
  %492 = and i8 %491, 1
  store i8 %492, i8* %26, align 1, !tbaa !2447
  %493 = icmp eq i64 %479, 0
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %29, align 1, !tbaa !2448
  %495 = lshr i64 %479, 63
  %496 = trunc i64 %495 to i8
  store i8 %496, i8* %32, align 1, !tbaa !2449
  %497 = lshr i64 %476, 63
  %498 = lshr i64 %478, 63
  %499 = xor i64 %498, %497
  %500 = xor i64 %495, %497
  %501 = add nuw nsw i64 %500, %499
  %502 = icmp eq i64 %501, 2
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %38, align 1, !tbaa !2450
  %.v24 = select i1 %493, i64 14, i64 54
  %504 = add i64 %.v24, %780
  store i64 %504, i64* %PC, align 8, !tbaa !2428
  br i1 %493, label %block_40389c, label %block_4038c4

block_403849:                                     ; preds = %block_40380f
  %505 = load i64, i64* %RBP, align 8
  %506 = add i64 %505, -40
  %507 = add i64 %423, 4
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to i64*
  %509 = load i64, i64* %508, align 8
  %510 = add i64 %509, 1
  store i64 %510, i64* %RAX, align 8, !tbaa !2428
  %511 = icmp eq i64 %509, -1
  %512 = icmp eq i64 %510, 0
  %513 = or i1 %511, %512
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %14, align 1, !tbaa !2432
  %515 = trunc i64 %510 to i32
  %516 = and i32 %515, 255
  %517 = tail call i32 @llvm.ctpop.i32(i32 %516) #10
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  store i8 %520, i8* %21, align 1, !tbaa !2446
  %521 = xor i64 %510, %509
  %522 = lshr i64 %521, 4
  %523 = trunc i64 %522 to i8
  %524 = and i8 %523, 1
  store i8 %524, i8* %26, align 1, !tbaa !2447
  %525 = zext i1 %512 to i8
  store i8 %525, i8* %29, align 1, !tbaa !2448
  %526 = lshr i64 %510, 63
  %527 = trunc i64 %526 to i8
  store i8 %527, i8* %32, align 1, !tbaa !2449
  %528 = lshr i64 %509, 63
  %529 = xor i64 %526, %528
  %530 = add nuw nsw i64 %529, %526
  %531 = icmp eq i64 %530, 2
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %38, align 1, !tbaa !2450
  %533 = add i64 %423, 12
  store i64 %533, i64* %PC, align 8
  store i64 %510, i64* %508, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_403855

block_403855:                                     ; preds = %block_403844, %block_403849
  %534 = phi i64 [ %650, %block_403844 ], [ %.pre22, %block_403849 ]
  %535 = load i64, i64* %RBP, align 8
  %536 = add i64 %535, -24
  %537 = add i64 %534, 4
  store i64 %537, i64* %PC, align 8
  %538 = inttoptr i64 %536 to i64*
  %539 = load i64, i64* %538, align 8
  store i64 %539, i64* %RAX, align 8, !tbaa !2428
  %540 = add i64 %535, -40
  %541 = add i64 %534, 8
  store i64 %541, i64* %PC, align 8
  %542 = inttoptr i64 %540 to i64*
  %543 = load i64, i64* %542, align 8
  %544 = add i64 %543, -1
  store i64 %544, i64* %RCX, align 8, !tbaa !2428
  %545 = icmp eq i64 %543, 0
  %546 = zext i1 %545 to i8
  store i8 %546, i8* %14, align 1, !tbaa !2432
  %547 = trunc i64 %544 to i32
  %548 = and i32 %547, 255
  %549 = tail call i32 @llvm.ctpop.i32(i32 %548) #10
  %550 = trunc i32 %549 to i8
  %551 = and i8 %550, 1
  %552 = xor i8 %551, 1
  store i8 %552, i8* %21, align 1, !tbaa !2446
  %553 = xor i64 %544, %543
  %554 = lshr i64 %553, 4
  %555 = trunc i64 %554 to i8
  %556 = and i8 %555, 1
  store i8 %556, i8* %26, align 1, !tbaa !2447
  %557 = icmp eq i64 %544, 0
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %29, align 1, !tbaa !2448
  %559 = lshr i64 %544, 63
  %560 = trunc i64 %559 to i8
  store i8 %560, i8* %32, align 1, !tbaa !2449
  %561 = lshr i64 %543, 63
  %562 = xor i64 %559, %561
  %563 = add nuw nsw i64 %562, %561
  %564 = icmp eq i64 %563, 2
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %38, align 1, !tbaa !2450
  %566 = add i64 %534, 16
  store i64 %566, i64* %PC, align 8
  %567 = load i64, i64* %538, align 8
  store i64 %567, i64* %RDX, align 8, !tbaa !2428
  %568 = add i64 %535, -48
  %569 = add i64 %534, 20
  store i64 %569, i64* %PC, align 8
  %570 = inttoptr i64 %568 to i64*
  %571 = load i64, i64* %570, align 8
  store i64 %571, i64* %RSI, align 8, !tbaa !2428
  %572 = shl i64 %544, 3
  %573 = add i64 %572, %539
  %574 = add i64 %534, 24
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %573 to i64*
  %576 = load i64, i64* %575, align 8
  store i64 %576, i64* %RAX, align 8, !tbaa !2428
  %577 = shl i64 %571, 3
  %578 = add i64 %577, %567
  %579 = add i64 %534, 28
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i64*
  store i64 %576, i64* %580, align 8
  %581 = load i64, i64* %RBP, align 8
  %582 = add i64 %581, -40
  %583 = load i64, i64* %PC, align 8
  %584 = add i64 %583, 4
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %582 to i64*
  %586 = load i64, i64* %585, align 8
  %587 = add i64 %586, -1
  store i64 %587, i64* %RAX, align 8, !tbaa !2428
  %588 = icmp eq i64 %586, 0
  %589 = zext i1 %588 to i8
  store i8 %589, i8* %14, align 1, !tbaa !2432
  %590 = trunc i64 %587 to i32
  %591 = and i32 %590, 255
  %592 = tail call i32 @llvm.ctpop.i32(i32 %591) #10
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  %595 = xor i8 %594, 1
  store i8 %595, i8* %21, align 1, !tbaa !2446
  %596 = xor i64 %587, %586
  %597 = lshr i64 %596, 4
  %598 = trunc i64 %597 to i8
  %599 = and i8 %598, 1
  store i8 %599, i8* %26, align 1, !tbaa !2447
  %600 = icmp eq i64 %587, 0
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %29, align 1, !tbaa !2448
  %602 = lshr i64 %587, 63
  %603 = trunc i64 %602 to i8
  store i8 %603, i8* %32, align 1, !tbaa !2449
  %604 = lshr i64 %586, 63
  %605 = xor i64 %602, %604
  %606 = add nuw nsw i64 %605, %604
  %607 = icmp eq i64 %606, 2
  %608 = zext i1 %607 to i8
  store i8 %608, i8* %38, align 1, !tbaa !2450
  %609 = add i64 %581, -48
  %610 = add i64 %583, 12
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %609 to i64*
  store i64 %587, i64* %611, align 8
  %612 = load i64, i64* %RBP, align 8
  %613 = add i64 %612, -40
  %614 = load i64, i64* %PC, align 8
  %615 = add i64 %614, 4
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %613 to i64*
  %617 = load i64, i64* %616, align 8
  store i64 %617, i64* %RAX, align 8, !tbaa !2428
  %618 = add i64 %614, 8
  store i64 %618, i64* %PC, align 8
  %619 = load i64, i64* %616, align 8
  %620 = add i64 %619, %617
  store i64 %620, i64* %RAX, align 8, !tbaa !2428
  %621 = icmp ult i64 %620, %617
  %622 = icmp ult i64 %620, %619
  %623 = or i1 %621, %622
  %624 = zext i1 %623 to i8
  store i8 %624, i8* %14, align 1, !tbaa !2432
  %625 = trunc i64 %620 to i32
  %626 = and i32 %625, 255
  %627 = tail call i32 @llvm.ctpop.i32(i32 %626) #10
  %628 = trunc i32 %627 to i8
  %629 = and i8 %628, 1
  %630 = xor i8 %629, 1
  store i8 %630, i8* %21, align 1, !tbaa !2446
  %631 = xor i64 %619, %617
  %632 = xor i64 %631, %620
  %633 = lshr i64 %632, 4
  %634 = trunc i64 %633 to i8
  %635 = and i8 %634, 1
  store i8 %635, i8* %26, align 1, !tbaa !2447
  %636 = icmp eq i64 %620, 0
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %29, align 1, !tbaa !2448
  %638 = lshr i64 %620, 63
  %639 = trunc i64 %638 to i8
  store i8 %639, i8* %32, align 1, !tbaa !2449
  %640 = lshr i64 %617, 63
  %641 = lshr i64 %619, 63
  %642 = xor i64 %638, %640
  %643 = xor i64 %638, %641
  %644 = add nuw nsw i64 %642, %643
  %645 = icmp eq i64 %644, 2
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %38, align 1, !tbaa !2450
  %647 = add i64 %614, 12
  store i64 %647, i64* %PC, align 8
  store i64 %620, i64* %616, align 8
  %648 = load i64, i64* %PC, align 8
  %649 = add i64 %648, -136
  store i64 %649, i64* %PC, align 8, !tbaa !2428
  br label %block_403801

block_403844:                                     ; preds = %block_40380f
  %650 = add i64 %423, 17
  store i64 %650, i64* %PC, align 8, !tbaa !2428
  br label %block_403855

block_403922:                                     ; preds = %block_403912
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %651 = add i64 %252, -24
  %652 = add i64 %264, 11
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %651 to i64*
  %654 = load i64, i64* %653, align 8
  store i64 %654, i64* %RDX, align 8, !tbaa !2428
  %655 = add i64 %252, -40
  %656 = add i64 %264, 15
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %655 to i64*
  %658 = load i64, i64* %657, align 8
  store i64 %658, i64* %RSI, align 8, !tbaa !2428
  %659 = add i64 %264, 19
  store i64 %659, i64* %PC, align 8
  %660 = load i64, i64* %653, align 8
  store i64 %660, i64* %RDI, align 8, !tbaa !2428
  %661 = add i64 %252, -48
  %662 = add i64 %264, 23
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i64*
  %664 = load i64, i64* %663, align 8
  store i64 %664, i64* %R8, align 8, !tbaa !2428
  %665 = shl i64 %658, 3
  %666 = add i64 %665, %654
  %667 = add i64 %264, 27
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i64*
  %669 = load i64, i64* %668, align 8
  store i64 %669, i64* %RDX, align 8, !tbaa !2428
  %670 = shl i64 %664, 3
  %671 = add i64 %670, %660
  %672 = add i64 %264, 31
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %671 to i64*
  store i64 %669, i64* %673, align 8
  %674 = load i64, i64* %RBP, align 8
  %675 = add i64 %674, -40
  %676 = load i64, i64* %PC, align 8
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC, align 8
  %678 = inttoptr i64 %675 to i64*
  %679 = load i64, i64* %678, align 8
  store i64 %679, i64* %RDX, align 8, !tbaa !2428
  %680 = add i64 %674, -48
  %681 = add i64 %676, 8
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %680 to i64*
  store i64 %679, i64* %682, align 8
  %683 = load i64, i64* %RBP, align 8
  %684 = add i64 %683, -48
  %685 = load i64, i64* %PC, align 8
  %686 = add i64 %685, 4
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %684 to i64*
  %688 = load i64, i64* %687, align 8
  %689 = add i64 %688, -1
  %690 = icmp eq i64 %688, 0
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %14, align 1, !tbaa !2432
  %692 = trunc i64 %689 to i32
  %693 = and i32 %692, 255
  %694 = tail call i32 @llvm.ctpop.i32(i32 %693) #10
  %695 = trunc i32 %694 to i8
  %696 = and i8 %695, 1
  %697 = xor i8 %696, 1
  store i8 %697, i8* %21, align 1, !tbaa !2446
  %698 = xor i64 %689, %688
  %699 = lshr i64 %698, 4
  %700 = trunc i64 %699 to i8
  %701 = and i8 %700, 1
  store i8 %701, i8* %26, align 1, !tbaa !2447
  %702 = icmp eq i64 %689, 0
  %703 = zext i1 %702 to i8
  store i8 %703, i8* %29, align 1, !tbaa !2448
  %704 = lshr i64 %689, 63
  %705 = trunc i64 %704 to i8
  store i8 %705, i8* %32, align 1, !tbaa !2449
  %706 = lshr i64 %688, 63
  %707 = xor i64 %704, %706
  %708 = add nuw nsw i64 %707, %706
  %709 = icmp eq i64 %708, 2
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %38, align 1, !tbaa !2450
  store i64 %689, i64* %RAX, align 8, !tbaa !2428
  %711 = ashr i64 %689, 63
  store i64 %711, i64* %RDX, align 8, !tbaa !2428
  %712 = load i64, i64* %RCX, align 8
  %713 = add i64 %685, 16
  store i64 %713, i64* %PC, align 8
  %714 = sext i64 %712 to i128
  %715 = and i128 %714, -18446744073709551616
  %716 = zext i64 %711 to i128
  %717 = shl nuw i128 %716, 64
  %718 = zext i64 %689 to i128
  %719 = or i128 %717, %718
  %720 = zext i64 %712 to i128
  %721 = or i128 %715, %720
  %722 = sdiv i128 %719, %721
  %723 = trunc i128 %722 to i64
  %724 = and i128 %722, 18446744073709551615
  %725 = sext i64 %723 to i128
  %726 = and i128 %725, -18446744073709551616
  %727 = or i128 %726, %724
  %728 = icmp eq i128 %722, %727
  br i1 %728, label %731, label %729

; <label>:729:                                    ; preds = %block_403922
  %730 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %713, %struct.Memory* %MEMORY.1) #13
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %RAX, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:731:                                    ; preds = %block_403922
  %732 = srem i128 %719, %721
  %733 = trunc i128 %732 to i64
  store i64 %723, i64* %175, align 8, !tbaa !2428
  store i64 %733, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %731, %729
  %734 = phi i64 [ %.pre21, %729 ], [ %713, %731 ]
  %735 = phi i64 [ %.pre20, %729 ], [ %723, %731 ]
  %736 = phi i64 [ %.pre19, %729 ], [ %683, %731 ]
  %737 = phi %struct.Memory* [ %730, %729 ], [ %MEMORY.1, %731 ]
  %738 = add i64 %736, -40
  %739 = add i64 %734, 4
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %738 to i64*
  store i64 %735, i64* %740, align 8
  %741 = load i64, i64* %PC, align 8
  %742 = add i64 %741, -126
  store i64 %742, i64* %PC, align 8, !tbaa !2428
  br label %block_4038df

block_403801:                                     ; preds = %block_403855, %block_4037d0
  %743 = phi i64 [ %649, %block_403855 ], [ %.pre, %block_4037d0 ]
  %744 = load i64, i64* %RBP, align 8
  %745 = add i64 %744, -40
  %746 = add i64 %743, 4
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %745 to i64*
  %748 = load i64, i64* %747, align 8
  store i64 %748, i64* %RAX, align 8, !tbaa !2428
  %749 = add i64 %744, -16
  %750 = add i64 %743, 8
  store i64 %750, i64* %PC, align 8
  %751 = inttoptr i64 %749 to i64*
  %752 = load i64, i64* %751, align 8
  %753 = sub i64 %748, %752
  %754 = icmp ult i64 %748, %752
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %14, align 1, !tbaa !2432
  %756 = trunc i64 %753 to i32
  %757 = and i32 %756, 255
  %758 = tail call i32 @llvm.ctpop.i32(i32 %757) #10
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  store i8 %761, i8* %21, align 1, !tbaa !2446
  %762 = xor i64 %752, %748
  %763 = xor i64 %762, %753
  %764 = lshr i64 %763, 4
  %765 = trunc i64 %764 to i8
  %766 = and i8 %765, 1
  store i8 %766, i8* %26, align 1, !tbaa !2447
  %767 = icmp eq i64 %753, 0
  %768 = zext i1 %767 to i8
  store i8 %768, i8* %29, align 1, !tbaa !2448
  %769 = lshr i64 %753, 63
  %770 = trunc i64 %769 to i8
  store i8 %770, i8* %32, align 1, !tbaa !2449
  %771 = lshr i64 %748, 63
  %772 = lshr i64 %752, 63
  %773 = xor i64 %772, %771
  %774 = xor i64 %769, %771
  %775 = add nuw nsw i64 %774, %773
  %776 = icmp eq i64 %775, 2
  %777 = zext i1 %776 to i8
  store i8 %777, i8* %38, align 1, !tbaa !2450
  %778 = icmp ne i8 %770, 0
  %779 = xor i1 %778, %776
  %.v23 = select i1 %779, i64 14, i64 141
  %780 = add i64 %.v23, %743
  store i64 %780, i64* %PC, align 8, !tbaa !2428
  br i1 %779, label %block_40380f, label %block_40388e
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406500__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406500:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -16
  %12 = load i64, i64* %RDI, align 8
  %13 = add i64 %10, 7
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %12, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RSI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 5
  store i64 %24, i64* %PC, align 8
  %25 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %26 = load i64, i64* %25, align 1
  %27 = inttoptr i64 %22 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %34 = bitcast %union.VectorReg* %3 to double*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %36 = bitcast i64* %35 to double*
  %37 = bitcast i64* %RAX to double**
  %.pre = load i64, i64* %PC, align 8
  br label %block_406511

block_40651f:                                     ; preds = %block_406511
  %38 = add i64 %110, 9
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %79, align 8
  store i64 %39, i64* %RAX, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  store i64 %40, i64* %RCX, align 8, !tbaa !2428
  %41 = icmp ugt i64 %39, -9
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %28, align 1, !tbaa !2432
  %43 = trunc i64 %40 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #10
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  store i8 %48, i8* %29, align 1, !tbaa !2446
  %49 = xor i64 %40, %39
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  store i8 %52, i8* %30, align 1, !tbaa !2447
  %53 = icmp eq i64 %40, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %31, align 1, !tbaa !2448
  %55 = lshr i64 %40, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %32, align 1, !tbaa !2449
  %57 = lshr i64 %39, 63
  %58 = xor i64 %55, %57
  %59 = add nuw nsw i64 %58, %55
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %33, align 1, !tbaa !2450
  %62 = add i64 %110, 20
  store i64 %62, i64* %PC, align 8
  store i64 %40, i64* %79, align 8
  %63 = load double*, double** %37, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = load double, double* %34, align 1
  %67 = load double, double* %63, align 8
  %68 = fadd double %66, %67
  store double %68, double* %34, align 1, !tbaa !2451
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -24
  %71 = add i64 %64, 9
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %70 to double*
  store double %68, double* %72, align 8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, -43
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  br label %block_406511

block_406511:                                     ; preds = %block_40651f, %block_406500
  %75 = phi i64 [ %74, %block_40651f ], [ %.pre, %block_406500 ]
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -8
  %78 = add i64 %75, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %76, -16
  %82 = add i64 %75, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %80, %84
  %86 = icmp ult i64 %80, %84
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %28, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #10
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %29, align 1, !tbaa !2446
  %94 = xor i64 %84, %80
  %95 = xor i64 %94, %85
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %30, align 1, !tbaa !2447
  %99 = icmp eq i64 %85, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %31, align 1, !tbaa !2448
  %101 = lshr i64 %85, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %32, align 1, !tbaa !2449
  %103 = lshr i64 %80, 63
  %104 = lshr i64 %84, 63
  %105 = xor i64 %104, %103
  %106 = xor i64 %101, %103
  %107 = add nuw nsw i64 %106, %105
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %33, align 1, !tbaa !2450
  %.v = select i1 %99, i64 48, i64 14
  %110 = add i64 %.v, %75
  %111 = add i64 %76, -24
  %112 = add i64 %110, 5
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %25, align 1, !tbaa !2451
  store double 0.000000e+00, double* %36, align 1, !tbaa !2451
  br i1 %99, label %block_406541, label %block_40651f

block_406541:                                     ; preds = %block_406511
  %115 = add i64 %110, 6
  store i64 %115, i64* %PC, align 8
  %116 = load i64, i64* %6, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %6, align 8, !tbaa !2428
  %120 = add i64 %110, 7
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %117 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  %123 = add i64 %116, 16
  store i64 %123, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4066d0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4066d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_608dd8__init_array_type* @seg_608dd8__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_608dd8__init_array_type* @seg_608dd8__init_array to i64), i64 16), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2453
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #10
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2453
  store i8 0, i8* %45, align 1, !tbaa !2453
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2453
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2453
  store i8 0, i8* %48, align 1, !tbaa !2453
  %63 = add i64 %38, -24667
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400690__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #10
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %.v, %69
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_406726, label %block_406706

block_406726.loopexit:                            ; preds = %block_406710
  br label %block_406726

block_406726:                                     ; preds = %block_406726.loopexit, %block_4066d0
  %81 = phi i64 [ %80, %block_4066d0 ], [ %179, %block_406726.loopexit ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_4066d0 ], [ %149, %block_406726.loopexit ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #10
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_406706:                                     ; preds = %block_4066d0
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_406710

block_406710:                                     ; preds = %block_406710, %block_406706
  %134 = phi i64 [ 0, %block_406706 ], [ %152, %block_406710 ]
  %135 = phi i64 [ %133, %block_406706 ], [ %179, %block_406710 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_406706 ], [ %149, %block_406710 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %140, %141
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #10
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %154, %152
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2447
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %173, %153
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v2 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %.v2, %151
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_406726.loopexit, label %block_406710
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f40__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405f40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405f60__ZNK12ValueWrapperIdEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402300__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402300:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402328

block_4023a9:                                     ; preds = %block_402328
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402338:                                     ; preds = %block_402328
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 8352
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043f0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 14287
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405b40__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 8738
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_4045b0__Z13verify_sortedI14PointerWrapperIdEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402328

block_402328:                                     ; preds = %block_402338, %block_402300
  %255 = phi i64 [ %254, %block_402338 ], [ %.pre, %block_402300 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402338, label %block_4023a9
}

; Function Attrs: noinline
define %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4046d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 118
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_404760__ZppIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #10
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2446
  %94 = xor i64 %85, %84
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2447
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2448
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2449
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2450
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4055e0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4055e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #10
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2447
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2448
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2450
  store i64 %23, i64* %21, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -8
  %55 = add i64 %16, 18
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %16, 19
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %16, 20
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404ae0__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404ae0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 18
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -8
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  %58 = sub i64 %53, %57
  %59 = lshr i64 %58, 2
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = ashr i64 %58, 3
  store i64 %62, i64* %RSI, align 8, !tbaa !2428
  store i8 %61, i8* %12, align 1, !tbaa !2453
  %63 = trunc i64 %62 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #10
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %19, align 1, !tbaa !2453
  store i8 0, i8* %25, align 1, !tbaa !2453
  %69 = icmp eq i64 %62, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %28, align 1, !tbaa !2453
  %71 = lshr i64 %62, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %31, align 1, !tbaa !2453
  store i8 0, i8* %37, align 1, !tbaa !2453
  %73 = add i64 %48, -32
  %74 = add i64 %50, 19
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  store i64 %62, i64* %75, align 8
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = ashr i64 %81, 63
  store i64 %82, i64* %RDX, align 8, !tbaa !2428
  %83 = load i64, i64* %RCX, align 8
  %84 = add i64 %78, 9
  store i64 %84, i64* %PC, align 8
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = zext i64 %82 to i128
  %88 = shl nuw i128 %87, 64
  %89 = zext i64 %81 to i128
  %90 = or i128 %88, %89
  %91 = zext i64 %83 to i128
  %92 = or i128 %86, %91
  %93 = sdiv i128 %90, %92
  %94 = trunc i128 %93 to i64
  %95 = and i128 %93, 18446744073709551615
  %96 = sext i64 %94 to i128
  %97 = and i128 %96, -18446744073709551616
  %98 = or i128 %97, %95
  %99 = icmp eq i128 %93, %98
  br i1 %99, label %102, label %100

; <label>:100:                                    ; preds = %block_404ae0
  %101 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %84, %struct.Memory* %2) #13
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:102:                                    ; preds = %block_404ae0
  %103 = srem i128 %90, %92
  %104 = trunc i128 %103 to i64
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  store i64 %104, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %102, %100
  %105 = phi i64 [ %.pre7, %100 ], [ %76, %102 ]
  %106 = phi i64 [ %.pre6, %100 ], [ %84, %102 ]
  %107 = phi i64 [ %.pre, %100 ], [ %94, %102 ]
  %108 = phi %struct.Memory* [ %101, %100 ], [ %2, %102 ]
  %109 = add i64 %107, -1
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = icmp eq i64 %107, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %12, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #10
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %19, align 1, !tbaa !2446
  %118 = xor i64 %109, %107
  %119 = lshr i64 %118, 4
  %120 = trunc i64 %119 to i8
  %121 = and i8 %120, 1
  store i8 %121, i8* %25, align 1, !tbaa !2447
  %122 = icmp eq i64 %109, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %28, align 1, !tbaa !2448
  %124 = lshr i64 %109, 63
  %125 = trunc i64 %124 to i8
  store i8 %125, i8* %31, align 1, !tbaa !2449
  %126 = lshr i64 %107, 63
  %127 = xor i64 %124, %126
  %128 = add nuw nsw i64 %127, %126
  %129 = icmp eq i64 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %37, align 1, !tbaa !2450
  %131 = add i64 %105, -24
  %132 = add i64 %106, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  store i64 %109, i64* %133, align 8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %136 = bitcast i64* %135 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_404b1b

block_404b5f:                                     ; preds = %block_404b1b
  %137 = add i64 %282, -32
  %138 = add i64 %298, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = add i64 %140, -1
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = icmp eq i64 %140, 0
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %12, align 1, !tbaa !2432
  %144 = trunc i64 %141 to i32
  %145 = and i32 %144, 255
  %146 = tail call i32 @llvm.ctpop.i32(i32 %145) #10
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %19, align 1, !tbaa !2446
  %150 = xor i64 %141, %140
  %151 = lshr i64 %150, 4
  %152 = trunc i64 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %25, align 1, !tbaa !2447
  %154 = icmp eq i64 %141, 0
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %28, align 1, !tbaa !2448
  %156 = lshr i64 %141, 63
  %157 = trunc i64 %156 to i8
  store i8 %157, i8* %31, align 1, !tbaa !2449
  %158 = lshr i64 %140, 63
  %159 = xor i64 %156, %158
  %160 = add nuw nsw i64 %159, %158
  %161 = icmp eq i64 %160, 2
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %37, align 1, !tbaa !2450
  %163 = add i64 %298, 12
  store i64 %163, i64* %PC, align 8
  store i64 %141, i64* %285, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_404b6b

block_404b76:                                     ; preds = %block_404b6b
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %19, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %164 = add i64 %251, -8
  %165 = add i64 %280, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = add i64 %280, 12
  store i64 %168, i64* %PC, align 8
  %169 = load i64, i64* %254, align 8
  store i64 %169, i64* %RSI, align 8, !tbaa !2428
  %170 = shl i64 %169, 3
  %171 = add i64 %170, %167
  %172 = add i64 %280, 17
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to i64*
  %174 = load i64, i64* %173, align 8
  store i64 %174, i64* %134, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %175 = add i64 %251, -48
  %176 = add i64 %280, 22
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  store i64 %174, i64* %177, align 8
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %184 = add i64 %180, 8
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %134, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %187 = add i64 %180, 12
  store i64 %187, i64* %PC, align 8
  %188 = load i64, i64* %182, align 8
  store i64 %188, i64* %RCX, align 8, !tbaa !2428
  %189 = add i64 %178, -24
  %190 = add i64 %180, 16
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RSI, align 8, !tbaa !2428
  %193 = shl i64 %192, 3
  %194 = add i64 %193, %188
  %195 = add i64 %180, 21
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  store i64 %186, i64* %196, align 8
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -24
  %199 = load i64, i64* %PC, align 8
  %200 = add i64 %199, 4
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %198 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %RDI, align 8, !tbaa !2428
  %203 = add i64 %197, -8
  %204 = add i64 %199, 8
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RSI, align 8, !tbaa !2428
  %207 = add i64 %197, -48
  %208 = add i64 %199, 13
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %134, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %211 = add i64 %199, 255
  %212 = add i64 %199, 18
  %213 = load i64, i64* %RSP, align 8, !tbaa !2428
  %214 = add i64 %213, -8
  %215 = inttoptr i64 %214 to i64*
  store i64 %212, i64* %215, align 8
  store i64 %214, i64* %RSP, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  %216 = tail call %struct.Memory* @sub_404ca0__ZN9benchmark7sift_inIPddEEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %211, %struct.Memory* %108)
  %217 = load i64, i64* %RBP, align 8
  %218 = add i64 %217, -24
  %219 = load i64, i64* %PC, align 8
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = add i64 %222, -1
  store i64 %223, i64* %RAX, align 8, !tbaa !2428
  %224 = icmp ne i64 %222, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %12, align 1, !tbaa !2432
  %226 = trunc i64 %223 to i32
  %227 = and i32 %226, 255
  %228 = tail call i32 @llvm.ctpop.i32(i32 %227) #10
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  store i8 %231, i8* %19, align 1, !tbaa !2446
  %232 = xor i64 %222, 16
  %233 = xor i64 %232, %223
  %234 = lshr i64 %233, 4
  %235 = trunc i64 %234 to i8
  %236 = and i8 %235, 1
  store i8 %236, i8* %25, align 1, !tbaa !2447
  %237 = icmp eq i64 %223, 0
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %28, align 1, !tbaa !2448
  %239 = lshr i64 %223, 63
  %240 = trunc i64 %239 to i8
  store i8 %240, i8* %31, align 1, !tbaa !2449
  %241 = lshr i64 %222, 63
  %242 = xor i64 %239, %241
  %243 = xor i64 %239, 1
  %244 = add nuw nsw i64 %242, %243
  %245 = icmp eq i64 %244, 2
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %37, align 1, !tbaa !2450
  %247 = add i64 %219, 12
  store i64 %247, i64* %PC, align 8
  store i64 %223, i64* %221, align 8
  %248 = load i64, i64* %PC, align 8
  %249 = add i64 %248, -84
  store i64 %249, i64* %PC, align 8, !tbaa !2428
  br label %block_404b6b

block_404b6b:                                     ; preds = %block_404b76, %block_404b5f
  %250 = phi i64 [ %249, %block_404b76 ], [ %.pre9, %block_404b5f ]
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -24
  %253 = add i64 %250, 5
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = add i64 %255, -1
  %257 = icmp eq i64 %255, 0
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %12, align 1, !tbaa !2432
  %259 = trunc i64 %256 to i32
  %260 = and i32 %259, 255
  %261 = tail call i32 @llvm.ctpop.i32(i32 %260) #10
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  store i8 %264, i8* %19, align 1, !tbaa !2446
  %265 = xor i64 %256, %255
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %25, align 1, !tbaa !2447
  %269 = icmp eq i64 %256, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %28, align 1, !tbaa !2448
  %271 = lshr i64 %256, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %31, align 1, !tbaa !2449
  %273 = lshr i64 %255, 63
  %274 = xor i64 %271, %273
  %275 = add nuw nsw i64 %274, %273
  %276 = icmp eq i64 %275, 2
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %37, align 1, !tbaa !2450
  %278 = icmp ne i8 %272, 0
  %279 = xor i1 %278, %276
  %.v10 = select i1 %279, i64 89, i64 11
  %280 = add i64 %.v10, %250
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  br i1 %279, label %block_404bc4, label %block_404b76

block_404b1b:                                     ; preds = %block_404b26, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %281 = phi i64 [ %369, %block_404b26 ], [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %282 = load i64, i64* %RBP, align 8
  %283 = add i64 %282, -24
  %284 = add i64 %281, 5
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %287 = trunc i64 %286 to i32
  %288 = and i32 %287, 255
  %289 = tail call i32 @llvm.ctpop.i32(i32 %288) #10
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  store i8 %292, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %293 = icmp eq i64 %286, 0
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %28, align 1, !tbaa !2448
  %295 = lshr i64 %286, 63
  %296 = trunc i64 %295 to i8
  store i8 %296, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %297 = icmp ne i8 %296, 0
  %.v = select i1 %297, i64 63, i64 6
  %298 = add i64 %.v, %284
  store i64 %298, i64* %PC, align 8, !tbaa !2428
  br i1 %297, label %block_404b5f, label %block_404b26

block_404b26:                                     ; preds = %block_404b1b
  %299 = add i64 %282, -8
  %300 = add i64 %298, 4
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %299 to i64*
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = add i64 %298, 8
  store i64 %303, i64* %PC, align 8
  %304 = load i64, i64* %285, align 8
  store i64 %304, i64* %RCX, align 8, !tbaa !2428
  %305 = shl i64 %304, 3
  %306 = add i64 %305, %302
  %307 = add i64 %298, 13
  store i64 %307, i64* %PC, align 8
  %308 = inttoptr i64 %306 to i64*
  %309 = load i64, i64* %308, align 8
  store i64 %309, i64* %134, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %310 = add i64 %282, -40
  %311 = add i64 %298, 18
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i64*
  store i64 %309, i64* %312, align 8
  %313 = load i64, i64* %RBP, align 8
  %314 = add i64 %313, -32
  %315 = load i64, i64* %PC, align 8
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %314 to i64*
  %318 = load i64, i64* %317, align 8
  store i64 %318, i64* %RDI, align 8, !tbaa !2428
  %319 = add i64 %313, -8
  %320 = add i64 %315, 8
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RSI, align 8, !tbaa !2428
  %323 = add i64 %313, -24
  %324 = add i64 %315, 12
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %RDX, align 8, !tbaa !2428
  %327 = add i64 %313, -40
  %328 = add i64 %315, 17
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %134, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %331 = add i64 %315, 360
  %332 = add i64 %315, 22
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_404ca0__ZN9benchmark7sift_inIPddEEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %108)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -24
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341, align 8
  %343 = add i64 %342, -1
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = icmp ne i64 %342, 0
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %12, align 1, !tbaa !2432
  %346 = trunc i64 %343 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #10
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %19, align 1, !tbaa !2446
  %352 = xor i64 %342, 16
  %353 = xor i64 %352, %343
  %354 = lshr i64 %353, 4
  %355 = trunc i64 %354 to i8
  %356 = and i8 %355, 1
  store i8 %356, i8* %25, align 1, !tbaa !2447
  %357 = icmp eq i64 %343, 0
  %358 = zext i1 %357 to i8
  store i8 %358, i8* %28, align 1, !tbaa !2448
  %359 = lshr i64 %343, 63
  %360 = trunc i64 %359 to i8
  store i8 %360, i8* %31, align 1, !tbaa !2449
  %361 = lshr i64 %342, 63
  %362 = xor i64 %359, %361
  %363 = xor i64 %359, 1
  %364 = add nuw nsw i64 %362, %363
  %365 = icmp eq i64 %364, 2
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %37, align 1, !tbaa !2450
  %367 = add i64 %339, 12
  store i64 %367, i64* %PC, align 8
  store i64 %343, i64* %341, align 8
  %368 = load i64, i64* %PC, align 8
  %369 = add i64 %368, -63
  store i64 %369, i64* %PC, align 8, !tbaa !2428
  br label %block_404b1b

block_404bc4:                                     ; preds = %block_404b6b
  %370 = load i64, i64* %RSP, align 8
  %371 = add i64 %370, 48
  store i64 %371, i64* %RSP, align 8, !tbaa !2428
  %372 = icmp ugt i64 %370, -49
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %12, align 1, !tbaa !2432
  %374 = trunc i64 %371 to i32
  %375 = and i32 %374, 255
  %376 = tail call i32 @llvm.ctpop.i32(i32 %375) #10
  %377 = trunc i32 %376 to i8
  %378 = and i8 %377, 1
  %379 = xor i8 %378, 1
  store i8 %379, i8* %19, align 1, !tbaa !2446
  %380 = xor i64 %370, 16
  %381 = xor i64 %380, %371
  %382 = lshr i64 %381, 4
  %383 = trunc i64 %382 to i8
  %384 = and i8 %383, 1
  store i8 %384, i8* %25, align 1, !tbaa !2447
  %385 = icmp eq i64 %371, 0
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %28, align 1, !tbaa !2448
  %387 = lshr i64 %371, 63
  %388 = trunc i64 %387 to i8
  store i8 %388, i8* %31, align 1, !tbaa !2449
  %389 = lshr i64 %370, 63
  %390 = xor i64 %387, %389
  %391 = add nuw nsw i64 %390, %387
  %392 = icmp eq i64 %391, 2
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %37, align 1, !tbaa !2450
  %394 = add i64 %280, 5
  store i64 %394, i64* %PC, align 8
  %395 = add i64 %370, 56
  %396 = inttoptr i64 %371 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RBP, align 8, !tbaa !2428
  store i64 %395, i64* %RSP, align 8, !tbaa !2428
  %398 = add i64 %280, 6
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %395 to i64*
  %400 = load i64, i64* %399, align 8
  store i64 %400, i64* %PC, align 8, !tbaa !2428
  %401 = add i64 %370, 64
  store i64 %401, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %108
}

; Function Attrs: noinline
define %struct.Memory* @sub_401270_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401270:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -584
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = icmp ult i64 %10, 576
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #10
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !2446
  %24 = xor i64 %10, %13
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %10, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = add i64 %9, -40
  store i64 %41, i64* %RAX, align 8, !tbaa !2428
  %42 = add i64 %9, -48
  store i64 %42, i64* %RCX, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %44 = bitcast %union.VectorReg* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %44, align 1, !tbaa !2456
  %45 = add i64 %9, -12
  %46 = add i64 %12, 28
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i32*
  store i32 0, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i32, i32* %EDI, align 4
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  %56 = load i64, i64* %RSI, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -24
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -40
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC, align 8
  %71 = load i64, i64* %64, align 1
  %72 = inttoptr i64 %68 to i64*
  store i64 %71, i64* %72, align 8
  %73 = load i64, i64* %RAX, align 8
  %74 = load i64, i64* %PC, align 8
  store i64 %73, i64* %RDI, align 8, !tbaa !2428
  %75 = load i64, i64* %RCX, align 8
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  %76 = add i64 %74, 2770
  %77 = add i64 %74, 11
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call %struct.Memory* @sub_401d70__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %76, %struct.Memory* %2)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -48
  %84 = load i64, i64* %PC, align 8
  store i64 %83, i64* %RDI, align 8, !tbaa !2428
  %85 = add i64 %82, -56
  store i64 %85, i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %44, align 1, !tbaa !2456
  %86 = add i64 %84, 16
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  store i64 0, i64* %87, align 8
  %88 = load i64, i64* %PC, align 8
  %89 = add i64 %88, 2775
  %90 = add i64 %88, 5
  %91 = load i64, i64* %RSP, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93, align 8
  store i64 %92, i64* %RSP, align 8, !tbaa !2428
  store i64 %89, i64* %PC, align 8, !tbaa !2428
  %94 = tail call %struct.Memory* @sub_401d90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %89, %struct.Memory* %81)
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %96 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = add i32 %100, -1
  %102 = icmp eq i32 %100, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %16, align 1, !tbaa !2432
  %104 = and i32 %101, 255
  %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #10
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  store i8 %108, i8* %23, align 1, !tbaa !2446
  %109 = xor i32 %101, %100
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  store i8 %112, i8* %28, align 1, !tbaa !2447
  %113 = icmp eq i32 %101, 0
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %31, align 1, !tbaa !2448
  %115 = lshr i32 %101, 31
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %34, align 1, !tbaa !2449
  %117 = lshr i32 %100, 31
  %118 = xor i32 %115, %117
  %119 = add nuw nsw i32 %118, %117
  %120 = icmp eq i32 %119, 2
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %40, align 1, !tbaa !2450
  %122 = icmp ne i8 %116, 0
  %123 = xor i1 %122, %120
  %124 = or i1 %113, %123
  %.v = select i1 %124, i64 30, i64 10
  %125 = add i64 %.v, %97
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  br i1 %124, label %block_4012dc, label %block_4012c8

block_4012dc:                                     ; preds = %block_4012c8, %block_401270
  %126 = phi i64 [ %125, %block_401270 ], [ %1308, %block_4012c8 ]
  %127 = phi i64 [ %95, %block_401270 ], [ %.pre, %block_4012c8 ]
  %MEMORY.0 = phi %struct.Memory* [ %94, %block_401270 ], [ %1305, %block_4012c8 ]
  %128 = add i64 %127, -8
  %129 = add i64 %126, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = add i32 %131, -2
  %133 = icmp ult i32 %131, 2
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %16, align 1, !tbaa !2432
  %135 = and i32 %132, 255
  %136 = tail call i32 @llvm.ctpop.i32(i32 %135) #10
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  store i8 %139, i8* %23, align 1, !tbaa !2446
  %140 = xor i32 %132, %131
  %141 = lshr i32 %140, 4
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* %28, align 1, !tbaa !2447
  %144 = icmp eq i32 %132, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %31, align 1, !tbaa !2448
  %146 = lshr i32 %132, 31
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %34, align 1, !tbaa !2449
  %148 = lshr i32 %131, 31
  %149 = xor i32 %146, %148
  %150 = add nuw nsw i32 %149, %148
  %151 = icmp eq i32 %150, 2
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %40, align 1, !tbaa !2450
  %153 = icmp ne i8 %147, 0
  %154 = xor i1 %153, %151
  %155 = or i1 %144, %154
  %.v5 = select i1 %155, i64 32, i64 10
  %156 = add i64 %.v5, %126
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  br i1 %155, label %block_4012dc.block_4012fc_crit_edge, label %block_4012e6

block_4012dc.block_4012fc_crit_edge:              ; preds = %block_4012dc
  %.pre2 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
  br label %block_4012fc

block_4012fc:                                     ; preds = %block_4012e6, %block_4012dc.block_4012fc_crit_edge
  %157 = phi double [ %.pre2, %block_4012dc.block_4012fc_crit_edge ], [ %1326, %block_4012e6 ]
  %158 = phi i64 [ %156, %block_4012dc.block_4012fc_crit_edge ], [ %1324, %block_4012e6 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4012dc.block_4012fc_crit_edge ], [ %1322, %block_4012e6 ]
  %159 = tail call double @llvm.trunc.f64(double %157) #10
  %160 = tail call double @llvm.fabs.f64(double %159) #10
  %161 = fcmp ogt double %160, 0x41DFFFFFFFC00000
  %162 = fptosi double %159 to i32
  %163 = select i1 %161, i32 -2147483648, i32 %162
  %164 = add i32 %163, 123
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp ugt i32 %163, -124
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %16, align 1, !tbaa !2432
  %168 = and i32 %164, 255
  %169 = tail call i32 @llvm.ctpop.i32(i32 %168) #10
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  store i8 %172, i8* %23, align 1, !tbaa !2446
  %173 = xor i32 %163, 16
  %174 = xor i32 %173, %164
  %175 = lshr i32 %174, 4
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  store i8 %177, i8* %28, align 1, !tbaa !2447
  %178 = icmp eq i32 %164, 0
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %31, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %34, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %40, align 1, !tbaa !2450
  store i64 %165, i64* %RDI, align 8, !tbaa !2428
  %187 = add i64 %158, -3036
  %188 = add i64 %158, 19
  %189 = load i64, i64* %RSP, align 8, !tbaa !2428
  %190 = add i64 %189, -8
  %191 = inttoptr i64 %190 to i64*
  store i64 %188, i64* %191, align 8
  store i64 %190, i64* %RSP, align 8, !tbaa !2428
  store i64 %187, i64* %PC, align 8, !tbaa !2428
  %192 = tail call fastcc %struct.Memory* @ext_400720_srand(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %193 = load i64, i64* %PC, align 8
  %194 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %194, i64* %RDI, align 8, !tbaa !2428
  %195 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %195, i64* %RSI, align 8, !tbaa !2428
  %196 = load i64, i64* bitcast (%init_value_type* @init_value to i64*), align 8
  store i64 %196, i64* %64, align 1, !tbaa !2451
  %197 = bitcast i64* %43 to double*
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %198 = add i64 %193, 2737
  %199 = add i64 %193, 30
  %200 = load i64, i64* %RSP, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %199, i64* %202, align 8
  store i64 %201, i64* %RSP, align 8, !tbaa !2428
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  %203 = tail call %struct.Memory* @sub_401dc0__ZN9benchmark4fillIPddEEvT_S2_T0__renamed_(%struct.State* nonnull %0, i64 %198, %struct.Memory* %192)
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -64
  %206 = load i64, i64* %PC, align 8
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  store i64 ptrtoint (%init_value_type* @init_value to i64), i64* %RSI, align 8, !tbaa !2428
  %207 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %207, i64* %RCX, align 8, !tbaa !2428
  %208 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %208, i64* %RDX, align 8, !tbaa !2428
  %209 = add i64 %204, -544
  %210 = add i64 %206, 37
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %209 to i64*
  store i64 %208, i64* %211, align 8
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -552
  %214 = load i64, i64* %RCX, align 8
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, 7
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217, align 8
  %218 = load i64, i64* %PC, align 8
  %219 = add i64 %218, 2583
  %220 = add i64 %218, 5
  %221 = load i64, i64* %RSP, align 8, !tbaa !2428
  %222 = add i64 %221, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 %220, i64* %223, align 8
  store i64 %222, i64* %RSP, align 8, !tbaa !2428
  store i64 %219, i64* %PC, align 8, !tbaa !2428
  %224 = tail call %struct.Memory* @sub_401d70__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %219, %struct.Memory* %203)
  %225 = load i64, i64* %RBP, align 8
  %226 = add i64 %225, -64
  %227 = load i64, i64* %PC, align 8
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %231 = add i64 %225, -552
  %232 = add i64 %227, 12
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i64*
  %234 = load i64, i64* %233, align 8
  store i64 %234, i64* %RDI, align 8, !tbaa !2428
  %235 = add i64 %225, -544
  %236 = add i64 %227, 19
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i64*
  %238 = load i64, i64* %237, align 8
  store i64 %238, i64* %RSI, align 8, !tbaa !2428
  %239 = add i64 %227, 2722
  %240 = add i64 %227, 24
  %241 = load i64, i64* %RSP, align 8, !tbaa !2428
  %242 = add i64 %241, -8
  %243 = inttoptr i64 %242 to i64*
  store i64 %240, i64* %243, align 8
  store i64 %242, i64* %RSP, align 8, !tbaa !2428
  store i64 %239, i64* %PC, align 8, !tbaa !2428
  %244 = tail call %struct.Memory* @sub_401e00__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__renamed_(%struct.State* nonnull %0, i64 %239, %struct.Memory* %224)
  %245 = load i64, i64* %RBP, align 8
  %246 = add i64 %245, -72
  %247 = load i64, i64* %PC, align 8
  store i64 %246, i64* %RDI, align 8, !tbaa !2428
  store i64 ptrtoint (%init_value_type* @init_value to i64), i64* %RSI, align 8, !tbaa !2428
  %248 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %248, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %249, i64* %RDX, align 8, !tbaa !2428
  %250 = add i64 %245, -560
  %251 = add i64 %247, 37
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  store i64 %249, i64* %252, align 8
  %253 = load i64, i64* %RBP, align 8
  %254 = add i64 %253, -568
  %255 = load i64, i64* %RCX, align 8
  %256 = load i64, i64* %PC, align 8
  %257 = add i64 %256, 7
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %254 to i64*
  store i64 %255, i64* %258, align 8
  %259 = load i64, i64* %PC, align 8
  %260 = add i64 %259, 2542
  %261 = add i64 %259, 5
  %262 = load i64, i64* %RSP, align 8, !tbaa !2428
  %263 = add i64 %262, -8
  %264 = inttoptr i64 %263 to i64*
  store i64 %261, i64* %264, align 8
  store i64 %263, i64* %RSP, align 8, !tbaa !2428
  store i64 %260, i64* %PC, align 8, !tbaa !2428
  %265 = tail call %struct.Memory* @sub_401d90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %260, %struct.Memory* %244)
  %266 = load i64, i64* %RBP, align 8
  %267 = add i64 %266, -72
  %268 = load i64, i64* %PC, align 8
  %269 = add i64 %268, 5
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270, align 8
  store i64 %271, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %272 = add i64 %266, -568
  %273 = add i64 %268, 12
  store i64 %273, i64* %PC, align 8
  %274 = inttoptr i64 %272 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %RDI, align 8, !tbaa !2428
  %276 = add i64 %266, -560
  %277 = add i64 %268, 19
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i64*
  %279 = load i64, i64* %278, align 8
  store i64 %279, i64* %RSI, align 8, !tbaa !2428
  %280 = add i64 %268, 2713
  %281 = add i64 %268, 24
  %282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call %struct.Memory* @sub_401e40__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__renamed_(%struct.State* nonnull %0, i64 %280, %struct.Memory* %265)
  %286 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 353), i64* %RDX, align 8, !tbaa !2428
  %287 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %287, i64* %RDI, align 8, !tbaa !2428
  %288 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %288, i64* %RSI, align 8, !tbaa !2428
  %289 = load i64, i64* %RBP, align 8
  %290 = add i64 %289, -24
  %291 = add i64 %286, 31
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292, align 8
  store i64 %293, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %294 = add i64 %286, 2753
  %295 = add i64 %286, 36
  %296 = load i64, i64* %RSP, align 8, !tbaa !2428
  %297 = add i64 %296, -8
  %298 = inttoptr i64 %297 to i64*
  store i64 %295, i64* %298, align 8
  store i64 %297, i64* %RSP, align 8, !tbaa !2428
  store i64 %294, i64* %PC, align 8, !tbaa !2428
  %299 = tail call %struct.Memory* @sub_401e80__Z15test_accumulateIPddEvT_S1_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %294, %struct.Memory* %285)
  %300 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 383), i64* %RDX, align 8, !tbaa !2428
  %301 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -80
  %304 = add i64 %300, 22
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %303 to i64*
  store i64 %301, i64* %305, align 8
  %306 = load i64, i64* %PC, align 8
  %307 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %307, i64* %RCX, align 8, !tbaa !2428
  %308 = load i64, i64* %RBP, align 8
  %309 = add i64 %308, -88
  %310 = add i64 %306, 12
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %309 to i64*
  store i64 %307, i64* %311, align 8
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -24
  %314 = load i64, i64* %PC, align 8
  %315 = add i64 %314, 5
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %313 to i64*
  %317 = load i64, i64* %316, align 8
  store i64 %317, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %318 = add i64 %312, -80
  %319 = add i64 %314, 9
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RDI, align 8, !tbaa !2428
  %322 = add i64 %312, -88
  %323 = add i64 %314, 13
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i64*
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %RSI, align 8, !tbaa !2428
  %326 = add i64 %314, 2779
  %327 = add i64 %314, 18
  %328 = load i64, i64* %RSP, align 8, !tbaa !2428
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %327, i64* %330, align 8
  store i64 %329, i64* %RSP, align 8, !tbaa !2428
  store i64 %326, i64* %PC, align 8, !tbaa !2428
  %331 = tail call %struct.Memory* @sub_401ee0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %326, %struct.Memory* %299)
  %332 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 419), i64* %RDX, align 8, !tbaa !2428
  %333 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %333, i64* %RDI, align 8, !tbaa !2428
  %334 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %334, i64* %RSI, align 8, !tbaa !2428
  %335 = load i64, i64* %RBP, align 8
  %336 = add i64 %335, -32
  %337 = add i64 %332, 30
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RCX, align 8, !tbaa !2428
  %340 = add i64 %335, -96
  %341 = add i64 %332, 34
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i64*
  store i64 %339, i64* %342, align 8
  %343 = load i64, i64* %RBP, align 8
  %344 = add i64 %343, -96
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %344 to i64*
  %348 = load i64, i64* %347, align 8
  store i64 %348, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %349 = add i64 %345, 2839
  %350 = add i64 %345, 10
  %351 = load i64, i64* %RSP, align 8, !tbaa !2428
  %352 = add i64 %351, -8
  %353 = inttoptr i64 %352 to i64*
  store i64 %350, i64* %353, align 8
  store i64 %352, i64* %RSP, align 8, !tbaa !2428
  store i64 %349, i64* %PC, align 8, !tbaa !2428
  %354 = tail call %struct.Memory* @sub_401f50__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %349, %struct.Memory* %331)
  %355 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 461), i64* %RDX, align 8, !tbaa !2428
  %356 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -104
  %359 = add i64 %355, 22
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i64*
  store i64 %356, i64* %360, align 8
  %361 = load i64, i64* %PC, align 8
  %362 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %362, i64* %RCX, align 8, !tbaa !2428
  %363 = load i64, i64* %RBP, align 8
  %364 = add i64 %363, -112
  %365 = add i64 %361, 12
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i64*
  store i64 %362, i64* %366, align 8
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -32
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = add i64 %367, -120
  %374 = add i64 %369, 8
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  store i64 %372, i64* %375, align 8
  %376 = load i64, i64* %RBP, align 8
  %377 = add i64 %376, -104
  %378 = load i64, i64* %PC, align 8
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380, align 8
  store i64 %381, i64* %RDI, align 8, !tbaa !2428
  %382 = add i64 %376, -112
  %383 = add i64 %378, 8
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i64*
  %385 = load i64, i64* %384, align 8
  store i64 %385, i64* %RSI, align 8, !tbaa !2428
  %386 = add i64 %376, -120
  %387 = add i64 %378, 13
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %386 to i64*
  %389 = load i64, i64* %388, align 8
  store i64 %389, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %390 = add i64 %378, 2915
  %391 = add i64 %378, 18
  %392 = load i64, i64* %RSP, align 8, !tbaa !2428
  %393 = add i64 %392, -8
  %394 = inttoptr i64 %393 to i64*
  store i64 %391, i64* %394, align 8
  store i64 %393, i64* %RSP, align 8, !tbaa !2428
  store i64 %390, i64* %PC, align 8, !tbaa !2428
  %395 = tail call %struct.Memory* @sub_401fd0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %390, %struct.Memory* %354)
  %396 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 509), i64* %RDX, align 8, !tbaa !2428
  %397 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %397, i64* %RDI, align 8, !tbaa !2428
  %398 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %398, i64* %RSI, align 8, !tbaa !2428
  %399 = load i64, i64* %RBP, align 8
  %400 = add i64 %399, -48
  %401 = add i64 %396, 30
  store i64 %401, i64* %PC, align 8
  %402 = inttoptr i64 %400 to i64*
  %403 = load i64, i64* %402, align 8
  store i64 %403, i64* %RCX, align 8, !tbaa !2428
  %404 = add i64 %399, -128
  %405 = add i64 %396, 34
  store i64 %405, i64* %PC, align 8
  %406 = inttoptr i64 %404 to i64*
  store i64 %403, i64* %406, align 8
  %407 = load i64, i64* %RBP, align 8
  %408 = add i64 %407, -128
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, 5
  store i64 %410, i64* %PC, align 8
  %411 = inttoptr i64 %408 to i64*
  %412 = load i64, i64* %411, align 8
  store i64 %412, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %413 = add i64 %409, 3007
  %414 = add i64 %409, 10
  %415 = load i64, i64* %RSP, align 8, !tbaa !2428
  %416 = add i64 %415, -8
  %417 = inttoptr i64 %416 to i64*
  store i64 %414, i64* %417, align 8
  store i64 %416, i64* %RSP, align 8, !tbaa !2428
  store i64 %413, i64* %PC, align 8, !tbaa !2428
  %418 = tail call %struct.Memory* @sub_402060__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %413, %struct.Memory* %395)
  %419 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 553), i64* %RDX, align 8, !tbaa !2428
  %420 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %421 = load i64, i64* %RBP, align 8
  %422 = add i64 %421, -136
  %423 = add i64 %419, 25
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %424, align 8
  %425 = load i64, i64* %PC, align 8
  %426 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %426, i64* %RCX, align 8, !tbaa !2428
  %427 = load i64, i64* %RBP, align 8
  %428 = add i64 %427, -144
  %429 = add i64 %425, 15
  store i64 %429, i64* %PC, align 8
  %430 = inttoptr i64 %428 to i64*
  store i64 %426, i64* %430, align 8
  %431 = load i64, i64* %RBP, align 8
  %432 = add i64 %431, -48
  %433 = load i64, i64* %PC, align 8
  %434 = add i64 %433, 4
  store i64 %434, i64* %PC, align 8
  %435 = inttoptr i64 %432 to i64*
  %436 = load i64, i64* %435, align 8
  store i64 %436, i64* %RCX, align 8, !tbaa !2428
  %437 = add i64 %431, -152
  %438 = add i64 %433, 11
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %437 to i64*
  store i64 %436, i64* %439, align 8
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -136
  %442 = load i64, i64* %PC, align 8
  %443 = add i64 %442, 7
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %441 to i64*
  %445 = load i64, i64* %444, align 8
  store i64 %445, i64* %RDI, align 8, !tbaa !2428
  %446 = add i64 %440, -144
  %447 = add i64 %442, 14
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %446 to i64*
  %449 = load i64, i64* %448, align 8
  store i64 %449, i64* %RSI, align 8, !tbaa !2428
  %450 = add i64 %440, -152
  %451 = add i64 %442, 22
  store i64 %451, i64* %PC, align 8
  %452 = inttoptr i64 %450 to i64*
  %453 = load i64, i64* %452, align 8
  store i64 %453, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %454 = add i64 %442, 3074
  %455 = add i64 %442, 27
  %456 = load i64, i64* %RSP, align 8, !tbaa !2428
  %457 = add i64 %456, -8
  %458 = inttoptr i64 %457 to i64*
  store i64 %455, i64* %458, align 8
  store i64 %457, i64* %RSP, align 8, !tbaa !2428
  store i64 %454, i64* %PC, align 8, !tbaa !2428
  %459 = tail call %struct.Memory* @sub_4020e0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %454, %struct.Memory* %418)
  %460 = load i64, i64* %PC, align 8
  %461 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %R8, align 8, !tbaa !2428
  %463 = load i64, i64* %RBP, align 8
  %464 = add i64 %463, -572
  %465 = add i64 %460, 19
  store i64 %465, i64* %PC, align 8
  %466 = inttoptr i64 %464 to i32*
  store i32 2000, i32* %466, align 4
  %467 = load i32, i32* %R8D, align 4
  %468 = zext i32 %467 to i64
  %469 = load i64, i64* %PC, align 8
  store i64 %468, i64* %RAX, align 8, !tbaa !2428
  %470 = sext i32 %467 to i64
  %471 = lshr i64 %470, 32
  store i64 %471, i64* %RDX, align 8, !tbaa !2428
  %472 = load i64, i64* %RBP, align 8
  %473 = add i64 %472, -572
  %474 = add i64 %469, 11
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %473 to i32*
  %476 = load i32, i32* %475, align 4
  %477 = zext i32 %476 to i64
  store i64 %477, i64* %R8, align 8, !tbaa !2428
  %478 = add i64 %469, 14
  store i64 %478, i64* %PC, align 8
  %479 = sext i32 %476 to i64
  %480 = shl nuw i64 %471, 32
  %481 = or i64 %480, %468
  %482 = sdiv i64 %481, %479
  %483 = shl i64 %482, 32
  %484 = ashr exact i64 %483, 32
  %485 = icmp eq i64 %482, %484
  br i1 %485, label %488, label %486

; <label>:486:                                    ; preds = %block_4012fc
  %487 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %478, %struct.Memory* %459) #13
  %.pre3 = load i32, i32* %EAX, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:488:                                    ; preds = %block_4012fc
  %489 = srem i64 %481, %479
  %490 = and i64 %482, 4294967295
  store i64 %490, i64* %RAX, align 8, !tbaa !2428
  %491 = and i64 %489, 4294967295
  store i64 %491, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %16, align 1, !tbaa !2432
  store i8 0, i8* %23, align 1, !tbaa !2446
  store i8 0, i8* %28, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2448
  store i8 0, i8* %34, align 1, !tbaa !2449
  store i8 0, i8* %40, align 1, !tbaa !2450
  %492 = trunc i64 %482 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %488, %486
  %493 = phi i64 [ %.pre4, %486 ], [ %478, %488 ]
  %494 = phi i32 [ %.pre3, %486 ], [ %492, %488 ]
  %495 = phi %struct.Memory* [ %487, %486 ], [ %459, %488 ]
  store i32 %494, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %496 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %496, i64* %RDI, align 8, !tbaa !2428
  %497 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %497, i64* %RSI, align 8, !tbaa !2428
  %498 = add i64 %493, 3158
  %499 = add i64 %493, 28
  %500 = load i64, i64* %RSP, align 8, !tbaa !2428
  %501 = add i64 %500, -8
  %502 = inttoptr i64 %501 to i64*
  store i64 %499, i64* %502, align 8
  store i64 %501, i64* %RSP, align 8, !tbaa !2428
  store i64 %498, i64* %PC, align 8, !tbaa !2428
  %503 = tail call %struct.Memory* @sub_402170__ZN9benchmark11fill_randomIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %498, %struct.Memory* %495)
  %504 = load i64, i64* %PC, align 8
  %505 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %505, i64* %RDI, align 8, !tbaa !2428
  %506 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %506, i64* %RSI, align 8, !tbaa !2428
  %507 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %507, i64* %RCX, align 8, !tbaa !2428
  store i64 %507, i64* %RDX, align 8, !tbaa !2428
  %508 = add i64 %504, 3210
  %509 = add i64 %504, 32
  %510 = load i64, i64* %RSP, align 8, !tbaa !2428
  %511 = add i64 %510, -8
  %512 = inttoptr i64 %511 to i64*
  store i64 %509, i64* %512, align 8
  store i64 %511, i64* %RSP, align 8, !tbaa !2428
  store i64 %508, i64* %PC, align 8, !tbaa !2428
  %513 = tail call %struct.Memory* @sub_4021c0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__renamed_(%struct.State* nonnull %0, i64 %508, %struct.Memory* %503)
  %514 = load i64, i64* %PC, align 8
  %515 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %515, i64* %RDI, align 8, !tbaa !2428
  %516 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %516, i64* %RSI, align 8, !tbaa !2428
  %517 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %517, i64* %RDX, align 8, !tbaa !2428
  %518 = add i64 %514, 3274
  %519 = add i64 %514, 29
  %520 = load i64, i64* %RSP, align 8, !tbaa !2428
  %521 = add i64 %520, -8
  %522 = inttoptr i64 %521 to i64*
  store i64 %519, i64* %522, align 8
  store i64 %521, i64* %RSP, align 8, !tbaa !2428
  store i64 %518, i64* %PC, align 8, !tbaa !2428
  %523 = tail call %struct.Memory* @sub_402220__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__renamed_(%struct.State* nonnull %0, i64 %518, %struct.Memory* %513)
  %524 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 338), i64* %R8, align 8, !tbaa !2428
  %525 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %525, i64* %RDI, align 8, !tbaa !2428
  %526 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %526, i64* %RSI, align 8, !tbaa !2428
  %527 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %527, i64* %RDX, align 8, !tbaa !2428
  %528 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %528, i64* %RCX, align 8, !tbaa !2428
  %529 = load i64, i64* %RBP, align 8
  %530 = add i64 %529, -24
  %531 = add i64 %524, 47
  store i64 %531, i64* %PC, align 8
  %532 = inttoptr i64 %530 to i64*
  %533 = load i64, i64* %532, align 8
  store i64 %533, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %534 = add i64 %524, 3341
  %535 = add i64 %524, 52
  %536 = load i64, i64* %RSP, align 8, !tbaa !2428
  %537 = add i64 %536, -8
  %538 = inttoptr i64 %537 to i64*
  store i64 %535, i64* %538, align 8
  store i64 %537, i64* %RSP, align 8, !tbaa !2428
  store i64 %534, i64* %PC, align 8, !tbaa !2428
  %539 = tail call %struct.Memory* @sub_402280__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %534, %struct.Memory* %523)
  %540 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 368), i64* %R8, align 8, !tbaa !2428
  %541 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -160
  %544 = add i64 %540, 25
  store i64 %544, i64* %PC, align 8
  %545 = inttoptr i64 %543 to i64*
  store i64 %541, i64* %545, align 8
  %546 = load i64, i64* %PC, align 8
  %547 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %548 = load i64, i64* %RBP, align 8
  %549 = add i64 %548, -168
  %550 = add i64 %546, 15
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i64*
  store i64 %547, i64* %551, align 8
  %552 = load i64, i64* %PC, align 8
  %553 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %554 = load i64, i64* %RBP, align 8
  %555 = add i64 %554, -176
  %556 = add i64 %552, 15
  store i64 %556, i64* %PC, align 8
  %557 = inttoptr i64 %555 to i64*
  store i64 %553, i64* %557, align 8
  %558 = load i64, i64* %PC, align 8
  %559 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %559, i64* %RCX, align 8, !tbaa !2428
  %560 = load i64, i64* %RBP, align 8
  %561 = add i64 %560, -184
  %562 = add i64 %558, 15
  store i64 %562, i64* %PC, align 8
  %563 = inttoptr i64 %561 to i64*
  store i64 %559, i64* %563, align 8
  %564 = load i64, i64* %RBP, align 8
  %565 = add i64 %564, -24
  %566 = load i64, i64* %PC, align 8
  %567 = add i64 %566, 5
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %565 to i64*
  %569 = load i64, i64* %568, align 8
  store i64 %569, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %570 = add i64 %564, -160
  %571 = add i64 %566, 12
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RDI, align 8, !tbaa !2428
  %574 = add i64 %564, -168
  %575 = add i64 %566, 19
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i64*
  %577 = load i64, i64* %576, align 8
  store i64 %577, i64* %RSI, align 8, !tbaa !2428
  %578 = add i64 %564, -176
  %579 = add i64 %566, 26
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i64*
  %581 = load i64, i64* %580, align 8
  store i64 %581, i64* %RDX, align 8, !tbaa !2428
  %582 = add i64 %564, -184
  %583 = add i64 %566, 33
  store i64 %583, i64* %PC, align 8
  %584 = inttoptr i64 %582 to i64*
  %585 = load i64, i64* %584, align 8
  store i64 %585, i64* %RCX, align 8, !tbaa !2428
  %586 = add i64 %566, 3347
  %587 = add i64 %566, 38
  %588 = load i64, i64* %RSP, align 8, !tbaa !2428
  %589 = add i64 %588, -8
  %590 = inttoptr i64 %589 to i64*
  store i64 %587, i64* %590, align 8
  store i64 %589, i64* %RSP, align 8, !tbaa !2428
  store i64 %586, i64* %PC, align 8, !tbaa !2428
  %591 = tail call %struct.Memory* @sub_402300__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %586, %struct.Memory* %539)
  %592 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 404), i64* %R8, align 8, !tbaa !2428
  %593 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %593, i64* %RDI, align 8, !tbaa !2428
  %594 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %594, i64* %RSI, align 8, !tbaa !2428
  %595 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %595, i64* %RDX, align 8, !tbaa !2428
  %596 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %596, i64* %RCX, align 8, !tbaa !2428
  %597 = load i64, i64* %RBP, align 8
  %598 = add i64 %597, -32
  %599 = add i64 %592, 46
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %598 to i64*
  %601 = load i64, i64* %600, align 8
  store i64 %601, i64* %R9, align 8, !tbaa !2428
  %602 = add i64 %597, -192
  %603 = add i64 %592, 53
  store i64 %603, i64* %PC, align 8
  %604 = inttoptr i64 %602 to i64*
  store i64 %601, i64* %604, align 8
  %605 = load i64, i64* %RBP, align 8
  %606 = add i64 %605, -192
  %607 = load i64, i64* %PC, align 8
  %608 = add i64 %607, 8
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %606 to i64*
  %610 = load i64, i64* %609, align 8
  store i64 %610, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %611 = add i64 %607, 3432
  %612 = add i64 %607, 13
  %613 = load i64, i64* %RSP, align 8, !tbaa !2428
  %614 = add i64 %613, -8
  %615 = inttoptr i64 %614 to i64*
  store i64 %612, i64* %615, align 8
  store i64 %614, i64* %RSP, align 8, !tbaa !2428
  store i64 %611, i64* %PC, align 8, !tbaa !2428
  %616 = tail call %struct.Memory* @sub_4023b0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %611, %struct.Memory* %591)
  %617 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 446), i64* %R8, align 8, !tbaa !2428
  %618 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %619 = load i64, i64* %RBP, align 8
  %620 = add i64 %619, -200
  %621 = add i64 %617, 25
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %620 to i64*
  store i64 %618, i64* %622, align 8
  %623 = load i64, i64* %PC, align 8
  %624 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %625 = load i64, i64* %RBP, align 8
  %626 = add i64 %625, -208
  %627 = add i64 %623, 15
  store i64 %627, i64* %PC, align 8
  %628 = inttoptr i64 %626 to i64*
  store i64 %624, i64* %628, align 8
  %629 = load i64, i64* %PC, align 8
  %630 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %631 = load i64, i64* %RBP, align 8
  %632 = add i64 %631, -216
  %633 = add i64 %629, 15
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %632 to i64*
  store i64 %630, i64* %634, align 8
  %635 = load i64, i64* %PC, align 8
  %636 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %636, i64* %RCX, align 8, !tbaa !2428
  %637 = load i64, i64* %RBP, align 8
  %638 = add i64 %637, -224
  %639 = add i64 %635, 15
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %638 to i64*
  store i64 %636, i64* %640, align 8
  %641 = load i64, i64* %RBP, align 8
  %642 = add i64 %641, -32
  %643 = load i64, i64* %PC, align 8
  %644 = add i64 %643, 4
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %642 to i64*
  %646 = load i64, i64* %645, align 8
  store i64 %646, i64* %RCX, align 8, !tbaa !2428
  %647 = add i64 %641, -232
  %648 = add i64 %643, 11
  store i64 %648, i64* %PC, align 8
  %649 = inttoptr i64 %647 to i64*
  store i64 %646, i64* %649, align 8
  %650 = load i64, i64* %RBP, align 8
  %651 = add i64 %650, -200
  %652 = load i64, i64* %PC, align 8
  %653 = add i64 %652, 7
  store i64 %653, i64* %PC, align 8
  %654 = inttoptr i64 %651 to i64*
  %655 = load i64, i64* %654, align 8
  store i64 %655, i64* %RDI, align 8, !tbaa !2428
  %656 = add i64 %650, -208
  %657 = add i64 %652, 14
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %656 to i64*
  %659 = load i64, i64* %658, align 8
  store i64 %659, i64* %RSI, align 8, !tbaa !2428
  %660 = add i64 %650, -216
  %661 = add i64 %652, 21
  store i64 %661, i64* %PC, align 8
  %662 = inttoptr i64 %660 to i64*
  %663 = load i64, i64* %662, align 8
  store i64 %663, i64* %RDX, align 8, !tbaa !2428
  %664 = add i64 %650, -224
  %665 = add i64 %652, 28
  store i64 %665, i64* %PC, align 8
  %666 = inttoptr i64 %664 to i64*
  %667 = load i64, i64* %666, align 8
  store i64 %667, i64* %RCX, align 8, !tbaa !2428
  %668 = add i64 %650, -232
  %669 = add i64 %652, 36
  store i64 %669, i64* %PC, align 8
  %670 = inttoptr i64 %668 to i64*
  %671 = load i64, i64* %670, align 8
  store i64 %671, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %672 = add i64 %652, 3466
  %673 = add i64 %652, 41
  %674 = load i64, i64* %RSP, align 8, !tbaa !2428
  %675 = add i64 %674, -8
  %676 = inttoptr i64 %675 to i64*
  store i64 %673, i64* %676, align 8
  store i64 %675, i64* %RSP, align 8, !tbaa !2428
  store i64 %672, i64* %PC, align 8, !tbaa !2428
  %677 = tail call %struct.Memory* @sub_402430__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %672, %struct.Memory* %616)
  %678 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 494), i64* %R8, align 8, !tbaa !2428
  %679 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %679, i64* %RDI, align 8, !tbaa !2428
  %680 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %680, i64* %RSI, align 8, !tbaa !2428
  %681 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %681, i64* %RDX, align 8, !tbaa !2428
  %682 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %682, i64* %RCX, align 8, !tbaa !2428
  %683 = load i64, i64* %RBP, align 8
  %684 = add i64 %683, -48
  %685 = add i64 %678, 46
  store i64 %685, i64* %PC, align 8
  %686 = inttoptr i64 %684 to i64*
  %687 = load i64, i64* %686, align 8
  store i64 %687, i64* %R9, align 8, !tbaa !2428
  %688 = add i64 %683, -240
  %689 = add i64 %678, 53
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %688 to i64*
  store i64 %687, i64* %690, align 8
  %691 = load i64, i64* %RBP, align 8
  %692 = add i64 %691, -240
  %693 = load i64, i64* %PC, align 8
  %694 = add i64 %693, 8
  store i64 %694, i64* %PC, align 8
  %695 = inttoptr i64 %692 to i64*
  %696 = load i64, i64* %695, align 8
  store i64 %696, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %697 = add i64 %693, 3548
  %698 = add i64 %693, 13
  %699 = load i64, i64* %RSP, align 8, !tbaa !2428
  %700 = add i64 %699, -8
  %701 = inttoptr i64 %700 to i64*
  store i64 %698, i64* %701, align 8
  store i64 %700, i64* %RSP, align 8, !tbaa !2428
  store i64 %697, i64* %PC, align 8, !tbaa !2428
  %702 = tail call %struct.Memory* @sub_4024e0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %697, %struct.Memory* %677)
  %703 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 538), i64* %R8, align 8, !tbaa !2428
  %704 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %705 = load i64, i64* %RBP, align 8
  %706 = add i64 %705, -248
  %707 = add i64 %703, 25
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to i64*
  store i64 %704, i64* %708, align 8
  %709 = load i64, i64* %PC, align 8
  %710 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %711 = load i64, i64* %RBP, align 8
  %712 = add i64 %711, -256
  %713 = add i64 %709, 15
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %712 to i64*
  store i64 %710, i64* %714, align 8
  %715 = load i64, i64* %PC, align 8
  %716 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %717 = load i64, i64* %RBP, align 8
  %718 = add i64 %717, -264
  %719 = add i64 %715, 15
  store i64 %719, i64* %PC, align 8
  %720 = inttoptr i64 %718 to i64*
  store i64 %716, i64* %720, align 8
  %721 = load i64, i64* %PC, align 8
  %722 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %722, i64* %RCX, align 8, !tbaa !2428
  %723 = load i64, i64* %RBP, align 8
  %724 = add i64 %723, -272
  %725 = add i64 %721, 15
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to i64*
  store i64 %722, i64* %726, align 8
  %727 = load i64, i64* %RBP, align 8
  %728 = add i64 %727, -48
  %729 = load i64, i64* %PC, align 8
  %730 = add i64 %729, 4
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %728 to i64*
  %732 = load i64, i64* %731, align 8
  store i64 %732, i64* %RCX, align 8, !tbaa !2428
  %733 = add i64 %727, -280
  %734 = add i64 %729, 11
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %733 to i64*
  store i64 %732, i64* %735, align 8
  %736 = load i64, i64* %RBP, align 8
  %737 = add i64 %736, -248
  %738 = load i64, i64* %PC, align 8
  %739 = add i64 %738, 7
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740, align 8
  store i64 %741, i64* %RDI, align 8, !tbaa !2428
  %742 = add i64 %736, -256
  %743 = add i64 %738, 14
  store i64 %743, i64* %PC, align 8
  %744 = inttoptr i64 %742 to i64*
  %745 = load i64, i64* %744, align 8
  store i64 %745, i64* %RSI, align 8, !tbaa !2428
  %746 = add i64 %736, -264
  %747 = add i64 %738, 21
  store i64 %747, i64* %PC, align 8
  %748 = inttoptr i64 %746 to i64*
  %749 = load i64, i64* %748, align 8
  store i64 %749, i64* %RDX, align 8, !tbaa !2428
  %750 = add i64 %736, -272
  %751 = add i64 %738, 28
  store i64 %751, i64* %PC, align 8
  %752 = inttoptr i64 %750 to i64*
  %753 = load i64, i64* %752, align 8
  store i64 %753, i64* %RCX, align 8, !tbaa !2428
  %754 = add i64 %736, -280
  %755 = add i64 %738, 36
  store i64 %755, i64* %PC, align 8
  %756 = inttoptr i64 %754 to i64*
  %757 = load i64, i64* %756, align 8
  store i64 %757, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %758 = add i64 %738, 3582
  %759 = add i64 %738, 41
  %760 = load i64, i64* %RSP, align 8, !tbaa !2428
  %761 = add i64 %760, -8
  %762 = inttoptr i64 %761 to i64*
  store i64 %759, i64* %762, align 8
  store i64 %761, i64* %RSP, align 8, !tbaa !2428
  store i64 %758, i64* %PC, align 8, !tbaa !2428
  %763 = tail call %struct.Memory* @sub_402560__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %758, %struct.Memory* %702)
  %764 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 588), i64* %R8, align 8, !tbaa !2428
  %765 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %766 = shl i32 %765, 3
  %767 = zext i32 %766 to i64
  store i64 %767, i64* %RAX, align 8, !tbaa !2428
  %768 = lshr i32 %765, 29
  %769 = trunc i32 %768 to i8
  %770 = and i8 %769, 1
  store i8 %770, i8* %16, align 1, !tbaa !2453
  %771 = and i32 %766, 248
  %772 = tail call i32 @llvm.ctpop.i32(i32 %771) #10
  %773 = trunc i32 %772 to i8
  %774 = and i8 %773, 1
  %775 = xor i8 %774, 1
  store i8 %775, i8* %23, align 1, !tbaa !2453
  store i8 0, i8* %28, align 1, !tbaa !2453
  %776 = icmp eq i32 %766, 0
  %777 = zext i1 %776 to i8
  store i8 %777, i8* %31, align 1, !tbaa !2453
  %778 = lshr i32 %765, 28
  %779 = trunc i32 %778 to i8
  %780 = and i8 %779, 1
  store i8 %780, i8* %34, align 1, !tbaa !2453
  store i8 0, i8* %40, align 1, !tbaa !2453
  store i32 %766, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %781 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %781, i64* %RDI, align 8, !tbaa !2428
  %782 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %782, i64* %RSI, align 8, !tbaa !2428
  %783 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %783, i64* %RDX, align 8, !tbaa !2428
  %784 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %784, i64* %RCX, align 8, !tbaa !2428
  %785 = load i64, i64* %RBP, align 8
  %786 = add i64 %785, -24
  %787 = add i64 %764, 64
  store i64 %787, i64* %PC, align 8
  %788 = inttoptr i64 %786 to i64*
  %789 = load i64, i64* %788, align 8
  store i64 %789, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %790 = add i64 %764, 3717
  %791 = add i64 %764, 69
  %792 = load i64, i64* %RSP, align 8, !tbaa !2428
  %793 = add i64 %792, -8
  %794 = inttoptr i64 %793 to i64*
  store i64 %791, i64* %794, align 8
  store i64 %793, i64* %RSP, align 8, !tbaa !2428
  store i64 %790, i64* %PC, align 8, !tbaa !2428
  %795 = tail call %struct.Memory* @sub_402610__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %790, %struct.Memory* %763)
  %796 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 613), i64* %R8, align 8, !tbaa !2428
  %797 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %798 = load i64, i64* %RBP, align 8
  %799 = add i64 %798, -288
  %800 = add i64 %796, 25
  store i64 %800, i64* %PC, align 8
  %801 = inttoptr i64 %799 to i64*
  store i64 %797, i64* %801, align 8
  %802 = load i64, i64* %PC, align 8
  %803 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %804 = load i64, i64* %RBP, align 8
  %805 = add i64 %804, -296
  %806 = add i64 %802, 15
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %805 to i64*
  store i64 %803, i64* %807, align 8
  %808 = load i64, i64* %PC, align 8
  %809 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %810 = load i64, i64* %RBP, align 8
  %811 = add i64 %810, -304
  %812 = add i64 %808, 15
  store i64 %812, i64* %PC, align 8
  %813 = inttoptr i64 %811 to i64*
  store i64 %809, i64* %813, align 8
  %814 = load i64, i64* %PC, align 8
  %815 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %815, i64* %RCX, align 8, !tbaa !2428
  %816 = load i64, i64* %RBP, align 8
  %817 = add i64 %816, -312
  %818 = add i64 %814, 15
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %817 to i64*
  store i64 %815, i64* %819, align 8
  %820 = load i64, i64* %RBP, align 8
  %821 = add i64 %820, -24
  %822 = load i64, i64* %PC, align 8
  %823 = add i64 %822, 5
  store i64 %823, i64* %PC, align 8
  %824 = inttoptr i64 %821 to i64*
  %825 = load i64, i64* %824, align 8
  store i64 %825, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %826 = add i64 %820, -288
  %827 = add i64 %822, 12
  store i64 %827, i64* %PC, align 8
  %828 = inttoptr i64 %826 to i64*
  %829 = load i64, i64* %828, align 8
  store i64 %829, i64* %RDI, align 8, !tbaa !2428
  %830 = add i64 %820, -296
  %831 = add i64 %822, 19
  store i64 %831, i64* %PC, align 8
  %832 = inttoptr i64 %830 to i64*
  %833 = load i64, i64* %832, align 8
  store i64 %833, i64* %RSI, align 8, !tbaa !2428
  %834 = add i64 %820, -304
  %835 = add i64 %822, 26
  store i64 %835, i64* %PC, align 8
  %836 = inttoptr i64 %834 to i64*
  %837 = load i64, i64* %836, align 8
  store i64 %837, i64* %RDX, align 8, !tbaa !2428
  %838 = add i64 %820, -312
  %839 = add i64 %822, 33
  store i64 %839, i64* %PC, align 8
  %840 = inttoptr i64 %838 to i64*
  %841 = load i64, i64* %840, align 8
  store i64 %841, i64* %RCX, align 8, !tbaa !2428
  %842 = add i64 %822, 3706
  %843 = add i64 %822, 38
  %844 = load i64, i64* %RSP, align 8, !tbaa !2428
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %843, i64* %846, align 8
  store i64 %845, i64* %RSP, align 8, !tbaa !2428
  store i64 %842, i64* %PC, align 8, !tbaa !2428
  %847 = tail call %struct.Memory* @sub_402690__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %842, %struct.Memory* %795)
  %848 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 644), i64* %R8, align 8, !tbaa !2428
  %849 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %849, i64* %RDI, align 8, !tbaa !2428
  %850 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %850, i64* %RSI, align 8, !tbaa !2428
  %851 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %851, i64* %RDX, align 8, !tbaa !2428
  %852 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = load i64, i64* %RBP, align 8
  %854 = add i64 %853, -32
  %855 = add i64 %848, 46
  store i64 %855, i64* %PC, align 8
  %856 = inttoptr i64 %854 to i64*
  %857 = load i64, i64* %856, align 8
  store i64 %857, i64* %R9, align 8, !tbaa !2428
  %858 = add i64 %853, -320
  %859 = add i64 %848, 53
  store i64 %859, i64* %PC, align 8
  %860 = inttoptr i64 %858 to i64*
  store i64 %857, i64* %860, align 8
  %861 = load i64, i64* %RBP, align 8
  %862 = add i64 %861, -320
  %863 = load i64, i64* %PC, align 8
  %864 = add i64 %863, 8
  store i64 %864, i64* %PC, align 8
  %865 = inttoptr i64 %862 to i64*
  %866 = load i64, i64* %865, align 8
  store i64 %866, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %867 = add i64 %863, 3791
  %868 = add i64 %863, 13
  %869 = load i64, i64* %RSP, align 8, !tbaa !2428
  %870 = add i64 %869, -8
  %871 = inttoptr i64 %870 to i64*
  store i64 %868, i64* %871, align 8
  store i64 %870, i64* %RSP, align 8, !tbaa !2428
  store i64 %867, i64* %PC, align 8, !tbaa !2428
  %872 = tail call %struct.Memory* @sub_402740__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %867, %struct.Memory* %847)
  %873 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 681), i64* %R8, align 8, !tbaa !2428
  %874 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -328
  %877 = add i64 %873, 25
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  store i64 %874, i64* %878, align 8
  %879 = load i64, i64* %PC, align 8
  %880 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %881 = load i64, i64* %RBP, align 8
  %882 = add i64 %881, -336
  %883 = add i64 %879, 15
  store i64 %883, i64* %PC, align 8
  %884 = inttoptr i64 %882 to i64*
  store i64 %880, i64* %884, align 8
  %885 = load i64, i64* %PC, align 8
  %886 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %887 = load i64, i64* %RBP, align 8
  %888 = add i64 %887, -344
  %889 = add i64 %885, 15
  store i64 %889, i64* %PC, align 8
  %890 = inttoptr i64 %888 to i64*
  store i64 %886, i64* %890, align 8
  %891 = load i64, i64* %PC, align 8
  %892 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %892, i64* %RCX, align 8, !tbaa !2428
  %893 = load i64, i64* %RBP, align 8
  %894 = add i64 %893, -352
  %895 = add i64 %891, 15
  store i64 %895, i64* %PC, align 8
  %896 = inttoptr i64 %894 to i64*
  store i64 %892, i64* %896, align 8
  %897 = load i64, i64* %RBP, align 8
  %898 = add i64 %897, -32
  %899 = load i64, i64* %PC, align 8
  %900 = add i64 %899, 4
  store i64 %900, i64* %PC, align 8
  %901 = inttoptr i64 %898 to i64*
  %902 = load i64, i64* %901, align 8
  store i64 %902, i64* %RCX, align 8, !tbaa !2428
  %903 = add i64 %897, -360
  %904 = add i64 %899, 11
  store i64 %904, i64* %PC, align 8
  %905 = inttoptr i64 %903 to i64*
  store i64 %902, i64* %905, align 8
  %906 = load i64, i64* %RBP, align 8
  %907 = add i64 %906, -328
  %908 = load i64, i64* %PC, align 8
  %909 = add i64 %908, 7
  store i64 %909, i64* %PC, align 8
  %910 = inttoptr i64 %907 to i64*
  %911 = load i64, i64* %910, align 8
  store i64 %911, i64* %RDI, align 8, !tbaa !2428
  %912 = add i64 %906, -336
  %913 = add i64 %908, 14
  store i64 %913, i64* %PC, align 8
  %914 = inttoptr i64 %912 to i64*
  %915 = load i64, i64* %914, align 8
  store i64 %915, i64* %RSI, align 8, !tbaa !2428
  %916 = add i64 %906, -344
  %917 = add i64 %908, 21
  store i64 %917, i64* %PC, align 8
  %918 = inttoptr i64 %916 to i64*
  %919 = load i64, i64* %918, align 8
  store i64 %919, i64* %RDX, align 8, !tbaa !2428
  %920 = add i64 %906, -352
  %921 = add i64 %908, 28
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to i64*
  %923 = load i64, i64* %922, align 8
  store i64 %923, i64* %RCX, align 8, !tbaa !2428
  %924 = add i64 %906, -360
  %925 = add i64 %908, 36
  store i64 %925, i64* %PC, align 8
  %926 = inttoptr i64 %924 to i64*
  %927 = load i64, i64* %926, align 8
  store i64 %927, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %928 = add i64 %908, 3825
  %929 = add i64 %908, 41
  %930 = load i64, i64* %RSP, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %929, i64* %932, align 8
  store i64 %931, i64* %RSP, align 8, !tbaa !2428
  store i64 %928, i64* %PC, align 8, !tbaa !2428
  %933 = tail call %struct.Memory* @sub_4027c0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %928, %struct.Memory* %872)
  %934 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 724), i64* %R8, align 8, !tbaa !2428
  %935 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %935, i64* %RDI, align 8, !tbaa !2428
  %936 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %936, i64* %RSI, align 8, !tbaa !2428
  %937 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %937, i64* %RDX, align 8, !tbaa !2428
  %938 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %938, i64* %RCX, align 8, !tbaa !2428
  %939 = load i64, i64* %RBP, align 8
  %940 = add i64 %939, -48
  %941 = add i64 %934, 46
  store i64 %941, i64* %PC, align 8
  %942 = inttoptr i64 %940 to i64*
  %943 = load i64, i64* %942, align 8
  store i64 %943, i64* %R9, align 8, !tbaa !2428
  %944 = add i64 %939, -368
  %945 = add i64 %934, 53
  store i64 %945, i64* %PC, align 8
  %946 = inttoptr i64 %944 to i64*
  store i64 %943, i64* %946, align 8
  %947 = load i64, i64* %RBP, align 8
  %948 = add i64 %947, -368
  %949 = load i64, i64* %PC, align 8
  %950 = add i64 %949, 8
  store i64 %950, i64* %PC, align 8
  %951 = inttoptr i64 %948 to i64*
  %952 = load i64, i64* %951, align 8
  store i64 %952, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %953 = add i64 %949, 3907
  %954 = add i64 %949, 13
  %955 = load i64, i64* %RSP, align 8, !tbaa !2428
  %956 = add i64 %955, -8
  %957 = inttoptr i64 %956 to i64*
  store i64 %954, i64* %957, align 8
  store i64 %956, i64* %RSP, align 8, !tbaa !2428
  store i64 %953, i64* %PC, align 8, !tbaa !2428
  %958 = tail call %struct.Memory* @sub_402870__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %953, %struct.Memory* %933)
  %959 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 763), i64* %R8, align 8, !tbaa !2428
  %960 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %961 = load i64, i64* %RBP, align 8
  %962 = add i64 %961, -376
  %963 = add i64 %959, 25
  store i64 %963, i64* %PC, align 8
  %964 = inttoptr i64 %962 to i64*
  store i64 %960, i64* %964, align 8
  %965 = load i64, i64* %PC, align 8
  %966 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %967 = load i64, i64* %RBP, align 8
  %968 = add i64 %967, -384
  %969 = add i64 %965, 15
  store i64 %969, i64* %PC, align 8
  %970 = inttoptr i64 %968 to i64*
  store i64 %966, i64* %970, align 8
  %971 = load i64, i64* %PC, align 8
  %972 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %973 = load i64, i64* %RBP, align 8
  %974 = add i64 %973, -392
  %975 = add i64 %971, 15
  store i64 %975, i64* %PC, align 8
  %976 = inttoptr i64 %974 to i64*
  store i64 %972, i64* %976, align 8
  %977 = load i64, i64* %PC, align 8
  %978 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %978, i64* %RCX, align 8, !tbaa !2428
  %979 = load i64, i64* %RBP, align 8
  %980 = add i64 %979, -400
  %981 = add i64 %977, 15
  store i64 %981, i64* %PC, align 8
  %982 = inttoptr i64 %980 to i64*
  store i64 %978, i64* %982, align 8
  %983 = load i64, i64* %RBP, align 8
  %984 = add i64 %983, -48
  %985 = load i64, i64* %PC, align 8
  %986 = add i64 %985, 4
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %984 to i64*
  %988 = load i64, i64* %987, align 8
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %989 = add i64 %983, -408
  %990 = add i64 %985, 11
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  store i64 %988, i64* %991, align 8
  %992 = load i64, i64* %RBP, align 8
  %993 = add i64 %992, -376
  %994 = load i64, i64* %PC, align 8
  %995 = add i64 %994, 7
  store i64 %995, i64* %PC, align 8
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996, align 8
  store i64 %997, i64* %RDI, align 8, !tbaa !2428
  %998 = add i64 %992, -384
  %999 = add i64 %994, 14
  store i64 %999, i64* %PC, align 8
  %1000 = inttoptr i64 %998 to i64*
  %1001 = load i64, i64* %1000, align 8
  store i64 %1001, i64* %RSI, align 8, !tbaa !2428
  %1002 = add i64 %992, -392
  %1003 = add i64 %994, 21
  store i64 %1003, i64* %PC, align 8
  %1004 = inttoptr i64 %1002 to i64*
  %1005 = load i64, i64* %1004, align 8
  store i64 %1005, i64* %RDX, align 8, !tbaa !2428
  %1006 = add i64 %992, -400
  %1007 = add i64 %994, 28
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1006 to i64*
  %1009 = load i64, i64* %1008, align 8
  store i64 %1009, i64* %RCX, align 8, !tbaa !2428
  %1010 = add i64 %992, -408
  %1011 = add i64 %994, 36
  store i64 %1011, i64* %PC, align 8
  %1012 = inttoptr i64 %1010 to i64*
  %1013 = load i64, i64* %1012, align 8
  store i64 %1013, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %1014 = add i64 %994, 3941
  %1015 = add i64 %994, 41
  %1016 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1017 = add i64 %1016, -8
  %1018 = inttoptr i64 %1017 to i64*
  store i64 %1015, i64* %1018, align 8
  store i64 %1017, i64* %RSP, align 8, !tbaa !2428
  store i64 %1014, i64* %PC, align 8, !tbaa !2428
  %1019 = tail call %struct.Memory* @sub_4028f0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1014, %struct.Memory* %958)
  %1020 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 808), i64* %R8, align 8, !tbaa !2428
  %1021 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %1021, i64* %RDI, align 8, !tbaa !2428
  %1022 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %1022, i64* %RSI, align 8, !tbaa !2428
  %1023 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %1023, i64* %RDX, align 8, !tbaa !2428
  %1024 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %1024, i64* %RCX, align 8, !tbaa !2428
  %1025 = load i64, i64* %RBP, align 8
  %1026 = add i64 %1025, -24
  %1027 = add i64 %1020, 47
  store i64 %1027, i64* %PC, align 8
  %1028 = inttoptr i64 %1026 to i64*
  %1029 = load i64, i64* %1028, align 8
  store i64 %1029, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %1030 = add i64 %1020, 4076
  %1031 = add i64 %1020, 52
  %1032 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1033 = add i64 %1032, -8
  %1034 = inttoptr i64 %1033 to i64*
  store i64 %1031, i64* %1034, align 8
  store i64 %1033, i64* %RSP, align 8, !tbaa !2428
  store i64 %1030, i64* %PC, align 8, !tbaa !2428
  %1035 = tail call %struct.Memory* @sub_4029a0__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1030, %struct.Memory* %1019)
  %1036 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 833), i64* %R8, align 8, !tbaa !2428
  %1037 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %1038 = load i64, i64* %RBP, align 8
  %1039 = add i64 %1038, -416
  %1040 = add i64 %1036, 25
  store i64 %1040, i64* %PC, align 8
  %1041 = inttoptr i64 %1039 to i64*
  store i64 %1037, i64* %1041, align 8
  %1042 = load i64, i64* %PC, align 8
  %1043 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %1044 = load i64, i64* %RBP, align 8
  %1045 = add i64 %1044, -424
  %1046 = add i64 %1042, 15
  store i64 %1046, i64* %PC, align 8
  %1047 = inttoptr i64 %1045 to i64*
  store i64 %1043, i64* %1047, align 8
  %1048 = load i64, i64* %PC, align 8
  %1049 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %1050 = load i64, i64* %RBP, align 8
  %1051 = add i64 %1050, -432
  %1052 = add i64 %1048, 15
  store i64 %1052, i64* %PC, align 8
  %1053 = inttoptr i64 %1051 to i64*
  store i64 %1049, i64* %1053, align 8
  %1054 = load i64, i64* %PC, align 8
  %1055 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %1055, i64* %RCX, align 8, !tbaa !2428
  %1056 = load i64, i64* %RBP, align 8
  %1057 = add i64 %1056, -440
  %1058 = add i64 %1054, 15
  store i64 %1058, i64* %PC, align 8
  %1059 = inttoptr i64 %1057 to i64*
  store i64 %1055, i64* %1059, align 8
  %1060 = load i64, i64* %RBP, align 8
  %1061 = add i64 %1060, -24
  %1062 = load i64, i64* %PC, align 8
  %1063 = add i64 %1062, 5
  store i64 %1063, i64* %PC, align 8
  %1064 = inttoptr i64 %1061 to i64*
  %1065 = load i64, i64* %1064, align 8
  store i64 %1065, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %1066 = add i64 %1060, -416
  %1067 = add i64 %1062, 12
  store i64 %1067, i64* %PC, align 8
  %1068 = inttoptr i64 %1066 to i64*
  %1069 = load i64, i64* %1068, align 8
  store i64 %1069, i64* %RDI, align 8, !tbaa !2428
  %1070 = add i64 %1060, -424
  %1071 = add i64 %1062, 19
  store i64 %1071, i64* %PC, align 8
  %1072 = inttoptr i64 %1070 to i64*
  %1073 = load i64, i64* %1072, align 8
  store i64 %1073, i64* %RSI, align 8, !tbaa !2428
  %1074 = add i64 %1060, -432
  %1075 = add i64 %1062, 26
  store i64 %1075, i64* %PC, align 8
  %1076 = inttoptr i64 %1074 to i64*
  %1077 = load i64, i64* %1076, align 8
  store i64 %1077, i64* %RDX, align 8, !tbaa !2428
  %1078 = add i64 %1060, -440
  %1079 = add i64 %1062, 33
  store i64 %1079, i64* %PC, align 8
  %1080 = inttoptr i64 %1078 to i64*
  %1081 = load i64, i64* %1080, align 8
  store i64 %1081, i64* %RCX, align 8, !tbaa !2428
  %1082 = add i64 %1062, 4082
  %1083 = add i64 %1062, 38
  %1084 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1085 = add i64 %1084, -8
  %1086 = inttoptr i64 %1085 to i64*
  store i64 %1083, i64* %1086, align 8
  store i64 %1085, i64* %RSP, align 8, !tbaa !2428
  store i64 %1082, i64* %PC, align 8, !tbaa !2428
  %1087 = tail call %struct.Memory* @sub_402a20__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1082, %struct.Memory* %1035)
  %1088 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 864), i64* %R8, align 8, !tbaa !2428
  %1089 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %1089, i64* %RDI, align 8, !tbaa !2428
  %1090 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %1090, i64* %RSI, align 8, !tbaa !2428
  %1091 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %1091, i64* %RDX, align 8, !tbaa !2428
  %1092 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %1092, i64* %RCX, align 8, !tbaa !2428
  %1093 = load i64, i64* %RBP, align 8
  %1094 = add i64 %1093, -32
  %1095 = add i64 %1088, 46
  store i64 %1095, i64* %PC, align 8
  %1096 = inttoptr i64 %1094 to i64*
  %1097 = load i64, i64* %1096, align 8
  store i64 %1097, i64* %R9, align 8, !tbaa !2428
  %1098 = add i64 %1093, -448
  %1099 = add i64 %1088, 53
  store i64 %1099, i64* %PC, align 8
  %1100 = inttoptr i64 %1098 to i64*
  store i64 %1097, i64* %1100, align 8
  %1101 = load i64, i64* %RBP, align 8
  %1102 = add i64 %1101, -448
  %1103 = load i64, i64* %PC, align 8
  %1104 = add i64 %1103, 8
  store i64 %1104, i64* %PC, align 8
  %1105 = inttoptr i64 %1102 to i64*
  %1106 = load i64, i64* %1105, align 8
  store i64 %1106, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %1107 = add i64 %1103, 4167
  %1108 = add i64 %1103, 13
  %1109 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1110 = add i64 %1109, -8
  %1111 = inttoptr i64 %1110 to i64*
  store i64 %1108, i64* %1111, align 8
  store i64 %1110, i64* %RSP, align 8, !tbaa !2428
  store i64 %1107, i64* %PC, align 8, !tbaa !2428
  %1112 = tail call %struct.Memory* @sub_402ad0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1107, %struct.Memory* %1087)
  %1113 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 901), i64* %R8, align 8, !tbaa !2428
  %1114 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %1115 = load i64, i64* %RBP, align 8
  %1116 = add i64 %1115, -456
  %1117 = add i64 %1113, 25
  store i64 %1117, i64* %PC, align 8
  %1118 = inttoptr i64 %1116 to i64*
  store i64 %1114, i64* %1118, align 8
  %1119 = load i64, i64* %PC, align 8
  %1120 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %1121 = load i64, i64* %RBP, align 8
  %1122 = add i64 %1121, -464
  %1123 = add i64 %1119, 15
  store i64 %1123, i64* %PC, align 8
  %1124 = inttoptr i64 %1122 to i64*
  store i64 %1120, i64* %1124, align 8
  %1125 = load i64, i64* %PC, align 8
  %1126 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %1127 = load i64, i64* %RBP, align 8
  %1128 = add i64 %1127, -472
  %1129 = add i64 %1125, 15
  store i64 %1129, i64* %PC, align 8
  %1130 = inttoptr i64 %1128 to i64*
  store i64 %1126, i64* %1130, align 8
  %1131 = load i64, i64* %PC, align 8
  %1132 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %1132, i64* %RCX, align 8, !tbaa !2428
  %1133 = load i64, i64* %RBP, align 8
  %1134 = add i64 %1133, -480
  %1135 = add i64 %1131, 15
  store i64 %1135, i64* %PC, align 8
  %1136 = inttoptr i64 %1134 to i64*
  store i64 %1132, i64* %1136, align 8
  %1137 = load i64, i64* %RBP, align 8
  %1138 = add i64 %1137, -32
  %1139 = load i64, i64* %PC, align 8
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1138 to i64*
  %1142 = load i64, i64* %1141, align 8
  store i64 %1142, i64* %RCX, align 8, !tbaa !2428
  %1143 = add i64 %1137, -488
  %1144 = add i64 %1139, 11
  store i64 %1144, i64* %PC, align 8
  %1145 = inttoptr i64 %1143 to i64*
  store i64 %1142, i64* %1145, align 8
  %1146 = load i64, i64* %RBP, align 8
  %1147 = add i64 %1146, -456
  %1148 = load i64, i64* %PC, align 8
  %1149 = add i64 %1148, 7
  store i64 %1149, i64* %PC, align 8
  %1150 = inttoptr i64 %1147 to i64*
  %1151 = load i64, i64* %1150, align 8
  store i64 %1151, i64* %RDI, align 8, !tbaa !2428
  %1152 = add i64 %1146, -464
  %1153 = add i64 %1148, 14
  store i64 %1153, i64* %PC, align 8
  %1154 = inttoptr i64 %1152 to i64*
  %1155 = load i64, i64* %1154, align 8
  store i64 %1155, i64* %RSI, align 8, !tbaa !2428
  %1156 = add i64 %1146, -472
  %1157 = add i64 %1148, 21
  store i64 %1157, i64* %PC, align 8
  %1158 = inttoptr i64 %1156 to i64*
  %1159 = load i64, i64* %1158, align 8
  store i64 %1159, i64* %RDX, align 8, !tbaa !2428
  %1160 = add i64 %1146, -480
  %1161 = add i64 %1148, 28
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1160 to i64*
  %1163 = load i64, i64* %1162, align 8
  store i64 %1163, i64* %RCX, align 8, !tbaa !2428
  %1164 = add i64 %1146, -488
  %1165 = add i64 %1148, 36
  store i64 %1165, i64* %PC, align 8
  %1166 = inttoptr i64 %1164 to i64*
  %1167 = load i64, i64* %1166, align 8
  store i64 %1167, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %1168 = add i64 %1148, 4201
  %1169 = add i64 %1148, 41
  %1170 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1171 = add i64 %1170, -8
  %1172 = inttoptr i64 %1171 to i64*
  store i64 %1169, i64* %1172, align 8
  store i64 %1171, i64* %RSP, align 8, !tbaa !2428
  store i64 %1168, i64* %PC, align 8, !tbaa !2428
  %1173 = tail call %struct.Memory* @sub_402b50__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1168, %struct.Memory* %1112)
  %1174 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 944), i64* %R8, align 8, !tbaa !2428
  %1175 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %1175, i64* %RDI, align 8, !tbaa !2428
  %1176 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %1176, i64* %RSI, align 8, !tbaa !2428
  %1177 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %1177, i64* %RDX, align 8, !tbaa !2428
  %1178 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %1178, i64* %RCX, align 8, !tbaa !2428
  %1179 = load i64, i64* %RBP, align 8
  %1180 = add i64 %1179, -48
  %1181 = add i64 %1174, 46
  store i64 %1181, i64* %PC, align 8
  %1182 = inttoptr i64 %1180 to i64*
  %1183 = load i64, i64* %1182, align 8
  store i64 %1183, i64* %R9, align 8, !tbaa !2428
  %1184 = add i64 %1179, -496
  %1185 = add i64 %1174, 53
  store i64 %1185, i64* %PC, align 8
  %1186 = inttoptr i64 %1184 to i64*
  store i64 %1183, i64* %1186, align 8
  %1187 = load i64, i64* %RBP, align 8
  %1188 = add i64 %1187, -496
  %1189 = load i64, i64* %PC, align 8
  %1190 = add i64 %1189, 8
  store i64 %1190, i64* %PC, align 8
  %1191 = inttoptr i64 %1188 to i64*
  %1192 = load i64, i64* %1191, align 8
  store i64 %1192, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %1193 = add i64 %1189, 4283
  %1194 = add i64 %1189, 13
  %1195 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1196 = add i64 %1195, -8
  %1197 = inttoptr i64 %1196 to i64*
  store i64 %1194, i64* %1197, align 8
  store i64 %1196, i64* %RSP, align 8, !tbaa !2428
  store i64 %1193, i64* %PC, align 8, !tbaa !2428
  %1198 = tail call %struct.Memory* @sub_402c00__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1193, %struct.Memory* %1173)
  %1199 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 983), i64* %R8, align 8, !tbaa !2428
  %1200 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %1201 = load i64, i64* %RBP, align 8
  %1202 = add i64 %1201, -504
  %1203 = add i64 %1199, 25
  store i64 %1203, i64* %PC, align 8
  %1204 = inttoptr i64 %1202 to i64*
  store i64 %1200, i64* %1204, align 8
  %1205 = load i64, i64* %PC, align 8
  %1206 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %1207 = load i64, i64* %RBP, align 8
  %1208 = add i64 %1207, -512
  %1209 = add i64 %1205, 15
  store i64 %1209, i64* %PC, align 8
  %1210 = inttoptr i64 %1208 to i64*
  store i64 %1206, i64* %1210, align 8
  %1211 = load i64, i64* %PC, align 8
  %1212 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %1213 = load i64, i64* %RBP, align 8
  %1214 = add i64 %1213, -520
  %1215 = add i64 %1211, 15
  store i64 %1215, i64* %PC, align 8
  %1216 = inttoptr i64 %1214 to i64*
  store i64 %1212, i64* %1216, align 8
  %1217 = load i64, i64* %PC, align 8
  %1218 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %1218, i64* %RCX, align 8, !tbaa !2428
  %1219 = load i64, i64* %RBP, align 8
  %1220 = add i64 %1219, -528
  %1221 = add i64 %1217, 15
  store i64 %1221, i64* %PC, align 8
  %1222 = inttoptr i64 %1220 to i64*
  store i64 %1218, i64* %1222, align 8
  %1223 = load i64, i64* %RBP, align 8
  %1224 = add i64 %1223, -48
  %1225 = load i64, i64* %PC, align 8
  %1226 = add i64 %1225, 4
  store i64 %1226, i64* %PC, align 8
  %1227 = inttoptr i64 %1224 to i64*
  %1228 = load i64, i64* %1227, align 8
  store i64 %1228, i64* %RCX, align 8, !tbaa !2428
  %1229 = add i64 %1223, -536
  %1230 = add i64 %1225, 11
  store i64 %1230, i64* %PC, align 8
  %1231 = inttoptr i64 %1229 to i64*
  store i64 %1228, i64* %1231, align 8
  %1232 = load i64, i64* %RBP, align 8
  %1233 = add i64 %1232, -504
  %1234 = load i64, i64* %PC, align 8
  %1235 = add i64 %1234, 7
  store i64 %1235, i64* %PC, align 8
  %1236 = inttoptr i64 %1233 to i64*
  %1237 = load i64, i64* %1236, align 8
  store i64 %1237, i64* %RDI, align 8, !tbaa !2428
  %1238 = add i64 %1232, -512
  %1239 = add i64 %1234, 14
  store i64 %1239, i64* %PC, align 8
  %1240 = inttoptr i64 %1238 to i64*
  %1241 = load i64, i64* %1240, align 8
  store i64 %1241, i64* %RSI, align 8, !tbaa !2428
  %1242 = add i64 %1232, -520
  %1243 = add i64 %1234, 21
  store i64 %1243, i64* %PC, align 8
  %1244 = inttoptr i64 %1242 to i64*
  %1245 = load i64, i64* %1244, align 8
  store i64 %1245, i64* %RDX, align 8, !tbaa !2428
  %1246 = add i64 %1232, -528
  %1247 = add i64 %1234, 28
  store i64 %1247, i64* %PC, align 8
  %1248 = inttoptr i64 %1246 to i64*
  %1249 = load i64, i64* %1248, align 8
  store i64 %1249, i64* %RCX, align 8, !tbaa !2428
  %1250 = add i64 %1232, -536
  %1251 = add i64 %1234, 36
  store i64 %1251, i64* %PC, align 8
  %1252 = inttoptr i64 %1250 to i64*
  %1253 = load i64, i64* %1252, align 8
  store i64 %1253, i64* %64, align 1, !tbaa !2451
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %1254 = add i64 %1234, 4317
  %1255 = add i64 %1234, 41
  %1256 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1257 = add i64 %1256, -8
  %1258 = inttoptr i64 %1257 to i64*
  store i64 %1255, i64* %1258, align 8
  store i64 %1257, i64* %RSP, align 8, !tbaa !2428
  store i64 %1254, i64* %PC, align 8, !tbaa !2428
  %1259 = tail call %struct.Memory* @sub_402c80__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1254, %struct.Memory* %1198)
  %1260 = load i64, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %1261 = load i64, i64* %RSP, align 8
  %1262 = add i64 %1261, 576
  store i64 %1262, i64* %RSP, align 8, !tbaa !2428
  %1263 = icmp ugt i64 %1261, -577
  %1264 = zext i1 %1263 to i8
  store i8 %1264, i8* %16, align 1, !tbaa !2432
  %1265 = trunc i64 %1262 to i32
  %1266 = and i32 %1265, 255
  %1267 = tail call i32 @llvm.ctpop.i32(i32 %1266) #10
  %1268 = trunc i32 %1267 to i8
  %1269 = and i8 %1268, 1
  %1270 = xor i8 %1269, 1
  store i8 %1270, i8* %23, align 1, !tbaa !2446
  %1271 = xor i64 %1262, %1261
  %1272 = lshr i64 %1271, 4
  %1273 = trunc i64 %1272 to i8
  %1274 = and i8 %1273, 1
  store i8 %1274, i8* %28, align 1, !tbaa !2447
  %1275 = icmp eq i64 %1262, 0
  %1276 = zext i1 %1275 to i8
  store i8 %1276, i8* %31, align 1, !tbaa !2448
  %1277 = lshr i64 %1262, 63
  %1278 = trunc i64 %1277 to i8
  store i8 %1278, i8* %34, align 1, !tbaa !2449
  %1279 = lshr i64 %1261, 63
  %1280 = xor i64 %1277, %1279
  %1281 = add nuw nsw i64 %1280, %1277
  %1282 = icmp eq i64 %1281, 2
  %1283 = zext i1 %1282 to i8
  store i8 %1283, i8* %40, align 1, !tbaa !2450
  %1284 = add i64 %1260, 10
  store i64 %1284, i64* %PC, align 8
  %1285 = add i64 %1261, 584
  %1286 = inttoptr i64 %1262 to i64*
  %1287 = load i64, i64* %1286, align 8
  store i64 %1287, i64* %RBP, align 8, !tbaa !2428
  store i64 %1285, i64* %RSP, align 8, !tbaa !2428
  %1288 = add i64 %1260, 11
  store i64 %1288, i64* %PC, align 8
  %1289 = inttoptr i64 %1285 to i64*
  %1290 = load i64, i64* %1289, align 8
  store i64 %1290, i64* %PC, align 8, !tbaa !2428
  %1291 = add i64 %1261, 592
  store i64 %1291, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1259

block_4012c8:                                     ; preds = %block_401270
  %1292 = add i64 %95, -16
  %1293 = add i64 %125, 4
  store i64 %1293, i64* %PC, align 8
  %1294 = inttoptr i64 %1292 to i64*
  %1295 = load i64, i64* %1294, align 8
  store i64 %1295, i64* %RAX, align 8, !tbaa !2428
  %1296 = add i64 %1295, 8
  %1297 = add i64 %125, 8
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1296 to i64*
  %1299 = load i64, i64* %1298, align 8
  store i64 %1299, i64* %RDI, align 8, !tbaa !2428
  %1300 = add i64 %125, -2936
  %1301 = add i64 %125, 13
  %1302 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1303 = add i64 %1302, -8
  %1304 = inttoptr i64 %1303 to i64*
  store i64 %1301, i64* %1304, align 8
  store i64 %1303, i64* %RSP, align 8, !tbaa !2428
  store i64 %1300, i64* %PC, align 8, !tbaa !2428
  %1305 = tail call fastcc %struct.Memory* @ext_400750_atoi(%struct.State* nonnull %0, %struct.Memory* %94)
  %1306 = load i32, i32* %EAX, align 4
  %1307 = load i64, i64* %PC, align 8
  %1308 = add i64 %1307, 7
  store i64 %1308, i64* %PC, align 8
  store i32 %1306, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %.pre = load i64, i64* %RBP, align 8
  br label %block_4012dc

block_4012e6:                                     ; preds = %block_4012dc
  %1309 = add i64 %127, -16
  %1310 = add i64 %156, 4
  store i64 %1310, i64* %PC, align 8
  %1311 = inttoptr i64 %1309 to i64*
  %1312 = load i64, i64* %1311, align 8
  store i64 %1312, i64* %RAX, align 8, !tbaa !2428
  %1313 = add i64 %1312, 16
  %1314 = add i64 %156, 8
  store i64 %1314, i64* %PC, align 8
  %1315 = inttoptr i64 %1313 to i64*
  %1316 = load i64, i64* %1315, align 8
  store i64 %1316, i64* %RDI, align 8, !tbaa !2428
  %1317 = add i64 %156, -3094
  %1318 = add i64 %156, 13
  %1319 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1320 = add i64 %1319, -8
  %1321 = inttoptr i64 %1320 to i64*
  store i64 %1318, i64* %1321, align 8
  store i64 %1320, i64* %RSP, align 8, !tbaa !2428
  store i64 %1317, i64* %PC, align 8, !tbaa !2428
  %1322 = tail call fastcc %struct.Memory* @ext_620900_atof(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %1323 = load i64, i64* %PC, align 8
  %1324 = add i64 %1323, 9
  store i64 %1324, i64* %PC, align 8
  %1325 = load i64, i64* %64, align 1
  store i64 %1325, i64* bitcast (%init_value_type* @init_value to i64*), align 8
  %1326 = bitcast i64 %1325 to double
  br label %block_4012fc
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_403090:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028f0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4028f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402918

block_402999:                                     ; preds = %block_402918
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402928:                                     ; preds = %block_402918
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 1008
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402d30__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 9439
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_404e40__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 1410
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402f00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402918

block_402918:                                     ; preds = %block_402928, %block_4028f0
  %255 = phi i64 [ %254, %block_402928 ], [ %.pre, %block_4028f0 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402928, label %block_402999
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404710__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404710:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = icmp eq i64 %28, %35
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = xor i1 %39, true
  store i8 0, i8* %36, align 1, !tbaa !2432
  %44 = zext i1 %43 to i32
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #10
  %46 = trunc i32 %45 to i8
  %47 = xor i8 %46, 1
  store i8 %47, i8* %37, align 1, !tbaa !2446
  %48 = zext i1 %39 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2447
  %49 = zext i1 %43 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406670__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406670:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4066a0__ZN12ValueWrapperIS_IdEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_405760__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -104
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -32
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %20 = add i64 %8, -16
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %11, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -16
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -24
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, -10078
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_40578c

block_405817:                                     ; preds = %block_405807
  %56 = add i64 %137, -56
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %149, -10119
  %58 = add i64 %149, 9
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %48)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -48
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -80
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %65, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, -10136
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %71, %struct.Memory* %48)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -80
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RDI, align 8, !tbaa !2428
  %83 = add i64 %79, 7
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %RCX, align 8, !tbaa !2428
  %86 = load i64*, i64** %55, align 8
  %87 = add i64 %79, 10
  store i64 %87, i64* %PC, align 8
  store i64 %85, i64* %86, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -48
  %90 = load i64, i64* %PC, align 8
  store i64 %89, i64* %RDI, align 8, !tbaa !2428
  %91 = add i64 %90, -2151
  %92 = add i64 %90, 9
  %93 = load i64, i64* %RSP, align 8, !tbaa !2428
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95, align 8
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  %96 = tail call %struct.Memory* @sub_404fd0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %91, %struct.Memory* %48)
  %97 = load i64, i64* %RBP, align 8
  %98 = add i64 %97, -88
  %99 = load i64, i64* %RAX, align 8
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102, align 8
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, -126
  store i64 %104, i64* %PC, align 8, !tbaa !2428
  br label %block_4057c6

block_405812:                                     ; preds = %block_405807
  %105 = add i64 %137, -48
  store i64 %105, i64* %RDI, align 8, !tbaa !2428
  %106 = add i64 %149, -10114
  %107 = add i64 %149, 64
  %108 = load i64, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110, align 8
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %111 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %106, %struct.Memory* %48)
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, -24
  %114 = load i64, i64* %PC, align 8
  store i64 %113, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %115 = add i64 %112, -40
  %116 = add i64 %114, 10
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RCX, align 8, !tbaa !2428
  %119 = load i64*, i64** %55, align 8
  %120 = add i64 %114, 13
  store i64 %120, i64* %PC, align 8
  store i64 %118, i64* %119, align 8
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, -10303
  %123 = add i64 %121, 5
  %124 = load i64, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %123, i64* %126, align 8
  store i64 %125, i64* %RSP, align 8, !tbaa !2428
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  %127 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %122, %struct.Memory* %48)
  %128 = load i64, i64* %RBP, align 8
  %129 = add i64 %128, -64
  %130 = load i64, i64* %RAX, align 8
  %131 = load i64, i64* %PC, align 8
  %132 = add i64 %131, 4
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %129 to i64*
  store i64 %130, i64* %133, align 8
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, -220
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  br label %block_40578c

block_405807:                                     ; preds = %block_4057e2, %block_4057e7
  %136 = phi i64 [ %262, %block_4057e2 ], [ %.pre8, %block_4057e7 ]
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -65
  %139 = add i64 %136, 3
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i8*
  %141 = load i8, i8* %140, align 1
  store i8 %141, i8* %AL, align 1, !tbaa !2453
  %142 = and i8 %141, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %143 = zext i8 %142 to i32
  %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #10
  %145 = trunc i32 %144 to i8
  %146 = xor i8 %145, 1
  store i8 %146, i8* %14, align 1, !tbaa !2446
  %147 = xor i8 %142, 1
  store i8 %147, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %148 = icmp eq i8 %147, 0
  %.v = select i1 %148, i64 16, i64 11
  %149 = add i64 %.v, %136
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  br i1 %148, label %block_405817, label %block_405812

block_4057c6:                                     ; preds = %block_4057a6, %block_405817
  %150 = phi i64 [ %.pre7, %block_4057a6 ], [ %104, %block_405817 ]
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -48
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %153 = add i64 %151, -8
  store i64 %153, i64* %RSI, align 8, !tbaa !2428
  %154 = add i64 %150, -10086
  %155 = add i64 %150, 13
  %156 = load i64, i64* %RSP, align 8, !tbaa !2428
  %157 = add i64 %156, -8
  %158 = inttoptr i64 %157 to i64*
  store i64 %155, i64* %158, align 8
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  %159 = tail call %struct.Memory* @sub_403060__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %154, %struct.Memory* %48)
  %160 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2453
  %161 = load i8, i8* %AL, align 1
  %162 = and i8 %161, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %163 = zext i8 %162 to i32
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #10
  %165 = trunc i32 %164 to i8
  %166 = xor i8 %165, 1
  store i8 %166, i8* %14, align 1, !tbaa !2446
  %167 = xor i8 %162, 1
  store i8 %167, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %168 = load i64, i64* %RBP, align 8
  %169 = add i64 %168, -65
  %170 = add i64 %160, 9
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i8*
  store i8 0, i8* %171, align 1
  %172 = load i64, i64* %PC, align 8
  %173 = load i8, i8* %16, align 1, !tbaa !2448
  %174 = icmp eq i8 %173, 0
  %.v12 = select i1 %174, i64 11, i64 6
  %175 = add i64 %.v12, %172
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  br i1 %174, label %block_4057e7, label %block_4057e2

block_40578c:                                     ; preds = %block_405812, %block_405760
  %176 = phi i64 [ %.pre, %block_405760 ], [ %135, %block_405812 ]
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -24
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %177, -16
  store i64 %179, i64* %RSI, align 8, !tbaa !2428
  %180 = add i64 %176, -10028
  %181 = add i64 %176, 13
  %182 = load i64, i64* %RSP, align 8, !tbaa !2428
  %183 = add i64 %182, -8
  %184 = inttoptr i64 %183 to i64*
  store i64 %181, i64* %184, align 8
  store i64 %183, i64* %RSP, align 8, !tbaa !2428
  store i64 %180, i64* %PC, align 8, !tbaa !2428
  %185 = tail call %struct.Memory* @sub_403060__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %180, %struct.Memory* %48)
  %186 = load i8, i8* %AL, align 1
  %187 = load i64, i64* %PC, align 8
  %188 = and i8 %186, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %189 = zext i8 %188 to i32
  %190 = tail call i32 @llvm.ctpop.i32(i32 %189) #10
  %191 = trunc i32 %190 to i8
  %192 = xor i8 %191, 1
  store i8 %192, i8* %14, align 1, !tbaa !2446
  %193 = xor i8 %188, 1
  store i8 %193, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %194 = icmp eq i8 %193, 0
  %.v9 = select i1 %194, i64 13, i64 8
  %195 = add i64 %.v9, %187
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  br i1 %194, label %block_4057a6, label %block_4057a1

block_4057e7:                                     ; preds = %block_4057c6
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -56
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %198 = add i64 %175, -2071
  %199 = add i64 %175, 9
  %200 = load i64, i64* %RSP, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %199, i64* %202, align 8
  store i64 %201, i64* %RSP, align 8, !tbaa !2428
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  %203 = tail call %struct.Memory* @sub_404fd0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %198, %struct.Memory* %48)
  %204 = load i64, i64* %RAX, align 8
  %205 = load i64, i64* %PC, align 8
  store i64 %204, i64* %RDI, align 8, !tbaa !2428
  %206 = add i64 %205, -10080
  %207 = add i64 %205, 8
  %208 = load i64, i64* %RSP, align 8, !tbaa !2428
  %209 = add i64 %208, -8
  %210 = inttoptr i64 %209 to i64*
  store i64 %207, i64* %210, align 8
  store i64 %209, i64* %RSP, align 8, !tbaa !2428
  store i64 %206, i64* %PC, align 8, !tbaa !2428
  %211 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %206, %struct.Memory* %48)
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -40
  %214 = load i64, i64* %PC, align 8
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX, align 8
  store i64 %215, i64* %RSI, align 8, !tbaa !2428
  %216 = add i64 %214, -10056
  %217 = add i64 %214, 12
  %218 = load i64, i64* %RSP, align 8, !tbaa !2428
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %217, i64* %220, align 8
  store i64 %219, i64* %RSP, align 8, !tbaa !2428
  store i64 %216, i64* %PC, align 8, !tbaa !2428
  %221 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %216, %struct.Memory* %48)
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -65
  %224 = load i8, i8* %AL, align 1
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %223 to i8*
  store i8 %224, i8* %227, align 1
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_405807

block_4057a6:                                     ; preds = %block_40578c
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -24
  store i64 %229, i64* %RDI, align 8, !tbaa !2428
  %230 = add i64 %195, -10006
  %231 = add i64 %195, 9
  %232 = load i64, i64* %RSP, align 8, !tbaa !2428
  %233 = add i64 %232, -8
  %234 = inttoptr i64 %233 to i64*
  store i64 %231, i64* %234, align 8
  store i64 %233, i64* %RSP, align 8, !tbaa !2428
  store i64 %230, i64* %PC, align 8, !tbaa !2428
  %235 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %230, %struct.Memory* %48)
  %236 = load i64*, i64** %55, align 8
  %237 = load i64, i64* %PC, align 8
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC, align 8
  %239 = load i64, i64* %236, align 8
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -40
  %242 = add i64 %237, 7
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to i64*
  store i64 %239, i64* %243, align 8
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -24
  %246 = load i64, i64* %PC, align 8
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RAX, align 8, !tbaa !2428
  %250 = add i64 %244, -48
  %251 = add i64 %246, 8
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  store i64 %249, i64* %252, align 8
  %253 = load i64, i64* %RBP, align 8
  %254 = add i64 %253, -48
  %255 = load i64, i64* %PC, align 8
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %254 to i64*
  %258 = load i64, i64* %257, align 8
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = add i64 %253, -56
  %260 = add i64 %255, 8
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i64*
  store i64 %258, i64* %261, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4057c6

block_4057e2:                                     ; preds = %block_4057c6
  %262 = add i64 %175, 37
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br label %block_405807

block_4057a1:                                     ; preds = %block_40578c
  %263 = load i64, i64* %RSP, align 8
  %264 = add i64 %263, 96
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  %265 = icmp ugt i64 %263, -97
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %13, align 1, !tbaa !2432
  %267 = trunc i64 %264 to i32
  %268 = and i32 %267, 255
  %269 = tail call i32 @llvm.ctpop.i32(i32 %268) #10
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  store i8 %272, i8* %14, align 1, !tbaa !2446
  %273 = xor i64 %264, %263
  %274 = lshr i64 %273, 4
  %275 = trunc i64 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %15, align 1, !tbaa !2447
  %277 = icmp eq i64 %264, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %16, align 1, !tbaa !2448
  %279 = lshr i64 %264, 63
  %280 = trunc i64 %279 to i8
  store i8 %280, i8* %17, align 1, !tbaa !2449
  %281 = lshr i64 %263, 63
  %282 = xor i64 %279, %281
  %283 = add nuw nsw i64 %282, %279
  %284 = icmp eq i64 %283, 2
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %18, align 1, !tbaa !2450
  %286 = add i64 %195, 209
  store i64 %286, i64* %PC, align 8
  %287 = add i64 %263, 104
  %288 = inttoptr i64 %264 to i64*
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %RBP, align 8, !tbaa !2428
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %195, 210
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  %293 = add i64 %263, 112
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %48
}

; Function Attrs: noinline
define %struct.Memory* @sub_402d30__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402d30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_402d44

block_402d5e:                                     ; preds = %block_402d44
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -8
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %58 = add i64 %168, 706
  %59 = add i64 %168, 11
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %66, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 799
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %71, %struct.Memory* %2)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -24
  %79 = load i64, i64* %PC, align 8
  store i64 %78, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %80 = add i64 %77, -48
  %81 = load i64, i64* %RAX, align 8
  %82 = add i64 %79, 10
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %83, align 8
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 672
  %86 = add i64 %84, 5
  %87 = load i64, i64* %RSP, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %86, i64* %89, align 8
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %90 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %85, %struct.Memory* %2)
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -40
  %93 = load i64, i64* %PC, align 8
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %94 = load i64, i64* %RAX, align 8
  %95 = add i64 %93, 8
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %92 to i64*
  store i64 %94, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 771
  %99 = add i64 %97, 5
  %100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %99, i64* %102, align 8
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  store i64 %98, i64* %PC, align 8, !tbaa !2428
  %103 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %98, %struct.Memory* %2)
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -48
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = add i64 %106, 7
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %109 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RCX, align 8, !tbaa !2428
  %113 = load i64*, i64** %55, align 8
  %114 = add i64 %106, 10
  store i64 %114, i64* %PC, align 8
  store i64 %112, i64* %113, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, -88
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br label %block_402d44

block_402d59:                                     ; preds = %block_402d44
  %117 = load i64, i64* %RSP, align 8
  %118 = add i64 %117, 48
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %119 = icmp ugt i64 %117, -49
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %13, align 1, !tbaa !2432
  %121 = trunc i64 %118 to i32
  %122 = and i32 %121, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #10
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %20, align 1, !tbaa !2446
  %127 = xor i64 %117, 16
  %128 = xor i64 %127, %118
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  store i8 %131, i8* %26, align 1, !tbaa !2447
  %132 = icmp eq i64 %118, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %29, align 1, !tbaa !2448
  %134 = lshr i64 %118, 63
  %135 = trunc i64 %134 to i8
  store i8 %135, i8* %32, align 1, !tbaa !2449
  %136 = lshr i64 %117, 63
  %137 = xor i64 %134, %136
  %138 = add nuw nsw i64 %137, %134
  %139 = icmp eq i64 %138, 2
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %38, align 1, !tbaa !2450
  %141 = add i64 %168, 77
  store i64 %141, i64* %PC, align 8
  %142 = add i64 %117, 56
  %143 = inttoptr i64 %118 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RBP, align 8, !tbaa !2428
  store i64 %142, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %168, 78
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %142 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %PC, align 8, !tbaa !2428
  %148 = add i64 %117, 64
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402d44:                                     ; preds = %block_402d5e, %block_402d30
  %149 = phi i64 [ %116, %block_402d5e ], [ %.pre, %block_402d30 ]
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -8
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %150, -16
  store i64 %152, i64* %RSI, align 8, !tbaa !2428
  %153 = add i64 %149, 796
  %154 = add i64 %149, 13
  %155 = load i64, i64* %RSP, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %154, i64* %157, align 8
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  store i64 %153, i64* %PC, align 8, !tbaa !2428
  %158 = tail call %struct.Memory* @sub_403060__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %153, %struct.Memory* %2)
  %159 = load i8, i8* %AL, align 1
  %160 = load i64, i64* %PC, align 8
  %161 = and i8 %159, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %162 = zext i8 %161 to i32
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #10
  %164 = trunc i32 %163 to i8
  %165 = xor i8 %164, 1
  store i8 %165, i8* %20, align 1, !tbaa !2446
  %166 = xor i8 %161, 1
  store i8 %166, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %167 = icmp eq i8 %166, 0
  %.v = select i1 %167, i64 13, i64 8
  %168 = add i64 %.v, %160
  store i64 %168, i64* %PC, align 8, !tbaa !2428
  br i1 %167, label %block_402d5e, label %block_402d59
}

; Function Attrs: noinline
define %struct.Memory* @sub_402610__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402610:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402638

block_402681:                                     ; preds = %block_402638
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402648:                                     ; preds = %block_402638
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 9288
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a90__ZN9benchmark4copyIPdS1_EEvT_S2_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 12247
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405630__ZN9benchmark9quicksortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 9578
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404bd0__Z13verify_sortedIPdEvT_S1__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402638

block_402638:                                     ; preds = %block_402648, %block_402610
  %190 = phi i64 [ %189, %block_402648 ], [ %.pre, %block_402610 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402648, label %block_402681
}

; Function Attrs: noinline
define %struct.Memory* @sub_406080__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406080:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_4060e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406120__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline
define %struct.Memory* @sub_402ad0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402ad0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402af8

block_402b41:                                     ; preds = %block_402af8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402b08:                                     ; preds = %block_402af8
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 5384
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404010__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 5447
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_404060__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 5690
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404160__Z13verify_sortedIP12ValueWrapperIdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402af8

block_402af8:                                     ; preds = %block_402b08, %block_402ad0
  %190 = phi i64 [ %189, %block_402b08 ], [ %.pre, %block_402ad0 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402b08, label %block_402b41
}

; Function Attrs: noinline
define %struct.Memory* @sub_403740__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403740:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -32
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ugt i64 %62, -9
  %65 = zext i1 %64 to i8
  store i8 %65, i8* %13, align 1, !tbaa !2432
  %66 = trunc i64 %63 to i32
  %67 = and i32 %66, 255
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #10
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  store i8 %71, i8* %20, align 1, !tbaa !2446
  %72 = xor i64 %63, %62
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %25, align 1, !tbaa !2447
  %76 = icmp eq i64 %63, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %28, align 1, !tbaa !2448
  %78 = lshr i64 %63, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %31, align 1, !tbaa !2449
  %80 = lshr i64 %62, 63
  %81 = xor i64 %78, %80
  %82 = add nuw nsw i64 %81, %78
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %37, align 1, !tbaa !2450
  %85 = add i64 %59, 12
  store i64 %85, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403764

block_4037ba:                                     ; preds = %block_4037a8, %block_4037b6
  %86 = phi i64 [ %206, %block_4037a8 ], [ %.pre14, %block_4037b6 ]
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -1
  %89 = add i64 %86, 3
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i8*
  %91 = load i8, i8* %90, align 1
  %92 = and i8 %91, 1
  %93 = zext i8 %92 to i64
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = load i64, i64* %RSP, align 8
  %95 = add i64 %94, 32
  store i64 %95, i64* %RSP, align 8, !tbaa !2428
  %96 = icmp ugt i64 %94, -33
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %13, align 1, !tbaa !2432
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #10
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %20, align 1, !tbaa !2446
  %104 = xor i64 %95, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %25, align 1, !tbaa !2447
  %108 = icmp eq i64 %95, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %28, align 1, !tbaa !2448
  %110 = lshr i64 %95, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %31, align 1, !tbaa !2449
  %112 = lshr i64 %94, 63
  %113 = xor i64 %110, %112
  %114 = add nuw nsw i64 %113, %110
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %37, align 1, !tbaa !2450
  %117 = add i64 %86, 13
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %94, 40
  %119 = inttoptr i64 %95 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RBP, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %86, 14
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %118 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %PC, align 8, !tbaa !2428
  %124 = add i64 %94, 48
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4037b6:                                     ; preds = %block_403764
  %125 = add i64 %208, -1
  %126 = add i64 %242, 4
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i8*
  store i8 1, i8* %127, align 1
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_4037ba

block_403772:                                     ; preds = %block_403764
  %128 = add i64 %242, 4
  store i64 %128, i64* %PC, align 8
  %129 = load i64, i64* %211, align 8
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = add i64 %129, 8
  store i64 %130, i64* %RCX, align 8, !tbaa !2428
  %131 = icmp ugt i64 %129, -9
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %13, align 1, !tbaa !2432
  %133 = trunc i64 %130 to i32
  %134 = and i32 %133, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #10
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %20, align 1, !tbaa !2446
  %139 = xor i64 %130, %129
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* %25, align 1, !tbaa !2447
  %143 = icmp eq i64 %130, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !2448
  %145 = lshr i64 %130, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* %31, align 1, !tbaa !2449
  %147 = lshr i64 %129, 63
  %148 = xor i64 %145, %147
  %149 = add nuw nsw i64 %148, %145
  %150 = icmp eq i64 %149, 2
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %37, align 1, !tbaa !2450
  %152 = add i64 %242, 15
  store i64 %152, i64* %PC, align 8
  store i64 %130, i64* %211, align 8
  %153 = load i64, i64* %RBP, align 8
  %154 = add i64 %153, -32
  %155 = load i64, i64* %PC, align 8
  %156 = add i64 %155, 4
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %154 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %159 = add i64 %158, 8
  store i64 %159, i64* %RDX, align 8, !tbaa !2428
  %160 = icmp ugt i64 %158, -9
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %13, align 1, !tbaa !2432
  %162 = trunc i64 %159 to i32
  %163 = and i32 %162, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #10
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  store i8 %167, i8* %20, align 1, !tbaa !2446
  %168 = xor i64 %159, %158
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %25, align 1, !tbaa !2447
  %172 = icmp eq i64 %159, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %28, align 1, !tbaa !2448
  %174 = lshr i64 %159, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %31, align 1, !tbaa !2449
  %176 = lshr i64 %158, 63
  %177 = xor i64 %174, %176
  %178 = add nuw nsw i64 %177, %174
  %179 = icmp eq i64 %178, 2
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %37, align 1, !tbaa !2450
  %181 = add i64 %155, 15
  store i64 %181, i64* %PC, align 8
  store i64 %159, i64* %157, align 8
  %182 = load i64, i64* %RAX, align 8
  %183 = load i64, i64* %PC, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %184 = load i64, i64* %RCX, align 8
  store i64 %184, i64* %RSI, align 8, !tbaa !2428
  %185 = add i64 %183, -1760
  %186 = add i64 %183, 11
  %187 = load i64, i64* %RSP, align 8, !tbaa !2428
  %188 = add i64 %187, -8
  %189 = inttoptr i64 %188 to i64*
  store i64 %186, i64* %189, align 8
  store i64 %188, i64* %RSP, align 8, !tbaa !2428
  store i64 %185, i64* %PC, align 8, !tbaa !2428
  %190 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %185, %struct.Memory* %2)
  %191 = load i8, i8* %AL, align 1
  %192 = load i64, i64* %PC, align 8
  %193 = and i8 %191, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %194 = zext i8 %193 to i32
  %195 = tail call i32 @llvm.ctpop.i32(i32 %194) #10
  %196 = trunc i32 %195 to i8
  %197 = xor i8 %196, 1
  store i8 %197, i8* %20, align 1, !tbaa !2446
  %198 = xor i8 %193, 1
  store i8 %198, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %199 = icmp eq i8 %198, 0
  %.v15 = select i1 %199, i64 13, i64 8
  %200 = add i64 %.v15, %192
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  br i1 %199, label %block_4037a8, label %block_4037a3

block_4037a8:                                     ; preds = %block_403772
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -1
  %203 = add i64 %200, 4
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i8*
  store i8 0, i8* %204, align 1
  %205 = load i64, i64* %PC, align 8
  %206 = add i64 %205, 14
  store i64 %206, i64* %PC, align 8, !tbaa !2428
  br label %block_4037ba

block_403764:                                     ; preds = %block_4037a3, %block_403740
  %207 = phi i64 [ %243, %block_4037a3 ], [ %.pre, %block_403740 ]
  %208 = load i64, i64* %RBP, align 8
  %209 = add i64 %208, -16
  %210 = add i64 %207, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %209 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = add i64 %208, -24
  %214 = add i64 %207, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = sub i64 %212, %216
  %218 = icmp ult i64 %212, %216
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %13, align 1, !tbaa !2432
  %220 = trunc i64 %217 to i32
  %221 = and i32 %220, 255
  %222 = tail call i32 @llvm.ctpop.i32(i32 %221) #10
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  store i8 %225, i8* %20, align 1, !tbaa !2446
  %226 = xor i64 %216, %212
  %227 = xor i64 %226, %217
  %228 = lshr i64 %227, 4
  %229 = trunc i64 %228 to i8
  %230 = and i8 %229, 1
  store i8 %230, i8* %25, align 1, !tbaa !2447
  %231 = icmp eq i64 %217, 0
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %28, align 1, !tbaa !2448
  %233 = lshr i64 %217, 63
  %234 = trunc i64 %233 to i8
  store i8 %234, i8* %31, align 1, !tbaa !2449
  %235 = lshr i64 %212, 63
  %236 = lshr i64 %216, 63
  %237 = xor i64 %236, %235
  %238 = xor i64 %233, %235
  %239 = add nuw nsw i64 %238, %237
  %240 = icmp eq i64 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %37, align 1, !tbaa !2450
  %.v = select i1 %231, i64 82, i64 14
  %242 = add i64 %.v, %207
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  br i1 %231, label %block_4037b6, label %block_403772

block_4037a3:                                     ; preds = %block_403772
  %243 = add i64 %200, -63
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  br label %block_403764
}

; Function Attrs: noinline
define %struct.Memory* @sub_404160__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404160:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4041b0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #10
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %.v, %65
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_4041a0, label %block_404185

block_404185:                                     ; preds = %block_404160
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %76 = add i64 %73, -14981
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4041a0

block_4041a0:                                     ; preds = %block_404185, %block_404160
  %88 = phi i64 [ %73, %block_404160 ], [ %.pre, %block_404185 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_404160 ], [ %81, %block_404185 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #10
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f80__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405f80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 48
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_405fc0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 86
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406000__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401d90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 18352
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406550__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #10
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_403bb0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403bb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 17
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %28, -32
  %35 = add i64 %30, 8
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RAX, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i32, i32* %ECX, align 4
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = add i64 %38, 162
  %42 = add i64 %38, 10
  %43 = load i64, i64* %RSP, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %46 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %41, %struct.Memory* %2)
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -40
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403bdc

block_403bdc:                                     ; preds = %block_403c3e, %block_403bb0
  %53 = phi i64 [ %113, %block_403c3e ], [ %.pre, %block_403bb0 ]
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  store i64 %55, i64* %RDI, align 8, !tbaa !2428
  %56 = add i64 %54, -24
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %53, 212
  %58 = add i64 %53, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403cb0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %46)
  %63 = load i8, i8* %AL, align 1
  %64 = load i64, i64* %PC, align 8
  %65 = and i8 %63, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %66 = zext i8 %65 to i32
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #10
  %68 = trunc i32 %67 to i8
  %69 = xor i8 %68, 1
  store i8 %69, i8* %13, align 1, !tbaa !2446
  %70 = xor i8 %65, 1
  store i8 %70, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %71 = icmp eq i8 %70, 0
  %.v = select i1 %71, i64 13, i64 8
  %72 = add i64 %.v, %64
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %73 = load i64, i64* %RBP, align 8
  br i1 %71, label %block_403bf6, label %block_403bf1

block_403c55:                                     ; preds = %block_403c43, %block_403bf1
  %74 = phi i64 [ %192, %block_403c43 ], [ %.pre12, %block_403bf1 ]
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -1
  %77 = add i64 %74, 3
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i8*
  %79 = load i8, i8* %78, align 1
  %80 = and i8 %79, 1
  %81 = zext i8 %80 to i64
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 64
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -65
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %12, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #10
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %13, align 1, !tbaa !2446
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %14, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %15, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %16, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %17, align 1, !tbaa !2450
  %105 = add i64 %74, 13
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 72
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBP, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %74, 14
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %106 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %112 = add i64 %82, 80
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %46

block_403c3e:                                     ; preds = %block_403bf6
  %113 = add i64 %186, -98
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br label %block_403bdc

block_403bf1:                                     ; preds = %block_403bdc
  %114 = add i64 %73, -1
  %115 = add i64 %72, 100
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i8*
  store i8 1, i8* %116, align 1
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_403c55

block_403bf6:                                     ; preds = %block_403bdc
  %117 = add i64 %73, -16
  store i64 %117, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %118 = add i64 %72, 122
  %119 = add i64 %72, 11
  %120 = load i64, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122, align 8
  store i64 %121, i64* %RSP, align 8, !tbaa !2428
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %123 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %118, %struct.Memory* %46)
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -48
  %126 = load i64, i64* %PC, align 8
  store i64 %125, i64* %RDI, align 8, !tbaa !2428
  %127 = load i64, i64* %RAX, align 8
  %128 = add i64 %126, 8
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %125 to i64*
  store i64 %127, i64* %129, align 8
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %130, 215
  %132 = add i64 %130, 5
  %133 = load i64, i64* %RSP, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 8
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %136 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %131, %struct.Memory* %46)
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -32
  %139 = load i64, i64* %PC, align 8
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %140 = add i64 %137, -64
  %141 = load i64, i64* %RAX, align 8
  %142 = add i64 %139, 10
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %140 to i64*
  store i64 %141, i64* %143, align 8
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 88
  %146 = add i64 %144, 5
  %147 = load i64, i64* %RSP, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %150 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %145, %struct.Memory* %46)
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -56
  %153 = load i64, i64* %PC, align 8
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %154 = load i64, i64* %RAX, align 8
  %155 = add i64 %153, 8
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %152 to i64*
  store i64 %154, i64* %156, align 8
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 187
  %159 = add i64 %157, 5
  %160 = load i64, i64* %RSP, align 8, !tbaa !2428
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %162, align 8
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  store i64 %158, i64* %PC, align 8, !tbaa !2428
  %163 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %158, %struct.Memory* %46)
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -64
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RDI, align 8, !tbaa !2428
  %170 = load i64, i64* %RAX, align 8
  store i64 %170, i64* %RSI, align 8, !tbaa !2428
  %171 = add i64 %166, -2506
  %172 = add i64 %166, 12
  %173 = load i64, i64* %RSP, align 8, !tbaa !2428
  %174 = add i64 %173, -8
  %175 = inttoptr i64 %174 to i64*
  store i64 %172, i64* %175, align 8
  store i64 %174, i64* %RSP, align 8, !tbaa !2428
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  %176 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %171, %struct.Memory* %46)
  %177 = load i8, i8* %AL, align 1
  %178 = load i64, i64* %PC, align 8
  %179 = and i8 %177, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %180 = zext i8 %179 to i32
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180) #10
  %182 = trunc i32 %181 to i8
  %183 = xor i8 %182, 1
  store i8 %183, i8* %13, align 1, !tbaa !2446
  %184 = xor i8 %179, 1
  store i8 %184, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %185 = icmp eq i8 %184, 0
  %.v13 = select i1 %185, i64 13, i64 8
  %186 = add i64 %.v13, %178
  store i64 %186, i64* %PC, align 8, !tbaa !2428
  br i1 %185, label %block_403c43, label %block_403c3e

block_403c43:                                     ; preds = %block_403bf6
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -1
  %189 = add i64 %186, 4
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i8*
  store i8 0, i8* %190, align 1
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 14
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  br label %block_403c55
}

; Function Attrs: noinline
define %struct.Memory* @sub_4060e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4060e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406140__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406180__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401dc0__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401dc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 5
  store i64 %23, i64* %PC, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %25 = load i64, i64* %24, align 1
  %26 = inttoptr i64 %21 to i64*
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  %35 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_401dd1

block_401ddf:                                     ; preds = %block_401dd1
  %36 = add i64 %72, -24
  %37 = add i64 %106, 5
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %24, align 1, !tbaa !2451
  store double 0.000000e+00, double* %34, align 1, !tbaa !2451
  %40 = add i64 %106, 9
  store i64 %40, i64* %PC, align 8
  %41 = load i64, i64* %75, align 8
  store i64 %41, i64* %RAX, align 8, !tbaa !2428
  %42 = add i64 %41, 8
  store i64 %42, i64* %RCX, align 8, !tbaa !2428
  %43 = icmp ugt i64 %41, -9
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %27, align 1, !tbaa !2432
  %45 = trunc i64 %42 to i32
  %46 = and i32 %45, 255
  %47 = tail call i32 @llvm.ctpop.i32(i32 %46) #10
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  store i8 %50, i8* %28, align 1, !tbaa !2446
  %51 = xor i64 %42, %41
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  store i8 %54, i8* %29, align 1, !tbaa !2447
  %55 = icmp eq i64 %42, 0
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %30, align 1, !tbaa !2448
  %57 = lshr i64 %42, 63
  %58 = trunc i64 %57 to i8
  store i8 %58, i8* %31, align 1, !tbaa !2449
  %59 = lshr i64 %41, 63
  %60 = xor i64 %57, %59
  %61 = add nuw nsw i64 %60, %57
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  store i8 %63, i8* %32, align 1, !tbaa !2450
  %64 = add i64 %106, 20
  store i64 %64, i64* %PC, align 8
  store i64 %42, i64* %75, align 8
  %65 = load i64*, i64** %35, align 8
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = load i64, i64* %24, align 1
  store i64 %68, i64* %65, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -38
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  br label %block_401dd1

block_401dd1:                                     ; preds = %block_401ddf, %block_401dc0
  %71 = phi i64 [ %70, %block_401ddf ], [ %.pre, %block_401dc0 ]
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = add i64 %71, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RAX, align 8, !tbaa !2428
  %77 = add i64 %72, -16
  %78 = add i64 %71, 8
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %76, %80
  %82 = icmp ult i64 %76, %80
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %27, align 1, !tbaa !2432
  %84 = trunc i64 %81 to i32
  %85 = and i32 %84, 255
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #10
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %28, align 1, !tbaa !2446
  %90 = xor i64 %80, %76
  %91 = xor i64 %90, %81
  %92 = lshr i64 %91, 4
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %29, align 1, !tbaa !2447
  %95 = icmp eq i64 %81, 0
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %30, align 1, !tbaa !2448
  %97 = lshr i64 %81, 63
  %98 = trunc i64 %97 to i8
  store i8 %98, i8* %31, align 1, !tbaa !2449
  %99 = lshr i64 %76, 63
  %100 = lshr i64 %80, 63
  %101 = xor i64 %100, %99
  %102 = xor i64 %97, %99
  %103 = add nuw nsw i64 %102, %101
  %104 = icmp eq i64 %103, 2
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %32, align 1, !tbaa !2450
  %.v = select i1 %95, i64 43, i64 14
  %106 = add i64 %.v, %71
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  br i1 %95, label %block_401dfc, label %block_401ddf

block_401dfc:                                     ; preds = %block_401dd1
  %107 = add i64 %106, 1
  store i64 %107, i64* %PC, align 8
  %108 = load i64, i64* %5, align 8, !tbaa !2428
  %109 = add i64 %108, 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RBP, align 8, !tbaa !2428
  store i64 %109, i64* %5, align 8, !tbaa !2428
  %112 = add i64 %106, 2
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %109 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  %115 = add i64 %108, 16
  store i64 %115, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403b50__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_403b50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_403bb0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__renamed_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #10
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2446
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %.v, %84
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_403ba0, label %block_403b85

block_403b85:                                     ; preds = %block_403b50
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %95 = add i64 %92, -13445
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_403ba0

block_403ba0:                                     ; preds = %block_403b85, %block_403b50
  %107 = phi i64 [ %92, %block_403b50 ], [ %.pre, %block_403b85 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_403b50 ], [ %100, %block_403b85 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #10
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2446
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2450
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4024e0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4024e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402508

block_402551:                                     ; preds = %block_402508
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402518:                                     ; preds = %block_402508
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 4232
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_4035a0__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 13143
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405880__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 4538
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036f0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #10
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402508

block_402508:                                     ; preds = %block_402518, %block_4024e0
  %190 = phi i64 [ %189, %block_402518 ], [ %.pre, %block_4024e0 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %.v, %190
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402518, label %block_402551
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406120__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_406120:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401d40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #10
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_406140__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406140:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_4061a0__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_4061e0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404a90__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404a90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = bitcast i64* %RAX to i64**
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404aa0

block_404ad9:                                     ; preds = %block_404aa0
  %36 = add i64 %80, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %80, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_404aa0:                                     ; preds = %block_404aae, %block_404a90
  %45 = phi i64 [ %143, %block_404aae ], [ %.pre, %block_404a90 ]
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -8
  %48 = add i64 %45, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %47 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %RAX, align 8, !tbaa !2428
  %51 = add i64 %46, -16
  %52 = add i64 %45, 8
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %50, %54
  %56 = icmp ult i64 %50, %54
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %26, align 1, !tbaa !2432
  %58 = trunc i64 %55 to i32
  %59 = and i32 %58, 255
  %60 = tail call i32 @llvm.ctpop.i32(i32 %59) #10
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* %27, align 1, !tbaa !2446
  %64 = xor i64 %54, %50
  %65 = xor i64 %64, %55
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  store i8 %68, i8* %28, align 1, !tbaa !2447
  %69 = icmp eq i64 %55, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %29, align 1, !tbaa !2448
  %71 = lshr i64 %55, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %30, align 1, !tbaa !2449
  %73 = lshr i64 %50, 63
  %74 = lshr i64 %54, 63
  %75 = xor i64 %74, %73
  %76 = xor i64 %71, %73
  %77 = add nuw nsw i64 %76, %75
  %78 = icmp eq i64 %77, 2
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %31, align 1, !tbaa !2450
  %.v = select i1 %69, i64 57, i64 14
  %80 = add i64 %.v, %45
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %69, label %block_404ad9, label %block_404aae

block_404aae:                                     ; preds = %block_404aa0
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC, align 8
  %82 = load i64, i64* %49, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %83 = add i64 %82, 8
  store i64 %83, i64* %RCX, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %26, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #10
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %27, align 1, !tbaa !2446
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %28, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %29, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %30, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2450
  %105 = add i64 %80, 15
  store i64 %105, i64* %PC, align 8
  store i64 %83, i64* %49, align 8
  %106 = load i64*, i64** %32, align 8
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC, align 8
  %109 = load i64, i64* %106, align 8
  store i64 %109, i64* %33, align 1, !tbaa !2451
  store double 0.000000e+00, double* %35, align 1, !tbaa !2451
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -24
  %112 = add i64 %107, 8
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RAX, align 8, !tbaa !2428
  %115 = add i64 %114, 8
  store i64 %115, i64* %RCX, align 8, !tbaa !2428
  %116 = icmp ugt i64 %114, -9
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %26, align 1, !tbaa !2432
  %118 = trunc i64 %115 to i32
  %119 = and i32 %118, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #10
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %27, align 1, !tbaa !2446
  %124 = xor i64 %115, %114
  %125 = lshr i64 %124, 4
  %126 = trunc i64 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %28, align 1, !tbaa !2447
  %128 = icmp eq i64 %115, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %29, align 1, !tbaa !2448
  %130 = lshr i64 %115, 63
  %131 = trunc i64 %130 to i8
  store i8 %131, i8* %30, align 1, !tbaa !2449
  %132 = lshr i64 %114, 63
  %133 = xor i64 %130, %132
  %134 = add nuw nsw i64 %133, %130
  %135 = icmp eq i64 %134, 2
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %31, align 1, !tbaa !2450
  %137 = add i64 %107, 19
  store i64 %137, i64* %PC, align 8
  store i64 %115, i64* %113, align 8
  %138 = load i64*, i64** %32, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC, align 8
  %141 = load i64, i64* %33, align 1
  store i64 %141, i64* %138, align 8
  %142 = load i64, i64* %PC, align 8
  %143 = add i64 %142, -52
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  br label %block_404aa0
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_401d60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  %15 = add i64 %14, 1
  store i64 %15, i64* %PC, align 8
  %16 = load i64, i64* %5, align 8, !tbaa !2428
  %17 = add i64 %16, 8
  %18 = inttoptr i64 %16 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  store i64 %17, i64* %5, align 8, !tbaa !2428
  %20 = add i64 %14, 2
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  %23 = add i64 %16, 16
  store i64 %23, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4061a0__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4061a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406200__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406240__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2451
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #10
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2446
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2447
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2448
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2450
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline
define %struct.Memory* @sub_402560__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402560:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402588

block_402609:                                     ; preds = %block_402588
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #10
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402598:                                     ; preds = %block_402588
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 1920
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402d30__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %2)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 12687
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405760__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %2)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 2322
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402f00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %2)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402588

block_402588:                                     ; preds = %block_402598, %block_402560
  %255 = phi i64 [ %254, %block_402598 ], [ %.pre, %block_402560 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #10
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %.v, %255
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402598, label %block_402609
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406180__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_406180:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_400bc0_frame_dummy() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400bc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_400bc0_frame_dummy_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400bc0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_400780__GLOBAL__sub_I_stepanov_abstraction_cpp() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400780;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @callback_sub_400780__GLOBAL__sub_I_stepanov_abstraction_cpp_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400780__GLOBAL__sub_I_stepanov_abstraction_cpp(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_400b90___do_global_dtors_aux() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400b90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @callback_sub_400b90___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400b90___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208b0_printf(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620950_exit(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208d8_realloc(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @realloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4006e0_clock(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_400770_rand(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @rand to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_406740___libc_csu_fini() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406740;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @callback_sub_406740___libc_csu_fini_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406740___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4066d0___libc_csu_init() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4066d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @callback_sub_4066d0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4066d0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @main() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401270;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401270_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620928___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620938_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4006f0_strlen(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @strlen to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208f8_exp(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exp to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208b8_log(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @log to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_400720_srand(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @srand to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_400750_atoi(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620900_atof(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atof to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404010__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4063a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4063a0__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4032e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4032e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406670;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406670__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403a00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403a00__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405b40__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4035f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4035f0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4061a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4061a0__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401d90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13record_resultdPKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400bd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z13record_resultdPKc_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400bd0__Z13record_resultdPKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402740;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402740__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4027c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4027c0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405ea0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405ea0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405880;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @21, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405880__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401ca0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @22, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401ca0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortIPddEEvT_S2_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405c80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @23, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark13insertionSortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405c80__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4029a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @24, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4029a0__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplIdE12ValueWrapperIT_ERKS2_S4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4062c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @25, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplIdE12ValueWrapperIT_ERKS2_S4__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4062c0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404240;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @26, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404240__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppIdER14PointerWrapperIT_ES3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @27, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppIdER14PointerWrapperIT_ES3__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404760__ZppIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406610;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @28, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406610__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @29, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405fc0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403310;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @30, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403310__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IdEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @31, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405ec0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @32, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405ec0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4065e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @33, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4065e0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4fillIPddEEvT_S2_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401dc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @34, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4fillIPddEEvT_S2_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401dc0__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406310;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @35, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406310__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4024e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @36, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4024e0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.init_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @37, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400690__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403140;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @38, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403140__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404160;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @39, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404160__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401f50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @40, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401f50__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4060e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @41, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4060e0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4023b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @42, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4023b0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4061e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @43, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4061e0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403020;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @44, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403020__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.term_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406744;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @45, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.term_proc_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406744__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406060;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @46, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406060__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmiIdElR14PointerWrapperIT_ES3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404780;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @47, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmiIdElR14PointerWrapperIT_ES3__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404780__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIPdS1_EEvT_S2_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404a90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @48, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyIPdS1_EEvT_S2_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404a90__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404060;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @49, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404060__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4065b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @50, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4065b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403230;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @51, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403230__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405de0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @52, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405de0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401ce0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @53, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401ce0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401be0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @54, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401be0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402a20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @55, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402a20__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @56, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403bb0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIdEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @57, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIdEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401cc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @58, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401cc0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4035a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @59, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4035a0__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403290;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @60, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403290__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402c80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @61, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402c80__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateIPddEvT_S1_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401e80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @62, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIPddEvT_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401e80__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z11start_timerv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401210;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @63, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z11start_timerv_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401210__Z11start_timerv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403060;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @64, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403060__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @65, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405f00__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405a70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @66, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405a70__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @67, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401c40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4036f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @68, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4036f0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @69, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404fd0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4031d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @70, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4031d0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402560;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @71, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402560__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @72, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405e80__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406490;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @73, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406490__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402430;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @74, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402430__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406260;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @75, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406260__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404470;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @76, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404470__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401e40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @77, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401e40__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405320;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @78, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory* readnone) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405320__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4052d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @79, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4052d0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @80, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405f40__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @81, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406550__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405ee0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @82, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405ee0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4031a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @83, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4031a0__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404ff0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @84, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404ff0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402b50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @85, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402b50__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401ee0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @86, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401ee0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403ce0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @87, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403ce0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406140;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @88, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406140__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @89, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403d00__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmmIdER14PointerWrapperIT_ES3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4055e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @90, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmmIdER14PointerWrapperIT_ES3__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4055e0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403090;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @91, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403090__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406200;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @92, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406200__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403cb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @93, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403cb0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @94, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405f20__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @95, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405760__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405140;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @96, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory* readnone) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405140__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405d60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @97, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405d60__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppIdE14PointerWrapperIT_ERS2_i() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4046d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @98, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZppIdE14PointerWrapperIT_ERS2_i_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4046d0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIdEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @99, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIdEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405f60__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4052f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @100, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4052f0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @101, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405f80__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404e40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @102, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory* readnone) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404e40__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @103, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401c80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @104, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4028f0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4062a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @105, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4062a0__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4030e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @106, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4030e0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortIPddEEvT_S2_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @107, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405630__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @108, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403d50__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z9summarizePKciiii() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @109, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z9summarizePKciiii_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400cd0__Z9summarizePKciiii(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4037d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @110, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4037d0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406240;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @111, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406240__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402c00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @112, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402c00__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402280;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @113, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402280__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405440;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @114, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405440__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @115, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402db0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inIPddEEvlT_lT0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404ca0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @116, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark7sift_inIPddEEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404ca0__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406580;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @117, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406580__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateIPddEET0_T_S3_S2_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406500;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @118, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark10accumulateIPddEET0_T_S3_S2__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406500__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedIPdEEbT_S2_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404c20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @119, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9is_sortedIPdEEbT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404c20__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406080;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @120, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406080__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402610;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @121, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402610__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403b50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @122, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403b50__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @123, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401d00__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406180;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @124, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406180__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4021c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @125, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4021c0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZneIdEbRK14PointerWrapperIT_ES4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404710;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @126, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZneIdEbRK14PointerWrapperIT_ES4__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404710__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4043f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @127, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4043f0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z5timerv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401230;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @128, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z5timerv_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401230__Z5timerv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4032b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @129, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4032b0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @130, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402690__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @131, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405e60__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403200;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @132, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403200__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortIPddEEvT_S2_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404ae0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @133, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404ae0__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIdEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @134, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIdEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401d70__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4060c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @135, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4060c0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402f00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @136, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402f00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4047e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @137, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4047e0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK14PointerWrapperIdEdeEv() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404740;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @138, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZNK14PointerWrapperIdEdeEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404740__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406020;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @139, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406020__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @140, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401d20__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @141, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403d20__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltIdEbRK14PointerWrapperIT_ES4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @142, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltIdEbRK14PointerWrapperIT_ES4__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405600__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4030b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @143, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4030b0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406330;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @144, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406330__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403170;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @145, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403170__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z17summarize_simplefP8_IO_FILEPKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400ff0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @146, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z17summarize_simplefP8_IO_FILEPKc_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400ff0__Z17summarize_simplefP8_IO_FILEPKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @147, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401c60__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4041b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @148, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4041b0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406000;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @149, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406000__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406640;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @150, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406640__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN14PointerWrapperIdEC2EPd() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @151, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN14PointerWrapperIdEC2EPd_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401c20__ZN14PointerWrapperIdEC2EPd(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedIPdEvT_S1_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404bd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @152, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIPdEvT_S1__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404bd0__Z13verify_sortedIPdEvT_S1_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @153, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401fd0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z9check_sumd() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @154, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z9check_sumd_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405e00__Z9check_sumd(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402f60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @155, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402f60__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406120;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @156, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406120__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403980;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @157, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403980__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402060;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @158, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402060__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedI14PointerWrapperIdEEvT_S2_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4045b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @159, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperIdEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4045b0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402220;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @160, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402220__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4020e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @161, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4020e0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405020;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @162, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory* readnone) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405020__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403740;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @163, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403740__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402ad0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @164, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402ad0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplIdE14PointerWrapperIT_ERS2_l() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4047b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @165, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplIdE14PointerWrapperIT_ERS2_l_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4047b0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IdEEC2IdEERKT_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4066a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @166, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4066a0__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @167, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402870__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @168, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401c00__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltIdEbRK12ValueWrapperIT_ES4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403260;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @169, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltIdEbRK12ValueWrapperIT_ES4__wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403260__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406420;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @170, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_406420__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark11fill_randomIPddEEvT_S2_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402170;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @171, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark11fill_randomIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402170__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403110;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @172, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403110__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @173, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403d80__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401e00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @174, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401e00__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402300;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @175, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402300__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405950;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @176, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_405950__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @177, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403c70__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404610;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @178, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_404610__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402d30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @179, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402d30__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #10 {
  tail call void @callback_sub_406740___libc_csu_fini()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #10 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %2, %0
  tail call void @callback_sub_4066d0___libc_csu_init()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { naked nobuiltin noinline nounwind }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind }
attributes #12 = { norecurse nounwind }
attributes #13 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2452, !2452, i64 0}
!2452 = !{!"double", !2430, i64 0}
!2453 = !{!2430, !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"float", !2430, i64 0}
!2456 = !{!2445, !2445, i64 0}
