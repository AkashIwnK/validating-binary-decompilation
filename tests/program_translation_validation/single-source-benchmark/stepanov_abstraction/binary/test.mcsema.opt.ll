; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_406700__rodata_type = type <{ [24 x i8], [31 x i8], [62 x i8], [43 x i8], [43 x i8], [39 x i8], [20 x i8], [34 x i8], [18 x i8], [24 x i8], [15 x i8], [15 x i8], [15 x i8], [21 x i8], [15 x i8], [27 x i8], [15 x i8], [33 x i8], [15 x i8], [29 x i8], [15 x i8], [35 x i8], [25 x i8], [31 x i8], [37 x i8], [43 x i8], [39 x i8], [45 x i8], [25 x i8], [31 x i8], [37 x i8], [43 x i8], [39 x i8], [45 x i8], [21 x i8] }>
%seg_608de8__init_array_type = type <{ i64, i64, i64 }>
%seg_608ff0__got_type = type <{ i64, i64 }>
%iterations_type = type <{ [8 x i8] }>
%init_value_type = type <{ [8 x i8] }>
%dpb_type = type <{ i64 }>
%dpe_type = type <{ i64 }>
%dMpb_type = type <{ i64 }>
%dMpe_type = type <{ i64 }>
%DVpb_type = type <{ i64 }>
%DVpe_type = type <{ i64 }>
%DVMpb_type = type <{ i64 }>
%DVMpe_type = type <{ i64 }>
%DV10pb_type = type <{ i64 }>
%DV10pe_type = type <{ i64 }>
%DV10Mpb_type = type <{ i64 }>
%DV10Mpe_type = type <{ i64 }>
%results_type = type <{ [8 x i8] }>
%current_test_type = type <{ [4 x i8] }>
%allocated_results_type = type <{ [4 x i8] }>
%start_time_type = type <{ [8 x i8] }>
%end_time_type = type <{ [8 x i8] }>
%data_type = type <{ [16000 x i8] }>
%VData_type = type <{ [16000 x i8] }>
%V10Data_type = type <{ [16000 x i8] }>
%dataMaster_type = type <{ [16000 x i8] }>
%VDataMaster_type = type <{ [16000 x i8] }>
%V10DataMaster_type = type <{ [16000 x i8] }>
%dPb_type = type <{ [8 x i8] }>
%dPe_type = type <{ [8 x i8] }>
%dMPb_type = type <{ [8 x i8] }>
%dMPe_type = type <{ [8 x i8] }>
%DVPb_type = type <{ [8 x i8] }>
%DVPe_type = type <{ [8 x i8] }>
%DVMPb_type = type <{ [8 x i8] }>
%DVMPe_type = type <{ [8 x i8] }>
%DV10Pb_type = type <{ [8 x i8] }>
%DV10Pe_type = type <{ [8 x i8] }>
%DV10MPb_type = type <{ [8 x i8] }>
%DV10MPe_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_406700__rodata = internal constant %seg_406700__rodata_type <{ [24 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\80\84.A\00\00\00\00\00@\9F@", [31 x i8] c"Could not allocate %d results\0A\00", [62 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00 \00", [43 x i8] c"number %*s time       per second   test0\0A\0A\00", [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", [34 x i8] c"\0Atest %*s description   absolute\0A\00", [18 x i8] c"number %*s time\0A\0A\00", [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", [15 x i8] c"insertion_sort ", [15 x i8] c"double pointer\00", [15 x i8] c"insertion_sort ", [21 x i8] c"double pointer_class\00", [15 x i8] c"insertion_sort ", [27 x i8] c"DoubleValueWrapper pointer\00", [15 x i8] c"insertion_sort ", [33 x i8] c"DoubleValueWrapper pointer_class\00", [15 x i8] c"insertion_sort ", [29 x i8] c"DoubleValueWrapper10 pointer\00", [15 x i8] c"insertion_sort ", [35 x i8] c"DoubleValueWrapper10 pointer_class\00", [25 x i8] c"quicksort double pointer\00", [31 x i8] c"quicksort double pointer_class\00", [37 x i8] c"quicksort DoubleValueWrapper pointer\00", [43 x i8] c"quicksort DoubleValueWrapper pointer_class\00", [39 x i8] c"quicksort DoubleValueWrapper10 pointer\00", [45 x i8] c"quicksort DoubleValueWrapper10 pointer_class\00", [25 x i8] c"heap_sort double pointer\00", [31 x i8] c"heap_sort double pointer_class\00", [37 x i8] c"heap_sort DoubleValueWrapper pointer\00", [43 x i8] c"heap_sort DoubleValueWrapper pointer_class\00", [39 x i8] c"heap_sort DoubleValueWrapper10 pointer\00", [45 x i8] c"heap_sort DoubleValueWrapper10 pointer_class\00", [21 x i8] c"sort test %i failed\0A\00" }>
@seg_608de8__init_array = internal global %seg_608de8__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400b70_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400730__GLOBAL__sub_I_stepanov_abstraction_cpp to i64), i64 ptrtoint (void ()* @callback_sub_400b40___do_global_dtors_aux to i64) }>
@seg_608ff0__got = internal global %seg_608ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@iterations = local_unnamed_addr global %iterations_type <{ [8 x i8] c"@\0D\03\00\00\00\00\00" }>
@init_value = global %init_value_type <{ [8 x i8] c"\00\00\00\00\00\00\08@" }>
@dpb = local_unnamed_addr global %dpb_type <{ i64 ptrtoint (%data_type* @data to i64) }>
@dpe = local_unnamed_addr global %dpe_type <{ i64 ptrtoint (%VData_type* @VData to i64) }>
@dMpb = local_unnamed_addr global %dMpb_type <{ i64 ptrtoint (%dataMaster_type* @dataMaster to i64) }>
@dMpe = local_unnamed_addr global %dMpe_type <{ i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64) }>
@DVpb = local_unnamed_addr global %DVpb_type <{ i64 ptrtoint (%VData_type* @VData to i64) }>
@DVpe = local_unnamed_addr global %DVpe_type <{ i64 ptrtoint (%V10Data_type* @V10Data to i64) }>
@DVMpb = local_unnamed_addr global %DVMpb_type <{ i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64) }>
@DVMpe = local_unnamed_addr global %DVMpe_type <{ i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64) }>
@DV10pb = local_unnamed_addr global %DV10pb_type <{ i64 ptrtoint (%V10Data_type* @V10Data to i64) }>
@DV10pe = local_unnamed_addr global %DV10pe_type <{ i64 ptrtoint (%dataMaster_type* @dataMaster to i64) }>
@DV10Mpb = local_unnamed_addr global %DV10Mpb_type <{ i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64) }>
@DV10Mpe = local_unnamed_addr global %DV10Mpe_type <{ i64 ptrtoint (%dPb_type* @dPb to i64) }>
@results = local_unnamed_addr global %results_type zeroinitializer
@current_test = local_unnamed_addr global %current_test_type zeroinitializer
@allocated_results = local_unnamed_addr global %allocated_results_type zeroinitializer
@start_time = local_unnamed_addr global %start_time_type zeroinitializer
@end_time = local_unnamed_addr global %end_time_type zeroinitializer
@data = global %data_type zeroinitializer
@VData = global %VData_type zeroinitializer
@V10Data = global %V10Data_type zeroinitializer
@dataMaster = global %dataMaster_type zeroinitializer
@VDataMaster = global %VDataMaster_type zeroinitializer
@V10DataMaster = global %V10DataMaster_type zeroinitializer
@dPb = global %dPb_type zeroinitializer
@dPe = global %dPe_type zeroinitializer
@dMPb = global %dMPb_type zeroinitializer
@dMPe = global %dMPe_type zeroinitializer
@DVPb = global %DVPb_type zeroinitializer
@DVPe = global %DVPe_type zeroinitializer
@DVMPb = global %DVMPb_type zeroinitializer
@DVMPe = global %DVMPe_type zeroinitializer
@DV10Pb = global %DV10Pb_type zeroinitializer
@DV10Pe = global %DV10Pe_type zeroinitializer
@DV10MPb = global %DV10MPb_type zeroinitializer
@DV10MPe = global %DV10MPe_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400b70_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400730__GLOBAL__sub_I_stepanov_abstraction_cpp_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400b40___do_global_dtors_aux_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4066f0___libc_csu_fini_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_406680___libc_csu_init_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdS1_EEvT_S2_T0__wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5__wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@21 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3__wrapper
@22 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__wrapper
@23 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__wrapper
@24 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_wrapper
@25 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__wrapper
@26 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__wrapper
@27 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_wrapper
@28 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplIdE14PointerWrapperIT_ERS2_l_wrapper
@29 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@30 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z9check_sumd_wrapper
@31 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_wrapper
@32 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@33 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__wrapper
@34 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltIdEbRK12ValueWrapperIT_ES4__wrapper
@35 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__wrapper
@36 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__wrapper
@37 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z9summarizePKciiii_wrapper
@38 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper
@39 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperIdEdeEv_wrapper
@40 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__wrapper
@41 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13record_resultdPKc_wrapper
@42 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__wrapper
@43 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_wrapper
@44 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@45 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__wrapper
@46 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__wrapper
@47 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@48 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_wrapper
@49 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_wrapper
@50 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__wrapper
@51 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2Ev_wrapper
@52 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiIdElR14PointerWrapperIT_ES3__wrapper
@53 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__wrapper
@54 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperIdEC2EPd_wrapper
@55 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper
@56 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__wrapper
@57 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@58 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_wrapper
@59 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__wrapper
@60 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@61 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__wrapper
@62 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_wrapper
@63 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@64 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__wrapper
@65 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__wrapper
@66 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_wrapper
@67 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIPddEEvlT_lT0__wrapper
@68 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__wrapper
@69 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper
@70 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__wrapper
@71 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__wrapper
@72 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@73 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@74 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__wrapper
@75 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIPddEEvT_S2_T0__wrapper
@76 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_wrapper
@77 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIPddEEvT_S2__wrapper
@78 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__wrapper
@79 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__wrapper
@80 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z11start_timerv_wrapper
@81 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIPddEvT_S1_T0_PKc_wrapper
@82 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__wrapper
@83 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@84 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneIdEbRK14PointerWrapperIT_ES4__wrapper
@85 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__wrapper
@86 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_wrapper
@87 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltIdEbRK14PointerWrapperIT_ES4__wrapper
@88 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__wrapper
@89 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__wrapper
@90 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT__wrapper
@91 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@92 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__wrapper
@93 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_wrapper
@94 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__wrapper
@95 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__wrapper
@96 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@97 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper
@98 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIdEcvT_IdEEv_wrapper
@99 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@100 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__wrapper
@101 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@102 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIPddEEvT_S2__wrapper
@103 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__wrapper
@104 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__wrapper
@105 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@106 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__wrapper
@107 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppIdER14PointerWrapperIT_ES3__wrapper
@108 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplIdE12ValueWrapperIT_ERKS2_S4__wrapper
@109 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_wrapper
@110 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@111 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_wrapper
@112 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__wrapper
@113 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__wrapper
@114 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__wrapper
@115 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@116 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@117 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_wrapper
@118 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@119 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@120 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__wrapper
@121 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__wrapper
@122 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__wrapper
@123 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_wrapper
@124 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__wrapper
@125 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__wrapper
@126 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIPddEEvT_S2__wrapper
@127 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__wrapper
@128 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppIdE14PointerWrapperIT_ERS2_i_wrapper
@129 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z17summarize_simplefP8_IO_FILEPKc_wrapper
@130 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__wrapper
@131 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_wrapper
@132 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@133 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__wrapper
@134 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_wrapper
@135 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@136 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__wrapper
@137 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_wrapper
@138 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@139 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__wrapper
@140 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__wrapper
@141 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIPddEET0_T_S3_S2__wrapper
@142 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIPdEEbT_S2__wrapper
@143 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__wrapper
@144 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@145 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__wrapper
@146 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__wrapper
@147 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z5timerv_wrapper
@148 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__wrapper
@149 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__wrapper
@150 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIdEC2Ev_wrapper
@151 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark11fill_randomIPddEEvT_S2__wrapper
@152 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperIdEEvT_S2__wrapper
@153 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_wrapper
@154 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper
@155 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@156 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2Ev_wrapper
@157 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@158 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper
@159 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv_wrapper
@160 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__wrapper
@161 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIPdEvT_S1__wrapper
@162 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_wrapper
@163 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__wrapper
@164 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@165 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__wrapper
@166 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2IdEERKT__wrapper
@167 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@168 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmIdER14PointerWrapperIT_ES3__wrapper
@169 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper
@170 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_wrapper
@171 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__wrapper
@172 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper
@173 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIdEC2IdEERKT__wrapper
@174 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__wrapper
@175 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__wrapper
@176 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__wrapper
@177 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__wrapper
@178 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__wrapper
@179 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@seg_609100__bss.0.0 = internal unnamed_addr global i1 false, align 8

declare %struct.Memory* @sub_403b60__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405830__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401e30__Z15test_accumulateIPddEvT_S1_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402eb0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404bd0__ZN9benchmark9is_sortedIPdEEbT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4052a0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c10__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401f80__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406530__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4065f0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406270__ZplIdE12ValueWrapperIT_ERKS2_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402a80__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4021d0__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402770__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4036f0__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d10__ZN12ValueWrapperIdEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402d60__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4028a0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406500__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4062c0__ZN12ValueWrapperIS_IdEEC2IS0_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406440__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405a20__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406350__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4023e0__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4032c0__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4045c0__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4052d0__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403120__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405f10__ZNK12ValueWrapperIdEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404790__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405fb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402090__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4030c0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403c60__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4055e0__ZN9benchmark9quicksortIPddEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4039b0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a70___cxx_global_var_init_25_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4030f0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405d10__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402820__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400850___cxx_global_var_init_12_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404730__ZmiIdElR14PointerWrapperIT_ES3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404110__Z13verify_sortedIP12ValueWrapperIdEEvT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4031e0__ZltI12ValueWrapperIdEEbRKS0_IT_ES5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4022b0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401bb0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403150__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400990___cxx_global_var_init_18_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4060d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406090__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402f10__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402bb0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4061b0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405db0__Z9check_sumd_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404a40__ZN9benchmark4copyIPdS1_EEvT_S2_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404df0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402ce0__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4065c0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4053f0__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400910___cxx_global_var_init_14_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402120__ZN9benchmark11fill_randomIPddEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403cd0__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405590__ZmmIdER14PointerWrapperIT_ES3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d70__ZN9benchmark4fillIPddEEvT_S2_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406150__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406650__ZN12ValueWrapperIS_IdEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401e90__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a50___cxx_global_var_init_24_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4009f0___cxx_global_var_init_21_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402230__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405fd0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406590__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400950___cxx_global_var_init_16_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4007f0___cxx_global_var_init_11_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402490__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4009b0___cxx_global_var_init_19_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4064b0__ZN9benchmark10accumulateIPddEET0_T_S3_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405e10__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400640__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406130__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401bf0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405af0__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403b00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402950__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402170__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4008b0___cxx_global_var_init_13_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405900__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4029d0__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404fa0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403550__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405c30__ZN9benchmark13insertionSortIPddEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401db0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IdEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402b00__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401f00__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406070__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406210__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4036a0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405d90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4060f0__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4009d0___cxx_global_var_init_20_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401b90__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406620__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404c50__ZN9benchmark7sift_inIPddEEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405f30__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402010__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404f80__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IdEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4025c0__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400790___cxx_global_var_init_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4061f0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4035a0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406030__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406560__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406010__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403260__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404b80__Z13verify_sortedIPdEvT_S1__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4055b0__ZltIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404010__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404710__ZppIdER14PointerWrapperIT_ES3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402c30__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400930___cxx_global_var_init_15_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401bd0__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404560__Z13verify_sortedI14PointerWrapperIdEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403180__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4062e0__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4043a0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402510__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405e30__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4031b0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4041f0__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406190__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400ad0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4046c0__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404160__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403930__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405710__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a10___cxx_global_var_init_22_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402640__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404420__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_406250__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403240__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402360__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400a30___cxx_global_var_init_23_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405280__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400970___cxx_global_var_init_17_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403010__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403d30__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403fc0__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d20__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403cb0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403780__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4050f0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404a90__ZN9benchmark8heapsortIPddEEvT_S2__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403090__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4026f0__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IdEEC2Ev_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4063d0__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404fd0__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exp(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atoi(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atof(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strlen(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @realloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @srand(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @rand() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @log(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_4065c0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4065c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4065f0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a30___cxx_global_var_init_23(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400a30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10Pe_type* @DV10Pe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4447
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401b90__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_402090__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402090:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -88
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 80
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 5
  store i64 %52, i64* %PC, align 8
  %53 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %54 = load i64, i64* %53, align 1
  %55 = inttoptr i64 %50 to i64*
  store i64 %54, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -36
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i32*
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %68 = bitcast i64* %67 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4020b0

block_4020c0:                                     ; preds = %block_4020b0
  %69 = add i64 %199, -8
  %70 = add i64 %232, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = add i64 %199, -48
  %74 = add i64 %232, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  store i64 %72, i64* %75, align 8
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -16
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = add i64 %76, -56
  %83 = add i64 %78, 8
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  store i64 %81, i64* %84, align 8
  %85 = load i64, i64* %RBP, align 8
  %86 = add i64 %85, -24
  %87 = load i64, i64* %PC, align 8
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %85, -64
  %92 = add i64 %87, 8
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %90, i64* %93, align 8
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -48
  %96 = load i64, i64* %PC, align 8
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %95 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %RDI, align 8, !tbaa !2428
  %100 = add i64 %94, -56
  %101 = add i64 %96, 8
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %100 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RSI, align 8, !tbaa !2428
  %104 = add i64 %94, -64
  %105 = add i64 %96, 13
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %53, align 1, !tbaa !2451
  store double 0.000000e+00, double* %68, align 1, !tbaa !2451
  %108 = add i64 %96, 15416
  %109 = add i64 %96, 18
  %110 = load i64, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_405d10__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %MEMORY.0)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -72
  %116 = load i64, i64* %PC, align 8
  store i64 %115, i64* %RDI, align 8, !tbaa !2428
  %117 = add i64 %116, 9
  store i64 %117, i64* %PC, align 8
  %118 = load i64, i64* %53, align 1
  %119 = inttoptr i64 %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 15517
  %122 = add i64 %120, 5
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_405d90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %113)
  %127 = load i64, i64* %PC, align 8
  %128 = add i64 %127, 15544
  %129 = add i64 %127, 5
  %130 = load i64, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132, align 8
  store i64 %131, i64* %RSP, align 8, !tbaa !2428
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %133 = tail call %struct.Memory* @sub_405db0__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %128, %struct.Memory* %126)
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -36
  %136 = load i64, i64* %PC, align 8
  %137 = add i64 %136, 3
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %135 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = add i32 %139, 1
  %141 = zext i32 %140 to i64
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = icmp eq i32 %139, -1
  %143 = icmp eq i32 %140, 0
  %144 = or i1 %142, %143
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %13, align 1, !tbaa !2432
  %146 = and i32 %140, 255
  %147 = tail call i32 @llvm.ctpop.i32(i32 %146) #8
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  store i8 %150, i8* %20, align 1, !tbaa !2446
  %151 = xor i32 %139, %140
  %152 = lshr i32 %151, 4
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  store i8 %154, i8* %26, align 1, !tbaa !2447
  %155 = zext i1 %143 to i8
  store i8 %155, i8* %29, align 1, !tbaa !2448
  %156 = lshr i32 %140, 31
  %157 = trunc i32 %156 to i8
  store i8 %157, i8* %32, align 1, !tbaa !2449
  %158 = lshr i32 %139, 31
  %159 = xor i32 %156, %158
  %160 = add nuw nsw i32 %159, %156
  %161 = icmp eq i32 %160, 2
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %38, align 1, !tbaa !2450
  %163 = add i64 %136, 9
  store i64 %163, i64* %PC, align 8
  store i32 %140, i32* %138, align 4
  %164 = load i64, i64* %PC, align 8
  %165 = add i64 %164, -86
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  br label %block_4020b0

block_40210b:                                     ; preds = %block_4020b0
  %166 = load i64, i64* %RSP, align 8
  %167 = add i64 %166, 80
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -81
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %13, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %20, align 1, !tbaa !2446
  %176 = xor i64 %166, 16
  %177 = xor i64 %176, %167
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %26, align 1, !tbaa !2447
  %181 = icmp eq i64 %167, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %29, align 1, !tbaa !2448
  %183 = lshr i64 %167, 63
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %32, align 1, !tbaa !2449
  %185 = lshr i64 %166, 63
  %186 = xor i64 %183, %185
  %187 = add nuw nsw i64 %186, %183
  %188 = icmp eq i64 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %38, align 1, !tbaa !2450
  %190 = add i64 %232, 5
  store i64 %190, i64* %PC, align 8
  %191 = add i64 %166, 88
  %192 = inttoptr i64 %167 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RBP, align 8, !tbaa !2428
  store i64 %191, i64* %RSP, align 8, !tbaa !2428
  %194 = add i64 %232, 6
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %191 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %PC, align 8, !tbaa !2428
  %197 = add i64 %166, 96
  store i64 %197, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4020b0:                                     ; preds = %block_4020c0, %block_402090
  %198 = phi i64 [ %.pre, %block_402090 ], [ %165, %block_4020c0 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402090 ], [ %133, %block_4020c0 ]
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -36
  %201 = add i64 %198, 3
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i32*
  %203 = load i32, i32* %202, align 4
  %204 = zext i32 %203 to i64
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %206 = sub i32 %203, %205
  %207 = icmp ult i32 %203, %205
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %13, align 1, !tbaa !2432
  %209 = and i32 %206, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #8
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %20, align 1, !tbaa !2446
  %214 = xor i32 %205, %203
  %215 = xor i32 %214, %206
  %216 = lshr i32 %215, 4
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  store i8 %218, i8* %26, align 1, !tbaa !2447
  %219 = icmp eq i32 %206, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %29, align 1, !tbaa !2448
  %221 = lshr i32 %206, 31
  %222 = trunc i32 %221 to i8
  store i8 %222, i8* %32, align 1, !tbaa !2449
  %223 = lshr i32 %203, 31
  %224 = lshr i32 %205, 31
  %225 = xor i32 %224, %223
  %226 = xor i32 %221, %223
  %227 = add nuw nsw i32 %226, %225
  %228 = icmp eq i32 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %38, align 1, !tbaa !2450
  %230 = icmp ne i8 %222, 0
  %231 = xor i1 %230, %228
  %.v = select i1 %231, i64 16, i64 91
  %232 = add i64 %198, %.v
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  br i1 %231, label %block_4020c0, label %block_40210b
}

; Function Attrs: noinline
define %struct.Memory* @sub_404420__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404420:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 96
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, 760
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_404730__ZmiIdElR14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -32
  %61 = load i64, i64* %RAX, align 8
  %62 = add i64 %58, 11
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %63, align 8
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = ashr i64 %69, 63
  store i64 %70, i64* %RDX, align 8, !tbaa !2428
  %71 = load i64, i64* %RCX, align 8
  %72 = add i64 %66, 9
  store i64 %72, i64* %PC, align 8
  %73 = sext i64 %71 to i128
  %74 = and i128 %73, -18446744073709551616
  %75 = zext i64 %70 to i128
  %76 = shl nuw i128 %75, 64
  %77 = zext i64 %69 to i128
  %78 = or i128 %76, %77
  %79 = zext i64 %71 to i128
  %80 = or i128 %74, %79
  %81 = sdiv i128 %78, %80
  %82 = trunc i128 %81 to i64
  %83 = and i128 %81, 18446744073709551615
  %84 = sext i64 %82 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = or i128 %85, %83
  %87 = icmp eq i128 %81, %86
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %block_404420
  %89 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %72, %struct.Memory* %57) #9
  %.pre = load i64, i64* %RAX, align 8
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:90:                                     ; preds = %block_404420
  %91 = srem i128 %78, %80
  %92 = trunc i128 %91 to i64
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  store i64 %92, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %90, %88
  %93 = phi i64 [ %.pre2, %88 ], [ %64, %90 ]
  %94 = phi i64 [ %.pre1, %88 ], [ %72, %90 ]
  %95 = phi i64 [ %.pre, %88 ], [ %82, %90 ]
  %96 = phi %struct.Memory* [ %89, %88 ], [ %57, %90 ]
  %97 = add i64 %95, -1
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = icmp eq i64 %95, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %13, align 1, !tbaa !2432
  %100 = trunc i64 %97 to i32
  %101 = and i32 %100, 255
  %102 = tail call i32 @llvm.ctpop.i32(i32 %101) #8
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  store i8 %105, i8* %20, align 1, !tbaa !2446
  %106 = xor i64 %95, %97
  %107 = lshr i64 %106, 4
  %108 = trunc i64 %107 to i8
  %109 = and i8 %108, 1
  store i8 %109, i8* %25, align 1, !tbaa !2447
  %110 = icmp eq i64 %97, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %28, align 1, !tbaa !2448
  %112 = lshr i64 %97, 63
  %113 = trunc i64 %112 to i8
  store i8 %113, i8* %31, align 1, !tbaa !2449
  %114 = lshr i64 %95, 63
  %115 = xor i64 %112, %114
  %116 = add nuw nsw i64 %115, %114
  %117 = icmp eq i64 %116, 2
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %37, align 1, !tbaa !2450
  %119 = add i64 %93, -24
  %120 = add i64 %94, 8
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %97, i64* %121, align 8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %123 = bitcast i64* %122 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_40445f

block_4044bc:                                     ; preds = %block_40445f
  %124 = add i64 %424, -32
  %125 = add i64 %440, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %124 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, -1
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = icmp eq i64 %127, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %13, align 1, !tbaa !2432
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #8
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %20, align 1, !tbaa !2446
  %137 = xor i64 %127, %128
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %25, align 1, !tbaa !2447
  %141 = icmp eq i64 %128, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %28, align 1, !tbaa !2448
  %143 = lshr i64 %128, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %31, align 1, !tbaa !2449
  %145 = lshr i64 %127, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %145
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %37, align 1, !tbaa !2450
  %150 = add i64 %440, 12
  store i64 %150, i64* %PC, align 8
  store i64 %128, i64* %427, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_4044c8

block_40455a:                                     ; preds = %block_4044c8
  %151 = load i64, i64* %RSP, align 8
  %152 = add i64 %151, 96
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  %153 = icmp ugt i64 %151, -97
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %13, align 1, !tbaa !2432
  %155 = trunc i64 %152 to i32
  %156 = and i32 %155, 255
  %157 = tail call i32 @llvm.ctpop.i32(i32 %156) #8
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  store i8 %160, i8* %20, align 1, !tbaa !2446
  %161 = xor i64 %151, %152
  %162 = lshr i64 %161, 4
  %163 = trunc i64 %162 to i8
  %164 = and i8 %163, 1
  store i8 %164, i8* %25, align 1, !tbaa !2447
  %165 = icmp eq i64 %152, 0
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %28, align 1, !tbaa !2448
  %167 = lshr i64 %152, 63
  %168 = trunc i64 %167 to i8
  store i8 %168, i8* %31, align 1, !tbaa !2449
  %169 = lshr i64 %151, 63
  %170 = xor i64 %167, %169
  %171 = add nuw nsw i64 %170, %167
  %172 = icmp eq i64 %171, 2
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %37, align 1, !tbaa !2450
  %174 = add i64 %471, 5
  store i64 %174, i64* %PC, align 8
  %175 = add i64 %151, 104
  %176 = inttoptr i64 %152 to i64*
  %177 = load i64, i64* %176, align 8
  store i64 %177, i64* %RBP, align 8, !tbaa !2428
  store i64 %175, i64* %RSP, align 8, !tbaa !2428
  %178 = add i64 %471, 6
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %175 to i64*
  %180 = load i64, i64* %179, align 8
  store i64 %180, i64* %PC, align 8, !tbaa !2428
  %181 = add i64 %151, 112
  store i64 %181, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4044d3:                                     ; preds = %block_4044c8
  %182 = add i64 %442, -8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %183 = add i64 %471, 8
  store i64 %183, i64* %PC, align 8
  %184 = load i64, i64* %445, align 8
  store i64 %184, i64* %RSI, align 8, !tbaa !2428
  %185 = add i64 %471, 653
  %186 = add i64 %471, 13
  %187 = load i64, i64* %RSP, align 8, !tbaa !2428
  %188 = add i64 %187, -8
  %189 = inttoptr i64 %188 to i64*
  store i64 %186, i64* %189, align 8
  store i64 %188, i64* %RSP, align 8, !tbaa !2428
  store i64 %185, i64* %PC, align 8, !tbaa !2428
  %190 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %185, %struct.Memory* %MEMORY.1)
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -72
  %193 = load i64, i64* %PC, align 8
  store i64 %192, i64* %RDI, align 8, !tbaa !2428
  %194 = load i64, i64* %RAX, align 8
  %195 = add i64 %193, 8
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %192 to i64*
  store i64 %194, i64* %196, align 8
  %197 = load i64, i64* %PC, align 8
  %198 = add i64 %197, 520
  %199 = add i64 %197, 5
  %200 = load i64, i64* %RSP, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %199, i64* %202, align 8
  store i64 %201, i64* %RSP, align 8, !tbaa !2428
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  %203 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %198, %struct.Memory* %190)
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -8
  %206 = load i64, i64* %PC, align 8
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %207 = bitcast i64* %RAX to i64**
  %208 = load i64*, i64** %207, align 8
  %209 = add i64 %206, 8
  store i64 %209, i64* %PC, align 8
  %210 = load i64, i64* %208, align 8
  %211 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %210, i64* %211, align 1, !tbaa !2451
  store double 0.000000e+00, double* %123, align 1, !tbaa !2451
  %212 = add i64 %204, -64
  %213 = add i64 %206, 13
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %212 to i64*
  store i64 %210, i64* %214, align 8
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, 502
  %217 = add i64 %215, 5
  %218 = load i64, i64* %RSP, align 8, !tbaa !2428
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %217, i64* %220, align 8
  store i64 %219, i64* %RSP, align 8, !tbaa !2428
  store i64 %216, i64* %PC, align 8, !tbaa !2428
  %221 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %216, %struct.Memory* %203)
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -8
  %224 = load i64, i64* %PC, align 8
  store i64 %223, i64* %RDI, align 8, !tbaa !2428
  %225 = load i64*, i64** %207, align 8
  %226 = add i64 %224, 8
  store i64 %226, i64* %PC, align 8
  %227 = load i64, i64* %225, align 8
  store i64 %227, i64* %211, align 1, !tbaa !2451
  store double 0.000000e+00, double* %123, align 1, !tbaa !2451
  %228 = add i64 %222, -24
  %229 = add i64 %224, 12
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to i64*
  %231 = load i64, i64* %230, align 8
  store i64 %231, i64* %RSI, align 8, !tbaa !2428
  %232 = add i64 %222, -96
  %233 = add i64 %224, 17
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %232 to i64*
  store i64 %227, i64* %234, align 8
  %235 = load i64, i64* %PC, align 8
  %236 = add i64 %235, 592
  %237 = add i64 %235, 5
  %238 = load i64, i64* %RSP, align 8, !tbaa !2428
  %239 = add i64 %238, -8
  %240 = inttoptr i64 %239 to i64*
  store i64 %237, i64* %240, align 8
  store i64 %239, i64* %RSP, align 8, !tbaa !2428
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  %241 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %236, %struct.Memory* %221)
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -80
  %244 = load i64, i64* %PC, align 8
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %245 = load i64, i64* %RAX, align 8
  %246 = add i64 %244, 8
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %243 to i64*
  store i64 %245, i64* %247, align 8
  %248 = load i64, i64* %PC, align 8
  %249 = add i64 %248, 467
  %250 = add i64 %248, 5
  %251 = load i64, i64* %RSP, align 8, !tbaa !2428
  %252 = add i64 %251, -8
  %253 = inttoptr i64 %252 to i64*
  store i64 %250, i64* %253, align 8
  store i64 %252, i64* %RSP, align 8, !tbaa !2428
  store i64 %249, i64* %PC, align 8, !tbaa !2428
  %254 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %249, %struct.Memory* %241)
  %255 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -96
  %258 = add i64 %255, 9
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %211, align 1, !tbaa !2451
  store double 0.000000e+00, double* %123, align 1, !tbaa !2451
  %261 = load i64*, i64** %207, align 8
  %262 = add i64 %255, 13
  store i64 %262, i64* %PC, align 8
  store i64 %260, i64* %261, align 8
  %263 = load i64, i64* %RBP, align 8
  %264 = add i64 %263, -24
  %265 = load i64, i64* %PC, align 8
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %264 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %RDI, align 8, !tbaa !2428
  %269 = add i64 %263, -8
  %270 = add i64 %265, 8
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271, align 8
  store i64 %272, i64* %RAX, align 8, !tbaa !2428
  %273 = add i64 %263, -88
  %274 = add i64 %265, 12
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i64*
  store i64 %272, i64* %275, align 8
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -64
  %278 = load i64, i64* %PC, align 8
  %279 = add i64 %278, 5
  store i64 %279, i64* %PC, align 8
  %280 = inttoptr i64 %277 to i64*
  %281 = load i64, i64* %280, align 8
  store i64 %281, i64* %211, align 1, !tbaa !2451
  store double 0.000000e+00, double* %123, align 1, !tbaa !2451
  %282 = add i64 %276, -88
  %283 = add i64 %278, 9
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %RSI, align 8, !tbaa !2428
  %286 = add i64 %278, 597
  %287 = add i64 %278, 14
  %288 = load i64, i64* %RSP, align 8, !tbaa !2428
  %289 = add i64 %288, -8
  %290 = inttoptr i64 %289 to i64*
  store i64 %287, i64* %290, align 8
  store i64 %289, i64* %RSP, align 8, !tbaa !2428
  store i64 %286, i64* %PC, align 8, !tbaa !2428
  %291 = tail call %struct.Memory* @sub_404790__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %286, %struct.Memory* %254)
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -24
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = add i64 %297, -1
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = icmp ne i64 %297, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %13, align 1, !tbaa !2432
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #8
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %20, align 1, !tbaa !2446
  %307 = xor i64 %297, 16
  %308 = xor i64 %298, %307
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %25, align 1, !tbaa !2447
  %312 = icmp eq i64 %298, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %28, align 1, !tbaa !2448
  %314 = lshr i64 %298, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %31, align 1, !tbaa !2449
  %316 = lshr i64 %297, 63
  %317 = xor i64 %314, %316
  %318 = xor i64 %314, 1
  %319 = add nuw nsw i64 %317, %318
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %37, align 1, !tbaa !2450
  %322 = add i64 %294, 12
  store i64 %322, i64* %PC, align 8
  store i64 %298, i64* %296, align 8
  %323 = load i64, i64* %PC, align 8
  %324 = add i64 %323, -141
  store i64 %324, i64* %PC, align 8, !tbaa !2428
  br label %block_4044c8

block_40446a:                                     ; preds = %block_40445f
  %325 = add i64 %424, -8
  store i64 %325, i64* %RDI, align 8, !tbaa !2428
  %326 = add i64 %440, 8
  store i64 %326, i64* %PC, align 8
  %327 = load i64, i64* %427, align 8
  store i64 %327, i64* %RSI, align 8, !tbaa !2428
  %328 = add i64 %440, 758
  %329 = add i64 %440, 13
  %330 = load i64, i64* %RSP, align 8, !tbaa !2428
  %331 = add i64 %330, -8
  %332 = inttoptr i64 %331 to i64*
  store i64 %329, i64* %332, align 8
  store i64 %331, i64* %RSP, align 8, !tbaa !2428
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  %333 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %328, %struct.Memory* %MEMORY.0)
  %334 = load i64, i64* %RBP, align 8
  %335 = add i64 %334, -48
  %336 = load i64, i64* %PC, align 8
  store i64 %335, i64* %RDI, align 8, !tbaa !2428
  %337 = load i64, i64* %RAX, align 8
  %338 = add i64 %336, 8
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %335 to i64*
  store i64 %337, i64* %339, align 8
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, 625
  %342 = add i64 %340, 5
  %343 = load i64, i64* %RSP, align 8, !tbaa !2428
  %344 = add i64 %343, -8
  %345 = inttoptr i64 %344 to i64*
  store i64 %342, i64* %345, align 8
  store i64 %344, i64* %RSP, align 8, !tbaa !2428
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  %346 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %341, %struct.Memory* %333)
  %347 = bitcast i64* %RAX to i64**
  %348 = load i64*, i64** %347, align 8
  %349 = load i64, i64* %PC, align 8
  %350 = add i64 %349, 4
  store i64 %350, i64* %PC, align 8
  %351 = load i64, i64* %348, align 8
  %352 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %351, i64* %352, align 1, !tbaa !2451
  store double 0.000000e+00, double* %123, align 1, !tbaa !2451
  %353 = load i64, i64* %RBP, align 8
  %354 = add i64 %353, -40
  %355 = add i64 %349, 9
  store i64 %355, i64* %PC, align 8
  %356 = inttoptr i64 %354 to i64*
  store i64 %351, i64* %356, align 8
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -32
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %358 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %363 = add i64 %357, -8
  %364 = add i64 %359, 8
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  store i64 %366, i64* %RAX, align 8, !tbaa !2428
  %367 = add i64 %357, -56
  %368 = add i64 %359, 12
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %367 to i64*
  store i64 %366, i64* %369, align 8
  %370 = load i64, i64* %RBP, align 8
  %371 = add i64 %370, -24
  %372 = load i64, i64* %PC, align 8
  %373 = add i64 %372, 4
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %371 to i64*
  %375 = load i64, i64* %374, align 8
  store i64 %375, i64* %RDX, align 8, !tbaa !2428
  %376 = add i64 %370, -40
  %377 = add i64 %372, 9
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i64*
  %379 = load i64, i64* %378, align 8
  store i64 %379, i64* %352, align 1, !tbaa !2451
  store double 0.000000e+00, double* %123, align 1, !tbaa !2451
  %380 = add i64 %370, -56
  %381 = add i64 %372, 13
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %380 to i64*
  %383 = load i64, i64* %382, align 8
  store i64 %383, i64* %RSI, align 8, !tbaa !2428
  %384 = add i64 %372, 759
  %385 = add i64 %372, 18
  %386 = load i64, i64* %RSP, align 8, !tbaa !2428
  %387 = add i64 %386, -8
  %388 = inttoptr i64 %387 to i64*
  store i64 %385, i64* %388, align 8
  store i64 %387, i64* %RSP, align 8, !tbaa !2428
  store i64 %384, i64* %PC, align 8, !tbaa !2428
  %389 = tail call %struct.Memory* @sub_404790__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %384, %struct.Memory* %346)
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -24
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394, align 8
  %396 = add i64 %395, -1
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = icmp ne i64 %395, 0
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %13, align 1, !tbaa !2432
  %399 = trunc i64 %396 to i32
  %400 = and i32 %399, 255
  %401 = tail call i32 @llvm.ctpop.i32(i32 %400) #8
  %402 = trunc i32 %401 to i8
  %403 = and i8 %402, 1
  %404 = xor i8 %403, 1
  store i8 %404, i8* %20, align 1, !tbaa !2446
  %405 = xor i64 %395, 16
  %406 = xor i64 %396, %405
  %407 = lshr i64 %406, 4
  %408 = trunc i64 %407 to i8
  %409 = and i8 %408, 1
  store i8 %409, i8* %25, align 1, !tbaa !2447
  %410 = icmp eq i64 %396, 0
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %28, align 1, !tbaa !2448
  %412 = lshr i64 %396, 63
  %413 = trunc i64 %412 to i8
  store i8 %413, i8* %31, align 1, !tbaa !2449
  %414 = lshr i64 %395, 63
  %415 = xor i64 %412, %414
  %416 = xor i64 %412, 1
  %417 = add nuw nsw i64 %415, %416
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %37, align 1, !tbaa !2450
  %420 = add i64 %392, 12
  store i64 %420, i64* %PC, align 8
  store i64 %396, i64* %394, align 8
  %421 = load i64, i64* %PC, align 8
  %422 = add i64 %421, -88
  store i64 %422, i64* %PC, align 8, !tbaa !2428
  br label %block_40445f

block_40445f:                                     ; preds = %block_40446a, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %423 = phi i64 [ %.pre3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %422, %block_40446a ]
  %MEMORY.0 = phi %struct.Memory* [ %96, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %389, %block_40446a ]
  %424 = load i64, i64* %RBP, align 8
  %425 = add i64 %424, -24
  %426 = add i64 %423, 5
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to i64*
  %428 = load i64, i64* %427, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %429 = trunc i64 %428 to i32
  %430 = and i32 %429, 255
  %431 = tail call i32 @llvm.ctpop.i32(i32 %430) #8
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  %434 = xor i8 %433, 1
  store i8 %434, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %435 = icmp eq i64 %428, 0
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %28, align 1, !tbaa !2448
  %437 = lshr i64 %428, 63
  %438 = trunc i64 %437 to i8
  store i8 %438, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %439 = icmp ne i8 %438, 0
  %.v = select i1 %439, i64 93, i64 11
  %440 = add i64 %423, %.v
  store i64 %440, i64* %PC, align 8, !tbaa !2428
  br i1 %439, label %block_4044bc, label %block_40446a

block_4044c8:                                     ; preds = %block_4044d3, %block_4044bc
  %441 = phi i64 [ %.pre4, %block_4044bc ], [ %324, %block_4044d3 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4044bc ], [ %291, %block_4044d3 ]
  %442 = load i64, i64* %RBP, align 8
  %443 = add i64 %442, -24
  %444 = add i64 %441, 5
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %443 to i64*
  %446 = load i64, i64* %445, align 8
  %447 = add i64 %446, -1
  %448 = icmp eq i64 %446, 0
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %13, align 1, !tbaa !2432
  %450 = trunc i64 %447 to i32
  %451 = and i32 %450, 255
  %452 = tail call i32 @llvm.ctpop.i32(i32 %451) #8
  %453 = trunc i32 %452 to i8
  %454 = and i8 %453, 1
  %455 = xor i8 %454, 1
  store i8 %455, i8* %20, align 1, !tbaa !2446
  %456 = xor i64 %446, %447
  %457 = lshr i64 %456, 4
  %458 = trunc i64 %457 to i8
  %459 = and i8 %458, 1
  store i8 %459, i8* %25, align 1, !tbaa !2447
  %460 = icmp eq i64 %447, 0
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %28, align 1, !tbaa !2448
  %462 = lshr i64 %447, 63
  %463 = trunc i64 %462 to i8
  store i8 %463, i8* %31, align 1, !tbaa !2449
  %464 = lshr i64 %446, 63
  %465 = xor i64 %462, %464
  %466 = add nuw nsw i64 %465, %464
  %467 = icmp eq i64 %466, 2
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %37, align 1, !tbaa !2450
  %469 = icmp ne i8 %463, 0
  %470 = xor i1 %469, %467
  %.v5 = select i1 %470, i64 146, i64 11
  %471 = add i64 %441, %.v5
  store i64 %471, i64* %PC, align 8, !tbaa !2428
  br i1 %470, label %block_40455a, label %block_4044d3
}

; Function Attrs: noinline
define %struct.Memory* @sub_403b00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403b00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_403b60__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__renamed_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #8
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2446
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %84, %.v
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_403b50, label %block_403b35

block_403b35:                                     ; preds = %block_403b00
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %95 = add i64 %92, -13445
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_403b50

block_403b50:                                     ; preds = %block_403b35, %block_403b00
  %107 = phi i64 [ %92, %block_403b00 ], [ %.pre, %block_403b35 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_403b00 ], [ %100, %block_403b35 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2446
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2450
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_405db0__Z9check_sumd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405db0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -24
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 16
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #8
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 %9, 16
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 16) to i64*), align 16
  %42 = bitcast %union.VectorReg* %5 to double*
  %43 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %41, i64* %43, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %45 = bitcast i64* %44 to double*
  store double 0.000000e+00, double* %45, align 1, !tbaa !2451
  %46 = add i64 %8, -16
  %47 = add i64 %11, 20
  store i64 %47, i64* %PC, align 8
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %4, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %49 = load i64, i64* %48, align 1
  %50 = inttoptr i64 %46 to i64*
  store i64 %49, i64* %50, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 5
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to double*
  %56 = load double, double* %55, align 8
  %57 = bitcast [32 x %union.VectorReg]* %4 to double*
  store double %56, double* %57, align 1, !tbaa !2451
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast i64* %58 to double*
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %60 = load double, double* %42, align 1
  %61 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
  %62 = fmul double %60, %61
  store double %62, double* %42, align 1, !tbaa !2451
  %63 = add i64 %53, 18
  store i64 %63, i64* %PC, align 8
  %64 = fcmp uno double %56, %62
  br i1 %64, label %65, label %75

; <label>:65:                                     ; preds = %block_405db0
  %66 = fadd double %56, %62
  %67 = bitcast double %66 to i64
  %68 = and i64 %67, 9221120237041090560
  %69 = icmp eq i64 %68, 9218868437227405312
  %70 = and i64 %67, 2251799813685247
  %71 = icmp ne i64 %70, 0
  %72 = and i1 %69, %71
  br i1 %72, label %73, label %81

; <label>:73:                                     ; preds = %65
  %74 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %63, %struct.Memory* %2) #9
  %.pre = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:75:                                     ; preds = %block_405db0
  %76 = fcmp ogt double %56, %62
  br i1 %76, label %81, label %77

; <label>:77:                                     ; preds = %75
  %78 = fcmp olt double %56, %62
  br i1 %78, label %81, label %79

; <label>:79:                                     ; preds = %77
  %80 = fcmp oeq double %56, %62
  br i1 %80, label %81, label %85

; <label>:81:                                     ; preds = %79, %77, %75, %65
  %82 = phi i8 [ 0, %75 ], [ 0, %77 ], [ 1, %79 ], [ 1, %65 ]
  %83 = phi i8 [ 0, %75 ], [ 0, %77 ], [ 0, %79 ], [ 1, %65 ]
  %84 = phi i8 [ 0, %75 ], [ 1, %77 ], [ 0, %79 ], [ 1, %65 ]
  store i8 %82, i8* %31, align 1, !tbaa !2453
  store i8 %83, i8* %22, align 1, !tbaa !2453
  store i8 %84, i8* %15, align 1, !tbaa !2453
  br label %85

; <label>:85:                                     ; preds = %81, %79
  store i8 0, i8* %40, align 1, !tbaa !2453
  store i8 0, i8* %34, align 1, !tbaa !2453
  store i8 0, i8* %28, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %85, %73
  %86 = phi i64 [ %.pre, %73 ], [ %63, %85 ]
  %87 = phi %struct.Memory* [ %74, %73 ], [ %2, %85 ]
  %88 = add i64 %86, 17
  %89 = add i64 %86, 6
  %90 = load i8, i8* %31, align 1, !tbaa !2448
  %91 = icmp eq i8 %90, 0
  %92 = select i1 %91, i64 %88, i64 %89
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_405de8, label %block_405ddd

block_405ddd:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %93 = add i64 %92, 11
  %94 = add i64 %92, 6
  %95 = load i8, i8* %22, align 1, !tbaa !2446
  %96 = icmp ne i8 %95, 0
  %97 = select i1 %96, i64 %93, i64 %94
  store i64 %97, i64* %PC, align 8, !tbaa !2428
  %98 = icmp eq i8 %95, 1
  br i1 %98, label %block_405de8, label %block_405de3

block_405de3:                                     ; preds = %block_405ddd
  %99 = add i64 %97, 32
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  br label %block_405e03

block_405de8:                                     ; preds = %block_405ddd, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %100 = phi i64 [ %97, %block_405ddd ], [ %92, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 1033), i64* %RDI, align 8, !tbaa !2428
  %101 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %102 = zext i32 %101 to i64
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %103 = add i64 %100, -22328
  %104 = add i64 %100, 24
  %105 = load i64, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %105, -8
  %107 = inttoptr i64 %106 to i64*
  store i64 %104, i64* %107, align 8
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  %108 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %87)
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -12
  %111 = load i32, i32* %EAX, align 4
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 3
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i32*
  store i32 %111, i32* %114, align 4
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_405e03

block_405e03:                                     ; preds = %block_405de8, %block_405de3
  %115 = phi i64 [ %.pre1, %block_405de8 ], [ %99, %block_405de3 ]
  %MEMORY.1 = phi %struct.Memory* [ %108, %block_405de8 ], [ %87, %block_405de3 ]
  %116 = load i64, i64* %RSP, align 8
  %117 = add i64 %116, 16
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  %118 = icmp ugt i64 %116, -17
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %15, align 1, !tbaa !2432
  %120 = trunc i64 %117 to i32
  %121 = and i32 %120, 255
  %122 = tail call i32 @llvm.ctpop.i32(i32 %121) #8
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  store i8 %125, i8* %22, align 1, !tbaa !2446
  %126 = xor i64 %116, 16
  %127 = xor i64 %126, %117
  %128 = lshr i64 %127, 4
  %129 = trunc i64 %128 to i8
  %130 = and i8 %129, 1
  store i8 %130, i8* %28, align 1, !tbaa !2447
  %131 = icmp eq i64 %117, 0
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %31, align 1, !tbaa !2448
  %133 = lshr i64 %117, 63
  %134 = trunc i64 %133 to i8
  store i8 %134, i8* %34, align 1, !tbaa !2449
  %135 = lshr i64 %116, 63
  %136 = xor i64 %133, %135
  %137 = add nuw nsw i64 %136, %133
  %138 = icmp eq i64 %137, 2
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %40, align 1, !tbaa !2450
  %140 = add i64 %115, 5
  store i64 %140, i64* %PC, align 8
  %141 = add i64 %116, 24
  %142 = inttoptr i64 %117 to i64*
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %RBP, align 8, !tbaa !2428
  store i64 %141, i64* %RSP, align 8, !tbaa !2428
  %144 = add i64 %115, 6
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %141 to i64*
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %147 = add i64 %116, 32
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_402170__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402170:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_402184

block_402192:                                     ; preds = %block_402184
  %53 = add i64 %159, -32
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %193, 8
  store i64 %54, i64* %PC, align 8
  %55 = load i64, i64* %162, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %55, 8
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ugt i64 %55, -9
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %55, %56
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  store i8 %68, i8* %24, align 1, !tbaa !2447
  %69 = icmp eq i64 %56, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %27, align 1, !tbaa !2448
  %71 = lshr i64 %56, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %30, align 1, !tbaa !2449
  %73 = lshr i64 %55, 63
  %74 = xor i64 %71, %73
  %75 = add nuw nsw i64 %74, %71
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %36, align 1, !tbaa !2450
  %78 = add i64 %193, 19
  store i64 %78, i64* %PC, align 8
  store i64 %56, i64* %162, align 8
  %79 = load i64, i64* %RAX, align 8
  %80 = load i64, i64* %PC, align 8
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %81 = add i64 %80, -1157
  %82 = add i64 %80, 8
  %83 = load i64, i64* %RSP, align 8, !tbaa !2428
  %84 = add i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85, align 8
  store i64 %84, i64* %RSP, align 8, !tbaa !2428
  store i64 %81, i64* %PC, align 8, !tbaa !2428
  %86 = tail call %struct.Memory* @sub_401d20__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %81, %struct.Memory* %MEMORY.0)
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -24
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RAX, align 8, !tbaa !2428
  %93 = add i64 %92, 8
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = icmp ugt i64 %92, -9
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %12, align 1, !tbaa !2432
  %96 = trunc i64 %93 to i32
  %97 = and i32 %96, 255
  %98 = tail call i32 @llvm.ctpop.i32(i32 %97) #8
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  store i8 %101, i8* %19, align 1, !tbaa !2446
  %102 = xor i64 %92, %93
  %103 = lshr i64 %102, 4
  %104 = trunc i64 %103 to i8
  %105 = and i8 %104, 1
  store i8 %105, i8* %24, align 1, !tbaa !2447
  %106 = icmp eq i64 %93, 0
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %27, align 1, !tbaa !2448
  %108 = lshr i64 %93, 63
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %30, align 1, !tbaa !2449
  %110 = lshr i64 %92, 63
  %111 = xor i64 %108, %110
  %112 = add nuw nsw i64 %111, %108
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %36, align 1, !tbaa !2450
  %115 = add i64 %89, 15
  store i64 %115, i64* %PC, align 8
  store i64 %93, i64* %91, align 8
  %116 = load i64, i64* %RBP, align 8
  %117 = add i64 %116, -32
  %118 = load i64, i64* %PC, align 8
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %RCX, align 8, !tbaa !2428
  %122 = bitcast i64* %RAX to i64**
  %123 = load i64*, i64** %122, align 8
  %124 = add i64 %118, 7
  store i64 %124, i64* %PC, align 8
  store i64 %121, i64* %123, align 8
  %125 = load i64, i64* %PC, align 8
  %126 = add i64 %125, -63
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_402184

block_4021c8:                                     ; preds = %block_402184
  %127 = load i64, i64* %RSP, align 8
  %128 = add i64 %127, 32
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %129 = icmp ugt i64 %127, -33
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %12, align 1, !tbaa !2432
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #8
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %19, align 1, !tbaa !2446
  %137 = xor i64 %127, %128
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %24, align 1, !tbaa !2447
  %141 = icmp eq i64 %128, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !2448
  %143 = lshr i64 %128, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %30, align 1, !tbaa !2449
  %145 = lshr i64 %127, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %36, align 1, !tbaa !2450
  %150 = add i64 %193, 5
  store i64 %150, i64* %PC, align 8
  %151 = add i64 %127, 40
  %152 = inttoptr i64 %128 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RBP, align 8, !tbaa !2428
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %193, 6
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %157 = add i64 %127, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402184:                                     ; preds = %block_402192, %block_402170
  %158 = phi i64 [ %.pre, %block_402170 ], [ %126, %block_402192 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402170 ], [ %86, %block_402192 ]
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -8
  %161 = add i64 %158, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %159, -16
  %165 = add i64 %158, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %163, %167
  %169 = icmp ult i64 %163, %167
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %12, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %19, align 1, !tbaa !2446
  %177 = xor i64 %167, %163
  %178 = xor i64 %177, %168
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %24, align 1, !tbaa !2447
  %182 = icmp eq i64 %168, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %27, align 1, !tbaa !2448
  %184 = lshr i64 %168, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %30, align 1, !tbaa !2449
  %186 = lshr i64 %163, 63
  %187 = lshr i64 %167, 63
  %188 = xor i64 %187, %186
  %189 = xor i64 %184, %186
  %190 = add nuw nsw i64 %189, %188
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %36, align 1, !tbaa !2450
  %.v = select i1 %182, i64 68, i64 14
  %193 = add i64 %158, %.v
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  br i1 %182, label %block_4021c8, label %block_402192
}

; Function Attrs: noinline
define %struct.Memory* @sub_406500__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406500:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406530__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_402010__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -72
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 64
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = add i64 %9, 12
  store i64 %39, i64* %PC, align 8
  %40 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %41 = load i64, i64* %40, align 1
  %42 = inttoptr i64 %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RDI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RSI, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402030

block_402040:                                     ; preds = %block_402030
  %68 = add i64 %179, -16
  %69 = add i64 %212, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RDI, align 8, !tbaa !2428
  %72 = add i64 %179, -24
  %73 = add i64 %212, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  %76 = add i64 %179, -8
  %77 = add i64 %212, 12
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %179, -48
  %81 = add i64 %212, 16
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 %79, i64* %82, align 8
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -48
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 5
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %40, align 1, !tbaa !2451
  store double 0.000000e+00, double* %67, align 1, !tbaa !2451
  %89 = add i64 %85, 17040
  %90 = add i64 %85, 10
  %91 = load i64, i64* %RSP, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93, align 8
  store i64 %92, i64* %RSP, align 8, !tbaa !2428
  store i64 %89, i64* %PC, align 8, !tbaa !2428
  %94 = tail call %struct.Memory* @sub_4062e0__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__renamed_(%struct.State* nonnull %0, i64 %89, %struct.Memory* %MEMORY.0)
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -56
  %97 = load i64, i64* %PC, align 8
  store i64 %96, i64* %RDI, align 8, !tbaa !2428
  %98 = add i64 %97, 9
  store i64 %98, i64* %PC, align 8
  %99 = load i64, i64* %40, align 1
  %100 = inttoptr i64 %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 15661
  %103 = add i64 %101, 5
  %104 = load i64, i64* %RSP, align 8, !tbaa !2428
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %106, align 8
  store i64 %105, i64* %RSP, align 8, !tbaa !2428
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  %107 = tail call %struct.Memory* @sub_405d90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %102, %struct.Memory* %94)
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 15688
  %110 = add i64 %108, 5
  %111 = load i64, i64* %RSP, align 8, !tbaa !2428
  %112 = add i64 %111, -8
  %113 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %113, align 8
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  store i64 %109, i64* %PC, align 8, !tbaa !2428
  %114 = tail call %struct.Memory* @sub_405db0__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %109, %struct.Memory* %107)
  %115 = load i64, i64* %RBP, align 8
  %116 = add i64 %115, -36
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 3
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %116 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, 1
  %122 = zext i32 %121 to i64
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = icmp eq i32 %120, -1
  %124 = icmp eq i32 %121, 0
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %13, align 1, !tbaa !2432
  %127 = and i32 %121, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %20, align 1, !tbaa !2446
  %132 = xor i32 %120, %121
  %133 = lshr i32 %132, 4
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %25, align 1, !tbaa !2447
  %136 = zext i1 %124 to i8
  store i8 %136, i8* %28, align 1, !tbaa !2448
  %137 = lshr i32 %121, 31
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %31, align 1, !tbaa !2449
  %139 = lshr i32 %120, 31
  %140 = xor i32 %137, %139
  %141 = add nuw nsw i32 %140, %137
  %142 = icmp eq i32 %141, 2
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %37, align 1, !tbaa !2450
  %144 = add i64 %117, 9
  store i64 %144, i64* %PC, align 8
  store i32 %121, i32* %119, align 4
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, -70
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  br label %block_402030

block_40207b:                                     ; preds = %block_402030
  %147 = load i64, i64* %RSP, align 8
  %148 = add i64 %147, 64
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  %149 = icmp ugt i64 %147, -65
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %13, align 1, !tbaa !2432
  %151 = trunc i64 %148 to i32
  %152 = and i32 %151, 255
  %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #8
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  store i8 %156, i8* %20, align 1, !tbaa !2446
  %157 = xor i64 %147, %148
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  store i8 %160, i8* %25, align 1, !tbaa !2447
  %161 = icmp eq i64 %148, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %28, align 1, !tbaa !2448
  %163 = lshr i64 %148, 63
  %164 = trunc i64 %163 to i8
  store i8 %164, i8* %31, align 1, !tbaa !2449
  %165 = lshr i64 %147, 63
  %166 = xor i64 %163, %165
  %167 = add nuw nsw i64 %166, %163
  %168 = icmp eq i64 %167, 2
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %37, align 1, !tbaa !2450
  %170 = add i64 %212, 5
  store i64 %170, i64* %PC, align 8
  %171 = add i64 %147, 72
  %172 = inttoptr i64 %148 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RBP, align 8, !tbaa !2428
  store i64 %171, i64* %RSP, align 8, !tbaa !2428
  %174 = add i64 %212, 6
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %PC, align 8, !tbaa !2428
  %177 = add i64 %147, 80
  store i64 %177, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402030:                                     ; preds = %block_402040, %block_402010
  %178 = phi i64 [ %.pre, %block_402010 ], [ %146, %block_402040 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402010 ], [ %114, %block_402040 ]
  %179 = load i64, i64* %RBP, align 8
  %180 = add i64 %179, -36
  %181 = add i64 %178, 3
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RAX, align 8, !tbaa !2428
  %185 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %186 = sub i32 %183, %185
  %187 = icmp ult i32 %183, %185
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %13, align 1, !tbaa !2432
  %189 = and i32 %186, 255
  %190 = tail call i32 @llvm.ctpop.i32(i32 %189) #8
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  %193 = xor i8 %192, 1
  store i8 %193, i8* %20, align 1, !tbaa !2446
  %194 = xor i32 %185, %183
  %195 = xor i32 %194, %186
  %196 = lshr i32 %195, 4
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  store i8 %198, i8* %25, align 1, !tbaa !2447
  %199 = icmp eq i32 %186, 0
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %28, align 1, !tbaa !2448
  %201 = lshr i32 %186, 31
  %202 = trunc i32 %201 to i8
  store i8 %202, i8* %31, align 1, !tbaa !2449
  %203 = lshr i32 %183, 31
  %204 = lshr i32 %185, 31
  %205 = xor i32 %204, %203
  %206 = xor i32 %201, %203
  %207 = add nuw nsw i32 %206, %205
  %208 = icmp eq i32 %207, 2
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %37, align 1, !tbaa !2450
  %210 = icmp ne i8 %202, 0
  %211 = xor i1 %210, %208
  %.v = select i1 %211, i64 16, i64 75
  %212 = add i64 %178, %.v
  store i64 %212, i64* %PC, align 8, !tbaa !2428
  br i1 %211, label %block_402040, label %block_40207b
}

; Function Attrs: noinline
define %struct.Memory* @sub_4029d0__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4029d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4029f8

block_402a79:                                     ; preds = %block_4029f8
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402a08:                                     ; preds = %block_4029f8
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 6528
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043a0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 6623
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_404420__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 6914
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_404560__Z13verify_sortedI14PointerWrapperIdEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_4029f8

block_4029f8:                                     ; preds = %block_402a08, %block_4029d0
  %255 = phi i64 [ %.pre, %block_4029d0 ], [ %254, %block_402a08 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4029d0 ], [ %222, %block_402a08 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402a08, label %block_402a79
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401c90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_406090__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406090:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 80
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4060f0__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 118
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_406130__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403c20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 118
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_403cb0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #8
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2446
  %94 = xor i64 %84, %85
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2447
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2448
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2449
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2450
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline
define %struct.Memory* @sub_4055b0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4055b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %35, %28
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2432
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #8
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2446
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2447
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405fb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405fb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401df0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = add i64 %9, 8
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %10 to i64*
  store i64 %13, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RDI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %RSI, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  %.pre1 = load i64, i64* %RBP, align 8
  br label %block_401e01

block_401e0f:                                     ; preds = %block_401e01
  %33 = add i64 %111, 4
  store i64 %33, i64* %PC, align 8
  %34 = load i64, i64* %80, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 8
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -9
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %27, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %28, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %29, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %30, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %31, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %32, align 1, !tbaa !2450
  %57 = add i64 %111, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %80, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = bitcast i64* %RAX to i64**
  %65 = load i64*, i64** %64, align 8
  store i64 %63, i64* %65, align 8
  %66 = add i64 %60, -29
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  br label %block_401e01

block_401e2a:                                     ; preds = %block_401e01
  %67 = add i64 %111, 1
  store i64 %67, i64* %PC, align 8
  %68 = load i64, i64* %5, align 8, !tbaa !2428
  %69 = add i64 %68, 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RBP, align 8, !tbaa !2428
  store i64 %69, i64* %5, align 8, !tbaa !2428
  %72 = add i64 %111, 2
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %69 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  %75 = add i64 %68, 16
  store i64 %75, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401e01:                                     ; preds = %block_401e0f, %block_401df0
  %76 = phi i64 [ %58, %block_401e0f ], [ %.pre1, %block_401df0 ]
  %77 = phi i64 [ %66, %block_401e0f ], [ %.pre, %block_401df0 ]
  %78 = add i64 %76, -16
  %79 = add i64 %77, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %78 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = add i64 %76, -24
  %83 = add i64 %77, 8
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sub i64 %81, %85
  %87 = icmp ult i64 %81, %85
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %27, align 1, !tbaa !2432
  %89 = trunc i64 %86 to i32
  %90 = and i32 %89, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #8
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %28, align 1, !tbaa !2446
  %95 = xor i64 %85, %81
  %96 = xor i64 %95, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %29, align 1, !tbaa !2447
  %100 = icmp eq i64 %86, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %30, align 1, !tbaa !2448
  %102 = lshr i64 %86, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %31, align 1, !tbaa !2449
  %104 = lshr i64 %81, 63
  %105 = lshr i64 %85, 63
  %106 = xor i64 %105, %104
  %107 = xor i64 %102, %104
  %108 = add nuw nsw i64 %107, %106
  %109 = icmp eq i64 %108, 2
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %32, align 1, !tbaa !2450
  %.v = select i1 %100, i64 41, i64 14
  %111 = add i64 %77, %.v
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  br i1 %100, label %block_401e2a, label %block_401e0f
}

; Function Attrs: noinline
define %struct.Memory* @sub_400930___cxx_global_var_init_15(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400930:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dPe_type* @dPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4767
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2453
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #8
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2453
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2453
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2453
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = and i64 %55, 1
  %57 = trunc i64 %56 to i8
  store i8 %57, i8* %54, align 1, !tbaa !2453
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2453
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2432
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #8
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2446
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2447
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2448
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2449
  %83 = lshr i64 %62, 63
  %84 = xor i64 %81, %56
  %85 = xor i64 %81, %83
  %86 = add nuw nsw i64 %84, %85
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %58, align 1, !tbaa !2450
  %89 = add i64 %34, 16
  store i64 %89, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -8
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = add i64 %92, 5
  store i64 %96, i64* %PC, align 8
  %97 = load i64, i64* %5, align 8, !tbaa !2428
  %98 = add i64 %97, 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RBP, align 8, !tbaa !2428
  store i64 %98, i64* %5, align 8, !tbaa !2428
  %101 = add i64 %92, 6
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %98 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  %104 = add i64 %97, 16
  store i64 %104, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400640__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400640:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_608ff0__got_type* @seg_608ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #8
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_400640.block_400652_crit_edge, label %block_400650

block_400640.block_400652_crit_edge:              ; preds = %block_400640
  br label %block_400652

block_400650:                                     ; preds = %block_400640
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_400652

block_400652:                                     ; preds = %block_400640.block_400652_crit_edge, %block_400650
  %27 = phi i64 [ %22, %block_400640.block_400652_crit_edge ], [ %.pre1, %block_400650 ]
  %28 = phi i64 [ %4, %block_400640.block_400652_crit_edge ], [ %.pre, %block_400650 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400640.block_400652_crit_edge ], [ %26, %block_400650 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #8
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %28, %29
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2447
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f80__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401f80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -88
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 80
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 5
  store i64 %52, i64* %PC, align 8
  %53 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %54 = load i64, i64* %53, align 1
  %55 = inttoptr i64 %50 to i64*
  store i64 %54, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -36
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i32*
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %68 = bitcast i64* %67 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401fa0

block_401ffb:                                     ; preds = %block_401fa0
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 80
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -81
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %232, 5
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 88
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %232, 6
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 96
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401fb0:                                     ; preds = %block_401fa0
  %101 = add i64 %199, -8
  %102 = add i64 %232, 4
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = add i64 %199, -48
  %106 = add i64 %232, 8
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %105 to i64*
  store i64 %104, i64* %107, align 8
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -16
  %110 = load i64, i64* %PC, align 8
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %108, -56
  %115 = add i64 %110, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -24
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -64
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -48
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -56
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %126, -64
  %137 = add i64 %128, 13
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %53, align 1, !tbaa !2451
  store double 0.000000e+00, double* %68, align 1, !tbaa !2451
  %140 = add i64 %128, 17288
  %141 = add i64 %128, 18
  %142 = load i64, i64* %RSP, align 8, !tbaa !2428
  %143 = add i64 %142, -8
  %144 = inttoptr i64 %143 to i64*
  store i64 %141, i64* %144, align 8
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  %145 = tail call %struct.Memory* @sub_406350__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__renamed_(%struct.State* nonnull %0, i64 %140, %struct.Memory* %MEMORY.0)
  %146 = load i64, i64* %RBP, align 8
  %147 = add i64 %146, -72
  %148 = load i64, i64* %PC, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %149 = add i64 %148, 9
  store i64 %149, i64* %PC, align 8
  %150 = load i64, i64* %53, align 1
  %151 = inttoptr i64 %147 to i64*
  store i64 %150, i64* %151, align 8
  %152 = load i64, i64* %PC, align 8
  %153 = add i64 %152, 16173
  %154 = add i64 %152, 5
  %155 = load i64, i64* %RSP, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %154, i64* %157, align 8
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  store i64 %153, i64* %PC, align 8, !tbaa !2428
  %158 = tail call %struct.Memory* @sub_405f10__ZNK12ValueWrapperIdEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %153, %struct.Memory* %145)
  %159 = load i64, i64* %PC, align 8
  %160 = add i64 %159, 15816
  %161 = add i64 %159, 5
  %162 = load i64, i64* %RSP, align 8, !tbaa !2428
  %163 = add i64 %162, -8
  %164 = inttoptr i64 %163 to i64*
  store i64 %161, i64* %164, align 8
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  store i64 %160, i64* %PC, align 8, !tbaa !2428
  %165 = tail call %struct.Memory* @sub_405db0__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %160, %struct.Memory* %158)
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -36
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 3
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %167 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = add i32 %171, 1
  %173 = zext i32 %172 to i64
  store i64 %173, i64* %RAX, align 8, !tbaa !2428
  %174 = icmp eq i32 %171, -1
  %175 = icmp eq i32 %172, 0
  %176 = or i1 %174, %175
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %13, align 1, !tbaa !2432
  %178 = and i32 %172, 255
  %179 = tail call i32 @llvm.ctpop.i32(i32 %178) #8
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = xor i8 %181, 1
  store i8 %182, i8* %20, align 1, !tbaa !2446
  %183 = xor i32 %171, %172
  %184 = lshr i32 %183, 4
  %185 = trunc i32 %184 to i8
  %186 = and i8 %185, 1
  store i8 %186, i8* %26, align 1, !tbaa !2447
  %187 = zext i1 %175 to i8
  store i8 %187, i8* %29, align 1, !tbaa !2448
  %188 = lshr i32 %172, 31
  %189 = trunc i32 %188 to i8
  store i8 %189, i8* %32, align 1, !tbaa !2449
  %190 = lshr i32 %171, 31
  %191 = xor i32 %188, %190
  %192 = add nuw nsw i32 %191, %188
  %193 = icmp eq i32 %192, 2
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %38, align 1, !tbaa !2450
  %195 = add i64 %168, 9
  store i64 %195, i64* %PC, align 8
  store i32 %172, i32* %170, align 4
  %196 = load i64, i64* %PC, align 8
  %197 = add i64 %196, -86
  store i64 %197, i64* %PC, align 8, !tbaa !2428
  br label %block_401fa0

block_401fa0:                                     ; preds = %block_401fb0, %block_401f80
  %198 = phi i64 [ %.pre, %block_401f80 ], [ %197, %block_401fb0 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401f80 ], [ %165, %block_401fb0 ]
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -36
  %201 = add i64 %198, 3
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i32*
  %203 = load i32, i32* %202, align 4
  %204 = zext i32 %203 to i64
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %206 = sub i32 %203, %205
  %207 = icmp ult i32 %203, %205
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %13, align 1, !tbaa !2432
  %209 = and i32 %206, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #8
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %20, align 1, !tbaa !2446
  %214 = xor i32 %205, %203
  %215 = xor i32 %214, %206
  %216 = lshr i32 %215, 4
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  store i8 %218, i8* %26, align 1, !tbaa !2447
  %219 = icmp eq i32 %206, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %29, align 1, !tbaa !2448
  %221 = lshr i32 %206, 31
  %222 = trunc i32 %221 to i8
  store i8 %222, i8* %32, align 1, !tbaa !2449
  %223 = lshr i32 %203, 31
  %224 = lshr i32 %205, 31
  %225 = xor i32 %224, %223
  %226 = xor i32 %221, %223
  %227 = add nuw nsw i32 %226, %225
  %228 = icmp eq i32 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %38, align 1, !tbaa !2450
  %230 = icmp ne i8 %222, 0
  %231 = xor i1 %230, %228
  %.v = select i1 %231, i64 16, i64 91
  %232 = add i64 %198, %.v
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  br i1 %231, label %block_401fb0, label %block_401ffb
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401c50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4066f0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4066f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a70___cxx_global_var_init_25(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400a70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10MPe_type* @DV10MPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4383
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401b90__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403210:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  store i64 %9, i64* %7, align 8, !tbaa !2428
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -16
  %13 = load i64, i64* %RDI, align 8
  %14 = add i64 %11, 7
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %12 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -16
  %18 = load i64, i64* %RSI, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %23 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RSI, align 8, !tbaa !2428
  %28 = add i64 %24, 8
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %27 to double*
  %30 = load double, double* %29, align 8
  %31 = bitcast [32 x %union.VectorReg]* %3 to double*
  store double %30, double* %31, align 1, !tbaa !2451
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to double*
  store double 0.000000e+00, double* %33, align 1, !tbaa !2451
  %34 = add i64 %22, -16
  %35 = add i64 %24, 12
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %RSI, align 8, !tbaa !2428
  %38 = add i64 %24, 16
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %37 to double*
  %40 = load double, double* %39, align 8
  %41 = bitcast %union.VectorReg* %4 to double*
  store double %40, double* %41, align 1, !tbaa !2451
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %43 = bitcast i64* %42 to double*
  store double 0.000000e+00, double* %43, align 1, !tbaa !2451
  %44 = add i64 %24, 20
  store i64 %44, i64* %PC, align 8
  %45 = fcmp uno double %40, %30
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %block_403210
  %47 = fadd double %40, %30
  %48 = bitcast double %47 to i64
  %49 = and i64 %48, 9221120237041090560
  %50 = icmp eq i64 %49, 9218868437227405312
  %51 = and i64 %48, 2251799813685247
  %52 = icmp ne i64 %51, 0
  %53 = and i1 %50, %52
  br i1 %53, label %54, label %62

; <label>:54:                                     ; preds = %46
  %55 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %44, %struct.Memory* %2) #9
  %.pre = load i64, i64* %PC, align 8
  %.pre1 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %.pre2 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:56:                                     ; preds = %block_403210
  %57 = fcmp ogt double %40, %30
  br i1 %57, label %62, label %58

; <label>:58:                                     ; preds = %56
  %59 = fcmp olt double %40, %30
  br i1 %59, label %62, label %60

; <label>:60:                                     ; preds = %58
  %61 = fcmp oeq double %40, %30
  br i1 %61, label %62, label %69

; <label>:62:                                     ; preds = %60, %58, %56, %46
  %63 = phi i8 [ 0, %56 ], [ 0, %58 ], [ 1, %60 ], [ 1, %46 ]
  %64 = phi i8 [ 0, %56 ], [ 0, %58 ], [ 0, %60 ], [ 1, %46 ]
  %65 = phi i8 [ 0, %56 ], [ 1, %58 ], [ 0, %60 ], [ 1, %46 ]
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %66, align 1, !tbaa !2453
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %67, align 1, !tbaa !2453
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %65, i8* %68, align 1, !tbaa !2453
  br label %69

; <label>:69:                                     ; preds = %62, %60
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %70, align 1, !tbaa !2453
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %71, align 1, !tbaa !2453
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %72, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %69, %54
  %.pre-phi5 = phi i8* [ %72, %69 ], [ %.pre4, %54 ]
  %.pre-phi3 = phi i8* [ %70, %69 ], [ %.pre2, %54 ]
  %.pre-phi = phi i8* [ %71, %69 ], [ %.pre1, %54 ]
  %73 = phi i64 [ %44, %69 ], [ %.pre, %54 ]
  %74 = phi %struct.Memory* [ %2, %69 ], [ %55, %54 ]
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %76 = load i8, i8* %75, align 1, !tbaa !2432
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %78 = load i8, i8* %77, align 1, !tbaa !2448
  %79 = or i8 %78, %76
  %80 = icmp eq i8 %79, 0
  store i8 0, i8* %75, align 1, !tbaa !2432
  %81 = zext i1 %80 to i32
  %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #8
  %83 = trunc i32 %82 to i8
  %84 = xor i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %84, i8* %85, align 1, !tbaa !2446
  %86 = xor i1 %80, true
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi3, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi5, align 1, !tbaa !2447
  %88 = zext i1 %80 to i64
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %73, 9
  store i64 %89, i64* %PC, align 8
  %90 = load i64, i64* %7, align 8, !tbaa !2428
  %91 = add i64 %90, 8
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RBP, align 8, !tbaa !2428
  store i64 %91, i64* %7, align 8, !tbaa !2428
  %94 = add i64 %73, 10
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %91 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %PC, align 8, !tbaa !2428
  %97 = add i64 %90, 16
  store i64 %97, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %74
}

; Function Attrs: noinline
define %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403c90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403930__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403930:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403944

block_40395e:                                     ; preds = %block_403944
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %57 = add i64 %168, 706
  %58 = add i64 %168, 11
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %158)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -32
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX, align 8
  %67 = add i64 %65, 8
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 799
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %70, %struct.Memory* %62)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -24
  %78 = load i64, i64* %PC, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %79 = add i64 %76, -48
  %80 = load i64, i64* %RAX, align 8
  %81 = add i64 %78, 10
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %82, align 8
  %83 = load i64, i64* %PC, align 8
  %84 = add i64 %83, 672
  %85 = add i64 %83, 5
  %86 = load i64, i64* %RSP, align 8, !tbaa !2428
  %87 = add i64 %86, -8
  %88 = inttoptr i64 %87 to i64*
  store i64 %85, i64* %88, align 8
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  store i64 %84, i64* %PC, align 8, !tbaa !2428
  %89 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %84, %struct.Memory* %75)
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -40
  %92 = load i64, i64* %PC, align 8
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %93 = load i64, i64* %RAX, align 8
  %94 = add i64 %92, 8
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %93, i64* %95, align 8
  %96 = load i64, i64* %PC, align 8
  %97 = add i64 %96, 771
  %98 = add i64 %96, 5
  %99 = load i64, i64* %RSP, align 8, !tbaa !2428
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 %98, i64* %101, align 8
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  store i64 %97, i64* %PC, align 8, !tbaa !2428
  %102 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %97, %struct.Memory* %89)
  %103 = load i64, i64* %RBP, align 8
  %104 = add i64 %103, -48
  %105 = load i64, i64* %PC, align 8
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RDI, align 8, !tbaa !2428
  %109 = add i64 %105, 7
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RCX, align 8, !tbaa !2428
  %112 = bitcast %union.anon* %3 to i64**
  %113 = load i64*, i64** %112, align 8
  %114 = add i64 %105, 10
  store i64 %114, i64* %PC, align 8
  store i64 %111, i64* %113, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, -88
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br label %block_403944

block_403959:                                     ; preds = %block_403944
  %117 = load i64, i64* %RSP, align 8
  %118 = add i64 %117, 48
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %119 = icmp ugt i64 %117, -49
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %13, align 1, !tbaa !2432
  %121 = trunc i64 %118 to i32
  %122 = and i32 %121, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #8
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %20, align 1, !tbaa !2446
  %127 = xor i64 %117, 16
  %128 = xor i64 %127, %118
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  store i8 %131, i8* %26, align 1, !tbaa !2447
  %132 = icmp eq i64 %118, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %29, align 1, !tbaa !2448
  %134 = lshr i64 %118, 63
  %135 = trunc i64 %134 to i8
  store i8 %135, i8* %32, align 1, !tbaa !2449
  %136 = lshr i64 %117, 63
  %137 = xor i64 %134, %136
  %138 = add nuw nsw i64 %137, %134
  %139 = icmp eq i64 %138, 2
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %38, align 1, !tbaa !2450
  %141 = add i64 %168, 77
  store i64 %141, i64* %PC, align 8
  %142 = add i64 %117, 56
  %143 = inttoptr i64 %118 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RBP, align 8, !tbaa !2428
  store i64 %142, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %168, 78
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %142 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %PC, align 8, !tbaa !2428
  %148 = add i64 %117, 64
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %158

block_403944:                                     ; preds = %block_40395e, %block_403930
  %149 = phi i64 [ %.pre, %block_403930 ], [ %116, %block_40395e ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_403930 ], [ %102, %block_40395e ]
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -8
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %150, -16
  store i64 %152, i64* %RSI, align 8, !tbaa !2428
  %153 = add i64 %149, 796
  %154 = add i64 %149, 13
  %155 = load i64, i64* %RSP, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %154, i64* %157, align 8
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  store i64 %153, i64* %PC, align 8, !tbaa !2428
  %158 = tail call %struct.Memory* @sub_403c60__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %153, %struct.Memory* %MEMORY.0)
  %159 = load i8, i8* %AL, align 1
  %160 = load i64, i64* %PC, align 8
  %161 = and i8 %159, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %162 = zext i8 %161 to i32
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #8
  %164 = trunc i32 %163 to i8
  %165 = xor i8 %164, 1
  store i8 %165, i8* %20, align 1, !tbaa !2446
  %166 = xor i8 %161, 1
  store i8 %166, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %167 = icmp eq i8 %166, 0
  %.v = select i1 %167, i64 13, i64 8
  %168 = add i64 %160, %.v
  store i64 %168, i64* %PC, align 8, !tbaa !2428
  br i1 %167, label %block_40395e, label %block_403959
}

; Function Attrs: noinline
define %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4046f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405fd0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405fd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 80
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406030__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 118
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_406070__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b80__Z13record_resultdPKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -40
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -16
  %19 = add i64 %10, 12
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %21 = load i64, i64* %20, align 1
  %22 = inttoptr i64 %18 to i64*
  store i64 %21, i64* %22, align 8
  %23 = load i64, i64* %RBP, align 8
  %24 = add i64 %23, -16
  %25 = load i64, i64* %RDI, align 8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %28, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %31 = trunc i64 %30 to i32
  %32 = and i32 %31, 255
  %33 = tail call i32 @llvm.ctpop.i32(i32 %32) #8
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = xor i8 %35, 1
  store i8 %36, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %37 = icmp eq i64 %30, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %15, align 1, !tbaa !2448
  %39 = lshr i64 %30, 63
  %40 = trunc i64 %39 to i8
  store i8 %40, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v = select i1 %37, i64 35, i64 15
  %41 = add i64 %29, %.v
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  br i1 %37, label %block_400b80.block_400bb4_crit_edge, label %block_400ba0

block_400b80.block_400bb4_crit_edge:              ; preds = %block_400b80
  %.pre = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  br label %block_400bb4

block_400bb4:                                     ; preds = %block_400b80.block_400bb4_crit_edge, %block_400ba0
  %42 = phi i32 [ %192, %block_400ba0 ], [ %.pre, %block_400b80.block_400bb4_crit_edge ]
  %43 = phi i64 [ %219, %block_400ba0 ], [ %41, %block_400b80.block_400bb4_crit_edge ]
  %44 = add i32 %42, 10
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %RAX, align 8, !tbaa !2428
  store i32 %44, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  store i64 %30, i64* %RCX, align 8, !tbaa !2428
  %46 = sext i32 %44 to i64
  %47 = shl nsw i64 %46, 4
  store i64 %47, i64* %RDX, align 8, !tbaa !2428
  %.lobit = lshr i32 %44, 31
  %48 = trunc i32 %.lobit to i8
  store i8 %48, i8* %12, align 1, !tbaa !2453
  %49 = trunc i64 %47 to i32
  %50 = and i32 %49, 240
  %51 = tail call i32 @llvm.ctpop.i32(i32 %50) #8
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = xor i8 %53, 1
  store i8 %54, i8* %13, align 1, !tbaa !2453
  store i8 0, i8* %14, align 1, !tbaa !2453
  %55 = icmp eq i32 %44, 0
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %15, align 1, !tbaa !2453
  %57 = lshr i64 %46, 59
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  store i8 %59, i8* %16, align 1, !tbaa !2453
  store i8 0, i8* %17, align 1, !tbaa !2453
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  store i64 %47, i64* %RSI, align 8, !tbaa !2428
  %60 = add i64 %43, -1220
  %61 = add i64 %43, 48
  %62 = load i64, i64* %RSP, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64, align 8
  store i64 %63, i64* %RSP, align 8, !tbaa !2428
  store i64 %60, i64* %PC, align 8, !tbaa !2428
  %65 = tail call fastcc %struct.Memory* @ext_6208d8_realloc(%struct.State* nonnull %0, %struct.Memory* %2)
  %66 = load i64, i64* %RAX, align 8
  %67 = load i64, i64* %PC, align 8
  store i64 %66, i64* bitcast (%results_type* @results to i64*), align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %68 = trunc i64 %66 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #8
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %74 = icmp eq i64 %66, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %15, align 1, !tbaa !2448
  %76 = lshr i64 %66, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v3 = select i1 %74, i64 23, i64 60
  %78 = add i64 %67, %.v3
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  br i1 %74, label %block_400bfb, label %block_400c20

block_400c20:                                     ; preds = %block_400bb4
  %79 = add i64 %78, 5
  store i64 %79, i64* %PC, align 8, !tbaa !2428
  %.pre1 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  br label %block_400c25

block_400c25:                                     ; preds = %block_400ba0, %block_400c20
  %80 = phi i32 [ %.pre1, %block_400c20 ], [ %190, %block_400ba0 ]
  %81 = phi i64 [ %66, %block_400c20 ], [ %30, %block_400ba0 ]
  %82 = phi i64 [ %79, %block_400c20 ], [ %219, %block_400ba0 ]
  %MEMORY.1 = phi %struct.Memory* [ %65, %block_400c20 ], [ %2, %block_400ba0 ]
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -8
  %85 = add i64 %82, 5
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %20, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %89 = bitcast i64* %88 to double*
  store double 0.000000e+00, double* %89, align 1, !tbaa !2451
  %90 = sext i32 %80 to i64
  %91 = shl nsw i64 %90, 4
  store i64 %91, i64* %RCX, align 8, !tbaa !2428
  %92 = lshr i64 %90, 59
  %93 = and i64 %92, 1
  %94 = add i64 %91, %81
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = icmp ult i64 %94, %81
  %96 = icmp ult i64 %94, %91
  %97 = or i1 %95, %96
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %12, align 1, !tbaa !2432
  %99 = trunc i64 %94 to i32
  %100 = and i32 %99, 255
  %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #8
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* %13, align 1, !tbaa !2446
  %105 = xor i64 %91, %81
  %106 = xor i64 %105, %94
  %107 = lshr i64 %106, 4
  %108 = trunc i64 %107 to i8
  %109 = and i8 %108, 1
  store i8 %109, i8* %14, align 1, !tbaa !2447
  %110 = icmp eq i64 %94, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %15, align 1, !tbaa !2448
  %112 = lshr i64 %94, 63
  %113 = trunc i64 %112 to i8
  store i8 %113, i8* %16, align 1, !tbaa !2449
  %114 = lshr i64 %81, 63
  %115 = xor i64 %112, %114
  %116 = xor i64 %112, %93
  %117 = add nuw nsw i64 %115, %116
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %17, align 1, !tbaa !2450
  %120 = add i64 %82, 32
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %94 to i64*
  store i64 %87, i64* %121, align 8
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, -16
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %91, i64* %RDX, align 8, !tbaa !2428
  %129 = add i64 %91, %128
  store i64 %129, i64* %RCX, align 8, !tbaa !2428
  %130 = add i64 %129, 8
  %131 = add i64 %124, 31
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %127, i64* %132, align 8
  %133 = load i64, i64* %PC, align 8
  %134 = add i32 %80, 1
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  store i32 %134, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %136 = load i64, i64* %RSP, align 8
  %137 = add i64 %136, 32
  store i64 %137, i64* %RSP, align 8, !tbaa !2428
  %138 = icmp ugt i64 %136, -33
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %12, align 1, !tbaa !2432
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #8
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %13, align 1, !tbaa !2446
  %146 = xor i64 %136, %137
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  store i8 %149, i8* %14, align 1, !tbaa !2447
  %150 = icmp eq i64 %137, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %15, align 1, !tbaa !2448
  %152 = lshr i64 %137, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* %16, align 1, !tbaa !2449
  %154 = lshr i64 %136, 63
  %155 = xor i64 %152, %154
  %156 = add nuw nsw i64 %155, %152
  %157 = icmp eq i64 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %17, align 1, !tbaa !2450
  %159 = add i64 %133, 22
  store i64 %159, i64* %PC, align 8
  %160 = add i64 %136, 40
  %161 = inttoptr i64 %137 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RBP, align 8, !tbaa !2428
  store i64 %160, i64* %RSP, align 8, !tbaa !2428
  %163 = add i64 %133, 23
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %160 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  %166 = add i64 %136, 48
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400bfb:                                     ; preds = %block_400bb4
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 24), i64* %RDI, align 8, !tbaa !2428
  %167 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %169 = add i64 %78, -1355
  %170 = add i64 %78, 24
  %171 = load i64, i64* %RSP, align 8, !tbaa !2428
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 %170, i64* %173, align 8
  store i64 %172, i64* %RSP, align 8, !tbaa !2428
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  %174 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %65)
  %175 = load i64, i64* %PC, align 8
  store i64 4294967295, i64* %RDI, align 8, !tbaa !2428
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -20
  %178 = load i32, i32* %EAX, align 4
  %179 = add i64 %175, 8
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %177 to i32*
  store i32 %178, i32* %180, align 4
  %181 = load i64, i64* %PC, align 8
  %182 = add i64 %181, -1291
  %183 = add i64 %181, 5
  %184 = load i64, i64* %RSP, align 8, !tbaa !2428
  %185 = add i64 %184, -8
  %186 = inttoptr i64 %185 to i64*
  store i64 %183, i64* %186, align 8
  store i64 %185, i64* %RSP, align 8, !tbaa !2428
  store i64 %182, i64* %PC, align 8, !tbaa !2428
  %187 = tail call fastcc %struct.Memory* @ext_620950_exit(%struct.State* nonnull %0, %struct.Memory* %174)
  %188 = load i64, i64* %PC, align 8
  %189 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %188, %struct.Memory* %187)
  ret %struct.Memory* %189

block_400ba0:                                     ; preds = %block_400b80
  %190 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %191 = zext i32 %190 to i64
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  %193 = sub i32 %190, %192
  %194 = icmp ult i32 %190, %192
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %12, align 1, !tbaa !2432
  %196 = and i32 %193, 255
  %197 = tail call i32 @llvm.ctpop.i32(i32 %196) #8
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  store i8 %200, i8* %13, align 1, !tbaa !2446
  %201 = xor i32 %192, %190
  %202 = xor i32 %201, %193
  %203 = lshr i32 %202, 4
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  store i8 %205, i8* %14, align 1, !tbaa !2447
  %206 = icmp eq i32 %193, 0
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %15, align 1, !tbaa !2448
  %208 = lshr i32 %193, 31
  %209 = trunc i32 %208 to i8
  store i8 %209, i8* %16, align 1, !tbaa !2449
  %210 = lshr i32 %190, 31
  %211 = lshr i32 %192, 31
  %212 = xor i32 %211, %210
  %213 = xor i32 %208, %210
  %214 = add nuw nsw i32 %213, %212
  %215 = icmp eq i32 %214, 2
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %17, align 1, !tbaa !2450
  %217 = icmp ne i8 %209, 0
  %218 = xor i1 %217, %215
  %.v2 = select i1 %218, i64 133, i64 20
  %219 = add i64 %41, %.v2
  store i64 %219, i64* %PC, align 8, !tbaa !2428
  br i1 %218, label %block_400c25, label %block_400bb4
}

; Function Attrs: noinline
define %struct.Memory* @sub_402360__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402360:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402388

block_4023d1:                                     ; preds = %block_402388
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402398:                                     ; preds = %block_402388
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 7208
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403fc0__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 13943
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405a20__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 7514
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404110__Z13verify_sortedIP12ValueWrapperIdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402388

block_402388:                                     ; preds = %block_402398, %block_402360
  %190 = phi i64 [ %.pre, %block_402360 ], [ %189, %block_402398 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402360 ], [ %157, %block_402398 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402398, label %block_4023d1
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009d0___cxx_global_var_init_20(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4009d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVMPb_type* @DVMPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4575
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bb0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_402f10__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402f10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 17
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %28, -32
  %35 = add i64 %30, 8
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RAX, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i32, i32* %ECX, align 4
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = add i64 %38, 162
  %42 = add i64 %38, 10
  %43 = load i64, i64* %RSP, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %46 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %41, %struct.Memory* %2)
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -40
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_402f3c

block_402f3c:                                     ; preds = %block_402f9e, %block_402f10
  %53 = phi i64 [ %.pre, %block_402f10 ], [ %113, %block_402f9e ]
  %MEMORY.0 = phi %struct.Memory* [ %46, %block_402f10 ], [ %176, %block_402f9e ]
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  store i64 %55, i64* %RDI, align 8, !tbaa !2428
  %56 = add i64 %54, -24
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %53, 212
  %58 = add i64 %53, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403010__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %MEMORY.0)
  %63 = load i8, i8* %AL, align 1
  %64 = load i64, i64* %PC, align 8
  %65 = and i8 %63, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %66 = zext i8 %65 to i32
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #8
  %68 = trunc i32 %67 to i8
  %69 = xor i8 %68, 1
  store i8 %69, i8* %13, align 1, !tbaa !2446
  %70 = xor i8 %65, 1
  store i8 %70, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %71 = icmp eq i8 %70, 0
  %.v = select i1 %71, i64 13, i64 8
  %72 = add i64 %64, %.v
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %73 = load i64, i64* %RBP, align 8
  br i1 %71, label %block_402f56, label %block_402f51

block_402fb5:                                     ; preds = %block_402fa3, %block_402f51
  %74 = phi i64 [ %192, %block_402fa3 ], [ %.pre3, %block_402f51 ]
  %MEMORY.1 = phi %struct.Memory* [ %176, %block_402fa3 ], [ %62, %block_402f51 ]
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -1
  %77 = add i64 %74, 3
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i8*
  %79 = load i8, i8* %78, align 1
  %80 = and i8 %79, 1
  %81 = zext i8 %80 to i64
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 64
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -65
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %12, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %13, align 1, !tbaa !2446
  %92 = xor i64 %82, %83
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %14, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %15, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %16, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %17, align 1, !tbaa !2450
  %105 = add i64 %74, 13
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 72
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBP, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %74, 14
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %106 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %112 = add i64 %82, 80
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_402f9e:                                     ; preds = %block_402f56
  %113 = add i64 %186, -98
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br label %block_402f3c

block_402f51:                                     ; preds = %block_402f3c
  %114 = add i64 %73, -1
  %115 = add i64 %72, 100
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i8*
  store i8 1, i8* %116, align 1
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_402fb5

block_402f56:                                     ; preds = %block_402f3c
  %117 = add i64 %73, -16
  store i64 %117, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %118 = add i64 %72, 122
  %119 = add i64 %72, 11
  %120 = load i64, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122, align 8
  store i64 %121, i64* %RSP, align 8, !tbaa !2428
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %123 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %118, %struct.Memory* %62)
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -48
  %126 = load i64, i64* %PC, align 8
  store i64 %125, i64* %RDI, align 8, !tbaa !2428
  %127 = load i64, i64* %RAX, align 8
  %128 = add i64 %126, 8
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %125 to i64*
  store i64 %127, i64* %129, align 8
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %130, 215
  %132 = add i64 %130, 5
  %133 = load i64, i64* %RSP, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 8
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %136 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %131, %struct.Memory* %123)
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -32
  %139 = load i64, i64* %PC, align 8
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %140 = add i64 %137, -64
  %141 = load i64, i64* %RAX, align 8
  %142 = add i64 %139, 10
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %140 to i64*
  store i64 %141, i64* %143, align 8
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 88
  %146 = add i64 %144, 5
  %147 = load i64, i64* %RSP, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %150 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %145, %struct.Memory* %136)
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -56
  %153 = load i64, i64* %PC, align 8
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %154 = load i64, i64* %RAX, align 8
  %155 = add i64 %153, 8
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %152 to i64*
  store i64 %154, i64* %156, align 8
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 187
  %159 = add i64 %157, 5
  %160 = load i64, i64* %RSP, align 8, !tbaa !2428
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %162, align 8
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  store i64 %158, i64* %PC, align 8, !tbaa !2428
  %163 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %158, %struct.Memory* %150)
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -64
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RDI, align 8, !tbaa !2428
  %170 = load i64, i64* %RAX, align 8
  store i64 %170, i64* %RSI, align 8, !tbaa !2428
  %171 = add i64 %166, 214
  %172 = add i64 %166, 12
  %173 = load i64, i64* %RSP, align 8, !tbaa !2428
  %174 = add i64 %173, -8
  %175 = inttoptr i64 %174 to i64*
  store i64 %172, i64* %175, align 8
  store i64 %174, i64* %RSP, align 8, !tbaa !2428
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  %176 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %171, %struct.Memory* %163)
  %177 = load i8, i8* %AL, align 1
  %178 = load i64, i64* %PC, align 8
  %179 = and i8 %177, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %180 = zext i8 %179 to i32
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180) #8
  %182 = trunc i32 %181 to i8
  %183 = xor i8 %182, 1
  store i8 %183, i8* %13, align 1, !tbaa !2446
  %184 = xor i8 %179, 1
  store i8 %184, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %185 = icmp eq i8 %184, 0
  %.v4 = select i1 %185, i64 13, i64 8
  %186 = add i64 %178, %.v4
  store i64 %186, i64* %PC, align 8, !tbaa !2428
  br i1 %185, label %block_402fa3, label %block_402f9e

block_402fa3:                                     ; preds = %block_402f56
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -1
  %189 = add i64 %186, 4
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i8*
  store i8 0, i8* %190, align 1
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 14
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  br label %block_402fb5
}

; Function Attrs: noinline
define %struct.Memory* @sub_4066f4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4066f4:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = icmp ult i64 %3, 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = lshr i64 %4, 63
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12 = lshr i64 %3, 63
  %13 = xor i64 %10, %12
  %14 = add nuw nsw i64 %13, %12
  %15 = icmp eq i64 %14, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = zext i1 %5 to i8
  store i8 %18, i8* %6, align 1, !tbaa !2432
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #8
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %7, align 1, !tbaa !2446
  %25 = xor i64 %4, %3
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %8, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %9, align 1, !tbaa !2448
  %31 = trunc i64 %12 to i8
  store i8 %31, i8* %11, align 1, !tbaa !2449
  store i8 %16, i8* %17, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4026f0__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4026f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402718

block_402761:                                     ; preds = %block_402718
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402728:                                     ; preds = %block_402718
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 6296
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403fc0__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 11159
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_4052d0__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 6602
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404110__Z13verify_sortedIP12ValueWrapperIdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402718

block_402718:                                     ; preds = %block_402728, %block_4026f0
  %190 = phi i64 [ %.pre, %block_4026f0 ], [ %189, %block_402728 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4026f0 ], [ %157, %block_402728 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402728, label %block_402761
}

; Function Attrs: noinline
define %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405ed0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IdEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bb0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402bb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402bd8

block_402c21:                                     ; preds = %block_402bd8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402be8:                                     ; preds = %block_402bd8
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 2408
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403550__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 2471
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_4035a0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 2714
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036a0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402bd8

block_402bd8:                                     ; preds = %block_402be8, %block_402bb0
  %190 = phi i64 [ %.pre, %block_402bb0 ], [ %189, %block_402be8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402bb0 ], [ %157, %block_402be8 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402be8, label %block_402c21
}

; Function Attrs: noinline
define %struct.Memory* @sub_4011e0__Z5timerv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4011e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %11, -2897
  %13 = add i64 %11, 8
  %14 = add i64 %8, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %13, i64* %15, align 8
  store i64 %14, i64* %7, align 8, !tbaa !2428
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %16 = tail call fastcc %struct.Memory* @ext_6208a0_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %17 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %18 = load i64, i64* %PC, align 8
  %19 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 8) to double*), align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %21 = load i64, i64* %RAX, align 8
  store i64 %21, i64* bitcast (%end_time_type* @end_time to i64*), align 8
  %22 = load i64, i64* bitcast (%start_time_type* @start_time to i64*), align 8
  %23 = sub i64 %21, %22
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ult i64 %21, %22
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #8
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, %21
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2447
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2448
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = lshr i64 %21, 63
  %47 = lshr i64 %22, 63
  %48 = xor i64 %47, %46
  %49 = xor i64 %43, %46
  %50 = add nuw nsw i64 %49, %48
  %51 = icmp eq i64 %50, 2
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = sitofp i64 %23 to double
  %55 = bitcast %union.VectorReg* %4 to double*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to <2 x i32>*
  %58 = load <2 x i32>, <2 x i32>* %57, align 1
  %59 = fdiv double %54, %19
  store double %59, double* %55, align 1, !tbaa !2451
  %60 = bitcast double %59 to <2 x i32>
  %61 = extractelement <2 x i32> %60, i32 0
  %62 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %61, i32* %62, align 1, !tbaa !2454
  %63 = extractelement <2 x i32> %60, i32 1
  %64 = getelementptr inbounds i8, i8* %17, i64 4
  %65 = bitcast i8* %64 to i32*
  store i32 %63, i32* %65, align 1, !tbaa !2454
  %66 = extractelement <2 x i32> %58, i32 0
  %67 = bitcast i64* %20 to i32*
  store i32 %66, i32* %67, align 1, !tbaa !2454
  %68 = extractelement <2 x i32> %58, i32 1
  %69 = getelementptr inbounds i8, i8* %17, i64 12
  %70 = bitcast i8* %69 to i32*
  store i32 %68, i32* %70, align 1, !tbaa !2454
  %71 = add i64 %18, 45
  store i64 %71, i64* %PC, align 8
  %72 = load i64, i64* %7, align 8, !tbaa !2428
  %73 = add i64 %72, 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  store i64 %73, i64* %7, align 8, !tbaa !2428
  %76 = add i64 %18, 46
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %73 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  %79 = add i64 %72, 16
  store i64 %79, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %16
}

; Function Attrs: noinline
define %struct.Memory* @sub_4065f0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4065f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406620__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401cd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IdEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_404730__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404730:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2453
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #8
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %39, align 1, !tbaa !2453
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2453
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2453
  store i8 0, i8* %42, align 1, !tbaa !2453
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401bd0__ZN14PointerWrapperIdEC2EPd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401bd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %31, align 8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC, align 8
  %34 = load i64, i64* %5, align 8, !tbaa !2428
  %35 = add i64 %34, 8
  %36 = inttoptr i64 %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %35, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %32, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %34, 16
  store i64 %41, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4055e0__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4055e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = lshr i64 %60, 63
  %62 = add nsw i64 %60, -1
  %63 = icmp eq i64 %60, 0
  %64 = zext i1 %63 to i8
  store i8 %64, i8* %13, align 1, !tbaa !2432
  %65 = trunc i64 %62 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #8
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i64 %60, %62
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2447
  %75 = icmp eq i64 %62, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2448
  %77 = lshr i64 %62, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2449
  %79 = xor i64 %77, %61
  %80 = add nuw nsw i64 %79, %61
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2450
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 269, i64 25
  %86 = add i64 %51, %.v
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_4056fd, label %block_405609

block_4056fd:                                     ; preds = %block_4056d5, %block_4055e0
  %87 = phi i64 [ %86, %block_4055e0 ], [ %.pre10, %block_4056d5 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4055e0 ], [ %320, %block_4056d5 ]
  %88 = load i64, i64* %RSP, align 8
  %89 = add i64 %88, 48
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  %90 = icmp ugt i64 %88, -49
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %13, align 1, !tbaa !2432
  %92 = trunc i64 %89 to i32
  %93 = and i32 %92, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #8
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  store i8 %97, i8* %20, align 1, !tbaa !2446
  %98 = xor i64 %88, 16
  %99 = xor i64 %98, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %26, align 1, !tbaa !2447
  %103 = icmp eq i64 %89, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %29, align 1, !tbaa !2448
  %105 = lshr i64 %89, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %32, align 1, !tbaa !2449
  %107 = lshr i64 %88, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %38, align 1, !tbaa !2450
  %112 = add i64 %87, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %88, 56
  %114 = inttoptr i64 %89 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %87, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %88, 64
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405653:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %120 = load i64, i64* %RBP, align 8
  %121 = add i64 %120, -32
  %122 = add i64 %425, 4
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %125 = add i64 %120, -40
  %126 = add i64 %425, 8
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = sub i64 %124, %128
  %130 = icmp ult i64 %124, %128
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %13, align 1, !tbaa !2432
  %132 = trunc i64 %129 to i32
  %133 = and i32 %132, 255
  %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #8
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  store i8 %137, i8* %20, align 1, !tbaa !2446
  %138 = xor i64 %128, %124
  %139 = xor i64 %138, %129
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* %26, align 1, !tbaa !2447
  %143 = icmp eq i64 %129, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %29, align 1, !tbaa !2448
  %145 = lshr i64 %129, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* %32, align 1, !tbaa !2449
  %147 = lshr i64 %124, 63
  %148 = lshr i64 %128, 63
  %149 = xor i64 %148, %147
  %150 = xor i64 %145, %147
  %151 = add nuw nsw i64 %150, %149
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %38, align 1, !tbaa !2450
  %.v16 = select i1 %130, i64 19, i64 14
  %154 = add i64 %425, %.v16
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  br i1 %130, label %block_405666, label %block_405661

block_4056a6:                                     ; preds = %block_405693
  %155 = add i64 %455, 4
  store i64 %155, i64* %PC, align 8
  %156 = load i64, i64* %428, align 8
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = add i64 %455, 8
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %328, align 1, !tbaa !2451
  store double 0.000000e+00, double* %330, align 1, !tbaa !2451
  %160 = add i64 %229, -48
  %161 = add i64 %455, 13
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  store i64 %159, i64* %162, align 8
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -32
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = add i64 %165, 8
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %328, align 1, !tbaa !2451
  store double 0.000000e+00, double* %330, align 1, !tbaa !2451
  %172 = add i64 %163, -40
  %173 = add i64 %165, 12
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %RAX, align 8, !tbaa !2428
  %176 = add i64 %165, 16
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  store i64 %171, i64* %177, align 8
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -48
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 5
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %328, align 1, !tbaa !2451
  store double 0.000000e+00, double* %330, align 1, !tbaa !2451
  %184 = add i64 %178, -32
  %185 = add i64 %180, 9
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %184 to i64*
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %RAX, align 8, !tbaa !2428
  %188 = add i64 %180, 13
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  store i64 %183, i64* %189, align 8
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, -170
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  br label %block_405626

block_40564e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %192 = add i64 %425, -35
  br label %block_40562b

block_40566b:                                     ; preds = %block_405682, %block_405666
  %193 = phi i64 [ %244, %block_405666 ], [ %480, %block_405682 ]
  %194 = phi i64 [ %120, %block_405666 ], [ %.pre7, %block_405682 ]
  %MEMORY.1 = phi %struct.Memory* [ %420, %block_405666 ], [ %231, %block_405682 ]
  %195 = add i64 %194, -32
  %196 = add i64 %193, 4
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = add i64 %193, 8
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to double*
  %201 = load double, double* %200, align 8
  store double %201, double* %327, align 1, !tbaa !2451
  store double 0.000000e+00, double* %330, align 1, !tbaa !2451
  %202 = add i64 %194, -24
  %203 = add i64 %193, 13
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to double*
  %205 = load double, double* %204, align 8
  store double %205, double* %352, align 1, !tbaa !2451
  store double 0.000000e+00, double* %354, align 1, !tbaa !2451
  %206 = add i64 %193, 17
  store i64 %206, i64* %PC, align 8
  %207 = fcmp uno double %205, %201
  br i1 %207, label %208, label %218

; <label>:208:                                    ; preds = %block_40566b
  %209 = fadd double %205, %201
  %210 = bitcast double %209 to i64
  %211 = and i64 %210, 9221120237041090560
  %212 = icmp eq i64 %211, 9218868437227405312
  %213 = and i64 %210, 2251799813685247
  %214 = icmp ne i64 %213, 0
  %215 = and i1 %212, %214
  br i1 %215, label %216, label %224

; <label>:216:                                    ; preds = %208
  %217 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %206, %struct.Memory* %MEMORY.1) #9
  %.pre8 = load i64, i64* %PC, align 8
  %.pre9 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:218:                                    ; preds = %block_40566b
  %219 = fcmp ogt double %205, %201
  br i1 %219, label %224, label %220

; <label>:220:                                    ; preds = %218
  %221 = fcmp olt double %205, %201
  br i1 %221, label %224, label %222

; <label>:222:                                    ; preds = %220
  %223 = fcmp oeq double %205, %201
  br i1 %223, label %224, label %228

; <label>:224:                                    ; preds = %222, %220, %218, %208
  %225 = phi i8 [ 0, %218 ], [ 0, %220 ], [ 1, %222 ], [ 1, %208 ]
  %226 = phi i8 [ 0, %218 ], [ 0, %220 ], [ 0, %222 ], [ 1, %208 ]
  %227 = phi i8 [ 0, %218 ], [ 1, %220 ], [ 0, %222 ], [ 1, %208 ]
  store i8 %225, i8* %29, align 1, !tbaa !2453
  store i8 %226, i8* %20, align 1, !tbaa !2453
  store i8 %227, i8* %13, align 1, !tbaa !2453
  br label %228

; <label>:228:                                    ; preds = %224, %222
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %228, %216
  %229 = phi i64 [ %.pre9, %216 ], [ %194, %228 ]
  %230 = phi i64 [ %.pre8, %216 ], [ %206, %228 ]
  %231 = phi %struct.Memory* [ %217, %216 ], [ %MEMORY.1, %228 ]
  %232 = load i8, i8* %13, align 1, !tbaa !2432
  %233 = load i8, i8* %29, align 1, !tbaa !2448
  %234 = or i8 %233, %232
  %235 = icmp ne i8 %234, 0
  %.v17 = select i1 %235, i64 23, i64 6
  %236 = add i64 %230, %.v17
  %237 = add i64 %229, -32
  %238 = add i64 %236, 4
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %237 to i64*
  %240 = load i64, i64* %239, align 8
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  br i1 %235, label %block_405693, label %block_405682

block_4056a1:                                     ; preds = %block_405693
  %241 = add i64 %455, 52
  br label %block_4056d5

block_405626:                                     ; preds = %block_405609, %block_4056a6
  %242 = phi i64 [ %.pre, %block_405609 ], [ %191, %block_4056a6 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405609 ], [ %231, %block_4056a6 ]
  %243 = add i64 %242, 5
  br label %block_40562b

block_405666:                                     ; preds = %block_405653
  %244 = add i64 %154, 5
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  br label %block_40566b

block_4056d5:                                     ; preds = %block_405661, %block_4056a1
  %245 = phi i64 [ %241, %block_4056a1 ], [ %481, %block_405661 ]
  %246 = phi i64 [ %229, %block_4056a1 ], [ %120, %block_405661 ]
  %MEMORY.3 = phi %struct.Memory* [ %231, %block_4056a1 ], [ %420, %block_405661 ]
  %247 = add i64 %246, -8
  %248 = add i64 %245, 4
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RDI, align 8, !tbaa !2428
  %251 = add i64 %246, -40
  %252 = add i64 %245, 8
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = add i64 %254, 8
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = icmp ugt i64 %254, -9
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %13, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %20, align 1, !tbaa !2446
  %264 = xor i64 %254, %255
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %26, align 1, !tbaa !2447
  %268 = icmp eq i64 %255, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %29, align 1, !tbaa !2448
  %270 = lshr i64 %255, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %32, align 1, !tbaa !2449
  %272 = lshr i64 %254, 63
  %273 = xor i64 %270, %272
  %274 = add nuw nsw i64 %273, %270
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %38, align 1, !tbaa !2450
  store i64 %255, i64* %RSI, align 8, !tbaa !2428
  %277 = add i64 %245, -245
  %278 = add i64 %245, 20
  %279 = load i64, i64* %RSP, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %278, i64* %281, align 8
  store i64 %280, i64* %RSP, align 8, !tbaa !2428
  store i64 %277, i64* %PC, align 8, !tbaa !2428
  %282 = tail call %struct.Memory* @sub_4055e0__ZN9benchmark9quicksortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %277, %struct.Memory* %MEMORY.3)
  %283 = load i64, i64* %RBP, align 8
  %284 = add i64 %283, -40
  %285 = load i64, i64* %PC, align 8
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %284 to i64*
  %288 = load i64, i64* %287, align 8
  %289 = add i64 %288, 8
  store i64 %289, i64* %RAX, align 8, !tbaa !2428
  %290 = icmp ugt i64 %288, -9
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %13, align 1, !tbaa !2432
  %292 = trunc i64 %289 to i32
  %293 = and i32 %292, 255
  %294 = tail call i32 @llvm.ctpop.i32(i32 %293) #8
  %295 = trunc i32 %294 to i8
  %296 = and i8 %295, 1
  %297 = xor i8 %296, 1
  store i8 %297, i8* %20, align 1, !tbaa !2446
  %298 = xor i64 %288, %289
  %299 = lshr i64 %298, 4
  %300 = trunc i64 %299 to i8
  %301 = and i8 %300, 1
  store i8 %301, i8* %26, align 1, !tbaa !2447
  %302 = icmp eq i64 %289, 0
  %303 = zext i1 %302 to i8
  store i8 %303, i8* %29, align 1, !tbaa !2448
  %304 = lshr i64 %289, 63
  %305 = trunc i64 %304 to i8
  store i8 %305, i8* %32, align 1, !tbaa !2449
  %306 = lshr i64 %288, 63
  %307 = xor i64 %304, %306
  %308 = add nuw nsw i64 %307, %304
  %309 = icmp eq i64 %308, 2
  %310 = zext i1 %309 to i8
  store i8 %310, i8* %38, align 1, !tbaa !2450
  %311 = add i64 %283, -16
  %312 = add i64 %285, 12
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  store i64 %314, i64* %RSI, align 8, !tbaa !2428
  store i64 %289, i64* %RDI, align 8, !tbaa !2428
  %315 = add i64 %285, -265
  %316 = add i64 %285, 20
  %317 = load i64, i64* %RSP, align 8, !tbaa !2428
  %318 = add i64 %317, -8
  %319 = inttoptr i64 %318 to i64*
  store i64 %316, i64* %319, align 8
  store i64 %318, i64* %RSP, align 8, !tbaa !2428
  store i64 %315, i64* %PC, align 8, !tbaa !2428
  %320 = tail call %struct.Memory* @sub_4055e0__ZN9benchmark9quicksortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %315, %struct.Memory* %282)
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_4056fd

block_405609:                                     ; preds = %block_4055e0
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %322 = add i64 %86, 4
  store i64 %322, i64* %PC, align 8
  %323 = load i64, i64* %57, align 8
  store i64 %323, i64* %RAX, align 8, !tbaa !2428
  %324 = add i64 %86, 8
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  %326 = load i64, i64* %325, align 8
  %327 = bitcast [32 x %union.VectorReg]* %3 to double*
  %328 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %326, i64* %328, align 1, !tbaa !2451
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %330 = bitcast i64* %329 to double*
  store double 0.000000e+00, double* %330, align 1, !tbaa !2451
  %331 = add i64 %49, -24
  %332 = add i64 %86, 13
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  store i64 %326, i64* %333, align 8
  %334 = load i64, i64* %RBP, align 8
  %335 = add i64 %334, -8
  %336 = load i64, i64* %PC, align 8
  %337 = add i64 %336, 4
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %335 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = add i64 %334, -32
  %341 = add i64 %336, 8
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i64*
  store i64 %339, i64* %342, align 8
  %343 = load i64, i64* %RBP, align 8
  %344 = add i64 %343, -16
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, 4
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %344 to i64*
  %348 = load i64, i64* %347, align 8
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = add i64 %343, -40
  %350 = add i64 %345, 8
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %349 to i64*
  store i64 %348, i64* %351, align 8
  %352 = bitcast %union.VectorReg* %321 to double*
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %354 = bitcast i64* %353 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_405626

block_40562b:                                     ; preds = %block_405626, %block_40564e
  %.sink = phi i64 [ %243, %block_405626 ], [ %192, %block_40564e ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_405626 ], [ %420, %block_40564e ]
  %355 = load i64, i64* %RBP, align 8
  %356 = add i64 %355, -24
  %357 = add i64 %.sink, 5
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i64*
  %359 = load i64, i64* %358, align 8
  store i64 %359, i64* %328, align 1, !tbaa !2451
  store double 0.000000e+00, double* %330, align 1, !tbaa !2451
  %360 = add i64 %355, -40
  %361 = add i64 %.sink, 9
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = add i64 %363, -8
  store i64 %364, i64* %RCX, align 8, !tbaa !2428
  %365 = icmp ugt i64 %363, 7
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %13, align 1, !tbaa !2432
  %367 = trunc i64 %364 to i32
  %368 = and i32 %367, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #8
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %20, align 1, !tbaa !2446
  %373 = xor i64 %363, 16
  %374 = xor i64 %373, %364
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %26, align 1, !tbaa !2447
  %378 = icmp eq i64 %364, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %29, align 1, !tbaa !2448
  %380 = lshr i64 %364, 63
  %381 = trunc i64 %380 to i8
  store i8 %381, i8* %32, align 1, !tbaa !2449
  %382 = lshr i64 %363, 63
  %383 = xor i64 %380, %382
  %384 = xor i64 %380, 1
  %385 = add nuw nsw i64 %383, %384
  %386 = icmp eq i64 %385, 2
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %38, align 1, !tbaa !2450
  %388 = add i64 %.sink, 20
  store i64 %388, i64* %PC, align 8
  store i64 %364, i64* %362, align 8
  %389 = load i64, i64* %RAX, align 8
  %390 = add i64 %389, -8
  %391 = load i64, i64* %PC, align 8
  %392 = add i64 %391, 5
  store i64 %392, i64* %PC, align 8
  %393 = inttoptr i64 %390 to double*
  %394 = load double, double* %393, align 8
  store double %394, double* %352, align 1, !tbaa !2451
  store double 0.000000e+00, double* %354, align 1, !tbaa !2451
  %395 = add i64 %391, 9
  store i64 %395, i64* %PC, align 8
  %396 = load double, double* %327, align 1
  %397 = fcmp uno double %394, %396
  br i1 %397, label %398, label %408

; <label>:398:                                    ; preds = %block_40562b
  %399 = fadd double %394, %396
  %400 = bitcast double %399 to i64
  %401 = and i64 %400, 9221120237041090560
  %402 = icmp eq i64 %401, 9218868437227405312
  %403 = and i64 %400, 2251799813685247
  %404 = icmp ne i64 %403, 0
  %405 = and i1 %402, %404
  br i1 %405, label %406, label %414

; <label>:406:                                    ; preds = %398
  %407 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %395, %struct.Memory* %MEMORY.4) #9
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:408:                                    ; preds = %block_40562b
  %409 = fcmp ogt double %394, %396
  br i1 %409, label %414, label %410

; <label>:410:                                    ; preds = %408
  %411 = fcmp olt double %394, %396
  br i1 %411, label %414, label %412

; <label>:412:                                    ; preds = %410
  %413 = fcmp oeq double %394, %396
  br i1 %413, label %414, label %418

; <label>:414:                                    ; preds = %412, %410, %408, %398
  %415 = phi i8 [ 0, %408 ], [ 0, %410 ], [ 1, %412 ], [ 1, %398 ]
  %416 = phi i8 [ 0, %408 ], [ 0, %410 ], [ 0, %412 ], [ 1, %398 ]
  %417 = phi i8 [ 0, %408 ], [ 1, %410 ], [ 0, %412 ], [ 1, %398 ]
  store i8 %415, i8* %29, align 1, !tbaa !2453
  store i8 %416, i8* %20, align 1, !tbaa !2453
  store i8 %417, i8* %13, align 1, !tbaa !2453
  br label %418

; <label>:418:                                    ; preds = %414, %412
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %418, %406
  %419 = phi i64 [ %.pre6, %406 ], [ %395, %418 ]
  %420 = phi %struct.Memory* [ %407, %406 ], [ %MEMORY.4, %418 ]
  %421 = load i8, i8* %13, align 1, !tbaa !2432
  %422 = load i8, i8* %29, align 1, !tbaa !2448
  %423 = or i8 %422, %421
  %424 = icmp ne i8 %423, 0
  %.v15 = select i1 %424, i64 11, i64 6
  %425 = add i64 %419, %.v15
  store i64 %425, i64* %PC, align 8, !tbaa !2428
  br i1 %424, label %block_405653, label %block_40564e

block_405693:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %426 = add i64 %229, -40
  %427 = add i64 %236, 8
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428, align 8
  %430 = sub i64 %240, %429
  %431 = icmp ult i64 %240, %429
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %13, align 1, !tbaa !2432
  %433 = trunc i64 %430 to i32
  %434 = and i32 %433, 255
  %435 = tail call i32 @llvm.ctpop.i32(i32 %434) #8
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  store i8 %438, i8* %20, align 1, !tbaa !2446
  %439 = xor i64 %429, %240
  %440 = xor i64 %439, %430
  %441 = lshr i64 %440, 4
  %442 = trunc i64 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %26, align 1, !tbaa !2447
  %444 = icmp eq i64 %430, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %29, align 1, !tbaa !2448
  %446 = lshr i64 %430, 63
  %447 = trunc i64 %446 to i8
  store i8 %447, i8* %32, align 1, !tbaa !2449
  %448 = lshr i64 %240, 63
  %449 = lshr i64 %429, 63
  %450 = xor i64 %449, %448
  %451 = xor i64 %446, %448
  %452 = add nuw nsw i64 %451, %450
  %453 = icmp eq i64 %452, 2
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %38, align 1, !tbaa !2450
  %.v18 = select i1 %431, i64 19, i64 14
  %455 = add i64 %236, %.v18
  store i64 %455, i64* %PC, align 8, !tbaa !2428
  br i1 %431, label %block_4056a6, label %block_4056a1

block_405682:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %456 = add i64 %240, 8
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = icmp ugt i64 %240, -9
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %13, align 1, !tbaa !2432
  %459 = trunc i64 %456 to i32
  %460 = and i32 %459, 255
  %461 = tail call i32 @llvm.ctpop.i32(i32 %460) #8
  %462 = trunc i32 %461 to i8
  %463 = and i8 %462, 1
  %464 = xor i8 %463, 1
  store i8 %464, i8* %20, align 1, !tbaa !2446
  %465 = xor i64 %240, %456
  %466 = lshr i64 %465, 4
  %467 = trunc i64 %466 to i8
  %468 = and i8 %467, 1
  store i8 %468, i8* %26, align 1, !tbaa !2447
  %469 = icmp eq i64 %456, 0
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %29, align 1, !tbaa !2448
  %471 = lshr i64 %456, 63
  %472 = trunc i64 %471 to i8
  store i8 %472, i8* %32, align 1, !tbaa !2449
  %473 = lshr i64 %240, 63
  %474 = xor i64 %471, %473
  %475 = add nuw nsw i64 %474, %471
  %476 = icmp eq i64 %475, 2
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %38, align 1, !tbaa !2450
  %478 = add i64 %236, 12
  store i64 %478, i64* %PC, align 8
  store i64 %456, i64* %239, align 8
  %479 = load i64, i64* %PC, align 8
  %480 = add i64 %479, -35
  store i64 %480, i64* %PC, align 8, !tbaa !2428
  %.pre7 = load i64, i64* %RBP, align 8
  br label %block_40566b

block_405661:                                     ; preds = %block_405653
  %481 = add i64 %154, 116
  br label %block_4056d5
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a90__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400a90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %12 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %RSI, align 8, !tbaa !2428
  store i64 %13, i64* %RDX, align 8, !tbaa !2428
  %16 = and i64 %13, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 240
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %4, align 1, !tbaa !2446
  %23 = icmp eq i64 %16, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !2448
  %25 = lshr i64 %13, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %27 = load i64, i64* %RAX, align 8
  %28 = add i64 %1, 14
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %16, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %16, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %29, i64* %34, align 16
  %35 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_4066f0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_406680___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %36 = add i64 %35, 27
  %37 = add i64 %16, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %11, align 8, !tbaa !2428
  %39 = load i64, i64* getelementptr inbounds (%seg_608ff0__got_type, %seg_608ff0__got_type* @seg_608ff0__got, i64 0, i32 0), align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = tail call fastcc %struct.Memory* @ext_620928___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC, align 8
  %43 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %42, %struct.Memory* %40)
  ret %struct.Memory* %43
}

; Function Attrs: noinline
define %struct.Memory* @sub_400990___cxx_global_var_init_18(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400990:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVPb_type* @DVPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4639
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bb0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_4045c0__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4045c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -72
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %9, -24
  store i64 %20, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %15, align 1, !tbaa !2446
  store i8 1, i8* %17, align 1, !tbaa !2448
  store i8 0, i8* %18, align 1, !tbaa !2449
  store i8 0, i8* %19, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2447
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %12, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -24
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -16
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -32
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, 162
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -40
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast [32 x %union.VectorReg]* %5 to double*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to double*
  %58 = bitcast %union.VectorReg* %6 to double*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %60 = bitcast i64* %59 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4045ec

block_40465b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %61 = add i64 %158, -111
  store i64 %61, i64* %PC, align 8, !tbaa !2428
  br label %block_4045ec

block_404652:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -1
  %64 = add i64 %158, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %63 to i8*
  store i8 0, i8* %65, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 14
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  br label %block_404664

block_404606:                                     ; preds = %block_4045ec
  %68 = add i64 %221, -16
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %15, align 1, !tbaa !2446
  store i8 1, i8* %17, align 1, !tbaa !2448
  store i8 0, i8* %18, align 1, !tbaa !2449
  store i8 0, i8* %19, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2447
  %69 = add i64 %220, 122
  %70 = add i64 %220, 11
  %71 = load i64, i64* %RSP, align 8, !tbaa !2428
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %70, i64* %73, align 8
  store i64 %72, i64* %RSP, align 8, !tbaa !2428
  store i64 %69, i64* %PC, align 8, !tbaa !2428
  %74 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %69, %struct.Memory* %210)
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -48
  %77 = load i64, i64* %PC, align 8
  store i64 %76, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RAX, align 8
  %79 = add i64 %77, 8
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %76 to i64*
  store i64 %78, i64* %80, align 8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 215
  %83 = add i64 %81, 5
  %84 = load i64, i64* %RSP, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86, align 8
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  store i64 %82, i64* %PC, align 8, !tbaa !2428
  %87 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %82, %struct.Memory* %74)
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -32
  %90 = load i64, i64* %PC, align 8
  store i64 %89, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %15, align 1, !tbaa !2446
  store i8 1, i8* %17, align 1, !tbaa !2448
  store i8 0, i8* %18, align 1, !tbaa !2449
  store i8 0, i8* %19, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2447
  %91 = bitcast %union.anon* %3 to i64**
  %92 = load i64*, i64** %91, align 8
  %93 = add i64 %90, 10
  store i64 %93, i64* %PC, align 8
  %94 = load i64, i64* %92, align 8
  %95 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %94, i64* %95, align 1, !tbaa !2451
  store double 0.000000e+00, double* %57, align 1, !tbaa !2451
  %96 = add i64 %88, -64
  %97 = add i64 %90, 15
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %94, i64* %98, align 8
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 83
  %101 = add i64 %99, 5
  %102 = load i64, i64* %RSP, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104, align 8
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %105 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %100, %struct.Memory* %87)
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -56
  %108 = load i64, i64* %PC, align 8
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX, align 8
  %110 = add i64 %108, 8
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %107 to i64*
  store i64 %109, i64* %111, align 8
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 182
  %114 = add i64 %112, 5
  %115 = load i64, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %114, i64* %117, align 8
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %118 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %113, %struct.Memory* %105)
  %119 = bitcast %union.anon* %3 to double**
  %120 = load double*, double** %119, align 8
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC, align 8
  %123 = load double, double* %120, align 8
  store double %123, double* %55, align 1, !tbaa !2451
  store double 0.000000e+00, double* %57, align 1, !tbaa !2451
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -64
  %126 = add i64 %121, 9
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to double*
  %128 = load double, double* %127, align 8
  store double %128, double* %58, align 1, !tbaa !2451
  store double 0.000000e+00, double* %60, align 1, !tbaa !2451
  %129 = add i64 %121, 13
  store i64 %129, i64* %PC, align 8
  %130 = fcmp uno double %123, %128
  br i1 %130, label %131, label %141

; <label>:131:                                    ; preds = %block_404606
  %132 = fadd double %123, %128
  %133 = bitcast double %132 to i64
  %134 = and i64 %133, 9221120237041090560
  %135 = icmp eq i64 %134, 9218868437227405312
  %136 = and i64 %133, 2251799813685247
  %137 = icmp ne i64 %136, 0
  %138 = and i1 %135, %137
  br i1 %138, label %139, label %147

; <label>:139:                                    ; preds = %131
  %140 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %129, %struct.Memory* %118) #9
  %.pre3 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:141:                                    ; preds = %block_404606
  %142 = fcmp ogt double %123, %128
  br i1 %142, label %147, label %143

; <label>:143:                                    ; preds = %141
  %144 = fcmp olt double %123, %128
  br i1 %144, label %147, label %145

; <label>:145:                                    ; preds = %143
  %146 = fcmp oeq double %123, %128
  br i1 %146, label %147, label %151

; <label>:147:                                    ; preds = %145, %143, %141, %131
  %148 = phi i8 [ 0, %141 ], [ 0, %143 ], [ 1, %145 ], [ 1, %131 ]
  %149 = phi i8 [ 0, %141 ], [ 0, %143 ], [ 0, %145 ], [ 1, %131 ]
  %150 = phi i8 [ 0, %141 ], [ 1, %143 ], [ 0, %145 ], [ 1, %131 ]
  store i8 %148, i8* %17, align 1, !tbaa !2453
  store i8 %149, i8* %15, align 1, !tbaa !2453
  store i8 %150, i8* %14, align 1, !tbaa !2453
  br label %151

; <label>:151:                                    ; preds = %147, %145
  store i8 0, i8* %19, align 1, !tbaa !2453
  store i8 0, i8* %18, align 1, !tbaa !2453
  store i8 0, i8* %16, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %151, %139
  %152 = phi i64 [ %.pre3, %139 ], [ %129, %151 ]
  %153 = phi %struct.Memory* [ %140, %139 ], [ %118, %151 ]
  %154 = load i8, i8* %14, align 1, !tbaa !2432
  %155 = load i8, i8* %17, align 1, !tbaa !2448
  %156 = or i8 %155, %154
  %157 = icmp ne i8 %156, 0
  %.v5 = select i1 %157, i64 15, i64 6
  %158 = add i64 %152, %.v5
  store i64 %158, i64* %PC, align 8, !tbaa !2428
  br i1 %157, label %block_40465b, label %block_404652

block_404664:                                     ; preds = %block_404601, %block_404652
  %159 = phi i64 [ %67, %block_404652 ], [ %.pre4, %block_404601 ]
  %MEMORY.0 = phi %struct.Memory* [ %153, %block_404652 ], [ %210, %block_404601 ]
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -1
  %162 = add i64 %159, 3
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i8*
  %164 = load i8, i8* %163, align 1
  %165 = and i8 %164, 1
  %166 = zext i8 %165 to i64
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = load i64, i64* %RSP, align 8
  %168 = add i64 %167, 64
  store i64 %168, i64* %RSP, align 8, !tbaa !2428
  %169 = icmp ugt i64 %167, -65
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %14, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %15, align 1, !tbaa !2446
  %177 = xor i64 %167, %168
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %16, align 1, !tbaa !2447
  %181 = icmp eq i64 %168, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %17, align 1, !tbaa !2448
  %183 = lshr i64 %168, 63
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %18, align 1, !tbaa !2449
  %185 = lshr i64 %167, 63
  %186 = xor i64 %183, %185
  %187 = add nuw nsw i64 %186, %183
  %188 = icmp eq i64 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %19, align 1, !tbaa !2450
  %190 = add i64 %159, 13
  store i64 %190, i64* %PC, align 8
  %191 = add i64 %167, 72
  %192 = inttoptr i64 %168 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RBP, align 8, !tbaa !2428
  store i64 %191, i64* %RSP, align 8, !tbaa !2428
  %194 = add i64 %159, 14
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %191 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %PC, align 8, !tbaa !2428
  %197 = add i64 %167, 80
  store i64 %197, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404601:                                     ; preds = %block_4045ec
  %198 = add i64 %221, -1
  %199 = add i64 %220, 99
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i8*
  store i8 1, i8* %200, align 1
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_404664

block_4045ec:                                     ; preds = %block_40465b, %block_4045c0
  %201 = phi i64 [ %.pre, %block_4045c0 ], [ %61, %block_40465b ]
  %MEMORY.1 = phi %struct.Memory* [ %48, %block_4045c0 ], [ %153, %block_40465b ]
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -16
  store i64 %203, i64* %RDI, align 8, !tbaa !2428
  %204 = add i64 %202, -24
  store i64 %204, i64* %RSI, align 8, !tbaa !2428
  %205 = add i64 %201, 212
  %206 = add i64 %201, 13
  %207 = load i64, i64* %RSP, align 8, !tbaa !2428
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %209, align 8
  store i64 %208, i64* %RSP, align 8, !tbaa !2428
  store i64 %205, i64* %PC, align 8, !tbaa !2428
  %210 = tail call %struct.Memory* @sub_4046c0__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %205, %struct.Memory* %MEMORY.1)
  %211 = load i8, i8* %AL, align 1
  %212 = load i64, i64* %PC, align 8
  %213 = and i8 %211, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %214 = zext i8 %213 to i32
  %215 = tail call i32 @llvm.ctpop.i32(i32 %214) #8
  %216 = trunc i32 %215 to i8
  %217 = xor i8 %216, 1
  store i8 %217, i8* %15, align 1, !tbaa !2446
  %218 = xor i8 %213, 1
  store i8 %218, i8* %17, align 1, !tbaa !2448
  store i8 0, i8* %18, align 1, !tbaa !2449
  store i8 0, i8* %19, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2447
  %219 = icmp eq i8 %218, 0
  %.v = select i1 %219, i64 13, i64 8
  %220 = add i64 %212, %.v
  store i64 %220, i64* %PC, align 8, !tbaa !2428
  %221 = load i64, i64* %RBP, align 8
  br i1 %219, label %block_404606, label %block_404601
}

; Function Attrs: noinline
define %struct.Memory* @sub_4052a0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4052a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %35, %28
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2432
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #8
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2446
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2447
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4061b0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4061b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 80
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406210__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 118
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_406250__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_403c60__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403c60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %42 = icmp ne i64 %28, %35
  store i8 0, i8* %36, align 1, !tbaa !2432
  %43 = zext i1 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #8
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %37, align 1, !tbaa !2446
  %47 = xor i1 %42, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %39, align 1, !tbaa !2448
  store i8 0, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2447
  %49 = zext i1 %42 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401e30__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401e30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 5
  store i64 %52, i64* %PC, align 8
  %53 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %54 = load i64, i64* %53, align 1
  %55 = inttoptr i64 %50 to i64*
  store i64 %54, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -36
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i32*
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %68 = bitcast i64* %67 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401e50

block_401e60:                                     ; preds = %block_401e50
  %69 = add i64 %127, -8
  %70 = add i64 %160, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %127, -16
  %74 = add i64 %160, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %127, -24
  %78 = add i64 %160, 13
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %53, align 1, !tbaa !2451
  store double 0.000000e+00, double* %68, align 1, !tbaa !2451
  %81 = add i64 %160, 18000
  %82 = add i64 %160, 18
  %83 = load i64, i64* %RSP, align 8, !tbaa !2428
  %84 = add i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85, align 8
  store i64 %84, i64* %RSP, align 8, !tbaa !2428
  store i64 %81, i64* %PC, align 8, !tbaa !2428
  %86 = tail call %struct.Memory* @sub_4064b0__ZN9benchmark10accumulateIPddEET0_T_S3_S2__renamed_(%struct.State* nonnull %0, i64 %81, %struct.Memory* %MEMORY.0)
  %87 = load i64, i64* %PC, align 8
  %88 = add i64 %87, 16190
  %89 = add i64 %87, 5
  %90 = load i64, i64* %RSP, align 8, !tbaa !2428
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92, align 8
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  store i64 %88, i64* %PC, align 8, !tbaa !2428
  %93 = tail call %struct.Memory* @sub_405db0__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %88, %struct.Memory* %86)
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -36
  %96 = load i64, i64* %PC, align 8
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %95 to i32*
  %99 = load i32, i32* %98, align 4
  %100 = add i32 %99, 1
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = icmp eq i32 %99, -1
  %103 = icmp eq i32 %100, 0
  %104 = or i1 %102, %103
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %13, align 1, !tbaa !2432
  %106 = and i32 %100, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #8
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %20, align 1, !tbaa !2446
  %111 = xor i32 %99, %100
  %112 = lshr i32 %111, 4
  %113 = trunc i32 %112 to i8
  %114 = and i8 %113, 1
  store i8 %114, i8* %26, align 1, !tbaa !2447
  %115 = zext i1 %103 to i8
  store i8 %115, i8* %29, align 1, !tbaa !2448
  %116 = lshr i32 %100, 31
  %117 = trunc i32 %116 to i8
  store i8 %117, i8* %32, align 1, !tbaa !2449
  %118 = lshr i32 %99, 31
  %119 = xor i32 %116, %118
  %120 = add nuw nsw i32 %119, %116
  %121 = icmp eq i32 %120, 2
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %38, align 1, !tbaa !2450
  %123 = add i64 %96, 9
  store i64 %123, i64* %PC, align 8
  store i32 %100, i32* %98, align 4
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, -48
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  br label %block_401e50

block_401e50:                                     ; preds = %block_401e60, %block_401e30
  %126 = phi i64 [ %.pre, %block_401e30 ], [ %125, %block_401e60 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e30 ], [ %93, %block_401e60 ]
  %127 = load i64, i64* %RBP, align 8
  %128 = add i64 %127, -36
  %129 = add i64 %126, 3
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = zext i32 %131 to i64
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %134 = sub i32 %131, %133
  %135 = icmp ult i32 %131, %133
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %13, align 1, !tbaa !2432
  %137 = and i32 %134, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #8
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %20, align 1, !tbaa !2446
  %142 = xor i32 %133, %131
  %143 = xor i32 %142, %134
  %144 = lshr i32 %143, 4
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  store i8 %146, i8* %26, align 1, !tbaa !2447
  %147 = icmp eq i32 %134, 0
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %29, align 1, !tbaa !2448
  %149 = lshr i32 %134, 31
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %32, align 1, !tbaa !2449
  %151 = lshr i32 %131, 31
  %152 = lshr i32 %133, 31
  %153 = xor i32 %152, %151
  %154 = xor i32 %149, %151
  %155 = add nuw nsw i32 %154, %153
  %156 = icmp eq i32 %155, 2
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %38, align 1, !tbaa !2450
  %158 = icmp ne i8 %150, 0
  %159 = xor i1 %158, %156
  %.v = select i1 %159, i64 16, i64 53
  %160 = add i64 %126, %.v
  store i64 %160, i64* %PC, align 8, !tbaa !2428
  br i1 %159, label %block_401e60, label %block_401e85

block_401e85:                                     ; preds = %block_401e50
  %161 = load i64, i64* %RSP, align 8
  %162 = add i64 %161, 48
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  %163 = icmp ugt i64 %161, -49
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %13, align 1, !tbaa !2432
  %165 = trunc i64 %162 to i32
  %166 = and i32 %165, 255
  %167 = tail call i32 @llvm.ctpop.i32(i32 %166) #8
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  store i8 %170, i8* %20, align 1, !tbaa !2446
  %171 = xor i64 %161, 16
  %172 = xor i64 %171, %162
  %173 = lshr i64 %172, 4
  %174 = trunc i64 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* %26, align 1, !tbaa !2447
  %176 = icmp eq i64 %162, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %29, align 1, !tbaa !2448
  %178 = lshr i64 %162, 63
  %179 = trunc i64 %178 to i8
  store i8 %179, i8* %32, align 1, !tbaa !2449
  %180 = lshr i64 %161, 63
  %181 = xor i64 %178, %180
  %182 = add nuw nsw i64 %181, %178
  %183 = icmp eq i64 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %38, align 1, !tbaa !2450
  %185 = add i64 %160, 5
  store i64 %185, i64* %PC, align 8
  %186 = add i64 %161, 56
  %187 = inttoptr i64 %162 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RBP, align 8, !tbaa !2428
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  %189 = add i64 %160, 6
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %186 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  %192 = add i64 %161, 64
  store i64 %192, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_404560__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404560:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_4045c0__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__renamed_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #8
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2446
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %84, %.v
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_4045b0, label %block_404595

block_404595:                                     ; preds = %block_404560
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %95 = add i64 %92, -16101
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4045b0

block_4045b0:                                     ; preds = %block_404595, %block_404560
  %107 = phi i64 [ %92, %block_404560 ], [ %.pre, %block_404595 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_404560 ], [ %100, %block_404595 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2446
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2450
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_404bd0__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404bd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  store i64 %9, i64* %7, align 8, !tbaa !2428
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -24
  %13 = load i64, i64* %RDI, align 8
  %14 = add i64 %11, 7
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %12 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -24
  %18 = load i64, i64* %RSI, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -16
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %23 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RSI, align 8, !tbaa !2428
  %28 = add i64 %22, -32
  %29 = add i64 %24, 8
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -16
  %33 = load i64, i64* %PC, align 8
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC, align 8
  %35 = inttoptr i64 %32 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 8
  store i64 %37, i64* %RSI, align 8, !tbaa !2428
  %38 = icmp ugt i64 %36, -9
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !2432
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 255
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #8
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %46, i8* %47, align 1, !tbaa !2446
  %48 = xor i64 %36, %37
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %37, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %37, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %36, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %56
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = add i64 %33, 12
  store i64 %65, i64* %PC, align 8
  store i64 %37, i64* %35, align 8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %68 = bitcast %union.VectorReg* %4 to double*
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %70 = bitcast i64* %69 to double*
  %71 = bitcast [32 x %union.VectorReg]* %3 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404bf0

block_404c3c:                                     ; preds = %block_404bf0
  %72 = add i64 %77, -1
  %73 = add i64 %111, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i8*
  store i8 1, i8* %74, align 1
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_404c40

block_404c37:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %75 = add i64 %212, -71
  store i64 %75, i64* %PC, align 8, !tbaa !2428
  br label %block_404bf0

block_404bf0:                                     ; preds = %block_404c37, %block_404bd0
  %76 = phi i64 [ %.pre, %block_404bd0 ], [ %75, %block_404c37 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_404bd0 ], [ %207, %block_404c37 ]
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -16
  %79 = add i64 %76, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %78 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = add i64 %77, -24
  %83 = add i64 %76, 8
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sub i64 %81, %85
  %87 = icmp ult i64 %81, %85
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %40, align 1, !tbaa !2432
  %89 = trunc i64 %86 to i32
  %90 = and i32 %89, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #8
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %47, align 1, !tbaa !2446
  %95 = xor i64 %85, %81
  %96 = xor i64 %95, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %52, align 1, !tbaa !2447
  %100 = icmp eq i64 %86, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %55, align 1, !tbaa !2448
  %102 = lshr i64 %86, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %58, align 1, !tbaa !2449
  %104 = lshr i64 %81, 63
  %105 = lshr i64 %85, 63
  %106 = xor i64 %105, %104
  %107 = xor i64 %102, %104
  %108 = add nuw nsw i64 %107, %106
  %109 = icmp eq i64 %108, 2
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %64, align 1, !tbaa !2450
  %.v = select i1 %100, i64 76, i64 14
  %111 = add i64 %76, %.v
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  br i1 %100, label %block_404c3c, label %block_404bfe

block_404c2e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, -1
  %114 = add i64 %212, 4
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %113 to i8*
  store i8 0, i8* %115, align 1
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 14
  store i64 %117, i64* %PC, align 8, !tbaa !2428
  br label %block_404c40

block_404bfe:                                     ; preds = %block_404bf0
  %118 = add i64 %111, 4
  store i64 %118, i64* %PC, align 8
  %119 = load i64, i64* %80, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -9
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %40, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %47, align 1, !tbaa !2446
  %129 = xor i64 %119, %120
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %52, align 1, !tbaa !2447
  %133 = icmp eq i64 %120, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %55, align 1, !tbaa !2448
  %135 = lshr i64 %120, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %58, align 1, !tbaa !2449
  %137 = lshr i64 %119, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %64, align 1, !tbaa !2450
  %142 = add i64 %111, 15
  store i64 %142, i64* %PC, align 8
  store i64 %120, i64* %80, align 8
  %143 = bitcast i64* %RAX to i64**
  %144 = load i64*, i64** %143, align 8
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC, align 8
  %147 = load i64, i64* %144, align 8
  %148 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %147, i64* %148, align 1, !tbaa !2451
  store double 0.000000e+00, double* %67, align 1, !tbaa !2451
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -32
  %151 = add i64 %145, 8
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %150 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = add i64 %153, 8
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ugt i64 %153, -9
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %40, align 1, !tbaa !2432
  %157 = trunc i64 %154 to i32
  %158 = and i32 %157, 255
  %159 = tail call i32 @llvm.ctpop.i32(i32 %158) #8
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = xor i8 %161, 1
  store i8 %162, i8* %47, align 1, !tbaa !2446
  %163 = xor i64 %153, %154
  %164 = lshr i64 %163, 4
  %165 = trunc i64 %164 to i8
  %166 = and i8 %165, 1
  store i8 %166, i8* %52, align 1, !tbaa !2447
  %167 = icmp eq i64 %154, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %55, align 1, !tbaa !2448
  %169 = lshr i64 %154, 63
  %170 = trunc i64 %169 to i8
  store i8 %170, i8* %58, align 1, !tbaa !2449
  %171 = lshr i64 %153, 63
  %172 = xor i64 %169, %171
  %173 = add nuw nsw i64 %172, %169
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %64, align 1, !tbaa !2450
  %176 = add i64 %145, 19
  store i64 %176, i64* %PC, align 8
  store i64 %154, i64* %152, align 8
  %177 = bitcast i64* %RAX to double**
  %178 = load double*, double** %177, align 8
  %179 = load i64, i64* %PC, align 8
  %180 = add i64 %179, 4
  store i64 %180, i64* %PC, align 8
  %181 = load double, double* %178, align 8
  store double %181, double* %68, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %182 = add i64 %179, 8
  store i64 %182, i64* %PC, align 8
  %183 = load double, double* %71, align 1
  %184 = fcmp uno double %181, %183
  br i1 %184, label %185, label %195

; <label>:185:                                    ; preds = %block_404bfe
  %186 = fadd double %181, %183
  %187 = bitcast double %186 to i64
  %188 = and i64 %187, 9221120237041090560
  %189 = icmp eq i64 %188, 9218868437227405312
  %190 = and i64 %187, 2251799813685247
  %191 = icmp ne i64 %190, 0
  %192 = and i1 %189, %191
  br i1 %192, label %193, label %201

; <label>:193:                                    ; preds = %185
  %194 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %182, %struct.Memory* %MEMORY.0) #9
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:195:                                    ; preds = %block_404bfe
  %196 = fcmp ogt double %181, %183
  br i1 %196, label %201, label %197

; <label>:197:                                    ; preds = %195
  %198 = fcmp olt double %181, %183
  br i1 %198, label %201, label %199

; <label>:199:                                    ; preds = %197
  %200 = fcmp oeq double %181, %183
  br i1 %200, label %201, label %205

; <label>:201:                                    ; preds = %199, %197, %195, %185
  %202 = phi i8 [ 0, %195 ], [ 0, %197 ], [ 1, %199 ], [ 1, %185 ]
  %203 = phi i8 [ 0, %195 ], [ 0, %197 ], [ 0, %199 ], [ 1, %185 ]
  %204 = phi i8 [ 0, %195 ], [ 1, %197 ], [ 0, %199 ], [ 1, %185 ]
  store i8 %202, i8* %55, align 1, !tbaa !2453
  store i8 %203, i8* %47, align 1, !tbaa !2453
  store i8 %204, i8* %40, align 1, !tbaa !2453
  br label %205

; <label>:205:                                    ; preds = %201, %199
  store i8 0, i8* %64, align 1, !tbaa !2453
  store i8 0, i8* %58, align 1, !tbaa !2453
  store i8 0, i8* %52, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %205, %193
  %206 = phi i64 [ %.pre4, %193 ], [ %182, %205 ]
  %207 = phi %struct.Memory* [ %194, %193 ], [ %MEMORY.0, %205 ]
  %208 = load i8, i8* %40, align 1, !tbaa !2432
  %209 = load i8, i8* %55, align 1, !tbaa !2448
  %210 = or i8 %209, %208
  %211 = icmp ne i8 %210, 0
  %.v6 = select i1 %211, i64 15, i64 6
  %212 = add i64 %206, %.v6
  store i64 %212, i64* %PC, align 8, !tbaa !2428
  br i1 %211, label %block_404c37, label %block_404c2e

block_404c40:                                     ; preds = %block_404c2e, %block_404c3c
  %213 = phi i64 [ %.pre5, %block_404c3c ], [ %117, %block_404c2e ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_404c3c ], [ %207, %block_404c2e ]
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -1
  %216 = add i64 %213, 3
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i8*
  %218 = load i8, i8* %217, align 1
  %219 = and i8 %218, 1
  store i8 0, i8* %40, align 1, !tbaa !2432
  %220 = zext i8 %219 to i32
  %221 = tail call i32 @llvm.ctpop.i32(i32 %220) #8
  %222 = trunc i32 %221 to i8
  %223 = xor i8 %222, 1
  store i8 %223, i8* %47, align 1, !tbaa !2446
  %224 = xor i8 %219, 1
  store i8 %224, i8* %55, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %64, align 1, !tbaa !2450
  store i8 0, i8* %52, align 1, !tbaa !2447
  %225 = zext i8 %219 to i64
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = add i64 %213, 9
  store i64 %226, i64* %PC, align 8
  %227 = load i64, i64* %7, align 8, !tbaa !2428
  %228 = add i64 %227, 8
  %229 = inttoptr i64 %227 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %RBP, align 8, !tbaa !2428
  store i64 %228, i64* %7, align 8, !tbaa !2428
  %231 = add i64 %213, 10
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %228 to i64*
  %233 = load i64, i64* %232, align 8
  store i64 %233, i64* %PC, align 8, !tbaa !2428
  %234 = add i64 %227, 16
  store i64 %234, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_4011c0__Z11start_timerv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4011c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -2865
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call fastcc %struct.Memory* @ext_6208a0_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %15 = load i64, i64* %RAX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* bitcast (%start_time_type* @start_time to i64*), align 8
  %17 = add i64 %16, 9
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 10
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %14
}

; Function Attrs: noinline
define %struct.Memory* @sub_405d10__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405d10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -56
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 48
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -24
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -24
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -32
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5
  store i64 %53, i64* %PC, align 8
  %54 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = load i64, i64* %54, align 1
  %56 = inttoptr i64 %51 to i64*
  store i64 %55, i64* %56, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405d25

block_405d3f:                                     ; preds = %block_405d25
  %57 = add i64 %171, -16
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %58 = add i64 %170, -11631
  %59 = add i64 %170, 11
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %160)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -48
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %66, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, -11538
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %71, %struct.Memory* %63)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -32
  %79 = load i64, i64* %PC, align 8
  store i64 %78, i64* %RDI, align 8, !tbaa !2428
  %80 = load i64, i64* %RAX, align 8
  store i64 %80, i64* %RSI, align 8, !tbaa !2428
  %81 = add i64 %79, 473
  %82 = add i64 %79, 12
  %83 = load i64, i64* %RSP, align 8, !tbaa !2428
  %84 = add i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85, align 8
  store i64 %84, i64* %RSP, align 8, !tbaa !2428
  store i64 %81, i64* %PC, align 8, !tbaa !2428
  %86 = tail call %struct.Memory* @sub_405f30__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__renamed_(%struct.State* nonnull %0, i64 %81, %struct.Memory* %76)
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -40
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC, align 8
  %91 = load i64, i64* %54, align 1
  %92 = inttoptr i64 %88 to i64*
  store i64 %91, i64* %92, align 8
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -40
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = add i64 %93, -32
  %100 = add i64 %95, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  store i64 %98, i64* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, -75
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  br label %block_405d25

block_405d3a:                                     ; preds = %block_405d25
  %104 = add i64 %171, -32
  %105 = add i64 %170, 63
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = add i64 %171, -8
  %109 = add i64 %170, 67
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  store i64 %107, i64* %110, align 8
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -8
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 5
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %54, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %118 = bitcast i64* %117 to double*
  store double 0.000000e+00, double* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSP, align 8
  %120 = add i64 %119, 48
  store i64 %120, i64* %RSP, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -49
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %14, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %21, align 1, !tbaa !2446
  %129 = xor i64 %119, 16
  %130 = xor i64 %129, %120
  %131 = lshr i64 %130, 4
  %132 = trunc i64 %131 to i8
  %133 = and i8 %132, 1
  store i8 %133, i8* %27, align 1, !tbaa !2447
  %134 = icmp eq i64 %120, 0
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %30, align 1, !tbaa !2448
  %136 = lshr i64 %120, 63
  %137 = trunc i64 %136 to i8
  store i8 %137, i8* %33, align 1, !tbaa !2449
  %138 = lshr i64 %119, 63
  %139 = xor i64 %136, %138
  %140 = add nuw nsw i64 %139, %136
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %39, align 1, !tbaa !2450
  %143 = add i64 %113, 10
  store i64 %143, i64* %PC, align 8
  %144 = add i64 %119, 56
  %145 = inttoptr i64 %120 to i64*
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %RBP, align 8, !tbaa !2428
  store i64 %144, i64* %RSP, align 8, !tbaa !2428
  %147 = add i64 %113, 11
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %144 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %150 = add i64 %119, 64
  store i64 %150, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %160

block_405d25:                                     ; preds = %block_405d3f, %block_405d10
  %151 = phi i64 [ %.pre, %block_405d10 ], [ %103, %block_405d3f ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_405d10 ], [ %86, %block_405d3f ]
  %152 = load i64, i64* %RBP, align 8
  %153 = add i64 %152, -16
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %154 = add i64 %152, -24
  store i64 %154, i64* %RSI, align 8, !tbaa !2428
  %155 = add i64 %151, -11541
  %156 = add i64 %151, 13
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_403010__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i8, i8* %AL, align 1
  %162 = load i64, i64* %PC, align 8
  %163 = and i8 %161, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %164 = zext i8 %163 to i32
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #8
  %166 = trunc i32 %165 to i8
  %167 = xor i8 %166, 1
  store i8 %167, i8* %21, align 1, !tbaa !2446
  %168 = xor i8 %163, 1
  store i8 %168, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %169 = icmp eq i8 %168, 0
  %.v = select i1 %169, i64 13, i64 8
  %170 = add i64 %162, %.v
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  %171 = load i64, i64* %RBP, align 8
  br i1 %169, label %block_405d3f, label %block_405d3a
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f00__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401f00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -72
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 64
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = add i64 %9, 12
  store i64 %39, i64* %PC, align 8
  %40 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %41 = load i64, i64* %40, align 1
  %42 = inttoptr i64 %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RDI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RSI, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401f20

block_401f30:                                     ; preds = %block_401f20
  %68 = add i64 %179, -16
  %69 = add i64 %212, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RDI, align 8, !tbaa !2428
  %72 = add i64 %179, -24
  %73 = add i64 %212, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  %76 = add i64 %179, -8
  %77 = add i64 %212, 12
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %179, -48
  %81 = add i64 %212, 16
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 %79, i64* %82, align 8
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -48
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 5
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %40, align 1, !tbaa !2451
  store double 0.000000e+00, double* %67, align 1, !tbaa !2451
  %89 = add i64 %85, 17552
  %90 = add i64 %85, 10
  %91 = load i64, i64* %RSP, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93, align 8
  store i64 %92, i64* %RSP, align 8, !tbaa !2428
  store i64 %89, i64* %PC, align 8, !tbaa !2428
  %94 = tail call %struct.Memory* @sub_4063d0__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__renamed_(%struct.State* nonnull %0, i64 %89, %struct.Memory* %MEMORY.0)
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -56
  %97 = load i64, i64* %PC, align 8
  store i64 %96, i64* %RDI, align 8, !tbaa !2428
  %98 = add i64 %97, 9
  store i64 %98, i64* %PC, align 8
  %99 = load i64, i64* %40, align 1
  %100 = inttoptr i64 %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 16317
  %103 = add i64 %101, 5
  %104 = load i64, i64* %RSP, align 8, !tbaa !2428
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %106, align 8
  store i64 %105, i64* %RSP, align 8, !tbaa !2428
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  %107 = tail call %struct.Memory* @sub_405f10__ZNK12ValueWrapperIdEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %102, %struct.Memory* %94)
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 15960
  %110 = add i64 %108, 5
  %111 = load i64, i64* %RSP, align 8, !tbaa !2428
  %112 = add i64 %111, -8
  %113 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %113, align 8
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  store i64 %109, i64* %PC, align 8, !tbaa !2428
  %114 = tail call %struct.Memory* @sub_405db0__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %109, %struct.Memory* %107)
  %115 = load i64, i64* %RBP, align 8
  %116 = add i64 %115, -36
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 3
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %116 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, 1
  %122 = zext i32 %121 to i64
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = icmp eq i32 %120, -1
  %124 = icmp eq i32 %121, 0
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %13, align 1, !tbaa !2432
  %127 = and i32 %121, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %20, align 1, !tbaa !2446
  %132 = xor i32 %120, %121
  %133 = lshr i32 %132, 4
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %25, align 1, !tbaa !2447
  %136 = zext i1 %124 to i8
  store i8 %136, i8* %28, align 1, !tbaa !2448
  %137 = lshr i32 %121, 31
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %31, align 1, !tbaa !2449
  %139 = lshr i32 %120, 31
  %140 = xor i32 %137, %139
  %141 = add nuw nsw i32 %140, %137
  %142 = icmp eq i32 %141, 2
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %37, align 1, !tbaa !2450
  %144 = add i64 %117, 9
  store i64 %144, i64* %PC, align 8
  store i32 %121, i32* %119, align 4
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, -70
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  br label %block_401f20

block_401f6b:                                     ; preds = %block_401f20
  %147 = load i64, i64* %RSP, align 8
  %148 = add i64 %147, 64
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  %149 = icmp ugt i64 %147, -65
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %13, align 1, !tbaa !2432
  %151 = trunc i64 %148 to i32
  %152 = and i32 %151, 255
  %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #8
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  store i8 %156, i8* %20, align 1, !tbaa !2446
  %157 = xor i64 %147, %148
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  store i8 %160, i8* %25, align 1, !tbaa !2447
  %161 = icmp eq i64 %148, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %28, align 1, !tbaa !2448
  %163 = lshr i64 %148, 63
  %164 = trunc i64 %163 to i8
  store i8 %164, i8* %31, align 1, !tbaa !2449
  %165 = lshr i64 %147, 63
  %166 = xor i64 %163, %165
  %167 = add nuw nsw i64 %166, %163
  %168 = icmp eq i64 %167, 2
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %37, align 1, !tbaa !2450
  %170 = add i64 %212, 5
  store i64 %170, i64* %PC, align 8
  %171 = add i64 %147, 72
  %172 = inttoptr i64 %148 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RBP, align 8, !tbaa !2428
  store i64 %171, i64* %RSP, align 8, !tbaa !2428
  %174 = add i64 %212, 6
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %PC, align 8, !tbaa !2428
  %177 = add i64 %147, 80
  store i64 %177, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401f20:                                     ; preds = %block_401f30, %block_401f00
  %178 = phi i64 [ %.pre, %block_401f00 ], [ %146, %block_401f30 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401f00 ], [ %114, %block_401f30 ]
  %179 = load i64, i64* %RBP, align 8
  %180 = add i64 %179, -36
  %181 = add i64 %178, 3
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RAX, align 8, !tbaa !2428
  %185 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %186 = sub i32 %183, %185
  %187 = icmp ult i32 %183, %185
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %13, align 1, !tbaa !2432
  %189 = and i32 %186, 255
  %190 = tail call i32 @llvm.ctpop.i32(i32 %189) #8
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  %193 = xor i8 %192, 1
  store i8 %193, i8* %20, align 1, !tbaa !2446
  %194 = xor i32 %185, %183
  %195 = xor i32 %194, %186
  %196 = lshr i32 %195, 4
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  store i8 %198, i8* %25, align 1, !tbaa !2447
  %199 = icmp eq i32 %186, 0
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %28, align 1, !tbaa !2448
  %201 = lshr i32 %186, 31
  %202 = trunc i32 %201 to i8
  store i8 %202, i8* %31, align 1, !tbaa !2449
  %203 = lshr i32 %183, 31
  %204 = lshr i32 %185, 31
  %205 = xor i32 %204, %203
  %206 = xor i32 %201, %203
  %207 = add nuw nsw i32 %206, %205
  %208 = icmp eq i32 %207, 2
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %37, align 1, !tbaa !2450
  %210 = icmp ne i8 %202, 0
  %211 = xor i1 %210, %208
  %.v = select i1 %211, i64 16, i64 75
  %212 = add i64 %178, %.v
  store i64 %212, i64* %PC, align 8, !tbaa !2428
  br i1 %211, label %block_401f30, label %block_401f6b
}

; Function Attrs: noinline
define %struct.Memory* @sub_402d60__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402d60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -120
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 112
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  store i64 %39, i64* %RAX, align 8, !tbaa !2428
  %40 = add i64 %6, -16
  store i64 %40, i64* %RCX, align 8, !tbaa !2428
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %9, 19
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RAX, align 8
  %51 = load i64, i64* %PC, align 8
  store i64 %50, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RCX, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %51, 1256
  %54 = add i64 %51, 11
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_403260__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %2)
  %59 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -32
  %62 = load i64, i64* %RAX, align 8
  %63 = add i64 %59, 11
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %64, align 8
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -32
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %66 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RAX, align 8, !tbaa !2428
  %71 = ashr i64 %70, 63
  store i64 %71, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RCX, align 8
  %73 = add i64 %67, 9
  store i64 %73, i64* %PC, align 8
  %74 = sext i64 %72 to i128
  %75 = and i128 %74, -18446744073709551616
  %76 = zext i64 %71 to i128
  %77 = shl nuw i128 %76, 64
  %78 = zext i64 %70 to i128
  %79 = or i128 %77, %78
  %80 = zext i64 %72 to i128
  %81 = or i128 %75, %80
  %82 = sdiv i128 %79, %81
  %83 = trunc i128 %82 to i64
  %84 = and i128 %82, 18446744073709551615
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = or i128 %86, %84
  %88 = icmp eq i128 %82, %87
  br i1 %88, label %91, label %89

; <label>:89:                                     ; preds = %block_402d60
  %90 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %73, %struct.Memory* %58) #9
  %.pre = load i64, i64* %RAX, align 8
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:91:                                     ; preds = %block_402d60
  %92 = srem i128 %79, %81
  %93 = trunc i128 %92 to i64
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  store i64 %93, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %91, %89
  %94 = phi i64 [ %.pre2, %89 ], [ %65, %91 ]
  %95 = phi i64 [ %.pre1, %89 ], [ %73, %91 ]
  %96 = phi i64 [ %.pre, %89 ], [ %83, %91 ]
  %97 = phi %struct.Memory* [ %90, %89 ], [ %58, %91 ]
  %98 = add i64 %96, -1
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = icmp eq i64 %96, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %13, align 1, !tbaa !2432
  %101 = trunc i64 %98 to i32
  %102 = and i32 %101, 255
  %103 = tail call i32 @llvm.ctpop.i32(i32 %102) #8
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  store i8 %106, i8* %20, align 1, !tbaa !2446
  %107 = xor i64 %96, %98
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* %26, align 1, !tbaa !2447
  %111 = icmp eq i64 %98, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %29, align 1, !tbaa !2448
  %113 = lshr i64 %98, 63
  %114 = trunc i64 %113 to i8
  store i8 %114, i8* %32, align 1, !tbaa !2449
  %115 = lshr i64 %96, 63
  %116 = xor i64 %113, %115
  %117 = add nuw nsw i64 %116, %115
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %38, align 1, !tbaa !2450
  %120 = add i64 %94, -24
  %121 = add i64 %95, 8
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %120 to i64*
  store i64 %98, i64* %122, align 8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %124 = bitcast i64* %123 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_402d9f

block_402ea2:                                     ; preds = %block_402e0e
  %125 = load i64, i64* %RSP, align 8
  %126 = add i64 %125, 112
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %127 = icmp ugt i64 %125, -113
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %13, align 1, !tbaa !2432
  %129 = trunc i64 %126 to i32
  %130 = and i32 %129, 255
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #8
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  store i8 %134, i8* %20, align 1, !tbaa !2446
  %135 = xor i64 %125, 16
  %136 = xor i64 %135, %126
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  store i8 %139, i8* %26, align 1, !tbaa !2447
  %140 = icmp eq i64 %126, 0
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %29, align 1, !tbaa !2448
  %142 = lshr i64 %126, 63
  %143 = trunc i64 %142 to i8
  store i8 %143, i8* %32, align 1, !tbaa !2449
  %144 = lshr i64 %125, 63
  %145 = xor i64 %142, %144
  %146 = add nuw nsw i64 %145, %142
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %38, align 1, !tbaa !2450
  %149 = add i64 %340, 5
  store i64 %149, i64* %PC, align 8
  %150 = add i64 %125, 120
  %151 = inttoptr i64 %126 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %RBP, align 8, !tbaa !2428
  store i64 %150, i64* %RSP, align 8, !tbaa !2428
  %153 = add i64 %340, 6
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %150 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %156 = add i64 %125, 128
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402e19:                                     ; preds = %block_402e0e
  %157 = add i64 %311, -8
  store i64 %157, i64* %RDI, align 8, !tbaa !2428
  %158 = add i64 %340, 8
  store i64 %158, i64* %PC, align 8
  %159 = load i64, i64* %314, align 8
  store i64 %159, i64* %RSI, align 8, !tbaa !2428
  %160 = add i64 %340, 1143
  %161 = add i64 %340, 13
  %162 = load i64, i64* %RSP, align 8, !tbaa !2428
  %163 = add i64 %162, -8
  %164 = inttoptr i64 %163 to i64*
  store i64 %161, i64* %164, align 8
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  store i64 %160, i64* %PC, align 8, !tbaa !2428
  %165 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %160, %struct.Memory* %MEMORY.0)
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -80
  %168 = load i64, i64* %PC, align 8
  store i64 %167, i64* %RDI, align 8, !tbaa !2428
  %169 = load i64, i64* %RAX, align 8
  %170 = add i64 %168, 8
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %167 to i64*
  store i64 %169, i64* %171, align 8
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, 530
  %174 = add i64 %172, 5
  %175 = load i64, i64* %RSP, align 8, !tbaa !2428
  %176 = add i64 %175, -8
  %177 = inttoptr i64 %176 to i64*
  store i64 %174, i64* %177, align 8
  store i64 %176, i64* %RSP, align 8, !tbaa !2428
  store i64 %173, i64* %PC, align 8, !tbaa !2428
  %178 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %173, %struct.Memory* %165)
  %179 = load i64, i64* %RBP, align 8
  %180 = add i64 %179, -8
  %181 = load i64, i64* %PC, align 8
  store i64 %180, i64* %RDI, align 8, !tbaa !2428
  %182 = bitcast i64* %RAX to i64**
  %183 = load i64*, i64** %182, align 8
  %184 = add i64 %181, 7
  store i64 %184, i64* %PC, align 8
  %185 = load i64, i64* %183, align 8
  store i64 %185, i64* %RAX, align 8, !tbaa !2428
  %186 = add i64 %179, -72
  %187 = add i64 %181, 11
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %186 to i64*
  store i64 %185, i64* %188, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 514
  %191 = add i64 %189, 5
  %192 = load i64, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %191, i64* %194, align 8
  store i64 %193, i64* %RSP, align 8, !tbaa !2428
  store i64 %190, i64* %PC, align 8, !tbaa !2428
  %195 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %190, %struct.Memory* %178)
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -8
  %198 = load i64, i64* %PC, align 8
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %199 = add i64 %196, -24
  %200 = add i64 %198, 8
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %RSI, align 8, !tbaa !2428
  %203 = add i64 %196, -112
  %204 = load i64, i64* %RAX, align 8
  %205 = add i64 %198, 12
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %203 to i64*
  store i64 %204, i64* %206, align 8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 1089
  %209 = add i64 %207, 5
  %210 = load i64, i64* %RSP, align 8, !tbaa !2428
  %211 = add i64 %210, -8
  %212 = inttoptr i64 %211 to i64*
  store i64 %209, i64* %212, align 8
  store i64 %211, i64* %RSP, align 8, !tbaa !2428
  store i64 %208, i64* %PC, align 8, !tbaa !2428
  %213 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %208, %struct.Memory* %195)
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -88
  %216 = load i64, i64* %PC, align 8
  store i64 %215, i64* %RDI, align 8, !tbaa !2428
  %217 = load i64, i64* %RAX, align 8
  %218 = add i64 %216, 8
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %215 to i64*
  store i64 %217, i64* %219, align 8
  %220 = load i64, i64* %PC, align 8
  %221 = add i64 %220, 484
  %222 = add i64 %220, 5
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %213)
  %227 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -112
  %230 = add i64 %227, 8
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RSI, align 8, !tbaa !2428
  %233 = add i64 %227, 11
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %232 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %RDI, align 8, !tbaa !2428
  %236 = load i64*, i64** %182, align 8
  %237 = add i64 %227, 14
  store i64 %237, i64* %PC, align 8
  store i64 %235, i64* %236, align 8
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -24
  %240 = load i64, i64* %PC, align 8
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %239 to i64*
  %243 = load i64, i64* %242, align 8
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %244 = add i64 %238, -8
  %245 = add i64 %240, 8
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i64*
  %247 = load i64, i64* %246, align 8
  store i64 %247, i64* %RAX, align 8, !tbaa !2428
  %248 = add i64 %238, -96
  %249 = add i64 %240, 12
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i64*
  store i64 %247, i64* %250, align 8
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -72
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i64*
  %256 = load i64, i64* %255, align 8
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = add i64 %251, -104
  %258 = add i64 %253, 8
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  store i64 %256, i64* %259, align 8
  %260 = load i64, i64* %RBP, align 8
  %261 = add i64 %260, -96
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264, align 8
  store i64 %265, i64* %RSI, align 8, !tbaa !2428
  %266 = add i64 %260, -104
  %267 = add i64 %262, 9
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %269, i64* %270, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %271 = add i64 %262, 1085
  %272 = add i64 %262, 14
  %273 = load i64, i64* %RSP, align 8, !tbaa !2428
  %274 = add i64 %273, -8
  %275 = inttoptr i64 %274 to i64*
  store i64 %272, i64* %275, align 8
  store i64 %274, i64* %RSP, align 8, !tbaa !2428
  store i64 %271, i64* %PC, align 8, !tbaa !2428
  %276 = tail call %struct.Memory* @sub_4032c0__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %271, %struct.Memory* %226)
  %277 = load i64, i64* %RBP, align 8
  %278 = add i64 %277, -24
  %279 = load i64, i64* %PC, align 8
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = add i64 %282, -1
  store i64 %283, i64* %RAX, align 8, !tbaa !2428
  %284 = icmp ne i64 %282, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %13, align 1, !tbaa !2432
  %286 = trunc i64 %283 to i32
  %287 = and i32 %286, 255
  %288 = tail call i32 @llvm.ctpop.i32(i32 %287) #8
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  store i8 %291, i8* %20, align 1, !tbaa !2446
  %292 = xor i64 %282, 16
  %293 = xor i64 %283, %292
  %294 = lshr i64 %293, 4
  %295 = trunc i64 %294 to i8
  %296 = and i8 %295, 1
  store i8 %296, i8* %26, align 1, !tbaa !2447
  %297 = icmp eq i64 %283, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %29, align 1, !tbaa !2448
  %299 = lshr i64 %283, 63
  %300 = trunc i64 %299 to i8
  store i8 %300, i8* %32, align 1, !tbaa !2449
  %301 = lshr i64 %282, 63
  %302 = xor i64 %299, %301
  %303 = xor i64 %299, 1
  %304 = add nuw nsw i64 %302, %303
  %305 = icmp eq i64 %304, 2
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %38, align 1, !tbaa !2450
  %307 = add i64 %279, 12
  store i64 %307, i64* %PC, align 8
  store i64 %283, i64* %281, align 8
  %308 = load i64, i64* %PC, align 8
  %309 = add i64 %308, -143
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  br label %block_402e0e

block_402e0e:                                     ; preds = %block_402e02, %block_402e19
  %310 = phi i64 [ %.pre4, %block_402e02 ], [ %309, %block_402e19 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_402e02 ], [ %276, %block_402e19 ]
  %311 = load i64, i64* %RBP, align 8
  %312 = add i64 %311, -24
  %313 = add i64 %310, 5
  store i64 %313, i64* %PC, align 8
  %314 = inttoptr i64 %312 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = add i64 %315, -1
  %317 = icmp eq i64 %315, 0
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %13, align 1, !tbaa !2432
  %319 = trunc i64 %316 to i32
  %320 = and i32 %319, 255
  %321 = tail call i32 @llvm.ctpop.i32(i32 %320) #8
  %322 = trunc i32 %321 to i8
  %323 = and i8 %322, 1
  %324 = xor i8 %323, 1
  store i8 %324, i8* %20, align 1, !tbaa !2446
  %325 = xor i64 %315, %316
  %326 = lshr i64 %325, 4
  %327 = trunc i64 %326 to i8
  %328 = and i8 %327, 1
  store i8 %328, i8* %26, align 1, !tbaa !2447
  %329 = icmp eq i64 %316, 0
  %330 = zext i1 %329 to i8
  store i8 %330, i8* %29, align 1, !tbaa !2448
  %331 = lshr i64 %316, 63
  %332 = trunc i64 %331 to i8
  store i8 %332, i8* %32, align 1, !tbaa !2449
  %333 = lshr i64 %315, 63
  %334 = xor i64 %331, %333
  %335 = add nuw nsw i64 %334, %333
  %336 = icmp eq i64 %335, 2
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %38, align 1, !tbaa !2450
  %338 = icmp ne i8 %332, 0
  %339 = xor i1 %338, %336
  %.v5 = select i1 %339, i64 148, i64 11
  %340 = add i64 %310, %.v5
  store i64 %340, i64* %PC, align 8, !tbaa !2428
  br i1 %339, label %block_402ea2, label %block_402e19

block_402d9f:                                     ; preds = %block_402daa, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %341 = phi i64 [ %.pre3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %465, %block_402daa ]
  %MEMORY.1 = phi %struct.Memory* [ %97, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %432, %block_402daa ]
  %342 = load i64, i64* %RBP, align 8
  %343 = add i64 %342, -24
  %344 = add i64 %341, 5
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %343 to i64*
  %346 = load i64, i64* %345, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %347 = trunc i64 %346 to i32
  %348 = and i32 %347, 255
  %349 = tail call i32 @llvm.ctpop.i32(i32 %348) #8
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  %352 = xor i8 %351, 1
  store i8 %352, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %353 = icmp eq i64 %346, 0
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %29, align 1, !tbaa !2448
  %355 = lshr i64 %346, 63
  %356 = trunc i64 %355 to i8
  store i8 %356, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %357 = icmp ne i8 %356, 0
  %.v = select i1 %357, i64 99, i64 11
  %358 = add i64 %341, %.v
  store i64 %358, i64* %PC, align 8, !tbaa !2428
  br i1 %357, label %block_402e02, label %block_402daa

block_402daa:                                     ; preds = %block_402d9f
  %359 = add i64 %342, -8
  store i64 %359, i64* %RDI, align 8, !tbaa !2428
  %360 = add i64 %358, 8
  store i64 %360, i64* %PC, align 8
  %361 = load i64, i64* %345, align 8
  store i64 %361, i64* %RSI, align 8, !tbaa !2428
  %362 = add i64 %358, 1254
  %363 = add i64 %358, 13
  %364 = load i64, i64* %RSP, align 8, !tbaa !2428
  %365 = add i64 %364, -8
  %366 = inttoptr i64 %365 to i64*
  store i64 %363, i64* %366, align 8
  store i64 %365, i64* %RSP, align 8, !tbaa !2428
  store i64 %362, i64* %PC, align 8, !tbaa !2428
  %367 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %362, %struct.Memory* %MEMORY.1)
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -48
  %370 = load i64, i64* %PC, align 8
  store i64 %369, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %RAX, align 8
  %372 = add i64 %370, 8
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %369 to i64*
  store i64 %371, i64* %373, align 8
  %374 = load i64, i64* %PC, align 8
  %375 = add i64 %374, 641
  %376 = add i64 %374, 5
  %377 = load i64, i64* %RSP, align 8, !tbaa !2428
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379, align 8
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  store i64 %375, i64* %PC, align 8, !tbaa !2428
  %380 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %375, %struct.Memory* %367)
  %381 = bitcast i64* %RAX to i64**
  %382 = load i64*, i64** %381, align 8
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 3
  store i64 %384, i64* %PC, align 8
  %385 = load i64, i64* %382, align 8
  store i64 %385, i64* %RAX, align 8, !tbaa !2428
  %386 = load i64, i64* %RBP, align 8
  %387 = add i64 %386, -40
  %388 = add i64 %383, 7
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  store i64 %385, i64* %389, align 8
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -32
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394, align 8
  store i64 %395, i64* %RDI, align 8, !tbaa !2428
  %396 = add i64 %390, -8
  %397 = add i64 %392, 8
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i64*
  %399 = load i64, i64* %398, align 8
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = add i64 %390, -56
  %401 = add i64 %392, 12
  store i64 %401, i64* %PC, align 8
  %402 = inttoptr i64 %400 to i64*
  store i64 %399, i64* %402, align 8
  %403 = load i64, i64* %RBP, align 8
  %404 = add i64 %403, -24
  %405 = load i64, i64* %PC, align 8
  %406 = add i64 %405, 4
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %404 to i64*
  %408 = load i64, i64* %407, align 8
  store i64 %408, i64* %RDX, align 8, !tbaa !2428
  %409 = add i64 %403, -40
  %410 = add i64 %405, 8
  store i64 %410, i64* %PC, align 8
  %411 = inttoptr i64 %409 to i64*
  %412 = load i64, i64* %411, align 8
  store i64 %412, i64* %RAX, align 8, !tbaa !2428
  %413 = add i64 %403, -64
  %414 = add i64 %405, 12
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %413 to i64*
  store i64 %412, i64* %415, align 8
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -56
  %418 = load i64, i64* %PC, align 8
  %419 = add i64 %418, 4
  store i64 %419, i64* %PC, align 8
  %420 = inttoptr i64 %417 to i64*
  %421 = load i64, i64* %420, align 8
  store i64 %421, i64* %RSI, align 8, !tbaa !2428
  %422 = add i64 %416, -64
  %423 = add i64 %418, 9
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to i64*
  %425 = load i64, i64* %424, align 8
  %426 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %425, i64* %426, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %427 = add i64 %418, 1245
  %428 = add i64 %418, 14
  %429 = load i64, i64* %RSP, align 8, !tbaa !2428
  %430 = add i64 %429, -8
  %431 = inttoptr i64 %430 to i64*
  store i64 %428, i64* %431, align 8
  store i64 %430, i64* %RSP, align 8, !tbaa !2428
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  %432 = tail call %struct.Memory* @sub_4032c0__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %427, %struct.Memory* %380)
  %433 = load i64, i64* %RBP, align 8
  %434 = add i64 %433, -24
  %435 = load i64, i64* %PC, align 8
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = add i64 %438, -1
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = icmp ne i64 %438, 0
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %13, align 1, !tbaa !2432
  %442 = trunc i64 %439 to i32
  %443 = and i32 %442, 255
  %444 = tail call i32 @llvm.ctpop.i32(i32 %443) #8
  %445 = trunc i32 %444 to i8
  %446 = and i8 %445, 1
  %447 = xor i8 %446, 1
  store i8 %447, i8* %20, align 1, !tbaa !2446
  %448 = xor i64 %438, 16
  %449 = xor i64 %439, %448
  %450 = lshr i64 %449, 4
  %451 = trunc i64 %450 to i8
  %452 = and i8 %451, 1
  store i8 %452, i8* %26, align 1, !tbaa !2447
  %453 = icmp eq i64 %439, 0
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %29, align 1, !tbaa !2448
  %455 = lshr i64 %439, 63
  %456 = trunc i64 %455 to i8
  store i8 %456, i8* %32, align 1, !tbaa !2449
  %457 = lshr i64 %438, 63
  %458 = xor i64 %455, %457
  %459 = xor i64 %455, 1
  %460 = add nuw nsw i64 %458, %459
  %461 = icmp eq i64 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %38, align 1, !tbaa !2450
  %463 = add i64 %435, 12
  store i64 %463, i64* %PC, align 8
  store i64 %439, i64* %437, align 8
  %464 = load i64, i64* %PC, align 8
  %465 = add i64 %464, -94
  store i64 %465, i64* %PC, align 8, !tbaa !2428
  br label %block_402d9f

block_402e02:                                     ; preds = %block_402d9f
  %466 = add i64 %342, -32
  %467 = add i64 %358, 4
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i64*
  %469 = load i64, i64* %468, align 8
  %470 = add i64 %469, -1
  store i64 %470, i64* %RAX, align 8, !tbaa !2428
  %471 = icmp eq i64 %469, 0
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %13, align 1, !tbaa !2432
  %473 = trunc i64 %470 to i32
  %474 = and i32 %473, 255
  %475 = tail call i32 @llvm.ctpop.i32(i32 %474) #8
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  %478 = xor i8 %477, 1
  store i8 %478, i8* %20, align 1, !tbaa !2446
  %479 = xor i64 %469, %470
  %480 = lshr i64 %479, 4
  %481 = trunc i64 %480 to i8
  %482 = and i8 %481, 1
  store i8 %482, i8* %26, align 1, !tbaa !2447
  %483 = icmp eq i64 %470, 0
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %29, align 1, !tbaa !2448
  %485 = lshr i64 %470, 63
  %486 = trunc i64 %485 to i8
  store i8 %486, i8* %32, align 1, !tbaa !2449
  %487 = lshr i64 %469, 63
  %488 = xor i64 %485, %487
  %489 = add nuw nsw i64 %488, %487
  %490 = icmp eq i64 %489, 2
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %38, align 1, !tbaa !2450
  %492 = add i64 %358, 12
  store i64 %492, i64* %PC, align 8
  store i64 %470, i64* %345, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402e0e
}

; Function Attrs: noinline
define %struct.Memory* @sub_404b80__Z13verify_sortedIPdEvT_S1_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404b80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_404bd0__ZN9benchmark9is_sortedIPdEEbT_S2__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #8
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %65, %.v
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_404bc0, label %block_404ba5

block_404ba5:                                     ; preds = %block_404b80
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %76 = add i64 %73, -17653
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_404bc0

block_404bc0:                                     ; preds = %block_404ba5, %block_404b80
  %88 = phi i64 [ %73, %block_404b80 ], [ %.pre, %block_404ba5 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_404b80 ], [ %81, %block_404ba5 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #8
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %89, %90
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4052d0__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4052d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = lshr i64 %60, 63
  %62 = add nsw i64 %60, -1
  %63 = icmp eq i64 %60, 0
  %64 = zext i1 %63 to i8
  store i8 %64, i8* %13, align 1, !tbaa !2432
  %65 = trunc i64 %62 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #8
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i64 %60, %62
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2447
  %75 = icmp eq i64 %62, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2448
  %77 = lshr i64 %62, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2449
  %79 = xor i64 %77, %61
  %80 = add nuw nsw i64 %79, %61
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2450
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 266, i64 25
  %86 = add i64 %51, %.v
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_4053ea, label %block_4052f9

block_40533e:                                     ; preds = %block_405319
  %87 = add i64 %174, -37
  br label %block_405319

block_405394:                                     ; preds = %block_405370
  %88 = add i64 %268, 46
  br label %block_4053c2

block_405399:                                     ; preds = %block_405370
  %89 = add i64 %268, 4
  store i64 %89, i64* %PC, align 8
  %90 = load i64, i64* %241, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %268, 7
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = add i64 %199, -48
  %95 = add i64 %268, 11
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %93, i64* %96, align 8
  %97 = load i64, i64* %RBP, align 8
  %98 = add i64 %97, -32
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %98 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = add i64 %97, -40
  %104 = add i64 %99, 8
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %RCX, align 8, !tbaa !2428
  %107 = add i64 %99, 11
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %102 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %99, 14
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %106 to i64*
  store i64 %109, i64* %111, align 8
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, -32
  %114 = load i64, i64* %PC, align 8
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %113 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = add i64 %112, -48
  %119 = add i64 %114, 8
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %118 to i64*
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %RCX, align 8, !tbaa !2428
  %122 = add i64 %114, 11
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %117 to i64*
  store i64 %121, i64* %123, align 8
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, -169
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  br label %block_405314

block_405319:                                     ; preds = %block_405314, %block_40533e
  %.sink = phi i64 [ %434, %block_405314 ], [ %87, %block_40533e ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_405314 ], [ %164, %block_40533e ]
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  store i64 %127, i64* %RDI, align 8, !tbaa !2428
  %128 = add i64 %126, -40
  %129 = add i64 %.sink, 8
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = add i64 %131, -8
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = icmp ugt i64 %131, 7
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %13, align 1, !tbaa !2432
  %135 = trunc i64 %132 to i32
  %136 = and i32 %135, 255
  %137 = tail call i32 @llvm.ctpop.i32(i32 %136) #8
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  store i8 %140, i8* %20, align 1, !tbaa !2446
  %141 = xor i64 %131, 16
  %142 = xor i64 %141, %132
  %143 = lshr i64 %142, 4
  %144 = trunc i64 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %26, align 1, !tbaa !2447
  %146 = icmp eq i64 %132, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %29, align 1, !tbaa !2448
  %148 = lshr i64 %132, 63
  %149 = trunc i64 %148 to i8
  store i8 %149, i8* %32, align 1, !tbaa !2449
  %150 = lshr i64 %131, 63
  %151 = xor i64 %148, %150
  %152 = xor i64 %148, 1
  %153 = add nuw nsw i64 %151, %152
  %154 = icmp eq i64 %153, 2
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %38, align 1, !tbaa !2450
  %156 = add i64 %.sink, 16
  store i64 %156, i64* %PC, align 8
  store i64 %132, i64* %130, align 8
  %157 = load i64, i64* %RAX, align 8
  %158 = load i64, i64* %PC, align 8
  store i64 %157, i64* %RSI, align 8, !tbaa !2428
  %159 = add i64 %158, -8473
  %160 = add i64 %158, 8
  %161 = load i64, i64* %RSP, align 8, !tbaa !2428
  %162 = add i64 %161, -8
  %163 = inttoptr i64 %162 to i64*
  store i64 %160, i64* %163, align 8
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  store i64 %159, i64* %PC, align 8, !tbaa !2428
  %164 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %159, %struct.Memory* %MEMORY.0)
  %165 = load i8, i8* %AL, align 1
  %166 = load i64, i64* %PC, align 8
  %167 = and i8 %165, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %168 = zext i8 %167 to i32
  %169 = tail call i32 @llvm.ctpop.i32(i32 %168) #8
  %170 = trunc i32 %169 to i8
  %171 = xor i8 %170, 1
  store i8 %171, i8* %20, align 1, !tbaa !2446
  %172 = xor i8 %167, 1
  store i8 %172, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %173 = icmp eq i8 %172, 0
  %.v12 = select i1 %173, i64 13, i64 8
  %174 = add i64 %166, %.v12
  store i64 %174, i64* %PC, align 8, !tbaa !2428
  br i1 %173, label %block_40533e, label %block_405339

block_405356:                                     ; preds = %block_405339
  %175 = add i64 %235, 5
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  br label %block_40535b

block_40535b:                                     ; preds = %block_405375, %block_405356
  %176 = phi i64 [ %175, %block_405356 ], [ %356, %block_405375 ]
  %177 = phi i64 [ %201, %block_405356 ], [ %.pre6, %block_405375 ]
  %MEMORY.1 = phi %struct.Memory* [ %164, %block_405356 ], [ %188, %block_405375 ]
  %178 = add i64 %177, -24
  store i64 %178, i64* %RSI, align 8, !tbaa !2428
  %179 = add i64 %177, -32
  %180 = add i64 %176, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %183 = add i64 %176, -8523
  %184 = add i64 %176, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %MEMORY.1)
  %189 = load i8, i8* %AL, align 1
  %190 = load i64, i64* %PC, align 8
  %191 = and i8 %189, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %192 = zext i8 %191 to i32
  %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #8
  %194 = trunc i32 %193 to i8
  %195 = xor i8 %194, 1
  store i8 %195, i8* %20, align 1, !tbaa !2446
  %196 = xor i8 %191, 1
  store i8 %196, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %197 = icmp eq i8 %196, 0
  %.v14 = select i1 %197, i64 13, i64 8
  %198 = add i64 %190, %.v14
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -32
  br i1 %197, label %block_405375, label %block_405370

block_405339:                                     ; preds = %block_405319
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -32
  %203 = add i64 %174, 14
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %201, -40
  %207 = add i64 %174, 18
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = sub i64 %205, %209
  %211 = icmp ult i64 %205, %209
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %13, align 1, !tbaa !2432
  %213 = trunc i64 %210 to i32
  %214 = and i32 %213, 255
  %215 = tail call i32 @llvm.ctpop.i32(i32 %214) #8
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  store i8 %218, i8* %20, align 1, !tbaa !2446
  %219 = xor i64 %209, %205
  %220 = xor i64 %219, %210
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %26, align 1, !tbaa !2447
  %224 = icmp eq i64 %210, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %29, align 1, !tbaa !2448
  %226 = lshr i64 %210, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %32, align 1, !tbaa !2449
  %228 = lshr i64 %205, 63
  %229 = lshr i64 %209, 63
  %230 = xor i64 %229, %228
  %231 = xor i64 %226, %228
  %232 = add nuw nsw i64 %231, %230
  %233 = icmp eq i64 %232, 2
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %38, align 1, !tbaa !2450
  %.v13 = select i1 %211, i64 29, i64 24
  %235 = add i64 %174, %.v13
  store i64 %235, i64* %PC, align 8, !tbaa !2428
  br i1 %211, label %block_405356, label %block_405351

block_405370:                                     ; preds = %block_40535b
  %236 = add i64 %198, 26
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %200 to i64*
  %238 = load i64, i64* %237, align 8
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = add i64 %199, -40
  %240 = add i64 %198, 30
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = sub i64 %238, %242
  %244 = icmp ult i64 %238, %242
  %245 = zext i1 %244 to i8
  store i8 %245, i8* %13, align 1, !tbaa !2432
  %246 = trunc i64 %243 to i32
  %247 = and i32 %246, 255
  %248 = tail call i32 @llvm.ctpop.i32(i32 %247) #8
  %249 = trunc i32 %248 to i8
  %250 = and i8 %249, 1
  %251 = xor i8 %250, 1
  store i8 %251, i8* %20, align 1, !tbaa !2446
  %252 = xor i64 %242, %238
  %253 = xor i64 %252, %243
  %254 = lshr i64 %253, 4
  %255 = trunc i64 %254 to i8
  %256 = and i8 %255, 1
  store i8 %256, i8* %26, align 1, !tbaa !2447
  %257 = icmp eq i64 %243, 0
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %29, align 1, !tbaa !2448
  %259 = lshr i64 %243, 63
  %260 = trunc i64 %259 to i8
  store i8 %260, i8* %32, align 1, !tbaa !2449
  %261 = lshr i64 %238, 63
  %262 = lshr i64 %242, 63
  %263 = xor i64 %262, %261
  %264 = xor i64 %259, %261
  %265 = add nuw nsw i64 %264, %263
  %266 = icmp eq i64 %265, 2
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %38, align 1, !tbaa !2450
  %.v15 = select i1 %244, i64 41, i64 36
  %268 = add i64 %198, %.v15
  store i64 %268, i64* %PC, align 8, !tbaa !2428
  br i1 %244, label %block_405399, label %block_405394

block_4052f9:                                     ; preds = %block_4052d0
  %269 = add i64 %86, 4
  store i64 %269, i64* %PC, align 8
  %270 = load i64, i64* %57, align 8
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = add i64 %86, 7
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272, align 8
  store i64 %273, i64* %RAX, align 8, !tbaa !2428
  %274 = add i64 %49, -24
  %275 = add i64 %86, 11
  store i64 %275, i64* %PC, align 8
  %276 = inttoptr i64 %274 to i64*
  store i64 %273, i64* %276, align 8
  %277 = load i64, i64* %RBP, align 8
  %278 = add i64 %277, -8
  %279 = load i64, i64* %PC, align 8
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281, align 8
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = add i64 %277, -32
  %284 = add i64 %279, 8
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %283 to i64*
  store i64 %282, i64* %285, align 8
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -16
  %288 = load i64, i64* %PC, align 8
  %289 = add i64 %288, 4
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %287 to i64*
  %291 = load i64, i64* %290, align 8
  store i64 %291, i64* %RAX, align 8, !tbaa !2428
  %292 = add i64 %286, -40
  %293 = add i64 %288, 8
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  store i64 %291, i64* %294, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405314

block_405351:                                     ; preds = %block_405339
  %295 = add i64 %235, 113
  br label %block_4053c2

block_4053ea:                                     ; preds = %block_4053c2, %block_4052d0
  %296 = phi i64 [ %86, %block_4052d0 ], [ %.pre7, %block_4053c2 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_4052d0 ], [ %432, %block_4053c2 ]
  %297 = load i64, i64* %RSP, align 8
  %298 = add i64 %297, 48
  store i64 %298, i64* %RSP, align 8, !tbaa !2428
  %299 = icmp ugt i64 %297, -49
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %13, align 1, !tbaa !2432
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #8
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %20, align 1, !tbaa !2446
  %307 = xor i64 %297, 16
  %308 = xor i64 %307, %298
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %26, align 1, !tbaa !2447
  %312 = icmp eq i64 %298, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %29, align 1, !tbaa !2448
  %314 = lshr i64 %298, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %32, align 1, !tbaa !2449
  %316 = lshr i64 %297, 63
  %317 = xor i64 %314, %316
  %318 = add nuw nsw i64 %317, %314
  %319 = icmp eq i64 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %38, align 1, !tbaa !2450
  %321 = add i64 %296, 5
  store i64 %321, i64* %PC, align 8
  %322 = add i64 %297, 56
  %323 = inttoptr i64 %298 to i64*
  %324 = load i64, i64* %323, align 8
  store i64 %324, i64* %RBP, align 8, !tbaa !2428
  store i64 %322, i64* %RSP, align 8, !tbaa !2428
  %325 = add i64 %296, 6
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %322 to i64*
  %327 = load i64, i64* %326, align 8
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  %328 = add i64 %297, 64
  store i64 %328, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_405375:                                     ; preds = %block_40535b
  %329 = add i64 %198, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %200 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = add i64 %331, 8
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = icmp ugt i64 %331, -9
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %13, align 1, !tbaa !2432
  %335 = trunc i64 %332 to i32
  %336 = and i32 %335, 255
  %337 = tail call i32 @llvm.ctpop.i32(i32 %336) #8
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  %340 = xor i8 %339, 1
  store i8 %340, i8* %20, align 1, !tbaa !2446
  %341 = xor i64 %331, %332
  %342 = lshr i64 %341, 4
  %343 = trunc i64 %342 to i8
  %344 = and i8 %343, 1
  store i8 %344, i8* %26, align 1, !tbaa !2447
  %345 = icmp eq i64 %332, 0
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %29, align 1, !tbaa !2448
  %347 = lshr i64 %332, 63
  %348 = trunc i64 %347 to i8
  store i8 %348, i8* %32, align 1, !tbaa !2449
  %349 = lshr i64 %331, 63
  %350 = xor i64 %347, %349
  %351 = add nuw nsw i64 %350, %347
  %352 = icmp eq i64 %351, 2
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %38, align 1, !tbaa !2450
  %354 = add i64 %198, 12
  store i64 %354, i64* %PC, align 8
  store i64 %332, i64* %330, align 8
  %355 = load i64, i64* %PC, align 8
  %356 = add i64 %355, -38
  store i64 %356, i64* %PC, align 8, !tbaa !2428
  %.pre6 = load i64, i64* %RBP, align 8
  br label %block_40535b

block_4053c2:                                     ; preds = %block_405351, %block_405394
  %357 = phi i64 [ %88, %block_405394 ], [ %295, %block_405351 ]
  %358 = phi i64 [ %199, %block_405394 ], [ %201, %block_405351 ]
  %MEMORY.3 = phi %struct.Memory* [ %188, %block_405394 ], [ %164, %block_405351 ]
  %359 = add i64 %358, -8
  %360 = add i64 %357, 4
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %363 = add i64 %358, -40
  %364 = add i64 %357, 8
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = add i64 %366, 8
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  %368 = icmp ugt i64 %366, -9
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %13, align 1, !tbaa !2432
  %370 = trunc i64 %367 to i32
  %371 = and i32 %370, 255
  %372 = tail call i32 @llvm.ctpop.i32(i32 %371) #8
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  store i8 %375, i8* %20, align 1, !tbaa !2446
  %376 = xor i64 %366, %367
  %377 = lshr i64 %376, 4
  %378 = trunc i64 %377 to i8
  %379 = and i8 %378, 1
  store i8 %379, i8* %26, align 1, !tbaa !2447
  %380 = icmp eq i64 %367, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %29, align 1, !tbaa !2448
  %382 = lshr i64 %367, 63
  %383 = trunc i64 %382 to i8
  store i8 %383, i8* %32, align 1, !tbaa !2449
  %384 = lshr i64 %366, 63
  %385 = xor i64 %382, %384
  %386 = add nuw nsw i64 %385, %382
  %387 = icmp eq i64 %386, 2
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %38, align 1, !tbaa !2450
  store i64 %367, i64* %RSI, align 8, !tbaa !2428
  %389 = add i64 %357, -242
  %390 = add i64 %357, 20
  %391 = load i64, i64* %RSP, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %390, i64* %393, align 8
  store i64 %392, i64* %RSP, align 8, !tbaa !2428
  store i64 %389, i64* %PC, align 8, !tbaa !2428
  %394 = tail call %struct.Memory* @sub_4052d0__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %389, %struct.Memory* %MEMORY.3)
  %395 = load i64, i64* %RBP, align 8
  %396 = add i64 %395, -40
  %397 = load i64, i64* %PC, align 8
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %396 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = add i64 %400, 8
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = icmp ugt i64 %400, -9
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %13, align 1, !tbaa !2432
  %404 = trunc i64 %401 to i32
  %405 = and i32 %404, 255
  %406 = tail call i32 @llvm.ctpop.i32(i32 %405) #8
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  store i8 %409, i8* %20, align 1, !tbaa !2446
  %410 = xor i64 %400, %401
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  store i8 %413, i8* %26, align 1, !tbaa !2447
  %414 = icmp eq i64 %401, 0
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %29, align 1, !tbaa !2448
  %416 = lshr i64 %401, 63
  %417 = trunc i64 %416 to i8
  store i8 %417, i8* %32, align 1, !tbaa !2449
  %418 = lshr i64 %400, 63
  %419 = xor i64 %416, %418
  %420 = add nuw nsw i64 %419, %416
  %421 = icmp eq i64 %420, 2
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %38, align 1, !tbaa !2450
  %423 = add i64 %395, -16
  %424 = add i64 %397, 12
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i64*
  %426 = load i64, i64* %425, align 8
  store i64 %426, i64* %RSI, align 8, !tbaa !2428
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %427 = add i64 %397, -262
  %428 = add i64 %397, 20
  %429 = load i64, i64* %RSP, align 8, !tbaa !2428
  %430 = add i64 %429, -8
  %431 = inttoptr i64 %430 to i64*
  store i64 %428, i64* %431, align 8
  store i64 %430, i64* %RSP, align 8, !tbaa !2428
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  %432 = tail call %struct.Memory* @sub_4052d0__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %427, %struct.Memory* %394)
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4053ea

block_405314:                                     ; preds = %block_4052f9, %block_405399
  %433 = phi i64 [ %.pre, %block_4052f9 ], [ %125, %block_405399 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_4052f9 ], [ %188, %block_405399 ]
  %434 = add i64 %433, 5
  br label %block_405319
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009b0___cxx_global_var_init_19(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4009b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVPe_type* @DVPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4607
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bb0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401cf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401d10__ZN12ValueWrapperIdEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008b0___cxx_global_var_init_13(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4008b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  br label %block_4008cb

block_4008cb:                                     ; preds = %block_4008cb, %block_4008b0
  %43 = phi i64 [ %42, %block_4008b0 ], [ %100, %block_4008cb ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4008b0 ], [ %58, %block_4008cb ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = add i64 %44, -16
  %50 = add i64 %43, 11
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4890
  %54 = add i64 %52, 5
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_401bf0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %MEMORY.0)
  %59 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2432
  %60 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000) to i32), i32 255)) #8
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* %19, align 1, !tbaa !2446
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2447
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2448
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2449
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %59, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2432
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #8
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2446
  %80 = xor i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2447
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2450
  %94 = add i64 %64, -8
  %95 = add i64 %59, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = load i8, i8* %28, align 1, !tbaa !2448
  %99 = icmp eq i8 %98, 0
  %.v = select i1 %99, i64 -47, i64 6
  %100 = add i64 %97, %.v
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  br i1 %99, label %block_4008cb, label %block_400900

block_400900:                                     ; preds = %block_4008cb
  %101 = load i64, i64* %RSP, align 8
  %102 = add i64 %101, 16
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  %103 = icmp ugt i64 %101, -17
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %12, align 1, !tbaa !2432
  %105 = trunc i64 %102 to i32
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #8
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %19, align 1, !tbaa !2446
  %111 = xor i64 %101, 16
  %112 = xor i64 %111, %102
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %25, align 1, !tbaa !2447
  %116 = icmp eq i64 %102, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %28, align 1, !tbaa !2448
  %118 = lshr i64 %102, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* %31, align 1, !tbaa !2449
  %120 = lshr i64 %101, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %37, align 1, !tbaa !2450
  %125 = add i64 %100, 5
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %101, 24
  %127 = inttoptr i64 %102 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %RBP, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %100, 6
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %101, 32
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %58
}

; Function Attrs: noinline
define %struct.Memory* @sub_406440__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406440:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -56
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 48
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5
  store i64 %53, i64* %PC, align 8
  %54 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = load i64, i64* %54, align 1
  %56 = inttoptr i64 %51 to i64*
  store i64 %55, i64* %56, align 8
  %57 = bitcast %union.VectorReg* %4 to double*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast i64* %58 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_406455

block_40646f:                                     ; preds = %block_406455
  %60 = add i64 %124, -8
  store i64 %60, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %61 = add i64 %124, -24
  %62 = add i64 %123, 11
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %54, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %65 = add i64 %124, -40
  %66 = add i64 %123, 16
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %67, align 8
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, -7679
  %70 = add i64 %68, 5
  %71 = load i64, i64* %RSP, align 8, !tbaa !2428
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %70, i64* %73, align 8
  store i64 %72, i64* %RSP, align 8, !tbaa !2428
  store i64 %69, i64* %PC, align 8, !tbaa !2428
  %74 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %69, %struct.Memory* %113)
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -32
  %77 = load i64, i64* %PC, align 8
  store i64 %76, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RAX, align 8
  %79 = add i64 %77, 8
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %76 to i64*
  store i64 %78, i64* %80, align 8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, -7580
  %83 = add i64 %81, 5
  %84 = load i64, i64* %RSP, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86, align 8
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  store i64 %82, i64* %PC, align 8, !tbaa !2428
  %87 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %82, %struct.Memory* %74)
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -40
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 5
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to double*
  %93 = load double, double* %92, align 8
  store double %93, double* %57, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %94 = bitcast %union.anon* %3 to double**
  %95 = load double*, double** %94, align 8
  %96 = add i64 %90, 9
  store i64 %96, i64* %PC, align 8
  %97 = load double, double* %95, align 8
  %98 = fadd double %93, %97
  store double %98, double* %57, align 1, !tbaa !2451
  store i64 0, i64* %58, align 1, !tbaa !2451
  %99 = add i64 %88, -24
  %100 = add i64 %90, 14
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to double*
  store double %98, double* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, -74
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  br label %block_406455

block_406455:                                     ; preds = %block_40646f, %block_406440
  %104 = phi i64 [ %.pre, %block_406440 ], [ %103, %block_40646f ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_406440 ], [ %87, %block_40646f ]
  %105 = load i64, i64* %RBP, align 8
  %106 = add i64 %105, -8
  store i64 %106, i64* %RDI, align 8, !tbaa !2428
  %107 = add i64 %105, -16
  store i64 %107, i64* %RSI, align 8, !tbaa !2428
  %108 = add i64 %104, -7573
  %109 = add i64 %104, 13
  %110 = load i64, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_4046c0__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %MEMORY.0)
  %114 = load i8, i8* %AL, align 1
  %115 = load i64, i64* %PC, align 8
  %116 = and i8 %114, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %117 = zext i8 %116 to i32
  %118 = tail call i32 @llvm.ctpop.i32(i32 %117) #8
  %119 = trunc i32 %118 to i8
  %120 = xor i8 %119, 1
  store i8 %120, i8* %21, align 1, !tbaa !2446
  %121 = xor i8 %116, 1
  store i8 %121, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %122 = icmp eq i8 %121, 0
  %.v = select i1 %122, i64 13, i64 8
  %123 = add i64 %115, %.v
  store i64 %123, i64* %PC, align 8, !tbaa !2428
  %124 = load i64, i64* %RBP, align 8
  br i1 %122, label %block_40646f, label %block_40646a

block_40646a:                                     ; preds = %block_406455
  %125 = add i64 %124, -24
  %126 = add i64 %123, 63
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %54, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %129 = load i64, i64* %RSP, align 8
  %130 = add i64 %129, 48
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %131 = icmp ugt i64 %129, -49
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %14, align 1, !tbaa !2432
  %133 = trunc i64 %130 to i32
  %134 = and i32 %133, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #8
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %21, align 1, !tbaa !2446
  %139 = xor i64 %129, 16
  %140 = xor i64 %139, %130
  %141 = lshr i64 %140, 4
  %142 = trunc i64 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* %27, align 1, !tbaa !2447
  %144 = icmp eq i64 %130, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %30, align 1, !tbaa !2448
  %146 = lshr i64 %130, 63
  %147 = trunc i64 %146 to i8
  store i8 %147, i8* %33, align 1, !tbaa !2449
  %148 = lshr i64 %129, 63
  %149 = xor i64 %146, %148
  %150 = add nuw nsw i64 %149, %146
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %39, align 1, !tbaa !2450
  %153 = add i64 %123, 68
  store i64 %153, i64* %PC, align 8
  %154 = add i64 %129, 56
  %155 = inttoptr i64 %130 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RBP, align 8, !tbaa !2428
  store i64 %154, i64* %RSP, align 8, !tbaa !2428
  %157 = add i64 %123, 69
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %154 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %PC, align 8, !tbaa !2428
  %160 = add i64 %129, 64
  store i64 %160, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %113
}

; Function Attrs: noinline
define %struct.Memory* @sub_4062e0__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4062e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  %40 = add i64 %9, 12
  store i64 %40, i64* %PC, align 8
  %41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -24
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -32
  %52 = load i64, i64* %RSI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4062f5

block_4062f5:                                     ; preds = %block_406303, %block_4062e0
  %56 = phi i64 [ %.pre, %block_4062e0 ], [ %143, %block_406303 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4062e0 ], [ %126, %block_406303 ]
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -24
  %59 = add i64 %56, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RAX, align 8, !tbaa !2428
  %62 = add i64 %57, -32
  %63 = add i64 %56, 8
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %61, %65
  %67 = icmp ult i64 %61, %65
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %13, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %20, align 1, !tbaa !2446
  %75 = xor i64 %65, %61
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %26, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %29, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %32, align 1, !tbaa !2449
  %84 = lshr i64 %61, 63
  %85 = lshr i64 %65, 63
  %86 = xor i64 %85, %84
  %87 = xor i64 %82, %84
  %88 = add nuw nsw i64 %87, %86
  %89 = icmp eq i64 %88, 2
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %38, align 1, !tbaa !2450
  %.v = select i1 %80, i64 59, i64 14
  %91 = add i64 %56, %.v
  %92 = add i64 %57, -16
  %93 = add i64 %91, 4
  store i64 %93, i64* %PC, align 8
  br i1 %80, label %block_406330, label %block_406303

block_406303:                                     ; preds = %block_4062f5
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %94 = add i64 %91, 8
  store i64 %94, i64* %PC, align 8
  %95 = load i64, i64* %60, align 8
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = add i64 %95, 8
  store i64 %96, i64* %RCX, align 8, !tbaa !2428
  %97 = icmp ugt i64 %95, -9
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %13, align 1, !tbaa !2432
  %99 = trunc i64 %96 to i32
  %100 = and i32 %99, 255
  %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #8
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* %20, align 1, !tbaa !2446
  %105 = xor i64 %95, %96
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  store i8 %108, i8* %26, align 1, !tbaa !2447
  %109 = icmp eq i64 %96, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %29, align 1, !tbaa !2448
  %111 = lshr i64 %96, 63
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %32, align 1, !tbaa !2449
  %113 = lshr i64 %95, 63
  %114 = xor i64 %111, %113
  %115 = add nuw nsw i64 %114, %111
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %38, align 1, !tbaa !2450
  %118 = add i64 %91, 19
  store i64 %118, i64* %PC, align 8
  store i64 %96, i64* %60, align 8
  %119 = load i64, i64* %RAX, align 8
  %120 = load i64, i64* %PC, align 8
  store i64 %119, i64* %RSI, align 8, !tbaa !2428
  %121 = add i64 %120, -998
  %122 = add i64 %120, 8
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_405f30__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__renamed_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %MEMORY.0)
  %127 = load i64, i64* %RBP, align 8
  %128 = add i64 %127, -40
  %129 = load i64, i64* %PC, align 8
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC, align 8
  %131 = load i64, i64* %41, align 1
  %132 = inttoptr i64 %128 to i64*
  store i64 %131, i64* %132, align 8
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -40
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = add i64 %133, -16
  %140 = add i64 %135, 8
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %138, i64* %141, align 8
  %142 = load i64, i64* %PC, align 8
  %143 = add i64 %142, -54
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  br label %block_4062f5

block_406330:                                     ; preds = %block_4062f5
  %144 = inttoptr i64 %92 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %RAX, align 8, !tbaa !2428
  %146 = add i64 %57, -8
  %147 = add i64 %91, 8
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %146 to i64*
  store i64 %145, i64* %148, align 8
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %41, align 1, !tbaa !2451
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %156 = bitcast i64* %155 to double*
  store double 0.000000e+00, double* %156, align 1, !tbaa !2451
  %157 = load i64, i64* %RSP, align 8
  %158 = add i64 %157, 48
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  %159 = icmp ugt i64 %157, -49
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %13, align 1, !tbaa !2432
  %161 = trunc i64 %158 to i32
  %162 = and i32 %161, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #8
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %20, align 1, !tbaa !2446
  %167 = xor i64 %157, 16
  %168 = xor i64 %167, %158
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %26, align 1, !tbaa !2447
  %172 = icmp eq i64 %158, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %29, align 1, !tbaa !2448
  %174 = lshr i64 %158, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %32, align 1, !tbaa !2449
  %176 = lshr i64 %157, 63
  %177 = xor i64 %174, %176
  %178 = add nuw nsw i64 %177, %174
  %179 = icmp eq i64 %178, 2
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %38, align 1, !tbaa !2450
  %181 = add i64 %151, 10
  store i64 %181, i64* %PC, align 8
  %182 = add i64 %157, 56
  %183 = inttoptr i64 %158 to i64*
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %RBP, align 8, !tbaa !2428
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  %185 = add i64 %151, 11
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %182 to i64*
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %PC, align 8, !tbaa !2428
  %188 = add i64 %157, 64
  store i64 %188, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4036f0__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4036f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -32
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ugt i64 %62, -9
  %65 = zext i1 %64 to i8
  store i8 %65, i8* %13, align 1, !tbaa !2432
  %66 = trunc i64 %63 to i32
  %67 = and i32 %66, 255
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #8
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  store i8 %71, i8* %20, align 1, !tbaa !2446
  %72 = xor i64 %62, %63
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %25, align 1, !tbaa !2447
  %76 = icmp eq i64 %63, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %28, align 1, !tbaa !2448
  %78 = lshr i64 %63, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %31, align 1, !tbaa !2449
  %80 = lshr i64 %62, 63
  %81 = xor i64 %78, %80
  %82 = add nuw nsw i64 %81, %78
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %37, align 1, !tbaa !2450
  %85 = add i64 %59, 12
  store i64 %85, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403714

block_403758:                                     ; preds = %block_403722
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -1
  %88 = add i64 %207, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i8*
  store i8 0, i8* %89, align 1
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 14
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  br label %block_40376a

block_403753:                                     ; preds = %block_403722
  %92 = add i64 %207, -63
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br label %block_403714

block_40376a:                                     ; preds = %block_403766, %block_403758
  %93 = phi i64 [ %.pre4, %block_403766 ], [ %91, %block_403758 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_403766 ], [ %197, %block_403758 ]
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -1
  %96 = add i64 %93, 3
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i8*
  %98 = load i8, i8* %97, align 1
  %99 = and i8 %98, 1
  %100 = zext i8 %99 to i64
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = load i64, i64* %RSP, align 8
  %102 = add i64 %101, 32
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  %103 = icmp ugt i64 %101, -33
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %13, align 1, !tbaa !2432
  %105 = trunc i64 %102 to i32
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #8
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %20, align 1, !tbaa !2446
  %111 = xor i64 %101, %102
  %112 = lshr i64 %111, 4
  %113 = trunc i64 %112 to i8
  %114 = and i8 %113, 1
  store i8 %114, i8* %25, align 1, !tbaa !2447
  %115 = icmp eq i64 %102, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %28, align 1, !tbaa !2448
  %117 = lshr i64 %102, 63
  %118 = trunc i64 %117 to i8
  store i8 %118, i8* %31, align 1, !tbaa !2449
  %119 = lshr i64 %101, 63
  %120 = xor i64 %117, %119
  %121 = add nuw nsw i64 %120, %117
  %122 = icmp eq i64 %121, 2
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %37, align 1, !tbaa !2450
  %124 = add i64 %93, 13
  store i64 %124, i64* %PC, align 8
  %125 = add i64 %101, 40
  %126 = inttoptr i64 %102 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RBP, align 8, !tbaa !2428
  store i64 %125, i64* %RSP, align 8, !tbaa !2428
  %128 = add i64 %93, 14
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %125 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  %131 = add i64 %101, 48
  store i64 %131, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_403766:                                     ; preds = %block_403714
  %132 = add i64 %209, -1
  %133 = add i64 %243, 4
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i8*
  store i8 1, i8* %134, align 1
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_40376a

block_403722:                                     ; preds = %block_403714
  %135 = add i64 %243, 4
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %212, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %136, 8
  store i64 %137, i64* %RCX, align 8, !tbaa !2428
  %138 = icmp ugt i64 %136, -9
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %13, align 1, !tbaa !2432
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #8
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %20, align 1, !tbaa !2446
  %146 = xor i64 %136, %137
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  store i8 %149, i8* %25, align 1, !tbaa !2447
  %150 = icmp eq i64 %137, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %28, align 1, !tbaa !2448
  %152 = lshr i64 %137, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* %31, align 1, !tbaa !2449
  %154 = lshr i64 %136, 63
  %155 = xor i64 %152, %154
  %156 = add nuw nsw i64 %155, %152
  %157 = icmp eq i64 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %37, align 1, !tbaa !2450
  %159 = add i64 %243, 15
  store i64 %159, i64* %PC, align 8
  store i64 %137, i64* %212, align 8
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -32
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = add i64 %165, 8
  store i64 %166, i64* %RDX, align 8, !tbaa !2428
  %167 = icmp ugt i64 %165, -9
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %13, align 1, !tbaa !2432
  %169 = trunc i64 %166 to i32
  %170 = and i32 %169, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %20, align 1, !tbaa !2446
  %175 = xor i64 %165, %166
  %176 = lshr i64 %175, 4
  %177 = trunc i64 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %25, align 1, !tbaa !2447
  %179 = icmp eq i64 %166, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %28, align 1, !tbaa !2448
  %181 = lshr i64 %166, 63
  %182 = trunc i64 %181 to i8
  store i8 %182, i8* %31, align 1, !tbaa !2449
  %183 = lshr i64 %165, 63
  %184 = xor i64 %181, %183
  %185 = add nuw nsw i64 %184, %181
  %186 = icmp eq i64 %185, 2
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %37, align 1, !tbaa !2450
  %188 = add i64 %162, 15
  store i64 %188, i64* %PC, align 8
  store i64 %166, i64* %164, align 8
  %189 = load i64, i64* %RAX, align 8
  %190 = load i64, i64* %PC, align 8
  store i64 %189, i64* %RDI, align 8, !tbaa !2428
  %191 = load i64, i64* %RCX, align 8
  store i64 %191, i64* %RSI, align 8, !tbaa !2428
  %192 = add i64 %190, -1760
  %193 = add i64 %190, 11
  %194 = load i64, i64* %RSP, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %193, i64* %196, align 8
  store i64 %195, i64* %RSP, align 8, !tbaa !2428
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  %197 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %192, %struct.Memory* %MEMORY.1)
  %198 = load i8, i8* %AL, align 1
  %199 = load i64, i64* %PC, align 8
  %200 = and i8 %198, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %201 = zext i8 %200 to i32
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = xor i8 %203, 1
  store i8 %204, i8* %20, align 1, !tbaa !2446
  %205 = xor i8 %200, 1
  store i8 %205, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %206 = icmp eq i8 %205, 0
  %.v5 = select i1 %206, i64 13, i64 8
  %207 = add i64 %199, %.v5
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  br i1 %206, label %block_403758, label %block_403753

block_403714:                                     ; preds = %block_403753, %block_4036f0
  %208 = phi i64 [ %.pre, %block_4036f0 ], [ %92, %block_403753 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4036f0 ], [ %197, %block_403753 ]
  %209 = load i64, i64* %RBP, align 8
  %210 = add i64 %209, -16
  %211 = add i64 %208, 4
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = add i64 %209, -24
  %215 = add i64 %208, 8
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = sub i64 %213, %217
  %219 = icmp ult i64 %213, %217
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %13, align 1, !tbaa !2432
  %221 = trunc i64 %218 to i32
  %222 = and i32 %221, 255
  %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #8
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  store i8 %226, i8* %20, align 1, !tbaa !2446
  %227 = xor i64 %217, %213
  %228 = xor i64 %227, %218
  %229 = lshr i64 %228, 4
  %230 = trunc i64 %229 to i8
  %231 = and i8 %230, 1
  store i8 %231, i8* %25, align 1, !tbaa !2447
  %232 = icmp eq i64 %218, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %28, align 1, !tbaa !2448
  %234 = lshr i64 %218, 63
  %235 = trunc i64 %234 to i8
  store i8 %235, i8* %31, align 1, !tbaa !2449
  %236 = lshr i64 %213, 63
  %237 = lshr i64 %217, 63
  %238 = xor i64 %237, %236
  %239 = xor i64 %234, %236
  %240 = add nuw nsw i64 %239, %238
  %241 = icmp eq i64 %240, 2
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %37, align 1, !tbaa !2450
  %.v = select i1 %232, i64 82, i64 14
  %243 = add i64 %208, %.v
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  br i1 %232, label %block_403766, label %block_403722
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a80__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402a80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402aa8

block_402af1:                                     ; preds = %block_402aa8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402ab8:                                     ; preds = %block_402aa8
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 5384
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403fc0__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 5447
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_404010__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 5690
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404110__Z13verify_sortedIP12ValueWrapperIdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402aa8

block_402aa8:                                     ; preds = %block_402ab8, %block_402a80
  %190 = phi i64 [ %.pre, %block_402a80 ], [ %189, %block_402ab8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402a80 ], [ %157, %block_402ab8 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402ab8, label %block_402af1
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401cb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IdEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4043a0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4043a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -56
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 48
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RDX, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4043b4

block_4043ce:                                     ; preds = %block_4043b4
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -8
  store i64 %59, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %60 = add i64 %139, 690
  %61 = add i64 %139, 11
  %62 = load i64, i64* %RSP, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64, align 8
  store i64 %63, i64* %RSP, align 8, !tbaa !2428
  store i64 %60, i64* %PC, align 8, !tbaa !2428
  %65 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %60, %struct.Memory* %129)
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -32
  %68 = load i64, i64* %PC, align 8
  store i64 %67, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %RAX, align 8
  %70 = add i64 %68, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %69, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 783
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %65)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -24
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %82 = bitcast %union.anon* %3 to i64**
  %83 = load i64*, i64** %82, align 8
  %84 = add i64 %81, 10
  store i64 %84, i64* %PC, align 8
  %85 = load i64, i64* %83, align 8
  %86 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %85, i64* %86, align 1, !tbaa !2451
  store double 0.000000e+00, double* %57, align 1, !tbaa !2451
  %87 = add i64 %79, -48
  %88 = add i64 %81, 15
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  store i64 %85, i64* %89, align 8
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 651
  %92 = add i64 %90, 5
  %93 = load i64, i64* %RSP, align 8, !tbaa !2428
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95, align 8
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  %96 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %91, %struct.Memory* %78)
  %97 = load i64, i64* %RBP, align 8
  %98 = add i64 %97, -40
  %99 = load i64, i64* %PC, align 8
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %100 = load i64, i64* %RAX, align 8
  %101 = add i64 %99, 8
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %98 to i64*
  store i64 %100, i64* %102, align 8
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 750
  %105 = add i64 %103, 5
  %106 = load i64, i64* %RSP, align 8, !tbaa !2428
  %107 = add i64 %106, -8
  %108 = inttoptr i64 %107 to i64*
  store i64 %105, i64* %108, align 8
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  store i64 %104, i64* %PC, align 8, !tbaa !2428
  %109 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %104, %struct.Memory* %96)
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -48
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %86, align 1, !tbaa !2451
  store double 0.000000e+00, double* %57, align 1, !tbaa !2451
  %116 = load i64*, i64** %82, align 8
  %117 = add i64 %112, 9
  store i64 %117, i64* %PC, align 8
  store i64 %115, i64* %116, align 8
  %118 = load i64, i64* %PC, align 8
  %119 = add i64 %118, -92
  store i64 %119, i64* %PC, align 8, !tbaa !2428
  br label %block_4043b4

block_4043b4:                                     ; preds = %block_4043ce, %block_4043a0
  %120 = phi i64 [ %.pre, %block_4043a0 ], [ %119, %block_4043ce ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4043a0 ], [ %109, %block_4043ce ]
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, -8
  store i64 %122, i64* %RDI, align 8, !tbaa !2428
  %123 = add i64 %121, -16
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = add i64 %120, 780
  %125 = add i64 %120, 13
  %126 = load i64, i64* %RSP, align 8, !tbaa !2428
  %127 = add i64 %126, -8
  %128 = inttoptr i64 %127 to i64*
  store i64 %125, i64* %128, align 8
  store i64 %127, i64* %RSP, align 8, !tbaa !2428
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  %129 = tail call %struct.Memory* @sub_4046c0__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %124, %struct.Memory* %MEMORY.0)
  %130 = load i8, i8* %AL, align 1
  %131 = load i64, i64* %PC, align 8
  %132 = and i8 %130, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %133 = zext i8 %132 to i32
  %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #8
  %135 = trunc i32 %134 to i8
  %136 = xor i8 %135, 1
  store i8 %136, i8* %21, align 1, !tbaa !2446
  %137 = xor i8 %132, 1
  store i8 %137, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %138 = icmp eq i8 %137, 0
  %.v = select i1 %138, i64 13, i64 8
  %139 = add i64 %131, %.v
  store i64 %139, i64* %PC, align 8, !tbaa !2428
  br i1 %138, label %block_4043ce, label %block_4043c9

block_4043c9:                                     ; preds = %block_4043b4
  %140 = load i64, i64* %RSP, align 8
  %141 = add i64 %140, 48
  store i64 %141, i64* %RSP, align 8, !tbaa !2428
  %142 = icmp ugt i64 %140, -49
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %14, align 1, !tbaa !2432
  %144 = trunc i64 %141 to i32
  %145 = and i32 %144, 255
  %146 = tail call i32 @llvm.ctpop.i32(i32 %145) #8
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %21, align 1, !tbaa !2446
  %150 = xor i64 %140, 16
  %151 = xor i64 %150, %141
  %152 = lshr i64 %151, 4
  %153 = trunc i64 %152 to i8
  %154 = and i8 %153, 1
  store i8 %154, i8* %27, align 1, !tbaa !2447
  %155 = icmp eq i64 %141, 0
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %30, align 1, !tbaa !2448
  %157 = lshr i64 %141, 63
  %158 = trunc i64 %157 to i8
  store i8 %158, i8* %33, align 1, !tbaa !2449
  %159 = lshr i64 %140, 63
  %160 = xor i64 %157, %159
  %161 = add nuw nsw i64 %160, %157
  %162 = icmp eq i64 %161, 2
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %39, align 1, !tbaa !2450
  %164 = add i64 %139, 81
  store i64 %164, i64* %PC, align 8
  %165 = add i64 %140, 56
  %166 = inttoptr i64 %141 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RBP, align 8, !tbaa !2428
  store i64 %165, i64* %RSP, align 8, !tbaa !2428
  %168 = add i64 %139, 82
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %165 to i64*
  %170 = load i64, i64* %169, align 8
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  %171 = add i64 %140, 64
  store i64 %171, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %129
}

; Function Attrs: noinline
define %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405ef0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405f10__ZNK12ValueWrapperIdEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4022b0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4022b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4022d8

block_402359:                                     ; preds = %block_4022d8
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4022e8:                                     ; preds = %block_4022d8
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 8352
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043a0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 14287
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405af0__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 8738
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_404560__Z13verify_sortedI14PointerWrapperIdEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_4022d8

block_4022d8:                                     ; preds = %block_4022e8, %block_4022b0
  %255 = phi i64 [ %.pre, %block_4022b0 ], [ %254, %block_4022e8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4022b0 ], [ %222, %block_4022e8 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_4022e8, label %block_402359
}

; Function Attrs: noinline
define %struct.Memory* @sub_4031e0__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4031e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f10__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405f10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 8
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %22, i64* %23, align 1, !tbaa !2451
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %25, align 1, !tbaa !2451
  %26 = add i64 %16, 9
  store i64 %26, i64* %PC, align 8
  %27 = load i64, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %27 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  store i64 %28, i64* %5, align 8, !tbaa !2428
  %31 = add i64 %16, 10
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  %34 = add i64 %27, 16
  store i64 %34, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403010__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %42 = icmp ne i64 %28, %35
  store i8 0, i8* %36, align 1, !tbaa !2432
  %43 = zext i1 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #8
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %37, align 1, !tbaa !2446
  %47 = xor i1 %42, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %39, align 1, !tbaa !2448
  store i8 0, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2447
  %49 = zext i1 %42 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ac0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400ac0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403260__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403260:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2453
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #8
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %39, align 1, !tbaa !2453
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2453
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2453
  store i8 0, i8* %42, align 1, !tbaa !2453
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4021d0__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4021d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4021e4

block_4021f2:                                     ; preds = %block_4021e4
  %53 = add i64 %159, -32
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %193, 8
  store i64 %54, i64* %PC, align 8
  %55 = load i64, i64* %162, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %55, 8
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ugt i64 %55, -9
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %55, %56
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  store i8 %68, i8* %24, align 1, !tbaa !2447
  %69 = icmp eq i64 %56, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %27, align 1, !tbaa !2448
  %71 = lshr i64 %56, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %30, align 1, !tbaa !2449
  %73 = lshr i64 %55, 63
  %74 = xor i64 %71, %73
  %75 = add nuw nsw i64 %74, %71
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %36, align 1, !tbaa !2450
  %78 = add i64 %193, 19
  store i64 %78, i64* %PC, align 8
  store i64 %56, i64* %162, align 8
  %79 = load i64, i64* %RAX, align 8
  %80 = load i64, i64* %PC, align 8
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %81 = add i64 %80, -1221
  %82 = add i64 %80, 8
  %83 = load i64, i64* %RSP, align 8, !tbaa !2428
  %84 = add i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85, align 8
  store i64 %84, i64* %RSP, align 8, !tbaa !2428
  store i64 %81, i64* %PC, align 8, !tbaa !2428
  %86 = tail call %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %81, %struct.Memory* %MEMORY.0)
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -24
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RAX, align 8, !tbaa !2428
  %93 = add i64 %92, 8
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = icmp ugt i64 %92, -9
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %12, align 1, !tbaa !2432
  %96 = trunc i64 %93 to i32
  %97 = and i32 %96, 255
  %98 = tail call i32 @llvm.ctpop.i32(i32 %97) #8
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  store i8 %101, i8* %19, align 1, !tbaa !2446
  %102 = xor i64 %92, %93
  %103 = lshr i64 %102, 4
  %104 = trunc i64 %103 to i8
  %105 = and i8 %104, 1
  store i8 %105, i8* %24, align 1, !tbaa !2447
  %106 = icmp eq i64 %93, 0
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %27, align 1, !tbaa !2448
  %108 = lshr i64 %93, 63
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* %30, align 1, !tbaa !2449
  %110 = lshr i64 %92, 63
  %111 = xor i64 %108, %110
  %112 = add nuw nsw i64 %111, %108
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %36, align 1, !tbaa !2450
  %115 = add i64 %89, 15
  store i64 %115, i64* %PC, align 8
  store i64 %93, i64* %91, align 8
  %116 = load i64, i64* %RBP, align 8
  %117 = add i64 %116, -32
  %118 = load i64, i64* %PC, align 8
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %RCX, align 8, !tbaa !2428
  %122 = bitcast i64* %RAX to i64**
  %123 = load i64*, i64** %122, align 8
  %124 = add i64 %118, 7
  store i64 %124, i64* %PC, align 8
  store i64 %121, i64* %123, align 8
  %125 = load i64, i64* %PC, align 8
  %126 = add i64 %125, -63
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_4021e4

block_402228:                                     ; preds = %block_4021e4
  %127 = load i64, i64* %RSP, align 8
  %128 = add i64 %127, 32
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %129 = icmp ugt i64 %127, -33
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %12, align 1, !tbaa !2432
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #8
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %19, align 1, !tbaa !2446
  %137 = xor i64 %127, %128
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %24, align 1, !tbaa !2447
  %141 = icmp eq i64 %128, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !2448
  %143 = lshr i64 %128, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %30, align 1, !tbaa !2449
  %145 = lshr i64 %127, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %36, align 1, !tbaa !2450
  %150 = add i64 %193, 5
  store i64 %150, i64* %PC, align 8
  %151 = add i64 %127, 40
  %152 = inttoptr i64 %128 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RBP, align 8, !tbaa !2428
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %193, 6
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %157 = add i64 %127, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4021e4:                                     ; preds = %block_4021f2, %block_4021d0
  %158 = phi i64 [ %.pre, %block_4021d0 ], [ %126, %block_4021f2 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4021d0 ], [ %86, %block_4021f2 ]
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -8
  %161 = add i64 %158, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %159, -16
  %165 = add i64 %158, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %163, %167
  %169 = icmp ult i64 %163, %167
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %12, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %19, align 1, !tbaa !2446
  %177 = xor i64 %167, %163
  %178 = xor i64 %177, %168
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %24, align 1, !tbaa !2447
  %182 = icmp eq i64 %168, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %27, align 1, !tbaa !2448
  %184 = lshr i64 %168, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %30, align 1, !tbaa !2449
  %186 = lshr i64 %163, 63
  %187 = lshr i64 %167, 63
  %188 = xor i64 %187, %186
  %189 = xor i64 %184, %186
  %190 = add nuw nsw i64 %189, %188
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %36, align 1, !tbaa !2450
  %.v = select i1 %182, i64 68, i64 14
  %193 = add i64 %158, %.v
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  br i1 %182, label %block_402228, label %block_4021f2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e10__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405e10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e30__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402120__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402120:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = bitcast %union.VectorReg* %4 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402130

block_40215f:                                     ; preds = %block_402130
  %51 = load i64, i64* %RSP, align 8
  %52 = add i64 %51, 16
  store i64 %52, i64* %RSP, align 8, !tbaa !2428
  %53 = icmp ugt i64 %51, -17
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %14, align 1, !tbaa !2432
  %55 = trunc i64 %52 to i32
  %56 = and i32 %55, 255
  %57 = tail call i32 @llvm.ctpop.i32(i32 %56) #8
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  store i8 %60, i8* %21, align 1, !tbaa !2446
  %61 = xor i64 %51, 16
  %62 = xor i64 %61, %52
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  store i8 %65, i8* %27, align 1, !tbaa !2447
  %66 = icmp eq i64 %52, 0
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %30, align 1, !tbaa !2448
  %68 = lshr i64 %52, 63
  %69 = trunc i64 %68 to i8
  store i8 %69, i8* %33, align 1, !tbaa !2449
  %70 = lshr i64 %51, 63
  %71 = xor i64 %68, %70
  %72 = add nuw nsw i64 %71, %68
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %39, align 1, !tbaa !2450
  %75 = add i64 %118, 5
  store i64 %75, i64* %PC, align 8
  %76 = add i64 %51, 24
  %77 = inttoptr i64 %52 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RBP, align 8, !tbaa !2428
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %118, 6
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %76 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %PC, align 8, !tbaa !2428
  %82 = add i64 %51, 32
  store i64 %82, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402130:                                     ; preds = %block_40213e, %block_402120
  %83 = phi i64 [ %.pre, %block_402120 ], [ %163, %block_40213e ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402120 ], [ %124, %block_40213e ]
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -8
  %86 = add i64 %83, 4
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %84, -16
  %90 = add i64 %83, 8
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %88, %92
  %94 = icmp ult i64 %88, %92
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %14, align 1, !tbaa !2432
  %96 = trunc i64 %93 to i32
  %97 = and i32 %96, 255
  %98 = tail call i32 @llvm.ctpop.i32(i32 %97) #8
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  store i8 %101, i8* %21, align 1, !tbaa !2446
  %102 = xor i64 %92, %88
  %103 = xor i64 %102, %93
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %27, align 1, !tbaa !2447
  %107 = icmp eq i64 %93, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %30, align 1, !tbaa !2448
  %109 = lshr i64 %93, 63
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %33, align 1, !tbaa !2449
  %111 = lshr i64 %88, 63
  %112 = lshr i64 %92, 63
  %113 = xor i64 %112, %111
  %114 = xor i64 %109, %111
  %115 = add nuw nsw i64 %114, %113
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %39, align 1, !tbaa !2450
  %.v = select i1 %107, i64 47, i64 14
  %118 = add i64 %83, %.v
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  br i1 %107, label %block_40215f, label %block_40213e

block_40213e:                                     ; preds = %block_402130
  %119 = add i64 %118, -6686
  %120 = add i64 %118, 5
  %121 = load i64, i64* %RSP, align 8, !tbaa !2428
  %122 = add i64 %121, -8
  %123 = inttoptr i64 %122 to i64*
  store i64 %120, i64* %123, align 8
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  store i64 %119, i64* %PC, align 8, !tbaa !2428
  %124 = tail call fastcc %struct.Memory* @ext_400720_rand(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %125 = load i32, i32* %EAX, align 4
  %126 = load i64, i64* %PC, align 8
  %127 = sitofp i32 %125 to double
  store double %127, double* %50, align 1, !tbaa !2451
  %128 = load i64, i64* %RBP, align 8
  %129 = add i64 %128, -8
  %130 = add i64 %126, 8
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RCX, align 8, !tbaa !2428
  %133 = add i64 %132, 8
  store i64 %133, i64* %RDX, align 8, !tbaa !2428
  %134 = icmp ugt i64 %132, -9
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %14, align 1, !tbaa !2432
  %136 = trunc i64 %133 to i32
  %137 = and i32 %136, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #8
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %21, align 1, !tbaa !2446
  %142 = xor i64 %132, %133
  %143 = lshr i64 %142, 4
  %144 = trunc i64 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %27, align 1, !tbaa !2447
  %146 = icmp eq i64 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %30, align 1, !tbaa !2448
  %148 = lshr i64 %133, 63
  %149 = trunc i64 %148 to i8
  store i8 %149, i8* %33, align 1, !tbaa !2449
  %150 = lshr i64 %132, 63
  %151 = xor i64 %148, %150
  %152 = add nuw nsw i64 %151, %148
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %39, align 1, !tbaa !2450
  %155 = add i64 %126, 19
  store i64 %155, i64* %PC, align 8
  store i64 %133, i64* %131, align 8
  %156 = bitcast i64* %RCX to i64**
  %157 = load i64*, i64** %156, align 8
  %158 = load i64, i64* %PC, align 8
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC, align 8
  %160 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %161 = load i64, i64* %160, align 1
  store i64 %161, i64* %157, align 8
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, -42
  store i64 %163, i64* %PC, align 8, !tbaa !2428
  br label %block_402130
}

; Function Attrs: noinline
define %struct.Memory* @sub_4061f0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4061f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400790___cxx_global_var_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400790:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 ptrtoint (%VData_type* @VData to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%VData_type* @VData to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  br label %block_4007ab

block_4007ab:                                     ; preds = %block_4007ab, %block_400790
  %43 = phi i64 [ %42, %block_400790 ], [ %100, %block_4007ab ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400790 ], [ %58, %block_4007ab ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = add i64 %44, -16
  %50 = add i64 %43, 11
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5466
  %54 = add i64 %52, 5
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_401d10__ZN12ValueWrapperIdEC2Ev_renamed_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %MEMORY.0)
  %59 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 ptrtoint (%VData_type* @VData to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2432
  %60 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000) to i32), i32 255)) #8
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* %19, align 1, !tbaa !2446
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2447
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2448
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2449
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%VData_type* @VData to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %59, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2432
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #8
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2446
  %80 = xor i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2447
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2450
  %94 = add i64 %64, -8
  %95 = add i64 %59, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = load i8, i8* %28, align 1, !tbaa !2448
  %99 = icmp eq i8 %98, 0
  %.v = select i1 %99, i64 -47, i64 6
  %100 = add i64 %97, %.v
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  br i1 %99, label %block_4007ab, label %block_4007e0

block_4007e0:                                     ; preds = %block_4007ab
  %101 = load i64, i64* %RSP, align 8
  %102 = add i64 %101, 16
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  %103 = icmp ugt i64 %101, -17
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %12, align 1, !tbaa !2432
  %105 = trunc i64 %102 to i32
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #8
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %19, align 1, !tbaa !2446
  %111 = xor i64 %101, 16
  %112 = xor i64 %111, %102
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %25, align 1, !tbaa !2447
  %116 = icmp eq i64 %102, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %28, align 1, !tbaa !2448
  %118 = lshr i64 %102, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* %31, align 1, !tbaa !2449
  %120 = lshr i64 %101, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %37, align 1, !tbaa !2450
  %125 = add i64 %100, 5
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %101, 24
  %127 = inttoptr i64 %102 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %RBP, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %100, 6
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %101, 32
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %58
}

; Function Attrs: noinline
define %struct.Memory* @sub_4063d0__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4063d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  %40 = add i64 %9, 12
  store i64 %40, i64* %PC, align 8
  %41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -24
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -32
  %52 = load i64, i64* %RSI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4063e5

block_4063e5:                                     ; preds = %block_4063f3, %block_4063d0
  %56 = phi i64 [ %.pre, %block_4063d0 ], [ %143, %block_4063f3 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4063d0 ], [ %126, %block_4063f3 ]
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -24
  %59 = add i64 %56, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RAX, align 8, !tbaa !2428
  %62 = add i64 %57, -32
  %63 = add i64 %56, 8
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %61, %65
  %67 = icmp ult i64 %61, %65
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %13, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %20, align 1, !tbaa !2446
  %75 = xor i64 %65, %61
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %26, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %29, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %32, align 1, !tbaa !2449
  %84 = lshr i64 %61, 63
  %85 = lshr i64 %65, 63
  %86 = xor i64 %85, %84
  %87 = xor i64 %82, %84
  %88 = add nuw nsw i64 %87, %86
  %89 = icmp eq i64 %88, 2
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %38, align 1, !tbaa !2450
  %.v = select i1 %80, i64 59, i64 14
  %91 = add i64 %56, %.v
  %92 = add i64 %57, -16
  %93 = add i64 %91, 4
  store i64 %93, i64* %PC, align 8
  br i1 %80, label %block_406420, label %block_4063f3

block_4063f3:                                     ; preds = %block_4063e5
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %94 = add i64 %91, 8
  store i64 %94, i64* %PC, align 8
  %95 = load i64, i64* %60, align 8
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = add i64 %95, 8
  store i64 %96, i64* %RCX, align 8, !tbaa !2428
  %97 = icmp ugt i64 %95, -9
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %13, align 1, !tbaa !2432
  %99 = trunc i64 %96 to i32
  %100 = and i32 %99, 255
  %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #8
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* %20, align 1, !tbaa !2446
  %105 = xor i64 %95, %96
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  store i8 %108, i8* %26, align 1, !tbaa !2447
  %109 = icmp eq i64 %96, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %29, align 1, !tbaa !2448
  %111 = lshr i64 %96, 63
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %32, align 1, !tbaa !2449
  %113 = lshr i64 %95, 63
  %114 = xor i64 %111, %113
  %115 = add nuw nsw i64 %114, %111
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %38, align 1, !tbaa !2450
  %118 = add i64 %91, 19
  store i64 %118, i64* %PC, align 8
  store i64 %96, i64* %60, align 8
  %119 = load i64, i64* %RAX, align 8
  %120 = load i64, i64* %PC, align 8
  store i64 %119, i64* %RSI, align 8, !tbaa !2428
  %121 = add i64 %120, -406
  %122 = add i64 %120, 8
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_406270__ZplIdE12ValueWrapperIT_ERKS2_S4__renamed_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %MEMORY.0)
  %127 = load i64, i64* %RBP, align 8
  %128 = add i64 %127, -40
  %129 = load i64, i64* %PC, align 8
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC, align 8
  %131 = load i64, i64* %41, align 1
  %132 = inttoptr i64 %128 to i64*
  store i64 %131, i64* %132, align 8
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -40
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = add i64 %133, -16
  %140 = add i64 %135, 8
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %138, i64* %141, align 8
  %142 = load i64, i64* %PC, align 8
  %143 = add i64 %142, -54
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  br label %block_4063e5

block_406420:                                     ; preds = %block_4063e5
  %144 = inttoptr i64 %92 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %RAX, align 8, !tbaa !2428
  %146 = add i64 %57, -8
  %147 = add i64 %91, 8
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %146 to i64*
  store i64 %145, i64* %148, align 8
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %41, align 1, !tbaa !2451
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %156 = bitcast i64* %155 to double*
  store double 0.000000e+00, double* %156, align 1, !tbaa !2451
  %157 = load i64, i64* %RSP, align 8
  %158 = add i64 %157, 48
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  %159 = icmp ugt i64 %157, -49
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %13, align 1, !tbaa !2432
  %161 = trunc i64 %158 to i32
  %162 = and i32 %161, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #8
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %20, align 1, !tbaa !2446
  %167 = xor i64 %157, 16
  %168 = xor i64 %167, %158
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %26, align 1, !tbaa !2447
  %172 = icmp eq i64 %158, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %29, align 1, !tbaa !2448
  %174 = lshr i64 %158, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %32, align 1, !tbaa !2449
  %176 = lshr i64 %157, 63
  %177 = xor i64 %174, %176
  %178 = add nuw nsw i64 %177, %174
  %179 = icmp eq i64 %178, 2
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %38, align 1, !tbaa !2450
  %181 = add i64 %151, 10
  store i64 %181, i64* %PC, align 8
  %182 = add i64 %157, 56
  %183 = inttoptr i64 %158 to i64*
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %RBP, align 8, !tbaa !2428
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  %185 = add i64 %151, 11
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %182 to i64*
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %PC, align 8, !tbaa !2428
  %188 = add i64 %157, 64
  store i64 %188, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400970___cxx_global_var_init_17(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400970:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dMPe_type* @dMPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4703
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_4036a0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4036a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4036f0__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #8
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %65, %.v
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_4036e0, label %block_4036c5

block_4036c5:                                     ; preds = %block_4036a0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %76 = add i64 %73, -12309
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4036e0

block_4036e0:                                     ; preds = %block_4036c5, %block_4036a0
  %88 = phi i64 [ %73, %block_4036a0 ], [ %.pre, %block_4036c5 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_4036a0 ], [ %81, %block_4036c5 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #8
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %89, %90
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_404160__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404160:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -32
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ugt i64 %62, -9
  %65 = zext i1 %64 to i8
  store i8 %65, i8* %13, align 1, !tbaa !2432
  %66 = trunc i64 %63 to i32
  %67 = and i32 %66, 255
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #8
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  store i8 %71, i8* %20, align 1, !tbaa !2446
  %72 = xor i64 %62, %63
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %25, align 1, !tbaa !2447
  %76 = icmp eq i64 %63, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %28, align 1, !tbaa !2448
  %78 = lshr i64 %63, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %31, align 1, !tbaa !2449
  %80 = lshr i64 %62, 63
  %81 = xor i64 %78, %80
  %82 = add nuw nsw i64 %81, %78
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %37, align 1, !tbaa !2450
  %85 = add i64 %59, 12
  store i64 %85, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_404184

block_4041da:                                     ; preds = %block_4041c8, %block_4041d6
  %86 = phi i64 [ %.pre4, %block_4041d6 ], [ %206, %block_4041c8 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4041d6 ], [ %190, %block_4041c8 ]
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -1
  %89 = add i64 %86, 3
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i8*
  %91 = load i8, i8* %90, align 1
  %92 = and i8 %91, 1
  %93 = zext i8 %92 to i64
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = load i64, i64* %RSP, align 8
  %95 = add i64 %94, 32
  store i64 %95, i64* %RSP, align 8, !tbaa !2428
  %96 = icmp ugt i64 %94, -33
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %13, align 1, !tbaa !2432
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #8
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %20, align 1, !tbaa !2446
  %104 = xor i64 %94, %95
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %25, align 1, !tbaa !2447
  %108 = icmp eq i64 %95, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %28, align 1, !tbaa !2448
  %110 = lshr i64 %95, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %31, align 1, !tbaa !2449
  %112 = lshr i64 %94, 63
  %113 = xor i64 %110, %112
  %114 = add nuw nsw i64 %113, %110
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %37, align 1, !tbaa !2450
  %117 = add i64 %86, 13
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %94, 40
  %119 = inttoptr i64 %95 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RBP, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %86, 14
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %118 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %PC, align 8, !tbaa !2428
  %124 = add i64 %94, 48
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4041d6:                                     ; preds = %block_404184
  %125 = add i64 %208, -1
  %126 = add i64 %242, 4
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i8*
  store i8 1, i8* %127, align 1
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_4041da

block_404192:                                     ; preds = %block_404184
  %128 = add i64 %242, 4
  store i64 %128, i64* %PC, align 8
  %129 = load i64, i64* %211, align 8
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = add i64 %129, 8
  store i64 %130, i64* %RCX, align 8, !tbaa !2428
  %131 = icmp ugt i64 %129, -9
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %13, align 1, !tbaa !2432
  %133 = trunc i64 %130 to i32
  %134 = and i32 %133, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #8
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %20, align 1, !tbaa !2446
  %139 = xor i64 %129, %130
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* %25, align 1, !tbaa !2447
  %143 = icmp eq i64 %130, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !2448
  %145 = lshr i64 %130, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* %31, align 1, !tbaa !2449
  %147 = lshr i64 %129, 63
  %148 = xor i64 %145, %147
  %149 = add nuw nsw i64 %148, %145
  %150 = icmp eq i64 %149, 2
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %37, align 1, !tbaa !2450
  %152 = add i64 %242, 15
  store i64 %152, i64* %PC, align 8
  store i64 %130, i64* %211, align 8
  %153 = load i64, i64* %RBP, align 8
  %154 = add i64 %153, -32
  %155 = load i64, i64* %PC, align 8
  %156 = add i64 %155, 4
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %154 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %159 = add i64 %158, 8
  store i64 %159, i64* %RDX, align 8, !tbaa !2428
  %160 = icmp ugt i64 %158, -9
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %13, align 1, !tbaa !2432
  %162 = trunc i64 %159 to i32
  %163 = and i32 %162, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #8
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  store i8 %167, i8* %20, align 1, !tbaa !2446
  %168 = xor i64 %158, %159
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %25, align 1, !tbaa !2447
  %172 = icmp eq i64 %159, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %28, align 1, !tbaa !2448
  %174 = lshr i64 %159, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %31, align 1, !tbaa !2449
  %176 = lshr i64 %158, 63
  %177 = xor i64 %174, %176
  %178 = add nuw nsw i64 %177, %174
  %179 = icmp eq i64 %178, 2
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %37, align 1, !tbaa !2450
  %181 = add i64 %155, 15
  store i64 %181, i64* %PC, align 8
  store i64 %159, i64* %157, align 8
  %182 = load i64, i64* %RAX, align 8
  %183 = load i64, i64* %PC, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %184 = load i64, i64* %RCX, align 8
  store i64 %184, i64* %RSI, align 8, !tbaa !2428
  %185 = add i64 %183, -4000
  %186 = add i64 %183, 11
  %187 = load i64, i64* %RSP, align 8, !tbaa !2428
  %188 = add i64 %187, -8
  %189 = inttoptr i64 %188 to i64*
  store i64 %186, i64* %189, align 8
  store i64 %188, i64* %RSP, align 8, !tbaa !2428
  store i64 %185, i64* %PC, align 8, !tbaa !2428
  %190 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %185, %struct.Memory* %MEMORY.1)
  %191 = load i8, i8* %AL, align 1
  %192 = load i64, i64* %PC, align 8
  %193 = and i8 %191, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %194 = zext i8 %193 to i32
  %195 = tail call i32 @llvm.ctpop.i32(i32 %194) #8
  %196 = trunc i32 %195 to i8
  %197 = xor i8 %196, 1
  store i8 %197, i8* %20, align 1, !tbaa !2446
  %198 = xor i8 %193, 1
  store i8 %198, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %199 = icmp eq i8 %198, 0
  %.v5 = select i1 %199, i64 13, i64 8
  %200 = add i64 %192, %.v5
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  br i1 %199, label %block_4041c8, label %block_4041c3

block_4041c8:                                     ; preds = %block_404192
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -1
  %203 = add i64 %200, 4
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i8*
  store i8 0, i8* %204, align 1
  %205 = load i64, i64* %PC, align 8
  %206 = add i64 %205, 14
  store i64 %206, i64* %PC, align 8, !tbaa !2428
  br label %block_4041da

block_404184:                                     ; preds = %block_4041c3, %block_404160
  %207 = phi i64 [ %.pre, %block_404160 ], [ %243, %block_4041c3 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_404160 ], [ %190, %block_4041c3 ]
  %208 = load i64, i64* %RBP, align 8
  %209 = add i64 %208, -16
  %210 = add i64 %207, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %209 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = add i64 %208, -24
  %214 = add i64 %207, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = sub i64 %212, %216
  %218 = icmp ult i64 %212, %216
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %13, align 1, !tbaa !2432
  %220 = trunc i64 %217 to i32
  %221 = and i32 %220, 255
  %222 = tail call i32 @llvm.ctpop.i32(i32 %221) #8
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  store i8 %225, i8* %20, align 1, !tbaa !2446
  %226 = xor i64 %216, %212
  %227 = xor i64 %226, %217
  %228 = lshr i64 %227, 4
  %229 = trunc i64 %228 to i8
  %230 = and i8 %229, 1
  store i8 %230, i8* %25, align 1, !tbaa !2447
  %231 = icmp eq i64 %217, 0
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %28, align 1, !tbaa !2448
  %233 = lshr i64 %217, 63
  %234 = trunc i64 %233 to i8
  store i8 %234, i8* %31, align 1, !tbaa !2449
  %235 = lshr i64 %212, 63
  %236 = lshr i64 %216, 63
  %237 = xor i64 %236, %235
  %238 = xor i64 %233, %235
  %239 = add nuw nsw i64 %238, %237
  %240 = icmp eq i64 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %37, align 1, !tbaa !2450
  %.v = select i1 %231, i64 82, i64 14
  %242 = add i64 %207, %.v
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  br i1 %231, label %block_4041d6, label %block_404192

block_4041c3:                                     ; preds = %block_404192
  %243 = add i64 %200, -63
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  br label %block_404184
}

; Function Attrs: noinline
define %struct.Memory* @sub_403cd0__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403cd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2453
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #8
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %39, align 1, !tbaa !2453
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2453
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2453
  store i8 0, i8* %42, align 1, !tbaa !2453
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400fa0__Z17summarize_simplefP8_IO_FILEPKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400fa0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -104
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = icmp ult i64 %10, 96
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !2446
  %24 = xor i64 %10, %13
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %10, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = bitcast %union.VectorReg* %6 to i8*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %43 = bitcast %union.VectorReg* %6 to i32*
  store i32 0, i32* %43, align 1, !tbaa !2456
  %44 = getelementptr inbounds i8, i8* %41, i64 4
  %45 = bitcast i8* %44 to i32*
  store i32 0, i32* %45, align 1, !tbaa !2456
  %46 = bitcast i64* %42 to i32*
  store i32 0, i32* %46, align 1, !tbaa !2456
  %47 = getelementptr inbounds i8, i8* %41, i64 12
  %48 = bitcast i8* %47 to i32*
  store i32 0, i32* %48, align 1, !tbaa !2456
  %49 = add i64 %9, -16
  %50 = load i64, i64* %RDI, align 8
  %51 = add i64 %12, 14
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -16
  %55 = load i64, i64* %RSI, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -32
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -36
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, 7
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %67 to i32*
  store i32 12, i32* %70, align 4
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -20
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 7
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i32*
  store i32 0, i32* %75, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400fc6

block_401152:                                     ; preds = %block_401142
  %76 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %76, i64* %RAX, align 8, !tbaa !2428
  %77 = add i64 %184, 12
  store i64 %77, i64* %PC, align 8
  %78 = load i32, i32* %154, align 4
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  store i64 %80, i64* %RCX, align 8, !tbaa !2428
  %81 = lshr i64 %79, 59
  %82 = and i64 %81, 1
  %83 = add i64 %80, %76
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = icmp ult i64 %83, %76
  %85 = icmp ult i64 %83, %80
  %86 = or i1 %84, %85
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %16, align 1, !tbaa !2432
  %88 = trunc i64 %83 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #8
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %23, align 1, !tbaa !2446
  %94 = xor i64 %80, %76
  %95 = xor i64 %94, %83
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %28, align 1, !tbaa !2447
  %99 = icmp eq i64 %83, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %31, align 1, !tbaa !2448
  %101 = lshr i64 %83, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %34, align 1, !tbaa !2449
  %103 = lshr i64 %76, 63
  %104 = xor i64 %101, %103
  %105 = xor i64 %101, %82
  %106 = add nuw nsw i64 %104, %105
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %40, align 1, !tbaa !2450
  %109 = add i64 %184, 23
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %83 to double*
  %111 = load double, double* %110, align 8
  store double %111, double* %450, align 1, !tbaa !2451
  store double 0.000000e+00, double* %451, align 1, !tbaa !2451
  %112 = add i64 %151, -32
  %113 = add i64 %184, 28
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to double*
  %115 = load double, double* %114, align 8
  %116 = fadd double %111, %115
  store double %116, double* %450, align 1, !tbaa !2451
  store i64 0, i64* %42, align 1, !tbaa !2451
  %117 = add i64 %184, 33
  store i64 %117, i64* %PC, align 8
  store double %116, double* %114, align 8
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -20
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = add i32 %123, 1
  %125 = zext i32 %124 to i64
  store i64 %125, i64* %RAX, align 8, !tbaa !2428
  %126 = icmp eq i32 %123, -1
  %127 = icmp eq i32 %124, 0
  %128 = or i1 %126, %127
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %16, align 1, !tbaa !2432
  %130 = and i32 %124, 255
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #8
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  store i8 %134, i8* %23, align 1, !tbaa !2446
  %135 = xor i32 %123, %124
  %136 = lshr i32 %135, 4
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %28, align 1, !tbaa !2447
  %139 = zext i1 %127 to i8
  store i8 %139, i8* %31, align 1, !tbaa !2448
  %140 = lshr i32 %124, 31
  %141 = trunc i32 %140 to i8
  store i8 %141, i8* %34, align 1, !tbaa !2449
  %142 = lshr i32 %123, 31
  %143 = xor i32 %140, %142
  %144 = add nuw nsw i32 %143, %140
  %145 = icmp eq i32 %144, 2
  %146 = zext i1 %145 to i8
  store i8 %146, i8* %40, align 1, !tbaa !2450
  %147 = add i64 %120, 9
  store i64 %147, i64* %PC, align 8
  store i32 %124, i32* %122, align 4
  %148 = load i64, i64* %PC, align 8
  %149 = add i64 %148, -58
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  br label %block_401142

block_401142:                                     ; preds = %block_40113b, %block_401152
  %150 = phi i64 [ %.pre5, %block_40113b ], [ %149, %block_401152 ]
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -20
  %153 = add i64 %150, 3
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %158 = sub i32 %155, %157
  %159 = icmp ult i32 %155, %157
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %16, align 1, !tbaa !2432
  %161 = and i32 %158, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #8
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %23, align 1, !tbaa !2446
  %166 = xor i32 %157, %155
  %167 = xor i32 %166, %158
  %168 = lshr i32 %167, 4
  %169 = trunc i32 %168 to i8
  %170 = and i8 %169, 1
  store i8 %170, i8* %28, align 1, !tbaa !2447
  %171 = icmp eq i32 %158, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %31, align 1, !tbaa !2448
  %173 = lshr i32 %158, 31
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %34, align 1, !tbaa !2449
  %175 = lshr i32 %155, 31
  %176 = lshr i32 %157, 31
  %177 = xor i32 %176, %175
  %178 = xor i32 %173, %175
  %179 = add nuw nsw i32 %178, %177
  %180 = icmp eq i32 %179, 2
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %40, align 1, !tbaa !2450
  %182 = icmp ne i8 %174, 0
  %183 = xor i1 %182, %180
  %.v8 = select i1 %183, i64 16, i64 63
  %184 = add i64 %150, %.v8
  store i64 %184, i64* %PC, align 8, !tbaa !2428
  br i1 %183, label %block_401152, label %block_401181

block_40113b:                                     ; preds = %block_401072
  %185 = add i64 %376, 7
  store i64 %185, i64* %PC, align 8
  store i32 0, i32* %346, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401142

block_400fd6:                                     ; preds = %block_400fc6
  %186 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = add i64 %341, 12
  store i64 %187, i64* %PC, align 8
  %188 = load i32, i32* %311, align 4
  %189 = sext i32 %188 to i64
  %190 = shl nsw i64 %189, 4
  store i64 %190, i64* %RCX, align 8, !tbaa !2428
  %191 = lshr i64 %189, 59
  %192 = and i64 %191, 1
  %193 = add i64 %190, %186
  store i64 %193, i64* %RAX, align 8, !tbaa !2428
  %194 = icmp ult i64 %193, %186
  %195 = icmp ult i64 %193, %190
  %196 = or i1 %194, %195
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %16, align 1, !tbaa !2432
  %198 = trunc i64 %193 to i32
  %199 = and i32 %198, 255
  %200 = tail call i32 @llvm.ctpop.i32(i32 %199) #8
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  store i8 %203, i8* %23, align 1, !tbaa !2446
  %204 = xor i64 %190, %186
  %205 = xor i64 %204, %193
  %206 = lshr i64 %205, 4
  %207 = trunc i64 %206 to i8
  %208 = and i8 %207, 1
  store i8 %208, i8* %28, align 1, !tbaa !2447
  %209 = icmp eq i64 %193, 0
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %31, align 1, !tbaa !2448
  %211 = lshr i64 %193, 63
  %212 = trunc i64 %211 to i8
  store i8 %212, i8* %34, align 1, !tbaa !2449
  %213 = lshr i64 %186, 63
  %214 = xor i64 %211, %213
  %215 = xor i64 %211, %192
  %216 = add nuw nsw i64 %214, %215
  %217 = icmp eq i64 %216, 2
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %40, align 1, !tbaa !2450
  %219 = add i64 %193, 8
  %220 = add i64 %341, 23
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i64*
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %RDI, align 8, !tbaa !2428
  %223 = add i64 %341, -2358
  %224 = add i64 %341, 28
  %225 = load i64, i64* %RSP, align 8, !tbaa !2428
  %226 = add i64 %225, -8
  %227 = inttoptr i64 %226 to i64*
  store i64 %224, i64* %227, align 8
  store i64 %226, i64* %RSP, align 8, !tbaa !2428
  store i64 %223, i64* %PC, align 8, !tbaa !2428
  %228 = tail call fastcc %struct.Memory* @ext_4006a0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %229 = load i32, i32* %EAX, align 4
  %230 = zext i32 %229 to i64
  %231 = load i64, i64* %PC, align 8
  store i64 %230, i64* %RDX, align 8, !tbaa !2428
  %232 = load i64, i64* %RBP, align 8
  %233 = add i64 %232, -40
  %234 = add i64 %231, 5
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %233 to i32*
  store i32 %229, i32* %235, align 4
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -40
  %238 = load i64, i64* %PC, align 8
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RDX, align 8, !tbaa !2428
  %243 = add i64 %236, -36
  %244 = add i64 %238, 6
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i32*
  %246 = load i32, i32* %245, align 4
  %247 = sub i32 %241, %246
  %248 = icmp ult i32 %241, %246
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %16, align 1, !tbaa !2432
  %250 = and i32 %247, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #8
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %23, align 1, !tbaa !2446
  %255 = xor i32 %246, %241
  %256 = xor i32 %255, %247
  %257 = lshr i32 %256, 4
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  store i8 %259, i8* %28, align 1, !tbaa !2447
  %260 = icmp eq i32 %247, 0
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %31, align 1, !tbaa !2448
  %262 = lshr i32 %247, 31
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %34, align 1, !tbaa !2449
  %264 = lshr i32 %241, 31
  %265 = lshr i32 %246, 31
  %266 = xor i32 %265, %264
  %267 = xor i32 %262, %264
  %268 = add nuw nsw i32 %267, %266
  %269 = icmp eq i32 %268, 2
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %40, align 1, !tbaa !2450
  %271 = icmp ne i8 %263, 0
  %272 = xor i1 %271, %269
  %273 = or i1 %260, %272
  %.v6 = select i1 %273, i64 18, i64 12
  %274 = add i64 %238, %.v6
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  br i1 %273, label %block_401009, label %block_401003

block_401009:                                     ; preds = %block_401003, %block_400fd6
  %275 = phi i64 [ %.pre3, %block_401003 ], [ %236, %block_400fd6 ]
  %276 = phi i64 [ %.pre2, %block_401003 ], [ %274, %block_400fd6 ]
  %277 = add i64 %275, -20
  %278 = add i64 %276, 8
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i32*
  %280 = load i32, i32* %279, align 4
  %281 = add i32 %280, 1
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = icmp eq i32 %280, -1
  %284 = icmp eq i32 %281, 0
  %285 = or i1 %283, %284
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %16, align 1, !tbaa !2432
  %287 = and i32 %281, 255
  %288 = tail call i32 @llvm.ctpop.i32(i32 %287) #8
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  store i8 %291, i8* %23, align 1, !tbaa !2446
  %292 = xor i32 %280, %281
  %293 = lshr i32 %292, 4
  %294 = trunc i32 %293 to i8
  %295 = and i8 %294, 1
  store i8 %295, i8* %28, align 1, !tbaa !2447
  %296 = zext i1 %284 to i8
  store i8 %296, i8* %31, align 1, !tbaa !2448
  %297 = lshr i32 %281, 31
  %298 = trunc i32 %297 to i8
  store i8 %298, i8* %34, align 1, !tbaa !2449
  %299 = lshr i32 %280, 31
  %300 = xor i32 %297, %299
  %301 = add nuw nsw i32 %300, %297
  %302 = icmp eq i32 %301, 2
  %303 = zext i1 %302 to i8
  store i8 %303, i8* %40, align 1, !tbaa !2450
  %304 = add i64 %276, 14
  store i64 %304, i64* %PC, align 8
  store i32 %281, i32* %279, align 4
  %305 = load i64, i64* %PC, align 8
  %306 = add i64 %305, -81
  store i64 %306, i64* %PC, align 8, !tbaa !2428
  br label %block_400fc6

block_400fc6:                                     ; preds = %block_401009, %block_400fa0
  %307 = phi i64 [ %.pre, %block_400fa0 ], [ %306, %block_401009 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400fa0 ], [ %228, %block_401009 ]
  %308 = load i64, i64* %RBP, align 8
  %309 = add i64 %308, -20
  %310 = add i64 %307, 3
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %309 to i32*
  %312 = load i32, i32* %311, align 4
  %313 = zext i32 %312 to i64
  store i64 %313, i64* %RAX, align 8, !tbaa !2428
  %314 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %315 = sub i32 %312, %314
  %316 = icmp ult i32 %312, %314
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %16, align 1, !tbaa !2432
  %318 = and i32 %315, 255
  %319 = tail call i32 @llvm.ctpop.i32(i32 %318) #8
  %320 = trunc i32 %319 to i8
  %321 = and i8 %320, 1
  %322 = xor i8 %321, 1
  store i8 %322, i8* %23, align 1, !tbaa !2446
  %323 = xor i32 %314, %312
  %324 = xor i32 %323, %315
  %325 = lshr i32 %324, 4
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  store i8 %327, i8* %28, align 1, !tbaa !2447
  %328 = icmp eq i32 %315, 0
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %31, align 1, !tbaa !2448
  %330 = lshr i32 %315, 31
  %331 = trunc i32 %330 to i8
  store i8 %331, i8* %34, align 1, !tbaa !2449
  %332 = lshr i32 %312, 31
  %333 = lshr i32 %314, 31
  %334 = xor i32 %333, %332
  %335 = xor i32 %330, %332
  %336 = add nuw nsw i32 %335, %334
  %337 = icmp eq i32 %336, 2
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %40, align 1, !tbaa !2450
  %339 = icmp ne i8 %331, 0
  %340 = xor i1 %339, %337
  %.v = select i1 %340, i64 16, i64 86
  %341 = add i64 %307, %.v
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  br i1 %340, label %block_400fd6, label %block_40101c

block_401072:                                     ; preds = %block_401082, %block_40101c
  %342 = phi i64 [ %.pre4, %block_40101c ], [ %716, %block_401082 ]
  %MEMORY.3 = phi %struct.Memory* [ %438, %block_40101c ], [ %678, %block_401082 ]
  %343 = load i64, i64* %RBP, align 8
  %344 = add i64 %343, -20
  %345 = add i64 %342, 3
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %344 to i32*
  %347 = load i32, i32* %346, align 4
  %348 = zext i32 %347 to i64
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %350 = sub i32 %347, %349
  %351 = icmp ult i32 %347, %349
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %16, align 1, !tbaa !2432
  %353 = and i32 %350, 255
  %354 = tail call i32 @llvm.ctpop.i32(i32 %353) #8
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  store i8 %357, i8* %23, align 1, !tbaa !2446
  %358 = xor i32 %349, %347
  %359 = xor i32 %358, %350
  %360 = lshr i32 %359, 4
  %361 = trunc i32 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %28, align 1, !tbaa !2447
  %363 = icmp eq i32 %350, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %31, align 1, !tbaa !2448
  %365 = lshr i32 %350, 31
  %366 = trunc i32 %365 to i8
  store i8 %366, i8* %34, align 1, !tbaa !2449
  %367 = lshr i32 %347, 31
  %368 = lshr i32 %349, 31
  %369 = xor i32 %368, %367
  %370 = xor i32 %365, %367
  %371 = add nuw nsw i32 %370, %369
  %372 = icmp eq i32 %371, 2
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %40, align 1, !tbaa !2450
  %374 = icmp ne i8 %366, 0
  %375 = xor i1 %374, %372
  %.v7 = select i1 %375, i64 16, i64 201
  %376 = add i64 %342, %.v7
  store i64 %376, i64* %PC, align 8, !tbaa !2428
  br i1 %375, label %block_401082, label %block_40113b

block_401003:                                     ; preds = %block_400fd6
  %377 = add i64 %274, 3
  store i64 %377, i64* %PC, align 8
  %378 = load i32, i32* %240, align 4
  %379 = zext i32 %378 to i64
  store i64 %379, i64* %RAX, align 8, !tbaa !2428
  %380 = add i64 %274, 6
  store i64 %380, i64* %PC, align 8
  store i32 %378, i32* %245, align 4
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %block_401009

block_40101c:                                     ; preds = %block_400fc6
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 262), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 115), i64* %RCX, align 8, !tbaa !2428
  %381 = add i64 %308, -8
  %382 = add i64 %341, 24
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i64*
  %384 = load i64, i64* %383, align 8
  store i64 %384, i64* %RDI, align 8, !tbaa !2428
  %385 = add i64 %308, -36
  %386 = add i64 %341, 27
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %385 to i32*
  %388 = load i32, i32* %387, align 4
  %389 = add i32 %388, -12
  %390 = zext i32 %389 to i64
  store i64 %390, i64* %RAX, align 8, !tbaa !2428
  %391 = icmp ult i32 %388, 12
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %16, align 1, !tbaa !2432
  %393 = and i32 %389, 255
  %394 = tail call i32 @llvm.ctpop.i32(i32 %393) #8
  %395 = trunc i32 %394 to i8
  %396 = and i8 %395, 1
  %397 = xor i8 %396, 1
  store i8 %397, i8* %23, align 1, !tbaa !2446
  %398 = xor i32 %388, %389
  %399 = lshr i32 %398, 4
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  store i8 %401, i8* %28, align 1, !tbaa !2447
  %402 = icmp eq i32 %389, 0
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %31, align 1, !tbaa !2448
  %404 = lshr i32 %389, 31
  %405 = trunc i32 %404 to i8
  store i8 %405, i8* %34, align 1, !tbaa !2449
  %406 = lshr i32 %388, 31
  %407 = xor i32 %404, %406
  %408 = add nuw nsw i32 %407, %406
  %409 = icmp eq i32 %408, 2
  %410 = zext i1 %409 to i8
  store i8 %410, i8* %40, align 1, !tbaa !2450
  store i64 %390, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %411 = add i64 %341, -2364
  %412 = add i64 %341, 39
  %413 = load i64, i64* %RSP, align 8, !tbaa !2428
  %414 = add i64 %413, -8
  %415 = inttoptr i64 %414 to i64*
  store i64 %412, i64* %415, align 8
  store i64 %414, i64* %RSP, align 8, !tbaa !2428
  store i64 %411, i64* %PC, align 8, !tbaa !2428
  %416 = tail call fastcc %struct.Memory* @ext_4006e0_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %417 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 296), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 115), i64* %RCX, align 8, !tbaa !2428
  %418 = load i64, i64* %RBP, align 8
  %419 = add i64 %418, -8
  %420 = add i64 %417, 24
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i64*
  %422 = load i64, i64* %421, align 8
  store i64 %422, i64* %RDI, align 8, !tbaa !2428
  %423 = add i64 %418, -36
  %424 = add i64 %417, 27
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = zext i32 %426 to i64
  store i64 %427, i64* %RDX, align 8, !tbaa !2428
  %428 = add i64 %418, -44
  %429 = load i32, i32* %EAX, align 4
  %430 = add i64 %417, 30
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %428 to i32*
  store i32 %429, i32* %431, align 4
  %432 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %433 = add i64 %432, -2433
  %434 = add i64 %432, 7
  %435 = load i64, i64* %RSP, align 8, !tbaa !2428
  %436 = add i64 %435, -8
  %437 = inttoptr i64 %436 to i64*
  store i64 %434, i64* %437, align 8
  store i64 %436, i64* %RSP, align 8, !tbaa !2428
  store i64 %433, i64* %PC, align 8, !tbaa !2428
  %438 = tail call fastcc %struct.Memory* @ext_4006e0_fprintf(%struct.State* nonnull %0, %struct.Memory* %416)
  %439 = load i64, i64* %RBP, align 8
  %440 = add i64 %439, -20
  %441 = load i64, i64* %PC, align 8
  %442 = add i64 %441, 7
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %440 to i32*
  store i32 0, i32* %443, align 4
  %444 = load i64, i64* %RBP, align 8
  %445 = add i64 %444, -48
  %446 = load i32, i32* %EAX, align 4
  %447 = load i64, i64* %PC, align 8
  %448 = add i64 %447, 3
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %445 to i32*
  store i32 %446, i32* %449, align 4
  %450 = bitcast %union.VectorReg* %6 to double*
  %451 = bitcast i64* %42 to double*
  %452 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_401072

block_401082:                                     ; preds = %block_401072
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 314), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 159), i64* %R8, align 8, !tbaa !2428
  %453 = add i64 %343, -8
  %454 = add i64 %376, 24
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %453 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %RDI, align 8, !tbaa !2428
  %457 = add i64 %376, 27
  store i64 %457, i64* %PC, align 8
  %458 = load i32, i32* %346, align 4
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RDX, align 8, !tbaa !2428
  %460 = add i64 %343, -36
  %461 = add i64 %376, 31
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %460 to i32*
  %463 = load i32, i32* %462, align 4
  %464 = sext i32 %463 to i64
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = add i64 %376, 43
  store i64 %466, i64* %PC, align 8
  %467 = load i32, i32* %346, align 4
  %468 = sext i32 %467 to i64
  %469 = shl nsw i64 %468, 4
  store i64 %469, i64* %R9, align 8, !tbaa !2428
  %470 = lshr i64 %468, 59
  %471 = and i64 %470, 1
  %472 = add i64 %469, %465
  store i64 %472, i64* %RCX, align 8, !tbaa !2428
  %473 = icmp ult i64 %472, %465
  %474 = icmp ult i64 %472, %469
  %475 = or i1 %473, %474
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %16, align 1, !tbaa !2432
  %477 = trunc i64 %472 to i32
  %478 = and i32 %477, 255
  %479 = tail call i32 @llvm.ctpop.i32(i32 %478) #8
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = xor i8 %481, 1
  store i8 %482, i8* %23, align 1, !tbaa !2446
  %483 = xor i64 %469, %465
  %484 = xor i64 %483, %472
  %485 = lshr i64 %484, 4
  %486 = trunc i64 %485 to i8
  %487 = and i8 %486, 1
  store i8 %487, i8* %28, align 1, !tbaa !2447
  %488 = icmp eq i64 %472, 0
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %31, align 1, !tbaa !2448
  %490 = lshr i64 %472, 63
  %491 = trunc i64 %490 to i8
  store i8 %491, i8* %34, align 1, !tbaa !2449
  %492 = lshr i64 %465, 63
  %493 = xor i64 %490, %492
  %494 = xor i64 %490, %471
  %495 = add nuw nsw i64 %493, %494
  %496 = icmp eq i64 %495, 2
  %497 = zext i1 %496 to i8
  store i8 %497, i8* %40, align 1, !tbaa !2450
  %498 = add i64 %472, 8
  %499 = add i64 %376, 54
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %498 to i64*
  %501 = load i64, i64* %500, align 8
  store i64 %501, i64* %RCX, align 8, !tbaa !2428
  %502 = add i64 %343, -56
  %503 = add i64 %376, 58
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %502 to i64*
  store i64 %456, i64* %504, align 8
  %505 = load i64, i64* %RCX, align 8
  %506 = load i64, i64* %PC, align 8
  store i64 %505, i64* %RDI, align 8, !tbaa !2428
  %507 = load i64, i64* %RBP, align 8
  %508 = add i64 %507, -64
  %509 = load i64, i64* %RSI, align 8
  %510 = add i64 %506, 7
  store i64 %510, i64* %PC, align 8
  %511 = inttoptr i64 %508 to i64*
  store i64 %509, i64* %511, align 8
  %512 = load i64, i64* %RBP, align 8
  %513 = add i64 %512, -72
  %514 = load i64, i64* %R8, align 8
  %515 = load i64, i64* %PC, align 8
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %513 to i64*
  store i64 %514, i64* %517, align 8
  %518 = load i64, i64* %RBP, align 8
  %519 = add i64 %518, -80
  %520 = load i64, i64* %RAX, align 8
  %521 = load i64, i64* %PC, align 8
  %522 = add i64 %521, 4
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %519 to i64*
  store i64 %520, i64* %523, align 8
  %524 = load i64, i64* %RBP, align 8
  %525 = add i64 %524, -84
  %526 = load i32, i32* %EDX, align 4
  %527 = load i64, i64* %PC, align 8
  %528 = add i64 %527, 3
  store i64 %528, i64* %PC, align 8
  %529 = inttoptr i64 %525 to i32*
  store i32 %526, i32* %529, align 4
  %530 = load i64, i64* %PC, align 8
  %531 = add i64 %530, -2606
  %532 = add i64 %530, 5
  %533 = load i64, i64* %RSP, align 8, !tbaa !2428
  %534 = add i64 %533, -8
  %535 = inttoptr i64 %534 to i64*
  store i64 %532, i64* %535, align 8
  store i64 %534, i64* %RSP, align 8, !tbaa !2428
  store i64 %531, i64* %PC, align 8, !tbaa !2428
  %536 = tail call fastcc %struct.Memory* @ext_4006a0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %537 = load i64, i64* %RBP, align 8
  %538 = add i64 %537, -80
  %539 = load i64, i64* %PC, align 8
  %540 = add i64 %539, 4
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %538 to i64*
  %542 = load i64, i64* %541, align 8
  %543 = load i64, i64* %RAX, align 8
  %544 = sub i64 %542, %543
  store i64 %544, i64* %RCX, align 8, !tbaa !2428
  %545 = icmp ult i64 %542, %543
  %546 = zext i1 %545 to i8
  store i8 %546, i8* %16, align 1, !tbaa !2432
  %547 = trunc i64 %544 to i32
  %548 = and i32 %547, 255
  %549 = tail call i32 @llvm.ctpop.i32(i32 %548) #8
  %550 = trunc i32 %549 to i8
  %551 = and i8 %550, 1
  %552 = xor i8 %551, 1
  store i8 %552, i8* %23, align 1, !tbaa !2446
  %553 = xor i64 %543, %542
  %554 = xor i64 %553, %544
  %555 = lshr i64 %554, 4
  %556 = trunc i64 %555 to i8
  %557 = and i8 %556, 1
  store i8 %557, i8* %28, align 1, !tbaa !2447
  %558 = icmp eq i64 %544, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %31, align 1, !tbaa !2448
  %560 = lshr i64 %544, 63
  %561 = trunc i64 %560 to i8
  store i8 %561, i8* %34, align 1, !tbaa !2449
  %562 = lshr i64 %542, 63
  %563 = lshr i64 %543, 63
  %564 = xor i64 %563, %562
  %565 = xor i64 %560, %562
  %566 = add nuw nsw i64 %565, %564
  %567 = icmp eq i64 %566, 2
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %40, align 1, !tbaa !2450
  %569 = and i64 %544, 4294967295
  store i64 %569, i64* %RDX, align 8, !tbaa !2428
  %570 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %570, i64* %RAX, align 8, !tbaa !2428
  %571 = add i64 %537, -20
  %572 = add i64 %539, 21
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %571 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = sext i32 %574 to i64
  %576 = shl nsw i64 %575, 4
  store i64 %576, i64* %RCX, align 8, !tbaa !2428
  %577 = lshr i64 %575, 59
  %578 = and i64 %577, 1
  %579 = add i64 %576, %570
  store i64 %579, i64* %RAX, align 8, !tbaa !2428
  %580 = icmp ult i64 %579, %570
  %581 = icmp ult i64 %579, %576
  %582 = or i1 %580, %581
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %16, align 1, !tbaa !2432
  %584 = trunc i64 %579 to i32
  %585 = and i32 %584, 255
  %586 = tail call i32 @llvm.ctpop.i32(i32 %585) #8
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  %589 = xor i8 %588, 1
  store i8 %589, i8* %23, align 1, !tbaa !2446
  %590 = xor i64 %576, %570
  %591 = xor i64 %590, %579
  %592 = lshr i64 %591, 4
  %593 = trunc i64 %592 to i8
  %594 = and i8 %593, 1
  store i8 %594, i8* %28, align 1, !tbaa !2447
  %595 = icmp eq i64 %579, 0
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %31, align 1, !tbaa !2448
  %597 = lshr i64 %579, 63
  %598 = trunc i64 %597 to i8
  store i8 %598, i8* %34, align 1, !tbaa !2449
  %599 = lshr i64 %570, 63
  %600 = xor i64 %597, %599
  %601 = xor i64 %597, %578
  %602 = add nuw nsw i64 %600, %601
  %603 = icmp eq i64 %602, 2
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %40, align 1, !tbaa !2450
  %605 = add i64 %579, 8
  %606 = add i64 %539, 32
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i64*
  %608 = load i64, i64* %607, align 8
  store i64 %608, i64* %R9, align 8, !tbaa !2428
  store i64 %570, i64* %RAX, align 8, !tbaa !2428
  %609 = add i64 %539, 44
  store i64 %609, i64* %PC, align 8
  %610 = load i32, i32* %573, align 4
  %611 = sext i32 %610 to i64
  %612 = shl nsw i64 %611, 4
  store i64 %612, i64* %RCX, align 8, !tbaa !2428
  %613 = lshr i64 %611, 59
  %614 = and i64 %613, 1
  %615 = add i64 %612, %570
  store i64 %615, i64* %RAX, align 8, !tbaa !2428
  %616 = icmp ult i64 %615, %570
  %617 = icmp ult i64 %615, %612
  %618 = or i1 %616, %617
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %16, align 1, !tbaa !2432
  %620 = trunc i64 %615 to i32
  %621 = and i32 %620, 255
  %622 = tail call i32 @llvm.ctpop.i32(i32 %621) #8
  %623 = trunc i32 %622 to i8
  %624 = and i8 %623, 1
  %625 = xor i8 %624, 1
  store i8 %625, i8* %23, align 1, !tbaa !2446
  %626 = xor i64 %612, %570
  %627 = xor i64 %626, %615
  %628 = lshr i64 %627, 4
  %629 = trunc i64 %628 to i8
  %630 = and i8 %629, 1
  store i8 %630, i8* %28, align 1, !tbaa !2447
  %631 = icmp eq i64 %615, 0
  %632 = zext i1 %631 to i8
  store i8 %632, i8* %31, align 1, !tbaa !2448
  %633 = lshr i64 %615, 63
  %634 = trunc i64 %633 to i8
  store i8 %634, i8* %34, align 1, !tbaa !2449
  %635 = xor i64 %633, %599
  %636 = xor i64 %633, %614
  %637 = add nuw nsw i64 %635, %636
  %638 = icmp eq i64 %637, 2
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %40, align 1, !tbaa !2450
  %640 = add i64 %539, 55
  store i64 %640, i64* %PC, align 8
  %641 = inttoptr i64 %615 to i64*
  %642 = load i64, i64* %641, align 8
  store i64 %642, i64* %63, align 1, !tbaa !2451
  store double 0.000000e+00, double* %451, align 1, !tbaa !2451
  %643 = add i64 %537, -56
  %644 = add i64 %539, 59
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to i64*
  %646 = load i64, i64* %645, align 8
  store i64 %646, i64* %RDI, align 8, !tbaa !2428
  %647 = add i64 %537, -64
  %648 = add i64 %539, 63
  store i64 %648, i64* %PC, align 8
  %649 = inttoptr i64 %647 to i64*
  %650 = load i64, i64* %649, align 8
  store i64 %650, i64* %RSI, align 8, !tbaa !2428
  %651 = add i64 %537, -84
  %652 = add i64 %539, 67
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %651 to i32*
  %654 = load i32, i32* %653, align 4
  %655 = zext i32 %654 to i64
  store i64 %655, i64* %452, align 8, !tbaa !2428
  %656 = add i64 %537, -88
  %657 = load i32, i32* %EDX, align 4
  %658 = add i64 %539, 70
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %656 to i32*
  store i32 %657, i32* %659, align 4
  %660 = load i32, i32* %R10D, align 4
  %661 = zext i32 %660 to i64
  %662 = load i64, i64* %PC, align 8
  store i64 %661, i64* %RDX, align 8, !tbaa !2428
  %663 = load i64, i64* %RBP, align 8
  %664 = add i64 %663, -88
  %665 = add i64 %662, 6
  store i64 %665, i64* %PC, align 8
  %666 = inttoptr i64 %664 to i32*
  %667 = load i32, i32* %666, align 4
  %668 = zext i32 %667 to i64
  store i64 %668, i64* %RCX, align 8, !tbaa !2428
  %669 = add i64 %663, -72
  %670 = add i64 %662, 10
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %669 to i64*
  %672 = load i64, i64* %671, align 8
  store i64 %672, i64* %R8, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %673 = add i64 %662, -2617
  %674 = add i64 %662, 17
  %675 = load i64, i64* %RSP, align 8, !tbaa !2428
  %676 = add i64 %675, -8
  %677 = inttoptr i64 %676 to i64*
  store i64 %674, i64* %677, align 8
  store i64 %676, i64* %RSP, align 8, !tbaa !2428
  store i64 %673, i64* %PC, align 8, !tbaa !2428
  %678 = tail call fastcc %struct.Memory* @ext_4006e0_fprintf(%struct.State* nonnull %0, %struct.Memory* %536)
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -92
  %681 = load i32, i32* %EAX, align 4
  %682 = load i64, i64* %PC, align 8
  %683 = add i64 %682, 3
  store i64 %683, i64* %PC, align 8
  %684 = inttoptr i64 %680 to i32*
  store i32 %681, i32* %684, align 4
  %685 = load i64, i64* %RBP, align 8
  %686 = add i64 %685, -20
  %687 = load i64, i64* %PC, align 8
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC, align 8
  %689 = inttoptr i64 %686 to i32*
  %690 = load i32, i32* %689, align 4
  %691 = add i32 %690, 1
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RAX, align 8, !tbaa !2428
  %693 = icmp eq i32 %690, -1
  %694 = icmp eq i32 %691, 0
  %695 = or i1 %693, %694
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %16, align 1, !tbaa !2432
  %697 = and i32 %691, 255
  %698 = tail call i32 @llvm.ctpop.i32(i32 %697) #8
  %699 = trunc i32 %698 to i8
  %700 = and i8 %699, 1
  %701 = xor i8 %700, 1
  store i8 %701, i8* %23, align 1, !tbaa !2446
  %702 = xor i32 %690, %691
  %703 = lshr i32 %702, 4
  %704 = trunc i32 %703 to i8
  %705 = and i8 %704, 1
  store i8 %705, i8* %28, align 1, !tbaa !2447
  %706 = zext i1 %694 to i8
  store i8 %706, i8* %31, align 1, !tbaa !2448
  %707 = lshr i32 %691, 31
  %708 = trunc i32 %707 to i8
  store i8 %708, i8* %34, align 1, !tbaa !2449
  %709 = lshr i32 %690, 31
  %710 = xor i32 %707, %709
  %711 = add nuw nsw i32 %710, %707
  %712 = icmp eq i32 %711, 2
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %40, align 1, !tbaa !2450
  %714 = add i64 %687, 9
  store i64 %714, i64* %PC, align 8
  store i32 %691, i32* %689, align 4
  %715 = load i64, i64* %PC, align 8
  %716 = add i64 %715, -196
  store i64 %716, i64* %PC, align 8, !tbaa !2428
  br label %block_401072

block_401181:                                     ; preds = %block_401142
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 203), i64* %RSI, align 8, !tbaa !2428
  %717 = add i64 %151, -8
  %718 = add i64 %184, 14
  store i64 %718, i64* %PC, align 8
  %719 = inttoptr i64 %717 to i64*
  %720 = load i64, i64* %719, align 8
  store i64 %720, i64* %RDI, align 8, !tbaa !2428
  %721 = add i64 %151, -16
  %722 = add i64 %184, 18
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %721 to i64*
  %724 = load i64, i64* %723, align 8
  store i64 %724, i64* %RDX, align 8, !tbaa !2428
  %725 = add i64 %151, -32
  %726 = add i64 %184, 23
  store i64 %726, i64* %PC, align 8
  %727 = inttoptr i64 %725 to i64*
  %728 = load i64, i64* %727, align 8
  store i64 %728, i64* %63, align 1, !tbaa !2451
  store double 0.000000e+00, double* %451, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %729 = add i64 %184, -2721
  %730 = add i64 %184, 30
  %731 = load i64, i64* %RSP, align 8, !tbaa !2428
  %732 = add i64 %731, -8
  %733 = inttoptr i64 %732 to i64*
  store i64 %730, i64* %733, align 8
  store i64 %732, i64* %RSP, align 8, !tbaa !2428
  store i64 %729, i64* %PC, align 8, !tbaa !2428
  %734 = tail call fastcc %struct.Memory* @ext_4006e0_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %735 = load i64, i64* %PC, align 8
  store i32 0, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %736 = load i64, i64* %RBP, align 8
  %737 = add i64 %736, -96
  %738 = load i32, i32* %EAX, align 4
  %739 = add i64 %735, 14
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %737 to i32*
  store i32 %738, i32* %740, align 4
  %741 = load i64, i64* %RSP, align 8
  %742 = load i64, i64* %PC, align 8
  %743 = add i64 %741, 96
  store i64 %743, i64* %RSP, align 8, !tbaa !2428
  %744 = icmp ugt i64 %741, -97
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %16, align 1, !tbaa !2432
  %746 = trunc i64 %743 to i32
  %747 = and i32 %746, 255
  %748 = tail call i32 @llvm.ctpop.i32(i32 %747) #8
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  store i8 %751, i8* %23, align 1, !tbaa !2446
  %752 = xor i64 %741, %743
  %753 = lshr i64 %752, 4
  %754 = trunc i64 %753 to i8
  %755 = and i8 %754, 1
  store i8 %755, i8* %28, align 1, !tbaa !2447
  %756 = icmp eq i64 %743, 0
  %757 = zext i1 %756 to i8
  store i8 %757, i8* %31, align 1, !tbaa !2448
  %758 = lshr i64 %743, 63
  %759 = trunc i64 %758 to i8
  store i8 %759, i8* %34, align 1, !tbaa !2449
  %760 = lshr i64 %741, 63
  %761 = xor i64 %758, %760
  %762 = add nuw nsw i64 %761, %758
  %763 = icmp eq i64 %762, 2
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %40, align 1, !tbaa !2450
  %765 = add i64 %742, 5
  store i64 %765, i64* %PC, align 8
  %766 = add i64 %741, 104
  %767 = inttoptr i64 %743 to i64*
  %768 = load i64, i64* %767, align 8
  store i64 %768, i64* %RBP, align 8, !tbaa !2428
  store i64 %766, i64* %RSP, align 8, !tbaa !2428
  %769 = add i64 %742, 6
  store i64 %769, i64* %PC, align 8
  %770 = inttoptr i64 %766 to i64*
  %771 = load i64, i64* %770, align 8
  store i64 %771, i64* %PC, align 8, !tbaa !2428
  %772 = add i64 %741, 112
  store i64 %772, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %734
}

; Function Attrs: noinline
define %struct.Memory* @sub_405af0__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405af0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = load i64, i64* %RSP, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -120
  store i64 %14, i64* %RSP, align 8, !tbaa !2428
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %10, -32
  store i64 %21, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %15, align 1, !tbaa !2432
  store i8 1, i8* %16, align 1, !tbaa !2446
  store i8 1, i8* %18, align 1, !tbaa !2448
  store i8 0, i8* %19, align 1, !tbaa !2449
  store i8 0, i8* %20, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2447
  %22 = add i64 %10, -16
  %23 = load i64, i64* %RDI, align 8
  %24 = add i64 %13, 17
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %25, align 8
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -16
  %28 = load i64, i64* %RSI, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %32, -24
  %39 = add i64 %34, 8
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %40, align 8
  %41 = load i64, i64* %RAX, align 8
  %42 = load i64, i64* %PC, align 8
  store i64 %41, i64* %RDI, align 8, !tbaa !2428
  %43 = load i32, i32* %ECX, align 4
  %44 = zext i32 %43 to i64
  store i64 %44, i64* %RSI, align 8, !tbaa !2428
  %45 = add i64 %42, -5262
  %46 = add i64 %42, 10
  %47 = load i64, i64* %RSP, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %46, i64* %49, align 8
  store i64 %48, i64* %RSP, align 8, !tbaa !2428
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %50 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %45, %struct.Memory* %2)
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -32
  %53 = load i64, i64* %RAX, align 8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56, align 8
  %57 = bitcast [32 x %union.VectorReg]* %6 to double*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast i64* %58 to double*
  %60 = bitcast %union.VectorReg* %7 to double*
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %62 = bitcast i64* %61 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_405b1c

block_405b79:                                     ; preds = %block_405b58
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -56
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = add i64 %63, -40
  %66 = add i64 %300, 9
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %212, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %69 = add i64 %63, -80
  %70 = add i64 %300, 14
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, -1527
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_405590__ZmmIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %284)
  %79 = load i64, i64* %RAX, align 8
  %80 = load i64, i64* %PC, align 8
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %81 = add i64 %80, -5276
  %82 = add i64 %80, 8
  %83 = load i64, i64* %RSP, align 8, !tbaa !2428
  %84 = add i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85, align 8
  store i64 %84, i64* %RSP, align 8, !tbaa !2428
  store i64 %81, i64* %PC, align 8, !tbaa !2428
  %86 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %81, %struct.Memory* %78)
  %87 = bitcast %union.anon* %3 to double**
  %88 = load double*, double** %87, align 8
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC, align 8
  %91 = load double, double* %88, align 8
  store double %91, double* %57, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -80
  %94 = add i64 %89, 9
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to double*
  %96 = load double, double* %95, align 8
  store double %96, double* %60, align 1, !tbaa !2451
  store double 0.000000e+00, double* %62, align 1, !tbaa !2451
  %97 = add i64 %89, 13
  store i64 %97, i64* %PC, align 8
  %98 = fcmp uno double %91, %96
  br i1 %98, label %99, label %109

; <label>:99:                                     ; preds = %block_405b79
  %100 = fadd double %91, %96
  %101 = bitcast double %100 to i64
  %102 = and i64 %101, 9221120237041090560
  %103 = icmp eq i64 %102, 9218868437227405312
  %104 = and i64 %101, 2251799813685247
  %105 = icmp ne i64 %104, 0
  %106 = and i1 %103, %105
  br i1 %106, label %107, label %115

; <label>:107:                                    ; preds = %99
  %108 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %97, %struct.Memory* %86) #9
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:109:                                    ; preds = %block_405b79
  %110 = fcmp ogt double %91, %96
  br i1 %110, label %115, label %111

; <label>:111:                                    ; preds = %109
  %112 = fcmp olt double %91, %96
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %111
  %114 = fcmp oeq double %91, %96
  br i1 %114, label %115, label %119

; <label>:115:                                    ; preds = %113, %111, %109, %99
  %116 = phi i8 [ 0, %109 ], [ 0, %111 ], [ 1, %113 ], [ 1, %99 ]
  %117 = phi i8 [ 0, %109 ], [ 0, %111 ], [ 0, %113 ], [ 1, %99 ]
  %118 = phi i8 [ 0, %109 ], [ 1, %111 ], [ 0, %113 ], [ 1, %99 ]
  store i8 %116, i8* %18, align 1, !tbaa !2453
  store i8 %117, i8* %16, align 1, !tbaa !2453
  store i8 %118, i8* %15, align 1, !tbaa !2453
  br label %119

; <label>:119:                                    ; preds = %115, %113
  store i8 0, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %19, align 1, !tbaa !2453
  store i8 0, i8* %17, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %119, %107
  %120 = phi i64 [ %.pre3, %107 ], [ %92, %119 ]
  %121 = phi i64 [ %.pre2, %107 ], [ %97, %119 ]
  %122 = phi %struct.Memory* [ %108, %107 ], [ %86, %119 ]
  %123 = load i8, i8* %15, align 1, !tbaa !2432
  %124 = load i8, i8* %18, align 1, !tbaa !2448
  %125 = or i8 %124, %123
  %126 = icmp eq i8 %125, 0
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %CL, align 1, !tbaa !2453
  %128 = add i64 %120, -65
  %129 = add i64 %121, 6
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i8*
  store i8 %127, i8* %130, align 1
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_405ba7

block_405bb7:                                     ; preds = %block_405ba7
  %131 = add i64 %334, -56
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %346, -5319
  %133 = add i64 %346, 9
  %134 = load i64, i64* %RSP, align 8, !tbaa !2428
  %135 = add i64 %134, -8
  %136 = inttoptr i64 %135 to i64*
  store i64 %133, i64* %136, align 8
  store i64 %135, i64* %RSP, align 8, !tbaa !2428
  store i64 %132, i64* %PC, align 8, !tbaa !2428
  %137 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %132, %struct.Memory* %MEMORY.2)
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -48
  %140 = load i64, i64* %PC, align 8
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %141 = load i64*, i64** %207, align 8
  %142 = add i64 %140, 8
  store i64 %142, i64* %PC, align 8
  %143 = load i64, i64* %141, align 8
  store i64 %143, i64* %212, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %144 = add i64 %138, -88
  %145 = add i64 %140, 13
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i64*
  store i64 %143, i64* %146, align 8
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, -5341
  %149 = add i64 %147, 5
  %150 = load i64, i64* %RSP, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %149, i64* %152, align 8
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %153 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %148, %struct.Memory* %137)
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -88
  %156 = load i64, i64* %PC, align 8
  %157 = add i64 %156, 5
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %155 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %212, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %160 = load i64*, i64** %207, align 8
  %161 = add i64 %156, 9
  store i64 %161, i64* %PC, align 8
  store i64 %159, i64* %160, align 8
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -48
  %164 = load i64, i64* %PC, align 8
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  %165 = add i64 %164, -1611
  %166 = add i64 %164, 9
  %167 = load i64, i64* %RSP, align 8, !tbaa !2428
  %168 = add i64 %167, -8
  %169 = inttoptr i64 %168 to i64*
  store i64 %166, i64* %169, align 8
  store i64 %168, i64* %RSP, align 8, !tbaa !2428
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  %170 = tail call %struct.Memory* @sub_405590__ZmmIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %165, %struct.Memory* %153)
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -96
  %173 = load i64, i64* %RAX, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %172 to i64*
  store i64 %173, i64* %176, align 8
  %177 = load i64, i64* %PC, align 8
  %178 = add i64 %177, -144
  store i64 %178, i64* %PC, align 8, !tbaa !2428
  br label %block_405b58

block_405b1c:                                     ; preds = %block_405bb2, %block_405af0
  %179 = phi i64 [ %.pre, %block_405af0 ], [ %274, %block_405bb2 ]
  %MEMORY.0 = phi %struct.Memory* [ %50, %block_405af0 ], [ %266, %block_405bb2 ]
  %180 = load i64, i64* %RBP, align 8
  %181 = add i64 %180, -24
  store i64 %181, i64* %RDI, align 8, !tbaa !2428
  %182 = add i64 %180, -16
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %179, -5212
  %184 = add i64 %179, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_4046c0__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %MEMORY.0)
  %189 = load i8, i8* %AL, align 1
  %190 = load i64, i64* %PC, align 8
  %191 = and i8 %189, 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %192 = zext i8 %191 to i32
  %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #8
  %194 = trunc i32 %193 to i8
  %195 = xor i8 %194, 1
  store i8 %195, i8* %16, align 1, !tbaa !2446
  %196 = xor i8 %191, 1
  store i8 %196, i8* %18, align 1, !tbaa !2448
  store i8 0, i8* %19, align 1, !tbaa !2449
  store i8 0, i8* %20, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2447
  %197 = icmp eq i8 %196, 0
  %.v = select i1 %197, i64 13, i64 8
  %198 = add i64 %190, %.v
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  br i1 %197, label %block_405b36, label %block_405b31

block_405b36:                                     ; preds = %block_405b1c
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -24
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = add i64 %198, -5190
  %202 = add i64 %198, 9
  %203 = load i64, i64* %RSP, align 8, !tbaa !2428
  %204 = add i64 %203, -8
  %205 = inttoptr i64 %204 to i64*
  store i64 %202, i64* %205, align 8
  store i64 %204, i64* %RSP, align 8, !tbaa !2428
  store i64 %201, i64* %PC, align 8, !tbaa !2428
  %206 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %201, %struct.Memory* %188)
  %207 = bitcast %union.anon* %3 to i64**
  %208 = load i64*, i64** %207, align 8
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = load i64, i64* %208, align 8
  %212 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %211, i64* %212, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -40
  %215 = add i64 %209, 9
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  store i64 %211, i64* %216, align 8
  %217 = load i64, i64* %RBP, align 8
  %218 = add i64 %217, -24
  %219 = load i64, i64* %PC, align 8
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %RAX, align 8, !tbaa !2428
  %223 = add i64 %217, -48
  %224 = add i64 %219, 8
  store i64 %224, i64* %PC, align 8
  %225 = inttoptr i64 %223 to i64*
  store i64 %222, i64* %225, align 8
  %226 = load i64, i64* %RBP, align 8
  %227 = add i64 %226, -48
  %228 = load i64, i64* %PC, align 8
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %227 to i64*
  %231 = load i64, i64* %230, align 8
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = add i64 %226, -56
  %233 = add i64 %228, 8
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %232 to i64*
  store i64 %231, i64* %234, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_405b58

block_405b74:                                     ; preds = %block_405b58
  %235 = add i64 %300, 51
  store i64 %235, i64* %PC, align 8, !tbaa !2428
  br label %block_405ba7

block_405bb2:                                     ; preds = %block_405ba7
  %236 = add i64 %334, -48
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = add i64 %334, -40
  %238 = add i64 %346, 68
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %237 to i64*
  %240 = load i64, i64* %239, align 8
  store i64 %240, i64* %212, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %241 = add i64 %334, -104
  %242 = add i64 %346, 73
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to i64*
  store i64 %240, i64* %243, align 8
  %244 = load i64, i64* %PC, align 8
  %245 = add i64 %244, -5387
  %246 = add i64 %244, 5
  %247 = load i64, i64* %RSP, align 8, !tbaa !2428
  %248 = add i64 %247, -8
  %249 = inttoptr i64 %248 to i64*
  store i64 %246, i64* %249, align 8
  store i64 %248, i64* %RSP, align 8, !tbaa !2428
  store i64 %245, i64* %PC, align 8, !tbaa !2428
  %250 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %245, %struct.Memory* %MEMORY.2)
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -24
  %253 = load i64, i64* %PC, align 8
  store i64 %252, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %15, align 1, !tbaa !2432
  store i8 1, i8* %16, align 1, !tbaa !2446
  store i8 1, i8* %18, align 1, !tbaa !2448
  store i8 0, i8* %19, align 1, !tbaa !2449
  store i8 0, i8* %20, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2447
  %254 = add i64 %251, -104
  %255 = add i64 %253, 11
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i64*
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %212, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %258 = load i64*, i64** %207, align 8
  %259 = add i64 %253, 15
  store i64 %259, i64* %PC, align 8
  store i64 %257, i64* %258, align 8
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, -5519
  %262 = add i64 %260, 5
  %263 = load i64, i64* %RSP, align 8, !tbaa !2428
  %264 = add i64 %263, -8
  %265 = inttoptr i64 %264 to i64*
  store i64 %262, i64* %265, align 8
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  store i64 %261, i64* %PC, align 8, !tbaa !2428
  %266 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i_renamed_(%struct.State* nonnull %0, i64 %261, %struct.Memory* %250)
  %267 = load i64, i64* %RBP, align 8
  %268 = add i64 %267, -64
  %269 = load i64, i64* %RAX, align 8
  %270 = load i64, i64* %PC, align 8
  %271 = add i64 %270, 4
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %268 to i64*
  store i64 %269, i64* %272, align 8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, -252
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  br label %block_405b1c

block_405b58:                                     ; preds = %block_405b36, %block_405bb7
  %275 = phi i64 [ %.pre1, %block_405b36 ], [ %178, %block_405bb7 ]
  %MEMORY.1 = phi %struct.Memory* [ %206, %block_405b36 ], [ %170, %block_405bb7 ]
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -48
  store i64 %277, i64* %RDI, align 8, !tbaa !2428
  %278 = add i64 %276, -8
  store i64 %278, i64* %RSI, align 8, !tbaa !2428
  %279 = add i64 %275, -5272
  %280 = add i64 %275, 13
  %281 = load i64, i64* %RSP, align 8, !tbaa !2428
  %282 = add i64 %281, -8
  %283 = inttoptr i64 %282 to i64*
  store i64 %280, i64* %283, align 8
  store i64 %282, i64* %RSP, align 8, !tbaa !2428
  store i64 %279, i64* %PC, align 8, !tbaa !2428
  %284 = tail call %struct.Memory* @sub_4046c0__ZneIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %279, %struct.Memory* %MEMORY.1)
  %285 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2453
  %286 = load i8, i8* %AL, align 1
  %287 = and i8 %286, 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %288 = zext i8 %287 to i32
  %289 = tail call i32 @llvm.ctpop.i32(i32 %288) #8
  %290 = trunc i32 %289 to i8
  %291 = xor i8 %290, 1
  store i8 %291, i8* %16, align 1, !tbaa !2446
  %292 = xor i8 %287, 1
  store i8 %292, i8* %18, align 1, !tbaa !2448
  store i8 0, i8* %19, align 1, !tbaa !2449
  store i8 0, i8* %20, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2447
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -65
  %295 = add i64 %285, 9
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %294 to i8*
  store i8 0, i8* %296, align 1
  %297 = load i64, i64* %PC, align 8
  %298 = load i8, i8* %18, align 1, !tbaa !2448
  %299 = icmp eq i8 %298, 0
  %.v5 = select i1 %299, i64 11, i64 6
  %300 = add i64 %297, %.v5
  store i64 %300, i64* %PC, align 8, !tbaa !2428
  br i1 %299, label %block_405b79, label %block_405b74

block_405b31:                                     ; preds = %block_405b1c
  %301 = load i64, i64* %RSP, align 8
  %302 = add i64 %301, 112
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  %303 = icmp ugt i64 %301, -113
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %15, align 1, !tbaa !2432
  %305 = trunc i64 %302 to i32
  %306 = and i32 %305, 255
  %307 = tail call i32 @llvm.ctpop.i32(i32 %306) #8
  %308 = trunc i32 %307 to i8
  %309 = and i8 %308, 1
  %310 = xor i8 %309, 1
  store i8 %310, i8* %16, align 1, !tbaa !2446
  %311 = xor i64 %301, 16
  %312 = xor i64 %311, %302
  %313 = lshr i64 %312, 4
  %314 = trunc i64 %313 to i8
  %315 = and i8 %314, 1
  store i8 %315, i8* %17, align 1, !tbaa !2447
  %316 = icmp eq i64 %302, 0
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %18, align 1, !tbaa !2448
  %318 = lshr i64 %302, 63
  %319 = trunc i64 %318 to i8
  store i8 %319, i8* %19, align 1, !tbaa !2449
  %320 = lshr i64 %301, 63
  %321 = xor i64 %318, %320
  %322 = add nuw nsw i64 %321, %318
  %323 = icmp eq i64 %322, 2
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %20, align 1, !tbaa !2450
  %325 = add i64 %198, 241
  store i64 %325, i64* %PC, align 8
  %326 = add i64 %301, 120
  %327 = inttoptr i64 %302 to i64*
  %328 = load i64, i64* %327, align 8
  store i64 %328, i64* %RBP, align 8, !tbaa !2428
  store i64 %326, i64* %RSP, align 8, !tbaa !2428
  %329 = add i64 %198, 242
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %326 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %332 = add i64 %301, 128
  store i64 %332, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %188

block_405ba7:                                     ; preds = %block_405b74, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %333 = phi i64 [ %.pre4, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %235, %block_405b74 ]
  %MEMORY.2 = phi %struct.Memory* [ %122, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %284, %block_405b74 ]
  %334 = load i64, i64* %RBP, align 8
  %335 = add i64 %334, -65
  %336 = add i64 %333, 3
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i8*
  %338 = load i8, i8* %337, align 1
  store i8 %338, i8* %AL, align 1, !tbaa !2453
  %339 = and i8 %338, 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %340 = zext i8 %339 to i32
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340) #8
  %342 = trunc i32 %341 to i8
  %343 = xor i8 %342, 1
  store i8 %343, i8* %16, align 1, !tbaa !2446
  %344 = xor i8 %339, 1
  store i8 %344, i8* %18, align 1, !tbaa !2448
  store i8 0, i8* %19, align 1, !tbaa !2449
  store i8 0, i8* %20, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2447
  %345 = icmp eq i8 %344, 0
  %.v6 = select i1 %345, i64 16, i64 11
  %346 = add i64 %333, %.v6
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  br i1 %345, label %block_405bb7, label %block_405bb2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c10__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401c10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4035a0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4035a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -72
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 64
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 18
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -8
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  %58 = sub i64 %53, %57
  %59 = lshr i64 %58, 2
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = ashr i64 %58, 3
  store i64 %62, i64* %RSI, align 8, !tbaa !2428
  store i8 %61, i8* %13, align 1, !tbaa !2453
  %63 = trunc i64 %62 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #8
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %25, align 1, !tbaa !2453
  %69 = icmp eq i64 %62, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %28, align 1, !tbaa !2453
  %71 = lshr i64 %62, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %31, align 1, !tbaa !2453
  store i8 0, i8* %37, align 1, !tbaa !2453
  %73 = add i64 %48, -32
  %74 = add i64 %50, 19
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  store i64 %62, i64* %75, align 8
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = ashr i64 %81, 63
  store i64 %82, i64* %RDX, align 8, !tbaa !2428
  %83 = load i64, i64* %RCX, align 8
  %84 = add i64 %78, 9
  store i64 %84, i64* %PC, align 8
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = zext i64 %82 to i128
  %88 = shl nuw i128 %87, 64
  %89 = zext i64 %81 to i128
  %90 = or i128 %88, %89
  %91 = zext i64 %83 to i128
  %92 = or i128 %86, %91
  %93 = sdiv i128 %90, %92
  %94 = trunc i128 %93 to i64
  %95 = and i128 %93, 18446744073709551615
  %96 = sext i64 %94 to i128
  %97 = and i128 %96, -18446744073709551616
  %98 = or i128 %97, %95
  %99 = icmp eq i128 %93, %98
  br i1 %99, label %102, label %100

; <label>:100:                                    ; preds = %block_4035a0
  %101 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %84, %struct.Memory* %2) #9
  %.pre = load i64, i64* %RAX, align 8
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:102:                                    ; preds = %block_4035a0
  %103 = srem i128 %90, %92
  %104 = trunc i128 %103 to i64
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  store i64 %104, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %102, %100
  %105 = phi i64 [ %.pre2, %100 ], [ %76, %102 ]
  %106 = phi i64 [ %.pre1, %100 ], [ %84, %102 ]
  %107 = phi i64 [ %.pre, %100 ], [ %94, %102 ]
  %108 = phi %struct.Memory* [ %101, %100 ], [ %2, %102 ]
  %109 = add i64 %107, -1
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = icmp eq i64 %107, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2446
  %118 = xor i64 %107, %109
  %119 = lshr i64 %118, 4
  %120 = trunc i64 %119 to i8
  %121 = and i8 %120, 1
  store i8 %121, i8* %25, align 1, !tbaa !2447
  %122 = icmp eq i64 %109, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %28, align 1, !tbaa !2448
  %124 = lshr i64 %109, 63
  %125 = trunc i64 %124 to i8
  store i8 %125, i8* %31, align 1, !tbaa !2449
  %126 = lshr i64 %107, 63
  %127 = xor i64 %124, %126
  %128 = add nuw nsw i64 %127, %126
  %129 = icmp eq i64 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %37, align 1, !tbaa !2450
  %131 = add i64 %105, -24
  %132 = add i64 %106, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  store i64 %109, i64* %133, align 8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %135 = bitcast i64* %134 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_4035db

block_40363c:                                     ; preds = %block_403631
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %136 = add i64 %233, -8
  %137 = add i64 %262, 8
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RCX, align 8, !tbaa !2428
  %140 = add i64 %262, 12
  store i64 %140, i64* %PC, align 8
  %141 = load i64, i64* %236, align 8
  store i64 %141, i64* %RSI, align 8, !tbaa !2428
  %142 = shl i64 %141, 3
  %143 = add i64 %142, %139
  %144 = add i64 %262, 16
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i64*
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %RCX, align 8, !tbaa !2428
  %147 = add i64 %233, -56
  %148 = add i64 %262, 20
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %147 to i64*
  store i64 %146, i64* %149, align 8
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -8
  %152 = load i64, i64* %PC, align 8
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RCX, align 8, !tbaa !2428
  %156 = add i64 %152, 8
  store i64 %156, i64* %PC, align 8
  %157 = load i64, i64* %154, align 8
  store i64 %157, i64* %RSI, align 8, !tbaa !2428
  %158 = add i64 %150, -24
  %159 = add i64 %152, 12
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %RDI, align 8, !tbaa !2428
  %162 = add i64 %152, 15
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %155 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = shl i64 %161, 3
  %166 = add i64 %165, %157
  %167 = add i64 %152, 19
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  store i64 %164, i64* %168, align 8
  %169 = load i64, i64* %RBP, align 8
  %170 = add i64 %169, -24
  %171 = load i64, i64* %PC, align 8
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173, align 8
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = add i64 %169, -8
  %176 = add i64 %171, 8
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RSI, align 8, !tbaa !2428
  %179 = add i64 %169, -56
  %180 = add i64 %171, 12
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RCX, align 8, !tbaa !2428
  %183 = add i64 %169, -64
  %184 = add i64 %171, 16
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i64*
  store i64 %182, i64* %185, align 8
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -64
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, 5
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %187 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %191, i64* %192, align 1, !tbaa !2451
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %193 = add i64 %188, 269
  %194 = add i64 %188, 10
  %195 = load i64, i64* %RSP, align 8, !tbaa !2428
  %196 = add i64 %195, -8
  %197 = inttoptr i64 %196 to i64*
  store i64 %194, i64* %197, align 8
  store i64 %196, i64* %RSP, align 8, !tbaa !2428
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  %198 = tail call %struct.Memory* @sub_403780__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %193, %struct.Memory* %MEMORY.0)
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -24
  %201 = load i64, i64* %PC, align 8
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = add i64 %204, -1
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = icmp ne i64 %204, 0
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %13, align 1, !tbaa !2432
  %208 = trunc i64 %205 to i32
  %209 = and i32 %208, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #8
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %20, align 1, !tbaa !2446
  %214 = xor i64 %204, 16
  %215 = xor i64 %205, %214
  %216 = lshr i64 %215, 4
  %217 = trunc i64 %216 to i8
  %218 = and i8 %217, 1
  store i8 %218, i8* %25, align 1, !tbaa !2447
  %219 = icmp eq i64 %205, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %28, align 1, !tbaa !2448
  %221 = lshr i64 %205, 63
  %222 = trunc i64 %221 to i8
  store i8 %222, i8* %31, align 1, !tbaa !2449
  %223 = lshr i64 %204, 63
  %224 = xor i64 %221, %223
  %225 = xor i64 %221, 1
  %226 = add nuw nsw i64 %224, %225
  %227 = icmp eq i64 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %37, align 1, !tbaa !2450
  %229 = add i64 %201, 12
  store i64 %229, i64* %PC, align 8
  store i64 %205, i64* %203, align 8
  %230 = load i64, i64* %PC, align 8
  %231 = add i64 %230, -88
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  br label %block_403631

block_403631:                                     ; preds = %block_403625, %block_40363c
  %232 = phi i64 [ %.pre4, %block_403625 ], [ %231, %block_40363c ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_403625 ], [ %198, %block_40363c ]
  %233 = load i64, i64* %RBP, align 8
  %234 = add i64 %233, -24
  %235 = add i64 %232, 5
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = add i64 %237, -1
  %239 = icmp eq i64 %237, 0
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %13, align 1, !tbaa !2432
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 255
  %243 = tail call i32 @llvm.ctpop.i32(i32 %242) #8
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  store i8 %246, i8* %20, align 1, !tbaa !2446
  %247 = xor i64 %237, %238
  %248 = lshr i64 %247, 4
  %249 = trunc i64 %248 to i8
  %250 = and i8 %249, 1
  store i8 %250, i8* %25, align 1, !tbaa !2447
  %251 = icmp eq i64 %238, 0
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %28, align 1, !tbaa !2448
  %253 = lshr i64 %238, 63
  %254 = trunc i64 %253 to i8
  store i8 %254, i8* %31, align 1, !tbaa !2449
  %255 = lshr i64 %237, 63
  %256 = xor i64 %253, %255
  %257 = add nuw nsw i64 %256, %255
  %258 = icmp eq i64 %257, 2
  %259 = zext i1 %258 to i8
  store i8 %259, i8* %37, align 1, !tbaa !2450
  %260 = icmp ne i8 %254, 0
  %261 = xor i1 %260, %258
  %.v6 = select i1 %261, i64 93, i64 11
  %262 = add i64 %232, %.v6
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br i1 %261, label %block_40368e, label %block_40363c

block_40368e:                                     ; preds = %block_403631
  %263 = load i64, i64* %RSP, align 8
  %264 = add i64 %263, 64
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  %265 = icmp ugt i64 %263, -65
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %13, align 1, !tbaa !2432
  %267 = trunc i64 %264 to i32
  %268 = and i32 %267, 255
  %269 = tail call i32 @llvm.ctpop.i32(i32 %268) #8
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  store i8 %272, i8* %20, align 1, !tbaa !2446
  %273 = xor i64 %263, %264
  %274 = lshr i64 %273, 4
  %275 = trunc i64 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %25, align 1, !tbaa !2447
  %277 = icmp eq i64 %264, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %28, align 1, !tbaa !2448
  %279 = lshr i64 %264, 63
  %280 = trunc i64 %279 to i8
  store i8 %280, i8* %31, align 1, !tbaa !2449
  %281 = lshr i64 %263, 63
  %282 = xor i64 %279, %281
  %283 = add nuw nsw i64 %282, %279
  %284 = icmp eq i64 %283, 2
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %37, align 1, !tbaa !2450
  %286 = add i64 %262, 5
  store i64 %286, i64* %PC, align 8
  %287 = add i64 %263, 72
  %288 = inttoptr i64 %264 to i64*
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %RBP, align 8, !tbaa !2428
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %262, 6
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  %293 = add i64 %263, 80
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4035db:                                     ; preds = %block_4035e6, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %294 = phi i64 [ %.pre3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %392, %block_4035e6 ]
  %MEMORY.1 = phi %struct.Memory* [ %108, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %359, %block_4035e6 ]
  %295 = load i64, i64* %RBP, align 8
  %296 = add i64 %295, -24
  %297 = add i64 %294, 5
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %300 = trunc i64 %299 to i32
  %301 = and i32 %300, 255
  %302 = tail call i32 @llvm.ctpop.i32(i32 %301) #8
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  store i8 %305, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %306 = icmp eq i64 %299, 0
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %28, align 1, !tbaa !2448
  %308 = lshr i64 %299, 63
  %309 = trunc i64 %308 to i8
  store i8 %309, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %310 = icmp ne i8 %309, 0
  %.v = select i1 %310, i64 74, i64 11
  %311 = add i64 %294, %.v
  store i64 %311, i64* %PC, align 8, !tbaa !2428
  br i1 %310, label %block_403625, label %block_4035e6

block_4035e6:                                     ; preds = %block_4035db
  %312 = add i64 %295, -8
  %313 = add i64 %311, 4
  store i64 %313, i64* %PC, align 8
  %314 = inttoptr i64 %312 to i64*
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = add i64 %311, 8
  store i64 %316, i64* %PC, align 8
  %317 = load i64, i64* %298, align 8
  store i64 %317, i64* %RCX, align 8, !tbaa !2428
  %318 = shl i64 %317, 3
  %319 = add i64 %318, %315
  %320 = add i64 %311, 12
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = add i64 %295, -40
  %324 = add i64 %311, 16
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  store i64 %322, i64* %325, align 8
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -32
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = add i64 %326, -8
  %333 = add i64 %328, 8
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334, align 8
  store i64 %335, i64* %RSI, align 8, !tbaa !2428
  %336 = add i64 %326, -24
  %337 = add i64 %328, 12
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RDX, align 8, !tbaa !2428
  %340 = add i64 %326, -40
  %341 = add i64 %328, 16
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i64*
  %343 = load i64, i64* %342, align 8
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = add i64 %326, -48
  %345 = add i64 %328, 20
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %344 to i64*
  store i64 %343, i64* %346, align 8
  %347 = load i64, i64* %RBP, align 8
  %348 = add i64 %347, -48
  %349 = load i64, i64* %PC, align 8
  %350 = add i64 %349, 5
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %348 to i64*
  %352 = load i64, i64* %351, align 8
  %353 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %352, i64* %353, align 1, !tbaa !2451
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %354 = add i64 %349, 374
  %355 = add i64 %349, 10
  %356 = load i64, i64* %RSP, align 8, !tbaa !2428
  %357 = add i64 %356, -8
  %358 = inttoptr i64 %357 to i64*
  store i64 %355, i64* %358, align 8
  store i64 %357, i64* %RSP, align 8, !tbaa !2428
  store i64 %354, i64* %PC, align 8, !tbaa !2428
  %359 = tail call %struct.Memory* @sub_403780__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %354, %struct.Memory* %MEMORY.1)
  %360 = load i64, i64* %RBP, align 8
  %361 = add i64 %360, -24
  %362 = load i64, i64* %PC, align 8
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = add i64 %365, -1
  store i64 %366, i64* %RAX, align 8, !tbaa !2428
  %367 = icmp ne i64 %365, 0
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %13, align 1, !tbaa !2432
  %369 = trunc i64 %366 to i32
  %370 = and i32 %369, 255
  %371 = tail call i32 @llvm.ctpop.i32(i32 %370) #8
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = xor i8 %373, 1
  store i8 %374, i8* %20, align 1, !tbaa !2446
  %375 = xor i64 %365, 16
  %376 = xor i64 %366, %375
  %377 = lshr i64 %376, 4
  %378 = trunc i64 %377 to i8
  %379 = and i8 %378, 1
  store i8 %379, i8* %25, align 1, !tbaa !2447
  %380 = icmp eq i64 %366, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %28, align 1, !tbaa !2448
  %382 = lshr i64 %366, 63
  %383 = trunc i64 %382 to i8
  store i8 %383, i8* %31, align 1, !tbaa !2449
  %384 = lshr i64 %365, 63
  %385 = xor i64 %382, %384
  %386 = xor i64 %382, 1
  %387 = add nuw nsw i64 %385, %386
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %37, align 1, !tbaa !2450
  %390 = add i64 %362, 12
  store i64 %390, i64* %PC, align 8
  store i64 %366, i64* %364, align 8
  %391 = load i64, i64* %PC, align 8
  %392 = add i64 %391, -69
  store i64 %392, i64* %PC, align 8, !tbaa !2428
  br label %block_4035db

block_403625:                                     ; preds = %block_4035db
  %393 = add i64 %295, -32
  %394 = add i64 %311, 4
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %393 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = add i64 %396, -1
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = icmp eq i64 %396, 0
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %13, align 1, !tbaa !2432
  %400 = trunc i64 %397 to i32
  %401 = and i32 %400, 255
  %402 = tail call i32 @llvm.ctpop.i32(i32 %401) #8
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  store i8 %405, i8* %20, align 1, !tbaa !2446
  %406 = xor i64 %396, %397
  %407 = lshr i64 %406, 4
  %408 = trunc i64 %407 to i8
  %409 = and i8 %408, 1
  store i8 %409, i8* %25, align 1, !tbaa !2447
  %410 = icmp eq i64 %397, 0
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %28, align 1, !tbaa !2448
  %412 = lshr i64 %397, 63
  %413 = trunc i64 %412 to i8
  store i8 %413, i8* %31, align 1, !tbaa !2449
  %414 = lshr i64 %396, 63
  %415 = xor i64 %412, %414
  %416 = add nuw nsw i64 %415, %414
  %417 = icmp eq i64 %416, 2
  %418 = zext i1 %417 to i8
  store i8 %418, i8* %37, align 1, !tbaa !2450
  %419 = add i64 %311, 12
  store i64 %419, i64* %PC, align 8
  store i64 %397, i64* %298, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_403631
}

; Function Attrs: noinline
define %struct.Memory* @sub_403150__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403150:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403180__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_402770__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402770:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402798

block_402819:                                     ; preds = %block_402798
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4027a8:                                     ; preds = %block_402798
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 4464
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403930__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 10511
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_4050f0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 4866
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402798

block_402798:                                     ; preds = %block_4027a8, %block_402770
  %255 = phi i64 [ %.pre, %block_402770 ], [ %254, %block_4027a8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402770 ], [ %222, %block_4027a8 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_4027a8, label %block_402819
}

; Function Attrs: noinline
define %struct.Memory* @sub_400950___cxx_global_var_init_16(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400950:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dMPb_type* @dMPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4735
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_4053f0__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4053f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -120
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 112
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  store i64 %39, i64* %RAX, align 8, !tbaa !2428
  %40 = add i64 %6, -16
  store i64 %40, i64* %RCX, align 8, !tbaa !2428
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %9, 19
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RAX, align 8
  %51 = load i64, i64* %PC, align 8
  store i64 %50, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RCX, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %51, -3288
  %54 = add i64 %51, 11
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_404730__ZmiIdElR14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %2)
  %59 = load i64, i64* %RAX, align 8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %59, -1
  %62 = icmp eq i64 %59, 0
  %63 = zext i1 %62 to i8
  store i8 %63, i8* %13, align 1, !tbaa !2432
  %64 = trunc i64 %61 to i32
  %65 = and i32 %64, 255
  %66 = tail call i32 @llvm.ctpop.i32(i32 %65) #8
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  store i8 %69, i8* %20, align 1, !tbaa !2446
  %70 = xor i64 %59, %61
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %26, align 1, !tbaa !2447
  %74 = icmp eq i64 %61, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %29, align 1, !tbaa !2448
  %76 = lshr i64 %61, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* %32, align 1, !tbaa !2449
  %78 = lshr i64 %59, 63
  %79 = xor i64 %76, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2450
  %83 = icmp ne i8 %77, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %74, %84
  %.v = select i1 %85, i64 372, i64 10
  %86 = add i64 %60, %.v
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_405587, label %block_40541d

block_4054d9:                                     ; preds = %block_4054c4
  %87 = add i64 %247, 92
  br label %block_405535

block_405496:                                     ; preds = %block_405491, %block_4054b2
  %.sink13 = phi i64 [ %248, %block_405491 ], [ %230, %block_4054b2 ]
  %MEMORY.0 = phi %struct.Memory* [ %380, %block_405491 ], [ %222, %block_4054b2 ]
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -32
  store i64 %89, i64* %RDI, align 8, !tbaa !2428
  %90 = add i64 %.sink13, -3494
  %91 = add i64 %.sink13, 9
  %92 = load i64, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94, align 8
  store i64 %93, i64* %RSP, align 8, !tbaa !2428
  store i64 %90, i64* %PC, align 8, !tbaa !2428
  %95 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %90, %struct.Memory* %MEMORY.0)
  %96 = load double*, double** %449, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = load double, double* %96, align 8
  store double %99, double* %342, align 1, !tbaa !2451
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -24
  %102 = add i64 %97, 9
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to double*
  %104 = load double, double* %103, align 8
  store double %104, double* %368, align 1, !tbaa !2451
  store double 0.000000e+00, double* %370, align 1, !tbaa !2451
  %105 = add i64 %97, 13
  store i64 %105, i64* %PC, align 8
  %106 = fcmp uno double %104, %99
  br i1 %106, label %107, label %117

; <label>:107:                                    ; preds = %block_405496
  %108 = fadd double %104, %99
  %109 = bitcast double %108 to i64
  %110 = and i64 %109, 9221120237041090560
  %111 = icmp eq i64 %110, 9218868437227405312
  %112 = and i64 %109, 2251799813685247
  %113 = icmp ne i64 %112, 0
  %114 = and i1 %111, %113
  br i1 %114, label %115, label %123

; <label>:115:                                    ; preds = %107
  %116 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %105, %struct.Memory* %95) #9
  %.pre8 = load i64, i64* %PC, align 8
  %.pre9 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:117:                                    ; preds = %block_405496
  %118 = fcmp ogt double %104, %99
  br i1 %118, label %123, label %119

; <label>:119:                                    ; preds = %117
  %120 = fcmp olt double %104, %99
  br i1 %120, label %123, label %121

; <label>:121:                                    ; preds = %119
  %122 = fcmp oeq double %104, %99
  br i1 %122, label %123, label %127

; <label>:123:                                    ; preds = %121, %119, %117, %107
  %124 = phi i8 [ 0, %117 ], [ 0, %119 ], [ 1, %121 ], [ 1, %107 ]
  %125 = phi i8 [ 0, %117 ], [ 0, %119 ], [ 0, %121 ], [ 1, %107 ]
  %126 = phi i8 [ 0, %117 ], [ 1, %119 ], [ 0, %121 ], [ 1, %107 ]
  store i8 %124, i8* %29, align 1, !tbaa !2453
  store i8 %125, i8* %20, align 1, !tbaa !2453
  store i8 %126, i8* %13, align 1, !tbaa !2453
  br label %127

; <label>:127:                                    ; preds = %123, %121
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %127, %115
  %128 = phi i64 [ %.pre9, %115 ], [ %100, %127 ]
  %129 = phi i64 [ %.pre8, %115 ], [ %105, %127 ]
  %130 = phi %struct.Memory* [ %116, %115 ], [ %95, %127 ]
  %131 = load i8, i8* %13, align 1, !tbaa !2432
  %132 = load i8, i8* %29, align 1, !tbaa !2448
  %133 = or i8 %132, %131
  %134 = icmp ne i8 %133, 0
  %.v19 = select i1 %134, i64 24, i64 6
  %135 = add i64 %129, %.v19
  %136 = add i64 %128, -32
  %137 = add i64 %135, 4
  store i64 %137, i64* %PC, align 8
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  br i1 %134, label %block_4054c4, label %block_4054b2

block_405535:                                     ; preds = %block_40548c, %block_4054d9
  %138 = phi i64 [ %87, %block_4054d9 ], [ %324, %block_40548c ]
  %MEMORY.1 = phi %struct.Memory* [ %237, %block_4054d9 ], [ %380, %block_40548c ]
  %139 = load i64, i64* %RBP, align 8
  %140 = add i64 %139, -40
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %141 = add i64 %139, -8
  %142 = add i64 %138, 15
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RCX, align 8, !tbaa !2428
  %145 = add i64 %139, -56
  %146 = add i64 %138, 19
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %144, i64* %147, align 8
  %148 = load i64, i64* %PC, align 8
  %149 = add i64 %148, -3560
  %150 = add i64 %148, 5
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.1)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -64
  %157 = load i64, i64* %RAX, align 8
  %158 = load i64, i64* %PC, align 8
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %156 to i64*
  store i64 %157, i64* %160, align 8
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -56
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RDI, align 8, !tbaa !2428
  %167 = add i64 %161, -64
  %168 = add i64 %163, 8
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i64*
  %170 = load i64, i64* %169, align 8
  store i64 %170, i64* %RSI, align 8, !tbaa !2428
  %171 = add i64 %163, -353
  %172 = add i64 %163, 13
  %173 = load i64, i64* %RSP, align 8, !tbaa !2428
  %174 = add i64 %173, -8
  %175 = inttoptr i64 %174 to i64*
  store i64 %172, i64* %175, align 8
  store i64 %174, i64* %RSP, align 8, !tbaa !2428
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  %176 = tail call %struct.Memory* @sub_4053f0__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %171, %struct.Memory* %154)
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -40
  %179 = load i64, i64* %PC, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %180 = add i64 %179, -3582
  %181 = add i64 %179, 16
  %182 = load i64, i64* %RSP, align 8, !tbaa !2428
  %183 = add i64 %182, -8
  %184 = inttoptr i64 %183 to i64*
  store i64 %181, i64* %184, align 8
  store i64 %183, i64* %RSP, align 8, !tbaa !2428
  store i64 %180, i64* %PC, align 8, !tbaa !2428
  %185 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %180, %struct.Memory* %176)
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -72
  %188 = load i64, i64* %RAX, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %187 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -16
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = add i64 %192, -80
  %199 = add i64 %194, 8
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -72
  %203 = load i64, i64* %PC, align 8
  %204 = add i64 %203, 4
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %202 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RDI, align 8, !tbaa !2428
  %207 = add i64 %201, -80
  %208 = add i64 %203, 8
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RSI, align 8, !tbaa !2428
  %211 = add i64 %203, -394
  %212 = add i64 %203, 13
  %213 = load i64, i64* %RSP, align 8, !tbaa !2428
  %214 = add i64 %213, -8
  %215 = inttoptr i64 %214 to i64*
  store i64 %212, i64* %215, align 8
  store i64 %214, i64* %RSP, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  %216 = tail call %struct.Memory* @sub_4053f0__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %211, %struct.Memory* %185)
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_405587

block_4054b2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %217 = add i64 %135, -3490
  %218 = add i64 %135, 9
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_404710__ZppIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %130)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -96
  %225 = load i64, i64* %RAX, align 8
  %226 = load i64, i64* %PC, align 8
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %224 to i64*
  store i64 %225, i64* %228, align 8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, -41
  br label %block_405496

block_4054c4:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %231 = add i64 %128, -40
  store i64 %231, i64* %RSI, align 8, !tbaa !2428
  %232 = add i64 %135, 236
  %233 = add i64 %135, 13
  %234 = load i64, i64* %RSP, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %233, i64* %236, align 8
  store i64 %235, i64* %RSP, align 8, !tbaa !2428
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  %237 = tail call %struct.Memory* @sub_4055b0__ZltIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %232, %struct.Memory* %130)
  %238 = load i8, i8* %AL, align 1
  %239 = load i64, i64* %PC, align 8
  %240 = and i8 %238, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %241 = zext i8 %240 to i32
  %242 = tail call i32 @llvm.ctpop.i32(i32 %241) #8
  %243 = trunc i32 %242 to i8
  %244 = xor i8 %243, 1
  store i8 %244, i8* %20, align 1, !tbaa !2446
  %245 = xor i8 %240, 1
  store i8 %245, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %246 = icmp eq i8 %245, 0
  %.v20 = select i1 %246, i64 13, i64 8
  %247 = add i64 %239, %.v20
  store i64 %247, i64* %PC, align 8, !tbaa !2428
  br i1 %246, label %block_4054de, label %block_4054d9

block_405491:                                     ; preds = %block_405477
  %248 = add i64 %390, 5
  br label %block_405496

block_4054de:                                     ; preds = %block_4054c4
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -40
  store i64 %250, i64* %RDI, align 8, !tbaa !2428
  %251 = add i64 %247, -3566
  %252 = add i64 %247, 9
  %253 = load i64, i64* %RSP, align 8, !tbaa !2428
  %254 = add i64 %253, -8
  %255 = inttoptr i64 %254 to i64*
  store i64 %252, i64* %255, align 8
  store i64 %254, i64* %RSP, align 8, !tbaa !2428
  store i64 %251, i64* %PC, align 8, !tbaa !2428
  %256 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %251, %struct.Memory* %237)
  %257 = load i64, i64* %RBP, align 8
  %258 = add i64 %257, -32
  %259 = load i64, i64* %PC, align 8
  store i64 %258, i64* %RDI, align 8, !tbaa !2428
  %260 = load i64*, i64** %337, align 8
  %261 = add i64 %259, 8
  store i64 %261, i64* %PC, align 8
  %262 = load i64, i64* %260, align 8
  store i64 %262, i64* %343, align 1, !tbaa !2451
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %263 = add i64 %257, -48
  %264 = add i64 %259, 13
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %263 to i64*
  store i64 %262, i64* %265, align 8
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, -3588
  %268 = add i64 %266, 5
  %269 = load i64, i64* %RSP, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271, align 8
  store i64 %270, i64* %RSP, align 8, !tbaa !2428
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %272 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %267, %struct.Memory* %256)
  %273 = load i64, i64* %RBP, align 8
  %274 = add i64 %273, -40
  %275 = load i64, i64* %PC, align 8
  store i64 %274, i64* %RDI, align 8, !tbaa !2428
  %276 = load i64*, i64** %337, align 8
  %277 = add i64 %275, 8
  store i64 %277, i64* %PC, align 8
  %278 = load i64, i64* %276, align 8
  store i64 %278, i64* %343, align 1, !tbaa !2451
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %279 = add i64 %273, -104
  %280 = add i64 %275, 13
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %279 to i64*
  store i64 %278, i64* %281, align 8
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %282, -3606
  %284 = add i64 %282, 5
  %285 = load i64, i64* %RSP, align 8, !tbaa !2428
  %286 = add i64 %285, -8
  %287 = inttoptr i64 %286 to i64*
  store i64 %284, i64* %287, align 8
  store i64 %286, i64* %RSP, align 8, !tbaa !2428
  store i64 %283, i64* %PC, align 8, !tbaa !2428
  %288 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %283, %struct.Memory* %272)
  %289 = load i64, i64* %RBP, align 8
  %290 = add i64 %289, -32
  %291 = load i64, i64* %PC, align 8
  store i64 %290, i64* %RDI, align 8, !tbaa !2428
  %292 = add i64 %289, -104
  %293 = add i64 %291, 9
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  %295 = load i64, i64* %294, align 8
  store i64 %295, i64* %343, align 1, !tbaa !2451
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %296 = load i64*, i64** %337, align 8
  %297 = add i64 %291, 13
  store i64 %297, i64* %PC, align 8
  store i64 %295, i64* %296, align 8
  %298 = load i64, i64* %RBP, align 8
  %299 = add i64 %298, -48
  %300 = load i64, i64* %PC, align 8
  %301 = add i64 %300, 5
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %299 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %343, align 1, !tbaa !2451
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %304 = add i64 %298, -112
  %305 = add i64 %300, 10
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i64*
  store i64 %303, i64* %306, align 8
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, -3634
  %309 = add i64 %307, 5
  %310 = load i64, i64* %RSP, align 8, !tbaa !2428
  %311 = add i64 %310, -8
  %312 = inttoptr i64 %311 to i64*
  store i64 %309, i64* %312, align 8
  store i64 %311, i64* %RSP, align 8, !tbaa !2428
  store i64 %308, i64* %PC, align 8, !tbaa !2428
  %313 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %308, %struct.Memory* %288)
  %314 = load i64, i64* %RBP, align 8
  %315 = add i64 %314, -112
  %316 = load i64, i64* %PC, align 8
  %317 = add i64 %316, 5
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %315 to i64*
  %319 = load i64, i64* %318, align 8
  store i64 %319, i64* %343, align 1, !tbaa !2451
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %320 = load i64*, i64** %337, align 8
  %321 = add i64 %316, 9
  store i64 %321, i64* %PC, align 8
  store i64 %319, i64* %320, align 8
  %322 = load i64, i64* %PC, align 8
  %323 = add i64 %322, -241
  store i64 %323, i64* %PC, align 8, !tbaa !2428
  br label %block_40543f

block_40548c:                                     ; preds = %block_405477
  %324 = add i64 %390, 169
  br label %block_405535

block_40543f:                                     ; preds = %block_40541d, %block_4054de
  %325 = phi i64 [ %.pre, %block_40541d ], [ %323, %block_4054de ]
  %MEMORY.2 = phi %struct.Memory* [ %336, %block_40541d ], [ %313, %block_4054de ]
  %326 = add i64 %325, 5
  br label %block_405444

block_40541d:                                     ; preds = %block_4053f0
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -8
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %86, -3373
  %332 = add i64 %86, 9
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %58)
  %337 = bitcast %union.anon* %3 to i64**
  %338 = load i64*, i64** %337, align 8
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC, align 8
  %341 = load i64, i64* %338, align 8
  %342 = bitcast [32 x %union.VectorReg]* %328 to double*
  %343 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %328, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %341, i64* %343, align 1, !tbaa !2451
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %345 = bitcast i64* %344 to double*
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %346 = load i64, i64* %RBP, align 8
  %347 = add i64 %346, -24
  %348 = add i64 %339, 9
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %347 to i64*
  store i64 %341, i64* %349, align 8
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -8
  %352 = load i64, i64* %PC, align 8
  %353 = add i64 %352, 4
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %351 to i64*
  %355 = load i64, i64* %354, align 8
  store i64 %355, i64* %RAX, align 8, !tbaa !2428
  %356 = add i64 %350, -32
  %357 = add i64 %352, 8
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i64*
  store i64 %355, i64* %358, align 8
  %359 = load i64, i64* %RBP, align 8
  %360 = add i64 %359, -16
  %361 = load i64, i64* %PC, align 8
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = add i64 %359, -40
  %366 = add i64 %361, 8
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i64*
  store i64 %364, i64* %367, align 8
  %368 = bitcast %union.VectorReg* %327 to double*
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %370 = bitcast i64* %369 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40543f

block_405472:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %371 = add i64 %488, -46
  br label %block_405444

block_405477:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %372 = load i64, i64* %RBP, align 8
  %373 = add i64 %372, -32
  store i64 %373, i64* %RDI, align 8, !tbaa !2428
  %374 = add i64 %372, -40
  store i64 %374, i64* %RSI, align 8, !tbaa !2428
  %375 = add i64 %488, 313
  %376 = add i64 %488, 13
  %377 = load i64, i64* %RSP, align 8, !tbaa !2428
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379, align 8
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  store i64 %375, i64* %PC, align 8, !tbaa !2428
  %380 = tail call %struct.Memory* @sub_4055b0__ZltIdEbRK14PointerWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %375, %struct.Memory* %483)
  %381 = load i8, i8* %AL, align 1
  %382 = load i64, i64* %PC, align 8
  %383 = and i8 %381, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %384 = zext i8 %383 to i32
  %385 = tail call i32 @llvm.ctpop.i32(i32 %384) #8
  %386 = trunc i32 %385 to i8
  %387 = xor i8 %386, 1
  store i8 %387, i8* %20, align 1, !tbaa !2446
  %388 = xor i8 %383, 1
  store i8 %388, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %389 = icmp eq i8 %388, 0
  %.v18 = select i1 %389, i64 13, i64 8
  %390 = add i64 %382, %.v18
  store i64 %390, i64* %PC, align 8, !tbaa !2428
  br i1 %389, label %block_405491, label %block_40548c

block_405587:                                     ; preds = %block_405535, %block_4053f0
  %391 = phi i64 [ %86, %block_4053f0 ], [ %.pre10, %block_405535 ]
  %MEMORY.3 = phi %struct.Memory* [ %58, %block_4053f0 ], [ %216, %block_405535 ]
  %392 = load i64, i64* %RSP, align 8
  %393 = add i64 %392, 112
  store i64 %393, i64* %RSP, align 8, !tbaa !2428
  %394 = icmp ugt i64 %392, -113
  %395 = zext i1 %394 to i8
  store i8 %395, i8* %13, align 1, !tbaa !2432
  %396 = trunc i64 %393 to i32
  %397 = and i32 %396, 255
  %398 = tail call i32 @llvm.ctpop.i32(i32 %397) #8
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  %401 = xor i8 %400, 1
  store i8 %401, i8* %20, align 1, !tbaa !2446
  %402 = xor i64 %392, 16
  %403 = xor i64 %402, %393
  %404 = lshr i64 %403, 4
  %405 = trunc i64 %404 to i8
  %406 = and i8 %405, 1
  store i8 %406, i8* %26, align 1, !tbaa !2447
  %407 = icmp eq i64 %393, 0
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %29, align 1, !tbaa !2448
  %409 = lshr i64 %393, 63
  %410 = trunc i64 %409 to i8
  store i8 %410, i8* %32, align 1, !tbaa !2449
  %411 = lshr i64 %392, 63
  %412 = xor i64 %409, %411
  %413 = add nuw nsw i64 %412, %409
  %414 = icmp eq i64 %413, 2
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %38, align 1, !tbaa !2450
  %416 = add i64 %391, 5
  store i64 %416, i64* %PC, align 8
  %417 = add i64 %392, 120
  %418 = inttoptr i64 %393 to i64*
  %419 = load i64, i64* %418, align 8
  store i64 %419, i64* %RBP, align 8, !tbaa !2428
  store i64 %417, i64* %RSP, align 8, !tbaa !2428
  %420 = add i64 %391, 6
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %417 to i64*
  %422 = load i64, i64* %421, align 8
  store i64 %422, i64* %PC, align 8, !tbaa !2428
  %423 = add i64 %392, 128
  store i64 %423, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_405444:                                     ; preds = %block_405472, %block_40543f
  %424 = phi i64 [ %326, %block_40543f ], [ %371, %block_405472 ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_40543f ], [ %483, %block_405472 ]
  %425 = load i64, i64* %RBP, align 8
  %426 = add i64 %425, -40
  store i64 %426, i64* %RDI, align 8, !tbaa !2428
  %427 = add i64 %425, -24
  %428 = add i64 %424, 9
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %343, align 1, !tbaa !2451
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %431 = add i64 %425, -88
  %432 = add i64 %424, 14
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %431 to i64*
  store i64 %430, i64* %433, align 8
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 318
  %436 = add i64 %434, 5
  %437 = load i64, i64* %RSP, align 8, !tbaa !2428
  %438 = add i64 %437, -8
  %439 = inttoptr i64 %438 to i64*
  store i64 %436, i64* %439, align 8
  store i64 %438, i64* %RSP, align 8, !tbaa !2428
  store i64 %435, i64* %PC, align 8, !tbaa !2428
  %440 = tail call %struct.Memory* @sub_405590__ZmmIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %435, %struct.Memory* %MEMORY.4)
  %441 = load i64, i64* %RAX, align 8
  %442 = load i64, i64* %PC, align 8
  store i64 %441, i64* %RDI, align 8, !tbaa !2428
  %443 = add i64 %442, -3431
  %444 = add i64 %442, 8
  %445 = load i64, i64* %RSP, align 8, !tbaa !2428
  %446 = add i64 %445, -8
  %447 = inttoptr i64 %446 to i64*
  store i64 %444, i64* %447, align 8
  store i64 %446, i64* %RSP, align 8, !tbaa !2428
  store i64 %443, i64* %PC, align 8, !tbaa !2428
  %448 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %443, %struct.Memory* %440)
  %449 = bitcast %union.anon* %3 to double**
  %450 = load double*, double** %449, align 8
  %451 = load i64, i64* %PC, align 8
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC, align 8
  %453 = load double, double* %450, align 8
  store double %453, double* %342, align 1, !tbaa !2451
  store double 0.000000e+00, double* %345, align 1, !tbaa !2451
  %454 = load i64, i64* %RBP, align 8
  %455 = add i64 %454, -88
  %456 = add i64 %451, 9
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %455 to double*
  %458 = load double, double* %457, align 8
  store double %458, double* %368, align 1, !tbaa !2451
  store double 0.000000e+00, double* %370, align 1, !tbaa !2451
  %459 = add i64 %451, 13
  store i64 %459, i64* %PC, align 8
  %460 = fcmp uno double %453, %458
  br i1 %460, label %461, label %471

; <label>:461:                                    ; preds = %block_405444
  %462 = fadd double %453, %458
  %463 = bitcast double %462 to i64
  %464 = and i64 %463, 9221120237041090560
  %465 = icmp eq i64 %464, 9218868437227405312
  %466 = and i64 %463, 2251799813685247
  %467 = icmp ne i64 %466, 0
  %468 = and i1 %465, %467
  br i1 %468, label %469, label %477

; <label>:469:                                    ; preds = %461
  %470 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %459, %struct.Memory* %448) #9
  %.pre7 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:471:                                    ; preds = %block_405444
  %472 = fcmp ogt double %453, %458
  br i1 %472, label %477, label %473

; <label>:473:                                    ; preds = %471
  %474 = fcmp olt double %453, %458
  br i1 %474, label %477, label %475

; <label>:475:                                    ; preds = %473
  %476 = fcmp oeq double %453, %458
  br i1 %476, label %477, label %481

; <label>:477:                                    ; preds = %475, %473, %471, %461
  %478 = phi i8 [ 0, %471 ], [ 0, %473 ], [ 1, %475 ], [ 1, %461 ]
  %479 = phi i8 [ 0, %471 ], [ 0, %473 ], [ 0, %475 ], [ 1, %461 ]
  %480 = phi i8 [ 0, %471 ], [ 1, %473 ], [ 0, %475 ], [ 1, %461 ]
  store i8 %478, i8* %29, align 1, !tbaa !2453
  store i8 %479, i8* %20, align 1, !tbaa !2453
  store i8 %480, i8* %13, align 1, !tbaa !2453
  br label %481

; <label>:481:                                    ; preds = %477, %475
  store i8 0, i8* %38, align 1, !tbaa !2453
  store i8 0, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %481, %469
  %482 = phi i64 [ %.pre7, %469 ], [ %459, %481 ]
  %483 = phi %struct.Memory* [ %470, %469 ], [ %448, %481 ]
  %484 = load i8, i8* %13, align 1, !tbaa !2432
  %485 = load i8, i8* %29, align 1, !tbaa !2448
  %486 = or i8 %485, %484
  %487 = icmp ne i8 %486, 0
  %.v17 = select i1 %487, i64 11, i64 6
  %488 = add i64 %482, %.v17
  store i64 %488, i64* %PC, align 8, !tbaa !2428
  br i1 %487, label %block_405477, label %block_405472
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405e70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402230__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402230:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402258

block_4022a1:                                     ; preds = %block_402258
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402268:                                     ; preds = %block_402258
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 10200
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a40__ZN9benchmark4copyIPdS1_EEvT_S2_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 14775
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405c30__ZN9benchmark13insertionSortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 10490
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404b80__Z13verify_sortedIPdEvT_S1__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402258

block_402258:                                     ; preds = %block_402268, %block_402230
  %190 = phi i64 [ %.pre, %block_402230 ], [ %189, %block_402268 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402230 ], [ %157, %block_402268 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402268, label %block_4022a1
}

; Function Attrs: noinline
define %struct.Memory* @sub_402c30__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402c30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c58

block_402cd9:                                     ; preds = %block_402c58
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402c68:                                     ; preds = %block_402c58
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 96
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402ce0__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 191
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_402d60__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 498
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402eb0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402c58

block_402c58:                                     ; preds = %block_402c68, %block_402c30
  %255 = phi i64 [ %.pre, %block_402c30 ], [ %254, %block_402c68 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402c30 ], [ %222, %block_402c68 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402c68, label %block_402cd9
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d20__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401d20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 12
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %32, i64* %33, align 1, !tbaa !2451
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  store double 0.000000e+00, double* %35, align 1, !tbaa !2451
  %36 = add i64 %22, 16
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %37, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC, align 8
  %40 = load i64, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %40, 8
  %42 = inttoptr i64 %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  store i64 %41, i64* %5, align 8, !tbaa !2428
  %44 = add i64 %38, 2
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %PC, align 8, !tbaa !2428
  %47 = add i64 %40, 16
  store i64 %47, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402ce0__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402ce0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_402cf4

block_402d0e:                                     ; preds = %block_402cf4
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %57 = add i64 %136, 706
  %58 = add i64 %136, 11
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %126)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -32
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX, align 8
  %67 = add i64 %65, 8
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 799
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %70, %struct.Memory* %62)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -24
  %78 = load i64, i64* %PC, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %79 = add i64 %76, -48
  %80 = load i64, i64* %RAX, align 8
  %81 = add i64 %78, 10
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %82, align 8
  %83 = load i64, i64* %PC, align 8
  %84 = add i64 %83, 672
  %85 = add i64 %83, 5
  %86 = load i64, i64* %RSP, align 8, !tbaa !2428
  %87 = add i64 %86, -8
  %88 = inttoptr i64 %87 to i64*
  store i64 %85, i64* %88, align 8
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  store i64 %84, i64* %PC, align 8, !tbaa !2428
  %89 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %84, %struct.Memory* %75)
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -40
  %92 = load i64, i64* %PC, align 8
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %93 = load i64, i64* %RAX, align 8
  %94 = add i64 %92, 8
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %93, i64* %95, align 8
  %96 = load i64, i64* %PC, align 8
  %97 = add i64 %96, 771
  %98 = add i64 %96, 5
  %99 = load i64, i64* %RSP, align 8, !tbaa !2428
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 %98, i64* %101, align 8
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  store i64 %97, i64* %PC, align 8, !tbaa !2428
  %102 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %97, %struct.Memory* %89)
  %103 = load i64, i64* %RBP, align 8
  %104 = add i64 %103, -48
  %105 = load i64, i64* %PC, align 8
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RDI, align 8, !tbaa !2428
  %109 = add i64 %105, 7
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RCX, align 8, !tbaa !2428
  %112 = bitcast %union.anon* %3 to i64**
  %113 = load i64*, i64** %112, align 8
  %114 = add i64 %105, 10
  store i64 %114, i64* %PC, align 8
  store i64 %111, i64* %113, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, -88
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br label %block_402cf4

block_402cf4:                                     ; preds = %block_402d0e, %block_402ce0
  %117 = phi i64 [ %.pre, %block_402ce0 ], [ %116, %block_402d0e ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402ce0 ], [ %102, %block_402d0e ]
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -8
  store i64 %119, i64* %RDI, align 8, !tbaa !2428
  %120 = add i64 %118, -16
  store i64 %120, i64* %RSI, align 8, !tbaa !2428
  %121 = add i64 %117, 796
  %122 = add i64 %117, 13
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_403010__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %MEMORY.0)
  %127 = load i8, i8* %AL, align 1
  %128 = load i64, i64* %PC, align 8
  %129 = and i8 %127, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %130 = zext i8 %129 to i32
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #8
  %132 = trunc i32 %131 to i8
  %133 = xor i8 %132, 1
  store i8 %133, i8* %20, align 1, !tbaa !2446
  %134 = xor i8 %129, 1
  store i8 %134, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %135 = icmp eq i8 %134, 0
  %.v = select i1 %135, i64 13, i64 8
  %136 = add i64 %128, %.v
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  br i1 %135, label %block_402d0e, label %block_402d09

block_402d09:                                     ; preds = %block_402cf4
  %137 = load i64, i64* %RSP, align 8
  %138 = add i64 %137, 48
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %139 = icmp ugt i64 %137, -49
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %13, align 1, !tbaa !2432
  %141 = trunc i64 %138 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #8
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %20, align 1, !tbaa !2446
  %147 = xor i64 %137, 16
  %148 = xor i64 %147, %138
  %149 = lshr i64 %148, 4
  %150 = trunc i64 %149 to i8
  %151 = and i8 %150, 1
  store i8 %151, i8* %26, align 1, !tbaa !2447
  %152 = icmp eq i64 %138, 0
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %29, align 1, !tbaa !2448
  %154 = lshr i64 %138, 63
  %155 = trunc i64 %154 to i8
  store i8 %155, i8* %32, align 1, !tbaa !2449
  %156 = lshr i64 %137, 63
  %157 = xor i64 %154, %156
  %158 = add nuw nsw i64 %157, %154
  %159 = icmp eq i64 %158, 2
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %38, align 1, !tbaa !2450
  %161 = add i64 %136, 77
  store i64 %161, i64* %PC, align 8
  %162 = add i64 %137, 56
  %163 = inttoptr i64 %138 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RBP, align 8, !tbaa !2428
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  %165 = add i64 %136, 78
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %162 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %PC, align 8, !tbaa !2428
  %168 = add i64 %137, 64
  store i64 %168, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %126
}

; Function Attrs: noinline
define %struct.Memory* @sub_4050f0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4050f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 96
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, -5176
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_403cd0__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %RAX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %58, -1
  %61 = icmp eq i64 %58, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %13, align 1, !tbaa !2432
  %63 = trunc i64 %60 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #8
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %20, align 1, !tbaa !2446
  %69 = xor i64 %58, %60
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  store i8 %72, i8* %25, align 1, !tbaa !2447
  %73 = icmp eq i64 %60, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %28, align 1, !tbaa !2448
  %75 = lshr i64 %60, 63
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %31, align 1, !tbaa !2449
  %77 = lshr i64 %58, 63
  %78 = xor i64 %75, %77
  %79 = add nuw nsw i64 %78, %77
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %37, align 1, !tbaa !2450
  %82 = icmp ne i8 %76, 0
  %83 = xor i1 %82, %80
  %84 = or i1 %73, %83
  %.v = select i1 %84, i64 354, i64 10
  %85 = add i64 %59, %.v
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_405275, label %block_40511d

block_40513d:                                     ; preds = %block_4051de, %block_40511d
  %86 = phi i64 [ %.pre, %block_40511d ], [ %282, %block_4051de ]
  %MEMORY.0 = phi %struct.Memory* [ %171, %block_40511d ], [ %272, %block_4051de ]
  %87 = add i64 %86, 5
  br label %block_405142

block_405275:                                     ; preds = %block_405223, %block_4050f0
  %88 = phi i64 [ %85, %block_4050f0 ], [ %.pre8, %block_405223 ]
  %MEMORY.1 = phi %struct.Memory* [ %57, %block_4050f0 ], [ %384, %block_405223 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 96
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -97
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #8
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %89, %90
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 104
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 112
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4051b2:                                     ; preds = %block_405190
  %120 = add i64 %161, -5378
  %121 = add i64 %161, 9
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403cb0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %151)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -88
  %128 = load i64, i64* %RAX, align 8
  %129 = load i64, i64* %PC, align 8
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %127 to i64*
  store i64 %128, i64* %131, align 8
  %132 = load i64, i64* %PC, align 8
  %133 = add i64 %132, -47
  br label %block_405190

block_405190:                                     ; preds = %block_40518b, %block_4051b2
  %.sink10 = phi i64 [ %305, %block_40518b ], [ %133, %block_4051b2 ]
  %MEMORY.2 = phi %struct.Memory* [ %293, %block_40518b ], [ %125, %block_4051b2 ]
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -32
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = add i64 %.sink10, -5376
  %137 = add i64 %.sink10, 9
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  store i64 %143, i64* %RSI, align 8, !tbaa !2428
  %145 = load i64, i64* %RAX, align 8
  store i64 %145, i64* %RDI, align 8, !tbaa !2428
  %146 = add i64 %144, -8073
  %147 = add i64 %144, 12
  %148 = load i64, i64* %RSP, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150, align 8
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %151 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %146, %struct.Memory* %141)
  %152 = load i8, i8* %AL, align 1
  %153 = load i64, i64* %PC, align 8
  %154 = and i8 %152, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %155 = zext i8 %154 to i32
  %156 = tail call i32 @llvm.ctpop.i32(i32 %155) #8
  %157 = trunc i32 %156 to i8
  %158 = xor i8 %157, 1
  store i8 %158, i8* %20, align 1, !tbaa !2446
  %159 = xor i8 %154, 1
  store i8 %159, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %160 = icmp eq i8 %159, 0
  %.v17 = select i1 %160, i64 13, i64 8
  %161 = add i64 %153, %.v17
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -32
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  br i1 %160, label %block_4051b2, label %block_4051ad

block_40511d:                                     ; preds = %block_4050f0
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -8
  store i64 %165, i64* %RDI, align 8, !tbaa !2428
  %166 = add i64 %85, -5261
  %167 = add i64 %85, 9
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %166, %struct.Memory* %57)
  %172 = bitcast %union.anon* %3 to i64**
  %173 = load i64*, i64** %172, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC, align 8
  %176 = load i64, i64* %173, align 8
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -24
  %179 = add i64 %174, 7
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %180, align 8
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -8
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = add i64 %181, -32
  %188 = add i64 %183, 8
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  store i64 %186, i64* %189, align 8
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -16
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 4
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = add i64 %190, -40
  %197 = add i64 %192, 8
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to i64*
  store i64 %195, i64* %198, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40513d

block_4051ad:                                     ; preds = %block_405190
  %199 = add i64 %162, -40
  store i64 %199, i64* %RSI, align 8, !tbaa !2428
  %200 = add i64 %161, 243
  %201 = add i64 %161, 36
  %202 = load i64, i64* %RSP, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %RSP, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_4052a0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %200, %struct.Memory* %151)
  %206 = load i8, i8* %AL, align 1
  %207 = load i64, i64* %PC, align 8
  %208 = and i8 %206, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %209 = zext i8 %208 to i32
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #8
  %211 = trunc i32 %210 to i8
  %212 = xor i8 %211, 1
  store i8 %212, i8* %20, align 1, !tbaa !2446
  %213 = xor i8 %208, 1
  store i8 %213, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %214 = icmp eq i8 %213, 0
  %.v18 = select i1 %214, i64 13, i64 8
  %215 = add i64 %207, %.v18
  store i64 %215, i64* %PC, align 8, !tbaa !2428
  br i1 %214, label %block_4051de, label %block_4051d9

block_4051de:                                     ; preds = %block_4051ad
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -40
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %218 = add i64 %215, -5454
  %219 = add i64 %215, 9
  %220 = load i64, i64* %RSP, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %219, i64* %222, align 8
  store i64 %221, i64* %RSP, align 8, !tbaa !2428
  store i64 %218, i64* %PC, align 8, !tbaa !2428
  %223 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %218, %struct.Memory* %205)
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -32
  %226 = load i64, i64* %PC, align 8
  store i64 %225, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64*, i64** %172, align 8
  %228 = add i64 %226, 7
  store i64 %228, i64* %PC, align 8
  %229 = load i64, i64* %227, align 8
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = add i64 %224, -48
  %231 = add i64 %226, 11
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i64*
  store i64 %229, i64* %232, align 8
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, -5474
  %235 = add i64 %233, 5
  %236 = load i64, i64* %RSP, align 8, !tbaa !2428
  %237 = add i64 %236, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 %235, i64* %238, align 8
  store i64 %237, i64* %RSP, align 8, !tbaa !2428
  store i64 %234, i64* %PC, align 8, !tbaa !2428
  %239 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %234, %struct.Memory* %223)
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -40
  %242 = load i64, i64* %PC, align 8
  store i64 %241, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %240, -96
  %244 = load i64, i64* %RAX, align 8
  %245 = add i64 %242, 8
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %246, align 8
  %247 = load i64, i64* %PC, align 8
  %248 = add i64 %247, -5487
  %249 = add i64 %247, 5
  %250 = load i64, i64* %RSP, align 8, !tbaa !2428
  %251 = add i64 %250, -8
  %252 = inttoptr i64 %251 to i64*
  store i64 %249, i64* %252, align 8
  store i64 %251, i64* %RSP, align 8, !tbaa !2428
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %253 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %248, %struct.Memory* %239)
  %254 = load i64, i64* %RBP, align 8
  %255 = add i64 %254, -32
  %256 = load i64, i64* %PC, align 8
  store i64 %255, i64* %RDI, align 8, !tbaa !2428
  %257 = add i64 %254, -96
  %258 = add i64 %256, 8
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %RCX, align 8, !tbaa !2428
  %261 = add i64 %256, 11
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %RDX, align 8, !tbaa !2428
  %264 = load i64*, i64** %172, align 8
  %265 = add i64 %256, 14
  store i64 %265, i64* %PC, align 8
  store i64 %263, i64* %264, align 8
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, -5506
  %268 = add i64 %266, 5
  %269 = load i64, i64* %RSP, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271, align 8
  store i64 %270, i64* %RSP, align 8, !tbaa !2428
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %272 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %267, %struct.Memory* %253)
  %273 = load i64, i64* %RBP, align 8
  %274 = add i64 %273, -48
  %275 = load i64, i64* %PC, align 8
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %274 to i64*
  %278 = load i64, i64* %277, align 8
  store i64 %278, i64* %RCX, align 8, !tbaa !2428
  %279 = load i64*, i64** %172, align 8
  %280 = add i64 %275, 7
  store i64 %280, i64* %PC, align 8
  store i64 %278, i64* %279, align 8
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, -225
  store i64 %282, i64* %PC, align 8, !tbaa !2428
  br label %block_40513d

block_40516c:                                     ; preds = %block_405142
  %283 = add i64 %421, -42
  br label %block_405142

block_4051d9:                                     ; preds = %block_4051ad
  %284 = add i64 %215, 74
  br label %block_405223

block_405167:                                     ; preds = %block_405142
  %285 = load i64, i64* %RBP, align 8
  %286 = add i64 %285, -32
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = add i64 %285, -40
  store i64 %287, i64* %RSI, align 8, !tbaa !2428
  %288 = add i64 %421, 313
  %289 = add i64 %421, 23
  %290 = load i64, i64* %RSP, align 8, !tbaa !2428
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  store i64 %289, i64* %292, align 8
  store i64 %291, i64* %RSP, align 8, !tbaa !2428
  store i64 %288, i64* %PC, align 8, !tbaa !2428
  %293 = tail call %struct.Memory* @sub_4052a0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %288, %struct.Memory* %411)
  %294 = load i8, i8* %AL, align 1
  %295 = load i64, i64* %PC, align 8
  %296 = and i8 %294, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %297 = zext i8 %296 to i32
  %298 = tail call i32 @llvm.ctpop.i32(i32 %297) #8
  %299 = trunc i32 %298 to i8
  %300 = xor i8 %299, 1
  store i8 %300, i8* %20, align 1, !tbaa !2446
  %301 = xor i8 %296, 1
  store i8 %301, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %302 = icmp eq i8 %301, 0
  %.v16 = select i1 %302, i64 13, i64 8
  %303 = add i64 %295, %.v16
  store i64 %303, i64* %PC, align 8, !tbaa !2428
  br i1 %302, label %block_40518b, label %block_405186

block_405186:                                     ; preds = %block_405167
  %304 = add i64 %303, 157
  br label %block_405223

block_40518b:                                     ; preds = %block_405167
  %305 = add i64 %303, 5
  br label %block_405190

block_405223:                                     ; preds = %block_405186, %block_4051d9
  %306 = phi i64 [ %284, %block_4051d9 ], [ %304, %block_405186 ]
  %MEMORY.3 = phi %struct.Memory* [ %205, %block_4051d9 ], [ %293, %block_405186 ]
  %307 = load i64, i64* %RBP, align 8
  %308 = add i64 %307, -40
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %309 = add i64 %307, -8
  %310 = add i64 %306, 15
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %309 to i64*
  %312 = load i64, i64* %311, align 8
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = add i64 %307, -56
  %314 = add i64 %306, 19
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  store i64 %312, i64* %315, align 8
  %316 = load i64, i64* %PC, align 8
  %317 = add i64 %316, -5430
  %318 = add i64 %316, 5
  %319 = load i64, i64* %RSP, align 8, !tbaa !2428
  %320 = add i64 %319, -8
  %321 = inttoptr i64 %320 to i64*
  store i64 %318, i64* %321, align 8
  store i64 %320, i64* %RSP, align 8, !tbaa !2428
  store i64 %317, i64* %PC, align 8, !tbaa !2428
  %322 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %317, %struct.Memory* %MEMORY.3)
  %323 = load i64, i64* %RBP, align 8
  %324 = add i64 %323, -64
  %325 = load i64, i64* %RAX, align 8
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 4
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %324 to i64*
  store i64 %325, i64* %328, align 8
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -56
  %331 = load i64, i64* %PC, align 8
  %332 = add i64 %331, 4
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %330 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = add i64 %329, -64
  %336 = add i64 %331, 8
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %RSI, align 8, !tbaa !2428
  %339 = add i64 %331, -335
  %340 = add i64 %331, 13
  %341 = load i64, i64* %RSP, align 8, !tbaa !2428
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %340, i64* %343, align 8
  store i64 %342, i64* %RSP, align 8, !tbaa !2428
  store i64 %339, i64* %PC, align 8, !tbaa !2428
  %344 = tail call %struct.Memory* @sub_4050f0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %339, %struct.Memory* %322)
  %345 = load i64, i64* %RBP, align 8
  %346 = add i64 %345, -40
  %347 = load i64, i64* %PC, align 8
  store i64 %346, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %348 = add i64 %347, -5452
  %349 = add i64 %347, 16
  %350 = load i64, i64* %RSP, align 8, !tbaa !2428
  %351 = add i64 %350, -8
  %352 = inttoptr i64 %351 to i64*
  store i64 %349, i64* %352, align 8
  store i64 %351, i64* %RSP, align 8, !tbaa !2428
  store i64 %348, i64* %PC, align 8, !tbaa !2428
  %353 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %348, %struct.Memory* %344)
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -72
  %356 = load i64, i64* %RAX, align 8
  %357 = load i64, i64* %PC, align 8
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %355 to i64*
  store i64 %356, i64* %359, align 8
  %360 = load i64, i64* %RBP, align 8
  %361 = add i64 %360, -16
  %362 = load i64, i64* %PC, align 8
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = add i64 %360, -80
  %367 = add i64 %362, 8
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i64*
  store i64 %365, i64* %368, align 8
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -72
  %371 = load i64, i64* %PC, align 8
  %372 = add i64 %371, 4
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %370 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = add i64 %369, -80
  %376 = add i64 %371, 8
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %RSI, align 8, !tbaa !2428
  %379 = add i64 %371, -376
  %380 = add i64 %371, 13
  %381 = load i64, i64* %RSP, align 8, !tbaa !2428
  %382 = add i64 %381, -8
  %383 = inttoptr i64 %382 to i64*
  store i64 %380, i64* %383, align 8
  store i64 %382, i64* %RSP, align 8, !tbaa !2428
  store i64 %379, i64* %PC, align 8, !tbaa !2428
  %384 = tail call %struct.Memory* @sub_4050f0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %379, %struct.Memory* %353)
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_405275

block_405142:                                     ; preds = %block_40516c, %block_40513d
  %385 = phi i64 [ %87, %block_40513d ], [ %283, %block_40516c ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_40513d ], [ %411, %block_40516c ]
  %386 = load i64, i64* %RBP, align 8
  %387 = add i64 %386, -40
  store i64 %387, i64* %RDI, align 8, !tbaa !2428
  %388 = add i64 %385, 318
  %389 = add i64 %385, 9
  %390 = load i64, i64* %RSP, align 8, !tbaa !2428
  %391 = add i64 %390, -8
  %392 = inttoptr i64 %391 to i64*
  store i64 %389, i64* %392, align 8
  store i64 %391, i64* %RSP, align 8, !tbaa !2428
  store i64 %388, i64* %PC, align 8, !tbaa !2428
  %393 = tail call %struct.Memory* @sub_405280__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %388, %struct.Memory* %MEMORY.4)
  %394 = load i64, i64* %RAX, align 8
  %395 = load i64, i64* %PC, align 8
  store i64 %394, i64* %RDI, align 8, !tbaa !2428
  %396 = add i64 %395, -5307
  %397 = add i64 %395, 8
  %398 = load i64, i64* %RSP, align 8, !tbaa !2428
  %399 = add i64 %398, -8
  %400 = inttoptr i64 %399 to i64*
  store i64 %397, i64* %400, align 8
  store i64 %399, i64* %RSP, align 8, !tbaa !2428
  store i64 %396, i64* %PC, align 8, !tbaa !2428
  %401 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %396, %struct.Memory* %393)
  %402 = load i64, i64* %RBP, align 8
  %403 = add i64 %402, -24
  %404 = load i64, i64* %PC, align 8
  store i64 %403, i64* %RDI, align 8, !tbaa !2428
  %405 = load i64, i64* %RAX, align 8
  store i64 %405, i64* %RSI, align 8, !tbaa !2428
  %406 = add i64 %404, -8003
  %407 = add i64 %404, 12
  %408 = load i64, i64* %RSP, align 8, !tbaa !2428
  %409 = add i64 %408, -8
  %410 = inttoptr i64 %409 to i64*
  store i64 %407, i64* %410, align 8
  store i64 %409, i64* %RSP, align 8, !tbaa !2428
  store i64 %406, i64* %PC, align 8, !tbaa !2428
  %411 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %406, %struct.Memory* %401)
  %412 = load i8, i8* %AL, align 1
  %413 = load i64, i64* %PC, align 8
  %414 = and i8 %412, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %415 = zext i8 %414 to i32
  %416 = tail call i32 @llvm.ctpop.i32(i32 %415) #8
  %417 = trunc i32 %416 to i8
  %418 = xor i8 %417, 1
  store i8 %418, i8* %20, align 1, !tbaa !2446
  %419 = xor i8 %414, 1
  store i8 %419, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %420 = icmp eq i8 %419, 0
  %.v15 = select i1 %420, i64 13, i64 8
  %421 = add i64 %413, %.v15
  store i64 %421, i64* %PC, align 8, !tbaa !2428
  br i1 %420, label %block_40516c, label %block_405167
}

; Function Attrs: noinline
define %struct.Memory* @sub_406030__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406030:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 80
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406090__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 118
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_4060d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_404110__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404110:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_404160__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #8
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %65, %.v
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_404150, label %block_404135

block_404135:                                     ; preds = %block_404110
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %76 = add i64 %73, -14981
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_404150

block_404150:                                     ; preds = %block_404135, %block_404110
  %88 = phi i64 [ %73, %block_404110 ], [ %.pre, %block_404135 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_404110 ], [ %81, %block_404135 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #8
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %89, %90
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f30__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405f30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 48
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 86
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_405fb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_406620__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406620:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406650__ZN12ValueWrapperIS_IdEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_405710__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405710:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -104
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -32
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %20 = add i64 %8, -16
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %11, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -16
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -24
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, -10078
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40573c

block_405792:                                     ; preds = %block_405776
  %55 = add i64 %262, 37
  store i64 %55, i64* %PC, align 8, !tbaa !2428
  br label %block_4057b7

block_405751:                                     ; preds = %block_40573c
  %56 = load i64, i64* %RSP, align 8
  %57 = add i64 %56, 96
  store i64 %57, i64* %RSP, align 8, !tbaa !2428
  %58 = icmp ugt i64 %56, -97
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %13, align 1, !tbaa !2432
  %60 = trunc i64 %57 to i32
  %61 = and i32 %60, 255
  %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #8
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  store i8 %65, i8* %14, align 1, !tbaa !2446
  %66 = xor i64 %56, %57
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %15, align 1, !tbaa !2447
  %70 = icmp eq i64 %57, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %16, align 1, !tbaa !2448
  %72 = lshr i64 %57, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %17, align 1, !tbaa !2449
  %74 = lshr i64 %56, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %18, align 1, !tbaa !2450
  %79 = add i64 %106, 209
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %56, 104
  %81 = inttoptr i64 %57 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %106, 210
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %56, 112
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %96

block_40573c:                                     ; preds = %block_4057c2, %block_405710
  %87 = phi i64 [ %.pre, %block_405710 ], [ %293, %block_4057c2 ]
  %MEMORY.0 = phi %struct.Memory* [ %48, %block_405710 ], [ %285, %block_4057c2 ]
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -24
  store i64 %89, i64* %RDI, align 8, !tbaa !2428
  %90 = add i64 %88, -16
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  %91 = add i64 %87, -10028
  %92 = add i64 %87, 13
  %93 = load i64, i64* %RSP, align 8, !tbaa !2428
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95, align 8
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  %96 = tail call %struct.Memory* @sub_403010__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %91, %struct.Memory* %MEMORY.0)
  %97 = load i8, i8* %AL, align 1
  %98 = load i64, i64* %PC, align 8
  %99 = and i8 %97, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %100 = zext i8 %99 to i32
  %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #8
  %102 = trunc i32 %101 to i8
  %103 = xor i8 %102, 1
  store i8 %103, i8* %14, align 1, !tbaa !2446
  %104 = xor i8 %99, 1
  store i8 %104, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %105 = icmp eq i8 %104, 0
  %.v = select i1 %105, i64 13, i64 8
  %106 = add i64 %98, %.v
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  br i1 %105, label %block_405756, label %block_405751

block_405756:                                     ; preds = %block_40573c
  %107 = load i64, i64* %RBP, align 8
  %108 = add i64 %107, -24
  store i64 %108, i64* %RDI, align 8, !tbaa !2428
  %109 = add i64 %106, -10006
  %110 = add i64 %106, 9
  %111 = load i64, i64* %RSP, align 8, !tbaa !2428
  %112 = add i64 %111, -8
  %113 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %113, align 8
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  store i64 %109, i64* %PC, align 8, !tbaa !2428
  %114 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %109, %struct.Memory* %96)
  %115 = bitcast %union.anon* %3 to i64**
  %116 = load i64*, i64** %115, align 8
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 3
  store i64 %118, i64* %PC, align 8
  %119 = load i64, i64* %116, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = load i64, i64* %RBP, align 8
  %121 = add i64 %120, -40
  %122 = add i64 %117, 7
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %123, align 8
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -24
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %125 to i64*
  %129 = load i64, i64* %128, align 8
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = add i64 %124, -48
  %131 = add i64 %126, 8
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %129, i64* %132, align 8
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -48
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = add i64 %133, -56
  %140 = add i64 %135, 8
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %138, i64* %141, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_405776

block_405797:                                     ; preds = %block_405776
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -56
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = add i64 %262, -2071
  %145 = add i64 %262, 9
  %146 = load i64, i64* %RSP, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %145, i64* %148, align 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @sub_404f80__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %144, %struct.Memory* %246)
  %150 = load i64, i64* %RAX, align 8
  %151 = load i64, i64* %PC, align 8
  store i64 %150, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %151, -10080
  %153 = add i64 %151, 8
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %149)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -40
  %160 = load i64, i64* %PC, align 8
  store i64 %159, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %RAX, align 8
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = add i64 %160, -10056
  %163 = add i64 %160, 12
  %164 = load i64, i64* %RSP, align 8, !tbaa !2428
  %165 = add i64 %164, -8
  %166 = inttoptr i64 %165 to i64*
  store i64 %163, i64* %166, align 8
  store i64 %165, i64* %RSP, align 8, !tbaa !2428
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  %167 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %162, %struct.Memory* %157)
  %168 = load i64, i64* %RBP, align 8
  %169 = add i64 %168, -65
  %170 = load i8, i8* %AL, align 1
  %171 = load i64, i64* %PC, align 8
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %169 to i8*
  store i8 %170, i8* %173, align 1
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_4057b7

block_4057c7:                                     ; preds = %block_4057b7
  %174 = add i64 %224, -56
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = add i64 %236, -10119
  %176 = add i64 %236, 9
  %177 = load i64, i64* %RSP, align 8, !tbaa !2428
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %179, align 8
  store i64 %178, i64* %RSP, align 8, !tbaa !2428
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %180 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %175, %struct.Memory* %MEMORY.1)
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -48
  %183 = load i64, i64* %PC, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %184 = add i64 %181, -80
  %185 = load i64, i64* %RAX, align 8
  %186 = add i64 %183, 8
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  store i64 %185, i64* %187, align 8
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -10136
  %190 = add i64 %188, 5
  %191 = load i64, i64* %RSP, align 8, !tbaa !2428
  %192 = add i64 %191, -8
  %193 = inttoptr i64 %192 to i64*
  store i64 %190, i64* %193, align 8
  store i64 %192, i64* %RSP, align 8, !tbaa !2428
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  %194 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %189, %struct.Memory* %180)
  %195 = load i64, i64* %RBP, align 8
  %196 = add i64 %195, -80
  %197 = load i64, i64* %PC, align 8
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %196 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = add i64 %197, 7
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RCX, align 8, !tbaa !2428
  %204 = load i64*, i64** %115, align 8
  %205 = add i64 %197, 10
  store i64 %205, i64* %PC, align 8
  store i64 %203, i64* %204, align 8
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -48
  %208 = load i64, i64* %PC, align 8
  store i64 %207, i64* %RDI, align 8, !tbaa !2428
  %209 = add i64 %208, -2151
  %210 = add i64 %208, 9
  %211 = load i64, i64* %RSP, align 8, !tbaa !2428
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %210, i64* %213, align 8
  store i64 %212, i64* %RSP, align 8, !tbaa !2428
  store i64 %209, i64* %PC, align 8, !tbaa !2428
  %214 = tail call %struct.Memory* @sub_404f80__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %209, %struct.Memory* %194)
  %215 = load i64, i64* %RBP, align 8
  %216 = add i64 %215, -88
  %217 = load i64, i64* %RAX, align 8
  %218 = load i64, i64* %PC, align 8
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %216 to i64*
  store i64 %217, i64* %220, align 8
  %221 = load i64, i64* %PC, align 8
  %222 = add i64 %221, -126
  store i64 %222, i64* %PC, align 8, !tbaa !2428
  br label %block_405776

block_4057b7:                                     ; preds = %block_405797, %block_405792
  %223 = phi i64 [ %.pre2, %block_405797 ], [ %55, %block_405792 ]
  %MEMORY.1 = phi %struct.Memory* [ %167, %block_405797 ], [ %246, %block_405792 ]
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -65
  %226 = add i64 %223, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i8*
  %228 = load i8, i8* %227, align 1
  store i8 %228, i8* %AL, align 1, !tbaa !2453
  %229 = and i8 %228, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %230 = zext i8 %229 to i32
  %231 = tail call i32 @llvm.ctpop.i32(i32 %230) #8
  %232 = trunc i32 %231 to i8
  %233 = xor i8 %232, 1
  store i8 %233, i8* %14, align 1, !tbaa !2446
  %234 = xor i8 %229, 1
  store i8 %234, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %235 = icmp eq i8 %234, 0
  %.v4 = select i1 %235, i64 16, i64 11
  %236 = add i64 %223, %.v4
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  br i1 %235, label %block_4057c7, label %block_4057c2

block_405776:                                     ; preds = %block_4057c7, %block_405756
  %237 = phi i64 [ %.pre1, %block_405756 ], [ %222, %block_4057c7 ]
  %MEMORY.2 = phi %struct.Memory* [ %114, %block_405756 ], [ %214, %block_4057c7 ]
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -48
  store i64 %239, i64* %RDI, align 8, !tbaa !2428
  %240 = add i64 %238, -8
  store i64 %240, i64* %RSI, align 8, !tbaa !2428
  %241 = add i64 %237, -10086
  %242 = add i64 %237, 13
  %243 = load i64, i64* %RSP, align 8, !tbaa !2428
  %244 = add i64 %243, -8
  %245 = inttoptr i64 %244 to i64*
  store i64 %242, i64* %245, align 8
  store i64 %244, i64* %RSP, align 8, !tbaa !2428
  store i64 %241, i64* %PC, align 8, !tbaa !2428
  %246 = tail call %struct.Memory* @sub_403010__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %241, %struct.Memory* %MEMORY.2)
  %247 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2453
  %248 = load i8, i8* %AL, align 1
  %249 = and i8 %248, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %250 = zext i8 %249 to i32
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #8
  %252 = trunc i32 %251 to i8
  %253 = xor i8 %252, 1
  store i8 %253, i8* %14, align 1, !tbaa !2446
  %254 = xor i8 %249, 1
  store i8 %254, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %255 = load i64, i64* %RBP, align 8
  %256 = add i64 %255, -65
  %257 = add i64 %247, 9
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i8*
  store i8 0, i8* %258, align 1
  %259 = load i64, i64* %PC, align 8
  %260 = load i8, i8* %16, align 1, !tbaa !2448
  %261 = icmp eq i8 %260, 0
  %.v3 = select i1 %261, i64 11, i64 6
  %262 = add i64 %259, %.v3
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br i1 %261, label %block_405797, label %block_405792

block_4057c2:                                     ; preds = %block_4057b7
  %263 = add i64 %224, -48
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  %264 = add i64 %236, -10114
  %265 = add i64 %236, 64
  %266 = load i64, i64* %RSP, align 8, !tbaa !2428
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 %265, i64* %268, align 8
  store i64 %267, i64* %RSP, align 8, !tbaa !2428
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  %269 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %264, %struct.Memory* %MEMORY.1)
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -24
  %272 = load i64, i64* %PC, align 8
  store i64 %271, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %273 = add i64 %270, -40
  %274 = add i64 %272, 10
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RCX, align 8, !tbaa !2428
  %277 = load i64*, i64** %115, align 8
  %278 = add i64 %272, 13
  store i64 %278, i64* %PC, align 8
  store i64 %276, i64* %277, align 8
  %279 = load i64, i64* %PC, align 8
  %280 = add i64 %279, -10303
  %281 = add i64 %279, 5
  %282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_renamed_(%struct.State* nonnull %0, i64 %280, %struct.Memory* %269)
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -64
  %288 = load i64, i64* %RAX, align 8
  %289 = load i64, i64* %PC, align 8
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  store i64 %288, i64* %291, align 8
  %292 = load i64, i64* %PC, align 8
  %293 = add i64 %292, -220
  store i64 %293, i64* %PC, align 8, !tbaa !2428
  br label %block_40573c
}

; Function Attrs: noinline
define %struct.Memory* @sub_406350__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406350:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -56
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 48
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -24
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -24
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -32
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5
  store i64 %53, i64* %PC, align 8
  %54 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = load i64, i64* %54, align 1
  %56 = inttoptr i64 %51 to i64*
  store i64 %55, i64* %56, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_406365

block_40637f:                                     ; preds = %block_406365
  %57 = add i64 %171, -16
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %58 = add i64 %170, -10079
  %59 = add i64 %170, 11
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %160)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -48
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %66, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, -9986
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %71, %struct.Memory* %63)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -32
  %79 = load i64, i64* %PC, align 8
  store i64 %78, i64* %RDI, align 8, !tbaa !2428
  %80 = load i64, i64* %RAX, align 8
  store i64 %80, i64* %RSI, align 8, !tbaa !2428
  %81 = add i64 %79, -295
  %82 = add i64 %79, 12
  %83 = load i64, i64* %RSP, align 8, !tbaa !2428
  %84 = add i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85, align 8
  store i64 %84, i64* %RSP, align 8, !tbaa !2428
  store i64 %81, i64* %PC, align 8, !tbaa !2428
  %86 = tail call %struct.Memory* @sub_406270__ZplIdE12ValueWrapperIT_ERKS2_S4__renamed_(%struct.State* nonnull %0, i64 %81, %struct.Memory* %76)
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -40
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC, align 8
  %91 = load i64, i64* %54, align 1
  %92 = inttoptr i64 %88 to i64*
  store i64 %91, i64* %92, align 8
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -40
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = add i64 %93, -32
  %100 = add i64 %95, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  store i64 %98, i64* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, -75
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  br label %block_406365

block_40637a:                                     ; preds = %block_406365
  %104 = add i64 %171, -32
  %105 = add i64 %170, 63
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = add i64 %171, -8
  %109 = add i64 %170, 67
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  store i64 %107, i64* %110, align 8
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -8
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 5
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %54, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %118 = bitcast i64* %117 to double*
  store double 0.000000e+00, double* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSP, align 8
  %120 = add i64 %119, 48
  store i64 %120, i64* %RSP, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -49
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %14, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %21, align 1, !tbaa !2446
  %129 = xor i64 %119, 16
  %130 = xor i64 %129, %120
  %131 = lshr i64 %130, 4
  %132 = trunc i64 %131 to i8
  %133 = and i8 %132, 1
  store i8 %133, i8* %27, align 1, !tbaa !2447
  %134 = icmp eq i64 %120, 0
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %30, align 1, !tbaa !2448
  %136 = lshr i64 %120, 63
  %137 = trunc i64 %136 to i8
  store i8 %137, i8* %33, align 1, !tbaa !2449
  %138 = lshr i64 %119, 63
  %139 = xor i64 %136, %138
  %140 = add nuw nsw i64 %139, %136
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %39, align 1, !tbaa !2450
  %143 = add i64 %113, 10
  store i64 %143, i64* %PC, align 8
  %144 = add i64 %119, 56
  %145 = inttoptr i64 %120 to i64*
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %RBP, align 8, !tbaa !2428
  store i64 %144, i64* %RSP, align 8, !tbaa !2428
  %147 = add i64 %113, 11
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %144 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %150 = add i64 %119, 64
  store i64 %150, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %160

block_406365:                                     ; preds = %block_40637f, %block_406350
  %151 = phi i64 [ %.pre, %block_406350 ], [ %103, %block_40637f ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_406350 ], [ %86, %block_40637f ]
  %152 = load i64, i64* %RBP, align 8
  %153 = add i64 %152, -16
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %154 = add i64 %152, -24
  store i64 %154, i64* %RSI, align 8, !tbaa !2428
  %155 = add i64 %151, -9989
  %156 = add i64 %151, 13
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_403c60__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i8, i8* %AL, align 1
  %162 = load i64, i64* %PC, align 8
  %163 = and i8 %161, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %164 = zext i8 %163 to i32
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #8
  %166 = trunc i32 %165 to i8
  %167 = xor i8 %166, 1
  store i8 %167, i8* %21, align 1, !tbaa !2446
  %168 = xor i8 %163, 1
  store i8 %168, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %169 = icmp eq i8 %168, 0
  %.v = select i1 %169, i64 13, i64 8
  %170 = add i64 %162, %.v
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  %171 = load i64, i64* %RBP, align 8
  br i1 %169, label %block_40637f, label %block_40637a
}

; Function Attrs: noinline
define %struct.Memory* @sub_401bb0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401bb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %31, align 8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC, align 8
  %34 = load i64, i64* %5, align 8, !tbaa !2428
  %35 = add i64 %34, 8
  %36 = inttoptr i64 %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %35, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %32, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %34, 16
  store i64 %41, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402820__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402820:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402848

block_402891:                                     ; preds = %block_402848
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402858:                                     ; preds = %block_402848
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 3320
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403550__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 10087
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_404fd0__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 3626
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036a0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402848

block_402848:                                     ; preds = %block_402858, %block_402820
  %190 = phi i64 [ %.pre, %block_402820 ], [ %189, %block_402858 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402820 ], [ %157, %block_402858 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402858, label %block_402891
}

; Function Attrs: noinline
define %struct.Memory* @sub_406650__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406650:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, -18752
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_401d20__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_405a20__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405a20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %10, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -24
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, 8
  store i64 %64, i64* %RSI, align 8, !tbaa !2428
  %65 = icmp ugt i64 %63, -9
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %14, align 1, !tbaa !2432
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #8
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %21, align 1, !tbaa !2446
  %73 = xor i64 %63, %64
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %26, align 1, !tbaa !2447
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %29, align 1, !tbaa !2448
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %32, align 1, !tbaa !2449
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %38, align 1, !tbaa !2450
  %86 = add i64 %60, 12
  store i64 %86, i64* %PC, align 8
  store i64 %64, i64* %62, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405a44

block_405a52:                                     ; preds = %block_405a44
  %87 = add i64 %280, 4
  store i64 %87, i64* %PC, align 8
  %88 = load i64, i64* %249, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %280, 7
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = add i64 %246, -32
  %93 = add i64 %280, 11
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  store i64 %91, i64* %94, align 8
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -24
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = add i64 %95, -40
  %102 = add i64 %97, 8
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %100, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -40
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %104, -48
  %111 = add i64 %106, 8
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_405a6d

block_405ae8:                                     ; preds = %block_405a44
  %113 = load i64, i64* %RSP, align 8
  %114 = add i64 %113, 64
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %115 = icmp ugt i64 %113, -65
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %14, align 1, !tbaa !2432
  %117 = trunc i64 %114 to i32
  %118 = and i32 %117, 255
  %119 = tail call i32 @llvm.ctpop.i32(i32 %118) #8
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  store i8 %122, i8* %21, align 1, !tbaa !2446
  %123 = xor i64 %113, %114
  %124 = lshr i64 %123, 4
  %125 = trunc i64 %124 to i8
  %126 = and i8 %125, 1
  store i8 %126, i8* %26, align 1, !tbaa !2447
  %127 = icmp eq i64 %114, 0
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %29, align 1, !tbaa !2448
  %129 = lshr i64 %114, 63
  %130 = trunc i64 %129 to i8
  store i8 %130, i8* %32, align 1, !tbaa !2449
  %131 = lshr i64 %113, 63
  %132 = xor i64 %129, %131
  %133 = add nuw nsw i64 %132, %129
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %38, align 1, !tbaa !2450
  %136 = add i64 %280, 5
  store i64 %136, i64* %PC, align 8
  %137 = add i64 %113, 72
  %138 = inttoptr i64 %114 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RBP, align 8, !tbaa !2428
  store i64 %137, i64* %RSP, align 8, !tbaa !2428
  %140 = add i64 %280, 6
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %137 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  %143 = add i64 %113, 80
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_405aad:                                     ; preds = %block_405a9d
  %144 = add i64 %191, -48
  %145 = add i64 %203, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = add i64 %191, -40
  %149 = add i64 %203, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RCX, align 8, !tbaa !2428
  %152 = add i64 %203, 11
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %147 to i64*
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = add i64 %203, 14
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %151 to i64*
  store i64 %154, i64* %156, align 8
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -40
  %159 = load i64, i64* %PC, align 8
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = add i64 %162, -8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = icmp ugt i64 %162, 7
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %14, align 1, !tbaa !2432
  %166 = trunc i64 %163 to i32
  %167 = and i32 %166, 255
  %168 = tail call i32 @llvm.ctpop.i32(i32 %167) #8
  %169 = trunc i32 %168 to i8
  %170 = and i8 %169, 1
  %171 = xor i8 %170, 1
  store i8 %171, i8* %21, align 1, !tbaa !2446
  %172 = xor i64 %162, 16
  %173 = xor i64 %172, %163
  %174 = lshr i64 %173, 4
  %175 = trunc i64 %174 to i8
  %176 = and i8 %175, 1
  store i8 %176, i8* %26, align 1, !tbaa !2447
  %177 = icmp eq i64 %163, 0
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %29, align 1, !tbaa !2448
  %179 = lshr i64 %163, 63
  %180 = trunc i64 %179 to i8
  store i8 %180, i8* %32, align 1, !tbaa !2449
  %181 = lshr i64 %162, 63
  %182 = xor i64 %179, %181
  %183 = xor i64 %179, 1
  %184 = add nuw nsw i64 %182, %183
  %185 = icmp eq i64 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %38, align 1, !tbaa !2450
  %187 = add i64 %159, 12
  store i64 %187, i64* %PC, align 8
  store i64 %163, i64* %161, align 8
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -90
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_405a6d

block_405a9d:                                     ; preds = %block_405a6d, %block_405a82
  %190 = phi i64 [ %367, %block_405a6d ], [ %.pre2, %block_405a82 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_405a6d ], [ %319, %block_405a82 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -49
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i8*
  %195 = load i8, i8* %194, align 1
  store i8 %195, i8* %AL, align 1, !tbaa !2453
  %196 = and i8 %195, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %197 = zext i8 %196 to i32
  %198 = tail call i32 @llvm.ctpop.i32(i32 %197) #8
  %199 = trunc i32 %198 to i8
  %200 = xor i8 %199, 1
  store i8 %200, i8* %21, align 1, !tbaa !2446
  %201 = xor i8 %196, 1
  store i8 %201, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %202 = icmp eq i8 %201, 0
  %.v4 = select i1 %202, i64 16, i64 11
  %203 = add i64 %190, %.v4
  store i64 %203, i64* %PC, align 8, !tbaa !2428
  br i1 %202, label %block_405aad, label %block_405aa8

block_405aa8:                                     ; preds = %block_405a9d
  %204 = add i64 %191, -40
  %205 = add i64 %203, 40
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %191, -32
  %209 = add i64 %203, 44
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = add i64 %203, 47
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %207 to i64*
  store i64 %211, i64* %213, align 8
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -24
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = add i64 %219, 8
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp ugt i64 %219, -9
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %14, align 1, !tbaa !2432
  %223 = trunc i64 %220 to i32
  %224 = and i32 %223, 255
  %225 = tail call i32 @llvm.ctpop.i32(i32 %224) #8
  %226 = trunc i32 %225 to i8
  %227 = and i8 %226, 1
  %228 = xor i8 %227, 1
  store i8 %228, i8* %21, align 1, !tbaa !2446
  %229 = xor i64 %219, %220
  %230 = lshr i64 %229, 4
  %231 = trunc i64 %230 to i8
  %232 = and i8 %231, 1
  store i8 %232, i8* %26, align 1, !tbaa !2447
  %233 = icmp eq i64 %220, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %29, align 1, !tbaa !2448
  %235 = lshr i64 %220, 63
  %236 = trunc i64 %235 to i8
  store i8 %236, i8* %32, align 1, !tbaa !2449
  %237 = lshr i64 %219, 63
  %238 = xor i64 %235, %237
  %239 = add nuw nsw i64 %238, %235
  %240 = icmp eq i64 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %38, align 1, !tbaa !2450
  %242 = add i64 %216, 12
  store i64 %242, i64* %PC, align 8
  store i64 %220, i64* %218, align 8
  %243 = load i64, i64* %PC, align 8
  %244 = add i64 %243, -159
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  br label %block_405a44

block_405a44:                                     ; preds = %block_405aa8, %block_405a20
  %245 = phi i64 [ %.pre, %block_405a20 ], [ %244, %block_405aa8 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_405a20 ], [ %MEMORY.0, %block_405aa8 ]
  %246 = load i64, i64* %RBP, align 8
  %247 = add i64 %246, -24
  %248 = add i64 %245, 4
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = add i64 %246, -16
  %252 = add i64 %245, 8
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = sub i64 %250, %254
  %256 = icmp ult i64 %250, %254
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %14, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %21, align 1, !tbaa !2446
  %264 = xor i64 %254, %250
  %265 = xor i64 %264, %255
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %26, align 1, !tbaa !2447
  %269 = icmp eq i64 %255, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %29, align 1, !tbaa !2448
  %271 = lshr i64 %255, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %32, align 1, !tbaa !2449
  %273 = lshr i64 %250, 63
  %274 = lshr i64 %254, 63
  %275 = xor i64 %274, %273
  %276 = xor i64 %271, %273
  %277 = add nuw nsw i64 %276, %275
  %278 = icmp eq i64 %277, 2
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %38, align 1, !tbaa !2450
  %.v = select i1 %269, i64 164, i64 14
  %280 = add i64 %245, %.v
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  br i1 %269, label %block_405ae8, label %block_405a52

block_405a82:                                     ; preds = %block_405a6d
  %281 = load i64, i64* %RBP, align 8
  %282 = add i64 %281, -32
  store i64 %282, i64* %RDI, align 8, !tbaa !2428
  %283 = add i64 %281, -48
  %284 = add i64 %367, 8
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = add i64 %286, -8
  store i64 %287, i64* %RAX, align 8, !tbaa !2428
  %288 = icmp ugt i64 %286, 7
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %14, align 1, !tbaa !2432
  %290 = trunc i64 %287 to i32
  %291 = and i32 %290, 255
  %292 = tail call i32 @llvm.ctpop.i32(i32 %291) #8
  %293 = trunc i32 %292 to i8
  %294 = and i8 %293, 1
  %295 = xor i8 %294, 1
  store i8 %295, i8* %21, align 1, !tbaa !2446
  %296 = xor i64 %286, 16
  %297 = xor i64 %296, %287
  %298 = lshr i64 %297, 4
  %299 = trunc i64 %298 to i8
  %300 = and i8 %299, 1
  store i8 %300, i8* %26, align 1, !tbaa !2447
  %301 = icmp eq i64 %287, 0
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %29, align 1, !tbaa !2448
  %303 = lshr i64 %287, 63
  %304 = trunc i64 %303 to i8
  store i8 %304, i8* %32, align 1, !tbaa !2449
  %305 = lshr i64 %286, 63
  %306 = xor i64 %303, %305
  %307 = xor i64 %303, 1
  %308 = add nuw nsw i64 %306, %307
  %309 = icmp eq i64 %308, 2
  %310 = zext i1 %309 to i8
  store i8 %310, i8* %38, align 1, !tbaa !2450
  %311 = add i64 %367, 16
  store i64 %311, i64* %PC, align 8
  store i64 %287, i64* %285, align 8
  %312 = load i64, i64* %RAX, align 8
  %313 = load i64, i64* %PC, align 8
  store i64 %312, i64* %RSI, align 8, !tbaa !2428
  %314 = add i64 %313, -10370
  %315 = add i64 %313, 8
  %316 = load i64, i64* %RSP, align 8, !tbaa !2428
  %317 = add i64 %316, -8
  %318 = inttoptr i64 %317 to i64*
  store i64 %315, i64* %318, align 8
  store i64 %317, i64* %RSP, align 8, !tbaa !2428
  store i64 %314, i64* %PC, align 8, !tbaa !2428
  %319 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %314, %struct.Memory* %MEMORY.2)
  %320 = load i64, i64* %RBP, align 8
  %321 = add i64 %320, -49
  %322 = load i8, i8* %AL, align 1
  %323 = load i64, i64* %PC, align 8
  %324 = add i64 %323, 3
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %321 to i8*
  store i8 %322, i8* %325, align 1
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_405a9d

block_405a6d:                                     ; preds = %block_405aad, %block_405a52
  %326 = phi i64 [ %.pre1, %block_405a52 ], [ %189, %block_405aad ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_405a52 ], [ %MEMORY.0, %block_405aad ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -40
  %329 = add i64 %326, 8
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RDX, align 8, !tbaa !2428
  %332 = add i64 %327, -8
  %333 = add i64 %326, 12
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334, align 8
  %336 = sub i64 %331, %335
  %337 = icmp ult i64 %331, %335
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %14, align 1, !tbaa !2432
  %339 = trunc i64 %336 to i32
  %340 = and i32 %339, 255
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340) #8
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  store i8 %344, i8* %21, align 1, !tbaa !2446
  %345 = xor i64 %335, %331
  %346 = xor i64 %345, %336
  %347 = lshr i64 %346, 4
  %348 = trunc i64 %347 to i8
  %349 = and i8 %348, 1
  store i8 %349, i8* %26, align 1, !tbaa !2447
  %350 = icmp eq i64 %336, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %29, align 1, !tbaa !2448
  %352 = lshr i64 %336, 63
  %353 = trunc i64 %352 to i8
  store i8 %353, i8* %32, align 1, !tbaa !2449
  %354 = lshr i64 %331, 63
  %355 = lshr i64 %335, 63
  %356 = xor i64 %355, %354
  %357 = xor i64 %352, %354
  %358 = add nuw nsw i64 %357, %356
  %359 = icmp eq i64 %358, 2
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %38, align 1, !tbaa !2450
  %361 = add i64 %327, -49
  %362 = add i64 %326, 15
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i8*
  store i8 0, i8* %363, align 1
  %364 = load i64, i64* %PC, align 8
  %365 = load i8, i8* %29, align 1, !tbaa !2448
  %366 = icmp ne i8 %365, 0
  %.v3 = select i1 %366, i64 33, i64 6
  %367 = add i64 %364, %.v3
  store i64 %367, i64* %PC, align 8, !tbaa !2428
  %368 = icmp eq i8 %365, 1
  br i1 %368, label %block_405a9d, label %block_405a82
}

; Function Attrs: noinline
define %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405eb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_404fa0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404fa0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %35, %28
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2432
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #8
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2446
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2448
  store i8 0, i8* %41, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2447
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403180__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403180:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4031b0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_4062c0__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4062c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406190__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406190:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405280__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405280:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #8
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2447
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2448
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2450
  %53 = add i64 %16, 14
  store i64 %53, i64* %PC, align 8
  store i64 %23, i64* %21, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = add i64 %56, 5
  store i64 %60, i64* %PC, align 8
  %61 = load i64, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %61, 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RBP, align 8, !tbaa !2428
  store i64 %62, i64* %5, align 8, !tbaa !2428
  %65 = add i64 %56, 6
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %68 = add i64 %61, 16
  store i64 %68, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400730__GLOBAL__sub_I_stepanov_abstraction_cpp(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400730:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 95
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_400790___cxx_global_var_init_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 183
  %17 = add i64 %15, 5
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  store i64 %19, i64* %5, align 8, !tbaa !2428
  store i64 %16, i64* %PC, align 8, !tbaa !2428
  %21 = tail call %struct.Memory* @sub_4007f0___cxx_global_var_init_11_renamed_(%struct.State* nonnull %0, i64 %16, %struct.Memory* %14)
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 274
  %24 = add i64 %22, 5
  %25 = load i64, i64* %5, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %5, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_400850___cxx_global_var_init_12_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %21)
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 365
  %31 = add i64 %29, 5
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %31, i64* %34, align 8
  store i64 %33, i64* %5, align 8, !tbaa !2428
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %35 = tail call %struct.Memory* @sub_4008b0___cxx_global_var_init_13_renamed_(%struct.State* nonnull %0, i64 %30, %struct.Memory* %28)
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 456
  %38 = add i64 %36, 5
  %39 = load i64, i64* %5, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %38, i64* %41, align 8
  store i64 %40, i64* %5, align 8, !tbaa !2428
  store i64 %37, i64* %PC, align 8, !tbaa !2428
  %42 = tail call %struct.Memory* @sub_400910___cxx_global_var_init_14_renamed_(%struct.State* nonnull %0, i64 %37, %struct.Memory* %35)
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 483
  %45 = add i64 %43, 5
  %46 = load i64, i64* %5, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48, align 8
  store i64 %47, i64* %5, align 8, !tbaa !2428
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  %49 = tail call %struct.Memory* @sub_400930___cxx_global_var_init_15_renamed_(%struct.State* nonnull %0, i64 %44, %struct.Memory* %42)
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 510
  %52 = add i64 %50, 5
  %53 = load i64, i64* %5, align 8, !tbaa !2428
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55, align 8
  store i64 %54, i64* %5, align 8, !tbaa !2428
  store i64 %51, i64* %PC, align 8, !tbaa !2428
  %56 = tail call %struct.Memory* @sub_400950___cxx_global_var_init_16_renamed_(%struct.State* nonnull %0, i64 %51, %struct.Memory* %49)
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 537
  %59 = add i64 %57, 5
  %60 = load i64, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %5, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_400970___cxx_global_var_init_17_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %56)
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 564
  %66 = add i64 %64, 5
  %67 = load i64, i64* %5, align 8, !tbaa !2428
  %68 = add i64 %67, -8
  %69 = inttoptr i64 %68 to i64*
  store i64 %66, i64* %69, align 8
  store i64 %68, i64* %5, align 8, !tbaa !2428
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %70 = tail call %struct.Memory* @sub_400990___cxx_global_var_init_18_renamed_(%struct.State* nonnull %0, i64 %65, %struct.Memory* %63)
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 591
  %73 = add i64 %71, 5
  %74 = load i64, i64* %5, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %5, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_4009b0___cxx_global_var_init_19_renamed_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %70)
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 618
  %80 = add i64 %78, 5
  %81 = load i64, i64* %5, align 8, !tbaa !2428
  %82 = add i64 %81, -8
  %83 = inttoptr i64 %82 to i64*
  store i64 %80, i64* %83, align 8
  store i64 %82, i64* %5, align 8, !tbaa !2428
  store i64 %79, i64* %PC, align 8, !tbaa !2428
  %84 = tail call %struct.Memory* @sub_4009d0___cxx_global_var_init_20_renamed_(%struct.State* nonnull %0, i64 %79, %struct.Memory* %77)
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 645
  %87 = add i64 %85, 5
  %88 = load i64, i64* %5, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %87, i64* %90, align 8
  store i64 %89, i64* %5, align 8, !tbaa !2428
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  %91 = tail call %struct.Memory* @sub_4009f0___cxx_global_var_init_21_renamed_(%struct.State* nonnull %0, i64 %86, %struct.Memory* %84)
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 672
  %94 = add i64 %92, 5
  %95 = load i64, i64* %5, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %94, i64* %97, align 8
  store i64 %96, i64* %5, align 8, !tbaa !2428
  store i64 %93, i64* %PC, align 8, !tbaa !2428
  %98 = tail call %struct.Memory* @sub_400a10___cxx_global_var_init_22_renamed_(%struct.State* nonnull %0, i64 %93, %struct.Memory* %91)
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 699
  %101 = add i64 %99, 5
  %102 = load i64, i64* %5, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104, align 8
  store i64 %103, i64* %5, align 8, !tbaa !2428
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %105 = tail call %struct.Memory* @sub_400a30___cxx_global_var_init_23_renamed_(%struct.State* nonnull %0, i64 %100, %struct.Memory* %98)
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 726
  %108 = add i64 %106, 5
  %109 = load i64, i64* %5, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %5, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_400a50___cxx_global_var_init_24_renamed_(%struct.State* nonnull %0, i64 %107, %struct.Memory* %105)
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 753
  %115 = add i64 %113, 5
  %116 = load i64, i64* %5, align 8, !tbaa !2428
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i64*
  store i64 %115, i64* %118, align 8
  store i64 %117, i64* %5, align 8, !tbaa !2428
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  %119 = tail call %struct.Memory* @sub_400a70___cxx_global_var_init_25_renamed_(%struct.State* nonnull %0, i64 %114, %struct.Memory* %112)
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 1
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %5, align 8, !tbaa !2428
  %123 = add i64 %122, 8
  %124 = inttoptr i64 %122 to i64*
  %125 = load i64, i64* %124, align 8
  store i64 %125, i64* %RBP, align 8, !tbaa !2428
  store i64 %123, i64* %5, align 8, !tbaa !2428
  %126 = add i64 %120, 2
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %123 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %129 = add i64 %122, 16
  store i64 %129, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %119
}

; Function Attrs: noinline
define %struct.Memory* @sub_406560__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406560:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406590__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b00_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 6328568, i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %RSI, align 8
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %9, -6328568
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %18 = ashr i64 %11, 3
  %19 = lshr i64 %18, 63
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  %20 = add nsw i64 %19, %18
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = ashr i64 %20, 1
  store i64 %23, i64* %RSI, align 8, !tbaa !2428
  store i8 %22, i8* %12, align 1, !tbaa !2453
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #8
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %13, align 1, !tbaa !2453
  store i8 0, i8* %14, align 1, !tbaa !2453
  %30 = icmp eq i64 %23, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %15, align 1, !tbaa !2453
  %32 = lshr i64 %23, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %16, align 1, !tbaa !2453
  store i8 0, i8* %17, align 1, !tbaa !2453
  %.v = select i1 %30, i64 50, i64 29
  %34 = add i64 %10, %.v
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br i1 %30, label %block_400b38, label %block_400b23

block_400b38:                                     ; preds = %block_400b23, %block_400b00
  %35 = phi i64 [ %42, %block_400b23 ], [ %34, %block_400b00 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %8, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %35, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %6 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %7, 16
  store i64 %41, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400b23:                                     ; preds = %block_400b00
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %42 = add i64 %34, 21
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  br label %block_400b38
}

; Function Attrs: noinline
define %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404680:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 118
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_404710__ZppIdER14PointerWrapperIT_ES3__renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #8
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2446
  %94 = xor i64 %84, %85
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2447
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2448
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2449
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2450
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline
define %struct.Memory* @sub_405590__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405590:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #8
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2447
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2448
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2450
  %53 = add i64 %16, 14
  store i64 %53, i64* %PC, align 8
  store i64 %23, i64* %21, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = add i64 %56, 5
  store i64 %60, i64* %PC, align 8
  %61 = load i64, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %61, 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RBP, align 8, !tbaa !2428
  store i64 %62, i64* %5, align 8, !tbaa !2428
  %65 = add i64 %56, 6
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %68 = add i64 %61, 16
  store i64 %68, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401220_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401220:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -584
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = icmp ult i64 %10, 576
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !2446
  %24 = xor i64 %10, %13
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %10, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = add i64 %9, -40
  store i64 %41, i64* %RAX, align 8, !tbaa !2428
  %42 = add i64 %9, -48
  store i64 %42, i64* %RCX, align 8, !tbaa !2428
  %43 = bitcast %union.VectorReg* %6 to i8*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %45 = bitcast %union.VectorReg* %6 to i32*
  store i32 0, i32* %45, align 1, !tbaa !2456
  %46 = getelementptr inbounds i8, i8* %43, i64 4
  %47 = bitcast i8* %46 to i32*
  store i32 0, i32* %47, align 1, !tbaa !2456
  %48 = bitcast i64* %44 to i32*
  store i32 0, i32* %48, align 1, !tbaa !2456
  %49 = getelementptr inbounds i8, i8* %43, i64 12
  %50 = bitcast i8* %49 to i32*
  store i32 0, i32* %50, align 1, !tbaa !2456
  %51 = add i64 %9, -12
  %52 = add i64 %12, 28
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %51 to i32*
  store i32 0, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -8
  %56 = load i32, i32* %EDI, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %RSI, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -24
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, 5
  store i64 %69, i64* %PC, align 8
  %70 = bitcast %union.VectorReg* %6 to double*
  %71 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %72 = load i64, i64* %71, align 1
  %73 = inttoptr i64 %67 to i64*
  store i64 %72, i64* %73, align 8
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -40
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 5
  store i64 %77, i64* %PC, align 8
  %78 = load i64, i64* %71, align 1
  %79 = inttoptr i64 %75 to i64*
  store i64 %78, i64* %79, align 8
  %80 = load i64, i64* %RAX, align 8
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX, align 8
  store i64 %82, i64* %RSI, align 8, !tbaa !2428
  %83 = add i64 %81, 2770
  %84 = add i64 %81, 11
  %85 = load i64, i64* %RSP, align 8, !tbaa !2428
  %86 = add i64 %85, -8
  %87 = inttoptr i64 %86 to i64*
  store i64 %84, i64* %87, align 8
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  %88 = tail call %struct.Memory* @sub_401d20__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %83, %struct.Memory* %2)
  %89 = load i64, i64* %RBP, align 8
  %90 = add i64 %89, -48
  %91 = load i64, i64* %PC, align 8
  store i64 %90, i64* %RDI, align 8, !tbaa !2428
  %92 = add i64 %89, -56
  store i64 %92, i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %45, align 1, !tbaa !2456
  store i32 0, i32* %47, align 1, !tbaa !2456
  store i32 0, i32* %48, align 1, !tbaa !2456
  store i32 0, i32* %50, align 1, !tbaa !2456
  %93 = add i64 %91, 16
  store i64 %93, i64* %PC, align 8
  %94 = load i64, i64* %71, align 1
  %95 = inttoptr i64 %92 to i64*
  store i64 %94, i64* %95, align 8
  %96 = load i64, i64* %PC, align 8
  %97 = add i64 %96, 2775
  %98 = add i64 %96, 5
  %99 = load i64, i64* %RSP, align 8, !tbaa !2428
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 %98, i64* %101, align 8
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  store i64 %97, i64* %PC, align 8, !tbaa !2428
  %102 = tail call %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %97, %struct.Memory* %88)
  %103 = load i64, i64* %RBP, align 8
  %104 = add i64 %103, -8
  %105 = load i64, i64* %PC, align 8
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %104 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = add i32 %108, -1
  %110 = icmp eq i32 %108, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %16, align 1, !tbaa !2432
  %112 = and i32 %109, 255
  %113 = tail call i32 @llvm.ctpop.i32(i32 %112) #8
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  store i8 %116, i8* %23, align 1, !tbaa !2446
  %117 = xor i32 %108, %109
  %118 = lshr i32 %117, 4
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  store i8 %120, i8* %28, align 1, !tbaa !2447
  %121 = icmp eq i32 %109, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %31, align 1, !tbaa !2448
  %123 = lshr i32 %109, 31
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %34, align 1, !tbaa !2449
  %125 = lshr i32 %108, 31
  %126 = xor i32 %123, %125
  %127 = add nuw nsw i32 %126, %125
  %128 = icmp eq i32 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %40, align 1, !tbaa !2450
  %130 = icmp ne i8 %124, 0
  %131 = xor i1 %130, %128
  %132 = or i1 %121, %131
  %.v = select i1 %132, i64 30, i64 10
  %133 = add i64 %105, %.v
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  br i1 %132, label %block_40128c, label %block_401278

block_401278:                                     ; preds = %block_401220
  %134 = add i64 %103, -16
  %135 = add i64 %133, 4
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %137, 8
  %139 = add i64 %133, 8
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i64*
  %141 = load i64, i64* %140, align 8
  store i64 %141, i64* %RDI, align 8, !tbaa !2428
  %142 = add i64 %133, -2936
  %143 = add i64 %133, 13
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  %147 = tail call fastcc %struct.Memory* @ext_400700_atoi(%struct.State* nonnull %0, %struct.Memory* %102)
  %148 = load i32, i32* %EAX, align 4
  %149 = load i64, i64* %PC, align 8
  %150 = add i64 %149, 7
  store i64 %150, i64* %PC, align 8
  store i32 %148, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %.pre = load i64, i64* %RBP, align 8
  br label %block_40128c

block_40128c:                                     ; preds = %block_401278, %block_401220
  %151 = phi i64 [ %133, %block_401220 ], [ %150, %block_401278 ]
  %152 = phi i64 [ %103, %block_401220 ], [ %.pre, %block_401278 ]
  %MEMORY.0 = phi %struct.Memory* [ %102, %block_401220 ], [ %147, %block_401278 ]
  %153 = add i64 %152, -8
  %154 = add i64 %151, 4
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %153 to i32*
  %156 = load i32, i32* %155, align 4
  %157 = add i32 %156, -2
  %158 = icmp ult i32 %156, 2
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %16, align 1, !tbaa !2432
  %160 = and i32 %157, 255
  %161 = tail call i32 @llvm.ctpop.i32(i32 %160) #8
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  %164 = xor i8 %163, 1
  store i8 %164, i8* %23, align 1, !tbaa !2446
  %165 = xor i32 %156, %157
  %166 = lshr i32 %165, 4
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %28, align 1, !tbaa !2447
  %169 = icmp eq i32 %157, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %31, align 1, !tbaa !2448
  %171 = lshr i32 %157, 31
  %172 = trunc i32 %171 to i8
  store i8 %172, i8* %34, align 1, !tbaa !2449
  %173 = lshr i32 %156, 31
  %174 = xor i32 %171, %173
  %175 = add nuw nsw i32 %174, %173
  %176 = icmp eq i32 %175, 2
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %40, align 1, !tbaa !2450
  %178 = icmp ne i8 %172, 0
  %179 = xor i1 %178, %176
  %180 = or i1 %169, %179
  %.v4 = select i1 %180, i64 32, i64 10
  %181 = add i64 %151, %.v4
  store i64 %181, i64* %PC, align 8, !tbaa !2428
  br i1 %180, label %block_40128c.block_4012ac_crit_edge, label %block_401296

block_40128c.block_4012ac_crit_edge:              ; preds = %block_40128c
  %.pre1 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
  br label %block_4012ac

block_401296:                                     ; preds = %block_40128c
  %182 = add i64 %152, -16
  %183 = add i64 %181, 4
  store i64 %183, i64* %PC, align 8
  %184 = inttoptr i64 %182 to i64*
  %185 = load i64, i64* %184, align 8
  store i64 %185, i64* %RAX, align 8, !tbaa !2428
  %186 = add i64 %185, 16
  %187 = add i64 %181, 8
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %186 to i64*
  %189 = load i64, i64* %188, align 8
  store i64 %189, i64* %RDI, align 8, !tbaa !2428
  %190 = add i64 %181, -3094
  %191 = add i64 %181, 13
  %192 = load i64, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %191, i64* %194, align 8
  store i64 %193, i64* %RSP, align 8, !tbaa !2428
  store i64 %190, i64* %PC, align 8, !tbaa !2428
  %195 = tail call fastcc %struct.Memory* @ext_620900_atof(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %196 = load i64, i64* %PC, align 8
  %197 = add i64 %196, 9
  store i64 %197, i64* %PC, align 8
  %198 = load double, double* %70, align 1
  store double %198, double* bitcast (%init_value_type* @init_value to double*), align 8
  br label %block_4012ac

block_4012ac:                                     ; preds = %block_40128c.block_4012ac_crit_edge, %block_401296
  %199 = phi double [ %.pre1, %block_40128c.block_4012ac_crit_edge ], [ %198, %block_401296 ]
  %200 = phi i64 [ %181, %block_40128c.block_4012ac_crit_edge ], [ %197, %block_401296 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_40128c.block_4012ac_crit_edge ], [ %195, %block_401296 ]
  %201 = tail call double @llvm.trunc.f64(double %199) #8
  %202 = tail call double @llvm.fabs.f64(double %201) #8
  %203 = fcmp ogt double %202, 0x41DFFFFFFFC00000
  %204 = fptosi double %201 to i32
  %205 = zext i32 %204 to i64
  %206 = select i1 %203, i64 2147483648, i64 %205
  %207 = trunc i64 %206 to i32
  %208 = add i32 %207, 123
  %209 = zext i32 %208 to i64
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = icmp ugt i32 %207, -124
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %16, align 1, !tbaa !2432
  %212 = and i32 %208, 255
  %213 = tail call i32 @llvm.ctpop.i32(i32 %212) #8
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  store i8 %216, i8* %23, align 1, !tbaa !2446
  %217 = xor i32 %207, 16
  %218 = xor i32 %217, %208
  %219 = lshr i32 %218, 4
  %220 = trunc i32 %219 to i8
  %221 = and i8 %220, 1
  store i8 %221, i8* %28, align 1, !tbaa !2447
  %222 = icmp eq i32 %208, 0
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %31, align 1, !tbaa !2448
  %224 = lshr i32 %208, 31
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %34, align 1, !tbaa !2449
  %226 = lshr i32 %207, 31
  %227 = xor i32 %224, %226
  %228 = add nuw nsw i32 %227, %224
  %229 = icmp eq i32 %228, 2
  %230 = zext i1 %229 to i8
  store i8 %230, i8* %40, align 1, !tbaa !2450
  store i64 %209, i64* %RDI, align 8, !tbaa !2428
  %231 = add i64 %200, -3036
  %232 = add i64 %200, 19
  %233 = load i64, i64* %RSP, align 8, !tbaa !2428
  %234 = add i64 %233, -8
  %235 = inttoptr i64 %234 to i64*
  store i64 %232, i64* %235, align 8
  store i64 %234, i64* %RSP, align 8, !tbaa !2428
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  %236 = tail call fastcc %struct.Memory* @ext_620930_srand(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %237 = load i64, i64* %PC, align 8
  %238 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %238, i64* %RDI, align 8, !tbaa !2428
  %239 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %239, i64* %RSI, align 8, !tbaa !2428
  %240 = load i64, i64* bitcast (%init_value_type* @init_value to i64*), align 8
  store i64 %240, i64* %71, align 1, !tbaa !2451
  %241 = bitcast i64* %44 to double*
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %242 = add i64 %237, 2737
  %243 = add i64 %237, 30
  %244 = load i64, i64* %RSP, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %243, i64* %246, align 8
  store i64 %245, i64* %RSP, align 8, !tbaa !2428
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  %247 = tail call %struct.Memory* @sub_401d70__ZN9benchmark4fillIPddEEvT_S2_T0__renamed_(%struct.State* nonnull %0, i64 %242, %struct.Memory* %236)
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -64
  %250 = load i64, i64* %PC, align 8
  store i64 %249, i64* %RDI, align 8, !tbaa !2428
  store i64 ptrtoint (%init_value_type* @init_value to i64), i64* %RSI, align 8, !tbaa !2428
  %251 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %251, i64* %RCX, align 8, !tbaa !2428
  %252 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %252, i64* %RDX, align 8, !tbaa !2428
  %253 = add i64 %248, -544
  %254 = add i64 %250, 37
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i64*
  store i64 %252, i64* %255, align 8
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -552
  %258 = load i64, i64* %RCX, align 8
  %259 = load i64, i64* %PC, align 8
  %260 = add i64 %259, 7
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %257 to i64*
  store i64 %258, i64* %261, align 8
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, 2583
  %264 = add i64 %262, 5
  %265 = load i64, i64* %RSP, align 8, !tbaa !2428
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %264, i64* %267, align 8
  store i64 %266, i64* %RSP, align 8, !tbaa !2428
  store i64 %263, i64* %PC, align 8, !tbaa !2428
  %268 = tail call %struct.Memory* @sub_401d20__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %263, %struct.Memory* %247)
  %269 = load i64, i64* %RBP, align 8
  %270 = add i64 %269, -64
  %271 = load i64, i64* %PC, align 8
  %272 = add i64 %271, 5
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %270 to i64*
  %274 = load i64, i64* %273, align 8
  store i64 %274, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %275 = add i64 %269, -552
  %276 = add i64 %271, 12
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %275 to i64*
  %278 = load i64, i64* %277, align 8
  store i64 %278, i64* %RDI, align 8, !tbaa !2428
  %279 = add i64 %269, -544
  %280 = add i64 %271, 19
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %279 to i64*
  %282 = load i64, i64* %281, align 8
  store i64 %282, i64* %RSI, align 8, !tbaa !2428
  %283 = add i64 %271, 2722
  %284 = add i64 %271, 24
  %285 = load i64, i64* %RSP, align 8, !tbaa !2428
  %286 = add i64 %285, -8
  %287 = inttoptr i64 %286 to i64*
  store i64 %284, i64* %287, align 8
  store i64 %286, i64* %RSP, align 8, !tbaa !2428
  store i64 %283, i64* %PC, align 8, !tbaa !2428
  %288 = tail call %struct.Memory* @sub_401db0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__renamed_(%struct.State* nonnull %0, i64 %283, %struct.Memory* %268)
  %289 = load i64, i64* %RBP, align 8
  %290 = add i64 %289, -72
  %291 = load i64, i64* %PC, align 8
  store i64 %290, i64* %RDI, align 8, !tbaa !2428
  store i64 ptrtoint (%init_value_type* @init_value to i64), i64* %RSI, align 8, !tbaa !2428
  %292 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %292, i64* %RCX, align 8, !tbaa !2428
  %293 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %293, i64* %RDX, align 8, !tbaa !2428
  %294 = add i64 %289, -560
  %295 = add i64 %291, 37
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %294 to i64*
  store i64 %293, i64* %296, align 8
  %297 = load i64, i64* %RBP, align 8
  %298 = add i64 %297, -568
  %299 = load i64, i64* %RCX, align 8
  %300 = load i64, i64* %PC, align 8
  %301 = add i64 %300, 7
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %298 to i64*
  store i64 %299, i64* %302, align 8
  %303 = load i64, i64* %PC, align 8
  %304 = add i64 %303, 2542
  %305 = add i64 %303, 5
  %306 = load i64, i64* %RSP, align 8, !tbaa !2428
  %307 = add i64 %306, -8
  %308 = inttoptr i64 %307 to i64*
  store i64 %305, i64* %308, align 8
  store i64 %307, i64* %RSP, align 8, !tbaa !2428
  store i64 %304, i64* %PC, align 8, !tbaa !2428
  %309 = tail call %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %304, %struct.Memory* %288)
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -72
  %312 = load i64, i64* %PC, align 8
  %313 = add i64 %312, 5
  store i64 %313, i64* %PC, align 8
  %314 = inttoptr i64 %311 to i64*
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %316 = add i64 %310, -568
  %317 = add i64 %312, 12
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %316 to i64*
  %319 = load i64, i64* %318, align 8
  store i64 %319, i64* %RDI, align 8, !tbaa !2428
  %320 = add i64 %310, -560
  %321 = add i64 %312, 19
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %320 to i64*
  %323 = load i64, i64* %322, align 8
  store i64 %323, i64* %RSI, align 8, !tbaa !2428
  %324 = add i64 %312, 2713
  %325 = add i64 %312, 24
  %326 = load i64, i64* %RSP, align 8, !tbaa !2428
  %327 = add i64 %326, -8
  %328 = inttoptr i64 %327 to i64*
  store i64 %325, i64* %328, align 8
  store i64 %327, i64* %RSP, align 8, !tbaa !2428
  store i64 %324, i64* %PC, align 8, !tbaa !2428
  %329 = tail call %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__renamed_(%struct.State* nonnull %0, i64 %324, %struct.Memory* %309)
  %330 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 353), i64* %RDX, align 8, !tbaa !2428
  %331 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %332, i64* %RSI, align 8, !tbaa !2428
  %333 = load i64, i64* %RBP, align 8
  %334 = add i64 %333, -24
  %335 = add i64 %330, 31
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %334 to i64*
  %337 = load i64, i64* %336, align 8
  store i64 %337, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %338 = add i64 %330, 2753
  %339 = add i64 %330, 36
  %340 = load i64, i64* %RSP, align 8, !tbaa !2428
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %339, i64* %342, align 8
  store i64 %341, i64* %RSP, align 8, !tbaa !2428
  store i64 %338, i64* %PC, align 8, !tbaa !2428
  %343 = tail call %struct.Memory* @sub_401e30__Z15test_accumulateIPddEvT_S1_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %338, %struct.Memory* %329)
  %344 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 383), i64* %RDX, align 8, !tbaa !2428
  %345 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %346 = load i64, i64* %RBP, align 8
  %347 = add i64 %346, -80
  %348 = add i64 %344, 22
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %347 to i64*
  store i64 %345, i64* %349, align 8
  %350 = load i64, i64* %PC, align 8
  %351 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %351, i64* %RCX, align 8, !tbaa !2428
  %352 = load i64, i64* %RBP, align 8
  %353 = add i64 %352, -88
  %354 = add i64 %350, 12
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %353 to i64*
  store i64 %351, i64* %355, align 8
  %356 = load i64, i64* %RBP, align 8
  %357 = add i64 %356, -24
  %358 = load i64, i64* %PC, align 8
  %359 = add i64 %358, 5
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360, align 8
  store i64 %361, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %362 = add i64 %356, -80
  %363 = add i64 %358, 9
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %362 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %RDI, align 8, !tbaa !2428
  %366 = add i64 %356, -88
  %367 = add i64 %358, 13
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i64*
  %369 = load i64, i64* %368, align 8
  store i64 %369, i64* %RSI, align 8, !tbaa !2428
  %370 = add i64 %358, 2779
  %371 = add i64 %358, 18
  %372 = load i64, i64* %RSP, align 8, !tbaa !2428
  %373 = add i64 %372, -8
  %374 = inttoptr i64 %373 to i64*
  store i64 %371, i64* %374, align 8
  store i64 %373, i64* %RSP, align 8, !tbaa !2428
  store i64 %370, i64* %PC, align 8, !tbaa !2428
  %375 = tail call %struct.Memory* @sub_401e90__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %370, %struct.Memory* %343)
  %376 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 419), i64* %RDX, align 8, !tbaa !2428
  %377 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %377, i64* %RDI, align 8, !tbaa !2428
  %378 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %378, i64* %RSI, align 8, !tbaa !2428
  %379 = load i64, i64* %RBP, align 8
  %380 = add i64 %379, -32
  %381 = add i64 %376, 30
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %380 to i64*
  %383 = load i64, i64* %382, align 8
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = add i64 %379, -96
  %385 = add i64 %376, 34
  store i64 %385, i64* %PC, align 8
  %386 = inttoptr i64 %384 to i64*
  store i64 %383, i64* %386, align 8
  %387 = load i64, i64* %RBP, align 8
  %388 = add i64 %387, -96
  %389 = load i64, i64* %PC, align 8
  %390 = add i64 %389, 5
  store i64 %390, i64* %PC, align 8
  %391 = inttoptr i64 %388 to i64*
  %392 = load i64, i64* %391, align 8
  store i64 %392, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %393 = add i64 %389, 2839
  %394 = add i64 %389, 10
  %395 = load i64, i64* %RSP, align 8, !tbaa !2428
  %396 = add i64 %395, -8
  %397 = inttoptr i64 %396 to i64*
  store i64 %394, i64* %397, align 8
  store i64 %396, i64* %RSP, align 8, !tbaa !2428
  store i64 %393, i64* %PC, align 8, !tbaa !2428
  %398 = tail call %struct.Memory* @sub_401f00__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %393, %struct.Memory* %375)
  %399 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 461), i64* %RDX, align 8, !tbaa !2428
  %400 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %401 = load i64, i64* %RBP, align 8
  %402 = add i64 %401, -104
  %403 = add i64 %399, 22
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %402 to i64*
  store i64 %400, i64* %404, align 8
  %405 = load i64, i64* %PC, align 8
  %406 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %406, i64* %RCX, align 8, !tbaa !2428
  %407 = load i64, i64* %RBP, align 8
  %408 = add i64 %407, -112
  %409 = add i64 %405, 12
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %408 to i64*
  store i64 %406, i64* %410, align 8
  %411 = load i64, i64* %RBP, align 8
  %412 = add i64 %411, -32
  %413 = load i64, i64* %PC, align 8
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %412 to i64*
  %416 = load i64, i64* %415, align 8
  store i64 %416, i64* %RCX, align 8, !tbaa !2428
  %417 = add i64 %411, -120
  %418 = add i64 %413, 8
  store i64 %418, i64* %PC, align 8
  %419 = inttoptr i64 %417 to i64*
  store i64 %416, i64* %419, align 8
  %420 = load i64, i64* %RBP, align 8
  %421 = add i64 %420, -104
  %422 = load i64, i64* %PC, align 8
  %423 = add i64 %422, 4
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %421 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %RDI, align 8, !tbaa !2428
  %426 = add i64 %420, -112
  %427 = add i64 %422, 8
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %RSI, align 8, !tbaa !2428
  %430 = add i64 %420, -120
  %431 = add i64 %422, 13
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %430 to i64*
  %433 = load i64, i64* %432, align 8
  store i64 %433, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %434 = add i64 %422, 2915
  %435 = add i64 %422, 18
  %436 = load i64, i64* %RSP, align 8, !tbaa !2428
  %437 = add i64 %436, -8
  %438 = inttoptr i64 %437 to i64*
  store i64 %435, i64* %438, align 8
  store i64 %437, i64* %RSP, align 8, !tbaa !2428
  store i64 %434, i64* %PC, align 8, !tbaa !2428
  %439 = tail call %struct.Memory* @sub_401f80__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %434, %struct.Memory* %398)
  %440 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 509), i64* %RDX, align 8, !tbaa !2428
  %441 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %441, i64* %RDI, align 8, !tbaa !2428
  %442 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %442, i64* %RSI, align 8, !tbaa !2428
  %443 = load i64, i64* %RBP, align 8
  %444 = add i64 %443, -48
  %445 = add i64 %440, 30
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %444 to i64*
  %447 = load i64, i64* %446, align 8
  store i64 %447, i64* %RCX, align 8, !tbaa !2428
  %448 = add i64 %443, -128
  %449 = add i64 %440, 34
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i64*
  store i64 %447, i64* %450, align 8
  %451 = load i64, i64* %RBP, align 8
  %452 = add i64 %451, -128
  %453 = load i64, i64* %PC, align 8
  %454 = add i64 %453, 5
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %452 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %457 = add i64 %453, 3007
  %458 = add i64 %453, 10
  %459 = load i64, i64* %RSP, align 8, !tbaa !2428
  %460 = add i64 %459, -8
  %461 = inttoptr i64 %460 to i64*
  store i64 %458, i64* %461, align 8
  store i64 %460, i64* %RSP, align 8, !tbaa !2428
  store i64 %457, i64* %PC, align 8, !tbaa !2428
  %462 = tail call %struct.Memory* @sub_402010__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %457, %struct.Memory* %439)
  %463 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 553), i64* %RDX, align 8, !tbaa !2428
  %464 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %465 = load i64, i64* %RBP, align 8
  %466 = add i64 %465, -136
  %467 = add i64 %463, 25
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %468, align 8
  %469 = load i64, i64* %PC, align 8
  %470 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %470, i64* %RCX, align 8, !tbaa !2428
  %471 = load i64, i64* %RBP, align 8
  %472 = add i64 %471, -144
  %473 = add i64 %469, 15
  store i64 %473, i64* %PC, align 8
  %474 = inttoptr i64 %472 to i64*
  store i64 %470, i64* %474, align 8
  %475 = load i64, i64* %RBP, align 8
  %476 = add i64 %475, -48
  %477 = load i64, i64* %PC, align 8
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC, align 8
  %479 = inttoptr i64 %476 to i64*
  %480 = load i64, i64* %479, align 8
  store i64 %480, i64* %RCX, align 8, !tbaa !2428
  %481 = add i64 %475, -152
  %482 = add i64 %477, 11
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i64*
  store i64 %480, i64* %483, align 8
  %484 = load i64, i64* %RBP, align 8
  %485 = add i64 %484, -136
  %486 = load i64, i64* %PC, align 8
  %487 = add i64 %486, 7
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %485 to i64*
  %489 = load i64, i64* %488, align 8
  store i64 %489, i64* %RDI, align 8, !tbaa !2428
  %490 = add i64 %484, -144
  %491 = add i64 %486, 14
  store i64 %491, i64* %PC, align 8
  %492 = inttoptr i64 %490 to i64*
  %493 = load i64, i64* %492, align 8
  store i64 %493, i64* %RSI, align 8, !tbaa !2428
  %494 = add i64 %484, -152
  %495 = add i64 %486, 22
  store i64 %495, i64* %PC, align 8
  %496 = inttoptr i64 %494 to i64*
  %497 = load i64, i64* %496, align 8
  store i64 %497, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %498 = add i64 %486, 3074
  %499 = add i64 %486, 27
  %500 = load i64, i64* %RSP, align 8, !tbaa !2428
  %501 = add i64 %500, -8
  %502 = inttoptr i64 %501 to i64*
  store i64 %499, i64* %502, align 8
  store i64 %501, i64* %RSP, align 8, !tbaa !2428
  store i64 %498, i64* %PC, align 8, !tbaa !2428
  %503 = tail call %struct.Memory* @sub_402090__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %498, %struct.Memory* %462)
  %504 = load i64, i64* %PC, align 8
  %505 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %506 = zext i32 %505 to i64
  store i64 %506, i64* %R8, align 8, !tbaa !2428
  %507 = load i64, i64* %RBP, align 8
  %508 = add i64 %507, -572
  %509 = add i64 %504, 19
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to i32*
  store i32 2000, i32* %510, align 4
  %511 = load i32, i32* %R8D, align 4
  %512 = zext i32 %511 to i64
  %513 = load i64, i64* %PC, align 8
  store i64 %512, i64* %RAX, align 8, !tbaa !2428
  %514 = sext i32 %511 to i64
  %515 = lshr i64 %514, 32
  store i64 %515, i64* %RDX, align 8, !tbaa !2428
  %516 = load i64, i64* %RBP, align 8
  %517 = add i64 %516, -572
  %518 = add i64 %513, 11
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %517 to i32*
  %520 = load i32, i32* %519, align 4
  %521 = zext i32 %520 to i64
  store i64 %521, i64* %R8, align 8, !tbaa !2428
  %522 = add i64 %513, 14
  store i64 %522, i64* %PC, align 8
  %523 = sext i32 %520 to i64
  %524 = shl nuw i64 %515, 32
  %525 = or i64 %524, %512
  %526 = sdiv i64 %525, %523
  %527 = shl i64 %526, 32
  %528 = ashr exact i64 %527, 32
  %529 = icmp eq i64 %526, %528
  br i1 %529, label %532, label %530

; <label>:530:                                    ; preds = %block_4012ac
  %531 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %522, %struct.Memory* %503) #9
  %.pre2 = load i32, i32* %EAX, align 4
  %.pre3 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:532:                                    ; preds = %block_4012ac
  %533 = srem i64 %525, %523
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %535 = and i64 %526, 4294967295
  store i64 %535, i64* %534, align 8, !tbaa !2428
  %536 = and i64 %533, 4294967295
  store i64 %536, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %16, align 1, !tbaa !2432
  store i8 0, i8* %23, align 1, !tbaa !2446
  store i8 0, i8* %28, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2448
  store i8 0, i8* %34, align 1, !tbaa !2449
  store i8 0, i8* %40, align 1, !tbaa !2450
  %537 = trunc i64 %526 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %532, %530
  %538 = phi i64 [ %.pre3, %530 ], [ %522, %532 ]
  %539 = phi i32 [ %.pre2, %530 ], [ %537, %532 ]
  %540 = phi %struct.Memory* [ %531, %530 ], [ %503, %532 ]
  store i32 %539, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %541 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %542, i64* %RSI, align 8, !tbaa !2428
  %543 = add i64 %538, 3158
  %544 = add i64 %538, 28
  %545 = load i64, i64* %RSP, align 8, !tbaa !2428
  %546 = add i64 %545, -8
  %547 = inttoptr i64 %546 to i64*
  store i64 %544, i64* %547, align 8
  store i64 %546, i64* %RSP, align 8, !tbaa !2428
  store i64 %543, i64* %PC, align 8, !tbaa !2428
  %548 = tail call %struct.Memory* @sub_402120__ZN9benchmark11fill_randomIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %543, %struct.Memory* %540)
  %549 = load i64, i64* %PC, align 8
  %550 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %550, i64* %RDI, align 8, !tbaa !2428
  %551 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %551, i64* %RSI, align 8, !tbaa !2428
  %552 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %552, i64* %RCX, align 8, !tbaa !2428
  store i64 %552, i64* %RDX, align 8, !tbaa !2428
  %553 = add i64 %549, 3210
  %554 = add i64 %549, 32
  %555 = load i64, i64* %RSP, align 8, !tbaa !2428
  %556 = add i64 %555, -8
  %557 = inttoptr i64 %556 to i64*
  store i64 %554, i64* %557, align 8
  store i64 %556, i64* %RSP, align 8, !tbaa !2428
  store i64 %553, i64* %PC, align 8, !tbaa !2428
  %558 = tail call %struct.Memory* @sub_402170__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__renamed_(%struct.State* nonnull %0, i64 %553, %struct.Memory* %548)
  %559 = load i64, i64* %PC, align 8
  %560 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %560, i64* %RDI, align 8, !tbaa !2428
  %561 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %561, i64* %RSI, align 8, !tbaa !2428
  %562 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %562, i64* %RDX, align 8, !tbaa !2428
  %563 = add i64 %559, 3274
  %564 = add i64 %559, 29
  %565 = load i64, i64* %RSP, align 8, !tbaa !2428
  %566 = add i64 %565, -8
  %567 = inttoptr i64 %566 to i64*
  store i64 %564, i64* %567, align 8
  store i64 %566, i64* %RSP, align 8, !tbaa !2428
  store i64 %563, i64* %PC, align 8, !tbaa !2428
  %568 = tail call %struct.Memory* @sub_4021d0__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__renamed_(%struct.State* nonnull %0, i64 %563, %struct.Memory* %558)
  %569 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 338), i64* %R8, align 8, !tbaa !2428
  %570 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %570, i64* %RDI, align 8, !tbaa !2428
  %571 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %571, i64* %RSI, align 8, !tbaa !2428
  %572 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %572, i64* %RDX, align 8, !tbaa !2428
  %573 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %573, i64* %RCX, align 8, !tbaa !2428
  %574 = load i64, i64* %RBP, align 8
  %575 = add i64 %574, -24
  %576 = add i64 %569, 47
  store i64 %576, i64* %PC, align 8
  %577 = inttoptr i64 %575 to i64*
  %578 = load i64, i64* %577, align 8
  store i64 %578, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %579 = add i64 %569, 3341
  %580 = add i64 %569, 52
  %581 = load i64, i64* %RSP, align 8, !tbaa !2428
  %582 = add i64 %581, -8
  %583 = inttoptr i64 %582 to i64*
  store i64 %580, i64* %583, align 8
  store i64 %582, i64* %RSP, align 8, !tbaa !2428
  store i64 %579, i64* %PC, align 8, !tbaa !2428
  %584 = tail call %struct.Memory* @sub_402230__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %579, %struct.Memory* %568)
  %585 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 368), i64* %R8, align 8, !tbaa !2428
  %586 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %587 = load i64, i64* %RBP, align 8
  %588 = add i64 %587, -160
  %589 = add i64 %585, 25
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %588 to i64*
  store i64 %586, i64* %590, align 8
  %591 = load i64, i64* %PC, align 8
  %592 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %593 = load i64, i64* %RBP, align 8
  %594 = add i64 %593, -168
  %595 = add i64 %591, 15
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i64*
  store i64 %592, i64* %596, align 8
  %597 = load i64, i64* %PC, align 8
  %598 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %599 = load i64, i64* %RBP, align 8
  %600 = add i64 %599, -176
  %601 = add i64 %597, 15
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i64*
  store i64 %598, i64* %602, align 8
  %603 = load i64, i64* %PC, align 8
  %604 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %604, i64* %RCX, align 8, !tbaa !2428
  %605 = load i64, i64* %RBP, align 8
  %606 = add i64 %605, -184
  %607 = add i64 %603, 15
  store i64 %607, i64* %PC, align 8
  %608 = inttoptr i64 %606 to i64*
  store i64 %604, i64* %608, align 8
  %609 = load i64, i64* %RBP, align 8
  %610 = add i64 %609, -24
  %611 = load i64, i64* %PC, align 8
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC, align 8
  %613 = inttoptr i64 %610 to i64*
  %614 = load i64, i64* %613, align 8
  store i64 %614, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %615 = add i64 %609, -160
  %616 = add i64 %611, 12
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i64*
  %618 = load i64, i64* %617, align 8
  store i64 %618, i64* %RDI, align 8, !tbaa !2428
  %619 = add i64 %609, -168
  %620 = add i64 %611, 19
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %619 to i64*
  %622 = load i64, i64* %621, align 8
  store i64 %622, i64* %RSI, align 8, !tbaa !2428
  %623 = add i64 %609, -176
  %624 = add i64 %611, 26
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %623 to i64*
  %626 = load i64, i64* %625, align 8
  store i64 %626, i64* %RDX, align 8, !tbaa !2428
  %627 = add i64 %609, -184
  %628 = add i64 %611, 33
  store i64 %628, i64* %PC, align 8
  %629 = inttoptr i64 %627 to i64*
  %630 = load i64, i64* %629, align 8
  store i64 %630, i64* %RCX, align 8, !tbaa !2428
  %631 = add i64 %611, 3347
  %632 = add i64 %611, 38
  %633 = load i64, i64* %RSP, align 8, !tbaa !2428
  %634 = add i64 %633, -8
  %635 = inttoptr i64 %634 to i64*
  store i64 %632, i64* %635, align 8
  store i64 %634, i64* %RSP, align 8, !tbaa !2428
  store i64 %631, i64* %PC, align 8, !tbaa !2428
  %636 = tail call %struct.Memory* @sub_4022b0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %631, %struct.Memory* %584)
  %637 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 404), i64* %R8, align 8, !tbaa !2428
  %638 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %638, i64* %RDI, align 8, !tbaa !2428
  %639 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %639, i64* %RSI, align 8, !tbaa !2428
  %640 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %640, i64* %RDX, align 8, !tbaa !2428
  %641 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %641, i64* %RCX, align 8, !tbaa !2428
  %642 = load i64, i64* %RBP, align 8
  %643 = add i64 %642, -32
  %644 = add i64 %637, 46
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to i64*
  %646 = load i64, i64* %645, align 8
  store i64 %646, i64* %R9, align 8, !tbaa !2428
  %647 = add i64 %642, -192
  %648 = add i64 %637, 53
  store i64 %648, i64* %PC, align 8
  %649 = inttoptr i64 %647 to i64*
  store i64 %646, i64* %649, align 8
  %650 = load i64, i64* %RBP, align 8
  %651 = add i64 %650, -192
  %652 = load i64, i64* %PC, align 8
  %653 = add i64 %652, 8
  store i64 %653, i64* %PC, align 8
  %654 = inttoptr i64 %651 to i64*
  %655 = load i64, i64* %654, align 8
  store i64 %655, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %656 = add i64 %652, 3432
  %657 = add i64 %652, 13
  %658 = load i64, i64* %RSP, align 8, !tbaa !2428
  %659 = add i64 %658, -8
  %660 = inttoptr i64 %659 to i64*
  store i64 %657, i64* %660, align 8
  store i64 %659, i64* %RSP, align 8, !tbaa !2428
  store i64 %656, i64* %PC, align 8, !tbaa !2428
  %661 = tail call %struct.Memory* @sub_402360__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %656, %struct.Memory* %636)
  %662 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 446), i64* %R8, align 8, !tbaa !2428
  %663 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %664 = load i64, i64* %RBP, align 8
  %665 = add i64 %664, -200
  %666 = add i64 %662, 25
  store i64 %666, i64* %PC, align 8
  %667 = inttoptr i64 %665 to i64*
  store i64 %663, i64* %667, align 8
  %668 = load i64, i64* %PC, align 8
  %669 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %670 = load i64, i64* %RBP, align 8
  %671 = add i64 %670, -208
  %672 = add i64 %668, 15
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %671 to i64*
  store i64 %669, i64* %673, align 8
  %674 = load i64, i64* %PC, align 8
  %675 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %676 = load i64, i64* %RBP, align 8
  %677 = add i64 %676, -216
  %678 = add i64 %674, 15
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %677 to i64*
  store i64 %675, i64* %679, align 8
  %680 = load i64, i64* %PC, align 8
  %681 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %681, i64* %RCX, align 8, !tbaa !2428
  %682 = load i64, i64* %RBP, align 8
  %683 = add i64 %682, -224
  %684 = add i64 %680, 15
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i64*
  store i64 %681, i64* %685, align 8
  %686 = load i64, i64* %RBP, align 8
  %687 = add i64 %686, -32
  %688 = load i64, i64* %PC, align 8
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %687 to i64*
  %691 = load i64, i64* %690, align 8
  store i64 %691, i64* %RCX, align 8, !tbaa !2428
  %692 = add i64 %686, -232
  %693 = add i64 %688, 11
  store i64 %693, i64* %PC, align 8
  %694 = inttoptr i64 %692 to i64*
  store i64 %691, i64* %694, align 8
  %695 = load i64, i64* %RBP, align 8
  %696 = add i64 %695, -200
  %697 = load i64, i64* %PC, align 8
  %698 = add i64 %697, 7
  store i64 %698, i64* %PC, align 8
  %699 = inttoptr i64 %696 to i64*
  %700 = load i64, i64* %699, align 8
  store i64 %700, i64* %RDI, align 8, !tbaa !2428
  %701 = add i64 %695, -208
  %702 = add i64 %697, 14
  store i64 %702, i64* %PC, align 8
  %703 = inttoptr i64 %701 to i64*
  %704 = load i64, i64* %703, align 8
  store i64 %704, i64* %RSI, align 8, !tbaa !2428
  %705 = add i64 %695, -216
  %706 = add i64 %697, 21
  store i64 %706, i64* %PC, align 8
  %707 = inttoptr i64 %705 to i64*
  %708 = load i64, i64* %707, align 8
  store i64 %708, i64* %RDX, align 8, !tbaa !2428
  %709 = add i64 %695, -224
  %710 = add i64 %697, 28
  store i64 %710, i64* %PC, align 8
  %711 = inttoptr i64 %709 to i64*
  %712 = load i64, i64* %711, align 8
  store i64 %712, i64* %RCX, align 8, !tbaa !2428
  %713 = add i64 %695, -232
  %714 = add i64 %697, 36
  store i64 %714, i64* %PC, align 8
  %715 = inttoptr i64 %713 to i64*
  %716 = load i64, i64* %715, align 8
  store i64 %716, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %717 = add i64 %697, 3466
  %718 = add i64 %697, 41
  %719 = load i64, i64* %RSP, align 8, !tbaa !2428
  %720 = add i64 %719, -8
  %721 = inttoptr i64 %720 to i64*
  store i64 %718, i64* %721, align 8
  store i64 %720, i64* %RSP, align 8, !tbaa !2428
  store i64 %717, i64* %PC, align 8, !tbaa !2428
  %722 = tail call %struct.Memory* @sub_4023e0__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %717, %struct.Memory* %661)
  %723 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 494), i64* %R8, align 8, !tbaa !2428
  %724 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %724, i64* %RDI, align 8, !tbaa !2428
  %725 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %725, i64* %RSI, align 8, !tbaa !2428
  %726 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %726, i64* %RDX, align 8, !tbaa !2428
  %727 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %727, i64* %RCX, align 8, !tbaa !2428
  %728 = load i64, i64* %RBP, align 8
  %729 = add i64 %728, -48
  %730 = add i64 %723, 46
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %729 to i64*
  %732 = load i64, i64* %731, align 8
  store i64 %732, i64* %R9, align 8, !tbaa !2428
  %733 = add i64 %728, -240
  %734 = add i64 %723, 53
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %733 to i64*
  store i64 %732, i64* %735, align 8
  %736 = load i64, i64* %RBP, align 8
  %737 = add i64 %736, -240
  %738 = load i64, i64* %PC, align 8
  %739 = add i64 %738, 8
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740, align 8
  store i64 %741, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %742 = add i64 %738, 3548
  %743 = add i64 %738, 13
  %744 = load i64, i64* %RSP, align 8, !tbaa !2428
  %745 = add i64 %744, -8
  %746 = inttoptr i64 %745 to i64*
  store i64 %743, i64* %746, align 8
  store i64 %745, i64* %RSP, align 8, !tbaa !2428
  store i64 %742, i64* %PC, align 8, !tbaa !2428
  %747 = tail call %struct.Memory* @sub_402490__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %742, %struct.Memory* %722)
  %748 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 538), i64* %R8, align 8, !tbaa !2428
  %749 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %750 = load i64, i64* %RBP, align 8
  %751 = add i64 %750, -248
  %752 = add i64 %748, 25
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %751 to i64*
  store i64 %749, i64* %753, align 8
  %754 = load i64, i64* %PC, align 8
  %755 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %756 = load i64, i64* %RBP, align 8
  %757 = add i64 %756, -256
  %758 = add i64 %754, 15
  store i64 %758, i64* %PC, align 8
  %759 = inttoptr i64 %757 to i64*
  store i64 %755, i64* %759, align 8
  %760 = load i64, i64* %PC, align 8
  %761 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %762 = load i64, i64* %RBP, align 8
  %763 = add i64 %762, -264
  %764 = add i64 %760, 15
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %763 to i64*
  store i64 %761, i64* %765, align 8
  %766 = load i64, i64* %PC, align 8
  %767 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %767, i64* %RCX, align 8, !tbaa !2428
  %768 = load i64, i64* %RBP, align 8
  %769 = add i64 %768, -272
  %770 = add i64 %766, 15
  store i64 %770, i64* %PC, align 8
  %771 = inttoptr i64 %769 to i64*
  store i64 %767, i64* %771, align 8
  %772 = load i64, i64* %RBP, align 8
  %773 = add i64 %772, -48
  %774 = load i64, i64* %PC, align 8
  %775 = add i64 %774, 4
  store i64 %775, i64* %PC, align 8
  %776 = inttoptr i64 %773 to i64*
  %777 = load i64, i64* %776, align 8
  store i64 %777, i64* %RCX, align 8, !tbaa !2428
  %778 = add i64 %772, -280
  %779 = add i64 %774, 11
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %778 to i64*
  store i64 %777, i64* %780, align 8
  %781 = load i64, i64* %RBP, align 8
  %782 = add i64 %781, -248
  %783 = load i64, i64* %PC, align 8
  %784 = add i64 %783, 7
  store i64 %784, i64* %PC, align 8
  %785 = inttoptr i64 %782 to i64*
  %786 = load i64, i64* %785, align 8
  store i64 %786, i64* %RDI, align 8, !tbaa !2428
  %787 = add i64 %781, -256
  %788 = add i64 %783, 14
  store i64 %788, i64* %PC, align 8
  %789 = inttoptr i64 %787 to i64*
  %790 = load i64, i64* %789, align 8
  store i64 %790, i64* %RSI, align 8, !tbaa !2428
  %791 = add i64 %781, -264
  %792 = add i64 %783, 21
  store i64 %792, i64* %PC, align 8
  %793 = inttoptr i64 %791 to i64*
  %794 = load i64, i64* %793, align 8
  store i64 %794, i64* %RDX, align 8, !tbaa !2428
  %795 = add i64 %781, -272
  %796 = add i64 %783, 28
  store i64 %796, i64* %PC, align 8
  %797 = inttoptr i64 %795 to i64*
  %798 = load i64, i64* %797, align 8
  store i64 %798, i64* %RCX, align 8, !tbaa !2428
  %799 = add i64 %781, -280
  %800 = add i64 %783, 36
  store i64 %800, i64* %PC, align 8
  %801 = inttoptr i64 %799 to i64*
  %802 = load i64, i64* %801, align 8
  store i64 %802, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %803 = add i64 %783, 3582
  %804 = add i64 %783, 41
  %805 = load i64, i64* %RSP, align 8, !tbaa !2428
  %806 = add i64 %805, -8
  %807 = inttoptr i64 %806 to i64*
  store i64 %804, i64* %807, align 8
  store i64 %806, i64* %RSP, align 8, !tbaa !2428
  store i64 %803, i64* %PC, align 8, !tbaa !2428
  %808 = tail call %struct.Memory* @sub_402510__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %803, %struct.Memory* %747)
  %809 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 588), i64* %R8, align 8, !tbaa !2428
  %810 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %811 = shl i32 %810, 3
  %812 = zext i32 %811 to i64
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = lshr i32 %810, 29
  %814 = trunc i32 %813 to i8
  %815 = and i8 %814, 1
  store i8 %815, i8* %16, align 1, !tbaa !2453
  %816 = and i32 %811, 248
  %817 = tail call i32 @llvm.ctpop.i32(i32 %816) #8
  %818 = trunc i32 %817 to i8
  %819 = and i8 %818, 1
  %820 = xor i8 %819, 1
  store i8 %820, i8* %23, align 1, !tbaa !2453
  store i8 0, i8* %28, align 1, !tbaa !2453
  %821 = icmp eq i32 %811, 0
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %31, align 1, !tbaa !2453
  %823 = lshr i32 %810, 28
  %824 = trunc i32 %823 to i8
  %825 = and i8 %824, 1
  store i8 %825, i8* %34, align 1, !tbaa !2453
  store i8 0, i8* %40, align 1, !tbaa !2453
  store i32 %811, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %826 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %826, i64* %RDI, align 8, !tbaa !2428
  %827 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %827, i64* %RSI, align 8, !tbaa !2428
  %828 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %828, i64* %RDX, align 8, !tbaa !2428
  %829 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %829, i64* %RCX, align 8, !tbaa !2428
  %830 = load i64, i64* %RBP, align 8
  %831 = add i64 %830, -24
  %832 = add i64 %809, 64
  store i64 %832, i64* %PC, align 8
  %833 = inttoptr i64 %831 to i64*
  %834 = load i64, i64* %833, align 8
  store i64 %834, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %835 = add i64 %809, 3717
  %836 = add i64 %809, 69
  %837 = load i64, i64* %RSP, align 8, !tbaa !2428
  %838 = add i64 %837, -8
  %839 = inttoptr i64 %838 to i64*
  store i64 %836, i64* %839, align 8
  store i64 %838, i64* %RSP, align 8, !tbaa !2428
  store i64 %835, i64* %PC, align 8, !tbaa !2428
  %840 = tail call %struct.Memory* @sub_4025c0__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %835, %struct.Memory* %808)
  %841 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 613), i64* %R8, align 8, !tbaa !2428
  %842 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %843 = load i64, i64* %RBP, align 8
  %844 = add i64 %843, -288
  %845 = add i64 %841, 25
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %844 to i64*
  store i64 %842, i64* %846, align 8
  %847 = load i64, i64* %PC, align 8
  %848 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %849 = load i64, i64* %RBP, align 8
  %850 = add i64 %849, -296
  %851 = add i64 %847, 15
  store i64 %851, i64* %PC, align 8
  %852 = inttoptr i64 %850 to i64*
  store i64 %848, i64* %852, align 8
  %853 = load i64, i64* %PC, align 8
  %854 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %855 = load i64, i64* %RBP, align 8
  %856 = add i64 %855, -304
  %857 = add i64 %853, 15
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %856 to i64*
  store i64 %854, i64* %858, align 8
  %859 = load i64, i64* %PC, align 8
  %860 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %860, i64* %RCX, align 8, !tbaa !2428
  %861 = load i64, i64* %RBP, align 8
  %862 = add i64 %861, -312
  %863 = add i64 %859, 15
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %862 to i64*
  store i64 %860, i64* %864, align 8
  %865 = load i64, i64* %RBP, align 8
  %866 = add i64 %865, -24
  %867 = load i64, i64* %PC, align 8
  %868 = add i64 %867, 5
  store i64 %868, i64* %PC, align 8
  %869 = inttoptr i64 %866 to i64*
  %870 = load i64, i64* %869, align 8
  store i64 %870, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %871 = add i64 %865, -288
  %872 = add i64 %867, 12
  store i64 %872, i64* %PC, align 8
  %873 = inttoptr i64 %871 to i64*
  %874 = load i64, i64* %873, align 8
  store i64 %874, i64* %RDI, align 8, !tbaa !2428
  %875 = add i64 %865, -296
  %876 = add i64 %867, 19
  store i64 %876, i64* %PC, align 8
  %877 = inttoptr i64 %875 to i64*
  %878 = load i64, i64* %877, align 8
  store i64 %878, i64* %RSI, align 8, !tbaa !2428
  %879 = add i64 %865, -304
  %880 = add i64 %867, 26
  store i64 %880, i64* %PC, align 8
  %881 = inttoptr i64 %879 to i64*
  %882 = load i64, i64* %881, align 8
  store i64 %882, i64* %RDX, align 8, !tbaa !2428
  %883 = add i64 %865, -312
  %884 = add i64 %867, 33
  store i64 %884, i64* %PC, align 8
  %885 = inttoptr i64 %883 to i64*
  %886 = load i64, i64* %885, align 8
  store i64 %886, i64* %RCX, align 8, !tbaa !2428
  %887 = add i64 %867, 3706
  %888 = add i64 %867, 38
  %889 = load i64, i64* %RSP, align 8, !tbaa !2428
  %890 = add i64 %889, -8
  %891 = inttoptr i64 %890 to i64*
  store i64 %888, i64* %891, align 8
  store i64 %890, i64* %RSP, align 8, !tbaa !2428
  store i64 %887, i64* %PC, align 8, !tbaa !2428
  %892 = tail call %struct.Memory* @sub_402640__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %887, %struct.Memory* %840)
  %893 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 644), i64* %R8, align 8, !tbaa !2428
  %894 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %894, i64* %RDI, align 8, !tbaa !2428
  %895 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %895, i64* %RSI, align 8, !tbaa !2428
  %896 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %896, i64* %RDX, align 8, !tbaa !2428
  %897 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %897, i64* %RCX, align 8, !tbaa !2428
  %898 = load i64, i64* %RBP, align 8
  %899 = add i64 %898, -32
  %900 = add i64 %893, 46
  store i64 %900, i64* %PC, align 8
  %901 = inttoptr i64 %899 to i64*
  %902 = load i64, i64* %901, align 8
  store i64 %902, i64* %R9, align 8, !tbaa !2428
  %903 = add i64 %898, -320
  %904 = add i64 %893, 53
  store i64 %904, i64* %PC, align 8
  %905 = inttoptr i64 %903 to i64*
  store i64 %902, i64* %905, align 8
  %906 = load i64, i64* %RBP, align 8
  %907 = add i64 %906, -320
  %908 = load i64, i64* %PC, align 8
  %909 = add i64 %908, 8
  store i64 %909, i64* %PC, align 8
  %910 = inttoptr i64 %907 to i64*
  %911 = load i64, i64* %910, align 8
  store i64 %911, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %912 = add i64 %908, 3791
  %913 = add i64 %908, 13
  %914 = load i64, i64* %RSP, align 8, !tbaa !2428
  %915 = add i64 %914, -8
  %916 = inttoptr i64 %915 to i64*
  store i64 %913, i64* %916, align 8
  store i64 %915, i64* %RSP, align 8, !tbaa !2428
  store i64 %912, i64* %PC, align 8, !tbaa !2428
  %917 = tail call %struct.Memory* @sub_4026f0__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %912, %struct.Memory* %892)
  %918 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 681), i64* %R8, align 8, !tbaa !2428
  %919 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %920 = load i64, i64* %RBP, align 8
  %921 = add i64 %920, -328
  %922 = add i64 %918, 25
  store i64 %922, i64* %PC, align 8
  %923 = inttoptr i64 %921 to i64*
  store i64 %919, i64* %923, align 8
  %924 = load i64, i64* %PC, align 8
  %925 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %926 = load i64, i64* %RBP, align 8
  %927 = add i64 %926, -336
  %928 = add i64 %924, 15
  store i64 %928, i64* %PC, align 8
  %929 = inttoptr i64 %927 to i64*
  store i64 %925, i64* %929, align 8
  %930 = load i64, i64* %PC, align 8
  %931 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %932 = load i64, i64* %RBP, align 8
  %933 = add i64 %932, -344
  %934 = add i64 %930, 15
  store i64 %934, i64* %PC, align 8
  %935 = inttoptr i64 %933 to i64*
  store i64 %931, i64* %935, align 8
  %936 = load i64, i64* %PC, align 8
  %937 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %937, i64* %RCX, align 8, !tbaa !2428
  %938 = load i64, i64* %RBP, align 8
  %939 = add i64 %938, -352
  %940 = add i64 %936, 15
  store i64 %940, i64* %PC, align 8
  %941 = inttoptr i64 %939 to i64*
  store i64 %937, i64* %941, align 8
  %942 = load i64, i64* %RBP, align 8
  %943 = add i64 %942, -32
  %944 = load i64, i64* %PC, align 8
  %945 = add i64 %944, 4
  store i64 %945, i64* %PC, align 8
  %946 = inttoptr i64 %943 to i64*
  %947 = load i64, i64* %946, align 8
  store i64 %947, i64* %RCX, align 8, !tbaa !2428
  %948 = add i64 %942, -360
  %949 = add i64 %944, 11
  store i64 %949, i64* %PC, align 8
  %950 = inttoptr i64 %948 to i64*
  store i64 %947, i64* %950, align 8
  %951 = load i64, i64* %RBP, align 8
  %952 = add i64 %951, -328
  %953 = load i64, i64* %PC, align 8
  %954 = add i64 %953, 7
  store i64 %954, i64* %PC, align 8
  %955 = inttoptr i64 %952 to i64*
  %956 = load i64, i64* %955, align 8
  store i64 %956, i64* %RDI, align 8, !tbaa !2428
  %957 = add i64 %951, -336
  %958 = add i64 %953, 14
  store i64 %958, i64* %PC, align 8
  %959 = inttoptr i64 %957 to i64*
  %960 = load i64, i64* %959, align 8
  store i64 %960, i64* %RSI, align 8, !tbaa !2428
  %961 = add i64 %951, -344
  %962 = add i64 %953, 21
  store i64 %962, i64* %PC, align 8
  %963 = inttoptr i64 %961 to i64*
  %964 = load i64, i64* %963, align 8
  store i64 %964, i64* %RDX, align 8, !tbaa !2428
  %965 = add i64 %951, -352
  %966 = add i64 %953, 28
  store i64 %966, i64* %PC, align 8
  %967 = inttoptr i64 %965 to i64*
  %968 = load i64, i64* %967, align 8
  store i64 %968, i64* %RCX, align 8, !tbaa !2428
  %969 = add i64 %951, -360
  %970 = add i64 %953, 36
  store i64 %970, i64* %PC, align 8
  %971 = inttoptr i64 %969 to i64*
  %972 = load i64, i64* %971, align 8
  store i64 %972, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %973 = add i64 %953, 3825
  %974 = add i64 %953, 41
  %975 = load i64, i64* %RSP, align 8, !tbaa !2428
  %976 = add i64 %975, -8
  %977 = inttoptr i64 %976 to i64*
  store i64 %974, i64* %977, align 8
  store i64 %976, i64* %RSP, align 8, !tbaa !2428
  store i64 %973, i64* %PC, align 8, !tbaa !2428
  %978 = tail call %struct.Memory* @sub_402770__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %973, %struct.Memory* %917)
  %979 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 724), i64* %R8, align 8, !tbaa !2428
  %980 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %980, i64* %RDI, align 8, !tbaa !2428
  %981 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %981, i64* %RSI, align 8, !tbaa !2428
  %982 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %982, i64* %RDX, align 8, !tbaa !2428
  %983 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %983, i64* %RCX, align 8, !tbaa !2428
  %984 = load i64, i64* %RBP, align 8
  %985 = add i64 %984, -48
  %986 = add i64 %979, 46
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %985 to i64*
  %988 = load i64, i64* %987, align 8
  store i64 %988, i64* %R9, align 8, !tbaa !2428
  %989 = add i64 %984, -368
  %990 = add i64 %979, 53
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  store i64 %988, i64* %991, align 8
  %992 = load i64, i64* %RBP, align 8
  %993 = add i64 %992, -368
  %994 = load i64, i64* %PC, align 8
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC, align 8
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996, align 8
  store i64 %997, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %998 = add i64 %994, 3907
  %999 = add i64 %994, 13
  %1000 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1001 = add i64 %1000, -8
  %1002 = inttoptr i64 %1001 to i64*
  store i64 %999, i64* %1002, align 8
  store i64 %1001, i64* %RSP, align 8, !tbaa !2428
  store i64 %998, i64* %PC, align 8, !tbaa !2428
  %1003 = tail call %struct.Memory* @sub_402820__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %998, %struct.Memory* %978)
  %1004 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 763), i64* %R8, align 8, !tbaa !2428
  %1005 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %1006 = load i64, i64* %RBP, align 8
  %1007 = add i64 %1006, -376
  %1008 = add i64 %1004, 25
  store i64 %1008, i64* %PC, align 8
  %1009 = inttoptr i64 %1007 to i64*
  store i64 %1005, i64* %1009, align 8
  %1010 = load i64, i64* %PC, align 8
  %1011 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %1012 = load i64, i64* %RBP, align 8
  %1013 = add i64 %1012, -384
  %1014 = add i64 %1010, 15
  store i64 %1014, i64* %PC, align 8
  %1015 = inttoptr i64 %1013 to i64*
  store i64 %1011, i64* %1015, align 8
  %1016 = load i64, i64* %PC, align 8
  %1017 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %1018 = load i64, i64* %RBP, align 8
  %1019 = add i64 %1018, -392
  %1020 = add i64 %1016, 15
  store i64 %1020, i64* %PC, align 8
  %1021 = inttoptr i64 %1019 to i64*
  store i64 %1017, i64* %1021, align 8
  %1022 = load i64, i64* %PC, align 8
  %1023 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %1023, i64* %RCX, align 8, !tbaa !2428
  %1024 = load i64, i64* %RBP, align 8
  %1025 = add i64 %1024, -400
  %1026 = add i64 %1022, 15
  store i64 %1026, i64* %PC, align 8
  %1027 = inttoptr i64 %1025 to i64*
  store i64 %1023, i64* %1027, align 8
  %1028 = load i64, i64* %RBP, align 8
  %1029 = add i64 %1028, -48
  %1030 = load i64, i64* %PC, align 8
  %1031 = add i64 %1030, 4
  store i64 %1031, i64* %PC, align 8
  %1032 = inttoptr i64 %1029 to i64*
  %1033 = load i64, i64* %1032, align 8
  store i64 %1033, i64* %RCX, align 8, !tbaa !2428
  %1034 = add i64 %1028, -408
  %1035 = add i64 %1030, 11
  store i64 %1035, i64* %PC, align 8
  %1036 = inttoptr i64 %1034 to i64*
  store i64 %1033, i64* %1036, align 8
  %1037 = load i64, i64* %RBP, align 8
  %1038 = add i64 %1037, -376
  %1039 = load i64, i64* %PC, align 8
  %1040 = add i64 %1039, 7
  store i64 %1040, i64* %PC, align 8
  %1041 = inttoptr i64 %1038 to i64*
  %1042 = load i64, i64* %1041, align 8
  store i64 %1042, i64* %RDI, align 8, !tbaa !2428
  %1043 = add i64 %1037, -384
  %1044 = add i64 %1039, 14
  store i64 %1044, i64* %PC, align 8
  %1045 = inttoptr i64 %1043 to i64*
  %1046 = load i64, i64* %1045, align 8
  store i64 %1046, i64* %RSI, align 8, !tbaa !2428
  %1047 = add i64 %1037, -392
  %1048 = add i64 %1039, 21
  store i64 %1048, i64* %PC, align 8
  %1049 = inttoptr i64 %1047 to i64*
  %1050 = load i64, i64* %1049, align 8
  store i64 %1050, i64* %RDX, align 8, !tbaa !2428
  %1051 = add i64 %1037, -400
  %1052 = add i64 %1039, 28
  store i64 %1052, i64* %PC, align 8
  %1053 = inttoptr i64 %1051 to i64*
  %1054 = load i64, i64* %1053, align 8
  store i64 %1054, i64* %RCX, align 8, !tbaa !2428
  %1055 = add i64 %1037, -408
  %1056 = add i64 %1039, 36
  store i64 %1056, i64* %PC, align 8
  %1057 = inttoptr i64 %1055 to i64*
  %1058 = load i64, i64* %1057, align 8
  store i64 %1058, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %1059 = add i64 %1039, 3941
  %1060 = add i64 %1039, 41
  %1061 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1062 = add i64 %1061, -8
  %1063 = inttoptr i64 %1062 to i64*
  store i64 %1060, i64* %1063, align 8
  store i64 %1062, i64* %RSP, align 8, !tbaa !2428
  store i64 %1059, i64* %PC, align 8, !tbaa !2428
  %1064 = tail call %struct.Memory* @sub_4028a0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1059, %struct.Memory* %1003)
  %1065 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 808), i64* %R8, align 8, !tbaa !2428
  %1066 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %1066, i64* %RDI, align 8, !tbaa !2428
  %1067 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %1067, i64* %RSI, align 8, !tbaa !2428
  %1068 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %1068, i64* %RDX, align 8, !tbaa !2428
  %1069 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %1069, i64* %RCX, align 8, !tbaa !2428
  %1070 = load i64, i64* %RBP, align 8
  %1071 = add i64 %1070, -24
  %1072 = add i64 %1065, 47
  store i64 %1072, i64* %PC, align 8
  %1073 = inttoptr i64 %1071 to i64*
  %1074 = load i64, i64* %1073, align 8
  store i64 %1074, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %1075 = add i64 %1065, 4076
  %1076 = add i64 %1065, 52
  %1077 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1078 = add i64 %1077, -8
  %1079 = inttoptr i64 %1078 to i64*
  store i64 %1076, i64* %1079, align 8
  store i64 %1078, i64* %RSP, align 8, !tbaa !2428
  store i64 %1075, i64* %PC, align 8, !tbaa !2428
  %1080 = tail call %struct.Memory* @sub_402950__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1075, %struct.Memory* %1064)
  %1081 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 833), i64* %R8, align 8, !tbaa !2428
  %1082 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %1083 = load i64, i64* %RBP, align 8
  %1084 = add i64 %1083, -416
  %1085 = add i64 %1081, 25
  store i64 %1085, i64* %PC, align 8
  %1086 = inttoptr i64 %1084 to i64*
  store i64 %1082, i64* %1086, align 8
  %1087 = load i64, i64* %PC, align 8
  %1088 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %1089 = load i64, i64* %RBP, align 8
  %1090 = add i64 %1089, -424
  %1091 = add i64 %1087, 15
  store i64 %1091, i64* %PC, align 8
  %1092 = inttoptr i64 %1090 to i64*
  store i64 %1088, i64* %1092, align 8
  %1093 = load i64, i64* %PC, align 8
  %1094 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %1095 = load i64, i64* %RBP, align 8
  %1096 = add i64 %1095, -432
  %1097 = add i64 %1093, 15
  store i64 %1097, i64* %PC, align 8
  %1098 = inttoptr i64 %1096 to i64*
  store i64 %1094, i64* %1098, align 8
  %1099 = load i64, i64* %PC, align 8
  %1100 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = load i64, i64* %RBP, align 8
  %1102 = add i64 %1101, -440
  %1103 = add i64 %1099, 15
  store i64 %1103, i64* %PC, align 8
  %1104 = inttoptr i64 %1102 to i64*
  store i64 %1100, i64* %1104, align 8
  %1105 = load i64, i64* %RBP, align 8
  %1106 = add i64 %1105, -24
  %1107 = load i64, i64* %PC, align 8
  %1108 = add i64 %1107, 5
  store i64 %1108, i64* %PC, align 8
  %1109 = inttoptr i64 %1106 to i64*
  %1110 = load i64, i64* %1109, align 8
  store i64 %1110, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %1111 = add i64 %1105, -416
  %1112 = add i64 %1107, 12
  store i64 %1112, i64* %PC, align 8
  %1113 = inttoptr i64 %1111 to i64*
  %1114 = load i64, i64* %1113, align 8
  store i64 %1114, i64* %RDI, align 8, !tbaa !2428
  %1115 = add i64 %1105, -424
  %1116 = add i64 %1107, 19
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1115 to i64*
  %1118 = load i64, i64* %1117, align 8
  store i64 %1118, i64* %RSI, align 8, !tbaa !2428
  %1119 = add i64 %1105, -432
  %1120 = add i64 %1107, 26
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i64*
  %1122 = load i64, i64* %1121, align 8
  store i64 %1122, i64* %RDX, align 8, !tbaa !2428
  %1123 = add i64 %1105, -440
  %1124 = add i64 %1107, 33
  store i64 %1124, i64* %PC, align 8
  %1125 = inttoptr i64 %1123 to i64*
  %1126 = load i64, i64* %1125, align 8
  store i64 %1126, i64* %RCX, align 8, !tbaa !2428
  %1127 = add i64 %1107, 4082
  %1128 = add i64 %1107, 38
  %1129 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1130 = add i64 %1129, -8
  %1131 = inttoptr i64 %1130 to i64*
  store i64 %1128, i64* %1131, align 8
  store i64 %1130, i64* %RSP, align 8, !tbaa !2428
  store i64 %1127, i64* %PC, align 8, !tbaa !2428
  %1132 = tail call %struct.Memory* @sub_4029d0__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1127, %struct.Memory* %1080)
  %1133 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 864), i64* %R8, align 8, !tbaa !2428
  %1134 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %1134, i64* %RDI, align 8, !tbaa !2428
  %1135 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %1135, i64* %RSI, align 8, !tbaa !2428
  %1136 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %1136, i64* %RDX, align 8, !tbaa !2428
  %1137 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %1137, i64* %RCX, align 8, !tbaa !2428
  %1138 = load i64, i64* %RBP, align 8
  %1139 = add i64 %1138, -32
  %1140 = add i64 %1133, 46
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1139 to i64*
  %1142 = load i64, i64* %1141, align 8
  store i64 %1142, i64* %R9, align 8, !tbaa !2428
  %1143 = add i64 %1138, -448
  %1144 = add i64 %1133, 53
  store i64 %1144, i64* %PC, align 8
  %1145 = inttoptr i64 %1143 to i64*
  store i64 %1142, i64* %1145, align 8
  %1146 = load i64, i64* %RBP, align 8
  %1147 = add i64 %1146, -448
  %1148 = load i64, i64* %PC, align 8
  %1149 = add i64 %1148, 8
  store i64 %1149, i64* %PC, align 8
  %1150 = inttoptr i64 %1147 to i64*
  %1151 = load i64, i64* %1150, align 8
  store i64 %1151, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %1152 = add i64 %1148, 4167
  %1153 = add i64 %1148, 13
  %1154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1155 = add i64 %1154, -8
  %1156 = inttoptr i64 %1155 to i64*
  store i64 %1153, i64* %1156, align 8
  store i64 %1155, i64* %RSP, align 8, !tbaa !2428
  store i64 %1152, i64* %PC, align 8, !tbaa !2428
  %1157 = tail call %struct.Memory* @sub_402a80__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1152, %struct.Memory* %1132)
  %1158 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 901), i64* %R8, align 8, !tbaa !2428
  %1159 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %1160 = load i64, i64* %RBP, align 8
  %1161 = add i64 %1160, -456
  %1162 = add i64 %1158, 25
  store i64 %1162, i64* %PC, align 8
  %1163 = inttoptr i64 %1161 to i64*
  store i64 %1159, i64* %1163, align 8
  %1164 = load i64, i64* %PC, align 8
  %1165 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %1166 = load i64, i64* %RBP, align 8
  %1167 = add i64 %1166, -464
  %1168 = add i64 %1164, 15
  store i64 %1168, i64* %PC, align 8
  %1169 = inttoptr i64 %1167 to i64*
  store i64 %1165, i64* %1169, align 8
  %1170 = load i64, i64* %PC, align 8
  %1171 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %1172 = load i64, i64* %RBP, align 8
  %1173 = add i64 %1172, -472
  %1174 = add i64 %1170, 15
  store i64 %1174, i64* %PC, align 8
  %1175 = inttoptr i64 %1173 to i64*
  store i64 %1171, i64* %1175, align 8
  %1176 = load i64, i64* %PC, align 8
  %1177 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %1177, i64* %RCX, align 8, !tbaa !2428
  %1178 = load i64, i64* %RBP, align 8
  %1179 = add i64 %1178, -480
  %1180 = add i64 %1176, 15
  store i64 %1180, i64* %PC, align 8
  %1181 = inttoptr i64 %1179 to i64*
  store i64 %1177, i64* %1181, align 8
  %1182 = load i64, i64* %RBP, align 8
  %1183 = add i64 %1182, -32
  %1184 = load i64, i64* %PC, align 8
  %1185 = add i64 %1184, 4
  store i64 %1185, i64* %PC, align 8
  %1186 = inttoptr i64 %1183 to i64*
  %1187 = load i64, i64* %1186, align 8
  store i64 %1187, i64* %RCX, align 8, !tbaa !2428
  %1188 = add i64 %1182, -488
  %1189 = add i64 %1184, 11
  store i64 %1189, i64* %PC, align 8
  %1190 = inttoptr i64 %1188 to i64*
  store i64 %1187, i64* %1190, align 8
  %1191 = load i64, i64* %RBP, align 8
  %1192 = add i64 %1191, -456
  %1193 = load i64, i64* %PC, align 8
  %1194 = add i64 %1193, 7
  store i64 %1194, i64* %PC, align 8
  %1195 = inttoptr i64 %1192 to i64*
  %1196 = load i64, i64* %1195, align 8
  store i64 %1196, i64* %RDI, align 8, !tbaa !2428
  %1197 = add i64 %1191, -464
  %1198 = add i64 %1193, 14
  store i64 %1198, i64* %PC, align 8
  %1199 = inttoptr i64 %1197 to i64*
  %1200 = load i64, i64* %1199, align 8
  store i64 %1200, i64* %RSI, align 8, !tbaa !2428
  %1201 = add i64 %1191, -472
  %1202 = add i64 %1193, 21
  store i64 %1202, i64* %PC, align 8
  %1203 = inttoptr i64 %1201 to i64*
  %1204 = load i64, i64* %1203, align 8
  store i64 %1204, i64* %RDX, align 8, !tbaa !2428
  %1205 = add i64 %1191, -480
  %1206 = add i64 %1193, 28
  store i64 %1206, i64* %PC, align 8
  %1207 = inttoptr i64 %1205 to i64*
  %1208 = load i64, i64* %1207, align 8
  store i64 %1208, i64* %RCX, align 8, !tbaa !2428
  %1209 = add i64 %1191, -488
  %1210 = add i64 %1193, 36
  store i64 %1210, i64* %PC, align 8
  %1211 = inttoptr i64 %1209 to i64*
  %1212 = load i64, i64* %1211, align 8
  store i64 %1212, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %1213 = add i64 %1193, 4201
  %1214 = add i64 %1193, 41
  %1215 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1216 = add i64 %1215, -8
  %1217 = inttoptr i64 %1216 to i64*
  store i64 %1214, i64* %1217, align 8
  store i64 %1216, i64* %RSP, align 8, !tbaa !2428
  store i64 %1213, i64* %PC, align 8, !tbaa !2428
  %1218 = tail call %struct.Memory* @sub_402b00__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1213, %struct.Memory* %1157)
  %1219 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 944), i64* %R8, align 8, !tbaa !2428
  %1220 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %1220, i64* %RDI, align 8, !tbaa !2428
  %1221 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %1221, i64* %RSI, align 8, !tbaa !2428
  %1222 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %1222, i64* %RDX, align 8, !tbaa !2428
  %1223 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %1223, i64* %RCX, align 8, !tbaa !2428
  %1224 = load i64, i64* %RBP, align 8
  %1225 = add i64 %1224, -48
  %1226 = add i64 %1219, 46
  store i64 %1226, i64* %PC, align 8
  %1227 = inttoptr i64 %1225 to i64*
  %1228 = load i64, i64* %1227, align 8
  store i64 %1228, i64* %R9, align 8, !tbaa !2428
  %1229 = add i64 %1224, -496
  %1230 = add i64 %1219, 53
  store i64 %1230, i64* %PC, align 8
  %1231 = inttoptr i64 %1229 to i64*
  store i64 %1228, i64* %1231, align 8
  %1232 = load i64, i64* %RBP, align 8
  %1233 = add i64 %1232, -496
  %1234 = load i64, i64* %PC, align 8
  %1235 = add i64 %1234, 8
  store i64 %1235, i64* %PC, align 8
  %1236 = inttoptr i64 %1233 to i64*
  %1237 = load i64, i64* %1236, align 8
  store i64 %1237, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %1238 = add i64 %1234, 4283
  %1239 = add i64 %1234, 13
  %1240 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1241 = add i64 %1240, -8
  %1242 = inttoptr i64 %1241 to i64*
  store i64 %1239, i64* %1242, align 8
  store i64 %1241, i64* %RSP, align 8, !tbaa !2428
  store i64 %1238, i64* %PC, align 8, !tbaa !2428
  %1243 = tail call %struct.Memory* @sub_402bb0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1238, %struct.Memory* %1218)
  %1244 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 983), i64* %R8, align 8, !tbaa !2428
  %1245 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %1246 = load i64, i64* %RBP, align 8
  %1247 = add i64 %1246, -504
  %1248 = add i64 %1244, 25
  store i64 %1248, i64* %PC, align 8
  %1249 = inttoptr i64 %1247 to i64*
  store i64 %1245, i64* %1249, align 8
  %1250 = load i64, i64* %PC, align 8
  %1251 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %1252 = load i64, i64* %RBP, align 8
  %1253 = add i64 %1252, -512
  %1254 = add i64 %1250, 15
  store i64 %1254, i64* %PC, align 8
  %1255 = inttoptr i64 %1253 to i64*
  store i64 %1251, i64* %1255, align 8
  %1256 = load i64, i64* %PC, align 8
  %1257 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %1258 = load i64, i64* %RBP, align 8
  %1259 = add i64 %1258, -520
  %1260 = add i64 %1256, 15
  store i64 %1260, i64* %PC, align 8
  %1261 = inttoptr i64 %1259 to i64*
  store i64 %1257, i64* %1261, align 8
  %1262 = load i64, i64* %PC, align 8
  %1263 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %1263, i64* %RCX, align 8, !tbaa !2428
  %1264 = load i64, i64* %RBP, align 8
  %1265 = add i64 %1264, -528
  %1266 = add i64 %1262, 15
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1265 to i64*
  store i64 %1263, i64* %1267, align 8
  %1268 = load i64, i64* %RBP, align 8
  %1269 = add i64 %1268, -48
  %1270 = load i64, i64* %PC, align 8
  %1271 = add i64 %1270, 4
  store i64 %1271, i64* %PC, align 8
  %1272 = inttoptr i64 %1269 to i64*
  %1273 = load i64, i64* %1272, align 8
  store i64 %1273, i64* %RCX, align 8, !tbaa !2428
  %1274 = add i64 %1268, -536
  %1275 = add i64 %1270, 11
  store i64 %1275, i64* %PC, align 8
  %1276 = inttoptr i64 %1274 to i64*
  store i64 %1273, i64* %1276, align 8
  %1277 = load i64, i64* %RBP, align 8
  %1278 = add i64 %1277, -504
  %1279 = load i64, i64* %PC, align 8
  %1280 = add i64 %1279, 7
  store i64 %1280, i64* %PC, align 8
  %1281 = inttoptr i64 %1278 to i64*
  %1282 = load i64, i64* %1281, align 8
  store i64 %1282, i64* %RDI, align 8, !tbaa !2428
  %1283 = add i64 %1277, -512
  %1284 = add i64 %1279, 14
  store i64 %1284, i64* %PC, align 8
  %1285 = inttoptr i64 %1283 to i64*
  %1286 = load i64, i64* %1285, align 8
  store i64 %1286, i64* %RSI, align 8, !tbaa !2428
  %1287 = add i64 %1277, -520
  %1288 = add i64 %1279, 21
  store i64 %1288, i64* %PC, align 8
  %1289 = inttoptr i64 %1287 to i64*
  %1290 = load i64, i64* %1289, align 8
  store i64 %1290, i64* %RDX, align 8, !tbaa !2428
  %1291 = add i64 %1277, -528
  %1292 = add i64 %1279, 28
  store i64 %1292, i64* %PC, align 8
  %1293 = inttoptr i64 %1291 to i64*
  %1294 = load i64, i64* %1293, align 8
  store i64 %1294, i64* %RCX, align 8, !tbaa !2428
  %1295 = add i64 %1277, -536
  %1296 = add i64 %1279, 36
  store i64 %1296, i64* %PC, align 8
  %1297 = inttoptr i64 %1295 to i64*
  %1298 = load i64, i64* %1297, align 8
  store i64 %1298, i64* %71, align 1, !tbaa !2451
  store double 0.000000e+00, double* %241, align 1, !tbaa !2451
  %1299 = add i64 %1279, 4317
  %1300 = add i64 %1279, 41
  %1301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1302 = add i64 %1301, -8
  %1303 = inttoptr i64 %1302 to i64*
  store i64 %1300, i64* %1303, align 8
  store i64 %1302, i64* %RSP, align 8, !tbaa !2428
  store i64 %1299, i64* %PC, align 8, !tbaa !2428
  %1304 = tail call %struct.Memory* @sub_402c30__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_renamed_(%struct.State* nonnull %0, i64 %1299, %struct.Memory* %1243)
  %1305 = load i64, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %1306 = load i64, i64* %RSP, align 8
  %1307 = add i64 %1306, 576
  store i64 %1307, i64* %RSP, align 8, !tbaa !2428
  %1308 = icmp ugt i64 %1306, -577
  %1309 = zext i1 %1308 to i8
  store i8 %1309, i8* %16, align 1, !tbaa !2432
  %1310 = trunc i64 %1307 to i32
  %1311 = and i32 %1310, 255
  %1312 = tail call i32 @llvm.ctpop.i32(i32 %1311) #8
  %1313 = trunc i32 %1312 to i8
  %1314 = and i8 %1313, 1
  %1315 = xor i8 %1314, 1
  store i8 %1315, i8* %23, align 1, !tbaa !2446
  %1316 = xor i64 %1306, %1307
  %1317 = lshr i64 %1316, 4
  %1318 = trunc i64 %1317 to i8
  %1319 = and i8 %1318, 1
  store i8 %1319, i8* %28, align 1, !tbaa !2447
  %1320 = icmp eq i64 %1307, 0
  %1321 = zext i1 %1320 to i8
  store i8 %1321, i8* %31, align 1, !tbaa !2448
  %1322 = lshr i64 %1307, 63
  %1323 = trunc i64 %1322 to i8
  store i8 %1323, i8* %34, align 1, !tbaa !2449
  %1324 = lshr i64 %1306, 63
  %1325 = xor i64 %1322, %1324
  %1326 = add nuw nsw i64 %1325, %1322
  %1327 = icmp eq i64 %1326, 2
  %1328 = zext i1 %1327 to i8
  store i8 %1328, i8* %40, align 1, !tbaa !2450
  %1329 = add i64 %1305, 10
  store i64 %1329, i64* %PC, align 8
  %1330 = add i64 %1306, 584
  %1331 = inttoptr i64 %1307 to i64*
  %1332 = load i64, i64* %1331, align 8
  store i64 %1332, i64* %RBP, align 8, !tbaa !2428
  store i64 %1330, i64* %RSP, align 8, !tbaa !2428
  %1333 = add i64 %1305, 11
  store i64 %1333, i64* %PC, align 8
  %1334 = inttoptr i64 %1330 to i64*
  %1335 = load i64, i64* %1334, align 8
  store i64 %1335, i64* %PC, align 8, !tbaa !2428
  %1336 = add i64 %1306, 592
  store i64 %1336, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1304
}

; Function Attrs: noinline
define %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403040:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405c30__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405c30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -16
  %16 = load i64, i64* %RDI, align 8
  %17 = add i64 %14, 7
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %18, align 8
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -16
  %21 = load i64, i64* %RSI, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %24, align 8
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %26 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %RSI, align 8, !tbaa !2428
  %31 = add i64 %25, -24
  %32 = add i64 %27, 8
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %30, i64* %33, align 8
  %34 = load i64, i64* %RBP, align 8
  %35 = add i64 %34, -24
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 4
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %35 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 8
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = icmp ugt i64 %39, -9
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2432
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #8
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = xor i64 %39, %40
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %40, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %40, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %39, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %59
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = add i64 %36, 12
  store i64 %68, i64* %PC, align 8
  store i64 %40, i64* %38, align 8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %70 = bitcast i64* %69 to double*
  %71 = bitcast [32 x %union.VectorReg]* %6 to double*
  %72 = bitcast %union.VectorReg* %7 to double*
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %74 = bitcast i64* %73 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_405c50

block_405c7b:                                     ; preds = %block_405cc3, %block_405c5e
  %75 = phi i64 [ %.pre1, %block_405c5e ], [ %281, %block_405cc3 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_405c5e ], [ %MEMORY.1, %block_405cc3 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %50, align 1, !tbaa !2446
  store i8 1, i8* %58, align 1, !tbaa !2448
  store i8 0, i8* %61, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  store i8 0, i8* %55, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -40
  %78 = add i64 %75, 8
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  %81 = add i64 %76, -8
  %82 = add i64 %75, 12
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %80, %84
  %86 = icmp ult i64 %80, %84
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %43, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #8
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %50, align 1, !tbaa !2446
  %94 = xor i64 %84, %80
  %95 = xor i64 %94, %85
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %55, align 1, !tbaa !2447
  %99 = icmp eq i64 %85, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %58, align 1, !tbaa !2448
  %101 = lshr i64 %85, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %61, align 1, !tbaa !2449
  %103 = lshr i64 %80, 63
  %104 = lshr i64 %84, 63
  %105 = xor i64 %104, %103
  %106 = xor i64 %101, %103
  %107 = add nuw nsw i64 %106, %105
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %67, align 1, !tbaa !2450
  %110 = add i64 %76, -49
  %111 = add i64 %75, 15
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i8*
  store i8 0, i8* %112, align 1
  %113 = load i64, i64* %PC, align 8
  %114 = load i8, i8* %58, align 1, !tbaa !2448
  %115 = icmp ne i8 %114, 0
  %.v4 = select i1 %115, i64 41, i64 6
  %116 = add i64 %113, %.v4
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = icmp eq i8 %114, 1
  br i1 %117, label %block_405cb3, label %block_405c90

block_405c5e:                                     ; preds = %block_405c50
  %118 = add i64 %235, 4
  store i64 %118, i64* %PC, align 8
  %119 = load i64, i64* %204, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %235, 8
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %122, i64* %123, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %124 = add i64 %201, -32
  %125 = add i64 %235, 13
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %126, align 8
  %127 = load i64, i64* %RBP, align 8
  %128 = add i64 %127, -24
  %129 = load i64, i64* %PC, align 8
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %128 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = add i64 %127, -40
  %134 = add i64 %129, 8
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %133 to i64*
  store i64 %132, i64* %135, align 8
  %136 = load i64, i64* %RBP, align 8
  %137 = add i64 %136, -40
  %138 = load i64, i64* %PC, align 8
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %137 to i64*
  %141 = load i64, i64* %140, align 8
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = add i64 %136, -48
  %143 = add i64 %138, 8
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %142 to i64*
  store i64 %141, i64* %144, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_405c7b

block_405cbe:                                     ; preds = %block_405cb3
  %145 = add i64 %187, -32
  %146 = add i64 %199, 43
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %123, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %149 = add i64 %187, -40
  %150 = add i64 %199, 47
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %149 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %RAX, align 8, !tbaa !2428
  %153 = add i64 %199, 51
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i64*
  store i64 %148, i64* %154, align 8
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = add i64 %160, 8
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = icmp ugt i64 %160, -9
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %43, align 1, !tbaa !2432
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #8
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %50, align 1, !tbaa !2446
  %170 = xor i64 %160, %161
  %171 = lshr i64 %170, 4
  %172 = trunc i64 %171 to i8
  %173 = and i8 %172, 1
  store i8 %173, i8* %55, align 1, !tbaa !2447
  %174 = icmp eq i64 %161, 0
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %58, align 1, !tbaa !2448
  %176 = lshr i64 %161, 63
  %177 = trunc i64 %176 to i8
  store i8 %177, i8* %61, align 1, !tbaa !2449
  %178 = lshr i64 %160, 63
  %179 = xor i64 %176, %178
  %180 = add nuw nsw i64 %179, %176
  %181 = icmp eq i64 %180, 2
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %67, align 1, !tbaa !2450
  %183 = add i64 %157, 12
  store i64 %183, i64* %PC, align 8
  store i64 %161, i64* %159, align 8
  %184 = load i64, i64* %PC, align 8
  %185 = add i64 %184, -173
  store i64 %185, i64* %PC, align 8, !tbaa !2428
  br label %block_405c50

block_405cb3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_405c7b
  %186 = phi i64 [ %116, %block_405c7b ], [ %.pre3, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_405c7b ], [ %356, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -49
  %189 = add i64 %186, 3
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i8*
  %191 = load i8, i8* %190, align 1
  store i8 %191, i8* %AL, align 1, !tbaa !2453
  %192 = and i8 %191, 1
  store i8 0, i8* %43, align 1, !tbaa !2432
  %193 = zext i8 %192 to i32
  %194 = tail call i32 @llvm.ctpop.i32(i32 %193) #8
  %195 = trunc i32 %194 to i8
  %196 = xor i8 %195, 1
  store i8 %196, i8* %50, align 1, !tbaa !2446
  %197 = xor i8 %192, 1
  store i8 %197, i8* %58, align 1, !tbaa !2448
  store i8 0, i8* %61, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  store i8 0, i8* %55, align 1, !tbaa !2447
  %198 = icmp eq i8 %197, 0
  %.v5 = select i1 %198, i64 16, i64 11
  %199 = add i64 %186, %.v5
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  br i1 %198, label %block_405cc3, label %block_405cbe

block_405c50:                                     ; preds = %block_405cbe, %block_405c30
  %200 = phi i64 [ %.pre, %block_405c30 ], [ %185, %block_405cbe ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405c30 ], [ %MEMORY.1, %block_405cbe ]
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -24
  %203 = add i64 %200, 4
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %201, -16
  %207 = add i64 %200, 8
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = sub i64 %205, %209
  %211 = icmp ult i64 %205, %209
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %43, align 1, !tbaa !2432
  %213 = trunc i64 %210 to i32
  %214 = and i32 %213, 255
  %215 = tail call i32 @llvm.ctpop.i32(i32 %214) #8
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  store i8 %218, i8* %50, align 1, !tbaa !2446
  %219 = xor i64 %209, %205
  %220 = xor i64 %219, %210
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %55, align 1, !tbaa !2447
  %224 = icmp eq i64 %210, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %58, align 1, !tbaa !2448
  %226 = lshr i64 %210, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %61, align 1, !tbaa !2449
  %228 = lshr i64 %205, 63
  %229 = lshr i64 %209, 63
  %230 = xor i64 %229, %228
  %231 = xor i64 %226, %228
  %232 = add nuw nsw i64 %231, %230
  %233 = icmp eq i64 %232, 2
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %67, align 1, !tbaa !2450
  %.v = select i1 %224, i64 178, i64 14
  %235 = add i64 %200, %.v
  store i64 %235, i64* %PC, align 8, !tbaa !2428
  br i1 %224, label %block_405d02, label %block_405c5e

block_405cc3:                                     ; preds = %block_405cb3
  %236 = add i64 %187, -48
  %237 = add i64 %199, 4
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i64*
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = add i64 %199, 8
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241, align 8
  store i64 %242, i64* %123, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %243 = add i64 %187, -40
  %244 = add i64 %199, 12
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i64*
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %RAX, align 8, !tbaa !2428
  %247 = add i64 %199, 16
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i64*
  store i64 %242, i64* %248, align 8
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -40
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = add i64 %254, -8
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = icmp ugt i64 %254, 7
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %43, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %50, align 1, !tbaa !2446
  %264 = xor i64 %254, 16
  %265 = xor i64 %264, %255
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %55, align 1, !tbaa !2447
  %269 = icmp eq i64 %255, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %58, align 1, !tbaa !2448
  %271 = lshr i64 %255, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %61, align 1, !tbaa !2449
  %273 = lshr i64 %254, 63
  %274 = xor i64 %271, %273
  %275 = xor i64 %271, 1
  %276 = add nuw nsw i64 %274, %275
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %67, align 1, !tbaa !2450
  %279 = add i64 %251, 12
  store i64 %279, i64* %PC, align 8
  store i64 %255, i64* %253, align 8
  %280 = load i64, i64* %PC, align 8
  %281 = add i64 %280, -100
  store i64 %281, i64* %PC, align 8, !tbaa !2428
  br label %block_405c7b

block_405d02:                                     ; preds = %block_405c50
  %282 = add i64 %235, 1
  store i64 %282, i64* %PC, align 8
  %283 = load i64, i64* %10, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285, align 8
  store i64 %286, i64* %RBP, align 8, !tbaa !2428
  store i64 %284, i64* %10, align 8, !tbaa !2428
  %287 = add i64 %235, 2
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %284 to i64*
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  %290 = add i64 %283, 16
  store i64 %290, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_405c90:                                     ; preds = %block_405c7b
  %291 = load i64, i64* %RBP, align 8
  %292 = add i64 %291, -32
  %293 = add i64 %116, 5
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  %295 = load i64, i64* %294, align 8
  store i64 %295, i64* %123, align 1, !tbaa !2451
  store double 0.000000e+00, double* %70, align 1, !tbaa !2451
  %296 = add i64 %291, -48
  %297 = add i64 %116, 9
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = add i64 %299, -8
  store i64 %300, i64* %RCX, align 8, !tbaa !2428
  %301 = icmp ugt i64 %299, 7
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %43, align 1, !tbaa !2432
  %303 = trunc i64 %300 to i32
  %304 = and i32 %303, 255
  %305 = tail call i32 @llvm.ctpop.i32(i32 %304) #8
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = xor i8 %307, 1
  store i8 %308, i8* %50, align 1, !tbaa !2446
  %309 = xor i64 %299, 16
  %310 = xor i64 %309, %300
  %311 = lshr i64 %310, 4
  %312 = trunc i64 %311 to i8
  %313 = and i8 %312, 1
  store i8 %313, i8* %55, align 1, !tbaa !2447
  %314 = icmp eq i64 %300, 0
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %58, align 1, !tbaa !2448
  %316 = lshr i64 %300, 63
  %317 = trunc i64 %316 to i8
  store i8 %317, i8* %61, align 1, !tbaa !2449
  %318 = lshr i64 %299, 63
  %319 = xor i64 %316, %318
  %320 = xor i64 %316, 1
  %321 = add nuw nsw i64 %319, %320
  %322 = icmp eq i64 %321, 2
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %67, align 1, !tbaa !2450
  %324 = add i64 %116, 20
  store i64 %324, i64* %PC, align 8
  store i64 %300, i64* %298, align 8
  %325 = load i64, i64* %RAX, align 8
  %326 = add i64 %325, -8
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %326 to double*
  %330 = load double, double* %329, align 8
  store double %330, double* %72, align 1, !tbaa !2451
  store double 0.000000e+00, double* %74, align 1, !tbaa !2451
  %331 = add i64 %327, 9
  store i64 %331, i64* %PC, align 8
  %332 = load double, double* %71, align 1
  %333 = fcmp uno double %330, %332
  br i1 %333, label %334, label %344

; <label>:334:                                    ; preds = %block_405c90
  %335 = fadd double %330, %332
  %336 = bitcast double %335 to i64
  %337 = and i64 %336, 9221120237041090560
  %338 = icmp eq i64 %337, 9218868437227405312
  %339 = and i64 %336, 2251799813685247
  %340 = icmp ne i64 %339, 0
  %341 = and i1 %338, %340
  br i1 %341, label %342, label %350

; <label>:342:                                    ; preds = %334
  %343 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %331, %struct.Memory* %MEMORY.0) #9
  %.pre2 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:344:                                    ; preds = %block_405c90
  %345 = fcmp ogt double %330, %332
  br i1 %345, label %350, label %346

; <label>:346:                                    ; preds = %344
  %347 = fcmp olt double %330, %332
  br i1 %347, label %350, label %348

; <label>:348:                                    ; preds = %346
  %349 = fcmp oeq double %330, %332
  br i1 %349, label %350, label %354

; <label>:350:                                    ; preds = %348, %346, %344, %334
  %351 = phi i8 [ 0, %344 ], [ 0, %346 ], [ 1, %348 ], [ 1, %334 ]
  %352 = phi i8 [ 0, %344 ], [ 0, %346 ], [ 0, %348 ], [ 1, %334 ]
  %353 = phi i8 [ 0, %344 ], [ 1, %346 ], [ 0, %348 ], [ 1, %334 ]
  store i8 %351, i8* %58, align 1, !tbaa !2453
  store i8 %352, i8* %50, align 1, !tbaa !2453
  store i8 %353, i8* %43, align 1, !tbaa !2453
  br label %354

; <label>:354:                                    ; preds = %350, %348
  store i8 0, i8* %67, align 1, !tbaa !2453
  store i8 0, i8* %61, align 1, !tbaa !2453
  store i8 0, i8* %55, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %354, %342
  %355 = phi i64 [ %.pre2, %342 ], [ %331, %354 ]
  %356 = phi %struct.Memory* [ %343, %342 ], [ %MEMORY.0, %354 ]
  %357 = load i8, i8* %43, align 1, !tbaa !2432
  %358 = load i8, i8* %58, align 1, !tbaa !2448
  %359 = or i8 %358, %357
  %360 = icmp eq i8 %359, 0
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %DL, align 1, !tbaa !2453
  %362 = load i64, i64* %RBP, align 8
  %363 = add i64 %362, -49
  %364 = add i64 %355, 6
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i8*
  store i8 %361, i8* %365, align 1
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_405cb3
}

; Function Attrs: noinline
define %struct.Memory* @sub_403fc0__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403fc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_403fd0

block_404007:                                     ; preds = %block_403fd0
  %32 = add i64 %76, 1
  store i64 %32, i64* %PC, align 8
  %33 = load i64, i64* %5, align 8, !tbaa !2428
  %34 = add i64 %33, 8
  %35 = inttoptr i64 %33 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %RBP, align 8, !tbaa !2428
  store i64 %34, i64* %5, align 8, !tbaa !2428
  %37 = add i64 %76, 2
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = add i64 %33, 16
  store i64 %40, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_403fd0:                                     ; preds = %block_403fde, %block_403fc0
  %41 = phi i64 [ %140, %block_403fde ], [ %.pre, %block_403fc0 ]
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = add i64 %41, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = add i64 %42, -16
  %48 = add i64 %41, 8
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %47 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %46, %50
  %52 = icmp ult i64 %46, %50
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %26, align 1, !tbaa !2432
  %54 = trunc i64 %51 to i32
  %55 = and i32 %54, 255
  %56 = tail call i32 @llvm.ctpop.i32(i32 %55) #8
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  store i8 %59, i8* %27, align 1, !tbaa !2446
  %60 = xor i64 %50, %46
  %61 = xor i64 %60, %51
  %62 = lshr i64 %61, 4
  %63 = trunc i64 %62 to i8
  %64 = and i8 %63, 1
  store i8 %64, i8* %28, align 1, !tbaa !2447
  %65 = icmp eq i64 %51, 0
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %29, align 1, !tbaa !2448
  %67 = lshr i64 %51, 63
  %68 = trunc i64 %67 to i8
  store i8 %68, i8* %30, align 1, !tbaa !2449
  %69 = lshr i64 %46, 63
  %70 = lshr i64 %50, 63
  %71 = xor i64 %70, %69
  %72 = xor i64 %67, %69
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %31, align 1, !tbaa !2450
  %.v = select i1 %65, i64 55, i64 14
  %76 = add i64 %41, %.v
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  br i1 %65, label %block_404007, label %block_403fde

block_403fde:                                     ; preds = %block_403fd0
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = load i64, i64* %45, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 8
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -9
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %26, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %27, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %28, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %29, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %30, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %31, align 1, !tbaa !2450
  %101 = add i64 %76, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %45, align 8
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -24
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %103 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %RCX, align 8, !tbaa !2428
  %108 = add i64 %107, 8
  store i64 %108, i64* %RDX, align 8, !tbaa !2428
  %109 = icmp ugt i64 %107, -9
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %26, align 1, !tbaa !2432
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = tail call i32 @llvm.ctpop.i32(i32 %112) #8
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  store i8 %116, i8* %27, align 1, !tbaa !2446
  %117 = xor i64 %107, %108
  %118 = lshr i64 %117, 4
  %119 = trunc i64 %118 to i8
  %120 = and i8 %119, 1
  store i8 %120, i8* %28, align 1, !tbaa !2447
  %121 = icmp eq i64 %108, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %29, align 1, !tbaa !2448
  %123 = lshr i64 %108, 63
  %124 = trunc i64 %123 to i8
  store i8 %124, i8* %30, align 1, !tbaa !2449
  %125 = lshr i64 %107, 63
  %126 = xor i64 %123, %125
  %127 = add nuw nsw i64 %126, %123
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %31, align 1, !tbaa !2450
  %130 = add i64 %104, 15
  store i64 %130, i64* %PC, align 8
  store i64 %108, i64* %106, align 8
  %131 = bitcast i64* %RAX to i64**
  %132 = load i64*, i64** %131, align 8
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC, align 8
  %135 = load i64, i64* %132, align 8
  store i64 %135, i64* %RAX, align 8, !tbaa !2428
  %136 = bitcast i64* %RCX to i64**
  %137 = load i64*, i64** %136, align 8
  %138 = add i64 %133, 6
  store i64 %138, i64* %PC, align 8
  store i64 %135, i64* %137, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, -50
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  br label %block_403fd0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4025c0__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4025c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4025e8

block_402631:                                     ; preds = %block_4025e8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4025f8:                                     ; preds = %block_4025e8
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 9288
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a40__ZN9benchmark4copyIPdS1_EEvT_S2_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 12247
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_4055e0__ZN9benchmark9quicksortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 9578
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404b80__Z13verify_sortedIPdEvT_S1__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_4025e8

block_4025e8:                                     ; preds = %block_4025f8, %block_4025c0
  %190 = phi i64 [ %.pre, %block_4025c0 ], [ %189, %block_4025f8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4025c0 ], [ %157, %block_4025f8 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4025f8, label %block_402631
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405e90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_404f80__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404f80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #8
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2447
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2448
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2450
  %53 = add i64 %16, 14
  store i64 %53, i64* %PC, align 8
  store i64 %23, i64* %21, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = add i64 %56, 5
  store i64 %60, i64* %PC, align 8
  %61 = load i64, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %61, 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RBP, align 8, !tbaa !2428
  store i64 %62, i64* %5, align 8, !tbaa !2428
  %65 = add i64 %56, 6
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %68 = add i64 %61, 16
  store i64 %68, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403290:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2453
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #8
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2453
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2453
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2453
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = and i64 %55, 1
  %57 = trunc i64 %56 to i8
  store i8 %57, i8* %54, align 1, !tbaa !2453
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2453
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2432
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #8
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2446
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2447
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2448
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2449
  %83 = lshr i64 %62, 63
  %84 = xor i64 %81, %56
  %85 = xor i64 %81, %83
  %86 = add nuw nsw i64 %84, %85
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %58, align 1, !tbaa !2450
  %89 = add i64 %34, 16
  store i64 %89, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -8
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = add i64 %92, 5
  store i64 %96, i64* %PC, align 8
  %97 = load i64, i64* %5, align 8, !tbaa !2428
  %98 = add i64 %97, 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RBP, align 8, !tbaa !2428
  store i64 %98, i64* %5, align 8, !tbaa !2428
  %101 = add i64 %92, 6
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %98 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  %104 = add i64 %97, 16
  store i64 %104, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009f0___cxx_global_var_init_21(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4009f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVMPe_type* @DVMPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4543
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bb0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e30__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405e30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_404010__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -72
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 64
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 18
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -8
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  %58 = sub i64 %53, %57
  %59 = lshr i64 %58, 2
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = ashr i64 %58, 3
  store i64 %62, i64* %RSI, align 8, !tbaa !2428
  store i8 %61, i8* %13, align 1, !tbaa !2453
  %63 = trunc i64 %62 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #8
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %25, align 1, !tbaa !2453
  %69 = icmp eq i64 %62, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %28, align 1, !tbaa !2453
  %71 = lshr i64 %62, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %31, align 1, !tbaa !2453
  store i8 0, i8* %37, align 1, !tbaa !2453
  %73 = add i64 %48, -32
  %74 = add i64 %50, 19
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  store i64 %62, i64* %75, align 8
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = ashr i64 %81, 63
  store i64 %82, i64* %RDX, align 8, !tbaa !2428
  %83 = load i64, i64* %RCX, align 8
  %84 = add i64 %78, 9
  store i64 %84, i64* %PC, align 8
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = zext i64 %82 to i128
  %88 = shl nuw i128 %87, 64
  %89 = zext i64 %81 to i128
  %90 = or i128 %88, %89
  %91 = zext i64 %83 to i128
  %92 = or i128 %86, %91
  %93 = sdiv i128 %90, %92
  %94 = trunc i128 %93 to i64
  %95 = and i128 %93, 18446744073709551615
  %96 = sext i64 %94 to i128
  %97 = and i128 %96, -18446744073709551616
  %98 = or i128 %97, %95
  %99 = icmp eq i128 %93, %98
  br i1 %99, label %102, label %100

; <label>:100:                                    ; preds = %block_404010
  %101 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %84, %struct.Memory* %2) #9
  %.pre = load i64, i64* %RAX, align 8
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:102:                                    ; preds = %block_404010
  %103 = srem i128 %90, %92
  %104 = trunc i128 %103 to i64
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  store i64 %104, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %102, %100
  %105 = phi i64 [ %.pre2, %100 ], [ %76, %102 ]
  %106 = phi i64 [ %.pre1, %100 ], [ %84, %102 ]
  %107 = phi i64 [ %.pre, %100 ], [ %94, %102 ]
  %108 = phi %struct.Memory* [ %101, %100 ], [ %2, %102 ]
  %109 = add i64 %107, -1
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = icmp eq i64 %107, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2446
  %118 = xor i64 %107, %109
  %119 = lshr i64 %118, 4
  %120 = trunc i64 %119 to i8
  %121 = and i8 %120, 1
  store i8 %121, i8* %25, align 1, !tbaa !2447
  %122 = icmp eq i64 %109, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %28, align 1, !tbaa !2448
  %124 = lshr i64 %109, 63
  %125 = trunc i64 %124 to i8
  store i8 %125, i8* %31, align 1, !tbaa !2449
  %126 = lshr i64 %107, 63
  %127 = xor i64 %124, %126
  %128 = add nuw nsw i64 %127, %126
  %129 = icmp eq i64 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %37, align 1, !tbaa !2450
  %131 = add i64 %105, -24
  %132 = add i64 %106, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  store i64 %109, i64* %133, align 8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %135 = bitcast i64* %134 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_40404b

block_4040fe:                                     ; preds = %block_4040a1
  %136 = load i64, i64* %RSP, align 8
  %137 = add i64 %136, 64
  store i64 %137, i64* %RSP, align 8, !tbaa !2428
  %138 = icmp ugt i64 %136, -65
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %13, align 1, !tbaa !2432
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #8
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %20, align 1, !tbaa !2446
  %146 = xor i64 %136, %137
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  store i8 %149, i8* %25, align 1, !tbaa !2447
  %150 = icmp eq i64 %137, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %28, align 1, !tbaa !2448
  %152 = lshr i64 %137, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* %31, align 1, !tbaa !2449
  %154 = lshr i64 %136, 63
  %155 = xor i64 %152, %154
  %156 = add nuw nsw i64 %155, %152
  %157 = icmp eq i64 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %37, align 1, !tbaa !2450
  %159 = add i64 %419, 5
  store i64 %159, i64* %PC, align 8
  %160 = add i64 %136, 72
  %161 = inttoptr i64 %137 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RBP, align 8, !tbaa !2428
  store i64 %160, i64* %RSP, align 8, !tbaa !2428
  %163 = add i64 %419, 6
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %160 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  %166 = add i64 %136, 80
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404095:                                     ; preds = %block_40404b
  %167 = add i64 %276, -32
  %168 = add i64 %292, 4
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = add i64 %170, -1
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = icmp eq i64 %170, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %13, align 1, !tbaa !2432
  %174 = trunc i64 %171 to i32
  %175 = and i32 %174, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #8
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %20, align 1, !tbaa !2446
  %180 = xor i64 %170, %171
  %181 = lshr i64 %180, 4
  %182 = trunc i64 %181 to i8
  %183 = and i8 %182, 1
  store i8 %183, i8* %25, align 1, !tbaa !2447
  %184 = icmp eq i64 %171, 0
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %28, align 1, !tbaa !2448
  %186 = lshr i64 %171, 63
  %187 = trunc i64 %186 to i8
  store i8 %187, i8* %31, align 1, !tbaa !2449
  %188 = lshr i64 %170, 63
  %189 = xor i64 %186, %188
  %190 = add nuw nsw i64 %189, %188
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %37, align 1, !tbaa !2450
  %193 = add i64 %292, 12
  store i64 %193, i64* %PC, align 8
  store i64 %171, i64* %279, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_4040a1

block_404056:                                     ; preds = %block_40404b
  %194 = add i64 %276, -8
  %195 = add i64 %292, 4
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = add i64 %292, 8
  store i64 %198, i64* %PC, align 8
  %199 = load i64, i64* %279, align 8
  store i64 %199, i64* %RCX, align 8, !tbaa !2428
  %200 = shl i64 %199, 3
  %201 = add i64 %200, %197
  %202 = add i64 %292, 12
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = add i64 %276, -40
  %206 = add i64 %292, 16
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %205 to i64*
  store i64 %204, i64* %207, align 8
  %208 = load i64, i64* %RBP, align 8
  %209 = add i64 %208, -32
  %210 = load i64, i64* %PC, align 8
  %211 = add i64 %210, 4
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %214 = add i64 %208, -8
  %215 = add i64 %210, 8
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  store i64 %217, i64* %RSI, align 8, !tbaa !2428
  %218 = add i64 %208, -24
  %219 = add i64 %210, 12
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %RDX, align 8, !tbaa !2428
  %222 = add i64 %208, -40
  %223 = add i64 %210, 16
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224, align 8
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = add i64 %208, -48
  %227 = add i64 %210, 20
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i64*
  store i64 %225, i64* %228, align 8
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -48
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %234, i64* %235, align 1, !tbaa !2451
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %236 = add i64 %231, 374
  %237 = add i64 %231, 10
  %238 = load i64, i64* %RSP, align 8, !tbaa !2428
  %239 = add i64 %238, -8
  %240 = inttoptr i64 %239 to i64*
  store i64 %237, i64* %240, align 8
  store i64 %239, i64* %RSP, align 8, !tbaa !2428
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  %241 = tail call %struct.Memory* @sub_4041f0__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %236, %struct.Memory* %MEMORY.0)
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -24
  %244 = load i64, i64* %PC, align 8
  %245 = add i64 %244, 4
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %243 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = add i64 %247, -1
  store i64 %248, i64* %RAX, align 8, !tbaa !2428
  %249 = icmp ne i64 %247, 0
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %13, align 1, !tbaa !2432
  %251 = trunc i64 %248 to i32
  %252 = and i32 %251, 255
  %253 = tail call i32 @llvm.ctpop.i32(i32 %252) #8
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  %256 = xor i8 %255, 1
  store i8 %256, i8* %20, align 1, !tbaa !2446
  %257 = xor i64 %247, 16
  %258 = xor i64 %248, %257
  %259 = lshr i64 %258, 4
  %260 = trunc i64 %259 to i8
  %261 = and i8 %260, 1
  store i8 %261, i8* %25, align 1, !tbaa !2447
  %262 = icmp eq i64 %248, 0
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %28, align 1, !tbaa !2448
  %264 = lshr i64 %248, 63
  %265 = trunc i64 %264 to i8
  store i8 %265, i8* %31, align 1, !tbaa !2449
  %266 = lshr i64 %247, 63
  %267 = xor i64 %264, %266
  %268 = xor i64 %264, 1
  %269 = add nuw nsw i64 %267, %268
  %270 = icmp eq i64 %269, 2
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %37, align 1, !tbaa !2450
  %272 = add i64 %244, 12
  store i64 %272, i64* %PC, align 8
  store i64 %248, i64* %246, align 8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, -69
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  br label %block_40404b

block_40404b:                                     ; preds = %block_404056, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %275 = phi i64 [ %.pre3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %274, %block_404056 ]
  %MEMORY.0 = phi %struct.Memory* [ %108, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %241, %block_404056 ]
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -24
  %278 = add i64 %275, 5
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i64*
  %280 = load i64, i64* %279, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %281 = trunc i64 %280 to i32
  %282 = and i32 %281, 255
  %283 = tail call i32 @llvm.ctpop.i32(i32 %282) #8
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  store i8 %286, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %287 = icmp eq i64 %280, 0
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %28, align 1, !tbaa !2448
  %289 = lshr i64 %280, 63
  %290 = trunc i64 %289 to i8
  store i8 %290, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %291 = icmp ne i8 %290, 0
  %.v = select i1 %291, i64 74, i64 11
  %292 = add i64 %275, %.v
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  br i1 %291, label %block_404095, label %block_404056

block_4040ac:                                     ; preds = %block_4040a1
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %293 = add i64 %390, -8
  %294 = add i64 %419, 8
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  %297 = add i64 %419, 12
  store i64 %297, i64* %PC, align 8
  %298 = load i64, i64* %393, align 8
  store i64 %298, i64* %RSI, align 8, !tbaa !2428
  %299 = shl i64 %298, 3
  %300 = add i64 %299, %296
  %301 = add i64 %419, 16
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %300 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %RCX, align 8, !tbaa !2428
  %304 = add i64 %390, -56
  %305 = add i64 %419, 20
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i64*
  store i64 %303, i64* %306, align 8
  %307 = load i64, i64* %RBP, align 8
  %308 = add i64 %307, -8
  %309 = load i64, i64* %PC, align 8
  %310 = add i64 %309, 4
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %308 to i64*
  %312 = load i64, i64* %311, align 8
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = add i64 %309, 8
  store i64 %313, i64* %PC, align 8
  %314 = load i64, i64* %311, align 8
  store i64 %314, i64* %RSI, align 8, !tbaa !2428
  %315 = add i64 %307, -24
  %316 = add i64 %309, 12
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %315 to i64*
  %318 = load i64, i64* %317, align 8
  store i64 %318, i64* %RDI, align 8, !tbaa !2428
  %319 = add i64 %309, 15
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %312 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = shl i64 %318, 3
  %323 = add i64 %322, %314
  %324 = add i64 %309, 19
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  store i64 %321, i64* %325, align 8
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -24
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = add i64 %326, -8
  %333 = add i64 %328, 8
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334, align 8
  store i64 %335, i64* %RSI, align 8, !tbaa !2428
  %336 = add i64 %326, -56
  %337 = add i64 %328, 12
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RCX, align 8, !tbaa !2428
  %340 = add i64 %326, -64
  %341 = add i64 %328, 16
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i64*
  store i64 %339, i64* %342, align 8
  %343 = load i64, i64* %RBP, align 8
  %344 = add i64 %343, -64
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %344 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %348, i64* %349, align 1, !tbaa !2451
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %350 = add i64 %345, 269
  %351 = add i64 %345, 10
  %352 = load i64, i64* %RSP, align 8, !tbaa !2428
  %353 = add i64 %352, -8
  %354 = inttoptr i64 %353 to i64*
  store i64 %351, i64* %354, align 8
  store i64 %353, i64* %RSP, align 8, !tbaa !2428
  store i64 %350, i64* %PC, align 8, !tbaa !2428
  %355 = tail call %struct.Memory* @sub_4041f0__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %350, %struct.Memory* %MEMORY.1)
  %356 = load i64, i64* %RBP, align 8
  %357 = add i64 %356, -24
  %358 = load i64, i64* %PC, align 8
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = add i64 %361, -1
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = icmp ne i64 %361, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %13, align 1, !tbaa !2432
  %365 = trunc i64 %362 to i32
  %366 = and i32 %365, 255
  %367 = tail call i32 @llvm.ctpop.i32(i32 %366) #8
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  store i8 %370, i8* %20, align 1, !tbaa !2446
  %371 = xor i64 %361, 16
  %372 = xor i64 %362, %371
  %373 = lshr i64 %372, 4
  %374 = trunc i64 %373 to i8
  %375 = and i8 %374, 1
  store i8 %375, i8* %25, align 1, !tbaa !2447
  %376 = icmp eq i64 %362, 0
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %28, align 1, !tbaa !2448
  %378 = lshr i64 %362, 63
  %379 = trunc i64 %378 to i8
  store i8 %379, i8* %31, align 1, !tbaa !2449
  %380 = lshr i64 %361, 63
  %381 = xor i64 %378, %380
  %382 = xor i64 %378, 1
  %383 = add nuw nsw i64 %381, %382
  %384 = icmp eq i64 %383, 2
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %37, align 1, !tbaa !2450
  %386 = add i64 %358, 12
  store i64 %386, i64* %PC, align 8
  store i64 %362, i64* %360, align 8
  %387 = load i64, i64* %PC, align 8
  %388 = add i64 %387, -88
  store i64 %388, i64* %PC, align 8, !tbaa !2428
  br label %block_4040a1

block_4040a1:                                     ; preds = %block_4040ac, %block_404095
  %389 = phi i64 [ %.pre4, %block_404095 ], [ %388, %block_4040ac ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_404095 ], [ %355, %block_4040ac ]
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -24
  %392 = add i64 %389, 5
  store i64 %392, i64* %PC, align 8
  %393 = inttoptr i64 %391 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = add i64 %394, -1
  %396 = icmp eq i64 %394, 0
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %13, align 1, !tbaa !2432
  %398 = trunc i64 %395 to i32
  %399 = and i32 %398, 255
  %400 = tail call i32 @llvm.ctpop.i32(i32 %399) #8
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  %403 = xor i8 %402, 1
  store i8 %403, i8* %20, align 1, !tbaa !2446
  %404 = xor i64 %394, %395
  %405 = lshr i64 %404, 4
  %406 = trunc i64 %405 to i8
  %407 = and i8 %406, 1
  store i8 %407, i8* %25, align 1, !tbaa !2447
  %408 = icmp eq i64 %395, 0
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %28, align 1, !tbaa !2448
  %410 = lshr i64 %395, 63
  %411 = trunc i64 %410 to i8
  store i8 %411, i8* %31, align 1, !tbaa !2449
  %412 = lshr i64 %394, 63
  %413 = xor i64 %410, %412
  %414 = add nuw nsw i64 %413, %412
  %415 = icmp eq i64 %414, 2
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %37, align 1, !tbaa !2450
  %417 = icmp ne i8 %411, 0
  %418 = xor i1 %417, %415
  %.v6 = select i1 %418, i64 93, i64 11
  %419 = add i64 %389, %.v6
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  br i1 %418, label %block_4040fe, label %block_4040ac
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401c70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_4030f0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4030f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403120__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403d00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2453
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #8
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2453
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2453
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2453
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = and i64 %55, 1
  %57 = trunc i64 %56 to i8
  store i8 %57, i8* %54, align 1, !tbaa !2453
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2453
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2432
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #8
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2446
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2447
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2448
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2449
  %83 = lshr i64 %62, 63
  %84 = xor i64 %81, %56
  %85 = xor i64 %81, %83
  %86 = add nuw nsw i64 %84, %85
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %58, align 1, !tbaa !2450
  %89 = add i64 %34, 16
  store i64 %89, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -8
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = add i64 %92, 5
  store i64 %96, i64* %PC, align 8
  %97 = load i64, i64* %5, align 8, !tbaa !2428
  %98 = add i64 %97, 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RBP, align 8, !tbaa !2428
  store i64 %98, i64* %5, align 8, !tbaa !2428
  %101 = add i64 %92, 6
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %98 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  %104 = add i64 %97, 16
  store i64 %104, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b40___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %.b = load i1, i1* @seg_609100__bss.0.0, align 8
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = zext i1 %.b to i32
  %5 = tail call i32 @llvm.ctpop.i32(i32 %4) #8
  %6 = trunc i32 %5 to i8
  %7 = xor i8 %6, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7, i8* %8, align 1, !tbaa !2446
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !2447
  %10 = xor i1 %.b, true
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11, i8* %12, align 1, !tbaa !2448
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !2449
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !2450
  %.v = select i1 %.b, i64 32, i64 9
  %15 = add i64 %.v, %1
  store i64 %15, i64* %PC, align 8, !tbaa !2428
  br i1 %.b, label %block_400b60, label %block_400b49

block_400b60:                                     ; preds = %block_400b40
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !2428
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %21 = add i64 %18, 8
  store i64 %21, i64* %17, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400b49:                                     ; preds = %block_400b40
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %15, 1
  store i64 %23, i64* %PC, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %22, i64* %27, align 8
  %28 = load i64, i64* %PC, align 8
  store i64 %26, i64* %RBP, align 8, !tbaa !2428
  %29 = add i64 %28, -122
  %30 = add i64 %28, 8
  %31 = add i64 %25, -16
  %32 = inttoptr i64 %31 to i64*
  store i64 %30, i64* %32, align 8
  store i64 %31, i64* %24, align 8, !tbaa !2428
  store i64 %29, i64* %PC, align 8, !tbaa !2428
  %33 = tail call %struct.Memory* @sub_400ad0_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %29, %struct.Memory* %2)
  %34 = load i64, i64* %PC, align 8
  store i1 true, i1* @seg_609100__bss.0.0, align 8
  %35 = add i64 %34, 8
  store i64 %35, i64* %PC, align 8
  %36 = load i64, i64* %24, align 8, !tbaa !2428
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  store i64 %37, i64* %24, align 8, !tbaa !2428
  %40 = add i64 %34, 9
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = add i64 %36, 16
  store i64 %43, i64* %24, align 8, !tbaa !2428
  ret %struct.Memory* %33
}

; Function Attrs: noinline
define %struct.Memory* @sub_403090__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403090:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4030c0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_4023e0__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4023e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402408

block_402489:                                     ; preds = %block_402408
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402418:                                     ; preds = %block_402408
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 5376
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403930__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 13487
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405900__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 5778
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402408

block_402408:                                     ; preds = %block_402418, %block_4023e0
  %255 = phi i64 [ %.pre, %block_4023e0 ], [ %254, %block_402418 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4023e0 ], [ %222, %block_402418 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402418, label %block_402489
}

; Function Attrs: noinline
define %struct.Memory* @sub_403780__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403780:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = add i64 %10, 12
  store i64 %40, i64* %PC, align 8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RSI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = shl i64 %77, 1
  %79 = icmp slt i64 %77, 0
  %80 = icmp slt i64 %78, 0
  %81 = xor i1 %79, %80
  store i64 %78, i64* %RDX, align 8, !tbaa !2428
  %.lobit = lshr i64 %77, 63
  %82 = trunc i64 %.lobit to i8
  store i8 %82, i8* %14, align 1, !tbaa !2453
  %83 = trunc i64 %78 to i32
  %84 = and i32 %83, 254
  %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #8
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = xor i8 %87, 1
  store i8 %88, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %29, align 1, !tbaa !2453
  %91 = lshr i64 %77, 62
  %92 = trunc i64 %91 to i8
  %93 = and i8 %92, 1
  store i8 %93, i8* %32, align 1, !tbaa !2453
  %94 = zext i1 %81 to i8
  store i8 %94, i8* %38, align 1, !tbaa !2453
  %95 = add i64 %71, -40
  %96 = add i64 %73, 16
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i64*
  store i64 %78, i64* %97, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4037b1

block_4037bf:                                     ; preds = %block_4037b1
  %98 = add i64 %314, -24
  %99 = add i64 %350, 4
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = add i64 %350, 8
  store i64 %102, i64* %PC, align 8
  %103 = load i64, i64* %317, align 8
  %104 = shl i64 %103, 3
  %105 = add i64 %104, -8
  store i64 %105, i64* %RCX, align 8, !tbaa !2428
  %106 = lshr i64 %105, 63
  %107 = add i64 %105, %101
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = icmp ult i64 %107, %101
  %109 = icmp ult i64 %107, %105
  %110 = or i1 %108, %109
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %14, align 1, !tbaa !2432
  %112 = trunc i64 %107 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %21, align 1, !tbaa !2446
  %118 = xor i64 %105, %101
  %119 = xor i64 %118, %107
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %107, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %107, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %101, 63
  %128 = xor i64 %125, %127
  %129 = xor i64 %125, %106
  %130 = add nuw nsw i64 %128, %129
  %131 = icmp eq i64 %130, 2
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %38, align 1, !tbaa !2450
  %133 = add i64 %350, 23
  store i64 %133, i64* %PC, align 8
  %134 = load i64, i64* %100, align 8
  store i64 %134, i64* %RCX, align 8, !tbaa !2428
  %135 = add i64 %350, 27
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %317, align 8
  %137 = shl i64 %136, 3
  store i64 %137, i64* %RDX, align 8, !tbaa !2428
  %138 = lshr i64 %136, 60
  %139 = and i64 %138, 1
  %140 = add i64 %137, %134
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = icmp ult i64 %140, %134
  %142 = icmp ult i64 %140, %137
  %143 = or i1 %141, %142
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %14, align 1, !tbaa !2432
  %145 = trunc i64 %140 to i32
  %146 = and i32 %145, 255
  %147 = tail call i32 @llvm.ctpop.i32(i32 %146) #8
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  store i8 %150, i8* %21, align 1, !tbaa !2446
  %151 = xor i64 %137, %134
  %152 = xor i64 %151, %140
  %153 = lshr i64 %152, 4
  %154 = trunc i64 %153 to i8
  %155 = and i8 %154, 1
  store i8 %155, i8* %26, align 1, !tbaa !2447
  %156 = icmp eq i64 %140, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %29, align 1, !tbaa !2448
  %158 = lshr i64 %140, 63
  %159 = trunc i64 %158 to i8
  store i8 %159, i8* %32, align 1, !tbaa !2449
  %160 = lshr i64 %134, 63
  %161 = xor i64 %158, %160
  %162 = xor i64 %158, %139
  %163 = add nuw nsw i64 %161, %162
  %164 = icmp eq i64 %163, 2
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %38, align 1, !tbaa !2450
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  store i64 %140, i64* %RSI, align 8, !tbaa !2428
  %166 = add i64 %350, -1887
  %167 = add i64 %350, 45
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %166, %struct.Memory* %MEMORY.1)
  %172 = load i8, i8* %AL, align 1
  %173 = load i64, i64* %PC, align 8
  %174 = and i8 %172, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %175 = zext i8 %174 to i32
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #8
  %177 = trunc i32 %176 to i8
  %178 = xor i8 %177, 1
  store i8 %178, i8* %21, align 1, !tbaa !2446
  %179 = xor i8 %174, 1
  store i8 %179, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %180 = icmp eq i8 %179, 0
  %.v13 = select i1 %180, i64 13, i64 8
  %181 = add i64 %173, %.v13
  store i64 %181, i64* %PC, align 8, !tbaa !2428
  br i1 %180, label %block_4037f9, label %block_4037f4

block_4037f9:                                     ; preds = %block_4037bf
  %182 = load i64, i64* %RBP, align 8
  %183 = add i64 %182, -40
  %184 = add i64 %181, 4
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i64*
  %186 = load i64, i64* %185, align 8
  %187 = add i64 %186, 1
  store i64 %187, i64* %RAX, align 8, !tbaa !2428
  %188 = icmp eq i64 %186, -1
  %189 = icmp eq i64 %187, 0
  %190 = or i1 %188, %189
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %14, align 1, !tbaa !2432
  %192 = trunc i64 %187 to i32
  %193 = and i32 %192, 255
  %194 = tail call i32 @llvm.ctpop.i32(i32 %193) #8
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  %197 = xor i8 %196, 1
  store i8 %197, i8* %21, align 1, !tbaa !2446
  %198 = xor i64 %186, %187
  %199 = lshr i64 %198, 4
  %200 = trunc i64 %199 to i8
  %201 = and i8 %200, 1
  store i8 %201, i8* %26, align 1, !tbaa !2447
  %202 = zext i1 %189 to i8
  store i8 %202, i8* %29, align 1, !tbaa !2448
  %203 = lshr i64 %187, 63
  %204 = trunc i64 %203 to i8
  store i8 %204, i8* %32, align 1, !tbaa !2449
  %205 = lshr i64 %186, 63
  %206 = xor i64 %203, %205
  %207 = add nuw nsw i64 %206, %203
  %208 = icmp eq i64 %207, 2
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %38, align 1, !tbaa !2450
  %210 = add i64 %181, 12
  store i64 %210, i64* %PC, align 8
  store i64 %187, i64* %185, align 8
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_403805

block_403874:                                     ; preds = %block_40383e, %block_40384c
  %211 = phi i64 [ %.pre4, %block_40384c ], [ %314, %block_40383e ]
  %212 = phi i64 [ %.pre3, %block_40384c ], [ %589, %block_40383e ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %213 = add i64 %211, -48
  %214 = add i64 %212, 11
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = add i64 %216, -1
  %218 = icmp eq i64 %216, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %14, align 1, !tbaa !2432
  %220 = trunc i64 %217 to i32
  %221 = and i32 %220, 255
  %222 = tail call i32 @llvm.ctpop.i32(i32 %221) #8
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  store i8 %225, i8* %21, align 1, !tbaa !2446
  %226 = xor i64 %216, %217
  %227 = lshr i64 %226, 4
  %228 = trunc i64 %227 to i8
  %229 = and i8 %228, 1
  store i8 %229, i8* %26, align 1, !tbaa !2447
  %230 = icmp eq i64 %217, 0
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %29, align 1, !tbaa !2448
  %232 = lshr i64 %217, 63
  %233 = trunc i64 %232 to i8
  store i8 %233, i8* %32, align 1, !tbaa !2449
  %234 = lshr i64 %216, 63
  %235 = xor i64 %232, %234
  %236 = add nuw nsw i64 %235, %234
  %237 = icmp eq i64 %236, 2
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %38, align 1, !tbaa !2450
  store i64 %217, i64* %RAX, align 8, !tbaa !2428
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %240 = ashr i64 %217, 63
  store i64 %240, i64* %RDX, align 8, !tbaa !2428
  %241 = add i64 %212, 23
  store i64 %241, i64* %PC, align 8
  %242 = zext i64 %240 to i128
  %243 = shl nuw i128 %242, 64
  %244 = zext i64 %217 to i128
  %245 = or i128 %243, %244
  %246 = sdiv i128 %245, 2
  %247 = trunc i128 %246 to i64
  %248 = and i128 %246, 18446744073709551615
  %249 = sext i64 %247 to i128
  %250 = and i128 %249, -18446744073709551616
  %251 = or i128 %250, %248
  %252 = icmp eq i128 %246, %251
  br i1 %252, label %255, label %253

; <label>:253:                                    ; preds = %block_403874
  %254 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %241, %struct.Memory* %MEMORY.1) #9
  %.pre5 = load i64, i64* %RBP, align 8
  %.pre6 = load i64, i64* %RAX, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:255:                                    ; preds = %block_403874
  %256 = srem i128 %245, 2
  %257 = trunc i128 %256 to i64
  store i64 %247, i64* %239, align 8, !tbaa !2428
  store i64 %257, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %255, %253
  %258 = phi i64 [ %.pre7, %253 ], [ %241, %255 ]
  %259 = phi i64 [ %.pre6, %253 ], [ %247, %255 ]
  %260 = phi i64 [ %.pre5, %253 ], [ %211, %255 ]
  %261 = phi %struct.Memory* [ %254, %253 ], [ %MEMORY.1, %255 ]
  %262 = add i64 %260, -40
  %263 = add i64 %258, 4
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %262 to i64*
  store i64 %259, i64* %264, align 8
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_40388f

block_4038cd:                                     ; preds = %block_4038c2
  %265 = add i64 %690, -24
  %266 = add i64 %702, 73
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = add i64 %690, -48
  %270 = add i64 %702, 77
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271, align 8
  store i64 %272, i64* %RCX, align 8, !tbaa !2428
  %273 = add i64 %690, -8
  %274 = add i64 %702, 81
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RDX, align 8, !tbaa !2428
  %277 = shl i64 %272, 3
  %278 = add i64 %277, %268
  %279 = add i64 %702, 85
  store i64 %279, i64* %PC, align 8
  %280 = inttoptr i64 %278 to i64*
  store i64 %276, i64* %280, align 8
  %281 = load i64, i64* %RSP, align 8
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %281, 64
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  %284 = icmp ugt i64 %281, -65
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %14, align 1, !tbaa !2432
  %286 = trunc i64 %283 to i32
  %287 = and i32 %286, 255
  %288 = tail call i32 @llvm.ctpop.i32(i32 %287) #8
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  store i8 %291, i8* %21, align 1, !tbaa !2446
  %292 = xor i64 %281, %283
  %293 = lshr i64 %292, 4
  %294 = trunc i64 %293 to i8
  %295 = and i8 %294, 1
  store i8 %295, i8* %26, align 1, !tbaa !2447
  %296 = icmp eq i64 %283, 0
  %297 = zext i1 %296 to i8
  store i8 %297, i8* %29, align 1, !tbaa !2448
  %298 = lshr i64 %283, 63
  %299 = trunc i64 %298 to i8
  store i8 %299, i8* %32, align 1, !tbaa !2449
  %300 = lshr i64 %281, 63
  %301 = xor i64 %298, %300
  %302 = add nuw nsw i64 %301, %298
  %303 = icmp eq i64 %302, 2
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %38, align 1, !tbaa !2450
  %305 = add i64 %282, 5
  store i64 %305, i64* %PC, align 8
  %306 = add i64 %281, 72
  %307 = inttoptr i64 %283 to i64*
  %308 = load i64, i64* %307, align 8
  store i64 %308, i64* %RBP, align 8, !tbaa !2428
  store i64 %306, i64* %RSP, align 8, !tbaa !2428
  %309 = add i64 %282, 6
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %306 to i64*
  %311 = load i64, i64* %310, align 8
  store i64 %311, i64* %PC, align 8, !tbaa !2428
  %312 = add i64 %281, 80
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_4037b1:                                     ; preds = %block_403805, %block_403780
  %313 = phi i64 [ %.pre, %block_403780 ], [ %559, %block_403805 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_403780 ], [ %171, %block_403805 ]
  %314 = load i64, i64* %RBP, align 8
  %315 = add i64 %314, -40
  %316 = add i64 %313, 4
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %315 to i64*
  %318 = load i64, i64* %317, align 8
  store i64 %318, i64* %RAX, align 8, !tbaa !2428
  %319 = add i64 %314, -16
  %320 = add i64 %313, 8
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = sub i64 %318, %322
  %324 = icmp ult i64 %318, %322
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %14, align 1, !tbaa !2432
  %326 = trunc i64 %323 to i32
  %327 = and i32 %326, 255
  %328 = tail call i32 @llvm.ctpop.i32(i32 %327) #8
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = xor i8 %330, 1
  store i8 %331, i8* %21, align 1, !tbaa !2446
  %332 = xor i64 %322, %318
  %333 = xor i64 %332, %323
  %334 = lshr i64 %333, 4
  %335 = trunc i64 %334 to i8
  %336 = and i8 %335, 1
  store i8 %336, i8* %26, align 1, !tbaa !2447
  %337 = icmp eq i64 %323, 0
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %29, align 1, !tbaa !2448
  %339 = lshr i64 %323, 63
  %340 = trunc i64 %339 to i8
  store i8 %340, i8* %32, align 1, !tbaa !2449
  %341 = lshr i64 %318, 63
  %342 = lshr i64 %322, 63
  %343 = xor i64 %342, %341
  %344 = xor i64 %339, %341
  %345 = add nuw nsw i64 %344, %343
  %346 = icmp eq i64 %345, 2
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %38, align 1, !tbaa !2450
  %348 = icmp ne i8 %340, 0
  %349 = xor i1 %348, %346
  %.v = select i1 %349, i64 14, i64 141
  %350 = add i64 %313, %.v
  store i64 %350, i64* %PC, align 8, !tbaa !2428
  br i1 %349, label %block_4037bf, label %block_40383e

block_4038d2:                                     ; preds = %block_4038c2
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %351 = add i64 %690, -24
  %352 = add i64 %702, 11
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %RDX, align 8, !tbaa !2428
  %355 = add i64 %690, -40
  %356 = add i64 %702, 15
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %RSI, align 8, !tbaa !2428
  %359 = add i64 %702, 19
  store i64 %359, i64* %PC, align 8
  %360 = load i64, i64* %353, align 8
  store i64 %360, i64* %RDI, align 8, !tbaa !2428
  %361 = add i64 %690, -48
  %362 = add i64 %702, 23
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %R8, align 8, !tbaa !2428
  %365 = shl i64 %358, 3
  %366 = add i64 %365, %354
  %367 = add i64 %702, 27
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i64*
  %369 = load i64, i64* %368, align 8
  store i64 %369, i64* %RDX, align 8, !tbaa !2428
  %370 = shl i64 %364, 3
  %371 = add i64 %370, %360
  %372 = add i64 %702, 31
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i64*
  store i64 %369, i64* %373, align 8
  %374 = load i64, i64* %RBP, align 8
  %375 = add i64 %374, -40
  %376 = load i64, i64* %PC, align 8
  %377 = add i64 %376, 4
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %375 to i64*
  %379 = load i64, i64* %378, align 8
  store i64 %379, i64* %RDX, align 8, !tbaa !2428
  %380 = add i64 %374, -48
  %381 = add i64 %376, 8
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %380 to i64*
  store i64 %379, i64* %382, align 8
  %383 = load i64, i64* %RBP, align 8
  %384 = add i64 %383, -48
  %385 = load i64, i64* %PC, align 8
  %386 = add i64 %385, 4
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %384 to i64*
  %388 = load i64, i64* %387, align 8
  %389 = add i64 %388, -1
  %390 = icmp eq i64 %388, 0
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %14, align 1, !tbaa !2432
  %392 = trunc i64 %389 to i32
  %393 = and i32 %392, 255
  %394 = tail call i32 @llvm.ctpop.i32(i32 %393) #8
  %395 = trunc i32 %394 to i8
  %396 = and i8 %395, 1
  %397 = xor i8 %396, 1
  store i8 %397, i8* %21, align 1, !tbaa !2446
  %398 = xor i64 %388, %389
  %399 = lshr i64 %398, 4
  %400 = trunc i64 %399 to i8
  %401 = and i8 %400, 1
  store i8 %401, i8* %26, align 1, !tbaa !2447
  %402 = icmp eq i64 %389, 0
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %29, align 1, !tbaa !2448
  %404 = lshr i64 %389, 63
  %405 = trunc i64 %404 to i8
  store i8 %405, i8* %32, align 1, !tbaa !2449
  %406 = lshr i64 %388, 63
  %407 = xor i64 %404, %406
  %408 = add nuw nsw i64 %407, %406
  %409 = icmp eq i64 %408, 2
  %410 = zext i1 %409 to i8
  store i8 %410, i8* %38, align 1, !tbaa !2450
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %411 = ashr i64 %389, 63
  store i64 %411, i64* %RDX, align 8, !tbaa !2428
  %412 = load i64, i64* %RCX, align 8
  %413 = add i64 %385, 16
  store i64 %413, i64* %PC, align 8
  %414 = sext i64 %412 to i128
  %415 = and i128 %414, -18446744073709551616
  %416 = zext i64 %411 to i128
  %417 = shl nuw i128 %416, 64
  %418 = zext i64 %389 to i128
  %419 = or i128 %417, %418
  %420 = zext i64 %412 to i128
  %421 = or i128 %415, %420
  %422 = sdiv i128 %419, %421
  %423 = trunc i128 %422 to i64
  %424 = and i128 %422, 18446744073709551615
  %425 = sext i64 %423 to i128
  %426 = and i128 %425, -18446744073709551616
  %427 = or i128 %426, %424
  %428 = icmp eq i128 %422, %427
  br i1 %428, label %431, label %429

; <label>:429:                                    ; preds = %block_4038d2
  %430 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %413, %struct.Memory* %MEMORY.4) #9
  %.pre10 = load i64, i64* %RBP, align 8
  %.pre11 = load i64, i64* %RAX, align 8
  %.pre12 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:431:                                    ; preds = %block_4038d2
  %432 = srem i128 %419, %421
  %433 = trunc i128 %432 to i64
  store i64 %423, i64* %239, align 8, !tbaa !2428
  store i64 %433, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %431, %429
  %434 = phi i64 [ %.pre12, %429 ], [ %413, %431 ]
  %435 = phi i64 [ %.pre11, %429 ], [ %423, %431 ]
  %436 = phi i64 [ %.pre10, %429 ], [ %383, %431 ]
  %437 = phi %struct.Memory* [ %430, %429 ], [ %MEMORY.4, %431 ]
  %438 = add i64 %436, -40
  %439 = add i64 %434, 4
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %438 to i64*
  store i64 %435, i64* %440, align 8
  %441 = load i64, i64* %PC, align 8
  %442 = add i64 %441, -126
  store i64 %442, i64* %PC, align 8, !tbaa !2428
  br label %block_40388f

block_4037f4:                                     ; preds = %block_4037bf
  %443 = add i64 %181, 17
  store i64 %443, i64* %PC, align 8, !tbaa !2428
  br label %block_403805

block_403805:                                     ; preds = %block_4037f4, %block_4037f9
  %444 = phi i64 [ %443, %block_4037f4 ], [ %.pre2, %block_4037f9 ]
  %445 = load i64, i64* %RBP, align 8
  %446 = add i64 %445, -24
  %447 = add i64 %444, 4
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %446 to i64*
  %449 = load i64, i64* %448, align 8
  store i64 %449, i64* %RAX, align 8, !tbaa !2428
  %450 = add i64 %445, -40
  %451 = add i64 %444, 8
  store i64 %451, i64* %PC, align 8
  %452 = inttoptr i64 %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = add i64 %453, -1
  store i64 %454, i64* %RCX, align 8, !tbaa !2428
  %455 = icmp eq i64 %453, 0
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %14, align 1, !tbaa !2432
  %457 = trunc i64 %454 to i32
  %458 = and i32 %457, 255
  %459 = tail call i32 @llvm.ctpop.i32(i32 %458) #8
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* %21, align 1, !tbaa !2446
  %463 = xor i64 %453, %454
  %464 = lshr i64 %463, 4
  %465 = trunc i64 %464 to i8
  %466 = and i8 %465, 1
  store i8 %466, i8* %26, align 1, !tbaa !2447
  %467 = icmp eq i64 %454, 0
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %29, align 1, !tbaa !2448
  %469 = lshr i64 %454, 63
  %470 = trunc i64 %469 to i8
  store i8 %470, i8* %32, align 1, !tbaa !2449
  %471 = lshr i64 %453, 63
  %472 = xor i64 %469, %471
  %473 = add nuw nsw i64 %472, %471
  %474 = icmp eq i64 %473, 2
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %38, align 1, !tbaa !2450
  %476 = add i64 %444, 16
  store i64 %476, i64* %PC, align 8
  %477 = load i64, i64* %448, align 8
  store i64 %477, i64* %RDX, align 8, !tbaa !2428
  %478 = add i64 %445, -48
  %479 = add i64 %444, 20
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %478 to i64*
  %481 = load i64, i64* %480, align 8
  store i64 %481, i64* %RSI, align 8, !tbaa !2428
  %482 = shl i64 %454, 3
  %483 = add i64 %482, %449
  %484 = add i64 %444, 24
  store i64 %484, i64* %PC, align 8
  %485 = inttoptr i64 %483 to i64*
  %486 = load i64, i64* %485, align 8
  store i64 %486, i64* %RAX, align 8, !tbaa !2428
  %487 = shl i64 %481, 3
  %488 = add i64 %487, %477
  %489 = add i64 %444, 28
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %488 to i64*
  store i64 %486, i64* %490, align 8
  %491 = load i64, i64* %RBP, align 8
  %492 = add i64 %491, -40
  %493 = load i64, i64* %PC, align 8
  %494 = add i64 %493, 4
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %492 to i64*
  %496 = load i64, i64* %495, align 8
  %497 = add i64 %496, -1
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = icmp eq i64 %496, 0
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %14, align 1, !tbaa !2432
  %500 = trunc i64 %497 to i32
  %501 = and i32 %500, 255
  %502 = tail call i32 @llvm.ctpop.i32(i32 %501) #8
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = xor i8 %504, 1
  store i8 %505, i8* %21, align 1, !tbaa !2446
  %506 = xor i64 %496, %497
  %507 = lshr i64 %506, 4
  %508 = trunc i64 %507 to i8
  %509 = and i8 %508, 1
  store i8 %509, i8* %26, align 1, !tbaa !2447
  %510 = icmp eq i64 %497, 0
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %29, align 1, !tbaa !2448
  %512 = lshr i64 %497, 63
  %513 = trunc i64 %512 to i8
  store i8 %513, i8* %32, align 1, !tbaa !2449
  %514 = lshr i64 %496, 63
  %515 = xor i64 %512, %514
  %516 = add nuw nsw i64 %515, %514
  %517 = icmp eq i64 %516, 2
  %518 = zext i1 %517 to i8
  store i8 %518, i8* %38, align 1, !tbaa !2450
  %519 = add i64 %491, -48
  %520 = add i64 %493, 12
  store i64 %520, i64* %PC, align 8
  %521 = inttoptr i64 %519 to i64*
  store i64 %497, i64* %521, align 8
  %522 = load i64, i64* %RBP, align 8
  %523 = add i64 %522, -40
  %524 = load i64, i64* %PC, align 8
  %525 = add i64 %524, 4
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %523 to i64*
  %527 = load i64, i64* %526, align 8
  store i64 %527, i64* %RAX, align 8, !tbaa !2428
  %528 = add i64 %524, 8
  store i64 %528, i64* %PC, align 8
  %529 = load i64, i64* %526, align 8
  %530 = add i64 %529, %527
  store i64 %530, i64* %RAX, align 8, !tbaa !2428
  %531 = icmp ult i64 %530, %527
  %532 = icmp ult i64 %530, %529
  %533 = or i1 %531, %532
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %14, align 1, !tbaa !2432
  %535 = trunc i64 %530 to i32
  %536 = and i32 %535, 255
  %537 = tail call i32 @llvm.ctpop.i32(i32 %536) #8
  %538 = trunc i32 %537 to i8
  %539 = and i8 %538, 1
  %540 = xor i8 %539, 1
  store i8 %540, i8* %21, align 1, !tbaa !2446
  %541 = xor i64 %529, %527
  %542 = xor i64 %541, %530
  %543 = lshr i64 %542, 4
  %544 = trunc i64 %543 to i8
  %545 = and i8 %544, 1
  store i8 %545, i8* %26, align 1, !tbaa !2447
  %546 = icmp eq i64 %530, 0
  %547 = zext i1 %546 to i8
  store i8 %547, i8* %29, align 1, !tbaa !2448
  %548 = lshr i64 %530, 63
  %549 = trunc i64 %548 to i8
  store i8 %549, i8* %32, align 1, !tbaa !2449
  %550 = lshr i64 %527, 63
  %551 = lshr i64 %529, 63
  %552 = xor i64 %548, %550
  %553 = xor i64 %548, %551
  %554 = add nuw nsw i64 %552, %553
  %555 = icmp eq i64 %554, 2
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %38, align 1, !tbaa !2450
  %557 = add i64 %524, 12
  store i64 %557, i64* %PC, align 8
  store i64 %530, i64* %526, align 8
  %558 = load i64, i64* %PC, align 8
  %559 = add i64 %558, -136
  store i64 %559, i64* %PC, align 8, !tbaa !2428
  br label %block_4037b1

block_40383e:                                     ; preds = %block_4037b1
  %560 = add i64 %350, 4
  store i64 %560, i64* %PC, align 8
  %561 = load i64, i64* %317, align 8
  store i64 %561, i64* %RAX, align 8, !tbaa !2428
  %562 = add i64 %350, 8
  store i64 %562, i64* %PC, align 8
  %563 = load i64, i64* %321, align 8
  %564 = sub i64 %561, %563
  %565 = icmp ult i64 %561, %563
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %14, align 1, !tbaa !2432
  %567 = trunc i64 %564 to i32
  %568 = and i32 %567, 255
  %569 = tail call i32 @llvm.ctpop.i32(i32 %568) #8
  %570 = trunc i32 %569 to i8
  %571 = and i8 %570, 1
  %572 = xor i8 %571, 1
  store i8 %572, i8* %21, align 1, !tbaa !2446
  %573 = xor i64 %563, %561
  %574 = xor i64 %573, %564
  %575 = lshr i64 %574, 4
  %576 = trunc i64 %575 to i8
  %577 = and i8 %576, 1
  store i8 %577, i8* %26, align 1, !tbaa !2447
  %578 = icmp eq i64 %564, 0
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %29, align 1, !tbaa !2448
  %580 = lshr i64 %564, 63
  %581 = trunc i64 %580 to i8
  store i8 %581, i8* %32, align 1, !tbaa !2449
  %582 = lshr i64 %561, 63
  %583 = lshr i64 %563, 63
  %584 = xor i64 %583, %582
  %585 = xor i64 %580, %582
  %586 = add nuw nsw i64 %585, %584
  %587 = icmp eq i64 %586, 2
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %38, align 1, !tbaa !2450
  %.v14 = select i1 %578, i64 14, i64 54
  %589 = add i64 %350, %.v14
  store i64 %589, i64* %PC, align 8, !tbaa !2428
  br i1 %578, label %block_40384c, label %block_403874

block_4038a4:                                     ; preds = %block_40388f
  %590 = load i64, i64* %RBP, align 8
  %591 = add i64 %590, -8
  store i64 %591, i64* %RSI, align 8, !tbaa !2428
  %592 = add i64 %590, -24
  %593 = add i64 %688, 8
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %592 to i64*
  %595 = load i64, i64* %594, align 8
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = add i64 %590, -40
  %597 = add i64 %688, 12
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %596 to i64*
  %599 = load i64, i64* %598, align 8
  %600 = shl i64 %599, 3
  store i64 %600, i64* %RCX, align 8, !tbaa !2428
  %601 = lshr i64 %599, 60
  %602 = and i64 %601, 1
  %603 = add i64 %600, %595
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = icmp ult i64 %603, %595
  %605 = icmp ult i64 %603, %600
  %606 = or i1 %604, %605
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %14, align 1, !tbaa !2432
  %608 = trunc i64 %603 to i32
  %609 = and i32 %608, 255
  %610 = tail call i32 @llvm.ctpop.i32(i32 %609) #8
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  %613 = xor i8 %612, 1
  store i8 %613, i8* %21, align 1, !tbaa !2446
  %614 = xor i64 %600, %595
  %615 = xor i64 %614, %603
  %616 = lshr i64 %615, 4
  %617 = trunc i64 %616 to i8
  %618 = and i8 %617, 1
  store i8 %618, i8* %26, align 1, !tbaa !2447
  %619 = icmp eq i64 %603, 0
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %29, align 1, !tbaa !2448
  %621 = lshr i64 %603, 63
  %622 = trunc i64 %621 to i8
  store i8 %622, i8* %32, align 1, !tbaa !2449
  %623 = lshr i64 %595, 63
  %624 = xor i64 %621, %623
  %625 = xor i64 %621, %602
  %626 = add nuw nsw i64 %624, %625
  %627 = icmp eq i64 %626, 2
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %38, align 1, !tbaa !2450
  store i64 %603, i64* %RDI, align 8, !tbaa !2428
  %629 = add i64 %688, -2116
  %630 = add i64 %688, 27
  %631 = load i64, i64* %RSP, align 8, !tbaa !2428
  %632 = add i64 %631, -8
  %633 = inttoptr i64 %632 to i64*
  store i64 %630, i64* %633, align 8
  store i64 %632, i64* %RSP, align 8, !tbaa !2428
  store i64 %629, i64* %PC, align 8, !tbaa !2428
  %634 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %629, %struct.Memory* %MEMORY.3)
  %635 = load i64, i64* %RBP, align 8
  %636 = add i64 %635, -49
  %637 = load i8, i8* %AL, align 1
  %638 = load i64, i64* %PC, align 8
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %636 to i8*
  store i8 %637, i8* %640, align 1
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_4038c2

block_40388f:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %641 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %442, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.3 = phi %struct.Memory* [ %261, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %437, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %642 = load i64, i64* %RBP, align 8
  %643 = add i64 %642, -48
  %644 = add i64 %641, 8
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to i64*
  %646 = load i64, i64* %645, align 8
  store i64 %646, i64* %RDX, align 8, !tbaa !2428
  %647 = add i64 %642, -32
  %648 = add i64 %641, 12
  store i64 %648, i64* %PC, align 8
  %649 = inttoptr i64 %647 to i64*
  %650 = load i64, i64* %649, align 8
  %651 = sub i64 %646, %650
  %652 = icmp ult i64 %646, %650
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %14, align 1, !tbaa !2432
  %654 = trunc i64 %651 to i32
  %655 = and i32 %654, 255
  %656 = tail call i32 @llvm.ctpop.i32(i32 %655) #8
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  %659 = xor i8 %658, 1
  store i8 %659, i8* %21, align 1, !tbaa !2446
  %660 = xor i64 %650, %646
  %661 = xor i64 %660, %651
  %662 = lshr i64 %661, 4
  %663 = trunc i64 %662 to i8
  %664 = and i8 %663, 1
  store i8 %664, i8* %26, align 1, !tbaa !2447
  %665 = icmp eq i64 %651, 0
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %29, align 1, !tbaa !2448
  %667 = lshr i64 %651, 63
  %668 = trunc i64 %667 to i8
  store i8 %668, i8* %32, align 1, !tbaa !2449
  %669 = lshr i64 %646, 63
  %670 = lshr i64 %650, 63
  %671 = xor i64 %670, %669
  %672 = xor i64 %667, %669
  %673 = add nuw nsw i64 %672, %671
  %674 = icmp eq i64 %673, 2
  %675 = zext i1 %674 to i8
  store i8 %675, i8* %38, align 1, !tbaa !2450
  %676 = add i64 %642, -49
  %677 = add i64 %641, 15
  store i64 %677, i64* %PC, align 8
  %678 = inttoptr i64 %676 to i8*
  store i8 0, i8* %678, align 1
  %679 = load i64, i64* %PC, align 8
  %680 = load i8, i8* %29, align 1, !tbaa !2448
  %681 = icmp ne i8 %680, 0
  %682 = load i8, i8* %32, align 1, !tbaa !2449
  %683 = icmp ne i8 %682, 0
  %684 = load i8, i8* %38, align 1, !tbaa !2450
  %685 = icmp ne i8 %684, 0
  %686 = xor i1 %683, %685
  %687 = or i1 %681, %686
  %.v15 = select i1 %687, i64 36, i64 6
  %688 = add i64 %679, %.v15
  store i64 %688, i64* %PC, align 8, !tbaa !2428
  br i1 %687, label %block_4038c2, label %block_4038a4

block_4038c2:                                     ; preds = %block_40388f, %block_4038a4
  %689 = phi i64 [ %688, %block_40388f ], [ %.pre9, %block_4038a4 ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_40388f ], [ %634, %block_4038a4 ]
  %690 = load i64, i64* %RBP, align 8
  %691 = add i64 %690, -49
  %692 = add i64 %689, 3
  store i64 %692, i64* %PC, align 8
  %693 = inttoptr i64 %691 to i8*
  %694 = load i8, i8* %693, align 1
  store i8 %694, i8* %AL, align 1, !tbaa !2453
  %695 = and i8 %694, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %696 = zext i8 %695 to i32
  %697 = tail call i32 @llvm.ctpop.i32(i32 %696) #8
  %698 = trunc i32 %697 to i8
  %699 = xor i8 %698, 1
  store i8 %699, i8* %21, align 1, !tbaa !2446
  %700 = xor i8 %695, 1
  store i8 %700, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %701 = icmp eq i8 %700, 0
  %.v16 = select i1 %701, i64 16, i64 11
  %702 = add i64 %689, %.v16
  store i64 %702, i64* %PC, align 8, !tbaa !2428
  br i1 %701, label %block_4038d2, label %block_4038cd

block_40384c:                                     ; preds = %block_40383e
  %703 = add i64 %314, -24
  %704 = add i64 %589, 4
  store i64 %704, i64* %PC, align 8
  %705 = inttoptr i64 %703 to i64*
  %706 = load i64, i64* %705, align 8
  store i64 %706, i64* %RAX, align 8, !tbaa !2428
  %707 = add i64 %589, 8
  store i64 %707, i64* %PC, align 8
  %708 = load i64, i64* %317, align 8
  %709 = add i64 %708, -1
  store i64 %709, i64* %RCX, align 8, !tbaa !2428
  %710 = icmp eq i64 %708, 0
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %14, align 1, !tbaa !2432
  %712 = trunc i64 %709 to i32
  %713 = and i32 %712, 255
  %714 = tail call i32 @llvm.ctpop.i32(i32 %713) #8
  %715 = trunc i32 %714 to i8
  %716 = and i8 %715, 1
  %717 = xor i8 %716, 1
  store i8 %717, i8* %21, align 1, !tbaa !2446
  %718 = xor i64 %708, %709
  %719 = lshr i64 %718, 4
  %720 = trunc i64 %719 to i8
  %721 = and i8 %720, 1
  store i8 %721, i8* %26, align 1, !tbaa !2447
  %722 = icmp eq i64 %709, 0
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %29, align 1, !tbaa !2448
  %724 = lshr i64 %709, 63
  %725 = trunc i64 %724 to i8
  store i8 %725, i8* %32, align 1, !tbaa !2449
  %726 = lshr i64 %708, 63
  %727 = xor i64 %724, %726
  %728 = add nuw nsw i64 %727, %726
  %729 = icmp eq i64 %728, 2
  %730 = zext i1 %729 to i8
  store i8 %730, i8* %38, align 1, !tbaa !2450
  %731 = add i64 %589, 16
  store i64 %731, i64* %PC, align 8
  %732 = load i64, i64* %705, align 8
  store i64 %732, i64* %RDX, align 8, !tbaa !2428
  %733 = add i64 %314, -48
  %734 = add i64 %589, 20
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %733 to i64*
  %736 = load i64, i64* %735, align 8
  store i64 %736, i64* %RSI, align 8, !tbaa !2428
  %737 = shl i64 %709, 3
  %738 = add i64 %737, %706
  %739 = add i64 %589, 24
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %738 to i64*
  %741 = load i64, i64* %740, align 8
  store i64 %741, i64* %RAX, align 8, !tbaa !2428
  %742 = shl i64 %736, 3
  %743 = add i64 %742, %732
  %744 = add i64 %589, 28
  store i64 %744, i64* %PC, align 8
  %745 = inttoptr i64 %743 to i64*
  store i64 %741, i64* %745, align 8
  %746 = load i64, i64* %RBP, align 8
  %747 = add i64 %746, -40
  %748 = load i64, i64* %PC, align 8
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC, align 8
  %750 = inttoptr i64 %747 to i64*
  %751 = load i64, i64* %750, align 8
  %752 = add i64 %751, -1
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = icmp eq i64 %751, 0
  %754 = zext i1 %753 to i8
  store i8 %754, i8* %14, align 1, !tbaa !2432
  %755 = trunc i64 %752 to i32
  %756 = and i32 %755, 255
  %757 = tail call i32 @llvm.ctpop.i32(i32 %756) #8
  %758 = trunc i32 %757 to i8
  %759 = and i8 %758, 1
  %760 = xor i8 %759, 1
  store i8 %760, i8* %21, align 1, !tbaa !2446
  %761 = xor i64 %751, %752
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %26, align 1, !tbaa !2447
  %765 = icmp eq i64 %752, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %29, align 1, !tbaa !2448
  %767 = lshr i64 %752, 63
  %768 = trunc i64 %767 to i8
  store i8 %768, i8* %32, align 1, !tbaa !2449
  %769 = lshr i64 %751, 63
  %770 = xor i64 %767, %769
  %771 = add nuw nsw i64 %770, %769
  %772 = icmp eq i64 %771, 2
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %38, align 1, !tbaa !2450
  %774 = add i64 %746, -48
  %775 = add i64 %748, 12
  store i64 %775, i64* %PC, align 8
  %776 = inttoptr i64 %774 to i64*
  store i64 %752, i64* %776, align 8
  %.pre3 = load i64, i64* %PC, align 8
  %.pre4 = load i64, i64* %RBP, align 8
  br label %block_403874
}

; Function Attrs: noinline
define %struct.Memory* @sub_4064b0__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4064b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -16
  %12 = load i64, i64* %RDI, align 8
  %13 = add i64 %10, 7
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %12, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RSI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 5
  store i64 %24, i64* %PC, align 8
  %25 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %26 = load i64, i64* %25, align 1
  %27 = inttoptr i64 %22 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %34 = bitcast %union.VectorReg* %3 to double*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %36 = bitcast i64* %35 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4064c1

block_4064cf:                                     ; preds = %block_4064c1
  %37 = add i64 %110, 9
  store i64 %37, i64* %PC, align 8
  %38 = load i64, i64* %79, align 8
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %38, 8
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = icmp ugt i64 %38, -9
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %28, align 1, !tbaa !2432
  %42 = trunc i64 %39 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #8
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %29, align 1, !tbaa !2446
  %48 = xor i64 %38, %39
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  store i8 %51, i8* %30, align 1, !tbaa !2447
  %52 = icmp eq i64 %39, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %31, align 1, !tbaa !2448
  %54 = lshr i64 %39, 63
  %55 = trunc i64 %54 to i8
  store i8 %55, i8* %32, align 1, !tbaa !2449
  %56 = lshr i64 %38, 63
  %57 = xor i64 %54, %56
  %58 = add nuw nsw i64 %57, %54
  %59 = icmp eq i64 %58, 2
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %33, align 1, !tbaa !2450
  %61 = add i64 %110, 20
  store i64 %61, i64* %PC, align 8
  store i64 %39, i64* %79, align 8
  %62 = bitcast i64* %RAX to double**
  %63 = load double*, double** %62, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = load double, double* %34, align 1
  %67 = load double, double* %63, align 8
  %68 = fadd double %66, %67
  store double %68, double* %34, align 1, !tbaa !2451
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -24
  %71 = add i64 %64, 9
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %70 to double*
  store double %68, double* %72, align 8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, -43
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  br label %block_4064c1

block_4064c1:                                     ; preds = %block_4064cf, %block_4064b0
  %75 = phi i64 [ %74, %block_4064cf ], [ %.pre, %block_4064b0 ]
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -8
  %78 = add i64 %75, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %76, -16
  %82 = add i64 %75, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %80, %84
  %86 = icmp ult i64 %80, %84
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %28, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #8
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %29, align 1, !tbaa !2446
  %94 = xor i64 %84, %80
  %95 = xor i64 %94, %85
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %30, align 1, !tbaa !2447
  %99 = icmp eq i64 %85, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %31, align 1, !tbaa !2448
  %101 = lshr i64 %85, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %32, align 1, !tbaa !2449
  %103 = lshr i64 %80, 63
  %104 = lshr i64 %84, 63
  %105 = xor i64 %104, %103
  %106 = xor i64 %101, %103
  %107 = add nuw nsw i64 %106, %105
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %33, align 1, !tbaa !2450
  %.v = select i1 %99, i64 48, i64 14
  %110 = add i64 %75, %.v
  %111 = add i64 %76, -24
  %112 = add i64 %110, 5
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %25, align 1, !tbaa !2451
  store double 0.000000e+00, double* %36, align 1, !tbaa !2451
  br i1 %99, label %block_4064f1, label %block_4064cf

block_4064f1:                                     ; preds = %block_4064c1
  %115 = add i64 %110, 6
  store i64 %115, i64* %PC, align 8
  %116 = load i64, i64* %6, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %6, align 8, !tbaa !2428
  %120 = add i64 %110, 7
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %117 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  %123 = add i64 %116, 16
  store i64 %123, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a50___cxx_global_var_init_24(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400a50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10MPb_type* @DV10MPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4415
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401b90__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_406210__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406210:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 80
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406270__ZplIdE12ValueWrapperIT_ERKS2_S4__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 134
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_4062c0__ZN12ValueWrapperIS_IdEEC2IS0_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_403120__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403120:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403150__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405e50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_406250__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406250:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007f0___cxx_global_var_init_11(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4007f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 ptrtoint (%V10Data_type* @V10Data to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%V10Data_type* @V10Data to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  br label %block_40080b

block_40080b:                                     ; preds = %block_40080b, %block_4007f0
  %43 = phi i64 [ %42, %block_4007f0 ], [ %100, %block_40080b ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4007f0 ], [ %58, %block_40080b ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = add i64 %44, -16
  %50 = add i64 %43, 11
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5082
  %54 = add i64 %52, 5
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_401bf0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %MEMORY.0)
  %59 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 ptrtoint (%V10Data_type* @V10Data to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2432
  %60 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000) to i32), i32 255)) #8
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* %19, align 1, !tbaa !2446
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2447
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2448
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2449
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %59, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2432
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #8
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2446
  %80 = xor i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2447
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2450
  %94 = add i64 %64, -8
  %95 = add i64 %59, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = load i8, i8* %28, align 1, !tbaa !2448
  %99 = icmp eq i8 %98, 0
  %.v = select i1 %99, i64 -47, i64 6
  %100 = add i64 %97, %.v
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  br i1 %99, label %block_40080b, label %block_400840

block_400840:                                     ; preds = %block_40080b
  %101 = load i64, i64* %RSP, align 8
  %102 = add i64 %101, 16
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  %103 = icmp ugt i64 %101, -17
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %12, align 1, !tbaa !2432
  %105 = trunc i64 %102 to i32
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #8
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %19, align 1, !tbaa !2446
  %111 = xor i64 %101, 16
  %112 = xor i64 %111, %102
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %25, align 1, !tbaa !2447
  %116 = icmp eq i64 %102, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %28, align 1, !tbaa !2448
  %118 = lshr i64 %102, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* %31, align 1, !tbaa !2449
  %120 = lshr i64 %101, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %37, align 1, !tbaa !2450
  %125 = add i64 %100, 5
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %101, 24
  %127 = inttoptr i64 %102 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %RBP, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %100, 6
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %101, 32
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %58
}

; Function Attrs: noinline
define %struct.Memory* @sub_401b90__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401b90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %31, align 8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC, align 8
  %34 = load i64, i64* %5, align 8, !tbaa !2428
  %35 = add i64 %34, 8
  %36 = inttoptr i64 %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %35, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %32, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %34, 16
  store i64 %41, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c80__Z9summarizePKciiii(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400c80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %7 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %1, 1
  store i64 %14, i64* %PC, align 8
  %15 = load i64, i64* %RSP, align 8, !tbaa !2428
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %13, i64* %17, align 8
  %18 = load i64, i64* %PC, align 8
  store i64 %16, i64* %RBP, align 8, !tbaa !2428
  %19 = add i64 %15, -136
  store i64 %19, i64* %RSP, align 8, !tbaa !2428
  %20 = icmp ult i64 %16, 128
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1, !tbaa !2432
  %23 = trunc i64 %19 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #8
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !2446
  %30 = xor i64 %16, %19
  %31 = lshr i64 %30, 4
  %32 = trunc i64 %31 to i8
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %33, i8* %34, align 1, !tbaa !2447
  %35 = icmp eq i64 %19, 0
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %36, i8* %37, align 1, !tbaa !2448
  %38 = lshr i64 %19, 63
  %39 = trunc i64 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %39, i8* %40, align 1, !tbaa !2449
  %41 = lshr i64 %16, 63
  %42 = xor i64 %38, %41
  %43 = add nuw nsw i64 %42, %41
  %44 = icmp eq i64 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1, !tbaa !2450
  %47 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %49 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 0, i32* %49, align 1, !tbaa !2456
  %50 = getelementptr inbounds i8, i8* %47, i64 4
  %51 = bitcast i8* %50 to i32*
  store i32 0, i32* %51, align 1, !tbaa !2456
  %52 = bitcast i64* %48 to i32*
  store i32 0, i32* %52, align 1, !tbaa !2456
  %53 = getelementptr inbounds i8, i8* %47, i64 12
  %54 = bitcast i8* %53 to i32*
  store i32 0, i32* %54, align 1, !tbaa !2456
  %55 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 8) to i64*), align 8
  %56 = bitcast %union.VectorReg* %10 to double*
  %57 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %55, i64* %57, align 1, !tbaa !2451
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast i64* %58 to double*
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %60 = add i64 %15, -16
  %61 = load i64, i64* %RDI, align 8
  %62 = add i64 %18, 25
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %63, align 8
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -12
  %66 = load i32, i32* %ESI, align 4
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i32*
  store i32 %66, i32* %69, align 4
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -16
  %72 = load i32, i32* %EDX, align 4
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %75, align 4
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -20
  %78 = load i32, i32* %ECX, align 4
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 3
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %77 to i32*
  store i32 %78, i32* %81, align 4
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -24
  %84 = load i32, i32* %R8D, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -12
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 3
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = sitofp i32 %93 to double
  %96 = bitcast %union.VectorReg* %11 to double*
  store double %95, double* %96, align 1, !tbaa !2451
  %97 = add i64 %88, -16
  %98 = add i64 %90, 10
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %RCX, align 8, !tbaa !2428
  %102 = sitofp i32 %100 to double
  %103 = bitcast %union.VectorReg* %12 to double*
  store double %102, double* %103, align 1, !tbaa !2451
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %105 = fmul double %95, %102
  %106 = load double, double* %56, align 1
  %107 = fdiv double %105, %106
  store double %107, double* %96, align 1, !tbaa !2451
  %108 = add i64 %88, -40
  %109 = add i64 %90, 27
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to double*
  store double %107, double* %110, align 8
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -48
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 5
  store i64 %114, i64* %PC, align 8
  %115 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %116 = load i64, i64* %115, align 1
  %117 = inttoptr i64 %112 to i64*
  store i64 %116, i64* %117, align 8
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -56
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %115, align 1
  %123 = inttoptr i64 %119 to i64*
  store i64 %122, i64* %123, align 8
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -60
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %125 to i32*
  store i32 12, i32* %128, align 4
  %129 = load i64, i64* %RBP, align 8
  %130 = add i64 %129, -28
  %131 = load i64, i64* %PC, align 8
  %132 = add i64 %131, 7
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %130 to i32*
  store i32 0, i32* %133, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400cda

block_400d17:                                     ; preds = %block_400cea
  %134 = add i64 %467, 3
  store i64 %134, i64* %PC, align 8
  %135 = load i32, i32* %433, align 4
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %467, 6
  store i64 %137, i64* %PC, align 8
  store i32 %135, i32* %438, align 4
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %block_400d1d

block_400efc:                                     ; preds = %block_400f0c, %block_400ef5
  %138 = phi i64 [ %.pre6, %block_400ef5 ], [ %557, %block_400f0c ]
  %MEMORY.0 = phi %struct.Memory* [ %971, %block_400ef5 ], [ %516, %block_400f0c ]
  %139 = load i64, i64* %RBP, align 8
  %140 = add i64 %139, -28
  %141 = add i64 %138, 3
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %140 to i32*
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i64
  store i64 %144, i64* %RAX, align 8, !tbaa !2428
  %145 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %146 = sub i32 %143, %145
  %147 = icmp ult i32 %143, %145
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %22, align 1, !tbaa !2432
  %149 = and i32 %146, 255
  %150 = tail call i32 @llvm.ctpop.i32(i32 %149) #8
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  store i8 %153, i8* %29, align 1, !tbaa !2446
  %154 = xor i32 %145, %143
  %155 = xor i32 %154, %146
  %156 = lshr i32 %155, 4
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  store i8 %158, i8* %34, align 1, !tbaa !2447
  %159 = icmp eq i32 %146, 0
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %37, align 1, !tbaa !2448
  %161 = lshr i32 %146, 31
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %40, align 1, !tbaa !2449
  %163 = lshr i32 %143, 31
  %164 = lshr i32 %145, 31
  %165 = xor i32 %164, %163
  %166 = xor i32 %161, %163
  %167 = add nuw nsw i32 %166, %165
  %168 = icmp eq i32 %167, 2
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %46, align 1, !tbaa !2450
  %170 = icmp ne i8 %162, 0
  %171 = xor i1 %170, %168
  %.v13 = select i1 %171, i64 16, i64 80
  %172 = add i64 %138, %.v13
  store i64 %172, i64* %PC, align 8, !tbaa !2428
  br i1 %171, label %block_400f0c, label %block_400f4c

block_400d30:                                     ; preds = %block_400cda
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 55), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 115), i64* %RDX, align 8, !tbaa !2428
  %173 = add i64 %330, -60
  %174 = add i64 %363, 23
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = add i32 %176, -12
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = icmp ult i32 %176, 12
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %22, align 1, !tbaa !2432
  %181 = and i32 %177, 255
  %182 = tail call i32 @llvm.ctpop.i32(i32 %181) #8
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  %185 = xor i8 %184, 1
  store i8 %185, i8* %29, align 1, !tbaa !2446
  %186 = xor i32 %176, %177
  %187 = lshr i32 %186, 4
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  store i8 %189, i8* %34, align 1, !tbaa !2447
  %190 = icmp eq i32 %177, 0
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %37, align 1, !tbaa !2448
  %192 = lshr i32 %177, 31
  %193 = trunc i32 %192 to i8
  store i8 %193, i8* %40, align 1, !tbaa !2449
  %194 = lshr i32 %176, 31
  %195 = xor i32 %192, %194
  %196 = add nuw nsw i32 %195, %194
  %197 = icmp eq i32 %196, 2
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %46, align 1, !tbaa !2450
  store i64 %178, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %199 = add i64 %363, -1664
  %200 = add i64 %363, 35
  %201 = load i64, i64* %RSP, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203, align 8
  store i64 %202, i64* %RSP, align 8, !tbaa !2428
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  %204 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %205 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 117), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 115), i64* %RDX, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -60
  %208 = add i64 %205, 23
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i32*
  %210 = load i32, i32* %209, align 4
  %211 = zext i32 %210 to i64
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = add i64 %206, -68
  %213 = load i32, i32* %EAX, align 4
  %214 = add i64 %205, 26
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %212 to i32*
  store i32 %213, i32* %215, align 4
  %216 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %217 = add i64 %216, -1725
  %218 = add i64 %216, 7
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %204)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -28
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 7
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  store i32 0, i32* %227, align 4
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -72
  %230 = load i32, i32* %EAX, align 4
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 3
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %229 to i32*
  store i32 %230, i32* %233, align 4
  %234 = bitcast [32 x %union.VectorReg]* %9 to double*
  %235 = bitcast i64* %48 to double*
  %236 = bitcast i64* %104 to double*
  %237 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_400d7e

block_400d1d:                                     ; preds = %block_400cea, %block_400d17
  %238 = phi i64 [ %429, %block_400cea ], [ %.pre3, %block_400d17 ]
  %239 = phi i64 [ %467, %block_400cea ], [ %.pre2, %block_400d17 ]
  %240 = add i64 %238, -28
  %241 = add i64 %239, 8
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %240 to i32*
  %243 = load i32, i32* %242, align 4
  %244 = add i32 %243, 1
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = icmp eq i32 %243, -1
  %247 = icmp eq i32 %244, 0
  %248 = or i1 %246, %247
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %22, align 1, !tbaa !2432
  %250 = and i32 %244, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #8
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %29, align 1, !tbaa !2446
  %255 = xor i32 %243, %244
  %256 = lshr i32 %255, 4
  %257 = trunc i32 %256 to i8
  %258 = and i8 %257, 1
  store i8 %258, i8* %34, align 1, !tbaa !2447
  %259 = zext i1 %247 to i8
  store i8 %259, i8* %37, align 1, !tbaa !2448
  %260 = lshr i32 %244, 31
  %261 = trunc i32 %260 to i8
  store i8 %261, i8* %40, align 1, !tbaa !2449
  %262 = lshr i32 %243, 31
  %263 = xor i32 %260, %262
  %264 = add nuw nsw i32 %263, %260
  %265 = icmp eq i32 %264, 2
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %46, align 1, !tbaa !2450
  %267 = add i64 %239, 14
  store i64 %267, i64* %PC, align 8
  store i32 %244, i32* %242, align 4
  %268 = load i64, i64* %PC, align 8
  %269 = add i64 %268, -81
  store i64 %269, i64* %PC, align 8, !tbaa !2428
  br label %block_400cda

block_400f4c:                                     ; preds = %block_400efc
  %270 = add i64 %139, -8
  %271 = add i64 %172, 4
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272, align 8
  store i64 %273, i64* %RSI, align 8, !tbaa !2428
  %274 = add i64 %139, -56
  %275 = add i64 %172, 9
  store i64 %275, i64* %PC, align 8
  %276 = inttoptr i64 %274 to double*
  %277 = load double, double* %276, align 8
  %278 = add i32 %145, -1
  %279 = zext i32 %278 to i64
  store i64 %279, i64* %RAX, align 8, !tbaa !2428
  %280 = icmp eq i32 %145, 0
  %281 = zext i1 %280 to i8
  store i8 %281, i8* %22, align 1, !tbaa !2432
  %282 = and i32 %278, 255
  %283 = tail call i32 @llvm.ctpop.i32(i32 %282) #8
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  store i8 %286, i8* %29, align 1, !tbaa !2446
  %287 = xor i32 %145, %278
  %288 = lshr i32 %287, 4
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  store i8 %290, i8* %34, align 1, !tbaa !2447
  %291 = icmp eq i32 %278, 0
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %37, align 1, !tbaa !2448
  %293 = lshr i32 %278, 31
  %294 = trunc i32 %293 to i8
  store i8 %294, i8* %40, align 1, !tbaa !2449
  %295 = xor i32 %293, %164
  %296 = add nuw nsw i32 %295, %164
  %297 = icmp eq i32 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %46, align 1, !tbaa !2450
  %299 = sitofp i32 %278 to double
  store double %299, double* %56, align 1, !tbaa !2451
  %300 = fdiv double %277, %299
  store double %300, double* %234, align 1, !tbaa !2451
  store i64 0, i64* %48, align 1, !tbaa !2451
  %301 = add i64 %139, -120
  %302 = add i64 %172, 31
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %301 to i64*
  store i64 %273, i64* %303, align 8
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, -2299
  %306 = add i64 %304, 5
  %307 = load i64, i64* %RSP, align 8, !tbaa !2428
  %308 = add i64 %307, -8
  %309 = inttoptr i64 %308 to i64*
  store i64 %306, i64* %309, align 8
  store i64 %308, i64* %RSP, align 8, !tbaa !2428
  store i64 %305, i64* %PC, align 8, !tbaa !2428
  %310 = tail call fastcc %struct.Memory* @ext_6208f8_exp(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %311 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 242), i64* %RDI, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -120
  %314 = add i64 %311, 14
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  %316 = load i64, i64* %315, align 8
  store i64 %316, i64* %RSI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %317 = add i64 %311, -2240
  %318 = add i64 %311, 21
  %319 = load i64, i64* %RSP, align 8, !tbaa !2428
  %320 = add i64 %319, -8
  %321 = inttoptr i64 %320 to i64*
  store i64 %318, i64* %321, align 8
  store i64 %320, i64* %RSP, align 8, !tbaa !2428
  store i64 %317, i64* %PC, align 8, !tbaa !2428
  %322 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %310)
  %323 = load i64, i64* %RBP, align 8
  %324 = add i64 %323, -124
  %325 = load i32, i32* %EAX, align 4
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 3
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %324 to i32*
  store i32 %325, i32* %328, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_400f88

block_400cda:                                     ; preds = %block_400d1d, %block_400c80
  %329 = phi i64 [ %.pre, %block_400c80 ], [ %269, %block_400d1d ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400c80 ], [ %421, %block_400d1d ]
  %330 = load i64, i64* %RBP, align 8
  %331 = add i64 %330, -28
  %332 = add i64 %329, 3
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i32*
  %334 = load i32, i32* %333, align 4
  %335 = zext i32 %334 to i64
  store i64 %335, i64* %RAX, align 8, !tbaa !2428
  %336 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %337 = sub i32 %334, %336
  %338 = icmp ult i32 %334, %336
  %339 = zext i1 %338 to i8
  store i8 %339, i8* %22, align 1, !tbaa !2432
  %340 = and i32 %337, 255
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340) #8
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  store i8 %344, i8* %29, align 1, !tbaa !2446
  %345 = xor i32 %336, %334
  %346 = xor i32 %345, %337
  %347 = lshr i32 %346, 4
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  store i8 %349, i8* %34, align 1, !tbaa !2447
  %350 = icmp eq i32 %337, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %37, align 1, !tbaa !2448
  %352 = lshr i32 %337, 31
  %353 = trunc i32 %352 to i8
  store i8 %353, i8* %40, align 1, !tbaa !2449
  %354 = lshr i32 %334, 31
  %355 = lshr i32 %336, 31
  %356 = xor i32 %355, %354
  %357 = xor i32 %352, %354
  %358 = add nuw nsw i32 %357, %356
  %359 = icmp eq i32 %358, 2
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %46, align 1, !tbaa !2450
  %361 = icmp ne i8 %353, 0
  %362 = xor i1 %361, %359
  %.v = select i1 %362, i64 16, i64 86
  %363 = add i64 %329, %.v
  store i64 %363, i64* %PC, align 8, !tbaa !2428
  br i1 %362, label %block_400cea, label %block_400d30

block_400eeb:                                     ; preds = %block_400ec0
  %364 = load i64, i64* %RBP, align 8
  %365 = add i64 %364, -24
  %366 = add i64 %1009, 4
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i32*
  %368 = load i32, i32* %367, align 4
  store i8 0, i8* %22, align 1, !tbaa !2432
  %369 = and i32 %368, 255
  %370 = tail call i32 @llvm.ctpop.i32(i32 %369) #8
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  store i8 %373, i8* %29, align 1, !tbaa !2446
  store i8 0, i8* %34, align 1, !tbaa !2447
  %374 = icmp eq i32 %368, 0
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %37, align 1, !tbaa !2448
  %376 = lshr i32 %368, 31
  %377 = trunc i32 %376 to i8
  store i8 %377, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %46, align 1, !tbaa !2450
  %.v12 = select i1 %374, i64 157, i64 10
  %378 = add i64 %1009, %.v12
  store i64 %378, i64* %PC, align 8, !tbaa !2428
  br i1 %374, label %block_400f88, label %block_400ef5

block_400cea:                                     ; preds = %block_400cda
  %379 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %379, i64* %RAX, align 8, !tbaa !2428
  %380 = add i64 %363, 12
  store i64 %380, i64* %PC, align 8
  %381 = load i32, i32* %333, align 4
  %382 = sext i32 %381 to i64
  %383 = shl nsw i64 %382, 4
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = lshr i64 %382, 59
  %385 = and i64 %384, 1
  %386 = add i64 %383, %379
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = icmp ult i64 %386, %379
  %388 = icmp ult i64 %386, %383
  %389 = or i1 %387, %388
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %22, align 1, !tbaa !2432
  %391 = trunc i64 %386 to i32
  %392 = and i32 %391, 255
  %393 = tail call i32 @llvm.ctpop.i32(i32 %392) #8
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = xor i8 %395, 1
  store i8 %396, i8* %29, align 1, !tbaa !2446
  %397 = xor i64 %383, %379
  %398 = xor i64 %397, %386
  %399 = lshr i64 %398, 4
  %400 = trunc i64 %399 to i8
  %401 = and i8 %400, 1
  store i8 %401, i8* %34, align 1, !tbaa !2447
  %402 = icmp eq i64 %386, 0
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %37, align 1, !tbaa !2448
  %404 = lshr i64 %386, 63
  %405 = trunc i64 %404 to i8
  store i8 %405, i8* %40, align 1, !tbaa !2449
  %406 = lshr i64 %379, 63
  %407 = xor i64 %404, %406
  %408 = xor i64 %404, %385
  %409 = add nuw nsw i64 %407, %408
  %410 = icmp eq i64 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %46, align 1, !tbaa !2450
  %412 = add i64 %386, 8
  %413 = add i64 %363, 23
  store i64 %413, i64* %PC, align 8
  %414 = inttoptr i64 %412 to i64*
  %415 = load i64, i64* %414, align 8
  store i64 %415, i64* %RDI, align 8, !tbaa !2428
  %416 = add i64 %363, -1610
  %417 = add i64 %363, 28
  %418 = load i64, i64* %RSP, align 8, !tbaa !2428
  %419 = add i64 %418, -8
  %420 = inttoptr i64 %419 to i64*
  store i64 %417, i64* %420, align 8
  store i64 %419, i64* %RSP, align 8, !tbaa !2428
  store i64 %416, i64* %PC, align 8, !tbaa !2428
  %421 = tail call fastcc %struct.Memory* @ext_4006a0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %422 = load i32, i32* %EAX, align 4
  %423 = zext i32 %422 to i64
  %424 = load i64, i64* %PC, align 8
  store i64 %423, i64* %RDX, align 8, !tbaa !2428
  %425 = load i64, i64* %RBP, align 8
  %426 = add i64 %425, -64
  %427 = add i64 %424, 5
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i32*
  store i32 %422, i32* %428, align 4
  %429 = load i64, i64* %RBP, align 8
  %430 = add i64 %429, -64
  %431 = load i64, i64* %PC, align 8
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %430 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = zext i32 %434 to i64
  store i64 %435, i64* %RDX, align 8, !tbaa !2428
  %436 = add i64 %429, -60
  %437 = add i64 %431, 6
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %436 to i32*
  %439 = load i32, i32* %438, align 4
  %440 = sub i32 %434, %439
  %441 = icmp ult i32 %434, %439
  %442 = zext i1 %441 to i8
  store i8 %442, i8* %22, align 1, !tbaa !2432
  %443 = and i32 %440, 255
  %444 = tail call i32 @llvm.ctpop.i32(i32 %443) #8
  %445 = trunc i32 %444 to i8
  %446 = and i8 %445, 1
  %447 = xor i8 %446, 1
  store i8 %447, i8* %29, align 1, !tbaa !2446
  %448 = xor i32 %439, %434
  %449 = xor i32 %448, %440
  %450 = lshr i32 %449, 4
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  store i8 %452, i8* %34, align 1, !tbaa !2447
  %453 = icmp eq i32 %440, 0
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %37, align 1, !tbaa !2448
  %455 = lshr i32 %440, 31
  %456 = trunc i32 %455 to i8
  store i8 %456, i8* %40, align 1, !tbaa !2449
  %457 = lshr i32 %434, 31
  %458 = lshr i32 %439, 31
  %459 = xor i32 %458, %457
  %460 = xor i32 %455, %457
  %461 = add nuw nsw i32 %460, %459
  %462 = icmp eq i32 %461, 2
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %46, align 1, !tbaa !2450
  %464 = icmp ne i8 %456, 0
  %465 = xor i1 %464, %462
  %466 = or i1 %453, %465
  %.v8 = select i1 %466, i64 18, i64 12
  %467 = add i64 %431, %.v8
  store i64 %467, i64* %PC, align 8, !tbaa !2428
  br i1 %466, label %block_400d1d, label %block_400d17

block_400ef5:                                     ; preds = %block_400eeb
  %468 = add i64 %364, -28
  %469 = add i64 %378, 7
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to i32*
  store i32 1, i32* %470, align 4
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_400efc

block_400f0c:                                     ; preds = %block_400efc
  %471 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %471, i64* %RAX, align 8, !tbaa !2428
  %472 = add i64 %172, 12
  store i64 %472, i64* %PC, align 8
  %473 = load i32, i32* %142, align 4
  %474 = sext i32 %473 to i64
  %475 = shl nsw i64 %474, 4
  store i64 %475, i64* %RCX, align 8, !tbaa !2428
  %476 = lshr i64 %474, 59
  %477 = and i64 %476, 1
  %478 = add i64 %475, %471
  store i64 %478, i64* %RAX, align 8, !tbaa !2428
  %479 = icmp ult i64 %478, %471
  %480 = icmp ult i64 %478, %475
  %481 = or i1 %479, %480
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %22, align 1, !tbaa !2432
  %483 = trunc i64 %478 to i32
  %484 = and i32 %483, 255
  %485 = tail call i32 @llvm.ctpop.i32(i32 %484) #8
  %486 = trunc i32 %485 to i8
  %487 = and i8 %486, 1
  %488 = xor i8 %487, 1
  store i8 %488, i8* %29, align 1, !tbaa !2446
  %489 = xor i64 %475, %471
  %490 = xor i64 %489, %478
  %491 = lshr i64 %490, 4
  %492 = trunc i64 %491 to i8
  %493 = and i8 %492, 1
  store i8 %493, i8* %34, align 1, !tbaa !2447
  %494 = icmp eq i64 %478, 0
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %37, align 1, !tbaa !2448
  %496 = lshr i64 %478, 63
  %497 = trunc i64 %496 to i8
  store i8 %497, i8* %40, align 1, !tbaa !2449
  %498 = lshr i64 %471, 63
  %499 = xor i64 %496, %498
  %500 = xor i64 %496, %477
  %501 = add nuw nsw i64 %499, %500
  %502 = icmp eq i64 %501, 2
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %46, align 1, !tbaa !2450
  %504 = add i64 %172, 23
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %478 to double*
  %506 = load double, double* %505, align 8
  store double %506, double* %234, align 1, !tbaa !2451
  store double 0.000000e+00, double* %235, align 1, !tbaa !2451
  store i64 %471, i64* %RAX, align 8, !tbaa !2428
  %507 = add i64 %172, 35
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %471 to double*
  %509 = load double, double* %508, align 8
  %510 = fdiv double %506, %509
  store double %510, double* %234, align 1, !tbaa !2451
  store i64 0, i64* %48, align 1, !tbaa !2451
  %511 = add i64 %172, -2124
  %512 = add i64 %172, 40
  %513 = load i64, i64* %RSP, align 8, !tbaa !2428
  %514 = add i64 %513, -8
  %515 = inttoptr i64 %514 to i64*
  store i64 %512, i64* %515, align 8
  store i64 %514, i64* %RSP, align 8, !tbaa !2428
  store i64 %511, i64* %PC, align 8, !tbaa !2428
  %516 = tail call fastcc %struct.Memory* @ext_6208b8_log(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %517 = load i64, i64* %RBP, align 8
  %518 = add i64 %517, -56
  %519 = load i64, i64* %PC, align 8
  %520 = add i64 %519, 5
  store i64 %520, i64* %PC, align 8
  %521 = load double, double* %234, align 1
  %522 = inttoptr i64 %518 to double*
  %523 = load double, double* %522, align 8
  %524 = fadd double %521, %523
  store double %524, double* %234, align 1, !tbaa !2451
  %525 = add i64 %519, 10
  store i64 %525, i64* %PC, align 8
  store double %524, double* %522, align 8
  %526 = load i64, i64* %RBP, align 8
  %527 = add i64 %526, -28
  %528 = load i64, i64* %PC, align 8
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC, align 8
  %530 = inttoptr i64 %527 to i32*
  %531 = load i32, i32* %530, align 4
  %532 = add i32 %531, 1
  %533 = zext i32 %532 to i64
  store i64 %533, i64* %RAX, align 8, !tbaa !2428
  %534 = icmp eq i32 %531, -1
  %535 = icmp eq i32 %532, 0
  %536 = or i1 %534, %535
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %22, align 1, !tbaa !2432
  %538 = and i32 %532, 255
  %539 = tail call i32 @llvm.ctpop.i32(i32 %538) #8
  %540 = trunc i32 %539 to i8
  %541 = and i8 %540, 1
  %542 = xor i8 %541, 1
  store i8 %542, i8* %29, align 1, !tbaa !2446
  %543 = xor i32 %531, %532
  %544 = lshr i32 %543, 4
  %545 = trunc i32 %544 to i8
  %546 = and i8 %545, 1
  store i8 %546, i8* %34, align 1, !tbaa !2447
  %547 = zext i1 %535 to i8
  store i8 %547, i8* %37, align 1, !tbaa !2448
  %548 = lshr i32 %532, 31
  %549 = trunc i32 %548 to i8
  store i8 %549, i8* %40, align 1, !tbaa !2449
  %550 = lshr i32 %531, 31
  %551 = xor i32 %548, %550
  %552 = add nuw nsw i32 %551, %548
  %553 = icmp eq i32 %552, 2
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %46, align 1, !tbaa !2450
  %555 = add i64 %528, 9
  store i64 %555, i64* %PC, align 8
  store i32 %532, i32* %530, align 4
  %556 = load i64, i64* %PC, align 8
  %557 = add i64 %556, -75
  store i64 %557, i64* %PC, align 8, !tbaa !2428
  br label %block_400efc

block_400d8e:                                     ; preds = %block_400d7e
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 160), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 159), i64* %RCX, align 8, !tbaa !2428
  %558 = add i64 %957, 23
  store i64 %558, i64* %PC, align 8
  %559 = load i32, i32* %927, align 4
  %560 = zext i32 %559 to i64
  store i64 %560, i64* %RSI, align 8, !tbaa !2428
  %561 = add i64 %924, -60
  %562 = add i64 %957, 27
  store i64 %562, i64* %PC, align 8
  %563 = inttoptr i64 %561 to i32*
  %564 = load i32, i32* %563, align 4
  %565 = sext i32 %564 to i64
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %566, i64* %RDX, align 8, !tbaa !2428
  %567 = add i64 %957, 39
  store i64 %567, i64* %PC, align 8
  %568 = load i32, i32* %927, align 4
  %569 = sext i32 %568 to i64
  %570 = shl nsw i64 %569, 4
  store i64 %570, i64* %R8, align 8, !tbaa !2428
  %571 = lshr i64 %569, 59
  %572 = and i64 %571, 1
  %573 = add i64 %570, %566
  store i64 %573, i64* %RDX, align 8, !tbaa !2428
  %574 = icmp ult i64 %573, %566
  %575 = icmp ult i64 %573, %570
  %576 = or i1 %574, %575
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %22, align 1, !tbaa !2432
  %578 = trunc i64 %573 to i32
  %579 = and i32 %578, 255
  %580 = tail call i32 @llvm.ctpop.i32(i32 %579) #8
  %581 = trunc i32 %580 to i8
  %582 = and i8 %581, 1
  %583 = xor i8 %582, 1
  store i8 %583, i8* %29, align 1, !tbaa !2446
  %584 = xor i64 %570, %566
  %585 = xor i64 %584, %573
  %586 = lshr i64 %585, 4
  %587 = trunc i64 %586 to i8
  %588 = and i8 %587, 1
  store i8 %588, i8* %34, align 1, !tbaa !2447
  %589 = icmp eq i64 %573, 0
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %37, align 1, !tbaa !2448
  %591 = lshr i64 %573, 63
  %592 = trunc i64 %591 to i8
  store i8 %592, i8* %40, align 1, !tbaa !2449
  %593 = lshr i64 %566, 63
  %594 = xor i64 %591, %593
  %595 = xor i64 %591, %572
  %596 = add nuw nsw i64 %594, %595
  %597 = icmp eq i64 %596, 2
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %46, align 1, !tbaa !2450
  %599 = add i64 %573, 8
  %600 = add i64 %957, 50
  store i64 %600, i64* %PC, align 8
  %601 = inttoptr i64 %599 to i64*
  %602 = load i64, i64* %601, align 8
  store i64 %602, i64* %RDX, align 8, !tbaa !2428
  %603 = add i64 %924, -80
  %604 = add i64 %957, 54
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %603 to i64*
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 160), i64* %605, align 8
  %606 = load i64, i64* %RDX, align 8
  %607 = load i64, i64* %PC, align 8
  store i64 %606, i64* %RDI, align 8, !tbaa !2428
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -88
  %610 = load i64, i64* %RAX, align 8
  %611 = add i64 %607, 7
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i64*
  store i64 %610, i64* %612, align 8
  %613 = load i64, i64* %RBP, align 8
  %614 = add i64 %613, -96
  %615 = load i64, i64* %RCX, align 8
  %616 = load i64, i64* %PC, align 8
  %617 = add i64 %616, 4
  store i64 %617, i64* %PC, align 8
  %618 = inttoptr i64 %614 to i64*
  store i64 %615, i64* %618, align 8
  %619 = load i64, i64* %RBP, align 8
  %620 = add i64 %619, -100
  %621 = load i32, i32* %ESI, align 4
  %622 = load i64, i64* %PC, align 8
  %623 = add i64 %622, 3
  store i64 %623, i64* %PC, align 8
  %624 = inttoptr i64 %620 to i32*
  store i32 %621, i32* %624, align 4
  %625 = load i64, i64* %PC, align 8
  %626 = add i64 %625, -1842
  %627 = add i64 %625, 5
  %628 = load i64, i64* %RSP, align 8, !tbaa !2428
  %629 = add i64 %628, -8
  %630 = inttoptr i64 %629 to i64*
  store i64 %627, i64* %630, align 8
  store i64 %629, i64* %RSP, align 8, !tbaa !2428
  store i64 %626, i64* %PC, align 8, !tbaa !2428
  %631 = tail call fastcc %struct.Memory* @ext_4006a0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.4)
  %632 = load i64, i64* %RBP, align 8
  %633 = add i64 %632, -88
  %634 = load i64, i64* %PC, align 8
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %633 to i64*
  %637 = load i64, i64* %636, align 8
  %638 = load i64, i64* %RAX, align 8
  %639 = sub i64 %637, %638
  store i64 %639, i64* %RCX, align 8, !tbaa !2428
  %640 = icmp ult i64 %637, %638
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %22, align 1, !tbaa !2432
  %642 = trunc i64 %639 to i32
  %643 = and i32 %642, 255
  %644 = tail call i32 @llvm.ctpop.i32(i32 %643) #8
  %645 = trunc i32 %644 to i8
  %646 = and i8 %645, 1
  %647 = xor i8 %646, 1
  store i8 %647, i8* %29, align 1, !tbaa !2446
  %648 = xor i64 %638, %637
  %649 = xor i64 %648, %639
  %650 = lshr i64 %649, 4
  %651 = trunc i64 %650 to i8
  %652 = and i8 %651, 1
  store i8 %652, i8* %34, align 1, !tbaa !2447
  %653 = icmp eq i64 %639, 0
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %37, align 1, !tbaa !2448
  %655 = lshr i64 %639, 63
  %656 = trunc i64 %655 to i8
  store i8 %656, i8* %40, align 1, !tbaa !2449
  %657 = lshr i64 %637, 63
  %658 = lshr i64 %638, 63
  %659 = xor i64 %658, %657
  %660 = xor i64 %655, %657
  %661 = add nuw nsw i64 %660, %659
  %662 = icmp eq i64 %661, 2
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %46, align 1, !tbaa !2450
  %664 = and i64 %639, 4294967295
  store i64 %664, i64* %RSI, align 8, !tbaa !2428
  %665 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %665, i64* %RAX, align 8, !tbaa !2428
  %666 = add i64 %632, -28
  %667 = add i64 %634, 21
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i32*
  %669 = load i32, i32* %668, align 4
  %670 = sext i32 %669 to i64
  %671 = shl nsw i64 %670, 4
  store i64 %671, i64* %RCX, align 8, !tbaa !2428
  %672 = lshr i64 %670, 59
  %673 = and i64 %672, 1
  %674 = add i64 %671, %665
  store i64 %674, i64* %RAX, align 8, !tbaa !2428
  %675 = icmp ult i64 %674, %665
  %676 = icmp ult i64 %674, %671
  %677 = or i1 %675, %676
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %22, align 1, !tbaa !2432
  %679 = trunc i64 %674 to i32
  %680 = and i32 %679, 255
  %681 = tail call i32 @llvm.ctpop.i32(i32 %680) #8
  %682 = trunc i32 %681 to i8
  %683 = and i8 %682, 1
  %684 = xor i8 %683, 1
  store i8 %684, i8* %29, align 1, !tbaa !2446
  %685 = xor i64 %671, %665
  %686 = xor i64 %685, %674
  %687 = lshr i64 %686, 4
  %688 = trunc i64 %687 to i8
  %689 = and i8 %688, 1
  store i8 %689, i8* %34, align 1, !tbaa !2447
  %690 = icmp eq i64 %674, 0
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %37, align 1, !tbaa !2448
  %692 = lshr i64 %674, 63
  %693 = trunc i64 %692 to i8
  store i8 %693, i8* %40, align 1, !tbaa !2449
  %694 = lshr i64 %665, 63
  %695 = xor i64 %692, %694
  %696 = xor i64 %692, %673
  %697 = add nuw nsw i64 %695, %696
  %698 = icmp eq i64 %697, 2
  %699 = zext i1 %698 to i8
  store i8 %699, i8* %46, align 1, !tbaa !2450
  %700 = add i64 %674, 8
  %701 = add i64 %634, 32
  store i64 %701, i64* %PC, align 8
  %702 = inttoptr i64 %700 to i64*
  %703 = load i64, i64* %702, align 8
  store i64 %703, i64* %R8, align 8, !tbaa !2428
  store i64 %665, i64* %RAX, align 8, !tbaa !2428
  %704 = add i64 %634, 44
  store i64 %704, i64* %PC, align 8
  %705 = load i32, i32* %668, align 4
  %706 = sext i32 %705 to i64
  %707 = shl nsw i64 %706, 4
  store i64 %707, i64* %RCX, align 8, !tbaa !2428
  %708 = lshr i64 %706, 59
  %709 = and i64 %708, 1
  %710 = add i64 %707, %665
  store i64 %710, i64* %RAX, align 8, !tbaa !2428
  %711 = icmp ult i64 %710, %665
  %712 = icmp ult i64 %710, %707
  %713 = or i1 %711, %712
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %22, align 1, !tbaa !2432
  %715 = trunc i64 %710 to i32
  %716 = and i32 %715, 255
  %717 = tail call i32 @llvm.ctpop.i32(i32 %716) #8
  %718 = trunc i32 %717 to i8
  %719 = and i8 %718, 1
  %720 = xor i8 %719, 1
  store i8 %720, i8* %29, align 1, !tbaa !2446
  %721 = xor i64 %707, %665
  %722 = xor i64 %721, %710
  %723 = lshr i64 %722, 4
  %724 = trunc i64 %723 to i8
  %725 = and i8 %724, 1
  store i8 %725, i8* %34, align 1, !tbaa !2447
  %726 = icmp eq i64 %710, 0
  %727 = zext i1 %726 to i8
  store i8 %727, i8* %37, align 1, !tbaa !2448
  %728 = lshr i64 %710, 63
  %729 = trunc i64 %728 to i8
  store i8 %729, i8* %40, align 1, !tbaa !2449
  %730 = xor i64 %728, %694
  %731 = xor i64 %728, %709
  %732 = add nuw nsw i64 %730, %731
  %733 = icmp eq i64 %732, 2
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %46, align 1, !tbaa !2450
  %735 = add i64 %634, 55
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %710 to i64*
  %737 = load i64, i64* %736, align 8
  store i64 %737, i64* %115, align 1, !tbaa !2451
  store double 0.000000e+00, double* %235, align 1, !tbaa !2451
  %738 = add i64 %632, -40
  %739 = add i64 %634, 60
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %738 to double*
  %741 = load double, double* %740, align 8
  store double %741, double* %56, align 1, !tbaa !2451
  store double 0.000000e+00, double* %59, align 1, !tbaa !2451
  %742 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %742, i64* %RAX, align 8, !tbaa !2428
  %743 = add i64 %634, 72
  store i64 %743, i64* %PC, align 8
  %744 = load i32, i32* %668, align 4
  %745 = sext i32 %744 to i64
  %746 = shl nsw i64 %745, 4
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %747 = lshr i64 %745, 59
  %748 = and i64 %747, 1
  %749 = add i64 %746, %742
  store i64 %749, i64* %RAX, align 8, !tbaa !2428
  %750 = icmp ult i64 %749, %742
  %751 = icmp ult i64 %749, %746
  %752 = or i1 %750, %751
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %22, align 1, !tbaa !2432
  %754 = trunc i64 %749 to i32
  %755 = and i32 %754, 255
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #8
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %29, align 1, !tbaa !2446
  %760 = xor i64 %746, %742
  %761 = xor i64 %760, %749
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %34, align 1, !tbaa !2447
  %765 = icmp eq i64 %749, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %37, align 1, !tbaa !2448
  %767 = lshr i64 %749, 63
  %768 = trunc i64 %767 to i8
  store i8 %768, i8* %40, align 1, !tbaa !2449
  %769 = lshr i64 %742, 63
  %770 = xor i64 %767, %769
  %771 = xor i64 %767, %748
  %772 = add nuw nsw i64 %770, %771
  %773 = icmp eq i64 %772, 2
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %46, align 1, !tbaa !2450
  %775 = add i64 %634, 83
  store i64 %775, i64* %PC, align 8
  %776 = inttoptr i64 %749 to double*
  %777 = load double, double* %776, align 8
  %778 = fdiv double %741, %777
  store double %778, double* %56, align 1, !tbaa !2451
  store i64 0, i64* %58, align 1, !tbaa !2451
  store i64 %742, i64* %RAX, align 8, !tbaa !2428
  %779 = load i64, i64* %RBP, align 8
  %780 = add i64 %779, -28
  %781 = add i64 %634, 95
  store i64 %781, i64* %PC, align 8
  %782 = inttoptr i64 %780 to i32*
  %783 = load i32, i32* %782, align 4
  %784 = sext i32 %783 to i64
  %785 = shl nsw i64 %784, 4
  store i64 %785, i64* %RCX, align 8, !tbaa !2428
  %786 = lshr i64 %784, 59
  %787 = and i64 %786, 1
  %788 = add i64 %785, %742
  store i64 %788, i64* %RAX, align 8, !tbaa !2428
  %789 = icmp ult i64 %788, %742
  %790 = icmp ult i64 %788, %785
  %791 = or i1 %789, %790
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %22, align 1, !tbaa !2432
  %793 = trunc i64 %788 to i32
  %794 = and i32 %793, 255
  %795 = tail call i32 @llvm.ctpop.i32(i32 %794) #8
  %796 = trunc i32 %795 to i8
  %797 = and i8 %796, 1
  %798 = xor i8 %797, 1
  store i8 %798, i8* %29, align 1, !tbaa !2446
  %799 = xor i64 %785, %742
  %800 = xor i64 %799, %788
  %801 = lshr i64 %800, 4
  %802 = trunc i64 %801 to i8
  %803 = and i8 %802, 1
  store i8 %803, i8* %34, align 1, !tbaa !2447
  %804 = icmp eq i64 %788, 0
  %805 = zext i1 %804 to i8
  store i8 %805, i8* %37, align 1, !tbaa !2448
  %806 = lshr i64 %788, 63
  %807 = trunc i64 %806 to i8
  store i8 %807, i8* %40, align 1, !tbaa !2449
  %808 = xor i64 %806, %769
  %809 = xor i64 %806, %787
  %810 = add nuw nsw i64 %808, %809
  %811 = icmp eq i64 %810, 2
  %812 = zext i1 %811 to i8
  store i8 %812, i8* %46, align 1, !tbaa !2450
  %813 = add i64 %634, 106
  store i64 %813, i64* %PC, align 8
  %814 = inttoptr i64 %788 to double*
  %815 = load double, double* %814, align 8
  store double %815, double* %96, align 1, !tbaa !2451
  store double 0.000000e+00, double* %236, align 1, !tbaa !2451
  %816 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %816, i64* %RAX, align 8, !tbaa !2428
  %817 = add i64 %634, 118
  store i64 %817, i64* %PC, align 8
  %818 = inttoptr i64 %816 to double*
  %819 = load double, double* %818, align 8
  %820 = fdiv double %815, %819
  store double %820, double* %96, align 1, !tbaa !2451
  store i64 0, i64* %104, align 1, !tbaa !2451
  %821 = add i64 %779, -80
  %822 = add i64 %634, 122
  store i64 %822, i64* %PC, align 8
  %823 = inttoptr i64 %821 to i64*
  %824 = load i64, i64* %823, align 8
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = add i64 %779, -100
  %826 = add i64 %634, 126
  store i64 %826, i64* %PC, align 8
  %827 = inttoptr i64 %825 to i32*
  %828 = load i32, i32* %827, align 4
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %237, align 8, !tbaa !2428
  %830 = add i64 %779, -104
  %831 = load i32, i32* %ESI, align 4
  %832 = add i64 %634, 129
  store i64 %832, i64* %PC, align 8
  %833 = inttoptr i64 %830 to i32*
  store i32 %831, i32* %833, align 4
  %834 = load i32, i32* %R9D, align 4
  %835 = zext i32 %834 to i64
  %836 = load i64, i64* %PC, align 8
  store i64 %835, i64* %RSI, align 8, !tbaa !2428
  %837 = load i64, i64* %RBP, align 8
  %838 = add i64 %837, -104
  %839 = add i64 %836, 6
  store i64 %839, i64* %PC, align 8
  %840 = inttoptr i64 %838 to i32*
  %841 = load i32, i32* %840, align 4
  %842 = zext i32 %841 to i64
  store i64 %842, i64* %RDX, align 8, !tbaa !2428
  %843 = add i64 %837, -96
  %844 = add i64 %836, 10
  store i64 %844, i64* %PC, align 8
  %845 = inttoptr i64 %843 to i64*
  %846 = load i64, i64* %845, align 8
  store i64 %846, i64* %RCX, align 8, !tbaa !2428
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %847 = add i64 %836, -1960
  %848 = add i64 %836, 17
  %849 = load i64, i64* %RSP, align 8, !tbaa !2428
  %850 = add i64 %849, -8
  %851 = inttoptr i64 %850 to i64*
  store i64 %848, i64* %851, align 8
  store i64 %850, i64* %RSP, align 8, !tbaa !2428
  store i64 %847, i64* %PC, align 8, !tbaa !2428
  %852 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %631)
  %853 = load i64, i64* %RBP, align 8
  %854 = add i64 %853, -108
  %855 = load i32, i32* %EAX, align 4
  %856 = load i64, i64* %PC, align 8
  %857 = add i64 %856, 3
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %854 to i32*
  store i32 %855, i32* %858, align 4
  %859 = load i64, i64* %RBP, align 8
  %860 = add i64 %859, -28
  %861 = load i64, i64* %PC, align 8
  %862 = add i64 %861, 3
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %860 to i32*
  %864 = load i32, i32* %863, align 4
  %865 = add i32 %864, 1
  %866 = zext i32 %865 to i64
  store i64 %866, i64* %RAX, align 8, !tbaa !2428
  %867 = icmp eq i32 %864, -1
  %868 = icmp eq i32 %865, 0
  %869 = or i1 %867, %868
  %870 = zext i1 %869 to i8
  store i8 %870, i8* %22, align 1, !tbaa !2432
  %871 = and i32 %865, 255
  %872 = tail call i32 @llvm.ctpop.i32(i32 %871) #8
  %873 = trunc i32 %872 to i8
  %874 = and i8 %873, 1
  %875 = xor i8 %874, 1
  store i8 %875, i8* %29, align 1, !tbaa !2446
  %876 = xor i32 %864, %865
  %877 = lshr i32 %876, 4
  %878 = trunc i32 %877 to i8
  %879 = and i8 %878, 1
  store i8 %879, i8* %34, align 1, !tbaa !2447
  %880 = zext i1 %868 to i8
  store i8 %880, i8* %37, align 1, !tbaa !2448
  %881 = lshr i32 %865, 31
  %882 = trunc i32 %881 to i8
  store i8 %882, i8* %40, align 1, !tbaa !2449
  %883 = lshr i32 %864, 31
  %884 = xor i32 %881, %883
  %885 = add nuw nsw i32 %884, %881
  %886 = icmp eq i32 %885, 2
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %46, align 1, !tbaa !2450
  %888 = add i64 %861, 9
  store i64 %888, i64* %PC, align 8
  store i32 %865, i32* %863, align 4
  %889 = load i64, i64* %PC, align 8
  %890 = add i64 %889, -247
  store i64 %890, i64* %PC, align 8, !tbaa !2428
  br label %block_400d7e

block_400f88:                                     ; preds = %block_400ec0, %block_400eeb, %block_400f4c
  %891 = phi i64 [ %1009, %block_400ec0 ], [ %378, %block_400eeb ], [ %.pre7, %block_400f4c ]
  %MEMORY.3 = phi %struct.Memory* [ %971, %block_400ec0 ], [ %971, %block_400eeb ], [ %322, %block_400f4c ]
  store i32 0, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %892 = load i64, i64* %RSP, align 8
  %893 = add i64 %892, 128
  store i64 %893, i64* %RSP, align 8, !tbaa !2428
  %894 = icmp ugt i64 %892, -129
  %895 = zext i1 %894 to i8
  store i8 %895, i8* %22, align 1, !tbaa !2432
  %896 = trunc i64 %893 to i32
  %897 = and i32 %896, 255
  %898 = tail call i32 @llvm.ctpop.i32(i32 %897) #8
  %899 = trunc i32 %898 to i8
  %900 = and i8 %899, 1
  %901 = xor i8 %900, 1
  store i8 %901, i8* %29, align 1, !tbaa !2446
  %902 = xor i64 %892, %893
  %903 = lshr i64 %902, 4
  %904 = trunc i64 %903 to i8
  %905 = and i8 %904, 1
  store i8 %905, i8* %34, align 1, !tbaa !2447
  %906 = icmp eq i64 %893, 0
  %907 = zext i1 %906 to i8
  store i8 %907, i8* %37, align 1, !tbaa !2448
  %908 = lshr i64 %893, 63
  %909 = trunc i64 %908 to i8
  store i8 %909, i8* %40, align 1, !tbaa !2449
  %910 = lshr i64 %892, 63
  %911 = xor i64 %908, %910
  %912 = add nuw nsw i64 %911, %908
  %913 = icmp eq i64 %912, 2
  %914 = zext i1 %913 to i8
  store i8 %914, i8* %46, align 1, !tbaa !2450
  %915 = add i64 %891, 19
  store i64 %915, i64* %PC, align 8
  %916 = add i64 %892, 136
  %917 = inttoptr i64 %893 to i64*
  %918 = load i64, i64* %917, align 8
  store i64 %918, i64* %RBP, align 8, !tbaa !2428
  store i64 %916, i64* %RSP, align 8, !tbaa !2428
  %919 = add i64 %891, 20
  store i64 %919, i64* %PC, align 8
  %920 = inttoptr i64 %916 to i64*
  %921 = load i64, i64* %920, align 8
  store i64 %921, i64* %PC, align 8, !tbaa !2428
  %922 = add i64 %892, 144
  store i64 %922, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_400d7e:                                     ; preds = %block_400d8e, %block_400d30
  %923 = phi i64 [ %.pre4, %block_400d30 ], [ %890, %block_400d8e ]
  %MEMORY.4 = phi %struct.Memory* [ %222, %block_400d30 ], [ %852, %block_400d8e ]
  %924 = load i64, i64* %RBP, align 8
  %925 = add i64 %924, -28
  %926 = add i64 %923, 3
  store i64 %926, i64* %PC, align 8
  %927 = inttoptr i64 %925 to i32*
  %928 = load i32, i32* %927, align 4
  %929 = zext i32 %928 to i64
  store i64 %929, i64* %RAX, align 8, !tbaa !2428
  %930 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %931 = sub i32 %928, %930
  %932 = icmp ult i32 %928, %930
  %933 = zext i1 %932 to i8
  store i8 %933, i8* %22, align 1, !tbaa !2432
  %934 = and i32 %931, 255
  %935 = tail call i32 @llvm.ctpop.i32(i32 %934) #8
  %936 = trunc i32 %935 to i8
  %937 = and i8 %936, 1
  %938 = xor i8 %937, 1
  store i8 %938, i8* %29, align 1, !tbaa !2446
  %939 = xor i32 %930, %928
  %940 = xor i32 %939, %931
  %941 = lshr i32 %940, 4
  %942 = trunc i32 %941 to i8
  %943 = and i8 %942, 1
  store i8 %943, i8* %34, align 1, !tbaa !2447
  %944 = icmp eq i32 %931, 0
  %945 = zext i1 %944 to i8
  store i8 %945, i8* %37, align 1, !tbaa !2448
  %946 = lshr i32 %931, 31
  %947 = trunc i32 %946 to i8
  store i8 %947, i8* %40, align 1, !tbaa !2449
  %948 = lshr i32 %928, 31
  %949 = lshr i32 %930, 31
  %950 = xor i32 %949, %948
  %951 = xor i32 %946, %948
  %952 = add nuw nsw i32 %951, %950
  %953 = icmp eq i32 %952, 2
  %954 = zext i1 %953 to i8
  store i8 %954, i8* %46, align 1, !tbaa !2450
  %955 = icmp ne i8 %947, 0
  %956 = xor i1 %955, %953
  %.v9 = select i1 %956, i64 16, i64 252
  %957 = add i64 %923, %.v9
  store i64 %957, i64* %PC, align 8, !tbaa !2428
  br i1 %956, label %block_400d8e, label %block_400e7a

block_400ec0:                                     ; preds = %block_400e81
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 203), i64* %RDI, align 8, !tbaa !2428
  %958 = add i64 %1011, -8
  %959 = add i64 %1044, 14
  store i64 %959, i64* %PC, align 8
  %960 = inttoptr i64 %958 to i64*
  %961 = load i64, i64* %960, align 8
  store i64 %961, i64* %RSI, align 8, !tbaa !2428
  %962 = add i64 %1011, -48
  %963 = add i64 %1044, 19
  store i64 %963, i64* %PC, align 8
  %964 = inttoptr i64 %962 to i64*
  %965 = load i64, i64* %964, align 8
  store i64 %965, i64* %115, align 1, !tbaa !2451
  store double 0.000000e+00, double* %235, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %966 = add i64 %1044, -2064
  %967 = add i64 %1044, 26
  %968 = load i64, i64* %RSP, align 8, !tbaa !2428
  %969 = add i64 %968, -8
  %970 = inttoptr i64 %969 to i64*
  store i64 %967, i64* %970, align 8
  store i64 %969, i64* %RSP, align 8, !tbaa !2428
  store i64 %966, i64* %PC, align 8, !tbaa !2428
  %971 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.4)
  %972 = load i64, i64* %PC, align 8
  %973 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %974 = add i32 %973, -1
  %975 = icmp eq i32 %973, 0
  %976 = zext i1 %975 to i8
  store i8 %976, i8* %22, align 1, !tbaa !2432
  %977 = and i32 %974, 255
  %978 = tail call i32 @llvm.ctpop.i32(i32 %977) #8
  %979 = trunc i32 %978 to i8
  %980 = and i8 %979, 1
  %981 = xor i8 %980, 1
  store i8 %981, i8* %29, align 1, !tbaa !2446
  %982 = xor i32 %973, %974
  %983 = lshr i32 %982, 4
  %984 = trunc i32 %983 to i8
  %985 = and i8 %984, 1
  store i8 %985, i8* %34, align 1, !tbaa !2447
  %986 = icmp eq i32 %974, 0
  %987 = zext i1 %986 to i8
  store i8 %987, i8* %37, align 1, !tbaa !2448
  %988 = lshr i32 %974, 31
  %989 = trunc i32 %988 to i8
  store i8 %989, i8* %40, align 1, !tbaa !2449
  %990 = lshr i32 %973, 31
  %991 = xor i32 %988, %990
  %992 = add nuw nsw i32 %991, %990
  %993 = icmp eq i32 %992, 2
  %994 = zext i1 %993 to i8
  store i8 %994, i8* %46, align 1, !tbaa !2450
  %995 = load i64, i64* %RBP, align 8
  %996 = add i64 %995, -112
  %997 = load i32, i32* %EAX, align 4
  %998 = add i64 %972, 11
  store i64 %998, i64* %PC, align 8
  %999 = inttoptr i64 %996 to i32*
  store i32 %997, i32* %999, align 4
  %1000 = load i64, i64* %PC, align 8
  %1001 = load i8, i8* %37, align 1, !tbaa !2448
  %1002 = icmp ne i8 %1001, 0
  %1003 = load i8, i8* %40, align 1, !tbaa !2449
  %1004 = icmp ne i8 %1003, 0
  %1005 = load i8, i8* %46, align 1, !tbaa !2450
  %1006 = icmp ne i8 %1005, 0
  %1007 = xor i1 %1004, %1006
  %1008 = or i1 %1002, %1007
  %.v11 = select i1 %1008, i64 163, i64 6
  %1009 = add i64 %1000, %.v11
  store i64 %1009, i64* %PC, align 8, !tbaa !2428
  br i1 %1008, label %block_400f88, label %block_400eeb

block_400e81:                                     ; preds = %block_400e91, %block_400e7a
  %1010 = phi i64 [ %1119, %block_400e91 ], [ %.pre5, %block_400e7a ]
  %1011 = load i64, i64* %RBP, align 8
  %1012 = add i64 %1011, -28
  %1013 = add i64 %1010, 3
  store i64 %1013, i64* %PC, align 8
  %1014 = inttoptr i64 %1012 to i32*
  %1015 = load i32, i32* %1014, align 4
  %1016 = zext i32 %1015 to i64
  store i64 %1016, i64* %RAX, align 8, !tbaa !2428
  %1017 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %1018 = sub i32 %1015, %1017
  %1019 = icmp ult i32 %1015, %1017
  %1020 = zext i1 %1019 to i8
  store i8 %1020, i8* %22, align 1, !tbaa !2432
  %1021 = and i32 %1018, 255
  %1022 = tail call i32 @llvm.ctpop.i32(i32 %1021) #8
  %1023 = trunc i32 %1022 to i8
  %1024 = and i8 %1023, 1
  %1025 = xor i8 %1024, 1
  store i8 %1025, i8* %29, align 1, !tbaa !2446
  %1026 = xor i32 %1017, %1015
  %1027 = xor i32 %1026, %1018
  %1028 = lshr i32 %1027, 4
  %1029 = trunc i32 %1028 to i8
  %1030 = and i8 %1029, 1
  store i8 %1030, i8* %34, align 1, !tbaa !2447
  %1031 = icmp eq i32 %1018, 0
  %1032 = zext i1 %1031 to i8
  store i8 %1032, i8* %37, align 1, !tbaa !2448
  %1033 = lshr i32 %1018, 31
  %1034 = trunc i32 %1033 to i8
  store i8 %1034, i8* %40, align 1, !tbaa !2449
  %1035 = lshr i32 %1015, 31
  %1036 = lshr i32 %1017, 31
  %1037 = xor i32 %1036, %1035
  %1038 = xor i32 %1033, %1035
  %1039 = add nuw nsw i32 %1038, %1037
  %1040 = icmp eq i32 %1039, 2
  %1041 = zext i1 %1040 to i8
  store i8 %1041, i8* %46, align 1, !tbaa !2450
  %1042 = icmp ne i8 %1034, 0
  %1043 = xor i1 %1042, %1040
  %.v10 = select i1 %1043, i64 16, i64 63
  %1044 = add i64 %1010, %.v10
  store i64 %1044, i64* %PC, align 8, !tbaa !2428
  br i1 %1043, label %block_400e91, label %block_400ec0

block_400e7a:                                     ; preds = %block_400d7e
  %1045 = add i64 %957, 7
  store i64 %1045, i64* %PC, align 8
  store i32 0, i32* %927, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_400e81

block_400e91:                                     ; preds = %block_400e81
  %1046 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = add i64 %1044, 12
  store i64 %1047, i64* %PC, align 8
  %1048 = load i32, i32* %1014, align 4
  %1049 = sext i32 %1048 to i64
  %1050 = shl nsw i64 %1049, 4
  store i64 %1050, i64* %RCX, align 8, !tbaa !2428
  %1051 = lshr i64 %1049, 59
  %1052 = and i64 %1051, 1
  %1053 = add i64 %1050, %1046
  store i64 %1053, i64* %RAX, align 8, !tbaa !2428
  %1054 = icmp ult i64 %1053, %1046
  %1055 = icmp ult i64 %1053, %1050
  %1056 = or i1 %1054, %1055
  %1057 = zext i1 %1056 to i8
  store i8 %1057, i8* %22, align 1, !tbaa !2432
  %1058 = trunc i64 %1053 to i32
  %1059 = and i32 %1058, 255
  %1060 = tail call i32 @llvm.ctpop.i32(i32 %1059) #8
  %1061 = trunc i32 %1060 to i8
  %1062 = and i8 %1061, 1
  %1063 = xor i8 %1062, 1
  store i8 %1063, i8* %29, align 1, !tbaa !2446
  %1064 = xor i64 %1050, %1046
  %1065 = xor i64 %1064, %1053
  %1066 = lshr i64 %1065, 4
  %1067 = trunc i64 %1066 to i8
  %1068 = and i8 %1067, 1
  store i8 %1068, i8* %34, align 1, !tbaa !2447
  %1069 = icmp eq i64 %1053, 0
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %37, align 1, !tbaa !2448
  %1071 = lshr i64 %1053, 63
  %1072 = trunc i64 %1071 to i8
  store i8 %1072, i8* %40, align 1, !tbaa !2449
  %1073 = lshr i64 %1046, 63
  %1074 = xor i64 %1071, %1073
  %1075 = xor i64 %1071, %1052
  %1076 = add nuw nsw i64 %1074, %1075
  %1077 = icmp eq i64 %1076, 2
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %46, align 1, !tbaa !2450
  %1079 = add i64 %1044, 23
  store i64 %1079, i64* %PC, align 8
  %1080 = inttoptr i64 %1053 to double*
  %1081 = load double, double* %1080, align 8
  store double %1081, double* %234, align 1, !tbaa !2451
  store double 0.000000e+00, double* %235, align 1, !tbaa !2451
  %1082 = add i64 %1011, -48
  %1083 = add i64 %1044, 28
  store i64 %1083, i64* %PC, align 8
  %1084 = inttoptr i64 %1082 to double*
  %1085 = load double, double* %1084, align 8
  %1086 = fadd double %1081, %1085
  store double %1086, double* %234, align 1, !tbaa !2451
  store i64 0, i64* %48, align 1, !tbaa !2451
  %1087 = add i64 %1044, 33
  store i64 %1087, i64* %PC, align 8
  store double %1086, double* %1084, align 8
  %1088 = load i64, i64* %RBP, align 8
  %1089 = add i64 %1088, -28
  %1090 = load i64, i64* %PC, align 8
  %1091 = add i64 %1090, 3
  store i64 %1091, i64* %PC, align 8
  %1092 = inttoptr i64 %1089 to i32*
  %1093 = load i32, i32* %1092, align 4
  %1094 = add i32 %1093, 1
  %1095 = zext i32 %1094 to i64
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = icmp eq i32 %1093, -1
  %1097 = icmp eq i32 %1094, 0
  %1098 = or i1 %1096, %1097
  %1099 = zext i1 %1098 to i8
  store i8 %1099, i8* %22, align 1, !tbaa !2432
  %1100 = and i32 %1094, 255
  %1101 = tail call i32 @llvm.ctpop.i32(i32 %1100) #8
  %1102 = trunc i32 %1101 to i8
  %1103 = and i8 %1102, 1
  %1104 = xor i8 %1103, 1
  store i8 %1104, i8* %29, align 1, !tbaa !2446
  %1105 = xor i32 %1093, %1094
  %1106 = lshr i32 %1105, 4
  %1107 = trunc i32 %1106 to i8
  %1108 = and i8 %1107, 1
  store i8 %1108, i8* %34, align 1, !tbaa !2447
  %1109 = zext i1 %1097 to i8
  store i8 %1109, i8* %37, align 1, !tbaa !2448
  %1110 = lshr i32 %1094, 31
  %1111 = trunc i32 %1110 to i8
  store i8 %1111, i8* %40, align 1, !tbaa !2449
  %1112 = lshr i32 %1093, 31
  %1113 = xor i32 %1110, %1112
  %1114 = add nuw nsw i32 %1113, %1110
  %1115 = icmp eq i32 %1114, 2
  %1116 = zext i1 %1115 to i8
  store i8 %1116, i8* %46, align 1, !tbaa !2450
  %1117 = add i64 %1090, 9
  store i64 %1117, i64* %PC, align 8
  store i32 %1094, i32* %1092, align 4
  %1118 = load i64, i64* %PC, align 8
  %1119 = add i64 %1118, -58
  store i64 %1119, i64* %PC, align 8, !tbaa !2428
  br label %block_400e81
}

; Function Attrs: noinline
define %struct.Memory* @sub_4039b0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4039b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -120
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 112
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  store i64 %39, i64* %RAX, align 8, !tbaa !2428
  %40 = add i64 %6, -16
  store i64 %40, i64* %RCX, align 8, !tbaa !2428
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %9, 19
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RAX, align 8
  %51 = load i64, i64* %PC, align 8
  store i64 %50, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RCX, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %51, 776
  %54 = add i64 %51, 11
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_403cd0__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %2)
  %59 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -32
  %62 = load i64, i64* %RAX, align 8
  %63 = add i64 %59, 11
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %64, align 8
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -32
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %66 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RAX, align 8, !tbaa !2428
  %71 = ashr i64 %70, 63
  store i64 %71, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RCX, align 8
  %73 = add i64 %67, 9
  store i64 %73, i64* %PC, align 8
  %74 = sext i64 %72 to i128
  %75 = and i128 %74, -18446744073709551616
  %76 = zext i64 %71 to i128
  %77 = shl nuw i128 %76, 64
  %78 = zext i64 %70 to i128
  %79 = or i128 %77, %78
  %80 = zext i64 %72 to i128
  %81 = or i128 %75, %80
  %82 = sdiv i128 %79, %81
  %83 = trunc i128 %82 to i64
  %84 = and i128 %82, 18446744073709551615
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = or i128 %86, %84
  %88 = icmp eq i128 %82, %87
  br i1 %88, label %91, label %89

; <label>:89:                                     ; preds = %block_4039b0
  %90 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %73, %struct.Memory* %58) #9
  %.pre = load i64, i64* %RAX, align 8
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:91:                                     ; preds = %block_4039b0
  %92 = srem i128 %79, %81
  %93 = trunc i128 %92 to i64
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  store i64 %93, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %91, %89
  %94 = phi i64 [ %.pre2, %89 ], [ %65, %91 ]
  %95 = phi i64 [ %.pre1, %89 ], [ %73, %91 ]
  %96 = phi i64 [ %.pre, %89 ], [ %83, %91 ]
  %97 = phi %struct.Memory* [ %90, %89 ], [ %58, %91 ]
  %98 = add i64 %96, -1
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = icmp eq i64 %96, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %13, align 1, !tbaa !2432
  %101 = trunc i64 %98 to i32
  %102 = and i32 %101, 255
  %103 = tail call i32 @llvm.ctpop.i32(i32 %102) #8
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  store i8 %106, i8* %20, align 1, !tbaa !2446
  %107 = xor i64 %96, %98
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* %26, align 1, !tbaa !2447
  %111 = icmp eq i64 %98, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %29, align 1, !tbaa !2448
  %113 = lshr i64 %98, 63
  %114 = trunc i64 %113 to i8
  store i8 %114, i8* %32, align 1, !tbaa !2449
  %115 = lshr i64 %96, 63
  %116 = xor i64 %113, %115
  %117 = add nuw nsw i64 %116, %115
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %38, align 1, !tbaa !2450
  %120 = add i64 %94, -24
  %121 = add i64 %95, 8
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %120 to i64*
  store i64 %98, i64* %122, align 8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %124 = bitcast i64* %123 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_4039ef

block_403af2:                                     ; preds = %block_403a5e
  %125 = load i64, i64* %RSP, align 8
  %126 = add i64 %125, 112
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %127 = icmp ugt i64 %125, -113
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %13, align 1, !tbaa !2432
  %129 = trunc i64 %126 to i32
  %130 = and i32 %129, 255
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #8
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  store i8 %134, i8* %20, align 1, !tbaa !2446
  %135 = xor i64 %125, 16
  %136 = xor i64 %135, %126
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  store i8 %139, i8* %26, align 1, !tbaa !2447
  %140 = icmp eq i64 %126, 0
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %29, align 1, !tbaa !2448
  %142 = lshr i64 %126, 63
  %143 = trunc i64 %142 to i8
  store i8 %143, i8* %32, align 1, !tbaa !2449
  %144 = lshr i64 %125, 63
  %145 = xor i64 %142, %144
  %146 = add nuw nsw i64 %145, %142
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %38, align 1, !tbaa !2450
  %149 = add i64 %339, 5
  store i64 %149, i64* %PC, align 8
  %150 = add i64 %125, 120
  %151 = inttoptr i64 %126 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %RBP, align 8, !tbaa !2428
  store i64 %150, i64* %RSP, align 8, !tbaa !2428
  %153 = add i64 %339, 6
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %150 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %156 = add i64 %125, 128
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4039fa:                                     ; preds = %block_4039ef
  %157 = add i64 %265, -8
  store i64 %157, i64* %RDI, align 8, !tbaa !2428
  %158 = add i64 %281, 8
  store i64 %158, i64* %PC, align 8
  %159 = load i64, i64* %268, align 8
  store i64 %159, i64* %RSI, align 8, !tbaa !2428
  %160 = add i64 %281, 774
  %161 = add i64 %281, 13
  %162 = load i64, i64* %RSP, align 8, !tbaa !2428
  %163 = add i64 %162, -8
  %164 = inttoptr i64 %163 to i64*
  store i64 %161, i64* %164, align 8
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  store i64 %160, i64* %PC, align 8, !tbaa !2428
  %165 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %160, %struct.Memory* %MEMORY.0)
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -48
  %168 = load i64, i64* %PC, align 8
  store i64 %167, i64* %RDI, align 8, !tbaa !2428
  %169 = load i64, i64* %RAX, align 8
  %170 = add i64 %168, 8
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %167 to i64*
  store i64 %169, i64* %171, align 8
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, 641
  %174 = add i64 %172, 5
  %175 = load i64, i64* %RSP, align 8, !tbaa !2428
  %176 = add i64 %175, -8
  %177 = inttoptr i64 %176 to i64*
  store i64 %174, i64* %177, align 8
  store i64 %176, i64* %RSP, align 8, !tbaa !2428
  store i64 %173, i64* %PC, align 8, !tbaa !2428
  %178 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %173, %struct.Memory* %165)
  %179 = bitcast i64* %RAX to i64**
  %180 = load i64*, i64** %179, align 8
  %181 = load i64, i64* %PC, align 8
  %182 = add i64 %181, 3
  store i64 %182, i64* %PC, align 8
  %183 = load i64, i64* %180, align 8
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = load i64, i64* %RBP, align 8
  %185 = add i64 %184, -40
  %186 = add i64 %181, 7
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %185 to i64*
  store i64 %183, i64* %187, align 8
  %188 = load i64, i64* %RBP, align 8
  %189 = add i64 %188, -32
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %189 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RDI, align 8, !tbaa !2428
  %194 = add i64 %188, -8
  %195 = add i64 %190, 8
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = add i64 %188, -56
  %199 = add i64 %190, 12
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -24
  %203 = load i64, i64* %PC, align 8
  %204 = add i64 %203, 4
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %202 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RDX, align 8, !tbaa !2428
  %207 = add i64 %201, -40
  %208 = add i64 %203, 8
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %201, -64
  %212 = add i64 %203, 12
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to i64*
  store i64 %210, i64* %213, align 8
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -56
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218, align 8
  store i64 %219, i64* %RSI, align 8, !tbaa !2428
  %220 = add i64 %214, -64
  %221 = add i64 %216, 9
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %220 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %223, i64* %224, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %225 = add i64 %216, 765
  %226 = add i64 %216, 14
  %227 = load i64, i64* %RSP, align 8, !tbaa !2428
  %228 = add i64 %227, -8
  %229 = inttoptr i64 %228 to i64*
  store i64 %226, i64* %229, align 8
  store i64 %228, i64* %RSP, align 8, !tbaa !2428
  store i64 %225, i64* %PC, align 8, !tbaa !2428
  %230 = tail call %struct.Memory* @sub_403d30__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %225, %struct.Memory* %178)
  %231 = load i64, i64* %RBP, align 8
  %232 = add i64 %231, -24
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = add i64 %236, -1
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = icmp ne i64 %236, 0
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %13, align 1, !tbaa !2432
  %240 = trunc i64 %237 to i32
  %241 = and i32 %240, 255
  %242 = tail call i32 @llvm.ctpop.i32(i32 %241) #8
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  store i8 %245, i8* %20, align 1, !tbaa !2446
  %246 = xor i64 %236, 16
  %247 = xor i64 %237, %246
  %248 = lshr i64 %247, 4
  %249 = trunc i64 %248 to i8
  %250 = and i8 %249, 1
  store i8 %250, i8* %26, align 1, !tbaa !2447
  %251 = icmp eq i64 %237, 0
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %29, align 1, !tbaa !2448
  %253 = lshr i64 %237, 63
  %254 = trunc i64 %253 to i8
  store i8 %254, i8* %32, align 1, !tbaa !2449
  %255 = lshr i64 %236, 63
  %256 = xor i64 %253, %255
  %257 = xor i64 %253, 1
  %258 = add nuw nsw i64 %256, %257
  %259 = icmp eq i64 %258, 2
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %38, align 1, !tbaa !2450
  %261 = add i64 %233, 12
  store i64 %261, i64* %PC, align 8
  store i64 %237, i64* %235, align 8
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, -94
  store i64 %263, i64* %PC, align 8, !tbaa !2428
  br label %block_4039ef

block_4039ef:                                     ; preds = %block_4039fa, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %264 = phi i64 [ %.pre3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %263, %block_4039fa ]
  %MEMORY.0 = phi %struct.Memory* [ %97, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %230, %block_4039fa ]
  %265 = load i64, i64* %RBP, align 8
  %266 = add i64 %265, -24
  %267 = add i64 %264, 5
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %270 = trunc i64 %269 to i32
  %271 = and i32 %270, 255
  %272 = tail call i32 @llvm.ctpop.i32(i32 %271) #8
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  store i8 %275, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %276 = icmp eq i64 %269, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %29, align 1, !tbaa !2448
  %278 = lshr i64 %269, 63
  %279 = trunc i64 %278 to i8
  store i8 %279, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %280 = icmp ne i8 %279, 0
  %.v = select i1 %280, i64 99, i64 11
  %281 = add i64 %264, %.v
  store i64 %281, i64* %PC, align 8, !tbaa !2428
  br i1 %280, label %block_403a52, label %block_4039fa

block_403a52:                                     ; preds = %block_4039ef
  %282 = add i64 %265, -32
  %283 = add i64 %281, 4
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = add i64 %285, -1
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = icmp eq i64 %285, 0
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %13, align 1, !tbaa !2432
  %289 = trunc i64 %286 to i32
  %290 = and i32 %289, 255
  %291 = tail call i32 @llvm.ctpop.i32(i32 %290) #8
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %20, align 1, !tbaa !2446
  %295 = xor i64 %285, %286
  %296 = lshr i64 %295, 4
  %297 = trunc i64 %296 to i8
  %298 = and i8 %297, 1
  store i8 %298, i8* %26, align 1, !tbaa !2447
  %299 = icmp eq i64 %286, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %29, align 1, !tbaa !2448
  %301 = lshr i64 %286, 63
  %302 = trunc i64 %301 to i8
  store i8 %302, i8* %32, align 1, !tbaa !2449
  %303 = lshr i64 %285, 63
  %304 = xor i64 %301, %303
  %305 = add nuw nsw i64 %304, %303
  %306 = icmp eq i64 %305, 2
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %38, align 1, !tbaa !2450
  %308 = add i64 %281, 12
  store i64 %308, i64* %PC, align 8
  store i64 %286, i64* %268, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_403a5e

block_403a5e:                                     ; preds = %block_403a69, %block_403a52
  %309 = phi i64 [ %.pre4, %block_403a52 ], [ %492, %block_403a69 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_403a52 ], [ %459, %block_403a69 ]
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -24
  %312 = add i64 %309, 5
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = add i64 %314, -1
  %316 = icmp eq i64 %314, 0
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %13, align 1, !tbaa !2432
  %318 = trunc i64 %315 to i32
  %319 = and i32 %318, 255
  %320 = tail call i32 @llvm.ctpop.i32(i32 %319) #8
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  store i8 %323, i8* %20, align 1, !tbaa !2446
  %324 = xor i64 %314, %315
  %325 = lshr i64 %324, 4
  %326 = trunc i64 %325 to i8
  %327 = and i8 %326, 1
  store i8 %327, i8* %26, align 1, !tbaa !2447
  %328 = icmp eq i64 %315, 0
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %29, align 1, !tbaa !2448
  %330 = lshr i64 %315, 63
  %331 = trunc i64 %330 to i8
  store i8 %331, i8* %32, align 1, !tbaa !2449
  %332 = lshr i64 %314, 63
  %333 = xor i64 %330, %332
  %334 = add nuw nsw i64 %333, %332
  %335 = icmp eq i64 %334, 2
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %38, align 1, !tbaa !2450
  %337 = icmp ne i8 %331, 0
  %338 = xor i1 %337, %335
  %.v5 = select i1 %338, i64 148, i64 11
  %339 = add i64 %309, %.v5
  store i64 %339, i64* %PC, align 8, !tbaa !2428
  br i1 %338, label %block_403af2, label %block_403a69

block_403a69:                                     ; preds = %block_403a5e
  %340 = add i64 %310, -8
  store i64 %340, i64* %RDI, align 8, !tbaa !2428
  %341 = add i64 %339, 8
  store i64 %341, i64* %PC, align 8
  %342 = load i64, i64* %313, align 8
  store i64 %342, i64* %RSI, align 8, !tbaa !2428
  %343 = add i64 %339, 663
  %344 = add i64 %339, 13
  %345 = load i64, i64* %RSP, align 8, !tbaa !2428
  %346 = add i64 %345, -8
  %347 = inttoptr i64 %346 to i64*
  store i64 %344, i64* %347, align 8
  store i64 %346, i64* %RSP, align 8, !tbaa !2428
  store i64 %343, i64* %PC, align 8, !tbaa !2428
  %348 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %343, %struct.Memory* %MEMORY.1)
  %349 = load i64, i64* %RBP, align 8
  %350 = add i64 %349, -80
  %351 = load i64, i64* %PC, align 8
  store i64 %350, i64* %RDI, align 8, !tbaa !2428
  %352 = load i64, i64* %RAX, align 8
  %353 = add i64 %351, 8
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %350 to i64*
  store i64 %352, i64* %354, align 8
  %355 = load i64, i64* %PC, align 8
  %356 = add i64 %355, 530
  %357 = add i64 %355, 5
  %358 = load i64, i64* %RSP, align 8, !tbaa !2428
  %359 = add i64 %358, -8
  %360 = inttoptr i64 %359 to i64*
  store i64 %357, i64* %360, align 8
  store i64 %359, i64* %RSP, align 8, !tbaa !2428
  store i64 %356, i64* %PC, align 8, !tbaa !2428
  %361 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %356, %struct.Memory* %348)
  %362 = load i64, i64* %RBP, align 8
  %363 = add i64 %362, -8
  %364 = load i64, i64* %PC, align 8
  store i64 %363, i64* %RDI, align 8, !tbaa !2428
  %365 = bitcast i64* %RAX to i64**
  %366 = load i64*, i64** %365, align 8
  %367 = add i64 %364, 7
  store i64 %367, i64* %PC, align 8
  %368 = load i64, i64* %366, align 8
  store i64 %368, i64* %RAX, align 8, !tbaa !2428
  %369 = add i64 %362, -72
  %370 = add i64 %364, 11
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i64*
  store i64 %368, i64* %371, align 8
  %372 = load i64, i64* %PC, align 8
  %373 = add i64 %372, 514
  %374 = add i64 %372, 5
  %375 = load i64, i64* %RSP, align 8, !tbaa !2428
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %374, i64* %377, align 8
  store i64 %376, i64* %RSP, align 8, !tbaa !2428
  store i64 %373, i64* %PC, align 8, !tbaa !2428
  %378 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %373, %struct.Memory* %361)
  %379 = load i64, i64* %RBP, align 8
  %380 = add i64 %379, -8
  %381 = load i64, i64* %PC, align 8
  store i64 %380, i64* %RDI, align 8, !tbaa !2428
  %382 = add i64 %379, -24
  %383 = add i64 %381, 8
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i64*
  %385 = load i64, i64* %384, align 8
  store i64 %385, i64* %RSI, align 8, !tbaa !2428
  %386 = add i64 %379, -112
  %387 = load i64, i64* %RAX, align 8
  %388 = add i64 %381, 12
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %386 to i64*
  store i64 %387, i64* %389, align 8
  %390 = load i64, i64* %PC, align 8
  %391 = add i64 %390, 609
  %392 = add i64 %390, 5
  %393 = load i64, i64* %RSP, align 8, !tbaa !2428
  %394 = add i64 %393, -8
  %395 = inttoptr i64 %394 to i64*
  store i64 %392, i64* %395, align 8
  store i64 %394, i64* %RSP, align 8, !tbaa !2428
  store i64 %391, i64* %PC, align 8, !tbaa !2428
  %396 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %391, %struct.Memory* %378)
  %397 = load i64, i64* %RBP, align 8
  %398 = add i64 %397, -88
  %399 = load i64, i64* %PC, align 8
  store i64 %398, i64* %RDI, align 8, !tbaa !2428
  %400 = load i64, i64* %RAX, align 8
  %401 = add i64 %399, 8
  store i64 %401, i64* %PC, align 8
  %402 = inttoptr i64 %398 to i64*
  store i64 %400, i64* %402, align 8
  %403 = load i64, i64* %PC, align 8
  %404 = add i64 %403, 484
  %405 = add i64 %403, 5
  %406 = load i64, i64* %RSP, align 8, !tbaa !2428
  %407 = add i64 %406, -8
  %408 = inttoptr i64 %407 to i64*
  store i64 %405, i64* %408, align 8
  store i64 %407, i64* %RSP, align 8, !tbaa !2428
  store i64 %404, i64* %PC, align 8, !tbaa !2428
  %409 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %404, %struct.Memory* %396)
  %410 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %411 = load i64, i64* %RBP, align 8
  %412 = add i64 %411, -112
  %413 = add i64 %410, 8
  store i64 %413, i64* %PC, align 8
  %414 = inttoptr i64 %412 to i64*
  %415 = load i64, i64* %414, align 8
  store i64 %415, i64* %RSI, align 8, !tbaa !2428
  %416 = add i64 %410, 11
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i64*
  %418 = load i64, i64* %417, align 8
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = load i64*, i64** %365, align 8
  %420 = add i64 %410, 14
  store i64 %420, i64* %PC, align 8
  store i64 %418, i64* %419, align 8
  %421 = load i64, i64* %RBP, align 8
  %422 = add i64 %421, -24
  %423 = load i64, i64* %PC, align 8
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425, align 8
  store i64 %426, i64* %RDI, align 8, !tbaa !2428
  %427 = add i64 %421, -8
  %428 = add i64 %423, 8
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %421, -96
  %432 = add i64 %423, 12
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %431 to i64*
  store i64 %430, i64* %433, align 8
  %434 = load i64, i64* %RBP, align 8
  %435 = add i64 %434, -72
  %436 = load i64, i64* %PC, align 8
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %435 to i64*
  %439 = load i64, i64* %438, align 8
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = add i64 %434, -104
  %441 = add i64 %436, 8
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %440 to i64*
  store i64 %439, i64* %442, align 8
  %443 = load i64, i64* %RBP, align 8
  %444 = add i64 %443, -96
  %445 = load i64, i64* %PC, align 8
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447, align 8
  store i64 %448, i64* %RSI, align 8, !tbaa !2428
  %449 = add i64 %443, -104
  %450 = add i64 %445, 9
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %449 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %452, i64* %453, align 1, !tbaa !2451
  store double 0.000000e+00, double* %124, align 1, !tbaa !2451
  %454 = add i64 %445, 605
  %455 = add i64 %445, 14
  %456 = load i64, i64* %RSP, align 8, !tbaa !2428
  %457 = add i64 %456, -8
  %458 = inttoptr i64 %457 to i64*
  store i64 %455, i64* %458, align 8
  store i64 %457, i64* %RSP, align 8, !tbaa !2428
  store i64 %454, i64* %PC, align 8, !tbaa !2428
  %459 = tail call %struct.Memory* @sub_403d30__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %454, %struct.Memory* %409)
  %460 = load i64, i64* %RBP, align 8
  %461 = add i64 %460, -24
  %462 = load i64, i64* %PC, align 8
  %463 = add i64 %462, 4
  store i64 %463, i64* %PC, align 8
  %464 = inttoptr i64 %461 to i64*
  %465 = load i64, i64* %464, align 8
  %466 = add i64 %465, -1
  store i64 %466, i64* %RAX, align 8, !tbaa !2428
  %467 = icmp ne i64 %465, 0
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %13, align 1, !tbaa !2432
  %469 = trunc i64 %466 to i32
  %470 = and i32 %469, 255
  %471 = tail call i32 @llvm.ctpop.i32(i32 %470) #8
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = xor i8 %473, 1
  store i8 %474, i8* %20, align 1, !tbaa !2446
  %475 = xor i64 %465, 16
  %476 = xor i64 %466, %475
  %477 = lshr i64 %476, 4
  %478 = trunc i64 %477 to i8
  %479 = and i8 %478, 1
  store i8 %479, i8* %26, align 1, !tbaa !2447
  %480 = icmp eq i64 %466, 0
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %29, align 1, !tbaa !2448
  %482 = lshr i64 %466, 63
  %483 = trunc i64 %482 to i8
  store i8 %483, i8* %32, align 1, !tbaa !2449
  %484 = lshr i64 %465, 63
  %485 = xor i64 %482, %484
  %486 = xor i64 %482, 1
  %487 = add nuw nsw i64 %485, %486
  %488 = icmp eq i64 %487, 2
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %38, align 1, !tbaa !2450
  %490 = add i64 %462, 12
  store i64 %490, i64* %PC, align 8
  store i64 %466, i64* %464, align 8
  %491 = load i64, i64* %PC, align 8
  %492 = add i64 %491, -143
  store i64 %492, i64* %PC, align 8, !tbaa !2428
  br label %block_403a5e
}

; Function Attrs: noinline
define %struct.Memory* @sub_405d90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405d90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 116
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e10__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403060:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403090__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_403550__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403550:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_403560

block_403597:                                     ; preds = %block_403560
  %32 = add i64 %76, 1
  store i64 %32, i64* %PC, align 8
  %33 = load i64, i64* %5, align 8, !tbaa !2428
  %34 = add i64 %33, 8
  %35 = inttoptr i64 %33 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %RBP, align 8, !tbaa !2428
  store i64 %34, i64* %5, align 8, !tbaa !2428
  %37 = add i64 %76, 2
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = add i64 %33, 16
  store i64 %40, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_403560:                                     ; preds = %block_40356e, %block_403550
  %41 = phi i64 [ %140, %block_40356e ], [ %.pre, %block_403550 ]
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = add i64 %41, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = add i64 %42, -16
  %48 = add i64 %41, 8
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %47 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %46, %50
  %52 = icmp ult i64 %46, %50
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %26, align 1, !tbaa !2432
  %54 = trunc i64 %51 to i32
  %55 = and i32 %54, 255
  %56 = tail call i32 @llvm.ctpop.i32(i32 %55) #8
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  store i8 %59, i8* %27, align 1, !tbaa !2446
  %60 = xor i64 %50, %46
  %61 = xor i64 %60, %51
  %62 = lshr i64 %61, 4
  %63 = trunc i64 %62 to i8
  %64 = and i8 %63, 1
  store i8 %64, i8* %28, align 1, !tbaa !2447
  %65 = icmp eq i64 %51, 0
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %29, align 1, !tbaa !2448
  %67 = lshr i64 %51, 63
  %68 = trunc i64 %67 to i8
  store i8 %68, i8* %30, align 1, !tbaa !2449
  %69 = lshr i64 %46, 63
  %70 = lshr i64 %50, 63
  %71 = xor i64 %70, %69
  %72 = xor i64 %67, %69
  %73 = add nuw nsw i64 %72, %71
  %74 = icmp eq i64 %73, 2
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %31, align 1, !tbaa !2450
  %.v = select i1 %65, i64 55, i64 14
  %76 = add i64 %41, %.v
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  br i1 %65, label %block_403597, label %block_40356e

block_40356e:                                     ; preds = %block_403560
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = load i64, i64* %45, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 8
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -9
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %26, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %27, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %28, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %29, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %30, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %31, align 1, !tbaa !2450
  %101 = add i64 %76, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %45, align 8
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -24
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %103 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %RCX, align 8, !tbaa !2428
  %108 = add i64 %107, 8
  store i64 %108, i64* %RDX, align 8, !tbaa !2428
  %109 = icmp ugt i64 %107, -9
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %26, align 1, !tbaa !2432
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = tail call i32 @llvm.ctpop.i32(i32 %112) #8
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  store i8 %116, i8* %27, align 1, !tbaa !2446
  %117 = xor i64 %107, %108
  %118 = lshr i64 %117, 4
  %119 = trunc i64 %118 to i8
  %120 = and i8 %119, 1
  store i8 %120, i8* %28, align 1, !tbaa !2447
  %121 = icmp eq i64 %108, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %29, align 1, !tbaa !2448
  %123 = lshr i64 %108, 63
  %124 = trunc i64 %123 to i8
  store i8 %124, i8* %30, align 1, !tbaa !2449
  %125 = lshr i64 %107, 63
  %126 = xor i64 %123, %125
  %127 = add nuw nsw i64 %126, %123
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %31, align 1, !tbaa !2450
  %130 = add i64 %104, 15
  store i64 %130, i64* %PC, align 8
  store i64 %108, i64* %106, align 8
  %131 = bitcast i64* %RAX to i64**
  %132 = load i64*, i64** %131, align 8
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC, align 8
  %135 = load i64, i64* %132, align 8
  store i64 %135, i64* %RAX, align 8, !tbaa !2428
  %136 = bitcast i64* %RCX to i64**
  %137 = load i64*, i64** %136, align 8
  %138 = add i64 %133, 6
  store i64 %138, i64* %PC, align 8
  store i64 %135, i64* %137, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, -50
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  br label %block_403560
}

; Function Attrs: noinline
define %struct.Memory* @sub_402640__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402640:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402668

block_4026e9:                                     ; preds = %block_402668
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402678:                                     ; preds = %block_402668
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 7440
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043a0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 11583
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_4053f0__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 7826
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_404560__Z13verify_sortedI14PointerWrapperIdEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402668

block_402668:                                     ; preds = %block_402678, %block_402640
  %255 = phi i64 [ %.pre, %block_402640 ], [ %254, %block_402678 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402640 ], [ %222, %block_402678 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402678, label %block_4026e9
}

; Function Attrs: noinline
define %struct.Memory* @sub_406680___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406680:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_608de8__init_array_type* @seg_608de8__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_608de8__init_array_type* @seg_608de8__init_array to i64), i64 16), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2453
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #8
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2453
  store i8 0, i8* %45, align 1, !tbaa !2453
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2453
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2453
  store i8 0, i8* %48, align 1, !tbaa !2453
  %63 = add i64 %38, -24667
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400640__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #8
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_4066d6, label %block_4066b6

block_4066d6:                                     ; preds = %block_4066c0, %block_406680
  %81 = phi i64 [ %80, %block_406680 ], [ %179, %block_4066c0 ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_406680 ], [ %149, %block_4066c0 ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %82, %83
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4066b6:                                     ; preds = %block_406680
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_4066c0

block_4066c0:                                     ; preds = %block_4066c0, %block_4066b6
  %134 = phi i64 [ 0, %block_4066b6 ], [ %152, %block_4066c0 ]
  %135 = phi i64 [ %133, %block_4066b6 ], [ %179, %block_4066c0 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_4066b6 ], [ %149, %block_4066c0 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #8
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2447
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v1 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v1
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_4066d6, label %block_4066c0
}

; Function Attrs: noinline
define %struct.Memory* @sub_406270__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406270:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  store i64 %10, i64* %RCX, align 8, !tbaa !2428
  %39 = add i64 %6, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %51, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to double*
  %57 = load double, double* %56, align 8
  %58 = bitcast %union.VectorReg* %3 to double*
  store double %57, double* %58, align 1, !tbaa !2451
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %60 = bitcast i64* %59 to double*
  store double 0.000000e+00, double* %60, align 1, !tbaa !2451
  %61 = add i64 %49, -24
  %62 = add i64 %51, 12
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RSI, align 8, !tbaa !2428
  %65 = add i64 %51, 16
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to double*
  %67 = load double, double* %66, align 8
  %68 = fadd double %57, %67
  store double %68, double* %58, align 1, !tbaa !2451
  store i64 0, i64* %59, align 1, !tbaa !2451
  %69 = add i64 %49, -32
  %70 = add i64 %51, 21
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to double*
  store double %68, double* %71, align 8
  %72 = load i64, i64* %RAX, align 8
  %73 = load i64, i64* %PC, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %74 = load i64, i64* %RCX, align 8
  store i64 %74, i64* %RSI, align 8, !tbaa !2428
  %75 = add i64 %73, -17789
  %76 = add i64 %73, 11
  %77 = load i64, i64* %RSP, align 8, !tbaa !2428
  %78 = add i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64 %76, i64* %79, align 8
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  store i64 %75, i64* %PC, align 8, !tbaa !2428
  %80 = tail call %struct.Memory* @sub_401d20__ZN12ValueWrapperIdEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %75, %struct.Memory* %2)
  %81 = load i64, i64* %RBP, align 8
  %82 = add i64 %81, -8
  %83 = load i64, i64* %PC, align 8
  %84 = add i64 %83, 5
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %82 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %86, i64* %87, align 1, !tbaa !2451
  store double 0.000000e+00, double* %60, align 1, !tbaa !2451
  %88 = load i64, i64* %RSP, align 8
  %89 = add i64 %88, 32
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  %90 = icmp ugt i64 %88, -33
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %13, align 1, !tbaa !2432
  %92 = trunc i64 %89 to i32
  %93 = and i32 %92, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #8
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  store i8 %97, i8* %20, align 1, !tbaa !2446
  %98 = xor i64 %88, %89
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %25, align 1, !tbaa !2447
  %102 = icmp eq i64 %89, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %28, align 1, !tbaa !2448
  %104 = lshr i64 %89, 63
  %105 = trunc i64 %104 to i8
  store i8 %105, i8* %31, align 1, !tbaa !2449
  %106 = lshr i64 %88, 63
  %107 = xor i64 %104, %106
  %108 = add nuw nsw i64 %107, %104
  %109 = icmp eq i64 %108, 2
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %37, align 1, !tbaa !2450
  %111 = add i64 %83, 10
  store i64 %111, i64* %PC, align 8
  %112 = add i64 %88, 40
  %113 = inttoptr i64 %89 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RBP, align 8, !tbaa !2428
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  %115 = add i64 %83, 11
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %112 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %PC, align 8, !tbaa !2428
  %118 = add i64 %88, 48
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %80
}

; Function Attrs: noinline
define %struct.Memory* @sub_406010__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4041f0__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4041f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = add i64 %10, 12
  store i64 %40, i64* %PC, align 8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RSI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = shl i64 %77, 1
  %79 = icmp slt i64 %77, 0
  %80 = icmp slt i64 %78, 0
  %81 = xor i1 %79, %80
  store i64 %78, i64* %RDX, align 8, !tbaa !2428
  %.lobit = lshr i64 %77, 63
  %82 = trunc i64 %.lobit to i8
  store i8 %82, i8* %14, align 1, !tbaa !2453
  %83 = trunc i64 %78 to i32
  %84 = and i32 %83, 254
  %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #8
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = xor i8 %87, 1
  store i8 %88, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %29, align 1, !tbaa !2453
  %91 = lshr i64 %77, 62
  %92 = trunc i64 %91 to i8
  %93 = and i8 %92, 1
  store i8 %93, i8* %32, align 1, !tbaa !2453
  %94 = zext i1 %81 to i8
  store i8 %94, i8* %38, align 1, !tbaa !2453
  %95 = add i64 %71, -40
  %96 = add i64 %73, 16
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i64*
  store i64 %78, i64* %97, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_404221

block_40433d:                                     ; preds = %block_404332
  %98 = add i64 %249, -24
  %99 = add i64 %261, 73
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = add i64 %249, -48
  %103 = add i64 %261, 77
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RCX, align 8, !tbaa !2428
  %106 = add i64 %249, -8
  %107 = add i64 %261, 81
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RDX, align 8, !tbaa !2428
  %110 = shl i64 %105, 3
  %111 = add i64 %110, %101
  %112 = add i64 %261, 85
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %113, align 8
  %114 = load i64, i64* %RSP, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %114, 64
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  %117 = icmp ugt i64 %114, -65
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %14, align 1, !tbaa !2432
  %119 = trunc i64 %116 to i32
  %120 = and i32 %119, 255
  %121 = tail call i32 @llvm.ctpop.i32(i32 %120) #8
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = xor i8 %123, 1
  store i8 %124, i8* %21, align 1, !tbaa !2446
  %125 = xor i64 %114, %116
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  store i8 %128, i8* %26, align 1, !tbaa !2447
  %129 = icmp eq i64 %116, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %29, align 1, !tbaa !2448
  %131 = lshr i64 %116, 63
  %132 = trunc i64 %131 to i8
  store i8 %132, i8* %32, align 1, !tbaa !2449
  %133 = lshr i64 %114, 63
  %134 = xor i64 %131, %133
  %135 = add nuw nsw i64 %134, %131
  %136 = icmp eq i64 %135, 2
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %38, align 1, !tbaa !2450
  %138 = add i64 %115, 5
  store i64 %138, i64* %PC, align 8
  %139 = add i64 %114, 72
  %140 = inttoptr i64 %116 to i64*
  %141 = load i64, i64* %140, align 8
  store i64 %141, i64* %RBP, align 8, !tbaa !2428
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  %142 = add i64 %115, 6
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %139 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  %145 = add i64 %114, 80
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4042e4:                                     ; preds = %block_4042ae, %block_4042bc
  %146 = phi i64 [ %740, %block_4042ae ], [ %.pre4, %block_4042bc ]
  %147 = phi i64 [ %500, %block_4042ae ], [ %.pre3, %block_4042bc ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %148 = add i64 %146, -48
  %149 = add i64 %147, 11
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, -1
  %153 = icmp eq i64 %151, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %14, align 1, !tbaa !2432
  %155 = trunc i64 %152 to i32
  %156 = and i32 %155, 255
  %157 = tail call i32 @llvm.ctpop.i32(i32 %156) #8
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  store i8 %160, i8* %21, align 1, !tbaa !2446
  %161 = xor i64 %151, %152
  %162 = lshr i64 %161, 4
  %163 = trunc i64 %162 to i8
  %164 = and i8 %163, 1
  store i8 %164, i8* %26, align 1, !tbaa !2447
  %165 = icmp eq i64 %152, 0
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %29, align 1, !tbaa !2448
  %167 = lshr i64 %152, 63
  %168 = trunc i64 %167 to i8
  store i8 %168, i8* %32, align 1, !tbaa !2449
  %169 = lshr i64 %151, 63
  %170 = xor i64 %167, %169
  %171 = add nuw nsw i64 %170, %169
  %172 = icmp eq i64 %171, 2
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %38, align 1, !tbaa !2450
  store i64 %152, i64* %RAX, align 8, !tbaa !2428
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %175 = ashr i64 %152, 63
  store i64 %175, i64* %RDX, align 8, !tbaa !2428
  %176 = add i64 %147, 23
  store i64 %176, i64* %PC, align 8
  %177 = zext i64 %175 to i128
  %178 = shl nuw i128 %177, 64
  %179 = zext i64 %152 to i128
  %180 = or i128 %178, %179
  %181 = sdiv i128 %180, 2
  %182 = trunc i128 %181 to i64
  %183 = and i128 %181, 18446744073709551615
  %184 = sext i64 %182 to i128
  %185 = and i128 %184, -18446744073709551616
  %186 = or i128 %185, %183
  %187 = icmp eq i128 %181, %186
  br i1 %187, label %190, label %188

; <label>:188:                                    ; preds = %block_4042e4
  %189 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %176, %struct.Memory* %MEMORY.4) #9
  %.pre5 = load i64, i64* %RBP, align 8
  %.pre6 = load i64, i64* %RAX, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:190:                                    ; preds = %block_4042e4
  %191 = srem i128 %180, 2
  %192 = trunc i128 %191 to i64
  store i64 %182, i64* %174, align 8, !tbaa !2428
  store i64 %192, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %190, %188
  %193 = phi i64 [ %.pre7, %188 ], [ %176, %190 ]
  %194 = phi i64 [ %.pre6, %188 ], [ %182, %190 ]
  %195 = phi i64 [ %.pre5, %188 ], [ %146, %190 ]
  %196 = phi %struct.Memory* [ %189, %188 ], [ %MEMORY.4, %190 ]
  %197 = add i64 %195, -40
  %198 = add i64 %193, 4
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  store i64 %194, i64* %199, align 8
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4042ff

block_4042ff:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %200 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %738, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %196, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %733, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -48
  %203 = add i64 %200, 8
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RDX, align 8, !tbaa !2428
  %206 = add i64 %201, -32
  %207 = add i64 %200, 12
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = sub i64 %205, %209
  %211 = icmp ult i64 %205, %209
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %14, align 1, !tbaa !2432
  %213 = trunc i64 %210 to i32
  %214 = and i32 %213, 255
  %215 = tail call i32 @llvm.ctpop.i32(i32 %214) #8
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  store i8 %218, i8* %21, align 1, !tbaa !2446
  %219 = xor i64 %209, %205
  %220 = xor i64 %219, %210
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %26, align 1, !tbaa !2447
  %224 = icmp eq i64 %210, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %29, align 1, !tbaa !2448
  %226 = lshr i64 %210, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %32, align 1, !tbaa !2449
  %228 = lshr i64 %205, 63
  %229 = lshr i64 %209, 63
  %230 = xor i64 %229, %228
  %231 = xor i64 %226, %228
  %232 = add nuw nsw i64 %231, %230
  %233 = icmp eq i64 %232, 2
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %38, align 1, !tbaa !2450
  %235 = add i64 %201, -49
  %236 = add i64 %200, 15
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i8*
  store i8 0, i8* %237, align 1
  %238 = load i64, i64* %PC, align 8
  %239 = load i8, i8* %29, align 1, !tbaa !2448
  %240 = icmp ne i8 %239, 0
  %241 = load i8, i8* %32, align 1, !tbaa !2449
  %242 = icmp ne i8 %241, 0
  %243 = load i8, i8* %38, align 1, !tbaa !2450
  %244 = icmp ne i8 %243, 0
  %245 = xor i1 %242, %244
  %246 = or i1 %240, %245
  %.v15 = select i1 %246, i64 36, i64 6
  %247 = add i64 %238, %.v15
  store i64 %247, i64* %PC, align 8, !tbaa !2428
  br i1 %246, label %block_404332, label %block_404314

block_404332:                                     ; preds = %block_404314, %block_4042ff
  %248 = phi i64 [ %247, %block_4042ff ], [ %.pre9, %block_404314 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4042ff ], [ %464, %block_404314 ]
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -49
  %251 = add i64 %248, 3
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i8*
  %253 = load i8, i8* %252, align 1
  store i8 %253, i8* %AL, align 1, !tbaa !2453
  %254 = and i8 %253, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %255 = zext i8 %254 to i32
  %256 = tail call i32 @llvm.ctpop.i32(i32 %255) #8
  %257 = trunc i32 %256 to i8
  %258 = xor i8 %257, 1
  store i8 %258, i8* %21, align 1, !tbaa !2446
  %259 = xor i8 %254, 1
  store i8 %259, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %260 = icmp eq i8 %259, 0
  %.v16 = select i1 %260, i64 16, i64 11
  %261 = add i64 %248, %.v16
  store i64 %261, i64* %PC, align 8, !tbaa !2428
  br i1 %260, label %block_404342, label %block_40433d

block_4042bc:                                     ; preds = %block_4042ae
  %262 = add i64 %740, -24
  %263 = add i64 %500, 4
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %262 to i64*
  %265 = load i64, i64* %264, align 8
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = add i64 %500, 8
  store i64 %266, i64* %PC, align 8
  %267 = load i64, i64* %743, align 8
  %268 = add i64 %267, -1
  store i64 %268, i64* %RCX, align 8, !tbaa !2428
  %269 = icmp eq i64 %267, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %14, align 1, !tbaa !2432
  %271 = trunc i64 %268 to i32
  %272 = and i32 %271, 255
  %273 = tail call i32 @llvm.ctpop.i32(i32 %272) #8
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  %276 = xor i8 %275, 1
  store i8 %276, i8* %21, align 1, !tbaa !2446
  %277 = xor i64 %267, %268
  %278 = lshr i64 %277, 4
  %279 = trunc i64 %278 to i8
  %280 = and i8 %279, 1
  store i8 %280, i8* %26, align 1, !tbaa !2447
  %281 = icmp eq i64 %268, 0
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %29, align 1, !tbaa !2448
  %283 = lshr i64 %268, 63
  %284 = trunc i64 %283 to i8
  store i8 %284, i8* %32, align 1, !tbaa !2449
  %285 = lshr i64 %267, 63
  %286 = xor i64 %283, %285
  %287 = add nuw nsw i64 %286, %285
  %288 = icmp eq i64 %287, 2
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %38, align 1, !tbaa !2450
  %290 = add i64 %500, 16
  store i64 %290, i64* %PC, align 8
  %291 = load i64, i64* %264, align 8
  store i64 %291, i64* %RDX, align 8, !tbaa !2428
  %292 = add i64 %740, -48
  %293 = add i64 %500, 20
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  %295 = load i64, i64* %294, align 8
  store i64 %295, i64* %RSI, align 8, !tbaa !2428
  %296 = shl i64 %268, 3
  %297 = add i64 %296, %265
  %298 = add i64 %500, 24
  store i64 %298, i64* %PC, align 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299, align 8
  store i64 %300, i64* %RAX, align 8, !tbaa !2428
  %301 = shl i64 %295, 3
  %302 = add i64 %301, %291
  %303 = add i64 %500, 28
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %304, align 8
  %305 = load i64, i64* %RBP, align 8
  %306 = add i64 %305, -40
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, 4
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %306 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = add i64 %310, -1
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = icmp eq i64 %310, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %14, align 1, !tbaa !2432
  %314 = trunc i64 %311 to i32
  %315 = and i32 %314, 255
  %316 = tail call i32 @llvm.ctpop.i32(i32 %315) #8
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  store i8 %319, i8* %21, align 1, !tbaa !2446
  %320 = xor i64 %310, %311
  %321 = lshr i64 %320, 4
  %322 = trunc i64 %321 to i8
  %323 = and i8 %322, 1
  store i8 %323, i8* %26, align 1, !tbaa !2447
  %324 = icmp eq i64 %311, 0
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %29, align 1, !tbaa !2448
  %326 = lshr i64 %311, 63
  %327 = trunc i64 %326 to i8
  store i8 %327, i8* %32, align 1, !tbaa !2449
  %328 = lshr i64 %310, 63
  %329 = xor i64 %326, %328
  %330 = add nuw nsw i64 %329, %328
  %331 = icmp eq i64 %330, 2
  %332 = zext i1 %331 to i8
  store i8 %332, i8* %38, align 1, !tbaa !2450
  %333 = add i64 %305, -48
  %334 = add i64 %307, 12
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  store i64 %311, i64* %335, align 8
  %.pre3 = load i64, i64* %PC, align 8
  %.pre4 = load i64, i64* %RBP, align 8
  br label %block_4042e4

block_40422f:                                     ; preds = %block_404221
  %336 = add i64 %740, -24
  %337 = add i64 %776, 4
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = add i64 %776, 8
  store i64 %340, i64* %PC, align 8
  %341 = load i64, i64* %743, align 8
  %342 = shl i64 %341, 3
  %343 = add i64 %342, -8
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = lshr i64 %343, 63
  %345 = add i64 %343, %339
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = icmp ult i64 %345, %339
  %347 = icmp ult i64 %345, %343
  %348 = or i1 %346, %347
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %14, align 1, !tbaa !2432
  %350 = trunc i64 %345 to i32
  %351 = and i32 %350, 255
  %352 = tail call i32 @llvm.ctpop.i32(i32 %351) #8
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  %355 = xor i8 %354, 1
  store i8 %355, i8* %21, align 1, !tbaa !2446
  %356 = xor i64 %343, %339
  %357 = xor i64 %356, %345
  %358 = lshr i64 %357, 4
  %359 = trunc i64 %358 to i8
  %360 = and i8 %359, 1
  store i8 %360, i8* %26, align 1, !tbaa !2447
  %361 = icmp eq i64 %345, 0
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %29, align 1, !tbaa !2448
  %363 = lshr i64 %345, 63
  %364 = trunc i64 %363 to i8
  store i8 %364, i8* %32, align 1, !tbaa !2449
  %365 = lshr i64 %339, 63
  %366 = xor i64 %363, %365
  %367 = xor i64 %363, %344
  %368 = add nuw nsw i64 %366, %367
  %369 = icmp eq i64 %368, 2
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %38, align 1, !tbaa !2450
  %371 = add i64 %776, 23
  store i64 %371, i64* %PC, align 8
  %372 = load i64, i64* %338, align 8
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = add i64 %776, 27
  store i64 %373, i64* %PC, align 8
  %374 = load i64, i64* %743, align 8
  %375 = shl i64 %374, 3
  store i64 %375, i64* %RDX, align 8, !tbaa !2428
  %376 = lshr i64 %374, 60
  %377 = and i64 %376, 1
  %378 = add i64 %375, %372
  store i64 %378, i64* %RCX, align 8, !tbaa !2428
  %379 = icmp ult i64 %378, %372
  %380 = icmp ult i64 %378, %375
  %381 = or i1 %379, %380
  %382 = zext i1 %381 to i8
  store i8 %382, i8* %14, align 1, !tbaa !2432
  %383 = trunc i64 %378 to i32
  %384 = and i32 %383, 255
  %385 = tail call i32 @llvm.ctpop.i32(i32 %384) #8
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  %388 = xor i8 %387, 1
  store i8 %388, i8* %21, align 1, !tbaa !2446
  %389 = xor i64 %375, %372
  %390 = xor i64 %389, %378
  %391 = lshr i64 %390, 4
  %392 = trunc i64 %391 to i8
  %393 = and i8 %392, 1
  store i8 %393, i8* %26, align 1, !tbaa !2447
  %394 = icmp eq i64 %378, 0
  %395 = zext i1 %394 to i8
  store i8 %395, i8* %29, align 1, !tbaa !2448
  %396 = lshr i64 %378, 63
  %397 = trunc i64 %396 to i8
  store i8 %397, i8* %32, align 1, !tbaa !2449
  %398 = lshr i64 %372, 63
  %399 = xor i64 %396, %398
  %400 = xor i64 %396, %377
  %401 = add nuw nsw i64 %399, %400
  %402 = icmp eq i64 %401, 2
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %38, align 1, !tbaa !2450
  store i64 %345, i64* %RDI, align 8, !tbaa !2428
  store i64 %378, i64* %RSI, align 8, !tbaa !2428
  %404 = add i64 %776, -4127
  %405 = add i64 %776, 45
  %406 = load i64, i64* %RSP, align 8, !tbaa !2428
  %407 = add i64 %406, -8
  %408 = inttoptr i64 %407 to i64*
  store i64 %405, i64* %408, align 8
  store i64 %407, i64* %RSP, align 8, !tbaa !2428
  store i64 %404, i64* %PC, align 8, !tbaa !2428
  %409 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %404, %struct.Memory* %MEMORY.4)
  %410 = load i8, i8* %AL, align 1
  %411 = load i64, i64* %PC, align 8
  %412 = and i8 %410, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %413 = zext i8 %412 to i32
  %414 = tail call i32 @llvm.ctpop.i32(i32 %413) #8
  %415 = trunc i32 %414 to i8
  %416 = xor i8 %415, 1
  store i8 %416, i8* %21, align 1, !tbaa !2446
  %417 = xor i8 %412, 1
  store i8 %417, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %418 = icmp eq i8 %417, 0
  %.v13 = select i1 %418, i64 13, i64 8
  %419 = add i64 %411, %.v13
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  br i1 %418, label %block_404269, label %block_404264

block_404314:                                     ; preds = %block_4042ff
  %420 = load i64, i64* %RBP, align 8
  %421 = add i64 %420, -8
  store i64 %421, i64* %RSI, align 8, !tbaa !2428
  %422 = add i64 %420, -24
  %423 = add i64 %247, 8
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %RAX, align 8, !tbaa !2428
  %426 = add i64 %420, -40
  %427 = add i64 %247, 12
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428, align 8
  %430 = shl i64 %429, 3
  store i64 %430, i64* %RCX, align 8, !tbaa !2428
  %431 = lshr i64 %429, 60
  %432 = and i64 %431, 1
  %433 = add i64 %430, %425
  store i64 %433, i64* %RAX, align 8, !tbaa !2428
  %434 = icmp ult i64 %433, %425
  %435 = icmp ult i64 %433, %430
  %436 = or i1 %434, %435
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %14, align 1, !tbaa !2432
  %438 = trunc i64 %433 to i32
  %439 = and i32 %438, 255
  %440 = tail call i32 @llvm.ctpop.i32(i32 %439) #8
  %441 = trunc i32 %440 to i8
  %442 = and i8 %441, 1
  %443 = xor i8 %442, 1
  store i8 %443, i8* %21, align 1, !tbaa !2446
  %444 = xor i64 %430, %425
  %445 = xor i64 %444, %433
  %446 = lshr i64 %445, 4
  %447 = trunc i64 %446 to i8
  %448 = and i8 %447, 1
  store i8 %448, i8* %26, align 1, !tbaa !2447
  %449 = icmp eq i64 %433, 0
  %450 = zext i1 %449 to i8
  store i8 %450, i8* %29, align 1, !tbaa !2448
  %451 = lshr i64 %433, 63
  %452 = trunc i64 %451 to i8
  store i8 %452, i8* %32, align 1, !tbaa !2449
  %453 = lshr i64 %425, 63
  %454 = xor i64 %451, %453
  %455 = xor i64 %451, %432
  %456 = add nuw nsw i64 %454, %455
  %457 = icmp eq i64 %456, 2
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %38, align 1, !tbaa !2450
  store i64 %433, i64* %RDI, align 8, !tbaa !2428
  %459 = add i64 %247, -4356
  %460 = add i64 %247, 27
  %461 = load i64, i64* %RSP, align 8, !tbaa !2428
  %462 = add i64 %461, -8
  %463 = inttoptr i64 %462 to i64*
  store i64 %460, i64* %463, align 8
  store i64 %462, i64* %RSP, align 8, !tbaa !2428
  store i64 %459, i64* %PC, align 8, !tbaa !2428
  %464 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %459, %struct.Memory* %MEMORY.1)
  %465 = load i64, i64* %RBP, align 8
  %466 = add i64 %465, -49
  %467 = load i8, i8* %AL, align 1
  %468 = load i64, i64* %PC, align 8
  %469 = add i64 %468, 3
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %466 to i8*
  store i8 %467, i8* %470, align 1
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_404332

block_4042ae:                                     ; preds = %block_404221
  %471 = add i64 %776, 4
  store i64 %471, i64* %PC, align 8
  %472 = load i64, i64* %743, align 8
  store i64 %472, i64* %RAX, align 8, !tbaa !2428
  %473 = add i64 %776, 8
  store i64 %473, i64* %PC, align 8
  %474 = load i64, i64* %747, align 8
  %475 = sub i64 %472, %474
  %476 = icmp ult i64 %472, %474
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %14, align 1, !tbaa !2432
  %478 = trunc i64 %475 to i32
  %479 = and i32 %478, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479) #8
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %21, align 1, !tbaa !2446
  %484 = xor i64 %474, %472
  %485 = xor i64 %484, %475
  %486 = lshr i64 %485, 4
  %487 = trunc i64 %486 to i8
  %488 = and i8 %487, 1
  store i8 %488, i8* %26, align 1, !tbaa !2447
  %489 = icmp eq i64 %475, 0
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %29, align 1, !tbaa !2448
  %491 = lshr i64 %475, 63
  %492 = trunc i64 %491 to i8
  store i8 %492, i8* %32, align 1, !tbaa !2449
  %493 = lshr i64 %472, 63
  %494 = lshr i64 %474, 63
  %495 = xor i64 %494, %493
  %496 = xor i64 %491, %493
  %497 = add nuw nsw i64 %496, %495
  %498 = icmp eq i64 %497, 2
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %38, align 1, !tbaa !2450
  %.v14 = select i1 %489, i64 14, i64 54
  %500 = add i64 %776, %.v14
  store i64 %500, i64* %PC, align 8, !tbaa !2428
  br i1 %489, label %block_4042bc, label %block_4042e4

block_404269:                                     ; preds = %block_40422f
  %501 = load i64, i64* %RBP, align 8
  %502 = add i64 %501, -40
  %503 = add i64 %419, 4
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %502 to i64*
  %505 = load i64, i64* %504, align 8
  %506 = add i64 %505, 1
  store i64 %506, i64* %RAX, align 8, !tbaa !2428
  %507 = icmp eq i64 %505, -1
  %508 = icmp eq i64 %506, 0
  %509 = or i1 %507, %508
  %510 = zext i1 %509 to i8
  store i8 %510, i8* %14, align 1, !tbaa !2432
  %511 = trunc i64 %506 to i32
  %512 = and i32 %511, 255
  %513 = tail call i32 @llvm.ctpop.i32(i32 %512) #8
  %514 = trunc i32 %513 to i8
  %515 = and i8 %514, 1
  %516 = xor i8 %515, 1
  store i8 %516, i8* %21, align 1, !tbaa !2446
  %517 = xor i64 %505, %506
  %518 = lshr i64 %517, 4
  %519 = trunc i64 %518 to i8
  %520 = and i8 %519, 1
  store i8 %520, i8* %26, align 1, !tbaa !2447
  %521 = zext i1 %508 to i8
  store i8 %521, i8* %29, align 1, !tbaa !2448
  %522 = lshr i64 %506, 63
  %523 = trunc i64 %522 to i8
  store i8 %523, i8* %32, align 1, !tbaa !2449
  %524 = lshr i64 %505, 63
  %525 = xor i64 %522, %524
  %526 = add nuw nsw i64 %525, %522
  %527 = icmp eq i64 %526, 2
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %38, align 1, !tbaa !2450
  %529 = add i64 %419, 12
  store i64 %529, i64* %PC, align 8
  store i64 %506, i64* %504, align 8
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_404275

block_404275:                                     ; preds = %block_404264, %block_404269
  %530 = phi i64 [ %646, %block_404264 ], [ %.pre2, %block_404269 ]
  %531 = load i64, i64* %RBP, align 8
  %532 = add i64 %531, -24
  %533 = add i64 %530, 4
  store i64 %533, i64* %PC, align 8
  %534 = inttoptr i64 %532 to i64*
  %535 = load i64, i64* %534, align 8
  store i64 %535, i64* %RAX, align 8, !tbaa !2428
  %536 = add i64 %531, -40
  %537 = add i64 %530, 8
  store i64 %537, i64* %PC, align 8
  %538 = inttoptr i64 %536 to i64*
  %539 = load i64, i64* %538, align 8
  %540 = add i64 %539, -1
  store i64 %540, i64* %RCX, align 8, !tbaa !2428
  %541 = icmp eq i64 %539, 0
  %542 = zext i1 %541 to i8
  store i8 %542, i8* %14, align 1, !tbaa !2432
  %543 = trunc i64 %540 to i32
  %544 = and i32 %543, 255
  %545 = tail call i32 @llvm.ctpop.i32(i32 %544) #8
  %546 = trunc i32 %545 to i8
  %547 = and i8 %546, 1
  %548 = xor i8 %547, 1
  store i8 %548, i8* %21, align 1, !tbaa !2446
  %549 = xor i64 %539, %540
  %550 = lshr i64 %549, 4
  %551 = trunc i64 %550 to i8
  %552 = and i8 %551, 1
  store i8 %552, i8* %26, align 1, !tbaa !2447
  %553 = icmp eq i64 %540, 0
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %29, align 1, !tbaa !2448
  %555 = lshr i64 %540, 63
  %556 = trunc i64 %555 to i8
  store i8 %556, i8* %32, align 1, !tbaa !2449
  %557 = lshr i64 %539, 63
  %558 = xor i64 %555, %557
  %559 = add nuw nsw i64 %558, %557
  %560 = icmp eq i64 %559, 2
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %38, align 1, !tbaa !2450
  %562 = add i64 %530, 16
  store i64 %562, i64* %PC, align 8
  %563 = load i64, i64* %534, align 8
  store i64 %563, i64* %RDX, align 8, !tbaa !2428
  %564 = add i64 %531, -48
  %565 = add i64 %530, 20
  store i64 %565, i64* %PC, align 8
  %566 = inttoptr i64 %564 to i64*
  %567 = load i64, i64* %566, align 8
  store i64 %567, i64* %RSI, align 8, !tbaa !2428
  %568 = shl i64 %540, 3
  %569 = add i64 %568, %535
  %570 = add i64 %530, 24
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to i64*
  %572 = load i64, i64* %571, align 8
  store i64 %572, i64* %RAX, align 8, !tbaa !2428
  %573 = shl i64 %567, 3
  %574 = add i64 %573, %563
  %575 = add i64 %530, 28
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i64*
  store i64 %572, i64* %576, align 8
  %577 = load i64, i64* %RBP, align 8
  %578 = add i64 %577, -40
  %579 = load i64, i64* %PC, align 8
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %578 to i64*
  %582 = load i64, i64* %581, align 8
  %583 = add i64 %582, -1
  store i64 %583, i64* %RAX, align 8, !tbaa !2428
  %584 = icmp eq i64 %582, 0
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %14, align 1, !tbaa !2432
  %586 = trunc i64 %583 to i32
  %587 = and i32 %586, 255
  %588 = tail call i32 @llvm.ctpop.i32(i32 %587) #8
  %589 = trunc i32 %588 to i8
  %590 = and i8 %589, 1
  %591 = xor i8 %590, 1
  store i8 %591, i8* %21, align 1, !tbaa !2446
  %592 = xor i64 %582, %583
  %593 = lshr i64 %592, 4
  %594 = trunc i64 %593 to i8
  %595 = and i8 %594, 1
  store i8 %595, i8* %26, align 1, !tbaa !2447
  %596 = icmp eq i64 %583, 0
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %29, align 1, !tbaa !2448
  %598 = lshr i64 %583, 63
  %599 = trunc i64 %598 to i8
  store i8 %599, i8* %32, align 1, !tbaa !2449
  %600 = lshr i64 %582, 63
  %601 = xor i64 %598, %600
  %602 = add nuw nsw i64 %601, %600
  %603 = icmp eq i64 %602, 2
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %38, align 1, !tbaa !2450
  %605 = add i64 %577, -48
  %606 = add i64 %579, 12
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i64*
  store i64 %583, i64* %607, align 8
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -40
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i64*
  %613 = load i64, i64* %612, align 8
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = add i64 %610, 8
  store i64 %614, i64* %PC, align 8
  %615 = load i64, i64* %612, align 8
  %616 = add i64 %615, %613
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = icmp ult i64 %616, %613
  %618 = icmp ult i64 %616, %615
  %619 = or i1 %617, %618
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %14, align 1, !tbaa !2432
  %621 = trunc i64 %616 to i32
  %622 = and i32 %621, 255
  %623 = tail call i32 @llvm.ctpop.i32(i32 %622) #8
  %624 = trunc i32 %623 to i8
  %625 = and i8 %624, 1
  %626 = xor i8 %625, 1
  store i8 %626, i8* %21, align 1, !tbaa !2446
  %627 = xor i64 %615, %613
  %628 = xor i64 %627, %616
  %629 = lshr i64 %628, 4
  %630 = trunc i64 %629 to i8
  %631 = and i8 %630, 1
  store i8 %631, i8* %26, align 1, !tbaa !2447
  %632 = icmp eq i64 %616, 0
  %633 = zext i1 %632 to i8
  store i8 %633, i8* %29, align 1, !tbaa !2448
  %634 = lshr i64 %616, 63
  %635 = trunc i64 %634 to i8
  store i8 %635, i8* %32, align 1, !tbaa !2449
  %636 = lshr i64 %613, 63
  %637 = lshr i64 %615, 63
  %638 = xor i64 %634, %636
  %639 = xor i64 %634, %637
  %640 = add nuw nsw i64 %638, %639
  %641 = icmp eq i64 %640, 2
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %38, align 1, !tbaa !2450
  %643 = add i64 %610, 12
  store i64 %643, i64* %PC, align 8
  store i64 %616, i64* %612, align 8
  %644 = load i64, i64* %PC, align 8
  %645 = add i64 %644, -136
  store i64 %645, i64* %PC, align 8, !tbaa !2428
  br label %block_404221

block_404264:                                     ; preds = %block_40422f
  %646 = add i64 %419, 17
  store i64 %646, i64* %PC, align 8, !tbaa !2428
  br label %block_404275

block_404342:                                     ; preds = %block_404332
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %647 = add i64 %249, -24
  %648 = add i64 %261, 11
  store i64 %648, i64* %PC, align 8
  %649 = inttoptr i64 %647 to i64*
  %650 = load i64, i64* %649, align 8
  store i64 %650, i64* %RDX, align 8, !tbaa !2428
  %651 = add i64 %249, -40
  %652 = add i64 %261, 15
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %651 to i64*
  %654 = load i64, i64* %653, align 8
  store i64 %654, i64* %RSI, align 8, !tbaa !2428
  %655 = add i64 %261, 19
  store i64 %655, i64* %PC, align 8
  %656 = load i64, i64* %649, align 8
  store i64 %656, i64* %RDI, align 8, !tbaa !2428
  %657 = add i64 %249, -48
  %658 = add i64 %261, 23
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %657 to i64*
  %660 = load i64, i64* %659, align 8
  store i64 %660, i64* %R8, align 8, !tbaa !2428
  %661 = shl i64 %654, 3
  %662 = add i64 %661, %650
  %663 = add i64 %261, 27
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to i64*
  %665 = load i64, i64* %664, align 8
  store i64 %665, i64* %RDX, align 8, !tbaa !2428
  %666 = shl i64 %660, 3
  %667 = add i64 %666, %656
  %668 = add i64 %261, 31
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i64*
  store i64 %665, i64* %669, align 8
  %670 = load i64, i64* %RBP, align 8
  %671 = add i64 %670, -40
  %672 = load i64, i64* %PC, align 8
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC, align 8
  %674 = inttoptr i64 %671 to i64*
  %675 = load i64, i64* %674, align 8
  store i64 %675, i64* %RDX, align 8, !tbaa !2428
  %676 = add i64 %670, -48
  %677 = add i64 %672, 8
  store i64 %677, i64* %PC, align 8
  %678 = inttoptr i64 %676 to i64*
  store i64 %675, i64* %678, align 8
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -48
  %681 = load i64, i64* %PC, align 8
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %680 to i64*
  %684 = load i64, i64* %683, align 8
  %685 = add i64 %684, -1
  %686 = icmp eq i64 %684, 0
  %687 = zext i1 %686 to i8
  store i8 %687, i8* %14, align 1, !tbaa !2432
  %688 = trunc i64 %685 to i32
  %689 = and i32 %688, 255
  %690 = tail call i32 @llvm.ctpop.i32(i32 %689) #8
  %691 = trunc i32 %690 to i8
  %692 = and i8 %691, 1
  %693 = xor i8 %692, 1
  store i8 %693, i8* %21, align 1, !tbaa !2446
  %694 = xor i64 %684, %685
  %695 = lshr i64 %694, 4
  %696 = trunc i64 %695 to i8
  %697 = and i8 %696, 1
  store i8 %697, i8* %26, align 1, !tbaa !2447
  %698 = icmp eq i64 %685, 0
  %699 = zext i1 %698 to i8
  store i8 %699, i8* %29, align 1, !tbaa !2448
  %700 = lshr i64 %685, 63
  %701 = trunc i64 %700 to i8
  store i8 %701, i8* %32, align 1, !tbaa !2449
  %702 = lshr i64 %684, 63
  %703 = xor i64 %700, %702
  %704 = add nuw nsw i64 %703, %702
  %705 = icmp eq i64 %704, 2
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %38, align 1, !tbaa !2450
  store i64 %685, i64* %RAX, align 8, !tbaa !2428
  %707 = ashr i64 %685, 63
  store i64 %707, i64* %RDX, align 8, !tbaa !2428
  %708 = load i64, i64* %RCX, align 8
  %709 = add i64 %681, 16
  store i64 %709, i64* %PC, align 8
  %710 = sext i64 %708 to i128
  %711 = and i128 %710, -18446744073709551616
  %712 = zext i64 %707 to i128
  %713 = shl nuw i128 %712, 64
  %714 = zext i64 %685 to i128
  %715 = or i128 %713, %714
  %716 = zext i64 %708 to i128
  %717 = or i128 %711, %716
  %718 = sdiv i128 %715, %717
  %719 = trunc i128 %718 to i64
  %720 = and i128 %718, 18446744073709551615
  %721 = sext i64 %719 to i128
  %722 = and i128 %721, -18446744073709551616
  %723 = or i128 %722, %720
  %724 = icmp eq i128 %718, %723
  br i1 %724, label %727, label %725

; <label>:725:                                    ; preds = %block_404342
  %726 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %709, %struct.Memory* %MEMORY.2) #9
  %.pre10 = load i64, i64* %RBP, align 8
  %.pre11 = load i64, i64* %RAX, align 8
  %.pre12 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:727:                                    ; preds = %block_404342
  %728 = srem i128 %715, %717
  %729 = trunc i128 %728 to i64
  store i64 %719, i64* %174, align 8, !tbaa !2428
  store i64 %729, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %727, %725
  %730 = phi i64 [ %.pre12, %725 ], [ %709, %727 ]
  %731 = phi i64 [ %.pre11, %725 ], [ %719, %727 ]
  %732 = phi i64 [ %.pre10, %725 ], [ %679, %727 ]
  %733 = phi %struct.Memory* [ %726, %725 ], [ %MEMORY.2, %727 ]
  %734 = add i64 %732, -40
  %735 = add i64 %730, 4
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to i64*
  store i64 %731, i64* %736, align 8
  %737 = load i64, i64* %PC, align 8
  %738 = add i64 %737, -126
  store i64 %738, i64* %PC, align 8, !tbaa !2428
  br label %block_4042ff

block_404221:                                     ; preds = %block_404275, %block_4041f0
  %739 = phi i64 [ %.pre, %block_4041f0 ], [ %645, %block_404275 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_4041f0 ], [ %409, %block_404275 ]
  %740 = load i64, i64* %RBP, align 8
  %741 = add i64 %740, -40
  %742 = add i64 %739, 4
  store i64 %742, i64* %PC, align 8
  %743 = inttoptr i64 %741 to i64*
  %744 = load i64, i64* %743, align 8
  store i64 %744, i64* %RAX, align 8, !tbaa !2428
  %745 = add i64 %740, -16
  %746 = add i64 %739, 8
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %745 to i64*
  %748 = load i64, i64* %747, align 8
  %749 = sub i64 %744, %748
  %750 = icmp ult i64 %744, %748
  %751 = zext i1 %750 to i8
  store i8 %751, i8* %14, align 1, !tbaa !2432
  %752 = trunc i64 %749 to i32
  %753 = and i32 %752, 255
  %754 = tail call i32 @llvm.ctpop.i32(i32 %753) #8
  %755 = trunc i32 %754 to i8
  %756 = and i8 %755, 1
  %757 = xor i8 %756, 1
  store i8 %757, i8* %21, align 1, !tbaa !2446
  %758 = xor i64 %748, %744
  %759 = xor i64 %758, %749
  %760 = lshr i64 %759, 4
  %761 = trunc i64 %760 to i8
  %762 = and i8 %761, 1
  store i8 %762, i8* %26, align 1, !tbaa !2447
  %763 = icmp eq i64 %749, 0
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %29, align 1, !tbaa !2448
  %765 = lshr i64 %749, 63
  %766 = trunc i64 %765 to i8
  store i8 %766, i8* %32, align 1, !tbaa !2449
  %767 = lshr i64 %744, 63
  %768 = lshr i64 %748, 63
  %769 = xor i64 %768, %767
  %770 = xor i64 %765, %767
  %771 = add nuw nsw i64 %770, %769
  %772 = icmp eq i64 %771, 2
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %38, align 1, !tbaa !2450
  %774 = icmp ne i8 %766, 0
  %775 = xor i1 %774, %772
  %.v = select i1 %775, i64 14, i64 141
  %776 = add i64 %739, %.v
  store i64 %776, i64* %PC, align 8, !tbaa !2428
  br i1 %775, label %block_40422f, label %block_4042ae
}

; Function Attrs: noinline
define %struct.Memory* @sub_400850___cxx_global_var_init_12(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400850:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  br label %block_40086b

block_40086b:                                     ; preds = %block_40086b, %block_400850
  %43 = phi i64 [ %42, %block_400850 ], [ %100, %block_40086b ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400850 ], [ %58, %block_40086b ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = add i64 %44, -16
  %50 = add i64 %43, 11
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5274
  %54 = add i64 %52, 5
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_401d10__ZN12ValueWrapperIdEC2Ev_renamed_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %MEMORY.0)
  %59 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2432
  %60 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000) to i32), i32 255)) #8
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* %19, align 1, !tbaa !2446
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2447
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2448
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2449
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %59, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2432
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #8
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2446
  %80 = xor i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2447
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2450
  %94 = add i64 %64, -8
  %95 = add i64 %59, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = load i8, i8* %28, align 1, !tbaa !2448
  %99 = icmp eq i8 %98, 0
  %.v = select i1 %99, i64 -47, i64 6
  %100 = add i64 %97, %.v
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  br i1 %99, label %block_40086b, label %block_4008a0

block_4008a0:                                     ; preds = %block_40086b
  %101 = load i64, i64* %RSP, align 8
  %102 = add i64 %101, 16
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  %103 = icmp ugt i64 %101, -17
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %12, align 1, !tbaa !2432
  %105 = trunc i64 %102 to i32
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #8
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %19, align 1, !tbaa !2446
  %111 = xor i64 %101, 16
  %112 = xor i64 %111, %102
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %25, align 1, !tbaa !2447
  %116 = icmp eq i64 %102, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %28, align 1, !tbaa !2448
  %118 = lshr i64 %102, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* %31, align 1, !tbaa !2449
  %120 = lshr i64 %101, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %37, align 1, !tbaa !2450
  %125 = add i64 %100, 5
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %101, 24
  %127 = inttoptr i64 %102 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %RBP, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %100, 6
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %101, 32
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %58
}

; Function Attrs: noinline
define %struct.Memory* @sub_404a90__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404a90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 18
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = lshr i64 %59, 2
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = ashr i64 %59, 3
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  store i8 %62, i8* %13, align 1, !tbaa !2453
  %64 = trunc i64 %63 to i32
  %65 = and i32 %64, 255
  %66 = tail call i32 @llvm.ctpop.i32(i32 %65) #8
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  store i8 %69, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %70 = icmp eq i64 %63, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %29, align 1, !tbaa !2453
  %72 = lshr i64 %63, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %38, align 1, !tbaa !2453
  %74 = add i64 %49, -32
  %75 = add i64 %51, 19
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i64*
  store i64 %63, i64* %76, align 8
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -32
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %83 = ashr i64 %82, 63
  store i64 %83, i64* %RDX, align 8, !tbaa !2428
  %84 = load i64, i64* %RCX, align 8
  %85 = add i64 %79, 9
  store i64 %85, i64* %PC, align 8
  %86 = sext i64 %84 to i128
  %87 = and i128 %86, -18446744073709551616
  %88 = zext i64 %83 to i128
  %89 = shl nuw i128 %88, 64
  %90 = zext i64 %82 to i128
  %91 = or i128 %89, %90
  %92 = zext i64 %84 to i128
  %93 = or i128 %87, %92
  %94 = sdiv i128 %91, %93
  %95 = trunc i128 %94 to i64
  %96 = and i128 %94, 18446744073709551615
  %97 = sext i64 %95 to i128
  %98 = and i128 %97, -18446744073709551616
  %99 = or i128 %98, %96
  %100 = icmp eq i128 %94, %99
  br i1 %100, label %103, label %101

; <label>:101:                                    ; preds = %block_404a90
  %102 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %85, %struct.Memory* %2) #9
  %.pre = load i64, i64* %RAX, align 8
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:103:                                    ; preds = %block_404a90
  %104 = srem i128 %91, %93
  %105 = trunc i128 %104 to i64
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  store i64 %105, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %103, %101
  %106 = phi i64 [ %.pre2, %101 ], [ %77, %103 ]
  %107 = phi i64 [ %.pre1, %101 ], [ %85, %103 ]
  %108 = phi i64 [ %.pre, %101 ], [ %95, %103 ]
  %109 = phi %struct.Memory* [ %102, %101 ], [ %2, %103 ]
  %110 = add i64 %108, -1
  store i64 %110, i64* %RAX, align 8, !tbaa !2428
  %111 = icmp eq i64 %108, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %13, align 1, !tbaa !2432
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #8
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %20, align 1, !tbaa !2446
  %119 = xor i64 %108, %110
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %110, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %127
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2450
  %132 = add i64 %106, -24
  %133 = add i64 %107, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %110, i64* %134, align 8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %136 = bitcast i64* %135 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_404acb

block_404b74:                                     ; preds = %block_404b1b
  %137 = load i64, i64* %RSP, align 8
  %138 = add i64 %137, 48
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %139 = icmp ugt i64 %137, -49
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %13, align 1, !tbaa !2432
  %141 = trunc i64 %138 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #8
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %20, align 1, !tbaa !2446
  %147 = xor i64 %137, 16
  %148 = xor i64 %147, %138
  %149 = lshr i64 %148, 4
  %150 = trunc i64 %149 to i8
  %151 = and i8 %150, 1
  store i8 %151, i8* %26, align 1, !tbaa !2447
  %152 = icmp eq i64 %138, 0
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %29, align 1, !tbaa !2448
  %154 = lshr i64 %138, 63
  %155 = trunc i64 %154 to i8
  store i8 %155, i8* %32, align 1, !tbaa !2449
  %156 = lshr i64 %137, 63
  %157 = xor i64 %154, %156
  %158 = add nuw nsw i64 %157, %154
  %159 = icmp eq i64 %158, 2
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %38, align 1, !tbaa !2450
  %161 = add i64 %316, 5
  store i64 %161, i64* %PC, align 8
  %162 = add i64 %137, 56
  %163 = inttoptr i64 %138 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RBP, align 8, !tbaa !2428
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  %165 = add i64 %316, 6
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %162 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %PC, align 8, !tbaa !2428
  %168 = add i64 %137, 64
  store i64 %168, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404b0f:                                     ; preds = %block_404acb
  %169 = add i64 %269, -32
  %170 = add i64 %285, 4
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = add i64 %172, -1
  store i64 %173, i64* %RAX, align 8, !tbaa !2428
  %174 = icmp eq i64 %172, 0
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %13, align 1, !tbaa !2432
  %176 = trunc i64 %173 to i32
  %177 = and i32 %176, 255
  %178 = tail call i32 @llvm.ctpop.i32(i32 %177) #8
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  store i8 %181, i8* %20, align 1, !tbaa !2446
  %182 = xor i64 %172, %173
  %183 = lshr i64 %182, 4
  %184 = trunc i64 %183 to i8
  %185 = and i8 %184, 1
  store i8 %185, i8* %26, align 1, !tbaa !2447
  %186 = icmp eq i64 %173, 0
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %29, align 1, !tbaa !2448
  %188 = lshr i64 %173, 63
  %189 = trunc i64 %188 to i8
  store i8 %189, i8* %32, align 1, !tbaa !2449
  %190 = lshr i64 %172, 63
  %191 = xor i64 %188, %190
  %192 = add nuw nsw i64 %191, %190
  %193 = icmp eq i64 %192, 2
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %38, align 1, !tbaa !2450
  %195 = add i64 %285, 12
  store i64 %195, i64* %PC, align 8
  store i64 %173, i64* %272, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_404b1b

block_404ad6:                                     ; preds = %block_404acb
  %196 = add i64 %269, -8
  %197 = add i64 %285, 4
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to i64*
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %RAX, align 8, !tbaa !2428
  %200 = add i64 %285, 8
  store i64 %200, i64* %PC, align 8
  %201 = load i64, i64* %272, align 8
  store i64 %201, i64* %RCX, align 8, !tbaa !2428
  %202 = shl i64 %201, 3
  %203 = add i64 %202, %199
  %204 = add i64 %285, 13
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %206, i64* %207, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %208 = add i64 %269, -40
  %209 = add i64 %285, 18
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %210, align 8
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -32
  %213 = load i64, i64* %PC, align 8
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RDI, align 8, !tbaa !2428
  %217 = add i64 %211, -8
  %218 = add i64 %213, 8
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i64*
  %220 = load i64, i64* %219, align 8
  store i64 %220, i64* %RSI, align 8, !tbaa !2428
  %221 = add i64 %211, -24
  %222 = add i64 %213, 12
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223, align 8
  store i64 %224, i64* %RDX, align 8, !tbaa !2428
  %225 = add i64 %211, -40
  %226 = add i64 %213, 17
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i64*
  %228 = load i64, i64* %227, align 8
  store i64 %228, i64* %207, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %229 = add i64 %213, 360
  %230 = add i64 %213, 22
  %231 = load i64, i64* %RSP, align 8, !tbaa !2428
  %232 = add i64 %231, -8
  %233 = inttoptr i64 %232 to i64*
  store i64 %230, i64* %233, align 8
  store i64 %232, i64* %RSP, align 8, !tbaa !2428
  store i64 %229, i64* %PC, align 8, !tbaa !2428
  %234 = tail call %struct.Memory* @sub_404c50__ZN9benchmark7sift_inIPddEEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %229, %struct.Memory* %MEMORY.0)
  %235 = load i64, i64* %RBP, align 8
  %236 = add i64 %235, -24
  %237 = load i64, i64* %PC, align 8
  %238 = add i64 %237, 4
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %236 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = add i64 %240, -1
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = icmp ne i64 %240, 0
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %13, align 1, !tbaa !2432
  %244 = trunc i64 %241 to i32
  %245 = and i32 %244, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245) #8
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %20, align 1, !tbaa !2446
  %250 = xor i64 %240, 16
  %251 = xor i64 %241, %250
  %252 = lshr i64 %251, 4
  %253 = trunc i64 %252 to i8
  %254 = and i8 %253, 1
  store i8 %254, i8* %26, align 1, !tbaa !2447
  %255 = icmp eq i64 %241, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %29, align 1, !tbaa !2448
  %257 = lshr i64 %241, 63
  %258 = trunc i64 %257 to i8
  store i8 %258, i8* %32, align 1, !tbaa !2449
  %259 = lshr i64 %240, 63
  %260 = xor i64 %257, %259
  %261 = xor i64 %257, 1
  %262 = add nuw nsw i64 %260, %261
  %263 = icmp eq i64 %262, 2
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %38, align 1, !tbaa !2450
  %265 = add i64 %237, 12
  store i64 %265, i64* %PC, align 8
  store i64 %241, i64* %239, align 8
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, -63
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  br label %block_404acb

block_404acb:                                     ; preds = %block_404ad6, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %268 = phi i64 [ %.pre3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %267, %block_404ad6 ]
  %MEMORY.0 = phi %struct.Memory* [ %109, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %234, %block_404ad6 ]
  %269 = load i64, i64* %RBP, align 8
  %270 = add i64 %269, -24
  %271 = add i64 %268, 5
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %274 = trunc i64 %273 to i32
  %275 = and i32 %274, 255
  %276 = tail call i32 @llvm.ctpop.i32(i32 %275) #8
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = xor i8 %278, 1
  store i8 %279, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %280 = icmp eq i64 %273, 0
  %281 = zext i1 %280 to i8
  store i8 %281, i8* %29, align 1, !tbaa !2448
  %282 = lshr i64 %273, 63
  %283 = trunc i64 %282 to i8
  store i8 %283, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %284 = icmp ne i8 %283, 0
  %.v = select i1 %284, i64 68, i64 11
  %285 = add i64 %268, %.v
  store i64 %285, i64* %PC, align 8, !tbaa !2428
  br i1 %284, label %block_404b0f, label %block_404ad6

block_404b1b:                                     ; preds = %block_404b26, %block_404b0f
  %286 = phi i64 [ %.pre4, %block_404b0f ], [ %403, %block_404b26 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_404b0f ], [ %370, %block_404b26 ]
  %287 = load i64, i64* %RBP, align 8
  %288 = add i64 %287, -24
  %289 = add i64 %286, 5
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %288 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = add i64 %291, -1
  %293 = icmp eq i64 %291, 0
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %13, align 1, !tbaa !2432
  %295 = trunc i64 %292 to i32
  %296 = and i32 %295, 255
  %297 = tail call i32 @llvm.ctpop.i32(i32 %296) #8
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  store i8 %300, i8* %20, align 1, !tbaa !2446
  %301 = xor i64 %291, %292
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  store i8 %304, i8* %26, align 1, !tbaa !2447
  %305 = icmp eq i64 %292, 0
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %29, align 1, !tbaa !2448
  %307 = lshr i64 %292, 63
  %308 = trunc i64 %307 to i8
  store i8 %308, i8* %32, align 1, !tbaa !2449
  %309 = lshr i64 %291, 63
  %310 = xor i64 %307, %309
  %311 = add nuw nsw i64 %310, %309
  %312 = icmp eq i64 %311, 2
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %38, align 1, !tbaa !2450
  %314 = icmp ne i8 %308, 0
  %315 = xor i1 %314, %312
  %.v6 = select i1 %315, i64 89, i64 11
  %316 = add i64 %286, %.v6
  store i64 %316, i64* %PC, align 8, !tbaa !2428
  br i1 %315, label %block_404b74, label %block_404b26

block_404b26:                                     ; preds = %block_404b1b
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %317 = add i64 %287, -8
  %318 = add i64 %316, 8
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RCX, align 8, !tbaa !2428
  %321 = add i64 %316, 12
  store i64 %321, i64* %PC, align 8
  %322 = load i64, i64* %290, align 8
  store i64 %322, i64* %RSI, align 8, !tbaa !2428
  %323 = shl i64 %322, 3
  %324 = add i64 %323, %320
  %325 = add i64 %316, 17
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %327, i64* %328, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %329 = add i64 %287, -48
  %330 = add i64 %316, 22
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i64*
  store i64 %327, i64* %331, align 8
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -8
  %334 = load i64, i64* %PC, align 8
  %335 = add i64 %334, 4
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %333 to i64*
  %337 = load i64, i64* %336, align 8
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %338 = add i64 %334, 8
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i64*
  %340 = load i64, i64* %339, align 8
  store i64 %340, i64* %328, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %341 = add i64 %334, 12
  store i64 %341, i64* %PC, align 8
  %342 = load i64, i64* %336, align 8
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = add i64 %332, -24
  %344 = add i64 %334, 16
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %343 to i64*
  %346 = load i64, i64* %345, align 8
  store i64 %346, i64* %RSI, align 8, !tbaa !2428
  %347 = shl i64 %346, 3
  %348 = add i64 %347, %342
  %349 = add i64 %334, 21
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %348 to i64*
  store i64 %340, i64* %350, align 8
  %351 = load i64, i64* %RBP, align 8
  %352 = add i64 %351, -24
  %353 = load i64, i64* %PC, align 8
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %352 to i64*
  %356 = load i64, i64* %355, align 8
  store i64 %356, i64* %RDI, align 8, !tbaa !2428
  %357 = add i64 %351, -8
  %358 = add i64 %353, 8
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %357 to i64*
  %360 = load i64, i64* %359, align 8
  store i64 %360, i64* %RSI, align 8, !tbaa !2428
  %361 = add i64 %351, -48
  %362 = add i64 %353, 13
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %328, align 1, !tbaa !2451
  store double 0.000000e+00, double* %136, align 1, !tbaa !2451
  %365 = add i64 %353, 255
  %366 = add i64 %353, 18
  %367 = load i64, i64* %RSP, align 8, !tbaa !2428
  %368 = add i64 %367, -8
  %369 = inttoptr i64 %368 to i64*
  store i64 %366, i64* %369, align 8
  store i64 %368, i64* %RSP, align 8, !tbaa !2428
  store i64 %365, i64* %PC, align 8, !tbaa !2428
  %370 = tail call %struct.Memory* @sub_404c50__ZN9benchmark7sift_inIPddEEvlT_lT0__renamed_(%struct.State* nonnull %0, i64 %365, %struct.Memory* %MEMORY.1)
  %371 = load i64, i64* %RBP, align 8
  %372 = add i64 %371, -24
  %373 = load i64, i64* %PC, align 8
  %374 = add i64 %373, 4
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %372 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = add i64 %376, -1
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = icmp ne i64 %376, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %13, align 1, !tbaa !2432
  %380 = trunc i64 %377 to i32
  %381 = and i32 %380, 255
  %382 = tail call i32 @llvm.ctpop.i32(i32 %381) #8
  %383 = trunc i32 %382 to i8
  %384 = and i8 %383, 1
  %385 = xor i8 %384, 1
  store i8 %385, i8* %20, align 1, !tbaa !2446
  %386 = xor i64 %376, 16
  %387 = xor i64 %377, %386
  %388 = lshr i64 %387, 4
  %389 = trunc i64 %388 to i8
  %390 = and i8 %389, 1
  store i8 %390, i8* %26, align 1, !tbaa !2447
  %391 = icmp eq i64 %377, 0
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %29, align 1, !tbaa !2448
  %393 = lshr i64 %377, 63
  %394 = trunc i64 %393 to i8
  store i8 %394, i8* %32, align 1, !tbaa !2449
  %395 = lshr i64 %376, 63
  %396 = xor i64 %393, %395
  %397 = xor i64 %393, 1
  %398 = add nuw nsw i64 %396, %397
  %399 = icmp eq i64 %398, 2
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %38, align 1, !tbaa !2450
  %401 = add i64 %373, 12
  store i64 %401, i64* %PC, align 8
  store i64 %377, i64* %375, align 8
  %402 = load i64, i64* %PC, align 8
  %403 = add i64 %402, -84
  store i64 %403, i64* %PC, align 8, !tbaa !2428
  br label %block_404b1b
}

; Function Attrs: noinline
define %struct.Memory* @sub_404fd0__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404fd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = lshr i64 %60, 63
  %62 = add nsw i64 %60, -1
  %63 = icmp eq i64 %60, 0
  %64 = zext i1 %63 to i8
  store i8 %64, i8* %13, align 1, !tbaa !2432
  %65 = trunc i64 %62 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #8
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2446
  %71 = xor i64 %60, %62
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2447
  %75 = icmp eq i64 %62, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2448
  %77 = lshr i64 %62, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2449
  %79 = xor i64 %77, %61
  %80 = add nuw nsw i64 %79, %61
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2450
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 266, i64 25
  %86 = add i64 %51, %.v
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_4050ea, label %block_404ff9

block_405019:                                     ; preds = %block_405014, %block_40503e
  %.sink10 = phi i64 [ %434, %block_405014 ], [ %294, %block_40503e ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_405014 ], [ %125, %block_40503e ]
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -24
  store i64 %88, i64* %RDI, align 8, !tbaa !2428
  %89 = add i64 %87, -40
  %90 = add i64 %.sink10, 8
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, -8
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = icmp ugt i64 %92, 7
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %13, align 1, !tbaa !2432
  %96 = trunc i64 %93 to i32
  %97 = and i32 %96, 255
  %98 = tail call i32 @llvm.ctpop.i32(i32 %97) #8
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  store i8 %101, i8* %20, align 1, !tbaa !2446
  %102 = xor i64 %92, 16
  %103 = xor i64 %102, %93
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %26, align 1, !tbaa !2447
  %107 = icmp eq i64 %93, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %29, align 1, !tbaa !2448
  %109 = lshr i64 %93, 63
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %32, align 1, !tbaa !2449
  %111 = lshr i64 %92, 63
  %112 = xor i64 %109, %111
  %113 = xor i64 %109, 1
  %114 = add nuw nsw i64 %112, %113
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %38, align 1, !tbaa !2450
  %117 = add i64 %.sink10, 16
  store i64 %117, i64* %PC, align 8
  store i64 %93, i64* %91, align 8
  %118 = load i64, i64* %RAX, align 8
  %119 = load i64, i64* %PC, align 8
  store i64 %118, i64* %RSI, align 8, !tbaa !2428
  %120 = add i64 %119, -8137
  %121 = add i64 %119, 8
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i8, i8* %AL, align 1
  %127 = load i64, i64* %PC, align 8
  %128 = and i8 %126, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %129 = zext i8 %128 to i32
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #8
  %131 = trunc i32 %130 to i8
  %132 = xor i8 %131, 1
  store i8 %132, i8* %20, align 1, !tbaa !2446
  %133 = xor i8 %128, 1
  store i8 %133, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %134 = icmp eq i8 %133, 0
  %.v12 = select i1 %134, i64 13, i64 8
  %135 = add i64 %127, %.v12
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  br i1 %134, label %block_40503e, label %block_405039

block_405099:                                     ; preds = %block_405070
  %136 = add i64 %293, 4
  store i64 %136, i64* %PC, align 8
  %137 = load i64, i64* %266, align 8
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %293, 7
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = add i64 %196, -48
  %142 = add i64 %293, 11
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %140, i64* %143, align 8
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -32
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %RAX, align 8, !tbaa !2428
  %150 = add i64 %144, -40
  %151 = add i64 %146, 8
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %150 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RCX, align 8, !tbaa !2428
  %154 = add i64 %146, 11
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %149 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = add i64 %146, 14
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %153 to i64*
  store i64 %156, i64* %158, align 8
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -32
  %161 = load i64, i64* %PC, align 8
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = add i64 %159, -48
  %166 = add i64 %161, 8
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %165 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %RCX, align 8, !tbaa !2428
  %169 = add i64 %161, 11
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %164 to i64*
  store i64 %168, i64* %170, align 8
  %171 = load i64, i64* %PC, align 8
  %172 = add i64 %171, -169
  store i64 %172, i64* %PC, align 8, !tbaa !2428
  br label %block_405014

block_40505b:                                     ; preds = %block_405075, %block_405056
  %173 = phi i64 [ %233, %block_405056 ], [ %356, %block_405075 ]
  %174 = phi i64 [ %198, %block_405056 ], [ %.pre6, %block_405075 ]
  %MEMORY.1 = phi %struct.Memory* [ %125, %block_405056 ], [ %185, %block_405075 ]
  %175 = add i64 %174, -24
  store i64 %175, i64* %RSI, align 8, !tbaa !2428
  %176 = add i64 %174, -32
  %177 = add i64 %173, 8
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %RDI, align 8, !tbaa !2428
  %180 = add i64 %173, -8187
  %181 = add i64 %173, 13
  %182 = load i64, i64* %RSP, align 8, !tbaa !2428
  %183 = add i64 %182, -8
  %184 = inttoptr i64 %183 to i64*
  store i64 %181, i64* %184, align 8
  store i64 %183, i64* %RSP, align 8, !tbaa !2428
  store i64 %180, i64* %PC, align 8, !tbaa !2428
  %185 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %180, %struct.Memory* %MEMORY.1)
  %186 = load i8, i8* %AL, align 1
  %187 = load i64, i64* %PC, align 8
  %188 = and i8 %186, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %189 = zext i8 %188 to i32
  %190 = tail call i32 @llvm.ctpop.i32(i32 %189) #8
  %191 = trunc i32 %190 to i8
  %192 = xor i8 %191, 1
  store i8 %192, i8* %20, align 1, !tbaa !2446
  %193 = xor i8 %188, 1
  store i8 %193, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %194 = icmp eq i8 %193, 0
  %.v14 = select i1 %194, i64 13, i64 8
  %195 = add i64 %187, %.v14
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -32
  br i1 %194, label %block_405075, label %block_405070

block_405039:                                     ; preds = %block_405019
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = add i64 %135, 14
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %RAX, align 8, !tbaa !2428
  %203 = add i64 %198, -40
  %204 = add i64 %135, 18
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = sub i64 %202, %206
  %208 = icmp ult i64 %202, %206
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %13, align 1, !tbaa !2432
  %210 = trunc i64 %207 to i32
  %211 = and i32 %210, 255
  %212 = tail call i32 @llvm.ctpop.i32(i32 %211) #8
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = xor i8 %214, 1
  store i8 %215, i8* %20, align 1, !tbaa !2446
  %216 = xor i64 %206, %202
  %217 = xor i64 %216, %207
  %218 = lshr i64 %217, 4
  %219 = trunc i64 %218 to i8
  %220 = and i8 %219, 1
  store i8 %220, i8* %26, align 1, !tbaa !2447
  %221 = icmp eq i64 %207, 0
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %29, align 1, !tbaa !2448
  %223 = lshr i64 %207, 63
  %224 = trunc i64 %223 to i8
  store i8 %224, i8* %32, align 1, !tbaa !2449
  %225 = lshr i64 %202, 63
  %226 = lshr i64 %206, 63
  %227 = xor i64 %226, %225
  %228 = xor i64 %223, %225
  %229 = add nuw nsw i64 %228, %227
  %230 = icmp eq i64 %229, 2
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %38, align 1, !tbaa !2450
  %.v13 = select i1 %208, i64 29, i64 24
  %232 = add i64 %135, %.v13
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  br i1 %208, label %block_405056, label %block_405051

block_405056:                                     ; preds = %block_405039
  %233 = add i64 %232, 5
  store i64 %233, i64* %PC, align 8, !tbaa !2428
  br label %block_40505b

block_405094:                                     ; preds = %block_405070
  %234 = add i64 %293, 46
  br label %block_4050c2

block_404ff9:                                     ; preds = %block_404fd0
  %235 = add i64 %86, 4
  store i64 %235, i64* %PC, align 8
  %236 = load i64, i64* %57, align 8
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = add i64 %86, 7
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i64*
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = add i64 %49, -24
  %241 = add i64 %86, 11
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %240 to i64*
  store i64 %239, i64* %242, align 8
  %243 = load i64, i64* %RBP, align 8
  %244 = add i64 %243, -8
  %245 = load i64, i64* %PC, align 8
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %244 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %RAX, align 8, !tbaa !2428
  %249 = add i64 %243, -32
  %250 = add i64 %245, 8
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i64*
  store i64 %248, i64* %251, align 8
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -16
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %253 to i64*
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %RAX, align 8, !tbaa !2428
  %258 = add i64 %252, -40
  %259 = add i64 %254, 8
  store i64 %259, i64* %PC, align 8
  %260 = inttoptr i64 %258 to i64*
  store i64 %257, i64* %260, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405014

block_405070:                                     ; preds = %block_40505b
  %261 = add i64 %195, 26
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %197 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = add i64 %196, -40
  %265 = add i64 %195, 30
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = sub i64 %263, %267
  %269 = icmp ult i64 %263, %267
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %13, align 1, !tbaa !2432
  %271 = trunc i64 %268 to i32
  %272 = and i32 %271, 255
  %273 = tail call i32 @llvm.ctpop.i32(i32 %272) #8
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  %276 = xor i8 %275, 1
  store i8 %276, i8* %20, align 1, !tbaa !2446
  %277 = xor i64 %267, %263
  %278 = xor i64 %277, %268
  %279 = lshr i64 %278, 4
  %280 = trunc i64 %279 to i8
  %281 = and i8 %280, 1
  store i8 %281, i8* %26, align 1, !tbaa !2447
  %282 = icmp eq i64 %268, 0
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %29, align 1, !tbaa !2448
  %284 = lshr i64 %268, 63
  %285 = trunc i64 %284 to i8
  store i8 %285, i8* %32, align 1, !tbaa !2449
  %286 = lshr i64 %263, 63
  %287 = lshr i64 %267, 63
  %288 = xor i64 %287, %286
  %289 = xor i64 %284, %286
  %290 = add nuw nsw i64 %289, %288
  %291 = icmp eq i64 %290, 2
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %38, align 1, !tbaa !2450
  %.v15 = select i1 %269, i64 41, i64 36
  %293 = add i64 %195, %.v15
  store i64 %293, i64* %PC, align 8, !tbaa !2428
  br i1 %269, label %block_405099, label %block_405094

block_40503e:                                     ; preds = %block_405019
  %294 = add i64 %135, -37
  br label %block_405019

block_405051:                                     ; preds = %block_405039
  %295 = add i64 %232, 113
  br label %block_4050c2

block_4050ea:                                     ; preds = %block_4050c2, %block_404fd0
  %296 = phi i64 [ %86, %block_404fd0 ], [ %.pre7, %block_4050c2 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_404fd0 ], [ %432, %block_4050c2 ]
  %297 = load i64, i64* %RSP, align 8
  %298 = add i64 %297, 48
  store i64 %298, i64* %RSP, align 8, !tbaa !2428
  %299 = icmp ugt i64 %297, -49
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %13, align 1, !tbaa !2432
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #8
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %20, align 1, !tbaa !2446
  %307 = xor i64 %297, 16
  %308 = xor i64 %307, %298
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %26, align 1, !tbaa !2447
  %312 = icmp eq i64 %298, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %29, align 1, !tbaa !2448
  %314 = lshr i64 %298, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %32, align 1, !tbaa !2449
  %316 = lshr i64 %297, 63
  %317 = xor i64 %314, %316
  %318 = add nuw nsw i64 %317, %314
  %319 = icmp eq i64 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %38, align 1, !tbaa !2450
  %321 = add i64 %296, 5
  store i64 %321, i64* %PC, align 8
  %322 = add i64 %297, 56
  %323 = inttoptr i64 %298 to i64*
  %324 = load i64, i64* %323, align 8
  store i64 %324, i64* %RBP, align 8, !tbaa !2428
  store i64 %322, i64* %RSP, align 8, !tbaa !2428
  %325 = add i64 %296, 6
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %322 to i64*
  %327 = load i64, i64* %326, align 8
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  %328 = add i64 %297, 64
  store i64 %328, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_405075:                                     ; preds = %block_40505b
  %329 = add i64 %195, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %197 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = add i64 %331, 8
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = icmp ugt i64 %331, -9
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %13, align 1, !tbaa !2432
  %335 = trunc i64 %332 to i32
  %336 = and i32 %335, 255
  %337 = tail call i32 @llvm.ctpop.i32(i32 %336) #8
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  %340 = xor i8 %339, 1
  store i8 %340, i8* %20, align 1, !tbaa !2446
  %341 = xor i64 %331, %332
  %342 = lshr i64 %341, 4
  %343 = trunc i64 %342 to i8
  %344 = and i8 %343, 1
  store i8 %344, i8* %26, align 1, !tbaa !2447
  %345 = icmp eq i64 %332, 0
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %29, align 1, !tbaa !2448
  %347 = lshr i64 %332, 63
  %348 = trunc i64 %347 to i8
  store i8 %348, i8* %32, align 1, !tbaa !2449
  %349 = lshr i64 %331, 63
  %350 = xor i64 %347, %349
  %351 = add nuw nsw i64 %350, %347
  %352 = icmp eq i64 %351, 2
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %38, align 1, !tbaa !2450
  %354 = add i64 %195, 12
  store i64 %354, i64* %PC, align 8
  store i64 %332, i64* %330, align 8
  %355 = load i64, i64* %PC, align 8
  %356 = add i64 %355, -38
  store i64 %356, i64* %PC, align 8, !tbaa !2428
  %.pre6 = load i64, i64* %RBP, align 8
  br label %block_40505b

block_4050c2:                                     ; preds = %block_405051, %block_405094
  %357 = phi i64 [ %234, %block_405094 ], [ %295, %block_405051 ]
  %358 = phi i64 [ %196, %block_405094 ], [ %198, %block_405051 ]
  %MEMORY.3 = phi %struct.Memory* [ %185, %block_405094 ], [ %125, %block_405051 ]
  %359 = add i64 %358, -8
  %360 = add i64 %357, 4
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %363 = add i64 %358, -40
  %364 = add i64 %357, 8
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = add i64 %366, 8
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  %368 = icmp ugt i64 %366, -9
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %13, align 1, !tbaa !2432
  %370 = trunc i64 %367 to i32
  %371 = and i32 %370, 255
  %372 = tail call i32 @llvm.ctpop.i32(i32 %371) #8
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  store i8 %375, i8* %20, align 1, !tbaa !2446
  %376 = xor i64 %366, %367
  %377 = lshr i64 %376, 4
  %378 = trunc i64 %377 to i8
  %379 = and i8 %378, 1
  store i8 %379, i8* %26, align 1, !tbaa !2447
  %380 = icmp eq i64 %367, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %29, align 1, !tbaa !2448
  %382 = lshr i64 %367, 63
  %383 = trunc i64 %382 to i8
  store i8 %383, i8* %32, align 1, !tbaa !2449
  %384 = lshr i64 %366, 63
  %385 = xor i64 %382, %384
  %386 = add nuw nsw i64 %385, %382
  %387 = icmp eq i64 %386, 2
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %38, align 1, !tbaa !2450
  store i64 %367, i64* %RSI, align 8, !tbaa !2428
  %389 = add i64 %357, -242
  %390 = add i64 %357, 20
  %391 = load i64, i64* %RSP, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %390, i64* %393, align 8
  store i64 %392, i64* %RSP, align 8, !tbaa !2428
  store i64 %389, i64* %PC, align 8, !tbaa !2428
  %394 = tail call %struct.Memory* @sub_404fd0__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %389, %struct.Memory* %MEMORY.3)
  %395 = load i64, i64* %RBP, align 8
  %396 = add i64 %395, -40
  %397 = load i64, i64* %PC, align 8
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %396 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = add i64 %400, 8
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = icmp ugt i64 %400, -9
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %13, align 1, !tbaa !2432
  %404 = trunc i64 %401 to i32
  %405 = and i32 %404, 255
  %406 = tail call i32 @llvm.ctpop.i32(i32 %405) #8
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  store i8 %409, i8* %20, align 1, !tbaa !2446
  %410 = xor i64 %400, %401
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  store i8 %413, i8* %26, align 1, !tbaa !2447
  %414 = icmp eq i64 %401, 0
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %29, align 1, !tbaa !2448
  %416 = lshr i64 %401, 63
  %417 = trunc i64 %416 to i8
  store i8 %417, i8* %32, align 1, !tbaa !2449
  %418 = lshr i64 %400, 63
  %419 = xor i64 %416, %418
  %420 = add nuw nsw i64 %419, %416
  %421 = icmp eq i64 %420, 2
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %38, align 1, !tbaa !2450
  %423 = add i64 %395, -16
  %424 = add i64 %397, 12
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i64*
  %426 = load i64, i64* %425, align 8
  store i64 %426, i64* %RSI, align 8, !tbaa !2428
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %427 = add i64 %397, -262
  %428 = add i64 %397, 20
  %429 = load i64, i64* %RSP, align 8, !tbaa !2428
  %430 = add i64 %429, -8
  %431 = inttoptr i64 %430 to i64*
  store i64 %428, i64* %431, align 8
  store i64 %430, i64* %RSP, align 8, !tbaa !2428
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  %432 = tail call %struct.Memory* @sub_404fd0__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %427, %struct.Memory* %394)
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4050ea

block_405014:                                     ; preds = %block_404ff9, %block_405099
  %433 = phi i64 [ %.pre, %block_404ff9 ], [ %172, %block_405099 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_404ff9 ], [ %185, %block_405099 ]
  %434 = add i64 %433, 5
  br label %block_405019
}

; Function Attrs: noinline
define %struct.Memory* @sub_4031b0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4031b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4031e0__ZltI12ValueWrapperIdEEbRKS0_IT_ES5__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_403240__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403240:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #8
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, %23
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2448
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = add i64 %16, 14
  store i64 %51, i64* %PC, align 8
  store i64 %23, i64* %21, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %54, 5
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %54, 6
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405f70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 80
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_405fd0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 118
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_406010__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_4046c0__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4046c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %42 = icmp ne i64 %28, %35
  store i8 0, i8* %36, align 1, !tbaa !2432
  %43 = zext i1 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #8
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %37, align 1, !tbaa !2446
  %47 = xor i1 %42, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %39, align 1, !tbaa !2448
  store i8 0, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2447
  %49 = zext i1 %42 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028a0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4028a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4028c8

block_402949:                                     ; preds = %block_4028c8
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4028d8:                                     ; preds = %block_4028c8
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 1008
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402ce0__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 9439
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_404df0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 1410
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402eb0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_4028c8

block_4028c8:                                     ; preds = %block_4028d8, %block_4028a0
  %255 = phi i64 [ %.pre, %block_4028a0 ], [ %254, %block_4028d8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4028a0 ], [ %222, %block_4028d8 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_4028d8, label %block_402949
}

; Function Attrs: noinline
define %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402fd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 598
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_403240__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2432
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #8
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2446
  %94 = xor i64 %84, %85
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2447
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2448
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2449
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2450
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline
define %struct.Memory* @sub_404df0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404df0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 96
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, -7080
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_403260__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %RAX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %58, -1
  %61 = icmp eq i64 %58, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %13, align 1, !tbaa !2432
  %63 = trunc i64 %60 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #8
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %20, align 1, !tbaa !2446
  %69 = xor i64 %58, %60
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  store i8 %72, i8* %25, align 1, !tbaa !2447
  %73 = icmp eq i64 %60, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %28, align 1, !tbaa !2448
  %75 = lshr i64 %60, 63
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %31, align 1, !tbaa !2449
  %77 = lshr i64 %58, 63
  %78 = xor i64 %75, %77
  %79 = add nuw nsw i64 %78, %77
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %37, align 1, !tbaa !2450
  %82 = icmp ne i8 %76, 0
  %83 = xor i1 %82, %80
  %84 = or i1 %73, %83
  %.v = select i1 %84, i64 354, i64 10
  %85 = add i64 %59, %.v
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_404f75, label %block_404e1d

block_404e3d:                                     ; preds = %block_404ede, %block_404e1d
  %86 = phi i64 [ %.pre, %block_404e1d ], [ %282, %block_404ede ]
  %MEMORY.0 = phi %struct.Memory* [ %171, %block_404e1d ], [ %272, %block_404ede ]
  %87 = add i64 %86, 5
  br label %block_404e42

block_404f75:                                     ; preds = %block_404f23, %block_404df0
  %88 = phi i64 [ %85, %block_404df0 ], [ %.pre8, %block_404f23 ]
  %MEMORY.1 = phi %struct.Memory* [ %57, %block_404df0 ], [ %384, %block_404f23 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 96
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -97
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2432
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #8
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2446
  %99 = xor i64 %89, %90
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2447
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 104
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 112
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404eb2:                                     ; preds = %block_404e90
  %120 = add i64 %161, -7282
  %121 = add i64 %161, 9
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403240__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %151)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -88
  %128 = load i64, i64* %RAX, align 8
  %129 = load i64, i64* %PC, align 8
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %127 to i64*
  store i64 %128, i64* %131, align 8
  %132 = load i64, i64* %PC, align 8
  %133 = add i64 %132, -47
  br label %block_404e90

block_404e90:                                     ; preds = %block_404e8b, %block_404eb2
  %.sink10 = phi i64 [ %305, %block_404e8b ], [ %133, %block_404eb2 ]
  %MEMORY.2 = phi %struct.Memory* [ %293, %block_404e8b ], [ %125, %block_404eb2 ]
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -32
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = add i64 %.sink10, -7760
  %137 = add i64 %.sink10, 9
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  store i64 %143, i64* %RSI, align 8, !tbaa !2428
  %145 = load i64, i64* %RAX, align 8
  store i64 %145, i64* %RDI, align 8, !tbaa !2428
  %146 = add i64 %144, -7737
  %147 = add i64 %144, 12
  %148 = load i64, i64* %RSP, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150, align 8
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %151 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %146, %struct.Memory* %141)
  %152 = load i8, i8* %AL, align 1
  %153 = load i64, i64* %PC, align 8
  %154 = and i8 %152, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %155 = zext i8 %154 to i32
  %156 = tail call i32 @llvm.ctpop.i32(i32 %155) #8
  %157 = trunc i32 %156 to i8
  %158 = xor i8 %157, 1
  store i8 %158, i8* %20, align 1, !tbaa !2446
  %159 = xor i8 %154, 1
  store i8 %159, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %160 = icmp eq i8 %159, 0
  %.v17 = select i1 %160, i64 13, i64 8
  %161 = add i64 %153, %.v17
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -32
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  br i1 %160, label %block_404eb2, label %block_404ead

block_404e1d:                                     ; preds = %block_404df0
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -8
  store i64 %165, i64* %RDI, align 8, !tbaa !2428
  %166 = add i64 %85, -7645
  %167 = add i64 %85, 9
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %166, %struct.Memory* %57)
  %172 = bitcast %union.anon* %3 to i64**
  %173 = load i64*, i64** %172, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC, align 8
  %176 = load i64, i64* %173, align 8
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -24
  %179 = add i64 %174, 7
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %180, align 8
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -8
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = add i64 %181, -32
  %188 = add i64 %183, 8
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  store i64 %186, i64* %189, align 8
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -16
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 4
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = add i64 %190, -40
  %197 = add i64 %192, 8
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to i64*
  store i64 %195, i64* %198, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_404e3d

block_404ead:                                     ; preds = %block_404e90
  %199 = add i64 %162, -40
  store i64 %199, i64* %RSI, align 8, !tbaa !2428
  %200 = add i64 %161, 243
  %201 = add i64 %161, 36
  %202 = load i64, i64* %RSP, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %RSP, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_404fa0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %200, %struct.Memory* %151)
  %206 = load i8, i8* %AL, align 1
  %207 = load i64, i64* %PC, align 8
  %208 = and i8 %206, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %209 = zext i8 %208 to i32
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #8
  %211 = trunc i32 %210 to i8
  %212 = xor i8 %211, 1
  store i8 %212, i8* %20, align 1, !tbaa !2446
  %213 = xor i8 %208, 1
  store i8 %213, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %214 = icmp eq i8 %213, 0
  %.v18 = select i1 %214, i64 13, i64 8
  %215 = add i64 %207, %.v18
  store i64 %215, i64* %PC, align 8, !tbaa !2428
  br i1 %214, label %block_404ede, label %block_404ed9

block_404ede:                                     ; preds = %block_404ead
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -40
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %218 = add i64 %215, -7838
  %219 = add i64 %215, 9
  %220 = load i64, i64* %RSP, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %219, i64* %222, align 8
  store i64 %221, i64* %RSP, align 8, !tbaa !2428
  store i64 %218, i64* %PC, align 8, !tbaa !2428
  %223 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %218, %struct.Memory* %205)
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -32
  %226 = load i64, i64* %PC, align 8
  store i64 %225, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64*, i64** %172, align 8
  %228 = add i64 %226, 7
  store i64 %228, i64* %PC, align 8
  %229 = load i64, i64* %227, align 8
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = add i64 %224, -48
  %231 = add i64 %226, 11
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i64*
  store i64 %229, i64* %232, align 8
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, -7858
  %235 = add i64 %233, 5
  %236 = load i64, i64* %RSP, align 8, !tbaa !2428
  %237 = add i64 %236, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 %235, i64* %238, align 8
  store i64 %237, i64* %RSP, align 8, !tbaa !2428
  store i64 %234, i64* %PC, align 8, !tbaa !2428
  %239 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %234, %struct.Memory* %223)
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -40
  %242 = load i64, i64* %PC, align 8
  store i64 %241, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %240, -96
  %244 = load i64, i64* %RAX, align 8
  %245 = add i64 %242, 8
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %246, align 8
  %247 = load i64, i64* %PC, align 8
  %248 = add i64 %247, -7871
  %249 = add i64 %247, 5
  %250 = load i64, i64* %RSP, align 8, !tbaa !2428
  %251 = add i64 %250, -8
  %252 = inttoptr i64 %251 to i64*
  store i64 %249, i64* %252, align 8
  store i64 %251, i64* %RSP, align 8, !tbaa !2428
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %253 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %248, %struct.Memory* %239)
  %254 = load i64, i64* %RBP, align 8
  %255 = add i64 %254, -32
  %256 = load i64, i64* %PC, align 8
  store i64 %255, i64* %RDI, align 8, !tbaa !2428
  %257 = add i64 %254, -96
  %258 = add i64 %256, 8
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %RCX, align 8, !tbaa !2428
  %261 = add i64 %256, 11
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %RDX, align 8, !tbaa !2428
  %264 = load i64*, i64** %172, align 8
  %265 = add i64 %256, 14
  store i64 %265, i64* %PC, align 8
  store i64 %263, i64* %264, align 8
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, -7890
  %268 = add i64 %266, 5
  %269 = load i64, i64* %RSP, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271, align 8
  store i64 %270, i64* %RSP, align 8, !tbaa !2428
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %272 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %267, %struct.Memory* %253)
  %273 = load i64, i64* %RBP, align 8
  %274 = add i64 %273, -48
  %275 = load i64, i64* %PC, align 8
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %274 to i64*
  %278 = load i64, i64* %277, align 8
  store i64 %278, i64* %RCX, align 8, !tbaa !2428
  %279 = load i64*, i64** %172, align 8
  %280 = add i64 %275, 7
  store i64 %280, i64* %PC, align 8
  store i64 %278, i64* %279, align 8
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, -225
  store i64 %282, i64* %PC, align 8, !tbaa !2428
  br label %block_404e3d

block_404e6c:                                     ; preds = %block_404e42
  %283 = add i64 %421, -42
  br label %block_404e42

block_404ed9:                                     ; preds = %block_404ead
  %284 = add i64 %215, 74
  br label %block_404f23

block_404e67:                                     ; preds = %block_404e42
  %285 = load i64, i64* %RBP, align 8
  %286 = add i64 %285, -32
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = add i64 %285, -40
  store i64 %287, i64* %RSI, align 8, !tbaa !2428
  %288 = add i64 %421, 313
  %289 = add i64 %421, 23
  %290 = load i64, i64* %RSP, align 8, !tbaa !2428
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  store i64 %289, i64* %292, align 8
  store i64 %291, i64* %RSP, align 8, !tbaa !2428
  store i64 %288, i64* %PC, align 8, !tbaa !2428
  %293 = tail call %struct.Memory* @sub_404fa0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__renamed_(%struct.State* nonnull %0, i64 %288, %struct.Memory* %411)
  %294 = load i8, i8* %AL, align 1
  %295 = load i64, i64* %PC, align 8
  %296 = and i8 %294, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %297 = zext i8 %296 to i32
  %298 = tail call i32 @llvm.ctpop.i32(i32 %297) #8
  %299 = trunc i32 %298 to i8
  %300 = xor i8 %299, 1
  store i8 %300, i8* %20, align 1, !tbaa !2446
  %301 = xor i8 %296, 1
  store i8 %301, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %302 = icmp eq i8 %301, 0
  %.v16 = select i1 %302, i64 13, i64 8
  %303 = add i64 %295, %.v16
  store i64 %303, i64* %PC, align 8, !tbaa !2428
  br i1 %302, label %block_404e8b, label %block_404e86

block_404e86:                                     ; preds = %block_404e67
  %304 = add i64 %303, 157
  br label %block_404f23

block_404e8b:                                     ; preds = %block_404e67
  %305 = add i64 %303, 5
  br label %block_404e90

block_404f23:                                     ; preds = %block_404e86, %block_404ed9
  %306 = phi i64 [ %284, %block_404ed9 ], [ %304, %block_404e86 ]
  %MEMORY.3 = phi %struct.Memory* [ %205, %block_404ed9 ], [ %293, %block_404e86 ]
  %307 = load i64, i64* %RBP, align 8
  %308 = add i64 %307, -40
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %309 = add i64 %307, -8
  %310 = add i64 %306, 15
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %309 to i64*
  %312 = load i64, i64* %311, align 8
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = add i64 %307, -56
  %314 = add i64 %306, 19
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  store i64 %312, i64* %315, align 8
  %316 = load i64, i64* %PC, align 8
  %317 = add i64 %316, -7334
  %318 = add i64 %316, 5
  %319 = load i64, i64* %RSP, align 8, !tbaa !2428
  %320 = add i64 %319, -8
  %321 = inttoptr i64 %320 to i64*
  store i64 %318, i64* %321, align 8
  store i64 %320, i64* %RSP, align 8, !tbaa !2428
  store i64 %317, i64* %PC, align 8, !tbaa !2428
  %322 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %317, %struct.Memory* %MEMORY.3)
  %323 = load i64, i64* %RBP, align 8
  %324 = add i64 %323, -64
  %325 = load i64, i64* %RAX, align 8
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 4
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %324 to i64*
  store i64 %325, i64* %328, align 8
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -56
  %331 = load i64, i64* %PC, align 8
  %332 = add i64 %331, 4
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %330 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = add i64 %329, -64
  %336 = add i64 %331, 8
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %RSI, align 8, !tbaa !2428
  %339 = add i64 %331, -335
  %340 = add i64 %331, 13
  %341 = load i64, i64* %RSP, align 8, !tbaa !2428
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %340, i64* %343, align 8
  store i64 %342, i64* %RSP, align 8, !tbaa !2428
  store i64 %339, i64* %PC, align 8, !tbaa !2428
  %344 = tail call %struct.Memory* @sub_404df0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %339, %struct.Memory* %322)
  %345 = load i64, i64* %RBP, align 8
  %346 = add i64 %345, -40
  %347 = load i64, i64* %PC, align 8
  store i64 %346, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %348 = add i64 %347, -7356
  %349 = add i64 %347, 16
  %350 = load i64, i64* %RSP, align 8, !tbaa !2428
  %351 = add i64 %350, -8
  %352 = inttoptr i64 %351 to i64*
  store i64 %349, i64* %352, align 8
  store i64 %351, i64* %RSP, align 8, !tbaa !2428
  store i64 %348, i64* %PC, align 8, !tbaa !2428
  %353 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %348, %struct.Memory* %344)
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -72
  %356 = load i64, i64* %RAX, align 8
  %357 = load i64, i64* %PC, align 8
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %355 to i64*
  store i64 %356, i64* %359, align 8
  %360 = load i64, i64* %RBP, align 8
  %361 = add i64 %360, -16
  %362 = load i64, i64* %PC, align 8
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = add i64 %360, -80
  %367 = add i64 %362, 8
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i64*
  store i64 %365, i64* %368, align 8
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -72
  %371 = load i64, i64* %PC, align 8
  %372 = add i64 %371, 4
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %370 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = add i64 %369, -80
  %376 = add i64 %371, 8
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %RSI, align 8, !tbaa !2428
  %379 = add i64 %371, -376
  %380 = add i64 %371, 13
  %381 = load i64, i64* %RSP, align 8, !tbaa !2428
  %382 = add i64 %381, -8
  %383 = inttoptr i64 %382 to i64*
  store i64 %380, i64* %383, align 8
  store i64 %382, i64* %RSP, align 8, !tbaa !2428
  store i64 %379, i64* %PC, align 8, !tbaa !2428
  %384 = tail call %struct.Memory* @sub_404df0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %379, %struct.Memory* %353)
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_404f75

block_404e42:                                     ; preds = %block_404e6c, %block_404e3d
  %385 = phi i64 [ %87, %block_404e3d ], [ %283, %block_404e6c ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_404e3d ], [ %411, %block_404e6c ]
  %386 = load i64, i64* %RBP, align 8
  %387 = add i64 %386, -40
  store i64 %387, i64* %RDI, align 8, !tbaa !2428
  %388 = add i64 %385, 318
  %389 = add i64 %385, 9
  %390 = load i64, i64* %RSP, align 8, !tbaa !2428
  %391 = add i64 %390, -8
  %392 = inttoptr i64 %391 to i64*
  store i64 %389, i64* %392, align 8
  store i64 %391, i64* %RSP, align 8, !tbaa !2428
  store i64 %388, i64* %PC, align 8, !tbaa !2428
  %393 = tail call %struct.Memory* @sub_404f80__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__renamed_(%struct.State* nonnull %0, i64 %388, %struct.Memory* %MEMORY.4)
  %394 = load i64, i64* %RAX, align 8
  %395 = load i64, i64* %PC, align 8
  store i64 %394, i64* %RDI, align 8, !tbaa !2428
  %396 = add i64 %395, -7691
  %397 = add i64 %395, 8
  %398 = load i64, i64* %RSP, align 8, !tbaa !2428
  %399 = add i64 %398, -8
  %400 = inttoptr i64 %399 to i64*
  store i64 %397, i64* %400, align 8
  store i64 %399, i64* %RSP, align 8, !tbaa !2428
  store i64 %396, i64* %PC, align 8, !tbaa !2428
  %401 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %396, %struct.Memory* %393)
  %402 = load i64, i64* %RBP, align 8
  %403 = add i64 %402, -24
  %404 = load i64, i64* %PC, align 8
  store i64 %403, i64* %RDI, align 8, !tbaa !2428
  %405 = load i64, i64* %RAX, align 8
  store i64 %405, i64* %RSI, align 8, !tbaa !2428
  %406 = add i64 %404, -7667
  %407 = add i64 %404, 12
  %408 = load i64, i64* %RSP, align 8, !tbaa !2428
  %409 = add i64 %408, -8
  %410 = inttoptr i64 %409 to i64*
  store i64 %407, i64* %410, align 8
  store i64 %409, i64* %RSP, align 8, !tbaa !2428
  store i64 %406, i64* %PC, align 8, !tbaa !2428
  %411 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %406, %struct.Memory* %401)
  %412 = load i8, i8* %AL, align 1
  %413 = load i64, i64* %PC, align 8
  %414 = and i8 %412, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %415 = zext i8 %414 to i32
  %416 = tail call i32 @llvm.ctpop.i32(i32 %415) #8
  %417 = trunc i32 %416 to i8
  %418 = xor i8 %417, 1
  store i8 %418, i8* %20, align 1, !tbaa !2446
  %419 = xor i8 %414, 1
  store i8 %419, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %420 = icmp eq i8 %419, 0
  %.v15 = select i1 %420, i64 13, i64 8
  %421 = add i64 %413, %.v15
  store i64 %421, i64* %PC, align 8, !tbaa !2428
  br i1 %420, label %block_404e6c, label %block_404e67
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401c30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_400910___cxx_global_var_init_14(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400910:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dPb_type* @dPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4799
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperIdEC2EPd_renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_404c50__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404c50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -16
  %16 = load i64, i64* %RDI, align 8
  %17 = add i64 %14, 7
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %18, align 8
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -16
  %21 = load i64, i64* %RSI, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %24, align 8
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -24
  %27 = load i64, i64* %RDX, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -32
  %33 = load i64, i64* %PC, align 8
  %34 = add i64 %33, 5
  store i64 %34, i64* %PC, align 8
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %36 = load i64, i64* %35, align 1
  %37 = inttoptr i64 %32 to i64*
  store i64 %36, i64* %37, align 8
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -24
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %RDX, align 8, !tbaa !2428
  %44 = add i64 %38, -48
  %45 = add i64 %40, 8
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %44 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -48
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %60 = shl i64 %53, 1
  %61 = icmp slt i64 %53, 0
  %62 = icmp slt i64 %60, 0
  %63 = xor i1 %61, %62
  store i64 %60, i64* %RDX, align 8, !tbaa !2428
  %.lobit = lshr i64 %53, 63
  %64 = trunc i64 %.lobit to i8
  store i8 %64, i8* %54, align 1, !tbaa !2453
  %65 = trunc i64 %60 to i32
  %66 = and i32 %65, 254
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #8
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %55, align 1, !tbaa !2453
  store i8 0, i8* %56, align 1, !tbaa !2453
  %71 = icmp eq i64 %60, 0
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %57, align 1, !tbaa !2453
  %73 = lshr i64 %53, 62
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %58, align 1, !tbaa !2453
  %76 = zext i1 %63 to i8
  store i8 %76, i8* %59, align 1, !tbaa !2453
  %77 = add i64 %47, -40
  %78 = add i64 %49, 16
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  store i64 %60, i64* %79, align 8
  %80 = bitcast [32 x %union.VectorReg]* %6 to double*
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %82 = bitcast i64* %81 to double*
  %83 = bitcast %union.VectorReg* %7 to double*
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404c7d

block_404cbf:                                     ; preds = %block_404cb3, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %86 = phi i64 [ %.pre5, %block_404cb3 ], [ %508, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -16
  %89 = add i64 %86, 4
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = add i64 %87, -40
  %93 = add i64 %86, 8
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %95, -1
  store i64 %96, i64* %RCX, align 8, !tbaa !2428
  %97 = icmp eq i64 %95, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %54, align 1, !tbaa !2432
  %99 = trunc i64 %96 to i32
  %100 = and i32 %99, 255
  %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #8
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* %55, align 1, !tbaa !2446
  %105 = xor i64 %95, %96
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  store i8 %108, i8* %56, align 1, !tbaa !2447
  %109 = icmp eq i64 %96, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %57, align 1, !tbaa !2448
  %111 = lshr i64 %96, 63
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %58, align 1, !tbaa !2449
  %113 = lshr i64 %95, 63
  %114 = xor i64 %111, %113
  %115 = add nuw nsw i64 %114, %113
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %59, align 1, !tbaa !2450
  %118 = shl i64 %96, 3
  %119 = add i64 %118, %91
  %120 = add i64 %86, 17
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %35, align 1, !tbaa !2451
  store double 0.000000e+00, double* %82, align 1, !tbaa !2451
  %123 = add i64 %86, 21
  store i64 %123, i64* %PC, align 8
  %124 = load i64, i64* %90, align 8
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %125 = add i64 %87, -48
  %126 = add i64 %86, 25
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %RCX, align 8, !tbaa !2428
  %129 = shl i64 %128, 3
  %130 = add i64 %129, %124
  %131 = add i64 %86, 30
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %122, i64* %132, align 8
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -40
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = add i64 %138, -1
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = icmp eq i64 %138, 0
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %54, align 1, !tbaa !2432
  %142 = trunc i64 %139 to i32
  %143 = and i32 %142, 255
  %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #8
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* %55, align 1, !tbaa !2446
  %148 = xor i64 %138, %139
  %149 = lshr i64 %148, 4
  %150 = trunc i64 %149 to i8
  %151 = and i8 %150, 1
  store i8 %151, i8* %56, align 1, !tbaa !2447
  %152 = icmp eq i64 %139, 0
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %57, align 1, !tbaa !2448
  %154 = lshr i64 %139, 63
  %155 = trunc i64 %154 to i8
  store i8 %155, i8* %58, align 1, !tbaa !2449
  %156 = lshr i64 %138, 63
  %157 = xor i64 %154, %156
  %158 = add nuw nsw i64 %157, %156
  %159 = icmp eq i64 %158, 2
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %59, align 1, !tbaa !2450
  %161 = add i64 %133, -48
  %162 = add i64 %135, 12
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %139, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -40
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %166, 8
  store i64 %170, i64* %PC, align 8
  %171 = load i64, i64* %168, align 8
  %172 = add i64 %171, %169
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = icmp ult i64 %172, %169
  %174 = icmp ult i64 %172, %171
  %175 = or i1 %173, %174
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %54, align 1, !tbaa !2432
  %177 = trunc i64 %172 to i32
  %178 = and i32 %177, 255
  %179 = tail call i32 @llvm.ctpop.i32(i32 %178) #8
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = xor i8 %181, 1
  store i8 %182, i8* %55, align 1, !tbaa !2446
  %183 = xor i64 %171, %169
  %184 = xor i64 %183, %172
  %185 = lshr i64 %184, 4
  %186 = trunc i64 %185 to i8
  %187 = and i8 %186, 1
  store i8 %187, i8* %56, align 1, !tbaa !2447
  %188 = icmp eq i64 %172, 0
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %57, align 1, !tbaa !2448
  %190 = lshr i64 %172, 63
  %191 = trunc i64 %190 to i8
  store i8 %191, i8* %58, align 1, !tbaa !2449
  %192 = lshr i64 %169, 63
  %193 = lshr i64 %171, 63
  %194 = xor i64 %190, %192
  %195 = xor i64 %190, %193
  %196 = add nuw nsw i64 %194, %195
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %59, align 1, !tbaa !2450
  %199 = add i64 %166, 12
  store i64 %199, i64* %PC, align 8
  store i64 %172, i64* %168, align 8
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, -120
  store i64 %201, i64* %PC, align 8, !tbaa !2428
  br label %block_404c7d

block_404c7d:                                     ; preds = %block_404cbf, %block_404c50
  %202 = phi i64 [ %.pre, %block_404c50 ], [ %201, %block_404cbf ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_404c50 ], [ %505, %block_404cbf ]
  %203 = load i64, i64* %RBP, align 8
  %204 = add i64 %203, -40
  %205 = add i64 %202, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %203, -8
  %209 = add i64 %202, 8
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = sub i64 %207, %211
  %213 = icmp ult i64 %207, %211
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %54, align 1, !tbaa !2432
  %215 = trunc i64 %212 to i32
  %216 = and i32 %215, 255
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #8
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  store i8 %220, i8* %55, align 1, !tbaa !2446
  %221 = xor i64 %211, %207
  %222 = xor i64 %221, %212
  %223 = lshr i64 %222, 4
  %224 = trunc i64 %223 to i8
  %225 = and i8 %224, 1
  store i8 %225, i8* %56, align 1, !tbaa !2447
  %226 = icmp eq i64 %212, 0
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %57, align 1, !tbaa !2448
  %228 = lshr i64 %212, 63
  %229 = trunc i64 %228 to i8
  store i8 %229, i8* %58, align 1, !tbaa !2449
  %230 = lshr i64 %207, 63
  %231 = lshr i64 %211, 63
  %232 = xor i64 %231, %230
  %233 = xor i64 %228, %230
  %234 = add nuw nsw i64 %233, %232
  %235 = icmp eq i64 %234, 2
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %59, align 1, !tbaa !2450
  %237 = icmp ne i8 %229, 0
  %238 = xor i1 %237, %235
  %.v = select i1 %238, i64 14, i64 125
  %239 = add i64 %202, %.v
  store i64 %239, i64* %PC, align 8, !tbaa !2428
  br i1 %238, label %block_404c8b, label %block_404cfa

block_404d32:                                     ; preds = %block_404cfa, %block_404d08
  %240 = phi i64 [ %203, %block_404cfa ], [ %.pre7, %block_404d08 ]
  %241 = phi i64 [ %734, %block_404cfa ], [ %.pre6, %block_404d08 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %242 = add i64 %240, -48
  %243 = add i64 %241, 11
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %242 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = add i64 %245, -1
  %247 = icmp eq i64 %245, 0
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %54, align 1, !tbaa !2432
  %249 = trunc i64 %246 to i32
  %250 = and i32 %249, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #8
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %55, align 1, !tbaa !2446
  %255 = xor i64 %245, %246
  %256 = lshr i64 %255, 4
  %257 = trunc i64 %256 to i8
  %258 = and i8 %257, 1
  store i8 %258, i8* %56, align 1, !tbaa !2447
  %259 = icmp eq i64 %246, 0
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %57, align 1, !tbaa !2448
  %261 = lshr i64 %246, 63
  %262 = trunc i64 %261 to i8
  store i8 %262, i8* %58, align 1, !tbaa !2449
  %263 = lshr i64 %245, 63
  %264 = xor i64 %261, %263
  %265 = add nuw nsw i64 %264, %263
  %266 = icmp eq i64 %265, 2
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %59, align 1, !tbaa !2450
  store i64 %246, i64* %RAX, align 8, !tbaa !2428
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %270 = ashr i64 %246, 63
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %271 = add i64 %241, 23
  store i64 %271, i64* %PC, align 8
  %272 = zext i64 %270 to i128
  %273 = shl nuw i128 %272, 64
  %274 = zext i64 %246 to i128
  %275 = or i128 %273, %274
  %276 = sdiv i128 %275, 2
  %277 = trunc i128 %276 to i64
  %278 = and i128 %276, 18446744073709551615
  %279 = sext i64 %277 to i128
  %280 = and i128 %279, -18446744073709551616
  %281 = or i128 %280, %278
  %282 = icmp eq i128 %276, %281
  br i1 %282, label %285, label %283

; <label>:283:                                    ; preds = %block_404d32
  %284 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %271, %struct.Memory* %MEMORY.1) #9
  %.pre8 = load i64, i64* %RBP, align 8
  %.pre9 = load i64, i64* %RAX, align 8
  %.pre10 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

; <label>:285:                                    ; preds = %block_404d32
  %286 = srem i128 %275, 2
  %287 = trunc i128 %286 to i64
  store i64 %277, i64* %269, align 8, !tbaa !2428
  store i64 %287, i64* %268, align 8, !tbaa !2428
  store i8 0, i8* %54, align 1, !tbaa !2432
  store i8 0, i8* %55, align 1, !tbaa !2446
  store i8 0, i8* %56, align 1, !tbaa !2447
  store i8 0, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %59, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2: ; preds = %285, %283
  %288 = phi i64 [ %.pre10, %283 ], [ %271, %285 ]
  %289 = phi i64 [ %.pre9, %283 ], [ %277, %285 ]
  %290 = phi i64 [ %.pre8, %283 ], [ %240, %285 ]
  %291 = phi %struct.Memory* [ %284, %283 ], [ %MEMORY.1, %285 ]
  %292 = add i64 %290, -40
  %293 = add i64 %288, 4
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  store i64 %289, i64* %294, align 8
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_404d4d

block_404d8e:                                     ; preds = %block_404d7e
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %295 = add i64 %639, -16
  %296 = add i64 %651, 11
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RDX, align 8, !tbaa !2428
  %299 = add i64 %639, -40
  %300 = add i64 %651, 15
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %299 to i64*
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %RSI, align 8, !tbaa !2428
  %303 = shl i64 %302, 3
  %304 = add i64 %303, %298
  %305 = add i64 %651, 20
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %35, align 1, !tbaa !2451
  store double 0.000000e+00, double* %82, align 1, !tbaa !2451
  %308 = add i64 %651, 24
  store i64 %308, i64* %PC, align 8
  %309 = load i64, i64* %297, align 8
  store i64 %309, i64* %RDX, align 8, !tbaa !2428
  %310 = add i64 %639, -48
  %311 = add i64 %651, 28
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %RSI, align 8, !tbaa !2428
  %314 = shl i64 %313, 3
  %315 = add i64 %314, %309
  %316 = add i64 %651, 33
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %315 to i64*
  store i64 %307, i64* %317, align 8
  %318 = load i64, i64* %RBP, align 8
  %319 = add i64 %318, -40
  %320 = load i64, i64* %PC, align 8
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %319 to i64*
  %323 = load i64, i64* %322, align 8
  store i64 %323, i64* %RDX, align 8, !tbaa !2428
  %324 = add i64 %318, -48
  %325 = add i64 %320, 8
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i64*
  store i64 %323, i64* %326, align 8
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -48
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 4
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %328 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = add i64 %332, -1
  %334 = icmp eq i64 %332, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %54, align 1, !tbaa !2432
  %336 = trunc i64 %333 to i32
  %337 = and i32 %336, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #8
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %55, align 1, !tbaa !2446
  %342 = xor i64 %332, %333
  %343 = lshr i64 %342, 4
  %344 = trunc i64 %343 to i8
  %345 = and i8 %344, 1
  store i8 %345, i8* %56, align 1, !tbaa !2447
  %346 = icmp eq i64 %333, 0
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %57, align 1, !tbaa !2448
  %348 = lshr i64 %333, 63
  %349 = trunc i64 %348 to i8
  store i8 %349, i8* %58, align 1, !tbaa !2449
  %350 = lshr i64 %332, 63
  %351 = xor i64 %348, %350
  %352 = add nuw nsw i64 %351, %350
  %353 = icmp eq i64 %352, 2
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %59, align 1, !tbaa !2450
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %355 = ashr i64 %333, 63
  store i64 %355, i64* %268, align 8, !tbaa !2428
  %356 = load i64, i64* %RCX, align 8
  %357 = add i64 %329, 16
  store i64 %357, i64* %PC, align 8
  %358 = sext i64 %356 to i128
  %359 = and i128 %358, -18446744073709551616
  %360 = zext i64 %355 to i128
  %361 = shl nuw i128 %360, 64
  %362 = zext i64 %333 to i128
  %363 = or i128 %361, %362
  %364 = zext i64 %356 to i128
  %365 = or i128 %359, %364
  %366 = sdiv i128 %363, %365
  %367 = trunc i128 %366 to i64
  %368 = and i128 %366, 18446744073709551615
  %369 = sext i64 %367 to i128
  %370 = and i128 %369, -18446744073709551616
  %371 = or i128 %370, %368
  %372 = icmp eq i128 %366, %371
  br i1 %372, label %375, label %373

; <label>:373:                                    ; preds = %block_404d8e
  %374 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %357, %struct.Memory* %MEMORY.4) #9
  %.pre16 = load i64, i64* %RBP, align 8
  %.pre17 = load i64, i64* %RAX, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:375:                                    ; preds = %block_404d8e
  %376 = srem i128 %363, %365
  %377 = trunc i128 %376 to i64
  store i64 %367, i64* %269, align 8, !tbaa !2428
  store i64 %377, i64* %268, align 8, !tbaa !2428
  store i8 0, i8* %54, align 1, !tbaa !2432
  store i8 0, i8* %55, align 1, !tbaa !2446
  store i8 0, i8* %56, align 1, !tbaa !2447
  store i8 0, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %59, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %375, %373
  %378 = phi i64 [ %.pre18, %373 ], [ %357, %375 ]
  %379 = phi i64 [ %.pre17, %373 ], [ %367, %375 ]
  %380 = phi i64 [ %.pre16, %373 ], [ %327, %375 ]
  %381 = phi %struct.Memory* [ %374, %373 ], [ %MEMORY.4, %375 ]
  %382 = add i64 %380, -40
  %383 = add i64 %378, 4
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i64*
  store i64 %379, i64* %384, align 8
  %385 = load i64, i64* %PC, align 8
  %386 = add i64 %385, -126
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  br label %block_404d4d

block_404d4d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2
  %387 = phi i64 [ %.pre11, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ], [ %386, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.3 = phi %struct.Memory* [ %291, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ], [ %381, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %54, align 1, !tbaa !2432
  store i8 1, i8* %55, align 1, !tbaa !2446
  store i8 1, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %59, align 1, !tbaa !2450
  store i8 0, i8* %56, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %388 = load i64, i64* %RBP, align 8
  %389 = add i64 %388, -48
  %390 = add i64 %387, 8
  store i64 %390, i64* %PC, align 8
  %391 = inttoptr i64 %389 to i64*
  %392 = load i64, i64* %391, align 8
  store i64 %392, i64* %RDX, align 8, !tbaa !2428
  %393 = add i64 %388, -24
  %394 = add i64 %387, 12
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %393 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = sub i64 %392, %396
  %398 = icmp ult i64 %392, %396
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %54, align 1, !tbaa !2432
  %400 = trunc i64 %397 to i32
  %401 = and i32 %400, 255
  %402 = tail call i32 @llvm.ctpop.i32(i32 %401) #8
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  store i8 %405, i8* %55, align 1, !tbaa !2446
  %406 = xor i64 %396, %392
  %407 = xor i64 %406, %397
  %408 = lshr i64 %407, 4
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %56, align 1, !tbaa !2447
  %411 = icmp eq i64 %397, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %57, align 1, !tbaa !2448
  %413 = lshr i64 %397, 63
  %414 = trunc i64 %413 to i8
  store i8 %414, i8* %58, align 1, !tbaa !2449
  %415 = lshr i64 %392, 63
  %416 = lshr i64 %396, 63
  %417 = xor i64 %416, %415
  %418 = xor i64 %413, %415
  %419 = add nuw nsw i64 %418, %417
  %420 = icmp eq i64 %419, 2
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %59, align 1, !tbaa !2450
  %422 = add i64 %388, -49
  %423 = add i64 %387, 15
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to i8*
  store i8 0, i8* %424, align 1
  %425 = load i64, i64* %PC, align 8
  %426 = load i8, i8* %57, align 1, !tbaa !2448
  %427 = icmp ne i8 %426, 0
  %428 = load i8, i8* %58, align 1, !tbaa !2449
  %429 = icmp ne i8 %428, 0
  %430 = load i8, i8* %59, align 1, !tbaa !2450
  %431 = icmp ne i8 %430, 0
  %432 = xor i1 %429, %431
  %433 = or i1 %427, %432
  %.v21 = select i1 %433, i64 34, i64 6
  %434 = add i64 %425, %.v21
  store i64 %434, i64* %PC, align 8, !tbaa !2428
  br i1 %433, label %block_404d7e, label %block_404d62

block_404c8b:                                     ; preds = %block_404c7d
  %435 = add i64 %203, -16
  %436 = add i64 %239, 4
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %435 to i64*
  %438 = load i64, i64* %437, align 8
  store i64 %438, i64* %RAX, align 8, !tbaa !2428
  %439 = add i64 %239, 8
  store i64 %439, i64* %PC, align 8
  %440 = load i64, i64* %206, align 8
  %441 = add i64 %440, -1
  store i64 %441, i64* %RCX, align 8, !tbaa !2428
  %442 = icmp eq i64 %440, 0
  %443 = zext i1 %442 to i8
  store i8 %443, i8* %54, align 1, !tbaa !2432
  %444 = trunc i64 %441 to i32
  %445 = and i32 %444, 255
  %446 = tail call i32 @llvm.ctpop.i32(i32 %445) #8
  %447 = trunc i32 %446 to i8
  %448 = and i8 %447, 1
  %449 = xor i8 %448, 1
  store i8 %449, i8* %55, align 1, !tbaa !2446
  %450 = xor i64 %440, %441
  %451 = lshr i64 %450, 4
  %452 = trunc i64 %451 to i8
  %453 = and i8 %452, 1
  store i8 %453, i8* %56, align 1, !tbaa !2447
  %454 = icmp eq i64 %441, 0
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %57, align 1, !tbaa !2448
  %456 = lshr i64 %441, 63
  %457 = trunc i64 %456 to i8
  store i8 %457, i8* %58, align 1, !tbaa !2449
  %458 = lshr i64 %440, 63
  %459 = xor i64 %456, %458
  %460 = add nuw nsw i64 %459, %458
  %461 = icmp eq i64 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %59, align 1, !tbaa !2450
  %463 = shl i64 %441, 3
  %464 = add i64 %463, %438
  %465 = add i64 %239, 17
  store i64 %465, i64* %PC, align 8
  %466 = inttoptr i64 %464 to double*
  %467 = load double, double* %466, align 8
  store double %467, double* %80, align 1, !tbaa !2451
  store double 0.000000e+00, double* %82, align 1, !tbaa !2451
  %468 = add i64 %239, 21
  store i64 %468, i64* %PC, align 8
  %469 = load i64, i64* %437, align 8
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = add i64 %239, 25
  store i64 %470, i64* %PC, align 8
  %471 = load i64, i64* %206, align 8
  store i64 %471, i64* %RCX, align 8, !tbaa !2428
  %472 = shl i64 %471, 3
  %473 = add i64 %472, %469
  %474 = add i64 %239, 30
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %473 to double*
  %476 = load double, double* %475, align 8
  store double %476, double* %83, align 1, !tbaa !2451
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %477 = add i64 %239, 34
  store i64 %477, i64* %PC, align 8
  %478 = fcmp uno double %476, %467
  br i1 %478, label %479, label %489

; <label>:479:                                    ; preds = %block_404c8b
  %480 = fadd double %476, %467
  %481 = bitcast double %480 to i64
  %482 = and i64 %481, 9221120237041090560
  %483 = icmp eq i64 %482, 9218868437227405312
  %484 = and i64 %481, 2251799813685247
  %485 = icmp ne i64 %484, 0
  %486 = and i1 %483, %485
  br i1 %486, label %487, label %495

; <label>:487:                                    ; preds = %479
  %488 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %477, %struct.Memory* %MEMORY.1) #9
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i8, i8* %54, align 1, !tbaa !2432
  %.pre4 = load i8, i8* %57, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:489:                                    ; preds = %block_404c8b
  %490 = fcmp ogt double %476, %467
  br i1 %490, label %495, label %491

; <label>:491:                                    ; preds = %489
  %492 = fcmp olt double %476, %467
  br i1 %492, label %495, label %493

; <label>:493:                                    ; preds = %491
  %494 = fcmp oeq double %476, %467
  br i1 %494, label %495, label %499

; <label>:495:                                    ; preds = %493, %491, %489, %479
  %496 = phi i8 [ 0, %489 ], [ 0, %491 ], [ 1, %493 ], [ 1, %479 ]
  %497 = phi i8 [ 0, %489 ], [ 0, %491 ], [ 0, %493 ], [ 1, %479 ]
  %498 = phi i8 [ 0, %489 ], [ 1, %491 ], [ 0, %493 ], [ 1, %479 ]
  store i8 %496, i8* %57, align 1, !tbaa !2453
  store i8 %497, i8* %55, align 1, !tbaa !2453
  store i8 %498, i8* %54, align 1, !tbaa !2453
  br label %499

; <label>:499:                                    ; preds = %495, %493
  %500 = phi i8 [ %496, %495 ], [ %455, %493 ]
  %501 = phi i8 [ %498, %495 ], [ %443, %493 ]
  store i8 0, i8* %59, align 1, !tbaa !2453
  store i8 0, i8* %58, align 1, !tbaa !2453
  store i8 0, i8* %56, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %499, %487
  %502 = phi i8 [ %.pre4, %487 ], [ %500, %499 ]
  %503 = phi i8 [ %.pre3, %487 ], [ %501, %499 ]
  %504 = phi i64 [ %.pre2, %487 ], [ %477, %499 ]
  %505 = phi %struct.Memory* [ %488, %487 ], [ %MEMORY.1, %499 ]
  %506 = or i8 %502, %503
  %507 = icmp ne i8 %506, 0
  %.v19 = select i1 %507, i64 18, i64 6
  %508 = add i64 %504, %.v19
  store i64 %508, i64* %PC, align 8, !tbaa !2428
  br i1 %507, label %block_404cbf, label %block_404cb3

block_404d89:                                     ; preds = %block_404d7e
  %509 = add i64 %639, -32
  %510 = add i64 %651, 76
  store i64 %510, i64* %PC, align 8
  %511 = inttoptr i64 %509 to i64*
  %512 = load i64, i64* %511, align 8
  store i64 %512, i64* %35, align 1, !tbaa !2451
  store double 0.000000e+00, double* %82, align 1, !tbaa !2451
  %513 = add i64 %639, -16
  %514 = add i64 %651, 80
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to i64*
  %516 = load i64, i64* %515, align 8
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = add i64 %639, -48
  %518 = add i64 %651, 84
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %517 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %RCX, align 8, !tbaa !2428
  %521 = shl i64 %520, 3
  %522 = add i64 %521, %516
  %523 = add i64 %651, 89
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %522 to i64*
  store i64 %512, i64* %524, align 8
  %525 = load i64, i64* %PC, align 8
  %526 = add i64 %525, 1
  store i64 %526, i64* %PC, align 8
  %527 = load i64, i64* %10, align 8, !tbaa !2428
  %528 = add i64 %527, 8
  %529 = inttoptr i64 %527 to i64*
  %530 = load i64, i64* %529, align 8
  store i64 %530, i64* %RBP, align 8, !tbaa !2428
  store i64 %528, i64* %10, align 8, !tbaa !2428
  %531 = add i64 %525, 2
  store i64 %531, i64* %PC, align 8
  %532 = inttoptr i64 %528 to i64*
  %533 = load i64, i64* %532, align 8
  store i64 %533, i64* %PC, align 8, !tbaa !2428
  %534 = add i64 %527, 16
  store i64 %534, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_404cb3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %535 = load i64, i64* %RBP, align 8
  %536 = add i64 %535, -40
  %537 = add i64 %508, 4
  store i64 %537, i64* %PC, align 8
  %538 = inttoptr i64 %536 to i64*
  %539 = load i64, i64* %538, align 8
  %540 = add i64 %539, 1
  store i64 %540, i64* %RAX, align 8, !tbaa !2428
  %541 = icmp eq i64 %539, -1
  %542 = icmp eq i64 %540, 0
  %543 = or i1 %541, %542
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %54, align 1, !tbaa !2432
  %545 = trunc i64 %540 to i32
  %546 = and i32 %545, 255
  %547 = tail call i32 @llvm.ctpop.i32(i32 %546) #8
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  store i8 %550, i8* %55, align 1, !tbaa !2446
  %551 = xor i64 %539, %540
  %552 = lshr i64 %551, 4
  %553 = trunc i64 %552 to i8
  %554 = and i8 %553, 1
  store i8 %554, i8* %56, align 1, !tbaa !2447
  %555 = zext i1 %542 to i8
  store i8 %555, i8* %57, align 1, !tbaa !2448
  %556 = lshr i64 %540, 63
  %557 = trunc i64 %556 to i8
  store i8 %557, i8* %58, align 1, !tbaa !2449
  %558 = lshr i64 %539, 63
  %559 = xor i64 %556, %558
  %560 = add nuw nsw i64 %559, %556
  %561 = icmp eq i64 %560, 2
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %59, align 1, !tbaa !2450
  %563 = add i64 %508, 12
  store i64 %563, i64* %PC, align 8
  store i64 %540, i64* %538, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_404cbf

block_404d08:                                     ; preds = %block_404cfa
  %564 = add i64 %203, -16
  %565 = add i64 %734, 4
  store i64 %565, i64* %PC, align 8
  %566 = inttoptr i64 %564 to i64*
  %567 = load i64, i64* %566, align 8
  store i64 %567, i64* %RAX, align 8, !tbaa !2428
  %568 = add i64 %734, 8
  store i64 %568, i64* %PC, align 8
  %569 = load i64, i64* %206, align 8
  %570 = add i64 %569, -1
  store i64 %570, i64* %RCX, align 8, !tbaa !2428
  %571 = icmp eq i64 %569, 0
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %54, align 1, !tbaa !2432
  %573 = trunc i64 %570 to i32
  %574 = and i32 %573, 255
  %575 = tail call i32 @llvm.ctpop.i32(i32 %574) #8
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  store i8 %578, i8* %55, align 1, !tbaa !2446
  %579 = xor i64 %569, %570
  %580 = lshr i64 %579, 4
  %581 = trunc i64 %580 to i8
  %582 = and i8 %581, 1
  store i8 %582, i8* %56, align 1, !tbaa !2447
  %583 = icmp eq i64 %570, 0
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %57, align 1, !tbaa !2448
  %585 = lshr i64 %570, 63
  %586 = trunc i64 %585 to i8
  store i8 %586, i8* %58, align 1, !tbaa !2449
  %587 = lshr i64 %569, 63
  %588 = xor i64 %585, %587
  %589 = add nuw nsw i64 %588, %587
  %590 = icmp eq i64 %589, 2
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %59, align 1, !tbaa !2450
  %592 = shl i64 %570, 3
  %593 = add i64 %592, %567
  %594 = add i64 %734, 17
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i64*
  %596 = load i64, i64* %595, align 8
  store i64 %596, i64* %35, align 1, !tbaa !2451
  store double 0.000000e+00, double* %82, align 1, !tbaa !2451
  %597 = add i64 %734, 21
  store i64 %597, i64* %PC, align 8
  %598 = load i64, i64* %566, align 8
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = add i64 %203, -48
  %600 = add i64 %734, 25
  store i64 %600, i64* %PC, align 8
  %601 = inttoptr i64 %599 to i64*
  %602 = load i64, i64* %601, align 8
  store i64 %602, i64* %RCX, align 8, !tbaa !2428
  %603 = shl i64 %602, 3
  %604 = add i64 %603, %598
  %605 = add i64 %734, 30
  store i64 %605, i64* %PC, align 8
  %606 = inttoptr i64 %604 to i64*
  store i64 %596, i64* %606, align 8
  %607 = load i64, i64* %RBP, align 8
  %608 = add i64 %607, -40
  %609 = load i64, i64* %PC, align 8
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %608 to i64*
  %612 = load i64, i64* %611, align 8
  %613 = add i64 %612, -1
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = icmp eq i64 %612, 0
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %54, align 1, !tbaa !2432
  %616 = trunc i64 %613 to i32
  %617 = and i32 %616, 255
  %618 = tail call i32 @llvm.ctpop.i32(i32 %617) #8
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  store i8 %621, i8* %55, align 1, !tbaa !2446
  %622 = xor i64 %612, %613
  %623 = lshr i64 %622, 4
  %624 = trunc i64 %623 to i8
  %625 = and i8 %624, 1
  store i8 %625, i8* %56, align 1, !tbaa !2447
  %626 = icmp eq i64 %613, 0
  %627 = zext i1 %626 to i8
  store i8 %627, i8* %57, align 1, !tbaa !2448
  %628 = lshr i64 %613, 63
  %629 = trunc i64 %628 to i8
  store i8 %629, i8* %58, align 1, !tbaa !2449
  %630 = lshr i64 %612, 63
  %631 = xor i64 %628, %630
  %632 = add nuw nsw i64 %631, %630
  %633 = icmp eq i64 %632, 2
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %59, align 1, !tbaa !2450
  %635 = add i64 %607, -48
  %636 = add i64 %609, 12
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %635 to i64*
  store i64 %613, i64* %637, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %block_404d32

block_404d7e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_404d4d
  %638 = phi i64 [ %434, %block_404d4d ], [ %.pre15, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_404d4d ], [ %697, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %639 = load i64, i64* %RBP, align 8
  %640 = add i64 %639, -49
  %641 = add i64 %638, 3
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i8*
  %643 = load i8, i8* %642, align 1
  store i8 %643, i8* %AL, align 1, !tbaa !2453
  %644 = and i8 %643, 1
  store i8 0, i8* %54, align 1, !tbaa !2432
  %645 = zext i8 %644 to i32
  %646 = tail call i32 @llvm.ctpop.i32(i32 %645) #8
  %647 = trunc i32 %646 to i8
  %648 = xor i8 %647, 1
  store i8 %648, i8* %55, align 1, !tbaa !2446
  %649 = xor i8 %644, 1
  store i8 %649, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %58, align 1, !tbaa !2449
  store i8 0, i8* %59, align 1, !tbaa !2450
  store i8 0, i8* %56, align 1, !tbaa !2447
  %650 = icmp eq i8 %649, 0
  %.v22 = select i1 %650, i64 16, i64 11
  %651 = add i64 %638, %.v22
  store i64 %651, i64* %PC, align 8, !tbaa !2428
  br i1 %650, label %block_404d8e, label %block_404d89

block_404d62:                                     ; preds = %block_404d4d
  %652 = load i64, i64* %RBP, align 8
  %653 = add i64 %652, -16
  %654 = add i64 %434, 4
  store i64 %654, i64* %PC, align 8
  %655 = inttoptr i64 %653 to i64*
  %656 = load i64, i64* %655, align 8
  store i64 %656, i64* %RAX, align 8, !tbaa !2428
  %657 = add i64 %652, -40
  %658 = add i64 %434, 8
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %657 to i64*
  %660 = load i64, i64* %659, align 8
  store i64 %660, i64* %RCX, align 8, !tbaa !2428
  %661 = shl i64 %660, 3
  %662 = add i64 %661, %656
  %663 = add i64 %434, 13
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to double*
  %665 = load double, double* %664, align 8
  store double %665, double* %80, align 1, !tbaa !2451
  store double 0.000000e+00, double* %82, align 1, !tbaa !2451
  %666 = add i64 %652, -32
  %667 = add i64 %434, 18
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to double*
  %669 = load double, double* %668, align 8
  store double %669, double* %83, align 1, !tbaa !2451
  store double 0.000000e+00, double* %85, align 1, !tbaa !2451
  %670 = add i64 %434, 22
  store i64 %670, i64* %PC, align 8
  %671 = fcmp uno double %669, %665
  br i1 %671, label %672, label %682

; <label>:672:                                    ; preds = %block_404d62
  %673 = fadd double %669, %665
  %674 = bitcast double %673 to i64
  %675 = and i64 %674, 9221120237041090560
  %676 = icmp eq i64 %675, 9218868437227405312
  %677 = and i64 %674, 2251799813685247
  %678 = icmp ne i64 %677, 0
  %679 = and i1 %676, %678
  br i1 %679, label %680, label %688

; <label>:680:                                    ; preds = %672
  %681 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %670, %struct.Memory* %MEMORY.3) #9
  %.pre12 = load i64, i64* %PC, align 8
  %.pre13 = load i8, i8* %57, align 1, !tbaa !2448
  %.pre14 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:682:                                    ; preds = %block_404d62
  %683 = fcmp ogt double %669, %665
  br i1 %683, label %688, label %684

; <label>:684:                                    ; preds = %682
  %685 = fcmp olt double %669, %665
  br i1 %685, label %688, label %686

; <label>:686:                                    ; preds = %684
  %687 = fcmp oeq double %669, %665
  br i1 %687, label %688, label %692

; <label>:688:                                    ; preds = %686, %684, %682, %672
  %689 = phi i8 [ 0, %682 ], [ 0, %684 ], [ 1, %686 ], [ 1, %672 ]
  %690 = phi i8 [ 0, %682 ], [ 0, %684 ], [ 0, %686 ], [ 1, %672 ]
  %691 = phi i8 [ 0, %682 ], [ 1, %684 ], [ 0, %686 ], [ 1, %672 ]
  store i8 %689, i8* %57, align 1, !tbaa !2453
  store i8 %690, i8* %55, align 1, !tbaa !2453
  store i8 %691, i8* %54, align 1, !tbaa !2453
  br label %692

; <label>:692:                                    ; preds = %688, %686
  %693 = phi i8 [ %689, %688 ], [ 0, %686 ]
  store i8 0, i8* %59, align 1, !tbaa !2453
  store i8 0, i8* %58, align 1, !tbaa !2453
  store i8 0, i8* %56, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %692, %680
  %694 = phi i64 [ %.pre14, %680 ], [ %652, %692 ]
  %695 = phi i8 [ %.pre13, %680 ], [ %693, %692 ]
  %696 = phi i64 [ %.pre12, %680 ], [ %670, %692 ]
  %697 = phi %struct.Memory* [ %681, %680 ], [ %MEMORY.3, %692 ]
  %698 = load i8, i8* %54, align 1, !tbaa !2432
  %699 = or i8 %695, %698
  %700 = icmp eq i8 %699, 0
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %DL, align 1, !tbaa !2453
  %702 = add i64 %694, -49
  %703 = add i64 %696, 6
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %702 to i8*
  store i8 %701, i8* %704, align 1
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_404d7e

block_404cfa:                                     ; preds = %block_404c7d
  %705 = add i64 %239, 4
  store i64 %705, i64* %PC, align 8
  %706 = load i64, i64* %206, align 8
  store i64 %706, i64* %RAX, align 8, !tbaa !2428
  %707 = add i64 %239, 8
  store i64 %707, i64* %PC, align 8
  %708 = load i64, i64* %210, align 8
  %709 = sub i64 %706, %708
  %710 = icmp ult i64 %706, %708
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %54, align 1, !tbaa !2432
  %712 = trunc i64 %709 to i32
  %713 = and i32 %712, 255
  %714 = tail call i32 @llvm.ctpop.i32(i32 %713) #8
  %715 = trunc i32 %714 to i8
  %716 = and i8 %715, 1
  %717 = xor i8 %716, 1
  store i8 %717, i8* %55, align 1, !tbaa !2446
  %718 = xor i64 %708, %706
  %719 = xor i64 %718, %709
  %720 = lshr i64 %719, 4
  %721 = trunc i64 %720 to i8
  %722 = and i8 %721, 1
  store i8 %722, i8* %56, align 1, !tbaa !2447
  %723 = icmp eq i64 %709, 0
  %724 = zext i1 %723 to i8
  store i8 %724, i8* %57, align 1, !tbaa !2448
  %725 = lshr i64 %709, 63
  %726 = trunc i64 %725 to i8
  store i8 %726, i8* %58, align 1, !tbaa !2449
  %727 = lshr i64 %706, 63
  %728 = lshr i64 %708, 63
  %729 = xor i64 %728, %727
  %730 = xor i64 %725, %727
  %731 = add nuw nsw i64 %730, %729
  %732 = icmp eq i64 %731, 2
  %733 = zext i1 %732 to i8
  store i8 %733, i8* %59, align 1, !tbaa !2450
  %.v20 = select i1 %723, i64 14, i64 56
  %734 = add i64 %239, %.v20
  store i64 %734, i64* %PC, align 8, !tbaa !2428
  br i1 %723, label %block_404d08, label %block_404d32
}

; Function Attrs: noinline
define %struct.Memory* @sub_4032c0__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4032c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -184
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 176
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RSI, align 8
  %42 = add i64 %10, 14
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 5
  store i64 %47, i64* %PC, align 8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %49 = load i64, i64* %48, align 1
  %50 = inttoptr i64 %45 to i64*
  store i64 %49, i64* %50, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -24
  %53 = load i64, i64* %RDI, align 8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -32
  %59 = load i64, i64* %RDX, align 8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62, align 8
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -32
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RDX, align 8, !tbaa !2428
  %69 = add i64 %63, -48
  %70 = add i64 %65, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -48
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = add i64 %77, 1
  %79 = shl i64 %78, 1
  %80 = icmp slt i64 %78, 0
  %81 = icmp slt i64 %79, 0
  %82 = xor i1 %80, %81
  store i64 %79, i64* %RDX, align 8, !tbaa !2428
  %.lobit = lshr i64 %78, 63
  %83 = trunc i64 %.lobit to i8
  store i8 %83, i8* %14, align 1, !tbaa !2453
  %84 = trunc i64 %79 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #8
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %27, align 1, !tbaa !2453
  %90 = icmp eq i64 %79, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %30, align 1, !tbaa !2453
  %92 = lshr i64 %78, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %33, align 1, !tbaa !2453
  %95 = zext i1 %82 to i8
  store i8 %95, i8* %39, align 1, !tbaa !2453
  %96 = add i64 %72, -40
  %97 = add i64 %74, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %79, i64* %98, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4032f4

block_4033d8:                                     ; preds = %block_4032f4
  %99 = add i64 %301, 4
  store i64 %99, i64* %PC, align 8
  %100 = load i64, i64* %268, align 8
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = add i64 %301, 8
  store i64 %101, i64* %PC, align 8
  %102 = load i64, i64* %272, align 8
  %103 = sub i64 %100, %102
  %104 = icmp ult i64 %100, %102
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %14, align 1, !tbaa !2432
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = tail call i32 @llvm.ctpop.i32(i32 %107) #8
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %21, align 1, !tbaa !2446
  %112 = xor i64 %102, %100
  %113 = xor i64 %112, %103
  %114 = lshr i64 %113, 4
  %115 = trunc i64 %114 to i8
  %116 = and i8 %115, 1
  store i8 %116, i8* %27, align 1, !tbaa !2447
  %117 = icmp eq i64 %103, 0
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %30, align 1, !tbaa !2448
  %119 = lshr i64 %103, 63
  %120 = trunc i64 %119 to i8
  store i8 %120, i8* %33, align 1, !tbaa !2449
  %121 = lshr i64 %100, 63
  %122 = lshr i64 %102, 63
  %123 = xor i64 %122, %121
  %124 = xor i64 %119, %121
  %125 = add nuw nsw i64 %124, %123
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %39, align 1, !tbaa !2450
  %.v13 = select i1 %117, i64 14, i64 105
  %128 = add i64 %301, %.v13
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  br i1 %117, label %block_4033e6, label %block_403441

block_4034b3:                                     ; preds = %block_4034a0
  %129 = add i64 %577, -40
  %130 = add i64 %589, 8
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RSI, align 8, !tbaa !2428
  %133 = add i64 %589, -547
  %134 = add i64 %589, 13
  %135 = load i64, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %135, -8
  %137 = inttoptr i64 %136 to i64*
  store i64 %134, i64* %137, align 8
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %138 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %133, %struct.Memory* %MEMORY.3)
  %139 = load i64, i64* %RBP, align 8
  %140 = add i64 %139, -112
  %141 = load i64, i64* %PC, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %142 = load i64, i64* %RAX, align 8
  %143 = add i64 %141, 8
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %140 to i64*
  store i64 %142, i64* %144, align 8
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, -1160
  %147 = add i64 %145, 5
  %148 = load i64, i64* %RSP, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150, align 8
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %151 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %146, %struct.Memory* %138)
  %152 = load i64, i64* %RBP, align 8
  %153 = add i64 %152, -8
  %154 = load i64, i64* %PC, align 8
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %152, -48
  %156 = add i64 %154, 8
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %155 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RSI, align 8, !tbaa !2428
  %159 = add i64 %152, -168
  %160 = load i64, i64* %RAX, align 8
  %161 = add i64 %154, 15
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %162, align 8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, -588
  %165 = add i64 %163, 5
  %166 = load i64, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %168, align 8
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  %169 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %164, %struct.Memory* %151)
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -120
  %172 = load i64, i64* %PC, align 8
  store i64 %171, i64* %RDI, align 8, !tbaa !2428
  %173 = load i64, i64* %RAX, align 8
  %174 = add i64 %172, 8
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  store i64 %173, i64* %175, align 8
  %176 = load i64, i64* %PC, align 8
  %177 = add i64 %176, -1193
  %178 = add i64 %176, 5
  %179 = load i64, i64* %RSP, align 8, !tbaa !2428
  %180 = add i64 %179, -8
  %181 = inttoptr i64 %180 to i64*
  store i64 %178, i64* %181, align 8
  store i64 %180, i64* %RSP, align 8, !tbaa !2428
  store i64 %177, i64* %PC, align 8, !tbaa !2428
  %182 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %177, %struct.Memory* %169)
  %183 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %184 = load i64, i64* %RBP, align 8
  %185 = add i64 %184, -168
  %186 = add i64 %183, 14
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %185 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RDI, align 8, !tbaa !2428
  %189 = add i64 %183, 17
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %RDX, align 8, !tbaa !2428
  %192 = bitcast %union.anon* %3 to i64**
  %193 = load i64*, i64** %192, align 8
  %194 = add i64 %183, 20
  store i64 %194, i64* %PC, align 8
  store i64 %191, i64* %193, align 8
  %195 = load i64, i64* %RBP, align 8
  %196 = add i64 %195, -40
  %197 = load i64, i64* %PC, align 8
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %196 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = add i64 %195, -48
  %202 = add i64 %197, 8
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  store i64 %200, i64* %203, align 8
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -48
  %206 = load i64, i64* %PC, align 8
  %207 = add i64 %206, 4
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %205 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = add i64 %209, -1
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = icmp eq i64 %209, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %14, align 1, !tbaa !2432
  %213 = trunc i64 %210 to i32
  %214 = and i32 %213, 255
  %215 = tail call i32 @llvm.ctpop.i32(i32 %214) #8
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  store i8 %218, i8* %21, align 1, !tbaa !2446
  %219 = xor i64 %209, %210
  %220 = lshr i64 %219, 4
  %221 = trunc i64 %220 to i8
  %222 = and i8 %221, 1
  store i8 %222, i8* %27, align 1, !tbaa !2447
  %223 = icmp eq i64 %210, 0
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %30, align 1, !tbaa !2448
  %225 = lshr i64 %210, 63
  %226 = trunc i64 %225 to i8
  store i8 %226, i8* %33, align 1, !tbaa !2449
  %227 = lshr i64 %209, 63
  %228 = xor i64 %225, %227
  %229 = add nuw nsw i64 %228, %227
  %230 = icmp eq i64 %229, 2
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %39, align 1, !tbaa !2450
  %232 = ashr i64 %210, 63
  store i64 %232, i64* %RDX, align 8, !tbaa !2428
  %233 = load i64, i64* %RSI, align 8
  %234 = add i64 %206, 13
  store i64 %234, i64* %PC, align 8
  %235 = sext i64 %233 to i128
  %236 = and i128 %235, -18446744073709551616
  %237 = zext i64 %232 to i128
  %238 = shl nuw i128 %237, 64
  %239 = zext i64 %210 to i128
  %240 = or i128 %238, %239
  %241 = zext i64 %233 to i128
  %242 = or i128 %236, %241
  %243 = sdiv i128 %240, %242
  %244 = trunc i128 %243 to i64
  %245 = and i128 %243, 18446744073709551615
  %246 = sext i64 %244 to i128
  %247 = and i128 %246, -18446744073709551616
  %248 = or i128 %247, %245
  %249 = icmp eq i128 %243, %248
  br i1 %249, label %252, label %250

; <label>:250:                                    ; preds = %block_4034b3
  %251 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %234, %struct.Memory* %182) #9
  %.pre9 = load i64, i64* %RBP, align 8
  %.pre10 = load i64, i64* %RAX, align 8
  %.pre11 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:252:                                    ; preds = %block_4034b3
  %253 = srem i128 %240, %242
  %254 = trunc i128 %253 to i64
  store i64 %244, i64* %660, align 8, !tbaa !2428
  store i64 %254, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %252, %250
  %255 = phi i64 [ %.pre11, %250 ], [ %234, %252 ]
  %256 = phi i64 [ %.pre10, %250 ], [ %244, %252 ]
  %257 = phi i64 [ %.pre9, %250 ], [ %204, %252 ]
  %258 = phi %struct.Memory* [ %251, %250 ], [ %182, %252 ]
  %259 = add i64 %257, -40
  %260 = add i64 %255, 4
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i64*
  store i64 %256, i64* %261, align 8
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, -191
  store i64 %263, i64* %PC, align 8, !tbaa !2428
  br label %block_40345c

block_4032f4:                                     ; preds = %block_40336c, %block_4032c0
  %264 = phi i64 [ %.pre, %block_4032c0 ], [ %527, %block_40336c ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4032c0 ], [ %446, %block_40336c ]
  %265 = load i64, i64* %RBP, align 8
  %266 = add i64 %265, -40
  %267 = add i64 %264, 4
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268, align 8
  store i64 %269, i64* %RAX, align 8, !tbaa !2428
  %270 = add i64 %265, -24
  %271 = add i64 %264, 8
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = sub i64 %269, %273
  %275 = icmp ult i64 %269, %273
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %14, align 1, !tbaa !2432
  %277 = trunc i64 %274 to i32
  %278 = and i32 %277, 255
  %279 = tail call i32 @llvm.ctpop.i32(i32 %278) #8
  %280 = trunc i32 %279 to i8
  %281 = and i8 %280, 1
  %282 = xor i8 %281, 1
  store i8 %282, i8* %21, align 1, !tbaa !2446
  %283 = xor i64 %273, %269
  %284 = xor i64 %283, %274
  %285 = lshr i64 %284, 4
  %286 = trunc i64 %285 to i8
  %287 = and i8 %286, 1
  store i8 %287, i8* %27, align 1, !tbaa !2447
  %288 = icmp eq i64 %274, 0
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %30, align 1, !tbaa !2448
  %290 = lshr i64 %274, 63
  %291 = trunc i64 %290 to i8
  store i8 %291, i8* %33, align 1, !tbaa !2449
  %292 = lshr i64 %269, 63
  %293 = lshr i64 %273, 63
  %294 = xor i64 %293, %292
  %295 = xor i64 %290, %292
  %296 = add nuw nsw i64 %295, %294
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %39, align 1, !tbaa !2450
  %299 = icmp ne i8 %291, 0
  %300 = xor i1 %299, %297
  %.v = select i1 %300, i64 14, i64 228
  %301 = add i64 %264, %.v
  store i64 %301, i64* %PC, align 8, !tbaa !2428
  br i1 %300, label %block_403302, label %block_4033d8

block_4034ae:                                     ; preds = %block_4034a0
  %302 = add i64 %577, -48
  %303 = add i64 %589, 122
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %RSI, align 8, !tbaa !2428
  %306 = add i64 %589, -542
  %307 = add i64 %589, 127
  %308 = load i64, i64* %RSP, align 8, !tbaa !2428
  %309 = add i64 %308, -8
  %310 = inttoptr i64 %309 to i64*
  store i64 %307, i64* %310, align 8
  store i64 %309, i64* %RSP, align 8, !tbaa !2428
  store i64 %306, i64* %PC, align 8, !tbaa !2428
  %311 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %306, %struct.Memory* %MEMORY.3)
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -128
  %314 = load i64, i64* %PC, align 8
  store i64 %313, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RAX, align 8
  %316 = add i64 %314, 8
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %313 to i64*
  store i64 %315, i64* %317, align 8
  %318 = load i64, i64* %PC, align 8
  %319 = add i64 %318, -1269
  %320 = add i64 %318, 5
  %321 = load i64, i64* %RSP, align 8, !tbaa !2428
  %322 = add i64 %321, -8
  %323 = inttoptr i64 %322 to i64*
  store i64 %320, i64* %323, align 8
  store i64 %322, i64* %RSP, align 8, !tbaa !2428
  store i64 %319, i64* %PC, align 8, !tbaa !2428
  %324 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %319, %struct.Memory* %311)
  %325 = load i64, i64* %RBP, align 8
  %326 = add i64 %325, -16
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %326 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %RSI, align 8, !tbaa !2428
  %331 = bitcast %union.anon* %3 to i64**
  %332 = load i64*, i64** %331, align 8
  %333 = add i64 %327, 7
  store i64 %333, i64* %PC, align 8
  store i64 %330, i64* %332, align 8
  %334 = load i64, i64* %RSP, align 8
  %335 = load i64, i64* %PC, align 8
  %336 = add i64 %334, 176
  store i64 %336, i64* %RSP, align 8, !tbaa !2428
  %337 = icmp ugt i64 %334, -177
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %14, align 1, !tbaa !2432
  %339 = trunc i64 %336 to i32
  %340 = and i32 %339, 255
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340) #8
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  store i8 %344, i8* %21, align 1, !tbaa !2446
  %345 = xor i64 %334, 16
  %346 = xor i64 %345, %336
  %347 = lshr i64 %346, 4
  %348 = trunc i64 %347 to i8
  %349 = and i8 %348, 1
  store i8 %349, i8* %27, align 1, !tbaa !2447
  %350 = icmp eq i64 %336, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %30, align 1, !tbaa !2448
  %352 = lshr i64 %336, 63
  %353 = trunc i64 %352 to i8
  store i8 %353, i8* %33, align 1, !tbaa !2449
  %354 = lshr i64 %334, 63
  %355 = xor i64 %352, %354
  %356 = add nuw nsw i64 %355, %352
  %357 = icmp eq i64 %356, 2
  %358 = zext i1 %357 to i8
  store i8 %358, i8* %39, align 1, !tbaa !2450
  %359 = add i64 %335, 8
  store i64 %359, i64* %PC, align 8
  %360 = add i64 %334, 184
  %361 = inttoptr i64 %336 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RBP, align 8, !tbaa !2428
  store i64 %360, i64* %RSP, align 8, !tbaa !2428
  %363 = add i64 %335, 9
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %360 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %PC, align 8, !tbaa !2428
  %366 = add i64 %334, 192
  store i64 %366, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %324

block_40335b:                                     ; preds = %block_403302
  %367 = add i64 %901, 17
  store i64 %367, i64* %PC, align 8, !tbaa !2428
  br label %block_40336c

block_40336c:                                     ; preds = %block_403360, %block_40335b
  %368 = phi i64 [ %.pre1, %block_403360 ], [ %367, %block_40335b ]
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -8
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = add i64 %369, -40
  %372 = add i64 %368, 8
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = add i64 %374, -1
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = icmp eq i64 %374, 0
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %14, align 1, !tbaa !2432
  %378 = trunc i64 %375 to i32
  %379 = and i32 %378, 255
  %380 = tail call i32 @llvm.ctpop.i32(i32 %379) #8
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  store i8 %383, i8* %21, align 1, !tbaa !2446
  %384 = xor i64 %374, %375
  %385 = lshr i64 %384, 4
  %386 = trunc i64 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %27, align 1, !tbaa !2447
  %388 = icmp eq i64 %375, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %30, align 1, !tbaa !2448
  %390 = lshr i64 %375, 63
  %391 = trunc i64 %390 to i8
  store i8 %391, i8* %33, align 1, !tbaa !2449
  %392 = lshr i64 %374, 63
  %393 = xor i64 %390, %392
  %394 = add nuw nsw i64 %393, %392
  %395 = icmp eq i64 %394, 2
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %39, align 1, !tbaa !2450
  store i64 %375, i64* %RSI, align 8, !tbaa !2428
  %397 = add i64 %368, -220
  %398 = add i64 %368, 20
  %399 = load i64, i64* %RSP, align 8, !tbaa !2428
  %400 = add i64 %399, -8
  %401 = inttoptr i64 %400 to i64*
  store i64 %398, i64* %401, align 8
  store i64 %400, i64* %RSP, align 8, !tbaa !2428
  store i64 %397, i64* %PC, align 8, !tbaa !2428
  %402 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %397, %struct.Memory* %891)
  %403 = load i64, i64* %RBP, align 8
  %404 = add i64 %403, -72
  %405 = load i64, i64* %PC, align 8
  store i64 %404, i64* %RDI, align 8, !tbaa !2428
  %406 = load i64, i64* %RAX, align 8
  %407 = add i64 %405, 8
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %404 to i64*
  store i64 %406, i64* %408, align 8
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, -840
  %411 = add i64 %409, 5
  %412 = load i64, i64* %RSP, align 8, !tbaa !2428
  %413 = add i64 %412, -8
  %414 = inttoptr i64 %413 to i64*
  store i64 %411, i64* %414, align 8
  store i64 %413, i64* %RSP, align 8, !tbaa !2428
  store i64 %410, i64* %PC, align 8, !tbaa !2428
  %415 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %410, %struct.Memory* %402)
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -8
  %418 = load i64, i64* %PC, align 8
  store i64 %417, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %416, -48
  %420 = add i64 %418, 8
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i64*
  %422 = load i64, i64* %421, align 8
  store i64 %422, i64* %RSI, align 8, !tbaa !2428
  %423 = add i64 %416, -144
  %424 = load i64, i64* %RAX, align 8
  %425 = add i64 %418, 15
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %423 to i64*
  store i64 %424, i64* %426, align 8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, -268
  %429 = add i64 %427, 5
  %430 = load i64, i64* %RSP, align 8, !tbaa !2428
  %431 = add i64 %430, -8
  %432 = inttoptr i64 %431 to i64*
  store i64 %429, i64* %432, align 8
  store i64 %431, i64* %RSP, align 8, !tbaa !2428
  store i64 %428, i64* %PC, align 8, !tbaa !2428
  %433 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %428, %struct.Memory* %415)
  %434 = load i64, i64* %RBP, align 8
  %435 = add i64 %434, -80
  %436 = load i64, i64* %PC, align 8
  store i64 %435, i64* %RDI, align 8, !tbaa !2428
  %437 = load i64, i64* %RAX, align 8
  %438 = add i64 %436, 8
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %435 to i64*
  store i64 %437, i64* %439, align 8
  %440 = load i64, i64* %PC, align 8
  %441 = add i64 %440, -873
  %442 = add i64 %440, 5
  %443 = load i64, i64* %RSP, align 8, !tbaa !2428
  %444 = add i64 %443, -8
  %445 = inttoptr i64 %444 to i64*
  store i64 %442, i64* %445, align 8
  store i64 %444, i64* %RSP, align 8, !tbaa !2428
  store i64 %441, i64* %PC, align 8, !tbaa !2428
  %446 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %441, %struct.Memory* %433)
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -144
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, 7
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %448 to i64*
  %452 = load i64, i64* %451, align 8
  store i64 %452, i64* %RSI, align 8, !tbaa !2428
  %453 = add i64 %449, 10
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %452 to i64*
  %455 = load i64, i64* %454, align 8
  store i64 %455, i64* %RDI, align 8, !tbaa !2428
  %456 = bitcast %union.anon* %3 to i64**
  %457 = load i64*, i64** %456, align 8
  %458 = add i64 %449, 13
  store i64 %458, i64* %PC, align 8
  store i64 %455, i64* %457, align 8
  %459 = load i64, i64* %RBP, align 8
  %460 = add i64 %459, -40
  %461 = load i64, i64* %PC, align 8
  %462 = add i64 %461, 4
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %460 to i64*
  %464 = load i64, i64* %463, align 8
  %465 = add i64 %464, -1
  store i64 %465, i64* %RAX, align 8, !tbaa !2428
  %466 = icmp eq i64 %464, 0
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %14, align 1, !tbaa !2432
  %468 = trunc i64 %465 to i32
  %469 = and i32 %468, 255
  %470 = tail call i32 @llvm.ctpop.i32(i32 %469) #8
  %471 = trunc i32 %470 to i8
  %472 = and i8 %471, 1
  %473 = xor i8 %472, 1
  store i8 %473, i8* %21, align 1, !tbaa !2446
  %474 = xor i64 %464, %465
  %475 = lshr i64 %474, 4
  %476 = trunc i64 %475 to i8
  %477 = and i8 %476, 1
  store i8 %477, i8* %27, align 1, !tbaa !2447
  %478 = icmp eq i64 %465, 0
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %30, align 1, !tbaa !2448
  %480 = lshr i64 %465, 63
  %481 = trunc i64 %480 to i8
  store i8 %481, i8* %33, align 1, !tbaa !2449
  %482 = lshr i64 %464, 63
  %483 = xor i64 %480, %482
  %484 = add nuw nsw i64 %483, %482
  %485 = icmp eq i64 %484, 2
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %39, align 1, !tbaa !2450
  %487 = add i64 %459, -48
  %488 = add i64 %461, 12
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i64*
  store i64 %465, i64* %489, align 8
  %490 = load i64, i64* %RBP, align 8
  %491 = add i64 %490, -40
  %492 = load i64, i64* %PC, align 8
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %491 to i64*
  %495 = load i64, i64* %494, align 8
  store i64 %495, i64* %RAX, align 8, !tbaa !2428
  %496 = add i64 %492, 8
  store i64 %496, i64* %PC, align 8
  %497 = load i64, i64* %494, align 8
  %498 = add i64 %497, %495
  store i64 %498, i64* %RAX, align 8, !tbaa !2428
  %499 = icmp ult i64 %498, %495
  %500 = icmp ult i64 %498, %497
  %501 = or i1 %499, %500
  %502 = zext i1 %501 to i8
  store i8 %502, i8* %14, align 1, !tbaa !2432
  %503 = trunc i64 %498 to i32
  %504 = and i32 %503, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #8
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %21, align 1, !tbaa !2446
  %509 = xor i64 %497, %495
  %510 = xor i64 %509, %498
  %511 = lshr i64 %510, 4
  %512 = trunc i64 %511 to i8
  %513 = and i8 %512, 1
  store i8 %513, i8* %27, align 1, !tbaa !2447
  %514 = icmp eq i64 %498, 0
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %30, align 1, !tbaa !2448
  %516 = lshr i64 %498, 63
  %517 = trunc i64 %516 to i8
  store i8 %517, i8* %33, align 1, !tbaa !2449
  %518 = lshr i64 %495, 63
  %519 = lshr i64 %497, 63
  %520 = xor i64 %516, %518
  %521 = xor i64 %516, %519
  %522 = add nuw nsw i64 %520, %521
  %523 = icmp eq i64 %522, 2
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %39, align 1, !tbaa !2450
  %525 = add i64 %492, 12
  store i64 %525, i64* %PC, align 8
  store i64 %498, i64* %494, align 8
  %526 = load i64, i64* %PC, align 8
  %527 = add i64 %526, -223
  store i64 %527, i64* %PC, align 8, !tbaa !2428
  br label %block_4032f4

block_40345c:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %528 = phi i64 [ %.pre7, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %263, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %MEMORY.2 = phi %struct.Memory* [ %682, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %258, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %529 = load i64, i64* %RBP, align 8
  %530 = add i64 %529, -48
  %531 = add i64 %528, 8
  store i64 %531, i64* %PC, align 8
  %532 = inttoptr i64 %530 to i64*
  %533 = load i64, i64* %532, align 8
  store i64 %533, i64* %RDX, align 8, !tbaa !2428
  %534 = add i64 %529, -32
  %535 = add i64 %528, 12
  store i64 %535, i64* %PC, align 8
  %536 = inttoptr i64 %534 to i64*
  %537 = load i64, i64* %536, align 8
  %538 = sub i64 %533, %537
  %539 = icmp ult i64 %533, %537
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %14, align 1, !tbaa !2432
  %541 = trunc i64 %538 to i32
  %542 = and i32 %541, 255
  %543 = tail call i32 @llvm.ctpop.i32(i32 %542) #8
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = xor i8 %545, 1
  store i8 %546, i8* %21, align 1, !tbaa !2446
  %547 = xor i64 %537, %533
  %548 = xor i64 %547, %538
  %549 = lshr i64 %548, 4
  %550 = trunc i64 %549 to i8
  %551 = and i8 %550, 1
  store i8 %551, i8* %27, align 1, !tbaa !2447
  %552 = icmp eq i64 %538, 0
  %553 = zext i1 %552 to i8
  store i8 %553, i8* %30, align 1, !tbaa !2448
  %554 = lshr i64 %538, 63
  %555 = trunc i64 %554 to i8
  store i8 %555, i8* %33, align 1, !tbaa !2449
  %556 = lshr i64 %533, 63
  %557 = lshr i64 %537, 63
  %558 = xor i64 %557, %556
  %559 = xor i64 %554, %556
  %560 = add nuw nsw i64 %559, %558
  %561 = icmp eq i64 %560, 2
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %39, align 1, !tbaa !2450
  %563 = add i64 %529, -153
  %564 = add i64 %528, 18
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %563 to i8*
  store i8 0, i8* %565, align 1
  %566 = load i64, i64* %PC, align 8
  %567 = load i8, i8* %30, align 1, !tbaa !2448
  %568 = icmp ne i8 %567, 0
  %569 = load i8, i8* %33, align 1, !tbaa !2449
  %570 = icmp ne i8 %569, 0
  %571 = load i8, i8* %39, align 1, !tbaa !2450
  %572 = icmp ne i8 %571, 0
  %573 = xor i1 %570, %572
  %574 = or i1 %568, %573
  %.v14 = select i1 %574, i64 50, i64 6
  %575 = add i64 %566, %.v14
  store i64 %575, i64* %PC, align 8, !tbaa !2428
  br i1 %574, label %block_4034a0, label %block_403474

block_4034a0:                                     ; preds = %block_403474, %block_40345c
  %576 = phi i64 [ %575, %block_40345c ], [ %.pre8, %block_403474 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_40345c ], [ %625, %block_403474 ]
  %577 = load i64, i64* %RBP, align 8
  %578 = add i64 %577, -153
  %579 = add i64 %576, 6
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i8*
  %581 = load i8, i8* %580, align 1
  store i8 %581, i8* %AL, align 1, !tbaa !2453
  %582 = and i8 %581, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %583 = zext i8 %582 to i32
  %584 = tail call i32 @llvm.ctpop.i32(i32 %583) #8
  %585 = trunc i32 %584 to i8
  %586 = xor i8 %585, 1
  store i8 %586, i8* %21, align 1, !tbaa !2446
  %587 = xor i8 %582, 1
  store i8 %587, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %588 = icmp eq i8 %587, 0
  %.v15 = select i1 %588, i64 19, i64 14
  %589 = add i64 %576, %.v15
  store i64 %589, i64* %PC, align 8, !tbaa !2428
  %590 = add i64 %577, -8
  store i64 %590, i64* %RDI, align 8, !tbaa !2428
  br i1 %588, label %block_4034b3, label %block_4034ae

block_403474:                                     ; preds = %block_40345c
  %591 = load i64, i64* %RBP, align 8
  %592 = add i64 %591, -8
  store i64 %592, i64* %RDI, align 8, !tbaa !2428
  %593 = add i64 %591, -40
  %594 = add i64 %575, 8
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i64*
  %596 = load i64, i64* %595, align 8
  store i64 %596, i64* %RSI, align 8, !tbaa !2428
  %597 = add i64 %575, -484
  %598 = add i64 %575, 13
  %599 = load i64, i64* %RSP, align 8, !tbaa !2428
  %600 = add i64 %599, -8
  %601 = inttoptr i64 %600 to i64*
  store i64 %598, i64* %601, align 8
  store i64 %600, i64* %RSP, align 8, !tbaa !2428
  store i64 %597, i64* %PC, align 8, !tbaa !2428
  %602 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %597, %struct.Memory* %MEMORY.2)
  %603 = load i64, i64* %RBP, align 8
  %604 = add i64 %603, -104
  %605 = load i64, i64* %PC, align 8
  store i64 %604, i64* %RDI, align 8, !tbaa !2428
  %606 = load i64, i64* %RAX, align 8
  %607 = add i64 %605, 8
  store i64 %607, i64* %PC, align 8
  %608 = inttoptr i64 %604 to i64*
  store i64 %606, i64* %608, align 8
  %609 = load i64, i64* %PC, align 8
  %610 = add i64 %609, -1097
  %611 = add i64 %609, 5
  %612 = load i64, i64* %RSP, align 8, !tbaa !2428
  %613 = add i64 %612, -8
  %614 = inttoptr i64 %613 to i64*
  store i64 %611, i64* %614, align 8
  store i64 %613, i64* %RSP, align 8, !tbaa !2428
  store i64 %610, i64* %PC, align 8, !tbaa !2428
  %615 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %610, %struct.Memory* %602)
  %616 = load i64, i64* %RBP, align 8
  %617 = add i64 %616, -16
  %618 = load i64, i64* %PC, align 8
  store i64 %617, i64* %RSI, align 8, !tbaa !2428
  %619 = load i64, i64* %RAX, align 8
  store i64 %619, i64* %RDI, align 8, !tbaa !2428
  %620 = add i64 %618, -1070
  %621 = add i64 %618, 12
  %622 = load i64, i64* %RSP, align 8, !tbaa !2428
  %623 = add i64 %622, -8
  %624 = inttoptr i64 %623 to i64*
  store i64 %621, i64* %624, align 8
  store i64 %623, i64* %RSP, align 8, !tbaa !2428
  store i64 %620, i64* %PC, align 8, !tbaa !2428
  %625 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %620, %struct.Memory* %615)
  %626 = load i64, i64* %RBP, align 8
  %627 = add i64 %626, -153
  %628 = load i8, i8* %AL, align 1
  %629 = load i64, i64* %PC, align 8
  %630 = add i64 %629, 6
  store i64 %630, i64* %PC, align 8
  %631 = inttoptr i64 %627 to i8*
  store i8 %628, i8* %631, align 1
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4034a0

block_403441:                                     ; preds = %block_4033d8, %block_4033e6
  %632 = phi i64 [ %265, %block_4033d8 ], [ %.pre3, %block_4033e6 ]
  %633 = phi i64 [ %128, %block_4033d8 ], [ %.pre2, %block_4033e6 ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_4033d8 ], [ %760, %block_4033e6 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %634 = add i64 %632, -48
  %635 = add i64 %633, 11
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %634 to i64*
  %637 = load i64, i64* %636, align 8
  %638 = add i64 %637, -1
  %639 = icmp eq i64 %637, 0
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %14, align 1, !tbaa !2432
  %641 = trunc i64 %638 to i32
  %642 = and i32 %641, 255
  %643 = tail call i32 @llvm.ctpop.i32(i32 %642) #8
  %644 = trunc i32 %643 to i8
  %645 = and i8 %644, 1
  %646 = xor i8 %645, 1
  store i8 %646, i8* %21, align 1, !tbaa !2446
  %647 = xor i64 %637, %638
  %648 = lshr i64 %647, 4
  %649 = trunc i64 %648 to i8
  %650 = and i8 %649, 1
  store i8 %650, i8* %27, align 1, !tbaa !2447
  %651 = icmp eq i64 %638, 0
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %30, align 1, !tbaa !2448
  %653 = lshr i64 %638, 63
  %654 = trunc i64 %653 to i8
  store i8 %654, i8* %33, align 1, !tbaa !2449
  %655 = lshr i64 %637, 63
  %656 = xor i64 %653, %655
  %657 = add nuw nsw i64 %656, %655
  %658 = icmp eq i64 %657, 2
  %659 = zext i1 %658 to i8
  store i8 %659, i8* %39, align 1, !tbaa !2450
  store i64 %638, i64* %RAX, align 8, !tbaa !2428
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %661 = ashr i64 %638, 63
  store i64 %661, i64* %RDX, align 8, !tbaa !2428
  %662 = add i64 %633, 23
  store i64 %662, i64* %PC, align 8
  %663 = zext i64 %661 to i128
  %664 = shl nuw i128 %663, 64
  %665 = zext i64 %638 to i128
  %666 = or i128 %664, %665
  %667 = sdiv i128 %666, 2
  %668 = trunc i128 %667 to i64
  %669 = and i128 %667, 18446744073709551615
  %670 = sext i64 %668 to i128
  %671 = and i128 %670, -18446744073709551616
  %672 = or i128 %671, %669
  %673 = icmp eq i128 %667, %672
  br i1 %673, label %676, label %674

; <label>:674:                                    ; preds = %block_403441
  %675 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %662, %struct.Memory* %MEMORY.4) #9
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:676:                                    ; preds = %block_403441
  %677 = srem i128 %666, 2
  %678 = trunc i128 %677 to i64
  store i64 %668, i64* %660, align 8, !tbaa !2428
  store i64 %678, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %676, %674
  %679 = phi i64 [ %.pre6, %674 ], [ %662, %676 ]
  %680 = phi i64 [ %.pre5, %674 ], [ %668, %676 ]
  %681 = phi i64 [ %.pre4, %674 ], [ %632, %676 ]
  %682 = phi %struct.Memory* [ %675, %674 ], [ %MEMORY.4, %676 ]
  %683 = add i64 %681, -40
  %684 = add i64 %679, 4
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i64*
  store i64 %680, i64* %685, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_40345c

block_4033e6:                                     ; preds = %block_4033d8
  %686 = add i64 %265, -8
  store i64 %686, i64* %RDI, align 8, !tbaa !2428
  %687 = add i64 %128, 8
  store i64 %687, i64* %PC, align 8
  %688 = load i64, i64* %268, align 8
  %689 = add i64 %688, -1
  store i64 %689, i64* %RAX, align 8, !tbaa !2428
  %690 = icmp eq i64 %688, 0
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %14, align 1, !tbaa !2432
  %692 = trunc i64 %689 to i32
  %693 = and i32 %692, 255
  %694 = tail call i32 @llvm.ctpop.i32(i32 %693) #8
  %695 = trunc i32 %694 to i8
  %696 = and i8 %695, 1
  %697 = xor i8 %696, 1
  store i8 %697, i8* %21, align 1, !tbaa !2446
  %698 = xor i64 %688, %689
  %699 = lshr i64 %698, 4
  %700 = trunc i64 %699 to i8
  %701 = and i8 %700, 1
  store i8 %701, i8* %27, align 1, !tbaa !2447
  %702 = icmp eq i64 %689, 0
  %703 = zext i1 %702 to i8
  store i8 %703, i8* %30, align 1, !tbaa !2448
  %704 = lshr i64 %689, 63
  %705 = trunc i64 %704 to i8
  store i8 %705, i8* %33, align 1, !tbaa !2449
  %706 = lshr i64 %688, 63
  %707 = xor i64 %704, %706
  %708 = add nuw nsw i64 %707, %706
  %709 = icmp eq i64 %708, 2
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %39, align 1, !tbaa !2450
  store i64 %689, i64* %RSI, align 8, !tbaa !2428
  %711 = add i64 %128, -342
  %712 = add i64 %128, 20
  %713 = load i64, i64* %RSP, align 8, !tbaa !2428
  %714 = add i64 %713, -8
  %715 = inttoptr i64 %714 to i64*
  store i64 %712, i64* %715, align 8
  store i64 %714, i64* %RSP, align 8, !tbaa !2428
  store i64 %711, i64* %PC, align 8, !tbaa !2428
  %716 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %711, %struct.Memory* %MEMORY.0)
  %717 = load i64, i64* %RBP, align 8
  %718 = add i64 %717, -88
  %719 = load i64, i64* %PC, align 8
  store i64 %718, i64* %RDI, align 8, !tbaa !2428
  %720 = load i64, i64* %RAX, align 8
  %721 = add i64 %719, 8
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %718 to i64*
  store i64 %720, i64* %722, align 8
  %723 = load i64, i64* %PC, align 8
  %724 = add i64 %723, -962
  %725 = add i64 %723, 5
  %726 = load i64, i64* %RSP, align 8, !tbaa !2428
  %727 = add i64 %726, -8
  %728 = inttoptr i64 %727 to i64*
  store i64 %725, i64* %728, align 8
  store i64 %727, i64* %RSP, align 8, !tbaa !2428
  store i64 %724, i64* %PC, align 8, !tbaa !2428
  %729 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %724, %struct.Memory* %716)
  %730 = load i64, i64* %RBP, align 8
  %731 = add i64 %730, -8
  %732 = load i64, i64* %PC, align 8
  store i64 %731, i64* %RDI, align 8, !tbaa !2428
  %733 = add i64 %730, -48
  %734 = add i64 %732, 8
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %733 to i64*
  %736 = load i64, i64* %735, align 8
  store i64 %736, i64* %RSI, align 8, !tbaa !2428
  %737 = add i64 %730, -152
  %738 = load i64, i64* %RAX, align 8
  %739 = add i64 %732, 15
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %737 to i64*
  store i64 %738, i64* %740, align 8
  %741 = load i64, i64* %PC, align 8
  %742 = add i64 %741, -390
  %743 = add i64 %741, 5
  %744 = load i64, i64* %RSP, align 8, !tbaa !2428
  %745 = add i64 %744, -8
  %746 = inttoptr i64 %745 to i64*
  store i64 %743, i64* %746, align 8
  store i64 %745, i64* %RSP, align 8, !tbaa !2428
  store i64 %742, i64* %PC, align 8, !tbaa !2428
  %747 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %742, %struct.Memory* %729)
  %748 = load i64, i64* %RBP, align 8
  %749 = add i64 %748, -96
  %750 = load i64, i64* %PC, align 8
  store i64 %749, i64* %RDI, align 8, !tbaa !2428
  %751 = load i64, i64* %RAX, align 8
  %752 = add i64 %750, 8
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %749 to i64*
  store i64 %751, i64* %753, align 8
  %754 = load i64, i64* %PC, align 8
  %755 = add i64 %754, -995
  %756 = add i64 %754, 5
  %757 = load i64, i64* %RSP, align 8, !tbaa !2428
  %758 = add i64 %757, -8
  %759 = inttoptr i64 %758 to i64*
  store i64 %756, i64* %759, align 8
  store i64 %758, i64* %RSP, align 8, !tbaa !2428
  store i64 %755, i64* %PC, align 8, !tbaa !2428
  %760 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %755, %struct.Memory* %747)
  %761 = load i64, i64* %RBP, align 8
  %762 = add i64 %761, -152
  %763 = load i64, i64* %PC, align 8
  %764 = add i64 %763, 7
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %762 to i64*
  %766 = load i64, i64* %765, align 8
  store i64 %766, i64* %RSI, align 8, !tbaa !2428
  %767 = add i64 %763, 10
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %766 to i64*
  %769 = load i64, i64* %768, align 8
  store i64 %769, i64* %RDI, align 8, !tbaa !2428
  %770 = bitcast %union.anon* %3 to i64**
  %771 = load i64*, i64** %770, align 8
  %772 = add i64 %763, 13
  store i64 %772, i64* %PC, align 8
  store i64 %769, i64* %771, align 8
  %773 = load i64, i64* %RBP, align 8
  %774 = add i64 %773, -40
  %775 = load i64, i64* %PC, align 8
  %776 = add i64 %775, 4
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %774 to i64*
  %778 = load i64, i64* %777, align 8
  %779 = add i64 %778, -1
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = icmp eq i64 %778, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %14, align 1, !tbaa !2432
  %782 = trunc i64 %779 to i32
  %783 = and i32 %782, 255
  %784 = tail call i32 @llvm.ctpop.i32(i32 %783) #8
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  store i8 %787, i8* %21, align 1, !tbaa !2446
  %788 = xor i64 %778, %779
  %789 = lshr i64 %788, 4
  %790 = trunc i64 %789 to i8
  %791 = and i8 %790, 1
  store i8 %791, i8* %27, align 1, !tbaa !2447
  %792 = icmp eq i64 %779, 0
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %30, align 1, !tbaa !2448
  %794 = lshr i64 %779, 63
  %795 = trunc i64 %794 to i8
  store i8 %795, i8* %33, align 1, !tbaa !2449
  %796 = lshr i64 %778, 63
  %797 = xor i64 %794, %796
  %798 = add nuw nsw i64 %797, %796
  %799 = icmp eq i64 %798, 2
  %800 = zext i1 %799 to i8
  store i8 %800, i8* %39, align 1, !tbaa !2450
  %801 = add i64 %773, -48
  %802 = add i64 %775, 12
  store i64 %802, i64* %PC, align 8
  %803 = inttoptr i64 %801 to i64*
  store i64 %779, i64* %803, align 8
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %block_403441

block_403302:                                     ; preds = %block_4032f4
  %804 = add i64 %265, -8
  store i64 %804, i64* %RDI, align 8, !tbaa !2428
  %805 = add i64 %301, 8
  store i64 %805, i64* %PC, align 8
  %806 = load i64, i64* %268, align 8
  %807 = add i64 %806, -1
  store i64 %807, i64* %RAX, align 8, !tbaa !2428
  %808 = icmp eq i64 %806, 0
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %14, align 1, !tbaa !2432
  %810 = trunc i64 %807 to i32
  %811 = and i32 %810, 255
  %812 = tail call i32 @llvm.ctpop.i32(i32 %811) #8
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  store i8 %815, i8* %21, align 1, !tbaa !2446
  %816 = xor i64 %806, %807
  %817 = lshr i64 %816, 4
  %818 = trunc i64 %817 to i8
  %819 = and i8 %818, 1
  store i8 %819, i8* %27, align 1, !tbaa !2447
  %820 = icmp eq i64 %807, 0
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %30, align 1, !tbaa !2448
  %822 = lshr i64 %807, 63
  %823 = trunc i64 %822 to i8
  store i8 %823, i8* %33, align 1, !tbaa !2449
  %824 = lshr i64 %806, 63
  %825 = xor i64 %822, %824
  %826 = add nuw nsw i64 %825, %824
  %827 = icmp eq i64 %826, 2
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %39, align 1, !tbaa !2450
  store i64 %807, i64* %RSI, align 8, !tbaa !2428
  %829 = add i64 %301, -114
  %830 = add i64 %301, 20
  %831 = load i64, i64* %RSP, align 8, !tbaa !2428
  %832 = add i64 %831, -8
  %833 = inttoptr i64 %832 to i64*
  store i64 %830, i64* %833, align 8
  store i64 %832, i64* %RSP, align 8, !tbaa !2428
  store i64 %829, i64* %PC, align 8, !tbaa !2428
  %834 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %829, %struct.Memory* %MEMORY.0)
  %835 = load i64, i64* %RBP, align 8
  %836 = add i64 %835, -56
  %837 = load i64, i64* %PC, align 8
  store i64 %836, i64* %RDI, align 8, !tbaa !2428
  %838 = load i64, i64* %RAX, align 8
  %839 = add i64 %837, 8
  store i64 %839, i64* %PC, align 8
  %840 = inttoptr i64 %836 to i64*
  store i64 %838, i64* %840, align 8
  %841 = load i64, i64* %PC, align 8
  %842 = add i64 %841, -734
  %843 = add i64 %841, 5
  %844 = load i64, i64* %RSP, align 8, !tbaa !2428
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %843, i64* %846, align 8
  store i64 %845, i64* %RSP, align 8, !tbaa !2428
  store i64 %842, i64* %PC, align 8, !tbaa !2428
  %847 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %842, %struct.Memory* %834)
  %848 = load i64, i64* %RBP, align 8
  %849 = add i64 %848, -8
  %850 = load i64, i64* %PC, align 8
  store i64 %849, i64* %RDI, align 8, !tbaa !2428
  %851 = add i64 %848, -40
  %852 = add i64 %850, 8
  store i64 %852, i64* %PC, align 8
  %853 = inttoptr i64 %851 to i64*
  %854 = load i64, i64* %853, align 8
  store i64 %854, i64* %RSI, align 8, !tbaa !2428
  %855 = add i64 %848, -136
  %856 = load i64, i64* %RAX, align 8
  %857 = add i64 %850, 15
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %855 to i64*
  store i64 %856, i64* %858, align 8
  %859 = load i64, i64* %PC, align 8
  %860 = add i64 %859, -162
  %861 = add i64 %859, 5
  %862 = load i64, i64* %RSP, align 8, !tbaa !2428
  %863 = add i64 %862, -8
  %864 = inttoptr i64 %863 to i64*
  store i64 %861, i64* %864, align 8
  store i64 %863, i64* %RSP, align 8, !tbaa !2428
  store i64 %860, i64* %PC, align 8, !tbaa !2428
  %865 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_renamed_(%struct.State* nonnull %0, i64 %860, %struct.Memory* %847)
  %866 = load i64, i64* %RBP, align 8
  %867 = add i64 %866, -64
  %868 = load i64, i64* %PC, align 8
  store i64 %867, i64* %RDI, align 8, !tbaa !2428
  %869 = load i64, i64* %RAX, align 8
  %870 = add i64 %868, 8
  store i64 %870, i64* %PC, align 8
  %871 = inttoptr i64 %867 to i64*
  store i64 %869, i64* %871, align 8
  %872 = load i64, i64* %PC, align 8
  %873 = add i64 %872, -767
  %874 = add i64 %872, 5
  %875 = load i64, i64* %RSP, align 8, !tbaa !2428
  %876 = add i64 %875, -8
  %877 = inttoptr i64 %876 to i64*
  store i64 %874, i64* %877, align 8
  store i64 %876, i64* %RSP, align 8, !tbaa !2428
  store i64 %873, i64* %PC, align 8, !tbaa !2428
  %878 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_renamed_(%struct.State* nonnull %0, i64 %873, %struct.Memory* %865)
  %879 = load i64, i64* %RBP, align 8
  %880 = add i64 %879, -136
  %881 = load i64, i64* %PC, align 8
  %882 = add i64 %881, 7
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %880 to i64*
  %884 = load i64, i64* %883, align 8
  store i64 %884, i64* %RDI, align 8, !tbaa !2428
  %885 = load i64, i64* %RAX, align 8
  store i64 %885, i64* %RSI, align 8, !tbaa !2428
  %886 = add i64 %881, -740
  %887 = add i64 %881, 15
  %888 = load i64, i64* %RSP, align 8, !tbaa !2428
  %889 = add i64 %888, -8
  %890 = inttoptr i64 %889 to i64*
  store i64 %887, i64* %890, align 8
  store i64 %889, i64* %RSP, align 8, !tbaa !2428
  store i64 %886, i64* %PC, align 8, !tbaa !2428
  %891 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %886, %struct.Memory* %878)
  %892 = load i8, i8* %AL, align 1
  %893 = load i64, i64* %PC, align 8
  %894 = and i8 %892, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %895 = zext i8 %894 to i32
  %896 = tail call i32 @llvm.ctpop.i32(i32 %895) #8
  %897 = trunc i32 %896 to i8
  %898 = xor i8 %897, 1
  store i8 %898, i8* %21, align 1, !tbaa !2446
  %899 = xor i8 %894, 1
  store i8 %899, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %900 = icmp eq i8 %899, 0
  %.v12 = select i1 %900, i64 13, i64 8
  %901 = add i64 %893, %.v12
  store i64 %901, i64* %PC, align 8, !tbaa !2428
  br i1 %900, label %block_403360, label %block_40335b

block_403360:                                     ; preds = %block_403302
  %902 = load i64, i64* %RBP, align 8
  %903 = add i64 %902, -40
  %904 = add i64 %901, 4
  store i64 %904, i64* %PC, align 8
  %905 = inttoptr i64 %903 to i64*
  %906 = load i64, i64* %905, align 8
  %907 = add i64 %906, 1
  store i64 %907, i64* %RAX, align 8, !tbaa !2428
  %908 = icmp eq i64 %906, -1
  %909 = icmp eq i64 %907, 0
  %910 = or i1 %908, %909
  %911 = zext i1 %910 to i8
  store i8 %911, i8* %14, align 1, !tbaa !2432
  %912 = trunc i64 %907 to i32
  %913 = and i32 %912, 255
  %914 = tail call i32 @llvm.ctpop.i32(i32 %913) #8
  %915 = trunc i32 %914 to i8
  %916 = and i8 %915, 1
  %917 = xor i8 %916, 1
  store i8 %917, i8* %21, align 1, !tbaa !2446
  %918 = xor i64 %906, %907
  %919 = lshr i64 %918, 4
  %920 = trunc i64 %919 to i8
  %921 = and i8 %920, 1
  store i8 %921, i8* %27, align 1, !tbaa !2447
  %922 = zext i1 %909 to i8
  store i8 %922, i8* %30, align 1, !tbaa !2448
  %923 = lshr i64 %907, 63
  %924 = trunc i64 %923 to i8
  store i8 %924, i8* %33, align 1, !tbaa !2449
  %925 = lshr i64 %906, 63
  %926 = xor i64 %923, %925
  %927 = add nuw nsw i64 %926, %923
  %928 = icmp eq i64 %927, 2
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %39, align 1, !tbaa !2450
  %930 = add i64 %901, 12
  store i64 %930, i64* %PC, align 8
  store i64 %907, i64* %905, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_40336c
}

; Function Attrs: noinline
define %struct.Memory* @sub_401db0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401db0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = add i64 %9, 8
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %10 to i64*
  store i64 %13, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RDI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %RSI, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  %.pre1 = load i64, i64* %RBP, align 8
  br label %block_401dc1

block_401dcf:                                     ; preds = %block_401dc1
  %33 = add i64 %111, 4
  store i64 %33, i64* %PC, align 8
  %34 = load i64, i64* %80, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 8
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -9
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %27, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %28, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %29, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %30, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %31, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %32, align 1, !tbaa !2450
  %57 = add i64 %111, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %80, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = bitcast i64* %RAX to i64**
  %65 = load i64*, i64** %64, align 8
  store i64 %63, i64* %65, align 8
  %66 = add i64 %60, -29
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  br label %block_401dc1

block_401dea:                                     ; preds = %block_401dc1
  %67 = add i64 %111, 1
  store i64 %67, i64* %PC, align 8
  %68 = load i64, i64* %5, align 8, !tbaa !2428
  %69 = add i64 %68, 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RBP, align 8, !tbaa !2428
  store i64 %69, i64* %5, align 8, !tbaa !2428
  %72 = add i64 %111, 2
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %69 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  %75 = add i64 %68, 16
  store i64 %75, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401dc1:                                     ; preds = %block_401dcf, %block_401db0
  %76 = phi i64 [ %58, %block_401dcf ], [ %.pre1, %block_401db0 ]
  %77 = phi i64 [ %66, %block_401dcf ], [ %.pre, %block_401db0 ]
  %78 = add i64 %76, -16
  %79 = add i64 %77, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %78 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = add i64 %76, -24
  %83 = add i64 %77, 8
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sub i64 %81, %85
  %87 = icmp ult i64 %81, %85
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %27, align 1, !tbaa !2432
  %89 = trunc i64 %86 to i32
  %90 = and i32 %89, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #8
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %28, align 1, !tbaa !2446
  %95 = xor i64 %85, %81
  %96 = xor i64 %95, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %29, align 1, !tbaa !2447
  %100 = icmp eq i64 %86, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %30, align 1, !tbaa !2448
  %102 = lshr i64 %86, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %31, align 1, !tbaa !2449
  %104 = lshr i64 %81, 63
  %105 = lshr i64 %85, 63
  %106 = xor i64 %105, %104
  %107 = xor i64 %102, %104
  %108 = add nuw nsw i64 %107, %106
  %109 = icmp eq i64 %108, 2
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %32, align 1, !tbaa !2450
  %.v = select i1 %100, i64 41, i64 14
  %111 = add i64 %77, %.v
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  br i1 %100, label %block_401dea, label %block_401dcf
}

; Function Attrs: noinline
define %struct.Memory* @sub_406530__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406530:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406560__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ad0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400ad0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 6328568, i64* %RAX, align 8, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !2432
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1, !tbaa !2446
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1, !tbaa !2447
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %13, align 1, !tbaa !2448
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !2449
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !2450
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %9, 40
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %8, align 8
  store i64 %17, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %18 = add i64 %9, 41
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %6 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %21 = add i64 %6, 8
  store i64 %21, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404710__ZppIdER14PointerWrapperIT_ES3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404710:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #8
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, %23
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2448
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = add i64 %16, 14
  store i64 %51, i64* %PC, align 8
  store i64 %23, i64* %21, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %54, 5
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %54, 6
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_405900__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405900:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -104
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -32
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %20 = add i64 %8, -16
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %11, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -16
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -24
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, -7422
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40592c

block_4059b7:                                     ; preds = %block_4059a7
  %55 = add i64 %136, -56
  store i64 %55, i64* %RDI, align 8, !tbaa !2428
  %56 = add i64 %148, -7463
  %57 = add i64 %148, 9
  %58 = load i64, i64* %RSP, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %57, i64* %60, align 8
  store i64 %59, i64* %RSP, align 8, !tbaa !2428
  store i64 %56, i64* %PC, align 8, !tbaa !2428
  %61 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %56, %struct.Memory* %MEMORY.0)
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -48
  %64 = load i64, i64* %PC, align 8
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %65 = add i64 %62, -80
  %66 = load i64, i64* %RAX, align 8
  %67 = add i64 %64, 8
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -7480
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %70, %struct.Memory* %61)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -80
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = add i64 %78, 7
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RCX, align 8, !tbaa !2428
  %85 = load i64*, i64** %235, align 8
  %86 = add i64 %78, 10
  store i64 %86, i64* %PC, align 8
  store i64 %84, i64* %85, align 8
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -48
  %89 = load i64, i64* %PC, align 8
  store i64 %88, i64* %RDI, align 8, !tbaa !2428
  %90 = add i64 %89, -1879
  %91 = add i64 %89, 9
  %92 = load i64, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94, align 8
  store i64 %93, i64* %RSP, align 8, !tbaa !2428
  store i64 %90, i64* %PC, align 8, !tbaa !2428
  %95 = tail call %struct.Memory* @sub_405280__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %90, %struct.Memory* %75)
  %96 = load i64, i64* %RBP, align 8
  %97 = add i64 %96, -88
  %98 = load i64, i64* %RAX, align 8
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %97 to i64*
  store i64 %98, i64* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, -126
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  br label %block_405966

block_4059b2:                                     ; preds = %block_4059a7
  %104 = add i64 %136, -48
  store i64 %104, i64* %RDI, align 8, !tbaa !2428
  %105 = add i64 %148, -7458
  %106 = add i64 %148, 64
  %107 = load i64, i64* %RSP, align 8, !tbaa !2428
  %108 = add i64 %107, -8
  %109 = inttoptr i64 %108 to i64*
  store i64 %106, i64* %109, align 8
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  store i64 %105, i64* %PC, align 8, !tbaa !2428
  %110 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -24
  %113 = load i64, i64* %PC, align 8
  store i64 %112, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %114 = add i64 %111, -40
  %115 = add i64 %113, 10
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %RCX, align 8, !tbaa !2428
  %118 = load i64*, i64** %235, align 8
  %119 = add i64 %113, 13
  store i64 %119, i64* %PC, align 8
  store i64 %117, i64* %118, align 8
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, -7647
  %122 = add i64 %120, 5
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %110)
  %127 = load i64, i64* %RBP, align 8
  %128 = add i64 %127, -64
  %129 = load i64, i64* %RAX, align 8
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  store i64 %129, i64* %132, align 8
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, -220
  store i64 %134, i64* %PC, align 8, !tbaa !2428
  br label %block_40592c

block_4059a7:                                     ; preds = %block_405982, %block_405987
  %135 = phi i64 [ %.pre2, %block_405987 ], [ %262, %block_405982 ]
  %MEMORY.0 = phi %struct.Memory* [ %220, %block_405987 ], [ %158, %block_405982 ]
  %136 = load i64, i64* %RBP, align 8
  %137 = add i64 %136, -65
  %138 = add i64 %135, 3
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i8*
  %140 = load i8, i8* %139, align 1
  store i8 %140, i8* %AL, align 1, !tbaa !2453
  %141 = and i8 %140, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %142 = zext i8 %141 to i32
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #8
  %144 = trunc i32 %143 to i8
  %145 = xor i8 %144, 1
  store i8 %145, i8* %14, align 1, !tbaa !2446
  %146 = xor i8 %141, 1
  store i8 %146, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %147 = icmp eq i8 %146, 0
  %.v4 = select i1 %147, i64 16, i64 11
  %148 = add i64 %135, %.v4
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  br i1 %147, label %block_4059b7, label %block_4059b2

block_405966:                                     ; preds = %block_405946, %block_4059b7
  %149 = phi i64 [ %.pre1, %block_405946 ], [ %103, %block_4059b7 ]
  %MEMORY.1 = phi %struct.Memory* [ %234, %block_405946 ], [ %95, %block_4059b7 ]
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -48
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %150, -8
  store i64 %152, i64* %RSI, align 8, !tbaa !2428
  %153 = add i64 %149, -7430
  %154 = add i64 %149, 13
  %155 = load i64, i64* %RSP, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %154, i64* %157, align 8
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  store i64 %153, i64* %PC, align 8, !tbaa !2428
  %158 = tail call %struct.Memory* @sub_403c60__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %153, %struct.Memory* %MEMORY.1)
  %159 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2453
  %160 = load i8, i8* %AL, align 1
  %161 = and i8 %160, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %162 = zext i8 %161 to i32
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #8
  %164 = trunc i32 %163 to i8
  %165 = xor i8 %164, 1
  store i8 %165, i8* %14, align 1, !tbaa !2446
  %166 = xor i8 %161, 1
  store i8 %166, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -65
  %169 = add i64 %159, 9
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i8*
  store i8 0, i8* %170, align 1
  %171 = load i64, i64* %PC, align 8
  %172 = load i8, i8* %16, align 1, !tbaa !2448
  %173 = icmp eq i8 %172, 0
  %.v3 = select i1 %173, i64 11, i64 6
  %174 = add i64 %171, %.v3
  store i64 %174, i64* %PC, align 8, !tbaa !2428
  br i1 %173, label %block_405987, label %block_405982

block_40592c:                                     ; preds = %block_4059b2, %block_405900
  %175 = phi i64 [ %.pre, %block_405900 ], [ %134, %block_4059b2 ]
  %MEMORY.2 = phi %struct.Memory* [ %48, %block_405900 ], [ %126, %block_4059b2 ]
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -24
  store i64 %177, i64* %RDI, align 8, !tbaa !2428
  %178 = add i64 %176, -16
  store i64 %178, i64* %RSI, align 8, !tbaa !2428
  %179 = add i64 %175, -7372
  %180 = add i64 %175, 13
  %181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183, align 8
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %184 = tail call %struct.Memory* @sub_403c60__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %179, %struct.Memory* %MEMORY.2)
  %185 = load i8, i8* %AL, align 1
  %186 = load i64, i64* %PC, align 8
  %187 = and i8 %185, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %188 = zext i8 %187 to i32
  %189 = tail call i32 @llvm.ctpop.i32(i32 %188) #8
  %190 = trunc i32 %189 to i8
  %191 = xor i8 %190, 1
  store i8 %191, i8* %14, align 1, !tbaa !2446
  %192 = xor i8 %187, 1
  store i8 %192, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %193 = icmp eq i8 %192, 0
  %.v = select i1 %193, i64 13, i64 8
  %194 = add i64 %186, %.v
  store i64 %194, i64* %PC, align 8, !tbaa !2428
  br i1 %193, label %block_405946, label %block_405941

block_405987:                                     ; preds = %block_405966
  %195 = load i64, i64* %RBP, align 8
  %196 = add i64 %195, -56
  store i64 %196, i64* %RDI, align 8, !tbaa !2428
  %197 = add i64 %174, -1799
  %198 = add i64 %174, 9
  %199 = load i64, i64* %RSP, align 8, !tbaa !2428
  %200 = add i64 %199, -8
  %201 = inttoptr i64 %200 to i64*
  store i64 %198, i64* %201, align 8
  store i64 %200, i64* %RSP, align 8, !tbaa !2428
  store i64 %197, i64* %PC, align 8, !tbaa !2428
  %202 = tail call %struct.Memory* @sub_405280__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__renamed_(%struct.State* nonnull %0, i64 %197, %struct.Memory* %158)
  %203 = load i64, i64* %RAX, align 8
  %204 = load i64, i64* %PC, align 8
  store i64 %203, i64* %RDI, align 8, !tbaa !2428
  %205 = add i64 %204, -7424
  %206 = add i64 %204, 8
  %207 = load i64, i64* %RSP, align 8, !tbaa !2428
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %209, align 8
  store i64 %208, i64* %RSP, align 8, !tbaa !2428
  store i64 %205, i64* %PC, align 8, !tbaa !2428
  %210 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %205, %struct.Memory* %202)
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -40
  %213 = load i64, i64* %PC, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %RAX, align 8
  store i64 %214, i64* %RSI, align 8, !tbaa !2428
  %215 = add i64 %213, -10120
  %216 = add i64 %213, 12
  %217 = load i64, i64* %RSP, align 8, !tbaa !2428
  %218 = add i64 %217, -8
  %219 = inttoptr i64 %218 to i64*
  store i64 %216, i64* %219, align 8
  store i64 %218, i64* %RSP, align 8, !tbaa !2428
  store i64 %215, i64* %PC, align 8, !tbaa !2428
  %220 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %215, %struct.Memory* %210)
  %221 = load i64, i64* %RBP, align 8
  %222 = add i64 %221, -65
  %223 = load i8, i8* %AL, align 1
  %224 = load i64, i64* %PC, align 8
  %225 = add i64 %224, 3
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %222 to i8*
  store i8 %223, i8* %226, align 1
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_4059a7

block_405946:                                     ; preds = %block_40592c
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -24
  store i64 %228, i64* %RDI, align 8, !tbaa !2428
  %229 = add i64 %194, -7350
  %230 = add i64 %194, 9
  %231 = load i64, i64* %RSP, align 8, !tbaa !2428
  %232 = add i64 %231, -8
  %233 = inttoptr i64 %232 to i64*
  store i64 %230, i64* %233, align 8
  store i64 %232, i64* %RSP, align 8, !tbaa !2428
  store i64 %229, i64* %PC, align 8, !tbaa !2428
  %234 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %229, %struct.Memory* %184)
  %235 = bitcast %union.anon* %3 to i64**
  %236 = load i64*, i64** %235, align 8
  %237 = load i64, i64* %PC, align 8
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC, align 8
  %239 = load i64, i64* %236, align 8
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -40
  %242 = add i64 %237, 7
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to i64*
  store i64 %239, i64* %243, align 8
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -24
  %246 = load i64, i64* %PC, align 8
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RAX, align 8, !tbaa !2428
  %250 = add i64 %244, -48
  %251 = add i64 %246, 8
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  store i64 %249, i64* %252, align 8
  %253 = load i64, i64* %RBP, align 8
  %254 = add i64 %253, -48
  %255 = load i64, i64* %PC, align 8
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %254 to i64*
  %258 = load i64, i64* %257, align 8
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = add i64 %253, -56
  %260 = add i64 %255, 8
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i64*
  store i64 %258, i64* %261, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_405966

block_405982:                                     ; preds = %block_405966
  %262 = add i64 %174, 37
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br label %block_4059a7

block_405941:                                     ; preds = %block_40592c
  %263 = load i64, i64* %RSP, align 8
  %264 = add i64 %263, 96
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  %265 = icmp ugt i64 %263, -97
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %13, align 1, !tbaa !2432
  %267 = trunc i64 %264 to i32
  %268 = and i32 %267, 255
  %269 = tail call i32 @llvm.ctpop.i32(i32 %268) #8
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  store i8 %272, i8* %14, align 1, !tbaa !2446
  %273 = xor i64 %263, %264
  %274 = lshr i64 %273, 4
  %275 = trunc i64 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %15, align 1, !tbaa !2447
  %277 = icmp eq i64 %264, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %16, align 1, !tbaa !2448
  %279 = lshr i64 %264, 63
  %280 = trunc i64 %279 to i8
  store i8 %280, i8* %17, align 1, !tbaa !2449
  %281 = lshr i64 %263, 63
  %282 = xor i64 %279, %281
  %283 = add nuw nsw i64 %282, %279
  %284 = icmp eq i64 %283, 2
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %18, align 1, !tbaa !2450
  %286 = add i64 %194, 209
  store i64 %286, i64* %PC, align 8
  %287 = add i64 %263, 104
  %288 = inttoptr i64 %264 to i64*
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %RBP, align 8, !tbaa !2428
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %194, 210
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  %293 = add i64 %263, 112
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %184
}

; Function Attrs: noinline
define %struct.Memory* @sub_404790__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404790:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -184
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = icmp ult i64 %10, 176
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !2446
  %24 = xor i64 %10, 16
  %25 = xor i64 %24, %13
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !2447
  %30 = icmp eq i64 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !2448
  %33 = lshr i64 %13, 63
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !2449
  %36 = lshr i64 %10, 63
  %37 = xor i64 %33, %36
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !2450
  %42 = add i64 %9, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = add i64 %12, 14
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %45, align 8
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -16
  %48 = load i64, i64* %RDI, align 8
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -24
  %54 = load i64, i64* %RDX, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 4
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %53 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -32
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 5
  store i64 %61, i64* %PC, align 8
  %62 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %63 = load i64, i64* %62, align 1
  %64 = inttoptr i64 %59 to i64*
  store i64 %63, i64* %64, align 8
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -24
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %66 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RDX, align 8, !tbaa !2428
  %71 = add i64 %65, -48
  %72 = add i64 %67, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to i64*
  store i64 %70, i64* %73, align 8
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -48
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %75 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = add i64 %79, 1
  %81 = shl i64 %80, 1
  %82 = icmp slt i64 %80, 0
  %83 = icmp slt i64 %81, 0
  %84 = xor i1 %82, %83
  store i64 %81, i64* %RDX, align 8, !tbaa !2428
  %.lobit = lshr i64 %80, 63
  %85 = trunc i64 %.lobit to i8
  store i8 %85, i8* %16, align 1, !tbaa !2453
  %86 = trunc i64 %81 to i32
  %87 = and i32 %86, 254
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %23, align 1, !tbaa !2453
  store i8 0, i8* %29, align 1, !tbaa !2453
  %92 = icmp eq i64 %81, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %32, align 1, !tbaa !2453
  %94 = lshr i64 %80, 62
  %95 = trunc i64 %94 to i8
  %96 = and i8 %95, 1
  store i8 %96, i8* %35, align 1, !tbaa !2453
  %97 = zext i1 %84 to i8
  store i8 %97, i8* %41, align 1, !tbaa !2453
  %98 = add i64 %74, -40
  %99 = add i64 %76, 16
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i64*
  store i64 %81, i64* %100, align 8
  %101 = bitcast [32 x %union.VectorReg]* %5 to double*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %103 = bitcast i64* %102 to double*
  %104 = bitcast %union.VectorReg* %6 to double*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %106 = bitcast i64* %105 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4047c4

block_4048b9:                                     ; preds = %block_4048ab
  %107 = add i64 %875, -8
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %108 = add i64 %989, 8
  store i64 %108, i64* %PC, align 8
  %109 = load i64, i64* %878, align 8
  %110 = add i64 %109, -1
  store i64 %110, i64* %RAX, align 8, !tbaa !2428
  %111 = icmp eq i64 %109, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %16, align 1, !tbaa !2432
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #8
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %23, align 1, !tbaa !2446
  %119 = xor i64 %109, %110
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %29, align 1, !tbaa !2447
  %123 = icmp eq i64 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %32, align 1, !tbaa !2448
  %125 = lshr i64 %110, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %35, align 1, !tbaa !2449
  %127 = lshr i64 %109, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %127
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %41, align 1, !tbaa !2450
  store i64 %110, i64* %RSI, align 8, !tbaa !2428
  %132 = add i64 %989, -345
  %133 = add i64 %989, 20
  %134 = load i64, i64* %RSP, align 8, !tbaa !2428
  %135 = add i64 %134, -8
  %136 = inttoptr i64 %135 to i64*
  store i64 %133, i64* %136, align 8
  store i64 %135, i64* %RSP, align 8, !tbaa !2428
  store i64 %132, i64* %PC, align 8, !tbaa !2428
  %137 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %132, %struct.Memory* %MEMORY.3)
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -88
  %140 = load i64, i64* %PC, align 8
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %141 = load i64, i64* %RAX, align 8
  %142 = add i64 %140, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %139 to i64*
  store i64 %141, i64* %143, align 8
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, -485
  %146 = add i64 %144, 5
  %147 = load i64, i64* %RSP, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %150 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %145, %struct.Memory* %137)
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -8
  %153 = load i64, i64* %PC, align 8
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %154 = bitcast %union.anon* %3 to i64**
  %155 = load i64*, i64** %154, align 8
  %156 = add i64 %153, 8
  store i64 %156, i64* %PC, align 8
  %157 = load i64, i64* %155, align 8
  store i64 %157, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %158 = add i64 %151, -48
  %159 = add i64 %153, 12
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = add i64 %151, -152
  %163 = add i64 %153, 20
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %162 to i64*
  store i64 %157, i64* %164, align 8
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, -398
  %167 = add i64 %165, 5
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %166, %struct.Memory* %150)
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -96
  %174 = load i64, i64* %PC, align 8
  store i64 %173, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RAX, align 8
  %176 = add i64 %174, 8
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %173 to i64*
  store i64 %175, i64* %177, align 8
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, -523
  %180 = add i64 %178, 5
  %181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183, align 8
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %184 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %179, %struct.Memory* %171)
  %185 = load i64, i64* %RBP, align 8
  %186 = add i64 %185, -152
  %187 = load i64, i64* %PC, align 8
  %188 = add i64 %187, 8
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %186 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %191 = load i64*, i64** %154, align 8
  %192 = add i64 %187, 12
  store i64 %192, i64* %PC, align 8
  store i64 %190, i64* %191, align 8
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -40
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = add i64 %198, -1
  store i64 %199, i64* %RAX, align 8, !tbaa !2428
  %200 = icmp eq i64 %198, 0
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %16, align 1, !tbaa !2432
  %202 = trunc i64 %199 to i32
  %203 = and i32 %202, 255
  %204 = tail call i32 @llvm.ctpop.i32(i32 %203) #8
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  %207 = xor i8 %206, 1
  store i8 %207, i8* %23, align 1, !tbaa !2446
  %208 = xor i64 %198, %199
  %209 = lshr i64 %208, 4
  %210 = trunc i64 %209 to i8
  %211 = and i8 %210, 1
  store i8 %211, i8* %29, align 1, !tbaa !2447
  %212 = icmp eq i64 %199, 0
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %32, align 1, !tbaa !2448
  %214 = lshr i64 %199, 63
  %215 = trunc i64 %214 to i8
  store i8 %215, i8* %35, align 1, !tbaa !2449
  %216 = lshr i64 %198, 63
  %217 = xor i64 %214, %216
  %218 = add nuw nsw i64 %217, %216
  %219 = icmp eq i64 %218, 2
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %41, align 1, !tbaa !2450
  %221 = add i64 %193, -48
  %222 = add i64 %195, 12
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %221 to i64*
  store i64 %199, i64* %223, align 8
  %.pre3 = load i64, i64* %PC, align 8
  %.pre4 = load i64, i64* %RBP, align 8
  br label %block_404918

block_40497b:                                     ; preds = %block_404933, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %224 = phi i64 [ %959, %block_404933 ], [ %.pre11, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_404933 ], [ %865, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %225 = load i64, i64* %RBP, align 8
  %226 = add i64 %225, -153
  %227 = add i64 %224, 6
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i8*
  %229 = load i8, i8* %228, align 1
  store i8 %229, i8* %AL, align 1, !tbaa !2453
  %230 = and i8 %229, 1
  store i8 0, i8* %16, align 1, !tbaa !2432
  %231 = zext i8 %230 to i32
  %232 = tail call i32 @llvm.ctpop.i32(i32 %231) #8
  %233 = trunc i32 %232 to i8
  %234 = xor i8 %233, 1
  store i8 %234, i8* %23, align 1, !tbaa !2446
  %235 = xor i8 %230, 1
  store i8 %235, i8* %32, align 1, !tbaa !2448
  store i8 0, i8* %35, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %29, align 1, !tbaa !2447
  %236 = icmp eq i8 %235, 0
  %.v18 = select i1 %236, i64 19, i64 14
  %237 = add i64 %224, %.v18
  store i64 %237, i64* %PC, align 8, !tbaa !2428
  %238 = add i64 %225, -8
  store i64 %238, i64* %RDI, align 8, !tbaa !2428
  br i1 %236, label %block_40498e, label %block_404989

block_4047d2:                                     ; preds = %block_4047c4
  %239 = add i64 %875, -8
  store i64 %239, i64* %RDI, align 8, !tbaa !2428
  %240 = add i64 %911, 8
  store i64 %240, i64* %PC, align 8
  %241 = load i64, i64* %878, align 8
  %242 = add i64 %241, -1
  store i64 %242, i64* %RAX, align 8, !tbaa !2428
  %243 = icmp eq i64 %241, 0
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %16, align 1, !tbaa !2432
  %245 = trunc i64 %242 to i32
  %246 = and i32 %245, 255
  %247 = tail call i32 @llvm.ctpop.i32(i32 %246) #8
  %248 = trunc i32 %247 to i8
  %249 = and i8 %248, 1
  %250 = xor i8 %249, 1
  store i8 %250, i8* %23, align 1, !tbaa !2446
  %251 = xor i64 %241, %242
  %252 = lshr i64 %251, 4
  %253 = trunc i64 %252 to i8
  %254 = and i8 %253, 1
  store i8 %254, i8* %29, align 1, !tbaa !2447
  %255 = icmp eq i64 %242, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %32, align 1, !tbaa !2448
  %257 = lshr i64 %242, 63
  %258 = trunc i64 %257 to i8
  store i8 %258, i8* %35, align 1, !tbaa !2449
  %259 = lshr i64 %241, 63
  %260 = xor i64 %257, %259
  %261 = add nuw nsw i64 %260, %259
  %262 = icmp eq i64 %261, 2
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %41, align 1, !tbaa !2450
  store i64 %242, i64* %RSI, align 8, !tbaa !2428
  %264 = add i64 %911, -114
  %265 = add i64 %911, 20
  %266 = load i64, i64* %RSP, align 8, !tbaa !2428
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 %265, i64* %268, align 8
  store i64 %267, i64* %RSP, align 8, !tbaa !2428
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  %269 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %264, %struct.Memory* %MEMORY.3)
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -56
  %272 = load i64, i64* %PC, align 8
  store i64 %271, i64* %RDI, align 8, !tbaa !2428
  %273 = load i64, i64* %RAX, align 8
  %274 = add i64 %272, 8
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %271 to i64*
  store i64 %273, i64* %275, align 8
  %276 = load i64, i64* %PC, align 8
  %277 = add i64 %276, -254
  %278 = add i64 %276, 5
  %279 = load i64, i64* %RSP, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %278, i64* %281, align 8
  store i64 %280, i64* %RSP, align 8, !tbaa !2428
  store i64 %277, i64* %PC, align 8, !tbaa !2428
  %282 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %277, %struct.Memory* %269)
  %283 = load i64, i64* %RBP, align 8
  %284 = add i64 %283, -8
  %285 = load i64, i64* %PC, align 8
  store i64 %284, i64* %RDI, align 8, !tbaa !2428
  %286 = bitcast %union.anon* %3 to i64**
  %287 = load i64*, i64** %286, align 8
  %288 = add i64 %285, 8
  store i64 %288, i64* %PC, align 8
  %289 = load i64, i64* %287, align 8
  store i64 %289, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %290 = add i64 %283, -40
  %291 = add i64 %285, 12
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292, align 8
  store i64 %293, i64* %RSI, align 8, !tbaa !2428
  %294 = add i64 %283, -136
  %295 = add i64 %285, 20
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %294 to i64*
  store i64 %289, i64* %296, align 8
  %297 = load i64, i64* %PC, align 8
  %298 = add i64 %297, -167
  %299 = add i64 %297, 5
  %300 = load i64, i64* %RSP, align 8, !tbaa !2428
  %301 = add i64 %300, -8
  %302 = inttoptr i64 %301 to i64*
  store i64 %299, i64* %302, align 8
  store i64 %301, i64* %RSP, align 8, !tbaa !2428
  store i64 %298, i64* %PC, align 8, !tbaa !2428
  %303 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %298, %struct.Memory* %282)
  %304 = load i64, i64* %RBP, align 8
  %305 = add i64 %304, -64
  %306 = load i64, i64* %PC, align 8
  store i64 %305, i64* %RDI, align 8, !tbaa !2428
  %307 = load i64, i64* %RAX, align 8
  %308 = add i64 %306, 8
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %305 to i64*
  store i64 %307, i64* %309, align 8
  %310 = load i64, i64* %PC, align 8
  %311 = add i64 %310, -292
  %312 = add i64 %310, 5
  %313 = load i64, i64* %RSP, align 8, !tbaa !2428
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 %312, i64* %315, align 8
  store i64 %314, i64* %RSP, align 8, !tbaa !2428
  store i64 %311, i64* %PC, align 8, !tbaa !2428
  %316 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %311, %struct.Memory* %303)
  %317 = bitcast %union.anon* %3 to double**
  %318 = load double*, double** %317, align 8
  %319 = load i64, i64* %PC, align 8
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC, align 8
  %321 = load double, double* %318, align 8
  store double %321, double* %101, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -136
  %324 = add i64 %319, 12
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to double*
  %326 = load double, double* %325, align 8
  store double %326, double* %104, align 1, !tbaa !2451
  store double 0.000000e+00, double* %106, align 1, !tbaa !2451
  %327 = add i64 %319, 16
  store i64 %327, i64* %PC, align 8
  %328 = fcmp uno double %321, %326
  br i1 %328, label %329, label %339

; <label>:329:                                    ; preds = %block_4047d2
  %330 = fadd double %321, %326
  %331 = bitcast double %330 to i64
  %332 = and i64 %331, 9221120237041090560
  %333 = icmp eq i64 %332, 9218868437227405312
  %334 = and i64 %331, 2251799813685247
  %335 = icmp ne i64 %334, 0
  %336 = and i1 %333, %335
  br i1 %336, label %337, label %345

; <label>:337:                                    ; preds = %329
  %338 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %327, %struct.Memory* %316) #9
  %.pre1 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:339:                                    ; preds = %block_4047d2
  %340 = fcmp ogt double %321, %326
  br i1 %340, label %345, label %341

; <label>:341:                                    ; preds = %339
  %342 = fcmp olt double %321, %326
  br i1 %342, label %345, label %343

; <label>:343:                                    ; preds = %341
  %344 = fcmp oeq double %321, %326
  br i1 %344, label %345, label %349

; <label>:345:                                    ; preds = %343, %341, %339, %329
  %346 = phi i8 [ 0, %339 ], [ 0, %341 ], [ 1, %343 ], [ 1, %329 ]
  %347 = phi i8 [ 0, %339 ], [ 0, %341 ], [ 0, %343 ], [ 1, %329 ]
  %348 = phi i8 [ 0, %339 ], [ 1, %341 ], [ 0, %343 ], [ 1, %329 ]
  store i8 %346, i8* %32, align 1, !tbaa !2453
  store i8 %347, i8* %23, align 1, !tbaa !2453
  store i8 %348, i8* %16, align 1, !tbaa !2453
  br label %349

; <label>:349:                                    ; preds = %345, %343
  store i8 0, i8* %41, align 1, !tbaa !2453
  store i8 0, i8* %35, align 1, !tbaa !2453
  store i8 0, i8* %29, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %349, %337
  %350 = phi i64 [ %.pre1, %337 ], [ %327, %349 ]
  %351 = phi %struct.Memory* [ %338, %337 ], [ %316, %349 ]
  %352 = load i8, i8* %16, align 1, !tbaa !2432
  %353 = load i8, i8* %32, align 1, !tbaa !2448
  %354 = or i8 %353, %352
  %355 = icmp ne i8 %354, 0
  %.v15 = select i1 %355, i64 18, i64 6
  %356 = add i64 %350, %.v15
  store i64 %356, i64* %PC, align 8, !tbaa !2428
  br i1 %355, label %block_40483b, label %block_40482f

block_40482f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -40
  %359 = add i64 %356, 4
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = add i64 %361, 1
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = icmp eq i64 %361, -1
  %364 = icmp eq i64 %362, 0
  %365 = or i1 %363, %364
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %16, align 1, !tbaa !2432
  %367 = trunc i64 %362 to i32
  %368 = and i32 %367, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #8
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %23, align 1, !tbaa !2446
  %373 = xor i64 %361, %362
  %374 = lshr i64 %373, 4
  %375 = trunc i64 %374 to i8
  %376 = and i8 %375, 1
  store i8 %376, i8* %29, align 1, !tbaa !2447
  %377 = zext i1 %364 to i8
  store i8 %377, i8* %32, align 1, !tbaa !2448
  %378 = lshr i64 %362, 63
  %379 = trunc i64 %378 to i8
  store i8 %379, i8* %35, align 1, !tbaa !2449
  %380 = lshr i64 %361, 63
  %381 = xor i64 %378, %380
  %382 = add nuw nsw i64 %381, %378
  %383 = icmp eq i64 %382, 2
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %41, align 1, !tbaa !2450
  %385 = add i64 %356, 12
  store i64 %385, i64* %PC, align 8
  store i64 %362, i64* %360, align 8
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_40483b

block_40498e:                                     ; preds = %block_40497b
  %386 = add i64 %225, -40
  %387 = add i64 %237, 8
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %386 to i64*
  %389 = load i64, i64* %388, align 8
  store i64 %389, i64* %RSI, align 8, !tbaa !2428
  %390 = add i64 %237, -558
  %391 = add i64 %237, 13
  %392 = load i64, i64* %RSP, align 8, !tbaa !2428
  %393 = add i64 %392, -8
  %394 = inttoptr i64 %393 to i64*
  store i64 %391, i64* %394, align 8
  store i64 %393, i64* %RSP, align 8, !tbaa !2428
  store i64 %390, i64* %PC, align 8, !tbaa !2428
  %395 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %390, %struct.Memory* %MEMORY.0)
  %396 = load i64, i64* %RBP, align 8
  %397 = add i64 %396, -112
  %398 = load i64, i64* %PC, align 8
  store i64 %397, i64* %RDI, align 8, !tbaa !2428
  %399 = load i64, i64* %RAX, align 8
  %400 = add i64 %398, 8
  store i64 %400, i64* %PC, align 8
  %401 = inttoptr i64 %397 to i64*
  store i64 %399, i64* %401, align 8
  %402 = load i64, i64* %PC, align 8
  %403 = add i64 %402, -691
  %404 = add i64 %402, 5
  %405 = load i64, i64* %RSP, align 8, !tbaa !2428
  %406 = add i64 %405, -8
  %407 = inttoptr i64 %406 to i64*
  store i64 %404, i64* %407, align 8
  store i64 %406, i64* %RSP, align 8, !tbaa !2428
  store i64 %403, i64* %PC, align 8, !tbaa !2428
  %408 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %403, %struct.Memory* %395)
  %409 = load i64, i64* %RBP, align 8
  %410 = add i64 %409, -8
  %411 = load i64, i64* %PC, align 8
  store i64 %410, i64* %RDI, align 8, !tbaa !2428
  %412 = bitcast %union.anon* %3 to i64**
  %413 = load i64*, i64** %412, align 8
  %414 = add i64 %411, 8
  store i64 %414, i64* %PC, align 8
  %415 = load i64, i64* %413, align 8
  store i64 %415, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %416 = add i64 %409, -48
  %417 = add i64 %411, 12
  store i64 %417, i64* %PC, align 8
  %418 = inttoptr i64 %416 to i64*
  %419 = load i64, i64* %418, align 8
  store i64 %419, i64* %RSI, align 8, !tbaa !2428
  %420 = add i64 %409, -168
  %421 = add i64 %411, 20
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %420 to i64*
  store i64 %415, i64* %422, align 8
  %423 = load i64, i64* %PC, align 8
  %424 = add i64 %423, -604
  %425 = add i64 %423, 5
  %426 = load i64, i64* %RSP, align 8, !tbaa !2428
  %427 = add i64 %426, -8
  %428 = inttoptr i64 %427 to i64*
  store i64 %425, i64* %428, align 8
  store i64 %427, i64* %RSP, align 8, !tbaa !2428
  store i64 %424, i64* %PC, align 8, !tbaa !2428
  %429 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %424, %struct.Memory* %408)
  %430 = load i64, i64* %RBP, align 8
  %431 = add i64 %430, -120
  %432 = load i64, i64* %PC, align 8
  store i64 %431, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %RAX, align 8
  %434 = add i64 %432, 8
  store i64 %434, i64* %PC, align 8
  %435 = inttoptr i64 %431 to i64*
  store i64 %433, i64* %435, align 8
  %436 = load i64, i64* %PC, align 8
  %437 = add i64 %436, -729
  %438 = add i64 %436, 5
  %439 = load i64, i64* %RSP, align 8, !tbaa !2428
  %440 = add i64 %439, -8
  %441 = inttoptr i64 %440 to i64*
  store i64 %438, i64* %441, align 8
  store i64 %440, i64* %RSP, align 8, !tbaa !2428
  store i64 %437, i64* %PC, align 8, !tbaa !2428
  %442 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %437, %struct.Memory* %429)
  %443 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %444 = load i64, i64* %RBP, align 8
  %445 = add i64 %444, -168
  %446 = add i64 %443, 15
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %445 to i64*
  %448 = load i64, i64* %447, align 8
  store i64 %448, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %449 = load i64*, i64** %412, align 8
  %450 = add i64 %443, 19
  store i64 %450, i64* %PC, align 8
  store i64 %448, i64* %449, align 8
  %451 = load i64, i64* %RBP, align 8
  %452 = add i64 %451, -40
  %453 = load i64, i64* %PC, align 8
  %454 = add i64 %453, 4
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %452 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = add i64 %451, -48
  %458 = add i64 %453, 8
  store i64 %458, i64* %PC, align 8
  %459 = inttoptr i64 %457 to i64*
  store i64 %456, i64* %459, align 8
  %460 = load i64, i64* %RBP, align 8
  %461 = add i64 %460, -48
  %462 = load i64, i64* %PC, align 8
  %463 = add i64 %462, 4
  store i64 %463, i64* %PC, align 8
  %464 = inttoptr i64 %461 to i64*
  %465 = load i64, i64* %464, align 8
  %466 = add i64 %465, -1
  store i64 %466, i64* %RAX, align 8, !tbaa !2428
  %467 = icmp eq i64 %465, 0
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %16, align 1, !tbaa !2432
  %469 = trunc i64 %466 to i32
  %470 = and i32 %469, 255
  %471 = tail call i32 @llvm.ctpop.i32(i32 %470) #8
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = xor i8 %473, 1
  store i8 %474, i8* %23, align 1, !tbaa !2446
  %475 = xor i64 %465, %466
  %476 = lshr i64 %475, 4
  %477 = trunc i64 %476 to i8
  %478 = and i8 %477, 1
  store i8 %478, i8* %29, align 1, !tbaa !2447
  %479 = icmp eq i64 %466, 0
  %480 = zext i1 %479 to i8
  store i8 %480, i8* %32, align 1, !tbaa !2448
  %481 = lshr i64 %466, 63
  %482 = trunc i64 %481 to i8
  store i8 %482, i8* %35, align 1, !tbaa !2449
  %483 = lshr i64 %465, 63
  %484 = xor i64 %481, %483
  %485 = add nuw nsw i64 %484, %483
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %41, align 1, !tbaa !2450
  %488 = ashr i64 %466, 63
  store i64 %488, i64* %RDX, align 8, !tbaa !2428
  %489 = load i64, i64* %RSI, align 8
  %490 = add i64 %462, 13
  store i64 %490, i64* %PC, align 8
  %491 = sext i64 %489 to i128
  %492 = and i128 %491, -18446744073709551616
  %493 = zext i64 %488 to i128
  %494 = shl nuw i128 %493, 64
  %495 = zext i64 %466 to i128
  %496 = or i128 %494, %495
  %497 = zext i64 %489 to i128
  %498 = or i128 %492, %497
  %499 = sdiv i128 %496, %498
  %500 = trunc i128 %499 to i64
  %501 = and i128 %499, 18446744073709551615
  %502 = sext i64 %500 to i128
  %503 = and i128 %502, -18446744073709551616
  %504 = or i128 %503, %501
  %505 = icmp eq i128 %499, %504
  br i1 %505, label %508, label %506

; <label>:506:                                    ; preds = %block_40498e
  %507 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %490, %struct.Memory* %442) #9
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i64, i64* %RAX, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:508:                                    ; preds = %block_40498e
  %509 = srem i128 %496, %498
  %510 = trunc i128 %509 to i64
  store i64 %500, i64* %621, align 8, !tbaa !2428
  store i64 %510, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %16, align 1, !tbaa !2432
  store i8 0, i8* %23, align 1, !tbaa !2446
  store i8 0, i8* %29, align 1, !tbaa !2447
  store i8 0, i8* %32, align 1, !tbaa !2448
  store i8 0, i8* %35, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %508, %506
  %511 = phi i64 [ %.pre14, %506 ], [ %490, %508 ]
  %512 = phi i64 [ %.pre13, %506 ], [ %500, %508 ]
  %513 = phi i64 [ %.pre12, %506 ], [ %460, %508 ]
  %514 = phi %struct.Memory* [ %507, %506 ], [ %442, %508 ]
  %515 = add i64 %513, -40
  %516 = add i64 %511, 4
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %515 to i64*
  store i64 %512, i64* %517, align 8
  %518 = load i64, i64* %PC, align 8
  %519 = add i64 %518, -199
  store i64 %519, i64* %PC, align 8, !tbaa !2428
  br label %block_404933

block_404989:                                     ; preds = %block_40497b
  %520 = add i64 %225, -32
  %521 = add i64 %237, 127
  store i64 %521, i64* %PC, align 8
  %522 = inttoptr i64 %520 to i64*
  %523 = load i64, i64* %522, align 8
  store i64 %523, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %524 = add i64 %225, -48
  %525 = add i64 %237, 131
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %524 to i64*
  %527 = load i64, i64* %526, align 8
  store i64 %527, i64* %RSI, align 8, !tbaa !2428
  %528 = add i64 %225, -176
  %529 = add i64 %237, 139
  store i64 %529, i64* %PC, align 8
  %530 = inttoptr i64 %528 to i64*
  store i64 %523, i64* %530, align 8
  %531 = load i64, i64* %PC, align 8
  %532 = add i64 %531, -692
  %533 = add i64 %531, 5
  %534 = load i64, i64* %RSP, align 8, !tbaa !2428
  %535 = add i64 %534, -8
  %536 = inttoptr i64 %535 to i64*
  store i64 %533, i64* %536, align 8
  store i64 %535, i64* %RSP, align 8, !tbaa !2428
  store i64 %532, i64* %PC, align 8, !tbaa !2428
  %537 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %532, %struct.Memory* %MEMORY.0)
  %538 = load i64, i64* %RBP, align 8
  %539 = add i64 %538, -128
  %540 = load i64, i64* %PC, align 8
  store i64 %539, i64* %RDI, align 8, !tbaa !2428
  %541 = load i64, i64* %RAX, align 8
  %542 = add i64 %540, 8
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %539 to i64*
  store i64 %541, i64* %543, align 8
  %544 = load i64, i64* %PC, align 8
  %545 = add i64 %544, -817
  %546 = add i64 %544, 5
  %547 = load i64, i64* %RSP, align 8, !tbaa !2428
  %548 = add i64 %547, -8
  %549 = inttoptr i64 %548 to i64*
  store i64 %546, i64* %549, align 8
  store i64 %548, i64* %RSP, align 8, !tbaa !2428
  store i64 %545, i64* %PC, align 8, !tbaa !2428
  %550 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %545, %struct.Memory* %537)
  %551 = load i64, i64* %RBP, align 8
  %552 = add i64 %551, -176
  %553 = load i64, i64* %PC, align 8
  %554 = add i64 %553, 8
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %552 to i64*
  %556 = load i64, i64* %555, align 8
  store i64 %556, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %557 = bitcast %union.anon* %3 to i64**
  %558 = load i64*, i64** %557, align 8
  %559 = add i64 %553, 12
  store i64 %559, i64* %PC, align 8
  store i64 %556, i64* %558, align 8
  %560 = load i64, i64* %RSP, align 8
  %561 = load i64, i64* %PC, align 8
  %562 = add i64 %560, 176
  store i64 %562, i64* %RSP, align 8, !tbaa !2428
  %563 = icmp ugt i64 %560, -177
  %564 = zext i1 %563 to i8
  store i8 %564, i8* %16, align 1, !tbaa !2432
  %565 = trunc i64 %562 to i32
  %566 = and i32 %565, 255
  %567 = tail call i32 @llvm.ctpop.i32(i32 %566) #8
  %568 = trunc i32 %567 to i8
  %569 = and i8 %568, 1
  %570 = xor i8 %569, 1
  store i8 %570, i8* %23, align 1, !tbaa !2446
  %571 = xor i64 %560, 16
  %572 = xor i64 %571, %562
  %573 = lshr i64 %572, 4
  %574 = trunc i64 %573 to i8
  %575 = and i8 %574, 1
  store i8 %575, i8* %29, align 1, !tbaa !2447
  %576 = icmp eq i64 %562, 0
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %32, align 1, !tbaa !2448
  %578 = lshr i64 %562, 63
  %579 = trunc i64 %578 to i8
  store i8 %579, i8* %35, align 1, !tbaa !2449
  %580 = lshr i64 %560, 63
  %581 = xor i64 %578, %580
  %582 = add nuw nsw i64 %581, %578
  %583 = icmp eq i64 %582, 2
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %41, align 1, !tbaa !2450
  %585 = add i64 %561, 8
  store i64 %585, i64* %PC, align 8
  %586 = add i64 %560, 184
  %587 = inttoptr i64 %562 to i64*
  %588 = load i64, i64* %587, align 8
  store i64 %588, i64* %RBP, align 8, !tbaa !2428
  store i64 %586, i64* %RSP, align 8, !tbaa !2428
  %589 = add i64 %561, 9
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %586 to i64*
  %591 = load i64, i64* %590, align 8
  store i64 %591, i64* %PC, align 8, !tbaa !2428
  %592 = add i64 %560, 192
  store i64 %592, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %550

block_404918:                                     ; preds = %block_4048ab, %block_4048b9
  %593 = phi i64 [ %875, %block_4048ab ], [ %.pre4, %block_4048b9 ]
  %594 = phi i64 [ %989, %block_4048ab ], [ %.pre3, %block_4048b9 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4048ab ], [ %184, %block_4048b9 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %595 = add i64 %593, -48
  %596 = add i64 %594, 11
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i64*
  %598 = load i64, i64* %597, align 8
  %599 = add i64 %598, -1
  %600 = icmp eq i64 %598, 0
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %16, align 1, !tbaa !2432
  %602 = trunc i64 %599 to i32
  %603 = and i32 %602, 255
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603) #8
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %23, align 1, !tbaa !2446
  %608 = xor i64 %598, %599
  %609 = lshr i64 %608, 4
  %610 = trunc i64 %609 to i8
  %611 = and i8 %610, 1
  store i8 %611, i8* %29, align 1, !tbaa !2447
  %612 = icmp eq i64 %599, 0
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %32, align 1, !tbaa !2448
  %614 = lshr i64 %599, 63
  %615 = trunc i64 %614 to i8
  store i8 %615, i8* %35, align 1, !tbaa !2449
  %616 = lshr i64 %598, 63
  %617 = xor i64 %614, %616
  %618 = add nuw nsw i64 %617, %616
  %619 = icmp eq i64 %618, 2
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %41, align 1, !tbaa !2450
  store i64 %599, i64* %RAX, align 8, !tbaa !2428
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %622 = ashr i64 %599, 63
  store i64 %622, i64* %RDX, align 8, !tbaa !2428
  %623 = add i64 %594, 23
  store i64 %623, i64* %PC, align 8
  %624 = zext i64 %622 to i128
  %625 = shl nuw i128 %624, 64
  %626 = zext i64 %599 to i128
  %627 = or i128 %625, %626
  %628 = sdiv i128 %627, 2
  %629 = trunc i128 %628 to i64
  %630 = and i128 %628, 18446744073709551615
  %631 = sext i64 %629 to i128
  %632 = and i128 %631, -18446744073709551616
  %633 = or i128 %632, %630
  %634 = icmp eq i128 %628, %633
  br i1 %634, label %637, label %635

; <label>:635:                                    ; preds = %block_404918
  %636 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %623, %struct.Memory* %MEMORY.1) #9
  %.pre5 = load i64, i64* %RBP, align 8
  %.pre6 = load i64, i64* %RAX, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:637:                                    ; preds = %block_404918
  %638 = srem i128 %627, 2
  %639 = trunc i128 %638 to i64
  store i64 %629, i64* %621, align 8, !tbaa !2428
  store i64 %639, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %16, align 1, !tbaa !2432
  store i8 0, i8* %23, align 1, !tbaa !2446
  store i8 0, i8* %29, align 1, !tbaa !2447
  store i8 0, i8* %32, align 1, !tbaa !2448
  store i8 0, i8* %35, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %637, %635
  %640 = phi i64 [ %.pre7, %635 ], [ %623, %637 ]
  %641 = phi i64 [ %.pre6, %635 ], [ %629, %637 ]
  %642 = phi i64 [ %.pre5, %635 ], [ %593, %637 ]
  %643 = phi %struct.Memory* [ %636, %635 ], [ %MEMORY.1, %637 ]
  %644 = add i64 %642, -40
  %645 = add i64 %640, 4
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %644 to i64*
  store i64 %641, i64* %646, align 8
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_404933

block_40483b:                                     ; preds = %block_40482f, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %647 = phi i64 [ %.pre2, %block_40482f ], [ %356, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2 ]
  %648 = load i64, i64* %RBP, align 8
  %649 = add i64 %648, -8
  store i64 %649, i64* %RDI, align 8, !tbaa !2428
  %650 = add i64 %648, -40
  %651 = add i64 %647, 8
  store i64 %651, i64* %PC, align 8
  %652 = inttoptr i64 %650 to i64*
  %653 = load i64, i64* %652, align 8
  %654 = add i64 %653, -1
  store i64 %654, i64* %RAX, align 8, !tbaa !2428
  %655 = icmp eq i64 %653, 0
  %656 = zext i1 %655 to i8
  store i8 %656, i8* %16, align 1, !tbaa !2432
  %657 = trunc i64 %654 to i32
  %658 = and i32 %657, 255
  %659 = tail call i32 @llvm.ctpop.i32(i32 %658) #8
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  store i8 %662, i8* %23, align 1, !tbaa !2446
  %663 = xor i64 %653, %654
  %664 = lshr i64 %663, 4
  %665 = trunc i64 %664 to i8
  %666 = and i8 %665, 1
  store i8 %666, i8* %29, align 1, !tbaa !2447
  %667 = icmp eq i64 %654, 0
  %668 = zext i1 %667 to i8
  store i8 %668, i8* %32, align 1, !tbaa !2448
  %669 = lshr i64 %654, 63
  %670 = trunc i64 %669 to i8
  store i8 %670, i8* %35, align 1, !tbaa !2449
  %671 = lshr i64 %653, 63
  %672 = xor i64 %669, %671
  %673 = add nuw nsw i64 %672, %671
  %674 = icmp eq i64 %673, 2
  %675 = zext i1 %674 to i8
  store i8 %675, i8* %41, align 1, !tbaa !2450
  store i64 %654, i64* %RSI, align 8, !tbaa !2428
  %676 = add i64 %647, -219
  %677 = add i64 %647, 20
  %678 = load i64, i64* %RSP, align 8, !tbaa !2428
  %679 = add i64 %678, -8
  %680 = inttoptr i64 %679 to i64*
  store i64 %677, i64* %680, align 8
  store i64 %679, i64* %RSP, align 8, !tbaa !2428
  store i64 %676, i64* %PC, align 8, !tbaa !2428
  %681 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %676, %struct.Memory* %351)
  %682 = load i64, i64* %RBP, align 8
  %683 = add i64 %682, -72
  %684 = load i64, i64* %PC, align 8
  store i64 %683, i64* %RDI, align 8, !tbaa !2428
  %685 = load i64, i64* %RAX, align 8
  %686 = add i64 %684, 8
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %683 to i64*
  store i64 %685, i64* %687, align 8
  %688 = load i64, i64* %PC, align 8
  %689 = add i64 %688, -359
  %690 = add i64 %688, 5
  %691 = load i64, i64* %RSP, align 8, !tbaa !2428
  %692 = add i64 %691, -8
  %693 = inttoptr i64 %692 to i64*
  store i64 %690, i64* %693, align 8
  store i64 %692, i64* %RSP, align 8, !tbaa !2428
  store i64 %689, i64* %PC, align 8, !tbaa !2428
  %694 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %689, %struct.Memory* %681)
  %695 = load i64, i64* %RBP, align 8
  %696 = add i64 %695, -8
  %697 = load i64, i64* %PC, align 8
  store i64 %696, i64* %RDI, align 8, !tbaa !2428
  %698 = load i64*, i64** %286, align 8
  %699 = add i64 %697, 8
  store i64 %699, i64* %PC, align 8
  %700 = load i64, i64* %698, align 8
  store i64 %700, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %701 = add i64 %695, -48
  %702 = add i64 %697, 12
  store i64 %702, i64* %PC, align 8
  %703 = inttoptr i64 %701 to i64*
  %704 = load i64, i64* %703, align 8
  store i64 %704, i64* %RSI, align 8, !tbaa !2428
  %705 = add i64 %695, -144
  %706 = add i64 %697, 20
  store i64 %706, i64* %PC, align 8
  %707 = inttoptr i64 %705 to i64*
  store i64 %700, i64* %707, align 8
  %708 = load i64, i64* %PC, align 8
  %709 = add i64 %708, -272
  %710 = add i64 %708, 5
  %711 = load i64, i64* %RSP, align 8, !tbaa !2428
  %712 = add i64 %711, -8
  %713 = inttoptr i64 %712 to i64*
  store i64 %710, i64* %713, align 8
  store i64 %712, i64* %RSP, align 8, !tbaa !2428
  store i64 %709, i64* %PC, align 8, !tbaa !2428
  %714 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %709, %struct.Memory* %694)
  %715 = load i64, i64* %RBP, align 8
  %716 = add i64 %715, -80
  %717 = load i64, i64* %PC, align 8
  store i64 %716, i64* %RDI, align 8, !tbaa !2428
  %718 = load i64, i64* %RAX, align 8
  %719 = add i64 %717, 8
  store i64 %719, i64* %PC, align 8
  %720 = inttoptr i64 %716 to i64*
  store i64 %718, i64* %720, align 8
  %721 = load i64, i64* %PC, align 8
  %722 = add i64 %721, -397
  %723 = add i64 %721, 5
  %724 = load i64, i64* %RSP, align 8, !tbaa !2428
  %725 = add i64 %724, -8
  %726 = inttoptr i64 %725 to i64*
  store i64 %723, i64* %726, align 8
  store i64 %725, i64* %RSP, align 8, !tbaa !2428
  store i64 %722, i64* %PC, align 8, !tbaa !2428
  %727 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %722, %struct.Memory* %714)
  %728 = load i64, i64* %RBP, align 8
  %729 = add i64 %728, -144
  %730 = load i64, i64* %PC, align 8
  %731 = add i64 %730, 8
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %729 to i64*
  %733 = load i64, i64* %732, align 8
  store i64 %733, i64* %62, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %734 = load i64*, i64** %286, align 8
  %735 = add i64 %730, 12
  store i64 %735, i64* %PC, align 8
  store i64 %733, i64* %734, align 8
  %736 = load i64, i64* %RBP, align 8
  %737 = add i64 %736, -40
  %738 = load i64, i64* %PC, align 8
  %739 = add i64 %738, 4
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740, align 8
  %742 = add i64 %741, -1
  store i64 %742, i64* %RAX, align 8, !tbaa !2428
  %743 = icmp eq i64 %741, 0
  %744 = zext i1 %743 to i8
  store i8 %744, i8* %16, align 1, !tbaa !2432
  %745 = trunc i64 %742 to i32
  %746 = and i32 %745, 255
  %747 = tail call i32 @llvm.ctpop.i32(i32 %746) #8
  %748 = trunc i32 %747 to i8
  %749 = and i8 %748, 1
  %750 = xor i8 %749, 1
  store i8 %750, i8* %23, align 1, !tbaa !2446
  %751 = xor i64 %741, %742
  %752 = lshr i64 %751, 4
  %753 = trunc i64 %752 to i8
  %754 = and i8 %753, 1
  store i8 %754, i8* %29, align 1, !tbaa !2447
  %755 = icmp eq i64 %742, 0
  %756 = zext i1 %755 to i8
  store i8 %756, i8* %32, align 1, !tbaa !2448
  %757 = lshr i64 %742, 63
  %758 = trunc i64 %757 to i8
  store i8 %758, i8* %35, align 1, !tbaa !2449
  %759 = lshr i64 %741, 63
  %760 = xor i64 %757, %759
  %761 = add nuw nsw i64 %760, %759
  %762 = icmp eq i64 %761, 2
  %763 = zext i1 %762 to i8
  store i8 %763, i8* %41, align 1, !tbaa !2450
  %764 = add i64 %736, -48
  %765 = add i64 %738, 12
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %764 to i64*
  store i64 %742, i64* %766, align 8
  %767 = load i64, i64* %RBP, align 8
  %768 = add i64 %767, -40
  %769 = load i64, i64* %PC, align 8
  %770 = add i64 %769, 4
  store i64 %770, i64* %PC, align 8
  %771 = inttoptr i64 %768 to i64*
  %772 = load i64, i64* %771, align 8
  store i64 %772, i64* %RAX, align 8, !tbaa !2428
  %773 = add i64 %769, 8
  store i64 %773, i64* %PC, align 8
  %774 = load i64, i64* %771, align 8
  %775 = add i64 %774, %772
  store i64 %775, i64* %RAX, align 8, !tbaa !2428
  %776 = icmp ult i64 %775, %772
  %777 = icmp ult i64 %775, %774
  %778 = or i1 %776, %777
  %779 = zext i1 %778 to i8
  store i8 %779, i8* %16, align 1, !tbaa !2432
  %780 = trunc i64 %775 to i32
  %781 = and i32 %780, 255
  %782 = tail call i32 @llvm.ctpop.i32(i32 %781) #8
  %783 = trunc i32 %782 to i8
  %784 = and i8 %783, 1
  %785 = xor i8 %784, 1
  store i8 %785, i8* %23, align 1, !tbaa !2446
  %786 = xor i64 %774, %772
  %787 = xor i64 %786, %775
  %788 = lshr i64 %787, 4
  %789 = trunc i64 %788 to i8
  %790 = and i8 %789, 1
  store i8 %790, i8* %29, align 1, !tbaa !2447
  %791 = icmp eq i64 %775, 0
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %32, align 1, !tbaa !2448
  %793 = lshr i64 %775, 63
  %794 = trunc i64 %793 to i8
  store i8 %794, i8* %35, align 1, !tbaa !2449
  %795 = lshr i64 %772, 63
  %796 = lshr i64 %774, 63
  %797 = xor i64 %793, %795
  %798 = xor i64 %793, %796
  %799 = add nuw nsw i64 %797, %798
  %800 = icmp eq i64 %799, 2
  %801 = zext i1 %800 to i8
  store i8 %801, i8* %41, align 1, !tbaa !2450
  %802 = add i64 %769, 12
  store i64 %802, i64* %PC, align 8
  store i64 %775, i64* %771, align 8
  %803 = load i64, i64* %PC, align 8
  %804 = add i64 %803, -226
  store i64 %804, i64* %PC, align 8, !tbaa !2428
  br label %block_4047c4

block_40494b:                                     ; preds = %block_404933
  %805 = load i64, i64* %RBP, align 8
  %806 = add i64 %805, -8
  store i64 %806, i64* %RDI, align 8, !tbaa !2428
  %807 = add i64 %805, -40
  %808 = add i64 %959, 8
  store i64 %808, i64* %PC, align 8
  %809 = inttoptr i64 %807 to i64*
  %810 = load i64, i64* %809, align 8
  store i64 %810, i64* %RSI, align 8, !tbaa !2428
  %811 = add i64 %959, -491
  %812 = add i64 %959, 13
  %813 = load i64, i64* %RSP, align 8, !tbaa !2428
  %814 = add i64 %813, -8
  %815 = inttoptr i64 %814 to i64*
  store i64 %812, i64* %815, align 8
  store i64 %814, i64* %RSP, align 8, !tbaa !2428
  store i64 %811, i64* %PC, align 8, !tbaa !2428
  %816 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l_renamed_(%struct.State* nonnull %0, i64 %811, %struct.Memory* %MEMORY.4)
  %817 = load i64, i64* %RBP, align 8
  %818 = add i64 %817, -104
  %819 = load i64, i64* %PC, align 8
  store i64 %818, i64* %RDI, align 8, !tbaa !2428
  %820 = load i64, i64* %RAX, align 8
  %821 = add i64 %819, 8
  store i64 %821, i64* %PC, align 8
  %822 = inttoptr i64 %818 to i64*
  store i64 %820, i64* %822, align 8
  %823 = load i64, i64* %PC, align 8
  %824 = add i64 %823, -624
  %825 = add i64 %823, 5
  %826 = load i64, i64* %RSP, align 8, !tbaa !2428
  %827 = add i64 %826, -8
  %828 = inttoptr i64 %827 to i64*
  store i64 %825, i64* %828, align 8
  store i64 %827, i64* %RSP, align 8, !tbaa !2428
  store i64 %824, i64* %PC, align 8, !tbaa !2428
  %829 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv_renamed_(%struct.State* nonnull %0, i64 %824, %struct.Memory* %816)
  %830 = bitcast %union.anon* %3 to double**
  %831 = load double*, double** %830, align 8
  %832 = load i64, i64* %PC, align 8
  %833 = add i64 %832, 4
  store i64 %833, i64* %PC, align 8
  %834 = load double, double* %831, align 8
  store double %834, double* %101, align 1, !tbaa !2451
  store double 0.000000e+00, double* %103, align 1, !tbaa !2451
  %835 = load i64, i64* %RBP, align 8
  %836 = add i64 %835, -32
  %837 = add i64 %832, 9
  store i64 %837, i64* %PC, align 8
  %838 = inttoptr i64 %836 to double*
  %839 = load double, double* %838, align 8
  store double %839, double* %104, align 1, !tbaa !2451
  store double 0.000000e+00, double* %106, align 1, !tbaa !2451
  %840 = add i64 %832, 13
  store i64 %840, i64* %PC, align 8
  %841 = fcmp uno double %839, %834
  br i1 %841, label %842, label %852

; <label>:842:                                    ; preds = %block_40494b
  %843 = fadd double %839, %834
  %844 = bitcast double %843 to i64
  %845 = and i64 %844, 9221120237041090560
  %846 = icmp eq i64 %845, 9218868437227405312
  %847 = and i64 %844, 2251799813685247
  %848 = icmp ne i64 %847, 0
  %849 = and i1 %846, %848
  br i1 %849, label %850, label %858

; <label>:850:                                    ; preds = %842
  %851 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %840, %struct.Memory* %829) #9
  %.pre9 = load i64, i64* %PC, align 8
  %.pre10 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:852:                                    ; preds = %block_40494b
  %853 = fcmp ogt double %839, %834
  br i1 %853, label %858, label %854

; <label>:854:                                    ; preds = %852
  %855 = fcmp olt double %839, %834
  br i1 %855, label %858, label %856

; <label>:856:                                    ; preds = %854
  %857 = fcmp oeq double %839, %834
  br i1 %857, label %858, label %862

; <label>:858:                                    ; preds = %856, %854, %852, %842
  %859 = phi i8 [ 0, %852 ], [ 0, %854 ], [ 1, %856 ], [ 1, %842 ]
  %860 = phi i8 [ 0, %852 ], [ 0, %854 ], [ 0, %856 ], [ 1, %842 ]
  %861 = phi i8 [ 0, %852 ], [ 1, %854 ], [ 0, %856 ], [ 1, %842 ]
  store i8 %859, i8* %32, align 1, !tbaa !2453
  store i8 %860, i8* %23, align 1, !tbaa !2453
  store i8 %861, i8* %16, align 1, !tbaa !2453
  br label %862

; <label>:862:                                    ; preds = %858, %856
  store i8 0, i8* %41, align 1, !tbaa !2453
  store i8 0, i8* %35, align 1, !tbaa !2453
  store i8 0, i8* %29, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %862, %850
  %863 = phi i64 [ %.pre10, %850 ], [ %835, %862 ]
  %864 = phi i64 [ %.pre9, %850 ], [ %840, %862 ]
  %865 = phi %struct.Memory* [ %851, %850 ], [ %829, %862 ]
  %866 = load i8, i8* %16, align 1, !tbaa !2432
  %867 = load i8, i8* %32, align 1, !tbaa !2448
  %868 = or i8 %867, %866
  %869 = icmp eq i8 %868, 0
  %870 = zext i1 %869 to i8
  store i8 %870, i8* %CL, align 1, !tbaa !2453
  %871 = add i64 %863, -153
  %872 = add i64 %864, 9
  store i64 %872, i64* %PC, align 8
  %873 = inttoptr i64 %871 to i8*
  store i8 %870, i8* %873, align 1
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_40497b

block_4047c4:                                     ; preds = %block_40483b, %block_404790
  %874 = phi i64 [ %.pre, %block_404790 ], [ %804, %block_40483b ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_404790 ], [ %727, %block_40483b ]
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -40
  %877 = add i64 %874, 4
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  %879 = load i64, i64* %878, align 8
  store i64 %879, i64* %RAX, align 8, !tbaa !2428
  %880 = add i64 %875, -16
  %881 = add i64 %874, 8
  store i64 %881, i64* %PC, align 8
  %882 = inttoptr i64 %880 to i64*
  %883 = load i64, i64* %882, align 8
  %884 = sub i64 %879, %883
  %885 = icmp ult i64 %879, %883
  %886 = zext i1 %885 to i8
  store i8 %886, i8* %16, align 1, !tbaa !2432
  %887 = trunc i64 %884 to i32
  %888 = and i32 %887, 255
  %889 = tail call i32 @llvm.ctpop.i32(i32 %888) #8
  %890 = trunc i32 %889 to i8
  %891 = and i8 %890, 1
  %892 = xor i8 %891, 1
  store i8 %892, i8* %23, align 1, !tbaa !2446
  %893 = xor i64 %883, %879
  %894 = xor i64 %893, %884
  %895 = lshr i64 %894, 4
  %896 = trunc i64 %895 to i8
  %897 = and i8 %896, 1
  store i8 %897, i8* %29, align 1, !tbaa !2447
  %898 = icmp eq i64 %884, 0
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %32, align 1, !tbaa !2448
  %900 = lshr i64 %884, 63
  %901 = trunc i64 %900 to i8
  store i8 %901, i8* %35, align 1, !tbaa !2449
  %902 = lshr i64 %879, 63
  %903 = lshr i64 %883, 63
  %904 = xor i64 %903, %902
  %905 = xor i64 %900, %902
  %906 = add nuw nsw i64 %905, %904
  %907 = icmp eq i64 %906, 2
  %908 = zext i1 %907 to i8
  store i8 %908, i8* %41, align 1, !tbaa !2450
  %909 = icmp ne i8 %901, 0
  %910 = xor i1 %909, %907
  %.v = select i1 %910, i64 14, i64 231
  %911 = add i64 %874, %.v
  store i64 %911, i64* %PC, align 8, !tbaa !2428
  br i1 %910, label %block_4047d2, label %block_4048ab

block_404933:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %912 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %519, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %MEMORY.4 = phi %struct.Memory* [ %643, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %514, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %16, align 1, !tbaa !2432
  store i8 1, i8* %23, align 1, !tbaa !2446
  store i8 1, i8* %32, align 1, !tbaa !2448
  store i8 0, i8* %35, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %29, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %913 = load i64, i64* %RBP, align 8
  %914 = add i64 %913, -48
  %915 = add i64 %912, 8
  store i64 %915, i64* %PC, align 8
  %916 = inttoptr i64 %914 to i64*
  %917 = load i64, i64* %916, align 8
  store i64 %917, i64* %RDX, align 8, !tbaa !2428
  %918 = add i64 %913, -24
  %919 = add i64 %912, 12
  store i64 %919, i64* %PC, align 8
  %920 = inttoptr i64 %918 to i64*
  %921 = load i64, i64* %920, align 8
  %922 = sub i64 %917, %921
  %923 = icmp ult i64 %917, %921
  %924 = zext i1 %923 to i8
  store i8 %924, i8* %16, align 1, !tbaa !2432
  %925 = trunc i64 %922 to i32
  %926 = and i32 %925, 255
  %927 = tail call i32 @llvm.ctpop.i32(i32 %926) #8
  %928 = trunc i32 %927 to i8
  %929 = and i8 %928, 1
  %930 = xor i8 %929, 1
  store i8 %930, i8* %23, align 1, !tbaa !2446
  %931 = xor i64 %921, %917
  %932 = xor i64 %931, %922
  %933 = lshr i64 %932, 4
  %934 = trunc i64 %933 to i8
  %935 = and i8 %934, 1
  store i8 %935, i8* %29, align 1, !tbaa !2447
  %936 = icmp eq i64 %922, 0
  %937 = zext i1 %936 to i8
  store i8 %937, i8* %32, align 1, !tbaa !2448
  %938 = lshr i64 %922, 63
  %939 = trunc i64 %938 to i8
  store i8 %939, i8* %35, align 1, !tbaa !2449
  %940 = lshr i64 %917, 63
  %941 = lshr i64 %921, 63
  %942 = xor i64 %941, %940
  %943 = xor i64 %938, %940
  %944 = add nuw nsw i64 %943, %942
  %945 = icmp eq i64 %944, 2
  %946 = zext i1 %945 to i8
  store i8 %946, i8* %41, align 1, !tbaa !2450
  %947 = add i64 %913, -153
  %948 = add i64 %912, 18
  store i64 %948, i64* %PC, align 8
  %949 = inttoptr i64 %947 to i8*
  store i8 0, i8* %949, align 1
  %950 = load i64, i64* %PC, align 8
  %951 = load i8, i8* %32, align 1, !tbaa !2448
  %952 = icmp ne i8 %951, 0
  %953 = load i8, i8* %35, align 1, !tbaa !2449
  %954 = icmp ne i8 %953, 0
  %955 = load i8, i8* %41, align 1, !tbaa !2450
  %956 = icmp ne i8 %955, 0
  %957 = xor i1 %954, %956
  %958 = or i1 %952, %957
  %.v17 = select i1 %958, i64 54, i64 6
  %959 = add i64 %950, %.v17
  store i64 %959, i64* %PC, align 8, !tbaa !2428
  br i1 %958, label %block_40497b, label %block_40494b

block_4048ab:                                     ; preds = %block_4047c4
  %960 = add i64 %911, 4
  store i64 %960, i64* %PC, align 8
  %961 = load i64, i64* %878, align 8
  store i64 %961, i64* %RAX, align 8, !tbaa !2428
  %962 = add i64 %911, 8
  store i64 %962, i64* %PC, align 8
  %963 = load i64, i64* %882, align 8
  %964 = sub i64 %961, %963
  %965 = icmp ult i64 %961, %963
  %966 = zext i1 %965 to i8
  store i8 %966, i8* %16, align 1, !tbaa !2432
  %967 = trunc i64 %964 to i32
  %968 = and i32 %967, 255
  %969 = tail call i32 @llvm.ctpop.i32(i32 %968) #8
  %970 = trunc i32 %969 to i8
  %971 = and i8 %970, 1
  %972 = xor i8 %971, 1
  store i8 %972, i8* %23, align 1, !tbaa !2446
  %973 = xor i64 %963, %961
  %974 = xor i64 %973, %964
  %975 = lshr i64 %974, 4
  %976 = trunc i64 %975 to i8
  %977 = and i8 %976, 1
  store i8 %977, i8* %29, align 1, !tbaa !2447
  %978 = icmp eq i64 %964, 0
  %979 = zext i1 %978 to i8
  store i8 %979, i8* %32, align 1, !tbaa !2448
  %980 = lshr i64 %964, 63
  %981 = trunc i64 %980 to i8
  store i8 %981, i8* %35, align 1, !tbaa !2449
  %982 = lshr i64 %961, 63
  %983 = lshr i64 %963, 63
  %984 = xor i64 %983, %982
  %985 = xor i64 %980, %982
  %986 = add nuw nsw i64 %985, %984
  %987 = icmp eq i64 %986, 2
  %988 = zext i1 %987 to i8
  store i8 %988, i8* %41, align 1, !tbaa !2450
  %.v16 = select i1 %978, i64 14, i64 109
  %989 = add i64 %911, %.v16
  store i64 %989, i64* %PC, align 8, !tbaa !2428
  br i1 %978, label %block_4048b9, label %block_404918
}

; Function Attrs: noinline
define %struct.Memory* @sub_406070__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406070:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402eb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_402f10__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__renamed_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2432
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #8
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2446
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %84, %.v
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_402f00, label %block_402ee5

block_402ee5:                                     ; preds = %block_402eb0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406700__rodata_type* @seg_406700__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %95 = add i64 %92, -10293
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402f00

block_402f00:                                     ; preds = %block_402ee5, %block_402eb0
  %107 = phi i64 [ %92, %block_402eb0 ], [ %.pre, %block_402ee5 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_402eb0 ], [ %100, %block_402ee5 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2432
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2446
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2447
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2448
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2449
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2450
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_402950__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402950:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402978

block_4029c1:                                     ; preds = %block_402978
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402988:                                     ; preds = %block_402978
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 8376
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a40__ZN9benchmark4copyIPdS1_EEvT_S2_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 8439
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_404a90__ZN9benchmark8heapsortIPddEEvT_S2__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 8666
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404b80__Z13verify_sortedIPdEvT_S1__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402978

block_402978:                                     ; preds = %block_402988, %block_402950
  %190 = phi i64 [ %.pre, %block_402950 ], [ %189, %block_402988 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402950 ], [ %157, %block_402988 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402988, label %block_4029c1
}

; Function Attrs: noinline
define %struct.Memory* @sub_406590__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406590:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4065c0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a10___cxx_global_var_init_22(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400a10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10Pb_type* @DV10Pb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4479
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401b90__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__renamed_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_403d30__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403d30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -184
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 176
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RSI, align 8
  %42 = add i64 %10, 14
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 5
  store i64 %47, i64* %PC, align 8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %49 = load i64, i64* %48, align 1
  %50 = inttoptr i64 %45 to i64*
  store i64 %49, i64* %50, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -24
  %53 = load i64, i64* %RDI, align 8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -32
  %59 = load i64, i64* %RDX, align 8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62, align 8
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -32
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RDX, align 8, !tbaa !2428
  %69 = add i64 %63, -48
  %70 = add i64 %65, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -48
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = add i64 %77, 1
  %79 = shl i64 %78, 1
  %80 = icmp slt i64 %78, 0
  %81 = icmp slt i64 %79, 0
  %82 = xor i1 %80, %81
  store i64 %79, i64* %RDX, align 8, !tbaa !2428
  %.lobit = lshr i64 %78, 63
  %83 = trunc i64 %.lobit to i8
  store i8 %83, i8* %14, align 1, !tbaa !2453
  %84 = trunc i64 %79 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #8
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %27, align 1, !tbaa !2453
  %90 = icmp eq i64 %79, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %30, align 1, !tbaa !2453
  %92 = lshr i64 %78, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %33, align 1, !tbaa !2453
  %95 = zext i1 %82 to i8
  store i8 %95, i8* %39, align 1, !tbaa !2453
  %96 = add i64 %72, -40
  %97 = add i64 %74, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %79, i64* %98, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403d64

block_403e56:                                     ; preds = %block_403e48
  %99 = add i64 %759, -8
  store i64 %99, i64* %RDI, align 8, !tbaa !2428
  %100 = add i64 %629, 8
  store i64 %100, i64* %PC, align 8
  %101 = load i64, i64* %762, align 8
  %102 = add i64 %101, -1
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = icmp eq i64 %101, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %14, align 1, !tbaa !2432
  %105 = trunc i64 %102 to i32
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #8
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %21, align 1, !tbaa !2446
  %111 = xor i64 %101, %102
  %112 = lshr i64 %111, 4
  %113 = trunc i64 %112 to i8
  %114 = and i8 %113, 1
  store i8 %114, i8* %27, align 1, !tbaa !2447
  %115 = icmp eq i64 %102, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %30, align 1, !tbaa !2448
  %117 = lshr i64 %102, 63
  %118 = trunc i64 %117 to i8
  store i8 %118, i8* %33, align 1, !tbaa !2449
  %119 = lshr i64 %101, 63
  %120 = xor i64 %117, %119
  %121 = add nuw nsw i64 %120, %119
  %122 = icmp eq i64 %121, 2
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %39, align 1, !tbaa !2450
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %124 = add i64 %629, -342
  %125 = add i64 %629, 20
  %126 = load i64, i64* %RSP, align 8, !tbaa !2428
  %127 = add i64 %126, -8
  %128 = inttoptr i64 %127 to i64*
  store i64 %125, i64* %128, align 8
  store i64 %127, i64* %RSP, align 8, !tbaa !2428
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  %129 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %124, %struct.Memory* %MEMORY.4)
  %130 = load i64, i64* %RBP, align 8
  %131 = add i64 %130, -88
  %132 = load i64, i64* %PC, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %133 = load i64, i64* %RAX, align 8
  %134 = add i64 %132, 8
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %131 to i64*
  store i64 %133, i64* %135, align 8
  %136 = load i64, i64* %PC, align 8
  %137 = add i64 %136, -482
  %138 = add i64 %136, 5
  %139 = load i64, i64* %RSP, align 8, !tbaa !2428
  %140 = add i64 %139, -8
  %141 = inttoptr i64 %140 to i64*
  store i64 %138, i64* %141, align 8
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  store i64 %137, i64* %PC, align 8, !tbaa !2428
  %142 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %137, %struct.Memory* %129)
  %143 = load i64, i64* %RBP, align 8
  %144 = add i64 %143, -8
  %145 = load i64, i64* %PC, align 8
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %146 = add i64 %143, -48
  %147 = add i64 %145, 8
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %146 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %RSI, align 8, !tbaa !2428
  %150 = add i64 %143, -152
  %151 = load i64, i64* %RAX, align 8
  %152 = add i64 %145, 15
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i64*
  store i64 %151, i64* %153, align 8
  %154 = load i64, i64* %PC, align 8
  %155 = add i64 %154, -390
  %156 = add i64 %154, 5
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %142)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -96
  %163 = load i64, i64* %PC, align 8
  store i64 %162, i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %RAX, align 8
  %165 = add i64 %163, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %162 to i64*
  store i64 %164, i64* %166, align 8
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, -515
  %169 = add i64 %167, 5
  %170 = load i64, i64* %RSP, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %169, i64* %172, align 8
  store i64 %171, i64* %RSP, align 8, !tbaa !2428
  store i64 %168, i64* %PC, align 8, !tbaa !2428
  %173 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %168, %struct.Memory* %160)
  %174 = load i64, i64* %RBP, align 8
  %175 = add i64 %174, -152
  %176 = load i64, i64* %PC, align 8
  %177 = add i64 %176, 7
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %175 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %RSI, align 8, !tbaa !2428
  %180 = add i64 %176, 10
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %183 = bitcast %union.anon* %3 to i64**
  %184 = load i64*, i64** %183, align 8
  %185 = add i64 %176, 13
  store i64 %185, i64* %PC, align 8
  store i64 %182, i64* %184, align 8
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -40
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %187 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = add i64 %191, -1
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = icmp eq i64 %191, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %14, align 1, !tbaa !2432
  %195 = trunc i64 %192 to i32
  %196 = and i32 %195, 255
  %197 = tail call i32 @llvm.ctpop.i32(i32 %196) #8
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  store i8 %200, i8* %21, align 1, !tbaa !2446
  %201 = xor i64 %191, %192
  %202 = lshr i64 %201, 4
  %203 = trunc i64 %202 to i8
  %204 = and i8 %203, 1
  store i8 %204, i8* %27, align 1, !tbaa !2447
  %205 = icmp eq i64 %192, 0
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %30, align 1, !tbaa !2448
  %207 = lshr i64 %192, 63
  %208 = trunc i64 %207 to i8
  store i8 %208, i8* %33, align 1, !tbaa !2449
  %209 = lshr i64 %191, 63
  %210 = xor i64 %207, %209
  %211 = add nuw nsw i64 %210, %209
  %212 = icmp eq i64 %211, 2
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %39, align 1, !tbaa !2450
  %214 = add i64 %186, -48
  %215 = add i64 %188, 12
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  store i64 %192, i64* %216, align 8
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %block_403eb1

block_403d72:                                     ; preds = %block_403d64
  %217 = add i64 %759, -8
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %218 = add i64 %795, 8
  store i64 %218, i64* %PC, align 8
  %219 = load i64, i64* %762, align 8
  %220 = add i64 %219, -1
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp eq i64 %219, 0
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %14, align 1, !tbaa !2432
  %223 = trunc i64 %220 to i32
  %224 = and i32 %223, 255
  %225 = tail call i32 @llvm.ctpop.i32(i32 %224) #8
  %226 = trunc i32 %225 to i8
  %227 = and i8 %226, 1
  %228 = xor i8 %227, 1
  store i8 %228, i8* %21, align 1, !tbaa !2446
  %229 = xor i64 %219, %220
  %230 = lshr i64 %229, 4
  %231 = trunc i64 %230 to i8
  %232 = and i8 %231, 1
  store i8 %232, i8* %27, align 1, !tbaa !2447
  %233 = icmp eq i64 %220, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %30, align 1, !tbaa !2448
  %235 = lshr i64 %220, 63
  %236 = trunc i64 %235 to i8
  store i8 %236, i8* %33, align 1, !tbaa !2449
  %237 = lshr i64 %219, 63
  %238 = xor i64 %235, %237
  %239 = add nuw nsw i64 %238, %237
  %240 = icmp eq i64 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %39, align 1, !tbaa !2450
  store i64 %220, i64* %RSI, align 8, !tbaa !2428
  %242 = add i64 %795, -114
  %243 = add i64 %795, 20
  %244 = load i64, i64* %RSP, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %243, i64* %246, align 8
  store i64 %245, i64* %RSP, align 8, !tbaa !2428
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  %247 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %242, %struct.Memory* %MEMORY.4)
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -56
  %250 = load i64, i64* %PC, align 8
  store i64 %249, i64* %RDI, align 8, !tbaa !2428
  %251 = load i64, i64* %RAX, align 8
  %252 = add i64 %250, 8
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %249 to i64*
  store i64 %251, i64* %253, align 8
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, -254
  %256 = add i64 %254, 5
  %257 = load i64, i64* %RSP, align 8, !tbaa !2428
  %258 = add i64 %257, -8
  %259 = inttoptr i64 %258 to i64*
  store i64 %256, i64* %259, align 8
  store i64 %258, i64* %RSP, align 8, !tbaa !2428
  store i64 %255, i64* %PC, align 8, !tbaa !2428
  %260 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %255, %struct.Memory* %247)
  %261 = load i64, i64* %RBP, align 8
  %262 = add i64 %261, -8
  %263 = load i64, i64* %PC, align 8
  store i64 %262, i64* %RDI, align 8, !tbaa !2428
  %264 = add i64 %261, -40
  %265 = add i64 %263, 8
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i64*
  %267 = load i64, i64* %266, align 8
  store i64 %267, i64* %RSI, align 8, !tbaa !2428
  %268 = add i64 %261, -136
  %269 = load i64, i64* %RAX, align 8
  %270 = add i64 %263, 15
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %268 to i64*
  store i64 %269, i64* %271, align 8
  %272 = load i64, i64* %PC, align 8
  %273 = add i64 %272, -162
  %274 = add i64 %272, 5
  %275 = load i64, i64* %RSP, align 8, !tbaa !2428
  %276 = add i64 %275, -8
  %277 = inttoptr i64 %276 to i64*
  store i64 %274, i64* %277, align 8
  store i64 %276, i64* %RSP, align 8, !tbaa !2428
  store i64 %273, i64* %PC, align 8, !tbaa !2428
  %278 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %273, %struct.Memory* %260)
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -64
  %281 = load i64, i64* %PC, align 8
  store i64 %280, i64* %RDI, align 8, !tbaa !2428
  %282 = load i64, i64* %RAX, align 8
  %283 = add i64 %281, 8
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %280 to i64*
  store i64 %282, i64* %284, align 8
  %285 = load i64, i64* %PC, align 8
  %286 = add i64 %285, -287
  %287 = add i64 %285, 5
  %288 = load i64, i64* %RSP, align 8, !tbaa !2428
  %289 = add i64 %288, -8
  %290 = inttoptr i64 %289 to i64*
  store i64 %287, i64* %290, align 8
  store i64 %289, i64* %RSP, align 8, !tbaa !2428
  store i64 %286, i64* %PC, align 8, !tbaa !2428
  %291 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %286, %struct.Memory* %278)
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -136
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 7
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296, align 8
  store i64 %297, i64* %RDI, align 8, !tbaa !2428
  %298 = load i64, i64* %RAX, align 8
  store i64 %298, i64* %RSI, align 8, !tbaa !2428
  %299 = add i64 %294, -2980
  %300 = add i64 %294, 15
  %301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303, align 8
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  %304 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %299, %struct.Memory* %291)
  %305 = load i8, i8* %AL, align 1
  %306 = load i64, i64* %PC, align 8
  %307 = and i8 %305, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %308 = zext i8 %307 to i32
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308) #8
  %310 = trunc i32 %309 to i8
  %311 = xor i8 %310, 1
  store i8 %311, i8* %21, align 1, !tbaa !2446
  %312 = xor i8 %307, 1
  store i8 %312, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %313 = icmp eq i8 %312, 0
  %.v12 = select i1 %313, i64 13, i64 8
  %314 = add i64 %306, %.v12
  store i64 %314, i64* %PC, align 8, !tbaa !2428
  br i1 %313, label %block_403dd0, label %block_403dcb

block_403ee4:                                     ; preds = %block_403ecc
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  store i64 %316, i64* %RDI, align 8, !tbaa !2428
  %317 = add i64 %315, -40
  %318 = add i64 %677, 8
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RSI, align 8, !tbaa !2428
  %321 = add i64 %677, -484
  %322 = add i64 %677, 13
  %323 = load i64, i64* %RSP, align 8, !tbaa !2428
  %324 = add i64 %323, -8
  %325 = inttoptr i64 %324 to i64*
  store i64 %322, i64* %325, align 8
  store i64 %324, i64* %RSP, align 8, !tbaa !2428
  store i64 %321, i64* %PC, align 8, !tbaa !2428
  %326 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %321, %struct.Memory* %MEMORY.2)
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -104
  %329 = load i64, i64* %PC, align 8
  store i64 %328, i64* %RDI, align 8, !tbaa !2428
  %330 = load i64, i64* %RAX, align 8
  %331 = add i64 %329, 8
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %328 to i64*
  store i64 %330, i64* %332, align 8
  %333 = load i64, i64* %PC, align 8
  %334 = add i64 %333, -617
  %335 = add i64 %333, 5
  %336 = load i64, i64* %RSP, align 8, !tbaa !2428
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338, align 8
  store i64 %337, i64* %RSP, align 8, !tbaa !2428
  store i64 %334, i64* %PC, align 8, !tbaa !2428
  %339 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %334, %struct.Memory* %326)
  %340 = load i64, i64* %RBP, align 8
  %341 = add i64 %340, -16
  %342 = load i64, i64* %PC, align 8
  store i64 %341, i64* %RSI, align 8, !tbaa !2428
  %343 = load i64, i64* %RAX, align 8
  store i64 %343, i64* %RDI, align 8, !tbaa !2428
  %344 = add i64 %342, -3310
  %345 = add i64 %342, 12
  %346 = load i64, i64* %RSP, align 8, !tbaa !2428
  %347 = add i64 %346, -8
  %348 = inttoptr i64 %347 to i64*
  store i64 %345, i64* %348, align 8
  store i64 %347, i64* %RSP, align 8, !tbaa !2428
  store i64 %344, i64* %PC, align 8, !tbaa !2428
  %349 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %344, %struct.Memory* %339)
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -153
  %352 = load i8, i8* %AL, align 1
  %353 = load i64, i64* %PC, align 8
  %354 = add i64 %353, 6
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %351 to i8*
  store i8 %352, i8* %355, align 1
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_403f10

block_403eb1:                                     ; preds = %block_403e48, %block_403e56
  %356 = phi i64 [ %759, %block_403e48 ], [ %.pre3, %block_403e56 ]
  %357 = phi i64 [ %629, %block_403e48 ], [ %.pre2, %block_403e56 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_403e48 ], [ %173, %block_403e56 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %358 = add i64 %356, -48
  %359 = add i64 %357, 11
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = add i64 %361, -1
  %363 = icmp eq i64 %361, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %14, align 1, !tbaa !2432
  %365 = trunc i64 %362 to i32
  %366 = and i32 %365, 255
  %367 = tail call i32 @llvm.ctpop.i32(i32 %366) #8
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  store i8 %370, i8* %21, align 1, !tbaa !2446
  %371 = xor i64 %361, %362
  %372 = lshr i64 %371, 4
  %373 = trunc i64 %372 to i8
  %374 = and i8 %373, 1
  store i8 %374, i8* %27, align 1, !tbaa !2447
  %375 = icmp eq i64 %362, 0
  %376 = zext i1 %375 to i8
  store i8 %376, i8* %30, align 1, !tbaa !2448
  %377 = lshr i64 %362, 63
  %378 = trunc i64 %377 to i8
  store i8 %378, i8* %33, align 1, !tbaa !2449
  %379 = lshr i64 %361, 63
  %380 = xor i64 %377, %379
  %381 = add nuw nsw i64 %380, %379
  %382 = icmp eq i64 %381, 2
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %39, align 1, !tbaa !2450
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %385 = ashr i64 %362, 63
  store i64 %385, i64* %RDX, align 8, !tbaa !2428
  %386 = add i64 %357, 23
  store i64 %386, i64* %PC, align 8
  %387 = zext i64 %385 to i128
  %388 = shl nuw i128 %387, 64
  %389 = zext i64 %362 to i128
  %390 = or i128 %388, %389
  %391 = sdiv i128 %390, 2
  %392 = trunc i128 %391 to i64
  %393 = and i128 %391, 18446744073709551615
  %394 = sext i64 %392 to i128
  %395 = and i128 %394, -18446744073709551616
  %396 = or i128 %395, %393
  %397 = icmp eq i128 %391, %396
  br i1 %397, label %400, label %398

; <label>:398:                                    ; preds = %block_403eb1
  %399 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %386, %struct.Memory* %MEMORY.0) #9
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:400:                                    ; preds = %block_403eb1
  %401 = srem i128 %390, 2
  %402 = trunc i128 %401 to i64
  store i64 %392, i64* %384, align 8, !tbaa !2428
  store i64 %402, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %400, %398
  %403 = phi i64 [ %.pre6, %398 ], [ %386, %400 ]
  %404 = phi i64 [ %.pre5, %398 ], [ %392, %400 ]
  %405 = phi i64 [ %.pre4, %398 ], [ %356, %400 ]
  %406 = phi %struct.Memory* [ %399, %398 ], [ %MEMORY.0, %400 ]
  %407 = add i64 %405, -40
  %408 = add i64 %403, 4
  store i64 %408, i64* %PC, align 8
  %409 = inttoptr i64 %407 to i64*
  store i64 %404, i64* %409, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_403ecc

block_403dd0:                                     ; preds = %block_403d72
  %410 = load i64, i64* %RBP, align 8
  %411 = add i64 %410, -40
  %412 = add i64 %314, 4
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = add i64 %414, 1
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = icmp eq i64 %414, -1
  %417 = icmp eq i64 %415, 0
  %418 = or i1 %416, %417
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %14, align 1, !tbaa !2432
  %420 = trunc i64 %415 to i32
  %421 = and i32 %420, 255
  %422 = tail call i32 @llvm.ctpop.i32(i32 %421) #8
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  store i8 %425, i8* %21, align 1, !tbaa !2446
  %426 = xor i64 %414, %415
  %427 = lshr i64 %426, 4
  %428 = trunc i64 %427 to i8
  %429 = and i8 %428, 1
  store i8 %429, i8* %27, align 1, !tbaa !2447
  %430 = zext i1 %417 to i8
  store i8 %430, i8* %30, align 1, !tbaa !2448
  %431 = lshr i64 %415, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %33, align 1, !tbaa !2449
  %433 = lshr i64 %414, 63
  %434 = xor i64 %431, %433
  %435 = add nuw nsw i64 %434, %431
  %436 = icmp eq i64 %435, 2
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %39, align 1, !tbaa !2450
  %438 = add i64 %314, 12
  store i64 %438, i64* %PC, align 8
  store i64 %415, i64* %413, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_403ddc

block_403ddc:                                     ; preds = %block_403dcb, %block_403dd0
  %439 = phi i64 [ %599, %block_403dcb ], [ %.pre1, %block_403dd0 ]
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -8
  store i64 %441, i64* %RDI, align 8, !tbaa !2428
  %442 = add i64 %440, -40
  %443 = add i64 %439, 8
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i64*
  %445 = load i64, i64* %444, align 8
  %446 = add i64 %445, -1
  store i64 %446, i64* %RAX, align 8, !tbaa !2428
  %447 = icmp eq i64 %445, 0
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %14, align 1, !tbaa !2432
  %449 = trunc i64 %446 to i32
  %450 = and i32 %449, 255
  %451 = tail call i32 @llvm.ctpop.i32(i32 %450) #8
  %452 = trunc i32 %451 to i8
  %453 = and i8 %452, 1
  %454 = xor i8 %453, 1
  store i8 %454, i8* %21, align 1, !tbaa !2446
  %455 = xor i64 %445, %446
  %456 = lshr i64 %455, 4
  %457 = trunc i64 %456 to i8
  %458 = and i8 %457, 1
  store i8 %458, i8* %27, align 1, !tbaa !2447
  %459 = icmp eq i64 %446, 0
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %30, align 1, !tbaa !2448
  %461 = lshr i64 %446, 63
  %462 = trunc i64 %461 to i8
  store i8 %462, i8* %33, align 1, !tbaa !2449
  %463 = lshr i64 %445, 63
  %464 = xor i64 %461, %463
  %465 = add nuw nsw i64 %464, %463
  %466 = icmp eq i64 %465, 2
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %39, align 1, !tbaa !2450
  store i64 %446, i64* %RSI, align 8, !tbaa !2428
  %468 = add i64 %439, -220
  %469 = add i64 %439, 20
  %470 = load i64, i64* %RSP, align 8, !tbaa !2428
  %471 = add i64 %470, -8
  %472 = inttoptr i64 %471 to i64*
  store i64 %469, i64* %472, align 8
  store i64 %471, i64* %RSP, align 8, !tbaa !2428
  store i64 %468, i64* %PC, align 8, !tbaa !2428
  %473 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %468, %struct.Memory* %304)
  %474 = load i64, i64* %RBP, align 8
  %475 = add i64 %474, -72
  %476 = load i64, i64* %PC, align 8
  store i64 %475, i64* %RDI, align 8, !tbaa !2428
  %477 = load i64, i64* %RAX, align 8
  %478 = add i64 %476, 8
  store i64 %478, i64* %PC, align 8
  %479 = inttoptr i64 %475 to i64*
  store i64 %477, i64* %479, align 8
  %480 = load i64, i64* %PC, align 8
  %481 = add i64 %480, -360
  %482 = add i64 %480, 5
  %483 = load i64, i64* %RSP, align 8, !tbaa !2428
  %484 = add i64 %483, -8
  %485 = inttoptr i64 %484 to i64*
  store i64 %482, i64* %485, align 8
  store i64 %484, i64* %RSP, align 8, !tbaa !2428
  store i64 %481, i64* %PC, align 8, !tbaa !2428
  %486 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %481, %struct.Memory* %473)
  %487 = load i64, i64* %RBP, align 8
  %488 = add i64 %487, -8
  %489 = load i64, i64* %PC, align 8
  store i64 %488, i64* %RDI, align 8, !tbaa !2428
  %490 = add i64 %487, -48
  %491 = add i64 %489, 8
  store i64 %491, i64* %PC, align 8
  %492 = inttoptr i64 %490 to i64*
  %493 = load i64, i64* %492, align 8
  store i64 %493, i64* %RSI, align 8, !tbaa !2428
  %494 = add i64 %487, -144
  %495 = load i64, i64* %RAX, align 8
  %496 = add i64 %489, 15
  store i64 %496, i64* %PC, align 8
  %497 = inttoptr i64 %494 to i64*
  store i64 %495, i64* %497, align 8
  %498 = load i64, i64* %PC, align 8
  %499 = add i64 %498, -268
  %500 = add i64 %498, 5
  %501 = load i64, i64* %RSP, align 8, !tbaa !2428
  %502 = add i64 %501, -8
  %503 = inttoptr i64 %502 to i64*
  store i64 %500, i64* %503, align 8
  store i64 %502, i64* %RSP, align 8, !tbaa !2428
  store i64 %499, i64* %PC, align 8, !tbaa !2428
  %504 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %499, %struct.Memory* %486)
  %505 = load i64, i64* %RBP, align 8
  %506 = add i64 %505, -80
  %507 = load i64, i64* %PC, align 8
  store i64 %506, i64* %RDI, align 8, !tbaa !2428
  %508 = load i64, i64* %RAX, align 8
  %509 = add i64 %507, 8
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %506 to i64*
  store i64 %508, i64* %510, align 8
  %511 = load i64, i64* %PC, align 8
  %512 = add i64 %511, -393
  %513 = add i64 %511, 5
  %514 = load i64, i64* %RSP, align 8, !tbaa !2428
  %515 = add i64 %514, -8
  %516 = inttoptr i64 %515 to i64*
  store i64 %513, i64* %516, align 8
  store i64 %515, i64* %RSP, align 8, !tbaa !2428
  store i64 %512, i64* %PC, align 8, !tbaa !2428
  %517 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %512, %struct.Memory* %504)
  %518 = load i64, i64* %RBP, align 8
  %519 = add i64 %518, -144
  %520 = load i64, i64* %PC, align 8
  %521 = add i64 %520, 7
  store i64 %521, i64* %PC, align 8
  %522 = inttoptr i64 %519 to i64*
  %523 = load i64, i64* %522, align 8
  store i64 %523, i64* %RSI, align 8, !tbaa !2428
  %524 = add i64 %520, 10
  store i64 %524, i64* %PC, align 8
  %525 = inttoptr i64 %523 to i64*
  %526 = load i64, i64* %525, align 8
  store i64 %526, i64* %RDI, align 8, !tbaa !2428
  %527 = bitcast %union.anon* %3 to i64**
  %528 = load i64*, i64** %527, align 8
  %529 = add i64 %520, 13
  store i64 %529, i64* %PC, align 8
  store i64 %526, i64* %528, align 8
  %530 = load i64, i64* %RBP, align 8
  %531 = add i64 %530, -40
  %532 = load i64, i64* %PC, align 8
  %533 = add i64 %532, 4
  store i64 %533, i64* %PC, align 8
  %534 = inttoptr i64 %531 to i64*
  %535 = load i64, i64* %534, align 8
  %536 = add i64 %535, -1
  store i64 %536, i64* %RAX, align 8, !tbaa !2428
  %537 = icmp eq i64 %535, 0
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %14, align 1, !tbaa !2432
  %539 = trunc i64 %536 to i32
  %540 = and i32 %539, 255
  %541 = tail call i32 @llvm.ctpop.i32(i32 %540) #8
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  %544 = xor i8 %543, 1
  store i8 %544, i8* %21, align 1, !tbaa !2446
  %545 = xor i64 %535, %536
  %546 = lshr i64 %545, 4
  %547 = trunc i64 %546 to i8
  %548 = and i8 %547, 1
  store i8 %548, i8* %27, align 1, !tbaa !2447
  %549 = icmp eq i64 %536, 0
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %30, align 1, !tbaa !2448
  %551 = lshr i64 %536, 63
  %552 = trunc i64 %551 to i8
  store i8 %552, i8* %33, align 1, !tbaa !2449
  %553 = lshr i64 %535, 63
  %554 = xor i64 %551, %553
  %555 = add nuw nsw i64 %554, %553
  %556 = icmp eq i64 %555, 2
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %39, align 1, !tbaa !2450
  %558 = add i64 %530, -48
  %559 = add i64 %532, 12
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i64*
  store i64 %536, i64* %560, align 8
  %561 = load i64, i64* %RBP, align 8
  %562 = add i64 %561, -40
  %563 = load i64, i64* %PC, align 8
  %564 = add i64 %563, 4
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %562 to i64*
  %566 = load i64, i64* %565, align 8
  store i64 %566, i64* %RAX, align 8, !tbaa !2428
  %567 = add i64 %563, 8
  store i64 %567, i64* %PC, align 8
  %568 = load i64, i64* %565, align 8
  %569 = add i64 %568, %566
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = icmp ult i64 %569, %566
  %571 = icmp ult i64 %569, %568
  %572 = or i1 %570, %571
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %14, align 1, !tbaa !2432
  %574 = trunc i64 %569 to i32
  %575 = and i32 %574, 255
  %576 = tail call i32 @llvm.ctpop.i32(i32 %575) #8
  %577 = trunc i32 %576 to i8
  %578 = and i8 %577, 1
  %579 = xor i8 %578, 1
  store i8 %579, i8* %21, align 1, !tbaa !2446
  %580 = xor i64 %568, %566
  %581 = xor i64 %580, %569
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  store i8 %584, i8* %27, align 1, !tbaa !2447
  %585 = icmp eq i64 %569, 0
  %586 = zext i1 %585 to i8
  store i8 %586, i8* %30, align 1, !tbaa !2448
  %587 = lshr i64 %569, 63
  %588 = trunc i64 %587 to i8
  store i8 %588, i8* %33, align 1, !tbaa !2449
  %589 = lshr i64 %566, 63
  %590 = lshr i64 %568, 63
  %591 = xor i64 %587, %589
  %592 = xor i64 %587, %590
  %593 = add nuw nsw i64 %591, %592
  %594 = icmp eq i64 %593, 2
  %595 = zext i1 %594 to i8
  store i8 %595, i8* %39, align 1, !tbaa !2450
  %596 = add i64 %563, 12
  store i64 %596, i64* %PC, align 8
  store i64 %569, i64* %565, align 8
  %597 = load i64, i64* %PC, align 8
  %598 = add i64 %597, -223
  store i64 %598, i64* %PC, align 8, !tbaa !2428
  br label %block_403d64

block_403dcb:                                     ; preds = %block_403d72
  %599 = add i64 %314, 17
  store i64 %599, i64* %PC, align 8, !tbaa !2428
  br label %block_403ddc

block_403e48:                                     ; preds = %block_403d64
  %600 = add i64 %795, 4
  store i64 %600, i64* %PC, align 8
  %601 = load i64, i64* %762, align 8
  store i64 %601, i64* %RAX, align 8, !tbaa !2428
  %602 = add i64 %795, 8
  store i64 %602, i64* %PC, align 8
  %603 = load i64, i64* %766, align 8
  %604 = sub i64 %601, %603
  %605 = icmp ult i64 %601, %603
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %14, align 1, !tbaa !2432
  %607 = trunc i64 %604 to i32
  %608 = and i32 %607, 255
  %609 = tail call i32 @llvm.ctpop.i32(i32 %608) #8
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  %612 = xor i8 %611, 1
  store i8 %612, i8* %21, align 1, !tbaa !2446
  %613 = xor i64 %603, %601
  %614 = xor i64 %613, %604
  %615 = lshr i64 %614, 4
  %616 = trunc i64 %615 to i8
  %617 = and i8 %616, 1
  store i8 %617, i8* %27, align 1, !tbaa !2447
  %618 = icmp eq i64 %604, 0
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %30, align 1, !tbaa !2448
  %620 = lshr i64 %604, 63
  %621 = trunc i64 %620 to i8
  store i8 %621, i8* %33, align 1, !tbaa !2449
  %622 = lshr i64 %601, 63
  %623 = lshr i64 %603, 63
  %624 = xor i64 %623, %622
  %625 = xor i64 %620, %622
  %626 = add nuw nsw i64 %625, %624
  %627 = icmp eq i64 %626, 2
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %39, align 1, !tbaa !2450
  %.v13 = select i1 %618, i64 14, i64 105
  %629 = add i64 %795, %.v13
  store i64 %629, i64* %PC, align 8, !tbaa !2428
  br i1 %618, label %block_403e56, label %block_403eb1

block_403ecc:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %630 = phi i64 [ %.pre7, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %930, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.2 = phi %struct.Memory* [ %406, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %925, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %631 = load i64, i64* %RBP, align 8
  %632 = add i64 %631, -48
  %633 = add i64 %630, 8
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %632 to i64*
  %635 = load i64, i64* %634, align 8
  store i64 %635, i64* %RDX, align 8, !tbaa !2428
  %636 = add i64 %631, -32
  %637 = add i64 %630, 12
  store i64 %637, i64* %PC, align 8
  %638 = inttoptr i64 %636 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = sub i64 %635, %639
  %641 = icmp ult i64 %635, %639
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %14, align 1, !tbaa !2432
  %643 = trunc i64 %640 to i32
  %644 = and i32 %643, 255
  %645 = tail call i32 @llvm.ctpop.i32(i32 %644) #8
  %646 = trunc i32 %645 to i8
  %647 = and i8 %646, 1
  %648 = xor i8 %647, 1
  store i8 %648, i8* %21, align 1, !tbaa !2446
  %649 = xor i64 %639, %635
  %650 = xor i64 %649, %640
  %651 = lshr i64 %650, 4
  %652 = trunc i64 %651 to i8
  %653 = and i8 %652, 1
  store i8 %653, i8* %27, align 1, !tbaa !2447
  %654 = icmp eq i64 %640, 0
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %30, align 1, !tbaa !2448
  %656 = lshr i64 %640, 63
  %657 = trunc i64 %656 to i8
  store i8 %657, i8* %33, align 1, !tbaa !2449
  %658 = lshr i64 %635, 63
  %659 = lshr i64 %639, 63
  %660 = xor i64 %659, %658
  %661 = xor i64 %656, %658
  %662 = add nuw nsw i64 %661, %660
  %663 = icmp eq i64 %662, 2
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %39, align 1, !tbaa !2450
  %665 = add i64 %631, -153
  %666 = add i64 %630, 18
  store i64 %666, i64* %PC, align 8
  %667 = inttoptr i64 %665 to i8*
  store i8 0, i8* %667, align 1
  %668 = load i64, i64* %PC, align 8
  %669 = load i8, i8* %30, align 1, !tbaa !2448
  %670 = icmp ne i8 %669, 0
  %671 = load i8, i8* %33, align 1, !tbaa !2449
  %672 = icmp ne i8 %671, 0
  %673 = load i8, i8* %39, align 1, !tbaa !2450
  %674 = icmp ne i8 %673, 0
  %675 = xor i1 %672, %674
  %676 = or i1 %670, %675
  %.v14 = select i1 %676, i64 50, i64 6
  %677 = add i64 %668, %.v14
  store i64 %677, i64* %PC, align 8, !tbaa !2428
  br i1 %676, label %block_403f10, label %block_403ee4

block_403f10:                                     ; preds = %block_403ecc, %block_403ee4
  %678 = phi i64 [ %677, %block_403ecc ], [ %.pre8, %block_403ee4 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_403ecc ], [ %349, %block_403ee4 ]
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -153
  %681 = add i64 %678, 6
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %680 to i8*
  %683 = load i8, i8* %682, align 1
  store i8 %683, i8* %AL, align 1, !tbaa !2453
  %684 = and i8 %683, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %685 = zext i8 %684 to i32
  %686 = tail call i32 @llvm.ctpop.i32(i32 %685) #8
  %687 = trunc i32 %686 to i8
  %688 = xor i8 %687, 1
  store i8 %688, i8* %21, align 1, !tbaa !2446
  %689 = xor i8 %684, 1
  store i8 %689, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %690 = icmp eq i8 %689, 0
  %.v15 = select i1 %690, i64 19, i64 14
  %691 = add i64 %678, %.v15
  store i64 %691, i64* %PC, align 8, !tbaa !2428
  %692 = add i64 %679, -8
  store i64 %692, i64* %RDI, align 8, !tbaa !2428
  br i1 %690, label %block_403f23, label %block_403f1e

block_403f1e:                                     ; preds = %block_403f10
  %693 = add i64 %679, -48
  %694 = add i64 %691, 122
  store i64 %694, i64* %PC, align 8
  %695 = inttoptr i64 %693 to i64*
  %696 = load i64, i64* %695, align 8
  store i64 %696, i64* %RSI, align 8, !tbaa !2428
  %697 = add i64 %691, -542
  %698 = add i64 %691, 127
  %699 = load i64, i64* %RSP, align 8, !tbaa !2428
  %700 = add i64 %699, -8
  %701 = inttoptr i64 %700 to i64*
  store i64 %698, i64* %701, align 8
  store i64 %700, i64* %RSP, align 8, !tbaa !2428
  store i64 %697, i64* %PC, align 8, !tbaa !2428
  %702 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %697, %struct.Memory* %MEMORY.3)
  %703 = load i64, i64* %RBP, align 8
  %704 = add i64 %703, -128
  %705 = load i64, i64* %PC, align 8
  store i64 %704, i64* %RDI, align 8, !tbaa !2428
  %706 = load i64, i64* %RAX, align 8
  %707 = add i64 %705, 8
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %704 to i64*
  store i64 %706, i64* %708, align 8
  %709 = load i64, i64* %PC, align 8
  %710 = add i64 %709, -789
  %711 = add i64 %709, 5
  %712 = load i64, i64* %RSP, align 8, !tbaa !2428
  %713 = add i64 %712, -8
  %714 = inttoptr i64 %713 to i64*
  store i64 %711, i64* %714, align 8
  store i64 %713, i64* %RSP, align 8, !tbaa !2428
  store i64 %710, i64* %PC, align 8, !tbaa !2428
  %715 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %710, %struct.Memory* %702)
  %716 = load i64, i64* %RBP, align 8
  %717 = add i64 %716, -16
  %718 = load i64, i64* %PC, align 8
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC, align 8
  %720 = inttoptr i64 %717 to i64*
  %721 = load i64, i64* %720, align 8
  store i64 %721, i64* %RSI, align 8, !tbaa !2428
  %722 = bitcast %union.anon* %3 to i64**
  %723 = load i64*, i64** %722, align 8
  %724 = add i64 %718, 7
  store i64 %724, i64* %PC, align 8
  store i64 %721, i64* %723, align 8
  %725 = load i64, i64* %RSP, align 8
  %726 = load i64, i64* %PC, align 8
  %727 = add i64 %725, 176
  store i64 %727, i64* %RSP, align 8, !tbaa !2428
  %728 = icmp ugt i64 %725, -177
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %14, align 1, !tbaa !2432
  %730 = trunc i64 %727 to i32
  %731 = and i32 %730, 255
  %732 = tail call i32 @llvm.ctpop.i32(i32 %731) #8
  %733 = trunc i32 %732 to i8
  %734 = and i8 %733, 1
  %735 = xor i8 %734, 1
  store i8 %735, i8* %21, align 1, !tbaa !2446
  %736 = xor i64 %725, 16
  %737 = xor i64 %736, %727
  %738 = lshr i64 %737, 4
  %739 = trunc i64 %738 to i8
  %740 = and i8 %739, 1
  store i8 %740, i8* %27, align 1, !tbaa !2447
  %741 = icmp eq i64 %727, 0
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %30, align 1, !tbaa !2448
  %743 = lshr i64 %727, 63
  %744 = trunc i64 %743 to i8
  store i8 %744, i8* %33, align 1, !tbaa !2449
  %745 = lshr i64 %725, 63
  %746 = xor i64 %743, %745
  %747 = add nuw nsw i64 %746, %743
  %748 = icmp eq i64 %747, 2
  %749 = zext i1 %748 to i8
  store i8 %749, i8* %39, align 1, !tbaa !2450
  %750 = add i64 %726, 8
  store i64 %750, i64* %PC, align 8
  %751 = add i64 %725, 184
  %752 = inttoptr i64 %727 to i64*
  %753 = load i64, i64* %752, align 8
  store i64 %753, i64* %RBP, align 8, !tbaa !2428
  store i64 %751, i64* %RSP, align 8, !tbaa !2428
  %754 = add i64 %726, 9
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %751 to i64*
  %756 = load i64, i64* %755, align 8
  store i64 %756, i64* %PC, align 8, !tbaa !2428
  %757 = add i64 %725, 192
  store i64 %757, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %715

block_403d64:                                     ; preds = %block_403ddc, %block_403d30
  %758 = phi i64 [ %.pre, %block_403d30 ], [ %598, %block_403ddc ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_403d30 ], [ %517, %block_403ddc ]
  %759 = load i64, i64* %RBP, align 8
  %760 = add i64 %759, -40
  %761 = add i64 %758, 4
  store i64 %761, i64* %PC, align 8
  %762 = inttoptr i64 %760 to i64*
  %763 = load i64, i64* %762, align 8
  store i64 %763, i64* %RAX, align 8, !tbaa !2428
  %764 = add i64 %759, -24
  %765 = add i64 %758, 8
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %764 to i64*
  %767 = load i64, i64* %766, align 8
  %768 = sub i64 %763, %767
  %769 = icmp ult i64 %763, %767
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %14, align 1, !tbaa !2432
  %771 = trunc i64 %768 to i32
  %772 = and i32 %771, 255
  %773 = tail call i32 @llvm.ctpop.i32(i32 %772) #8
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = xor i8 %775, 1
  store i8 %776, i8* %21, align 1, !tbaa !2446
  %777 = xor i64 %767, %763
  %778 = xor i64 %777, %768
  %779 = lshr i64 %778, 4
  %780 = trunc i64 %779 to i8
  %781 = and i8 %780, 1
  store i8 %781, i8* %27, align 1, !tbaa !2447
  %782 = icmp eq i64 %768, 0
  %783 = zext i1 %782 to i8
  store i8 %783, i8* %30, align 1, !tbaa !2448
  %784 = lshr i64 %768, 63
  %785 = trunc i64 %784 to i8
  store i8 %785, i8* %33, align 1, !tbaa !2449
  %786 = lshr i64 %763, 63
  %787 = lshr i64 %767, 63
  %788 = xor i64 %787, %786
  %789 = xor i64 %784, %786
  %790 = add nuw nsw i64 %789, %788
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %39, align 1, !tbaa !2450
  %793 = icmp ne i8 %785, 0
  %794 = xor i1 %793, %791
  %.v = select i1 %794, i64 14, i64 228
  %795 = add i64 %758, %.v
  store i64 %795, i64* %PC, align 8, !tbaa !2428
  br i1 %794, label %block_403d72, label %block_403e48

block_403f23:                                     ; preds = %block_403f10
  %796 = add i64 %679, -40
  %797 = add i64 %691, 8
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %796 to i64*
  %799 = load i64, i64* %798, align 8
  store i64 %799, i64* %RSI, align 8, !tbaa !2428
  %800 = add i64 %691, -547
  %801 = add i64 %691, 13
  %802 = load i64, i64* %RSP, align 8, !tbaa !2428
  %803 = add i64 %802, -8
  %804 = inttoptr i64 %803 to i64*
  store i64 %801, i64* %804, align 8
  store i64 %803, i64* %RSP, align 8, !tbaa !2428
  store i64 %800, i64* %PC, align 8, !tbaa !2428
  %805 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %800, %struct.Memory* %MEMORY.3)
  %806 = load i64, i64* %RBP, align 8
  %807 = add i64 %806, -112
  %808 = load i64, i64* %PC, align 8
  store i64 %807, i64* %RDI, align 8, !tbaa !2428
  %809 = load i64, i64* %RAX, align 8
  %810 = add i64 %808, 8
  store i64 %810, i64* %PC, align 8
  %811 = inttoptr i64 %807 to i64*
  store i64 %809, i64* %811, align 8
  %812 = load i64, i64* %PC, align 8
  %813 = add i64 %812, -680
  %814 = add i64 %812, 5
  %815 = load i64, i64* %RSP, align 8, !tbaa !2428
  %816 = add i64 %815, -8
  %817 = inttoptr i64 %816 to i64*
  store i64 %814, i64* %817, align 8
  store i64 %816, i64* %RSP, align 8, !tbaa !2428
  store i64 %813, i64* %PC, align 8, !tbaa !2428
  %818 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %813, %struct.Memory* %805)
  %819 = load i64, i64* %RBP, align 8
  %820 = add i64 %819, -8
  %821 = load i64, i64* %PC, align 8
  store i64 %820, i64* %RDI, align 8, !tbaa !2428
  %822 = add i64 %819, -48
  %823 = add i64 %821, 8
  store i64 %823, i64* %PC, align 8
  %824 = inttoptr i64 %822 to i64*
  %825 = load i64, i64* %824, align 8
  store i64 %825, i64* %RSI, align 8, !tbaa !2428
  %826 = add i64 %819, -168
  %827 = load i64, i64* %RAX, align 8
  %828 = add i64 %821, 15
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %826 to i64*
  store i64 %827, i64* %829, align 8
  %830 = load i64, i64* %PC, align 8
  %831 = add i64 %830, -588
  %832 = add i64 %830, 5
  %833 = load i64, i64* %RSP, align 8, !tbaa !2428
  %834 = add i64 %833, -8
  %835 = inttoptr i64 %834 to i64*
  store i64 %832, i64* %835, align 8
  store i64 %834, i64* %RSP, align 8, !tbaa !2428
  store i64 %831, i64* %PC, align 8, !tbaa !2428
  %836 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_renamed_(%struct.State* nonnull %0, i64 %831, %struct.Memory* %818)
  %837 = load i64, i64* %RBP, align 8
  %838 = add i64 %837, -120
  %839 = load i64, i64* %PC, align 8
  store i64 %838, i64* %RDI, align 8, !tbaa !2428
  %840 = load i64, i64* %RAX, align 8
  %841 = add i64 %839, 8
  store i64 %841, i64* %PC, align 8
  %842 = inttoptr i64 %838 to i64*
  store i64 %840, i64* %842, align 8
  %843 = load i64, i64* %PC, align 8
  %844 = add i64 %843, -713
  %845 = add i64 %843, 5
  %846 = load i64, i64* %RSP, align 8, !tbaa !2428
  %847 = add i64 %846, -8
  %848 = inttoptr i64 %847 to i64*
  store i64 %845, i64* %848, align 8
  store i64 %847, i64* %RSP, align 8, !tbaa !2428
  store i64 %844, i64* %PC, align 8, !tbaa !2428
  %849 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %844, %struct.Memory* %836)
  %850 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %851 = load i64, i64* %RBP, align 8
  %852 = add i64 %851, -168
  %853 = add i64 %850, 14
  store i64 %853, i64* %PC, align 8
  %854 = inttoptr i64 %852 to i64*
  %855 = load i64, i64* %854, align 8
  store i64 %855, i64* %RDI, align 8, !tbaa !2428
  %856 = add i64 %850, 17
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %855 to i64*
  %858 = load i64, i64* %857, align 8
  store i64 %858, i64* %RDX, align 8, !tbaa !2428
  %859 = bitcast %union.anon* %3 to i64**
  %860 = load i64*, i64** %859, align 8
  %861 = add i64 %850, 20
  store i64 %861, i64* %PC, align 8
  store i64 %858, i64* %860, align 8
  %862 = load i64, i64* %RBP, align 8
  %863 = add i64 %862, -40
  %864 = load i64, i64* %PC, align 8
  %865 = add i64 %864, 4
  store i64 %865, i64* %PC, align 8
  %866 = inttoptr i64 %863 to i64*
  %867 = load i64, i64* %866, align 8
  store i64 %867, i64* %RAX, align 8, !tbaa !2428
  %868 = add i64 %862, -48
  %869 = add i64 %864, 8
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i64*
  store i64 %867, i64* %870, align 8
  %871 = load i64, i64* %RBP, align 8
  %872 = add i64 %871, -48
  %873 = load i64, i64* %PC, align 8
  %874 = add i64 %873, 4
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %872 to i64*
  %876 = load i64, i64* %875, align 8
  %877 = add i64 %876, -1
  store i64 %877, i64* %RAX, align 8, !tbaa !2428
  %878 = icmp eq i64 %876, 0
  %879 = zext i1 %878 to i8
  store i8 %879, i8* %14, align 1, !tbaa !2432
  %880 = trunc i64 %877 to i32
  %881 = and i32 %880, 255
  %882 = tail call i32 @llvm.ctpop.i32(i32 %881) #8
  %883 = trunc i32 %882 to i8
  %884 = and i8 %883, 1
  %885 = xor i8 %884, 1
  store i8 %885, i8* %21, align 1, !tbaa !2446
  %886 = xor i64 %876, %877
  %887 = lshr i64 %886, 4
  %888 = trunc i64 %887 to i8
  %889 = and i8 %888, 1
  store i8 %889, i8* %27, align 1, !tbaa !2447
  %890 = icmp eq i64 %877, 0
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %30, align 1, !tbaa !2448
  %892 = lshr i64 %877, 63
  %893 = trunc i64 %892 to i8
  store i8 %893, i8* %33, align 1, !tbaa !2449
  %894 = lshr i64 %876, 63
  %895 = xor i64 %892, %894
  %896 = add nuw nsw i64 %895, %894
  %897 = icmp eq i64 %896, 2
  %898 = zext i1 %897 to i8
  store i8 %898, i8* %39, align 1, !tbaa !2450
  %899 = ashr i64 %877, 63
  store i64 %899, i64* %RDX, align 8, !tbaa !2428
  %900 = load i64, i64* %RSI, align 8
  %901 = add i64 %873, 13
  store i64 %901, i64* %PC, align 8
  %902 = sext i64 %900 to i128
  %903 = and i128 %902, -18446744073709551616
  %904 = zext i64 %899 to i128
  %905 = shl nuw i128 %904, 64
  %906 = zext i64 %877 to i128
  %907 = or i128 %905, %906
  %908 = zext i64 %900 to i128
  %909 = or i128 %903, %908
  %910 = sdiv i128 %907, %909
  %911 = trunc i128 %910 to i64
  %912 = and i128 %910, 18446744073709551615
  %913 = sext i64 %911 to i128
  %914 = and i128 %913, -18446744073709551616
  %915 = or i128 %914, %912
  %916 = icmp eq i128 %910, %915
  br i1 %916, label %919, label %917

; <label>:917:                                    ; preds = %block_403f23
  %918 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %901, %struct.Memory* %849) #9
  %.pre9 = load i64, i64* %RBP, align 8
  %.pre10 = load i64, i64* %RAX, align 8
  %.pre11 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:919:                                    ; preds = %block_403f23
  %920 = srem i128 %907, %909
  %921 = trunc i128 %920 to i64
  store i64 %911, i64* %384, align 8, !tbaa !2428
  store i64 %921, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %919, %917
  %922 = phi i64 [ %.pre11, %917 ], [ %901, %919 ]
  %923 = phi i64 [ %.pre10, %917 ], [ %911, %919 ]
  %924 = phi i64 [ %.pre9, %917 ], [ %871, %919 ]
  %925 = phi %struct.Memory* [ %918, %917 ], [ %849, %919 ]
  %926 = add i64 %924, -40
  %927 = add i64 %922, 4
  store i64 %927, i64* %PC, align 8
  %928 = inttoptr i64 %926 to i64*
  store i64 %923, i64* %928, align 8
  %929 = load i64, i64* %PC, align 8
  %930 = add i64 %929, -191
  store i64 %930, i64* %PC, align 8, !tbaa !2428
  br label %block_403ecc
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b70_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400b00_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_4030c0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4030c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4030f0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2447
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2448
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2449
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2450
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline
define %struct.Memory* @sub_403cb0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403cb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2432
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #8
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2446
  %34 = xor i64 %22, %23
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2447
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2448
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = add i64 %16, 14
  store i64 %51, i64* %PC, align 8
  store i64 %23, i64* %21, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %54, 5
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %54, 6
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401e90__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401e90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -72
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 64
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %PC, align 8
  %52 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %53 = load i64, i64* %52, align 1
  %54 = inttoptr i64 %49 to i64*
  store i64 %53, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401eb0

block_401ef5:                                     ; preds = %block_401eb0
  %68 = load i64, i64* %RSP, align 8
  %69 = add i64 %68, 64
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  %70 = icmp ugt i64 %68, -65
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %13, align 1, !tbaa !2432
  %72 = trunc i64 %69 to i32
  %73 = and i32 %72, 255
  %74 = tail call i32 @llvm.ctpop.i32(i32 %73) #8
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  store i8 %77, i8* %20, align 1, !tbaa !2446
  %78 = xor i64 %68, %69
  %79 = lshr i64 %78, 4
  %80 = trunc i64 %79 to i8
  %81 = and i8 %80, 1
  store i8 %81, i8* %25, align 1, !tbaa !2447
  %82 = icmp eq i64 %69, 0
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %28, align 1, !tbaa !2448
  %84 = lshr i64 %69, 63
  %85 = trunc i64 %84 to i8
  store i8 %85, i8* %31, align 1, !tbaa !2449
  %86 = lshr i64 %68, 63
  %87 = xor i64 %84, %86
  %88 = add nuw nsw i64 %87, %84
  %89 = icmp eq i64 %88, 2
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %37, align 1, !tbaa !2450
  %91 = add i64 %208, 5
  store i64 %91, i64* %PC, align 8
  %92 = add i64 %68, 72
  %93 = inttoptr i64 %69 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %RBP, align 8, !tbaa !2428
  store i64 %92, i64* %RSP, align 8, !tbaa !2428
  %95 = add i64 %208, 6
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %92 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %PC, align 8, !tbaa !2428
  %98 = add i64 %68, 80
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401ec0:                                     ; preds = %block_401eb0
  %99 = add i64 %175, -8
  %100 = add i64 %208, 4
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = add i64 %175, -48
  %104 = add i64 %208, 8
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  store i64 %102, i64* %105, align 8
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -16
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RAX, align 8, !tbaa !2428
  %112 = add i64 %106, -56
  %113 = add i64 %108, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  store i64 %111, i64* %114, align 8
  %115 = load i64, i64* %RBP, align 8
  %116 = add i64 %115, -24
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 5
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %116 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %52, align 1, !tbaa !2451
  store double 0.000000e+00, double* %67, align 1, !tbaa !2451
  %121 = add i64 %115, -48
  %122 = add i64 %117, 9
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %RDI, align 8, !tbaa !2428
  %125 = add i64 %115, -56
  %126 = add i64 %117, 13
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %RSI, align 8, !tbaa !2428
  %129 = add i64 %117, 17776
  %130 = add i64 %117, 18
  %131 = load i64, i64* %RSP, align 8, !tbaa !2428
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %130, i64* %133, align 8
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  %134 = tail call %struct.Memory* @sub_406440__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__renamed_(%struct.State* nonnull %0, i64 %129, %struct.Memory* %MEMORY.0)
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 16078
  %137 = add i64 %135, 5
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405db0__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %134)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -36
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 3
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = add i32 %147, 1
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RAX, align 8, !tbaa !2428
  %150 = icmp eq i32 %147, -1
  %151 = icmp eq i32 %148, 0
  %152 = or i1 %150, %151
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %13, align 1, !tbaa !2432
  %154 = and i32 %148, 255
  %155 = tail call i32 @llvm.ctpop.i32(i32 %154) #8
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  %158 = xor i8 %157, 1
  store i8 %158, i8* %20, align 1, !tbaa !2446
  %159 = xor i32 %147, %148
  %160 = lshr i32 %159, 4
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  store i8 %162, i8* %25, align 1, !tbaa !2447
  %163 = zext i1 %151 to i8
  store i8 %163, i8* %28, align 1, !tbaa !2448
  %164 = lshr i32 %148, 31
  %165 = trunc i32 %164 to i8
  store i8 %165, i8* %31, align 1, !tbaa !2449
  %166 = lshr i32 %147, 31
  %167 = xor i32 %164, %166
  %168 = add nuw nsw i32 %167, %164
  %169 = icmp eq i32 %168, 2
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %37, align 1, !tbaa !2450
  %171 = add i64 %144, 9
  store i64 %171, i64* %PC, align 8
  store i32 %148, i32* %146, align 4
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, -64
  store i64 %173, i64* %PC, align 8, !tbaa !2428
  br label %block_401eb0

block_401eb0:                                     ; preds = %block_401ec0, %block_401e90
  %174 = phi i64 [ %.pre, %block_401e90 ], [ %173, %block_401ec0 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e90 ], [ %141, %block_401ec0 ]
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -36
  %177 = add i64 %174, 3
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %182 = sub i32 %179, %181
  %183 = icmp ult i32 %179, %181
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %13, align 1, !tbaa !2432
  %185 = and i32 %182, 255
  %186 = tail call i32 @llvm.ctpop.i32(i32 %185) #8
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  %189 = xor i8 %188, 1
  store i8 %189, i8* %20, align 1, !tbaa !2446
  %190 = xor i32 %181, %179
  %191 = xor i32 %190, %182
  %192 = lshr i32 %191, 4
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  store i8 %194, i8* %25, align 1, !tbaa !2447
  %195 = icmp eq i32 %182, 0
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %28, align 1, !tbaa !2448
  %197 = lshr i32 %182, 31
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %31, align 1, !tbaa !2449
  %199 = lshr i32 %179, 31
  %200 = lshr i32 %181, 31
  %201 = xor i32 %200, %199
  %202 = xor i32 %197, %199
  %203 = add nuw nsw i32 %202, %201
  %204 = icmp eq i32 %203, 2
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %37, align 1, !tbaa !2450
  %206 = icmp ne i8 %198, 0
  %207 = xor i1 %206, %204
  %.v = select i1 %207, i64 16, i64 69
  %208 = add i64 %174, %.v
  store i64 %208, i64* %PC, align 8, !tbaa !2428
  br i1 %207, label %block_401ec0, label %block_401ef5
}

; Function Attrs: noinline
define %struct.Memory* @sub_405830__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405830:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %10, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -24
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, 8
  store i64 %64, i64* %RSI, align 8, !tbaa !2428
  %65 = icmp ugt i64 %63, -9
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %14, align 1, !tbaa !2432
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #8
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %21, align 1, !tbaa !2446
  %73 = xor i64 %63, %64
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %26, align 1, !tbaa !2447
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %29, align 1, !tbaa !2448
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %32, align 1, !tbaa !2449
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %38, align 1, !tbaa !2450
  %86 = add i64 %60, 12
  store i64 %86, i64* %PC, align 8
  store i64 %64, i64* %62, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405854

block_4058bd:                                     ; preds = %block_4058ad
  %87 = add i64 %330, -48
  %88 = add i64 %342, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %330, -40
  %92 = add i64 %342, 8
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = add i64 %342, 11
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %90 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %342, 14
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %94 to i64*
  store i64 %97, i64* %99, align 8
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -40
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %105, -8
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = icmp ugt i64 %105, 7
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %14, align 1, !tbaa !2432
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #8
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %21, align 1, !tbaa !2446
  %115 = xor i64 %105, 16
  %116 = xor i64 %115, %106
  %117 = lshr i64 %116, 4
  %118 = trunc i64 %117 to i8
  %119 = and i8 %118, 1
  store i8 %119, i8* %26, align 1, !tbaa !2447
  %120 = icmp eq i64 %106, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %29, align 1, !tbaa !2448
  %122 = lshr i64 %106, 63
  %123 = trunc i64 %122 to i8
  store i8 %123, i8* %32, align 1, !tbaa !2449
  %124 = lshr i64 %105, 63
  %125 = xor i64 %122, %124
  %126 = xor i64 %122, 1
  %127 = add nuw nsw i64 %125, %126
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %38, align 1, !tbaa !2450
  %130 = add i64 %102, 12
  store i64 %130, i64* %PC, align 8
  store i64 %106, i64* %104, align 8
  %131 = load i64, i64* %PC, align 8
  %132 = add i64 %131, -90
  store i64 %132, i64* %PC, align 8, !tbaa !2428
  br label %block_40587d

block_4058f8:                                     ; preds = %block_405854
  %133 = load i64, i64* %RSP, align 8
  %134 = add i64 %133, 64
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  %135 = icmp ugt i64 %133, -65
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %14, align 1, !tbaa !2432
  %137 = trunc i64 %134 to i32
  %138 = and i32 %137, 255
  %139 = tail call i32 @llvm.ctpop.i32(i32 %138) #8
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  store i8 %142, i8* %21, align 1, !tbaa !2446
  %143 = xor i64 %133, %134
  %144 = lshr i64 %143, 4
  %145 = trunc i64 %144 to i8
  %146 = and i8 %145, 1
  store i8 %146, i8* %26, align 1, !tbaa !2447
  %147 = icmp eq i64 %134, 0
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %29, align 1, !tbaa !2448
  %149 = lshr i64 %134, 63
  %150 = trunc i64 %149 to i8
  store i8 %150, i8* %32, align 1, !tbaa !2449
  %151 = lshr i64 %133, 63
  %152 = xor i64 %149, %151
  %153 = add nuw nsw i64 %152, %149
  %154 = icmp eq i64 %153, 2
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %38, align 1, !tbaa !2450
  %156 = add i64 %199, 5
  store i64 %156, i64* %PC, align 8
  %157 = add i64 %133, 72
  %158 = inttoptr i64 %134 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %RBP, align 8, !tbaa !2428
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  %160 = add i64 %199, 6
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %157 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  %163 = add i64 %133, 80
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405854:                                     ; preds = %block_4058b8, %block_405830
  %164 = phi i64 [ %.pre, %block_405830 ], [ %328, %block_4058b8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_405830 ], [ %MEMORY.2, %block_4058b8 ]
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -24
  %167 = add i64 %164, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %165, -16
  %171 = add i64 %164, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = sub i64 %169, %173
  %175 = icmp ult i64 %169, %173
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %14, align 1, !tbaa !2432
  %177 = trunc i64 %174 to i32
  %178 = and i32 %177, 255
  %179 = tail call i32 @llvm.ctpop.i32(i32 %178) #8
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = xor i8 %181, 1
  store i8 %182, i8* %21, align 1, !tbaa !2446
  %183 = xor i64 %173, %169
  %184 = xor i64 %183, %174
  %185 = lshr i64 %184, 4
  %186 = trunc i64 %185 to i8
  %187 = and i8 %186, 1
  store i8 %187, i8* %26, align 1, !tbaa !2447
  %188 = icmp eq i64 %174, 0
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %29, align 1, !tbaa !2448
  %190 = lshr i64 %174, 63
  %191 = trunc i64 %190 to i8
  store i8 %191, i8* %32, align 1, !tbaa !2449
  %192 = lshr i64 %169, 63
  %193 = lshr i64 %173, 63
  %194 = xor i64 %193, %192
  %195 = xor i64 %190, %192
  %196 = add nuw nsw i64 %195, %194
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %38, align 1, !tbaa !2450
  %.v = select i1 %188, i64 164, i64 14
  %199 = add i64 %164, %.v
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  br i1 %188, label %block_4058f8, label %block_405862

block_405892:                                     ; preds = %block_40587d
  %200 = load i64, i64* %RBP, align 8
  %201 = add i64 %200, -32
  store i64 %201, i64* %RDI, align 8, !tbaa !2428
  %202 = add i64 %200, -48
  %203 = add i64 %286, 8
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = add i64 %205, -8
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = icmp ugt i64 %205, 7
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %14, align 1, !tbaa !2432
  %209 = trunc i64 %206 to i32
  %210 = and i32 %209, 255
  %211 = tail call i32 @llvm.ctpop.i32(i32 %210) #8
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = xor i8 %213, 1
  store i8 %214, i8* %21, align 1, !tbaa !2446
  %215 = xor i64 %205, 16
  %216 = xor i64 %215, %206
  %217 = lshr i64 %216, 4
  %218 = trunc i64 %217 to i8
  %219 = and i8 %218, 1
  store i8 %219, i8* %26, align 1, !tbaa !2447
  %220 = icmp eq i64 %206, 0
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %29, align 1, !tbaa !2448
  %222 = lshr i64 %206, 63
  %223 = trunc i64 %222 to i8
  store i8 %223, i8* %32, align 1, !tbaa !2449
  %224 = lshr i64 %205, 63
  %225 = xor i64 %222, %224
  %226 = xor i64 %222, 1
  %227 = add nuw nsw i64 %225, %226
  %228 = icmp eq i64 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %38, align 1, !tbaa !2450
  %230 = add i64 %286, 16
  store i64 %230, i64* %PC, align 8
  store i64 %206, i64* %204, align 8
  %231 = load i64, i64* %RAX, align 8
  %232 = load i64, i64* %PC, align 8
  store i64 %231, i64* %RSI, align 8, !tbaa !2428
  %233 = add i64 %232, -10306
  %234 = add i64 %232, 8
  %235 = load i64, i64* %RSP, align 8, !tbaa !2428
  %236 = add i64 %235, -8
  %237 = inttoptr i64 %236 to i64*
  store i64 %234, i64* %237, align 8
  store i64 %236, i64* %RSP, align 8, !tbaa !2428
  store i64 %233, i64* %PC, align 8, !tbaa !2428
  %238 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__renamed_(%struct.State* nonnull %0, i64 %233, %struct.Memory* %MEMORY.1)
  %239 = load i64, i64* %RBP, align 8
  %240 = add i64 %239, -49
  %241 = load i8, i8* %AL, align 1
  %242 = load i64, i64* %PC, align 8
  %243 = add i64 %242, 3
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %240 to i8*
  store i8 %241, i8* %244, align 1
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_4058ad

block_40587d:                                     ; preds = %block_405862, %block_4058bd
  %245 = phi i64 [ %.pre1, %block_405862 ], [ %132, %block_4058bd ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_405862 ], [ %MEMORY.2, %block_4058bd ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %246 = load i64, i64* %RBP, align 8
  %247 = add i64 %246, -40
  %248 = add i64 %245, 8
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RDX, align 8, !tbaa !2428
  %251 = add i64 %246, -8
  %252 = add i64 %245, 12
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = sub i64 %250, %254
  %256 = icmp ult i64 %250, %254
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %14, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %21, align 1, !tbaa !2446
  %264 = xor i64 %254, %250
  %265 = xor i64 %264, %255
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %26, align 1, !tbaa !2447
  %269 = icmp eq i64 %255, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %29, align 1, !tbaa !2448
  %271 = lshr i64 %255, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %32, align 1, !tbaa !2449
  %273 = lshr i64 %250, 63
  %274 = lshr i64 %254, 63
  %275 = xor i64 %274, %273
  %276 = xor i64 %271, %273
  %277 = add nuw nsw i64 %276, %275
  %278 = icmp eq i64 %277, 2
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %38, align 1, !tbaa !2450
  %280 = add i64 %246, -49
  %281 = add i64 %245, 15
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %280 to i8*
  store i8 0, i8* %282, align 1
  %283 = load i64, i64* %PC, align 8
  %284 = load i8, i8* %29, align 1, !tbaa !2448
  %285 = icmp ne i8 %284, 0
  %.v3 = select i1 %285, i64 33, i64 6
  %286 = add i64 %283, %.v3
  store i64 %286, i64* %PC, align 8, !tbaa !2428
  %287 = icmp eq i8 %284, 1
  br i1 %287, label %block_4058ad, label %block_405892

block_4058b8:                                     ; preds = %block_4058ad
  %288 = add i64 %330, -40
  %289 = add i64 %342, 40
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %288 to i64*
  %291 = load i64, i64* %290, align 8
  store i64 %291, i64* %RAX, align 8, !tbaa !2428
  %292 = add i64 %330, -32
  %293 = add i64 %342, 44
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  %295 = load i64, i64* %294, align 8
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = add i64 %342, 47
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %291 to i64*
  store i64 %295, i64* %297, align 8
  %298 = load i64, i64* %RBP, align 8
  %299 = add i64 %298, -24
  %300 = load i64, i64* %PC, align 8
  %301 = add i64 %300, 4
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %299 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = add i64 %303, 8
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = icmp ugt i64 %303, -9
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %14, align 1, !tbaa !2432
  %307 = trunc i64 %304 to i32
  %308 = and i32 %307, 255
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308) #8
  %310 = trunc i32 %309 to i8
  %311 = and i8 %310, 1
  %312 = xor i8 %311, 1
  store i8 %312, i8* %21, align 1, !tbaa !2446
  %313 = xor i64 %303, %304
  %314 = lshr i64 %313, 4
  %315 = trunc i64 %314 to i8
  %316 = and i8 %315, 1
  store i8 %316, i8* %26, align 1, !tbaa !2447
  %317 = icmp eq i64 %304, 0
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %29, align 1, !tbaa !2448
  %319 = lshr i64 %304, 63
  %320 = trunc i64 %319 to i8
  store i8 %320, i8* %32, align 1, !tbaa !2449
  %321 = lshr i64 %303, 63
  %322 = xor i64 %319, %321
  %323 = add nuw nsw i64 %322, %319
  %324 = icmp eq i64 %323, 2
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %38, align 1, !tbaa !2450
  %326 = add i64 %300, 12
  store i64 %326, i64* %PC, align 8
  store i64 %304, i64* %302, align 8
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, -159
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  br label %block_405854

block_4058ad:                                     ; preds = %block_40587d, %block_405892
  %329 = phi i64 [ %286, %block_40587d ], [ %.pre2, %block_405892 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_40587d ], [ %238, %block_405892 ]
  %330 = load i64, i64* %RBP, align 8
  %331 = add i64 %330, -49
  %332 = add i64 %329, 3
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i8*
  %334 = load i8, i8* %333, align 1
  store i8 %334, i8* %AL, align 1, !tbaa !2453
  %335 = and i8 %334, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %336 = zext i8 %335 to i32
  %337 = tail call i32 @llvm.ctpop.i32(i32 %336) #8
  %338 = trunc i32 %337 to i8
  %339 = xor i8 %338, 1
  store i8 %339, i8* %21, align 1, !tbaa !2446
  %340 = xor i8 %335, 1
  store i8 %340, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  %341 = icmp eq i8 %340, 0
  %.v4 = select i1 %341, i64 16, i64 11
  %342 = add i64 %329, %.v4
  store i64 %342, i64* %PC, align 8, !tbaa !2428
  br i1 %341, label %block_4058bd, label %block_4058b8

block_405862:                                     ; preds = %block_405854
  %343 = add i64 %199, 4
  store i64 %343, i64* %PC, align 8
  %344 = load i64, i64* %168, align 8
  store i64 %344, i64* %RAX, align 8, !tbaa !2428
  %345 = add i64 %199, 7
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %344 to i64*
  %347 = load i64, i64* %346, align 8
  store i64 %347, i64* %RAX, align 8, !tbaa !2428
  %348 = add i64 %165, -32
  %349 = add i64 %199, 11
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %348 to i64*
  store i64 %347, i64* %350, align 8
  %351 = load i64, i64* %RBP, align 8
  %352 = add i64 %351, -24
  %353 = load i64, i64* %PC, align 8
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %352 to i64*
  %356 = load i64, i64* %355, align 8
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = add i64 %351, -40
  %358 = add i64 %353, 8
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %357 to i64*
  store i64 %356, i64* %359, align 8
  %360 = load i64, i64* %RBP, align 8
  %361 = add i64 %360, -40
  %362 = load i64, i64* %PC, align 8
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = add i64 %360, -48
  %367 = add i64 %362, 8
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i64*
  store i64 %365, i64* %368, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_40587d
}

; Function Attrs: noinline
define %struct.Memory* @sub_401bf0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401bf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c10__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_renamed_(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2450
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b00__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402b00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402b28

block_402ba9:                                     ; preds = %block_402b28
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402b38:                                     ; preds = %block_402b28
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 3552
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403930__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 3647
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_4039b0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 3954
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402b28

block_402b28:                                     ; preds = %block_402b38, %block_402b00
  %255 = phi i64 [ %.pre, %block_402b00 ], [ %254, %block_402b38 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402b00 ], [ %222, %block_402b38 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402b38, label %block_402ba9
}

; Function Attrs: noinline
define %struct.Memory* @sub_404a40__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404a40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -16
  %12 = load i64, i64* %RDI, align 8
  %13 = add i64 %10, 7
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %12, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RSI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %RDX, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404a50

block_404a89:                                     ; preds = %block_404a50
  %35 = add i64 %79, 1
  store i64 %35, i64* %PC, align 8
  %36 = load i64, i64* %6, align 8, !tbaa !2428
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  store i64 %37, i64* %6, align 8, !tbaa !2428
  %40 = add i64 %79, 2
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = add i64 %36, 16
  store i64 %43, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_404a50:                                     ; preds = %block_404a5e, %block_404a40
  %44 = phi i64 [ %144, %block_404a5e ], [ %.pre, %block_404a40 ]
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -8
  %47 = add i64 %44, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %46 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %45, -16
  %51 = add i64 %44, 8
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %50 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = sub i64 %49, %53
  %55 = icmp ult i64 %49, %53
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %27, align 1, !tbaa !2432
  %57 = trunc i64 %54 to i32
  %58 = and i32 %57, 255
  %59 = tail call i32 @llvm.ctpop.i32(i32 %58) #8
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = xor i8 %61, 1
  store i8 %62, i8* %28, align 1, !tbaa !2446
  %63 = xor i64 %53, %49
  %64 = xor i64 %63, %54
  %65 = lshr i64 %64, 4
  %66 = trunc i64 %65 to i8
  %67 = and i8 %66, 1
  store i8 %67, i8* %29, align 1, !tbaa !2447
  %68 = icmp eq i64 %54, 0
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %30, align 1, !tbaa !2448
  %70 = lshr i64 %54, 63
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %31, align 1, !tbaa !2449
  %72 = lshr i64 %49, 63
  %73 = lshr i64 %53, 63
  %74 = xor i64 %73, %72
  %75 = xor i64 %70, %72
  %76 = add nuw nsw i64 %75, %74
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2450
  %.v = select i1 %68, i64 57, i64 14
  %79 = add i64 %44, %.v
  store i64 %79, i64* %PC, align 8, !tbaa !2428
  br i1 %68, label %block_404a89, label %block_404a5e

block_404a5e:                                     ; preds = %block_404a50
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = load i64, i64* %48, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = add i64 %81, 8
  store i64 %82, i64* %RCX, align 8, !tbaa !2428
  %83 = icmp ugt i64 %81, -9
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %27, align 1, !tbaa !2432
  %85 = trunc i64 %82 to i32
  %86 = and i32 %85, 255
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #8
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  store i8 %90, i8* %28, align 1, !tbaa !2446
  %91 = xor i64 %81, %82
  %92 = lshr i64 %91, 4
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %29, align 1, !tbaa !2447
  %95 = icmp eq i64 %82, 0
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %30, align 1, !tbaa !2448
  %97 = lshr i64 %82, 63
  %98 = trunc i64 %97 to i8
  store i8 %98, i8* %31, align 1, !tbaa !2449
  %99 = lshr i64 %81, 63
  %100 = xor i64 %97, %99
  %101 = add nuw nsw i64 %100, %97
  %102 = icmp eq i64 %101, 2
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %32, align 1, !tbaa !2450
  %104 = add i64 %79, 15
  store i64 %104, i64* %PC, align 8
  store i64 %82, i64* %48, align 8
  %105 = bitcast i64* %RAX to i64**
  %106 = load i64*, i64** %105, align 8
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC, align 8
  %109 = load i64, i64* %106, align 8
  %110 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %109, i64* %110, align 1, !tbaa !2451
  store double 0.000000e+00, double* %34, align 1, !tbaa !2451
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -24
  %113 = add i64 %107, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = add i64 %115, 8
  store i64 %116, i64* %RCX, align 8, !tbaa !2428
  %117 = icmp ugt i64 %115, -9
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %27, align 1, !tbaa !2432
  %119 = trunc i64 %116 to i32
  %120 = and i32 %119, 255
  %121 = tail call i32 @llvm.ctpop.i32(i32 %120) #8
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = xor i8 %123, 1
  store i8 %124, i8* %28, align 1, !tbaa !2446
  %125 = xor i64 %115, %116
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  store i8 %128, i8* %29, align 1, !tbaa !2447
  %129 = icmp eq i64 %116, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %30, align 1, !tbaa !2448
  %131 = lshr i64 %116, 63
  %132 = trunc i64 %131 to i8
  store i8 %132, i8* %31, align 1, !tbaa !2449
  %133 = lshr i64 %115, 63
  %134 = xor i64 %131, %133
  %135 = add nuw nsw i64 %134, %131
  %136 = icmp eq i64 %135, 2
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %32, align 1, !tbaa !2450
  %138 = add i64 %107, 19
  store i64 %138, i64* %PC, align 8
  store i64 %116, i64* %114, align 8
  %139 = load i64*, i64** %105, align 8
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC, align 8
  %142 = load i64, i64* %110, align 1
  store i64 %142, i64* %139, align 8
  %143 = load i64, i64* %PC, align 8
  %144 = add i64 %143, -52
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  br label %block_404a50
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d10__ZN12ValueWrapperIdEC2Ev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401d10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  %15 = add i64 %14, 1
  store i64 %15, i64* %PC, align 8
  %16 = load i64, i64* %5, align 8, !tbaa !2428
  %17 = add i64 %16, 8
  %18 = inttoptr i64 %16 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  store i64 %17, i64* %5, align 8, !tbaa !2428
  %20 = add i64 %14, 2
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  %23 = add i64 %16, 16
  store i64 %23, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402510__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402510:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402538

block_4025b9:                                     ; preds = %block_402538
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2446
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2447
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2448
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2449
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2450
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402548:                                     ; preds = %block_402538
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 1920
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402ce0__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__renamed_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 12687
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405710__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__renamed_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 2322
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402eb0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__renamed_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2446
  %240 = xor i32 %228, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2447
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2448
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2449
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2450
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402538

block_402538:                                     ; preds = %block_402548, %block_402510
  %255 = phi i64 [ %.pre, %block_402510 ], [ %254, %block_402548 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402510 ], [ %222, %block_402548 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2432
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #8
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2446
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2447
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2448
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2449
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2450
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402548, label %block_4025b9
}

; Function Attrs: noinline
define %struct.Memory* @sub_406150__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406150:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 80
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4061b0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 118
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_4061f0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_403b60__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403b60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 17
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %28, -32
  %35 = add i64 %30, 8
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RAX, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i32, i32* %ECX, align 4
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = add i64 %38, 162
  %42 = add i64 %38, 10
  %43 = load i64, i64* %RSP, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %46 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %41, %struct.Memory* %2)
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -40
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403b8c

block_403bf3:                                     ; preds = %block_403ba6
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -1
  %55 = add i64 %128, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i8*
  store i8 0, i8* %56, align 1
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 14
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  br label %block_403c05

block_403ba6:                                     ; preds = %block_403b8c
  %59 = add i64 %153, -16
  store i64 %59, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %60 = add i64 %152, 122
  %61 = add i64 %152, 11
  %62 = load i64, i64* %RSP, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64, align 8
  store i64 %63, i64* %RSP, align 8, !tbaa !2428
  store i64 %60, i64* %PC, align 8, !tbaa !2428
  %65 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %60, %struct.Memory* %142)
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %PC, align 8
  store i64 %67, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %RAX, align 8
  %70 = add i64 %68, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %69, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 215
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %65)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -32
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %82 = add i64 %79, -64
  %83 = load i64, i64* %RAX, align 8
  %84 = add i64 %81, 10
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %85, align 8
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 88
  %88 = add i64 %86, 5
  %89 = load i64, i64* %RSP, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91, align 8
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %92 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %78)
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -56
  %95 = load i64, i64* %PC, align 8
  store i64 %94, i64* %RDI, align 8, !tbaa !2428
  %96 = load i64, i64* %RAX, align 8
  %97 = add i64 %95, 8
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  store i64 %96, i64* %98, align 8
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 187
  %101 = add i64 %99, 5
  %102 = load i64, i64* %RSP, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104, align 8
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %105 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_renamed_(%struct.State* nonnull %0, i64 %100, %struct.Memory* %92)
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -64
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %RAX, align 8
  store i64 %112, i64* %RSI, align 8, !tbaa !2428
  %113 = add i64 %108, -2506
  %114 = add i64 %108, 12
  %115 = load i64, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %114, i64* %117, align 8
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %118 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4__renamed_(%struct.State* nonnull %0, i64 %113, %struct.Memory* %105)
  %119 = load i8, i8* %AL, align 1
  %120 = load i64, i64* %PC, align 8
  %121 = and i8 %119, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %122 = zext i8 %121 to i32
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #8
  %124 = trunc i32 %123 to i8
  %125 = xor i8 %124, 1
  store i8 %125, i8* %13, align 1, !tbaa !2446
  %126 = xor i8 %121, 1
  store i8 %126, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %127 = icmp eq i8 %126, 0
  %.v4 = select i1 %127, i64 13, i64 8
  %128 = add i64 %120, %.v4
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  br i1 %127, label %block_403bf3, label %block_403bee

block_403bee:                                     ; preds = %block_403ba6
  %129 = add i64 %128, -98
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  br label %block_403b8c

block_403ba1:                                     ; preds = %block_403b8c
  %130 = add i64 %153, -1
  %131 = add i64 %152, 100
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i8*
  store i8 1, i8* %132, align 1
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_403c05

block_403b8c:                                     ; preds = %block_403bee, %block_403b60
  %133 = phi i64 [ %.pre, %block_403b60 ], [ %129, %block_403bee ]
  %MEMORY.0 = phi %struct.Memory* [ %46, %block_403b60 ], [ %118, %block_403bee ]
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -16
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = add i64 %134, -24
  store i64 %136, i64* %RSI, align 8, !tbaa !2428
  %137 = add i64 %133, 212
  %138 = add i64 %133, 13
  %139 = load i64, i64* %RSP, align 8, !tbaa !2428
  %140 = add i64 %139, -8
  %141 = inttoptr i64 %140 to i64*
  store i64 %138, i64* %141, align 8
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  store i64 %137, i64* %PC, align 8, !tbaa !2428
  %142 = tail call %struct.Memory* @sub_403c60__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__renamed_(%struct.State* nonnull %0, i64 %137, %struct.Memory* %MEMORY.0)
  %143 = load i8, i8* %AL, align 1
  %144 = load i64, i64* %PC, align 8
  %145 = and i8 %143, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %146 = zext i8 %145 to i32
  %147 = tail call i32 @llvm.ctpop.i32(i32 %146) #8
  %148 = trunc i32 %147 to i8
  %149 = xor i8 %148, 1
  store i8 %149, i8* %13, align 1, !tbaa !2446
  %150 = xor i8 %145, 1
  store i8 %150, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %151 = icmp eq i8 %150, 0
  %.v = select i1 %151, i64 13, i64 8
  %152 = add i64 %144, %.v
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %153 = load i64, i64* %RBP, align 8
  br i1 %151, label %block_403ba6, label %block_403ba1

block_403c05:                                     ; preds = %block_403ba1, %block_403bf3
  %154 = phi i64 [ %58, %block_403bf3 ], [ %.pre3, %block_403ba1 ]
  %MEMORY.1 = phi %struct.Memory* [ %118, %block_403bf3 ], [ %142, %block_403ba1 ]
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -1
  %157 = add i64 %154, 3
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to i8*
  %159 = load i8, i8* %158, align 1
  %160 = and i8 %159, 1
  %161 = zext i8 %160 to i64
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RSP, align 8
  %163 = add i64 %162, 64
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  %164 = icmp ugt i64 %162, -65
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %12, align 1, !tbaa !2432
  %166 = trunc i64 %163 to i32
  %167 = and i32 %166, 255
  %168 = tail call i32 @llvm.ctpop.i32(i32 %167) #8
  %169 = trunc i32 %168 to i8
  %170 = and i8 %169, 1
  %171 = xor i8 %170, 1
  store i8 %171, i8* %13, align 1, !tbaa !2446
  %172 = xor i64 %162, %163
  %173 = lshr i64 %172, 4
  %174 = trunc i64 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* %14, align 1, !tbaa !2447
  %176 = icmp eq i64 %163, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %15, align 1, !tbaa !2448
  %178 = lshr i64 %163, 63
  %179 = trunc i64 %178 to i8
  store i8 %179, i8* %16, align 1, !tbaa !2449
  %180 = lshr i64 %162, 63
  %181 = xor i64 %178, %180
  %182 = add nuw nsw i64 %181, %178
  %183 = icmp eq i64 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %17, align 1, !tbaa !2450
  %185 = add i64 %154, 13
  store i64 %185, i64* %PC, align 8
  %186 = add i64 %162, 72
  %187 = inttoptr i64 %163 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RBP, align 8, !tbaa !2428
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  %189 = add i64 %154, 14
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %186 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  %192 = add i64 %162, 80
  store i64 %192, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401d40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 18352
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406500__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2447
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2448
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2449
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define %struct.Memory* @sub_4060f0__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4060f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 80
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406150__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -8
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %64, -32
  store i64 %67, i64* %RSI, align 8, !tbaa !2428
  %68 = add i64 %66, 13
  store i64 %68, i64* %PC, align 8
  %69 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %70 = load i64, i64* %69, align 1
  %71 = inttoptr i64 %67 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 118
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_406190__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__renamed_(%struct.State* nonnull %0, i64 %73, %struct.Memory* %63)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %69, align 1, !tbaa !2451
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %86 = bitcast i64* %85 to double*
  store double 0.000000e+00, double* %86, align 1, !tbaa !2451
  %87 = load i64, i64* %RSP, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  %89 = icmp ugt i64 %87, -33
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %13, align 1, !tbaa !2432
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #8
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %20, align 1, !tbaa !2446
  %97 = xor i64 %87, %88
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %25, align 1, !tbaa !2447
  %101 = icmp eq i64 %88, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %28, align 1, !tbaa !2448
  %103 = lshr i64 %88, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2449
  %105 = lshr i64 %87, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %37, align 1, !tbaa !2450
  %110 = add i64 %81, 10
  store i64 %110, i64* %PC, align 8
  %111 = add i64 %87, 40
  %112 = inttoptr i64 %88 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %81, 11
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = add i64 %87, 48
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_406130__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_406130:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4060d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4060d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402490__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402490:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4024b8

block_402501:                                     ; preds = %block_4024b8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2450
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4024c8:                                     ; preds = %block_4024b8
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 4232
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403550__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__renamed_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 13143
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405830__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__renamed_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %125)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 4538
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036a0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #8
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2446
  %175 = xor i32 %163, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2447
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2448
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2449
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2450
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_4024b8

block_4024b8:                                     ; preds = %block_4024c8, %block_402490
  %190 = phi i64 [ %.pre, %block_402490 ], [ %189, %block_4024c8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402490 ], [ %157, %block_4024c8 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2432
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #8
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2446
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2447
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2448
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2449
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2450
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4024c8, label %block_402501
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d70__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401d70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -16
  %12 = load i64, i64* %RDI, align 8
  %13 = add i64 %10, 7
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %12, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RSI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 5
  store i64 %24, i64* %PC, align 8
  %25 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %26 = load i64, i64* %25, align 1
  %27 = inttoptr i64 %22 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401d81

block_401d8f:                                     ; preds = %block_401d81
  %36 = add i64 %71, -24
  %37 = add i64 %105, 5
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %25, align 1, !tbaa !2451
  store double 0.000000e+00, double* %35, align 1, !tbaa !2451
  %40 = add i64 %105, 9
  store i64 %40, i64* %PC, align 8
  %41 = load i64, i64* %74, align 8
  store i64 %41, i64* %RAX, align 8, !tbaa !2428
  %42 = add i64 %41, 8
  store i64 %42, i64* %RCX, align 8, !tbaa !2428
  %43 = icmp ugt i64 %41, -9
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %28, align 1, !tbaa !2432
  %45 = trunc i64 %42 to i32
  %46 = and i32 %45, 255
  %47 = tail call i32 @llvm.ctpop.i32(i32 %46) #8
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  store i8 %50, i8* %29, align 1, !tbaa !2446
  %51 = xor i64 %41, %42
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  store i8 %54, i8* %30, align 1, !tbaa !2447
  %55 = icmp eq i64 %42, 0
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %31, align 1, !tbaa !2448
  %57 = lshr i64 %42, 63
  %58 = trunc i64 %57 to i8
  store i8 %58, i8* %32, align 1, !tbaa !2449
  %59 = lshr i64 %41, 63
  %60 = xor i64 %57, %59
  %61 = add nuw nsw i64 %60, %57
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  store i8 %63, i8* %33, align 1, !tbaa !2450
  %64 = add i64 %105, 20
  store i64 %64, i64* %PC, align 8
  store i64 %42, i64* %74, align 8
  %65 = bitcast i64* %RAX to i64**
  %66 = load i64*, i64** %65, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = load i64, i64* %25, align 1
  store i64 %68, i64* %66, align 8
  %69 = add i64 %67, -34
  store i64 %69, i64* %PC, align 8, !tbaa !2428
  br label %block_401d81

block_401d81:                                     ; preds = %block_401d8f, %block_401d70
  %70 = phi i64 [ %69, %block_401d8f ], [ %.pre, %block_401d70 ]
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -8
  %73 = add i64 %70, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %71, -16
  %77 = add i64 %70, 8
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = sub i64 %75, %79
  %81 = icmp ult i64 %75, %79
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %28, align 1, !tbaa !2432
  %83 = trunc i64 %80 to i32
  %84 = and i32 %83, 255
  %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #8
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = xor i8 %87, 1
  store i8 %88, i8* %29, align 1, !tbaa !2446
  %89 = xor i64 %79, %75
  %90 = xor i64 %89, %80
  %91 = lshr i64 %90, 4
  %92 = trunc i64 %91 to i8
  %93 = and i8 %92, 1
  store i8 %93, i8* %30, align 1, !tbaa !2447
  %94 = icmp eq i64 %80, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %31, align 1, !tbaa !2448
  %96 = lshr i64 %80, 63
  %97 = trunc i64 %96 to i8
  store i8 %97, i8* %32, align 1, !tbaa !2449
  %98 = lshr i64 %75, 63
  %99 = lshr i64 %79, 63
  %100 = xor i64 %99, %98
  %101 = xor i64 %96, %98
  %102 = add nuw nsw i64 %101, %100
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %33, align 1, !tbaa !2450
  %.v = select i1 %94, i64 43, i64 14
  %105 = add i64 %70, %.v
  store i64 %105, i64* %PC, align 8, !tbaa !2428
  br i1 %94, label %block_401dac, label %block_401d8f

block_401dac:                                     ; preds = %block_401d81
  %106 = add i64 %105, 1
  store i64 %106, i64* %PC, align 8
  %107 = load i64, i64* %6, align 8, !tbaa !2428
  %108 = add i64 %107, 8
  %109 = inttoptr i64 %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %6, align 8, !tbaa !2428
  %111 = add i64 %105, 2
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %107, 16
  store i64 %114, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400b70_frame_dummy() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400b70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400b70_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400b70_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400730__GLOBAL__sub_I_stepanov_abstraction_cpp() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400730__GLOBAL__sub_I_stepanov_abstraction_cpp_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400730__GLOBAL__sub_I_stepanov_abstraction_cpp(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400b40___do_global_dtors_aux() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400b40___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400b40___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6208b0_printf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6208d8_realloc(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @realloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_620950_exit(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6208a0_clock(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4066f0___libc_csu_fini() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4066f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_4066f0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4066f0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_406680___libc_csu_init() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_406680___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406680___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401220;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401220_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_620928___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_400720_rand(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @rand to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4006a0_strlen(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @strlen to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4006e0_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_400700_atoi(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_620900_atof(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atof to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_620930_srand(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @srand to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6208f8_exp(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exp to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6208b8_log(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @log to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4065c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4065c0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402770;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402770__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402090;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402090__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404420;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404420__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403b00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403b00__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIPdS1_EEvT_S2_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404a40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIPdS1_EEvT_S2_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404a40__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4031e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4031e0__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405d90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405d90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4029d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4029d0__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401b90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401b90__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4022b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4022b0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404110;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @21, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404110__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403b60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @22, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403b60__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406090;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @23, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406090__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403c20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @24, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403c20__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405fb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @25, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405fb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401df0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @26, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405eb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @27, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplIdE14PointerWrapperIT_ERS2_l() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @28, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplIdE14PointerWrapperIT_ERS2_l_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404760__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400640;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @29, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400640__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z9check_sumd() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @30, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z9check_sumd_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405db0__Z9check_sumd(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401f80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @31, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401f80__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402950;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @32, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402950__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4063d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @33, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4063d0__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltIdEbRK12ValueWrapperIT_ES4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403210;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @34, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltIdEbRK12ValueWrapperIT_ES4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403210__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4021d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @35, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4021d0__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403930;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @36, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403930__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z9summarizePKciiii() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400c80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @37, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z9summarizePKciiii_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400c80__Z9summarizePKciiii(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @38, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403010__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK14PointerWrapperIdEdeEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4046f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @39, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK14PointerWrapperIdEdeEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4046f0__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @40, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405fd0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13record_resultdPKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @41, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z13record_resultdPKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400b80__Z13record_resultdPKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406190;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @42, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406190__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @43, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402fd0__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402360;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @44, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402360__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4060d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @45, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4060d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402f10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @46, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402f10__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4026f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @47, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4026f0__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405ed0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @48, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @49, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4065f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @50, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4065f0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @51, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmiIdElR14PointerWrapperIT_ES3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @52, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZmiIdElR14PointerWrapperIT_ES3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404730__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @53, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406010__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN14PointerWrapperIdEC2EPd() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401bd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @54, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN14PointerWrapperIdEC2EPd_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperIdEC2EPd(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404fa0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @55, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404fa0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406350;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @56, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406350__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4025c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @57, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4025c0__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403290;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @58, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403290__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405af0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @59, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405af0__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4035a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @60, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4035a0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406620;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @61, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406620__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401bf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @62, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401bf0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405a20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @63, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405a20__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406030;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @64, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406030__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @65, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403550__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @66, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inIPddEEvlT_lT0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404c50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @67, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inIPddEEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404c50__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406530;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @68, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406530__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404f80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @69, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404f80__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4036a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @70, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4036a0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4036f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @71, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4036f0__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @72, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404fd0__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402a80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @73, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402a80__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4030f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @74, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4030f0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4fillIPddEEvT_S2_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @75, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4fillIPddEEvT_S2_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d70__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @76, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403d00__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortIPddEEvT_S2_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4055e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @77, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4055e0__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403090;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @78, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403090__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406250;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @79, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406250__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z11start_timerv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4011c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @80, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z11start_timerv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4011c0__Z11start_timerv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateIPddEvT_S1_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @81, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIPddEvT_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401e30__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @82, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403fc0__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4039b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @83, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4039b0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZneIdEbRK14PointerWrapperIT_ES4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4046c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @84, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZneIdEbRK14PointerWrapperIT_ES4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4046c0__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402170;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @85, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402170__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @86, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405e10__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltIdEbRK14PointerWrapperIT_ES4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4055b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @87, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltIdEbRK14PointerWrapperIT_ES4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4055b0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403060;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @88, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403060__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @89, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403cd0__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4062c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @90, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4062c0__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402490;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @91, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402490__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406130;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @92, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406130__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @93, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @94, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401db0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406590;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @95, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406590__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405900;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @96, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405900__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4052a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @97, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4052a0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIdEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @98, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIdEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405f10__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405710;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @99, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405710__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4032c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @100, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4032c0__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @101, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402bb0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortIPddEEvT_S2_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405c30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @102, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405c30__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @103, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @104, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405f30__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @105, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404010__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406560;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @106, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406560__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppIdER14PointerWrapperIT_ES3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404710;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @107, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZppIdER14PointerWrapperIT_ES3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404710__ZppIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplIdE12ValueWrapperIT_ERKS2_S4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406270;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @108, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplIdE12ValueWrapperIT_ERKS2_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406270__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401e90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @109, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401e90__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402b00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @110, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402b00__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @111, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403c90__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4060f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @112, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4060f0__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @113, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403d30__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4030c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @114, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4030c0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @115, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4028a0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404df0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @116, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404df0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @117, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405830;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @118, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405830__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402640;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @119, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402640__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403260;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @120, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403260__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403120;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @121, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403120__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4062e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @122, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4062e0__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @123, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406150;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @124, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406150__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4041f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @125, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4041f0__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortIPddEEvT_S2_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404a90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @126, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404a90__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4031b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @127, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4031b0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppIdE14PointerWrapperIT_ERS2_i() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @128, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZppIdE14PointerWrapperIT_ERS2_i_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404680__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z17summarize_simplefP8_IO_FILEPKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400fa0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @129, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z17summarize_simplefP8_IO_FILEPKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400fa0__Z17summarize_simplefP8_IO_FILEPKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404160;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @130, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404160__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @131, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c10__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402d60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @132, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402d60__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406440;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @133, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406440__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @134, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405e30__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4050f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @135, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4050f0__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405d10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @136, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405d10__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401cb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @137, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4066f4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @138, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4066f4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402ce0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @139, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402ce0__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4045c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @140, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4045c0__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark10accumulateIPddEET0_T_S3_S2_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4064b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @141, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark10accumulateIPddEET0_T_S3_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4064b0__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9is_sortedIPdEEbT_S2_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404bd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @142, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9is_sortedIPdEEbT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404bd0__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4053f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @143, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4053f0__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402230;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @144, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402230__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403150;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @145, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403150__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403780;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @146, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403780__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z5timerv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4011e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @147, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z5timerv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4011e0__Z5timerv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4043a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @148, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4043a0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4061f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @149, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4061f0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIdEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @150, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIdEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d10__ZN12ValueWrapperIdEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark11fill_randomIPddEEvT_S2_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402120;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @151, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark11fill_randomIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402120__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedI14PointerWrapperIdEEvT_S2_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404560;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @152, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperIdEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404560__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @153, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402010__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403240;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @154, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403240__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402c30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @155, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402c30__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IdEEC2Ev() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @156, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2Ev_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4052d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @157, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4052d0__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405280;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @158, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405280__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405ef0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @159, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406500;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @160, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406500__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedIPdEvT_S1_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @161, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedIPdEvT_S1__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404b80__Z13verify_sortedIPdEvT_S1_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401f00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @162, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401f00__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403180;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @163, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403180__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @164, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402510__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @165, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401bb0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IdEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406650;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @166, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406650__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402820;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @167, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402820__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZmmIdER14PointerWrapperIT_ES3_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405590;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @168, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZmmIdER14PointerWrapperIT_ES3__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405590__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403cb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @169, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403cb0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403040;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @170, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403040__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4061b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @171, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4061b0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403c60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @172, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403c60__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIdEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @173, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIdEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d20__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402eb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @174, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402eb0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406070;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @175, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406070__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404790;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @176, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404790__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @177, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d40__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406210;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @178, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406210__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4023e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @179, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4023e0__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

define internal void @__mcsema_destructor() {
  tail call void @callback_sub_4066f0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_406680___libc_csu_init()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { naked nobuiltin noinline }
attributes #8 = { nounwind }
attributes #9 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2452, !2452, i64 0}
!2452 = !{!"double", !2430, i64 0}
!2453 = !{!2430, !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"float", !2430, i64 0}
!2456 = !{!2445, !2445, i64 0}
