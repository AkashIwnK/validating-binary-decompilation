Writing '/tmp/tmpp7b4tgsd.dot'...
Writing '/tmp/tmpp7b4tgsd.dot':Done

Reading LLVM: /tmp/tmpye_20f_m-query.ll
Extracting function [_Z9check_sumd] from /tmp/tmpye_20f_m-query.ll
Dot file generated!
Writing '/tmp/tmpdnifr1oa.dot'...
Writing '/tmp/tmpdnifr1oa.dot':Done

Reading LLVM: /tmp/tmp47vjd0xj-target.ll
Extracting function [_Z9check_sumd] from /tmp/tmp47vjd0xj-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -24
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 16
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 49 %41 = add i64 %10, add (i64 ptrtoint (%G_0x950__rip__type* @G_0x950__rip_ to i64), i64 7)
- 50 %42 = add i64 %10, 15
- 51 store i64 %42, i64* %3, align 8
- 52 %43 = inttoptr i64 %41 to i64*
- 53 %44 = load i64, i64* %43, align 8
- 54 %45 = bitcast %union.VectorReg* %40 to double*
- 55 %46 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %40, i64 0, i32 0, i32 0, i32 0, i64 0
- 56 store i64 %44, i64* %46, align 1
- 57 %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 58 %48 = bitcast i64* %47 to double*
- 59 store double 0.000000e+00, double* %48, align 1
- 60 %49 = add i64 %7, -16
- 61 %50 = add i64 %10, 20
- 62 store i64 %50, i64* %3, align 8
- 63 %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 64 %52 = load i64, i64* %51, align 1
- 65 %53 = inttoptr i64 %49 to i64*
- 66 store i64 %52, i64* %53, align 8
- 67 %54 = load i64, i64* %RBP.i, align 8
- 68 %55 = add i64 %54, -8
- 69 %56 = load i64, i64* %3, align 8
- 70 %57 = add i64 %56, 5
- 71 store i64 %57, i64* %3, align 8
- 72 %58 = inttoptr i64 %55 to i64*
- 73 %59 = load i64, i64* %58, align 8
- 74 store i64 %59, i64* %51, align 1
- 75 %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 76 %61 = bitcast i64* %60 to double*
- 77 store double 0.000000e+00, double* %61, align 1
- 78 %62 = load double, double* %45, align 1
- 79 %63 = load double, double* bitcast (%G_0x609090_type* @G_0x609090 to double*), align 8
- 80 %64 = fmul double %62, %63
- 81 store double %64, double* %45, align 1
- 82 %65 = add i64 %56, 18
- 83 store i64 %65, i64* %3, align 8
- 84 %66 = bitcast i64 %59 to double
- 85 %67 = fcmp uno double %66, %64
- 86 \<badref\> = br i1 %67, label %68, label %78
- 87 %69 = fadd double %64, %66
- 88 %70 = bitcast double %69 to i64
- 89 %71 = and i64 %70, 9221120237041090560
- 90 %72 = icmp eq i64 %71, 9218868437227405312
- 91 %73 = and i64 %70, 2251799813685247
- 92 %74 = icmp ne i64 %73, 0
- 93 %75 = and i1 %72, %74
- 94 \<badref\> = br i1 %75, label %76, label %84
- 95 %77 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %65, %struct.Memory* %2)
- 96 %.pre = load i64, i64* %3, align 8
- 97 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 98 %79 = fcmp ogt double %66, %64
- 99 \<badref\> = br i1 %79, label %84, label %80
- 100 %81 = fcmp olt double %66, %64
- 101 \<badref\> = br i1 %81, label %84, label %82
- 102 %83 = fcmp oeq double %66, %64
- 103 \<badref\> = br i1 %83, label %84, label %88
- 104 %85 = phi i8 [ 0, %78 ], [ 0, %80 ], [ 1, %82 ], [ 1, %68 ]
- 105 %86 = phi i8 [ 0, %78 ], [ 0, %80 ], [ 0, %82 ], [ 1, %68 ]
- 106 %87 = phi i8 [ 0, %78 ], [ 1, %80 ], [ 0, %82 ], [ 1, %68 ]
- 107 store i8 %85, i8* %30, align 1
- 108 store i8 %86, i8* %21, align 1
- 109 store i8 %87, i8* %14, align 1
- 110 \<badref\> = br label %88
- 111 store i8 0, i8* %39, align 1
- 112 store i8 0, i8* %33, align 1
- 113 store i8 0, i8* %27, align 1
- 114 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 115 %89 = phi i64 [ %.pre, %76 ], [ %65, %88 ]
- 116 %90 = phi %struct.Memory* [ %77, %76 ], [ %2, %88 ]
- 117 %91 = add i64 %89, 17
- 118 %92 = add i64 %89, 6
- 119 %93 = load i8, i8* %30, align 1
- 120 %94 = icmp eq i8 %93, 0
- 121 %95 = select i1 %94, i64 %91, i64 %92
- 122 store i64 %95, i64* %3, align 8
- 123 \<badref\> = br i1 %94, label %block_.L_405e38, label %block_405e2d
- 124 %96 = load i8, i8* %21, align 1
- 125 %97 = icmp ne i8 %96, 0
- 126 %.v = select i1 %97, i64 11, i64 6
- 127 %98 = add i64 %95, %.v
- 128 store i64 %98, i64* %3, align 8
- 129 %cmpBr_405e2d = icmp eq i8 %96, 1
- 130 \<badref\> = br i1 %cmpBr_405e2d, label %block_.L_405e38, label %block_405e33
- 131 %99 = add i64 %98, 32
- 132 store i64 %99, i64* %3, align 8
- 133 \<badref\> = br label %block_.L_405e53
- 134 %100 = phi i64 [ %98, %block_405e2d ], [ %91, %routine_ucomisd__xmm1___xmm0.exit ]
- 135 %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 136 store i64 ptrtoint (%G__0x406b59_type* @G__0x406b59 to i64), i64* %RDI.i, align 8
- 137 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 138 %101 = load i32, i32* bitcast (%G_0x609118_type* @G_0x609118 to i32*), align 8
- 139 %102 = zext i32 %101 to i64
- 140 store i64 %102, i64* %RSI.i, align 8
- 141 %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 142 %AL.i = bitcast %union.anon* %103 to i8*
- 143 store i8 0, i8* %AL.i, align 1
- 144 %104 = add i64 %100, -22328
- 145 %105 = add i64 %100, 24
- 146 %106 = load i64, i64* %6, align 8
- 147 %107 = add i64 %106, -8
- 148 %108 = inttoptr i64 %107 to i64*
- 149 store i64 %105, i64* %108, align 8
- 150 store i64 %107, i64* %6, align 8
- 151 store i64 %104, i64* %3, align 8
- 152 %109 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %90)
- 153 %EAX.i = bitcast %union.anon* %103 to i32*
- 154 %110 = load i64, i64* %RBP.i, align 8
- 155 %111 = add i64 %110, -12
- 156 %112 = load i32, i32* %EAX.i, align 4
- 157 %113 = load i64, i64* %3, align 8
- 158 %114 = add i64 %113, 3
- 159 store i64 %114, i64* %3, align 8
- 160 %115 = inttoptr i64 %111 to i32*
- 161 store i32 %112, i32* %115, align 4
- 162 %.pre2 = load i64, i64* %3, align 8
- 163 \<badref\> = br label %block_.L_405e53
- 164 %116 = phi i64 [ %.pre2, %block_.L_405e38 ], [ %99, %block_405e33 ]
- 165 %MEMORY.1 = phi %struct.Memory* [ %109, %block_.L_405e38 ], [ %90, %block_405e33 ]
- 166 %117 = load i64, i64* %6, align 8
- 167 %118 = add i64 %117, 16
- 168 store i64 %118, i64* %6, align 8
- 169 %119 = icmp ugt i64 %117, -17
- 170 %120 = zext i1 %119 to i8
- 171 store i8 %120, i8* %14, align 1
- 172 %121 = trunc i64 %118 to i32
- 173 %122 = and i32 %121, 255
- 174 %123 = tail call i32 @llvm.ctpop.i32(i32 %122)
- 175 %124 = trunc i32 %123 to i8
- 176 %125 = and i8 %124, 1
- 177 %126 = xor i8 %125, 1
- 178 store i8 %126, i8* %21, align 1
- 179 %127 = xor i64 %117, 16
- 180 %128 = xor i64 %127, %118
- 181 %129 = lshr i64 %128, 4
- 182 %130 = trunc i64 %129 to i8
- 183 %131 = and i8 %130, 1
- 184 store i8 %131, i8* %27, align 1
- 185 %132 = icmp eq i64 %118, 0
- 186 %133 = zext i1 %132 to i8
- 187 store i8 %133, i8* %30, align 1
- 188 %134 = lshr i64 %118, 63
- 189 %135 = trunc i64 %134 to i8
- 190 store i8 %135, i8* %33, align 1
- 191 %136 = lshr i64 %117, 63
- 192 %137 = xor i64 %134, %136
- 193 %138 = add nuw nsw i64 %137, %134
- 194 %139 = icmp eq i64 %138, 2
- 195 %140 = zext i1 %139 to i8
- 196 store i8 %140, i8* %39, align 1
- 197 %141 = add i64 %116, 5
- 198 store i64 %141, i64* %3, align 8
- 199 %142 = add i64 %117, 24
- 200 %143 = inttoptr i64 %118 to i64*
- 201 %144 = load i64, i64* %143, align 8
- 202 store i64 %144, i64* %RBP.i, align 8
- 203 store i64 %142, i64* %6, align 8
- 204 %145 = add i64 %116, 6
- 205 store i64 %145, i64* %3, align 8
- 206 %146 = inttoptr i64 %142 to i64*
- 207 %147 = load i64, i64* %146, align 8
- 208 store i64 %147, i64* %3, align 8
- 209 %148 = add i64 %117, 32
- 210 store i64 %148, i64* %6, align 8
- 211 ret %struct.Memory* %MEMORY.1
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2385f652f0>, {0: {0}, 1: {7}, 2: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 3: {10}, 4: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 5: {6}, 6: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 7: {192, 69, 13}, 8: {161, 66, 193, 167, 73, 204, 14}, 9: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 10: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 11: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 12: {18}, 13: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 14: {20}, 15: {131, 40, 147, 51, 21, 186, 156}, 16: {22}, 17: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 18: {35, 133, 136, 44, 143, 150, 24, 27}, 19: {25, 134}, 20: {96, 26, 197, 135}, 21: {35, 133, 136, 44, 143, 150, 24, 27}, 22: {144, 137, 28, 36}, 23: {138, 29}, 24: {30}, 25: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 26: {32, 140}, 27: {48, 33, 153, 141}, 28: {34, 142}, 29: {35, 133, 136, 44, 143, 150, 24, 27}, 30: {144, 137, 28, 36}, 31: {37}, 32: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 33: {39, 177, 146, 121, 93}, 34: {131, 40, 147, 51, 21, 186, 156}, 35: {41}, 36: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 37: {152, 43, 149, 47}, 38: {35, 133, 136, 44, 143, 150, 24, 27}, 39: {45}, 40: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 41: {152, 43, 149, 47}, 42: {48, 33, 153, 141}, 43: {49, 154, 179}, 44: {50, 155}, 45: {131, 40, 147, 51, 21, 186, 156}, 46: {52}, 47: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 48: {8}, 49: {49, 154, 179}, 50: set(), 51: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 52: {161, 66, 193, 167, 73, 204, 14}, 53: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 54: {2, 3, 77, 85, 55, 89, 59}, 55: {56}, 56: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 57: {58}, 58: {2, 3, 77, 85, 55, 89, 59}, 59: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 60: {61}, 61: {62}, 62: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 63: {64}, 64: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 65: {161, 66, 193, 167, 73, 204, 14}, 66: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 67: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 68: {192, 69, 13}, 69: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 70: {158, 71}, 71: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 72: {161, 66, 193, 167, 73, 204, 14}, 73: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 74: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 75: {76}, 76: {2, 3, 77, 85, 55, 89, 59}, 77: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 78: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 79: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 80: {81}, 81: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 82: {83}, 83: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 84: {2, 3, 77, 85, 55, 89, 59}, 85: {99, 101, 86, 103}, 86: {100, 102, 104, 182, 87, 124, 95}, 87: {88}, 88: {2, 3, 77, 85, 55, 89, 59}, 89: {90}, 90: {91}, 91: {92}, 92: {39, 177, 146, 121, 93}, 93: {94}, 94: {100, 102, 104, 182, 87, 124, 95}, 95: {96, 26, 197, 135}, 96: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 97: {98, 207, 175, 111, 115}, 98: {99, 101, 86, 103}, 99: {100, 102, 104, 182, 87, 124, 95}, 100: {99, 101, 86, 103}, 101: {100, 102, 104, 182, 87, 124, 95}, 102: {99, 101, 86, 103}, 103: {100, 102, 104, 182, 87, 124, 95}, 104: {105}, 105: {106}, 106: {107}, 107: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 108: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 109: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 110: {98, 207, 175, 111, 115}, 111: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 112: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 113: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 114: {98, 207, 175, 111, 115}, 115: {116, 117, 183, 125, 126}, 116: {116, 117, 183, 125, 126}, 117: {118}, 118: {165, 119}, 119: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 120: {39, 177, 146, 121, 93}, 121: {122}, 122: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 123: {100, 102, 104, 182, 87, 124, 95}, 124: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 125: {39, 177, 146, 121, 93}, 126: {178}, 127: {49, 154, 179}, 128: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 129: {181}, 130: {100, 102, 104, 182, 87, 124, 95}, 131: {170, 173}, 132: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 133: {98, 207, 175, 111, 115}, 134: {116, 117, 183, 125, 126}, 135: {5}, 136: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 137: {4}, 138: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 139: {131, 40, 147, 51, 21, 186, 156}, 140: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 141: {1}, 142: {2, 3, 77, 85, 55, 89, 59}, 143: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 144: {189}, 145: {160, 190}, 146: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 147: {192, 69, 13}, 148: {161, 66, 193, 167, 73, 204, 14}, 149: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 150: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 151: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 152: {96, 26, 197, 135}, 153: {2, 3, 77, 85, 55, 89, 59}, 154: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 155: {199}, 156: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 157: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 158: {202}, 159: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 160: {161, 66, 193, 167, 73, 204, 14}, 161: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 162: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 163: {98, 207, 175, 111, 115}, 164: {116, 117, 183, 125, 126}, 165: {116, 117, 183, 125, 126}, 166: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 167: {128}, 168: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 169: {130}, 170: {131, 40, 147, 51, 21, 186, 156}, 171: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 172: {35, 133, 136, 44, 143, 150, 24, 27}, 173: {25, 134}, 174: {96, 26, 197, 135}, 175: {35, 133, 136, 44, 143, 150, 24, 27}, 176: {144, 137, 28, 36}, 177: {138, 29}, 178: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 179: {32, 140}, 180: {48, 33, 153, 141}, 181: {34, 142}, 182: {35, 133, 136, 44, 143, 150, 24, 27}, 183: {144, 137, 28, 36}, 184: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 185: {39, 177, 146, 121, 93}, 186: {131, 40, 147, 51, 21, 186, 156}, 187: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 188: {152, 43, 149, 47}, 189: {35, 133, 136, 44, 143, 150, 24, 27}, 190: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 191: {152, 43, 149, 47}, 192: {48, 33, 153, 141}, 193: {49, 154, 179}, 194: {50, 155}, 195: {131, 40, 147, 51, 21, 186, 156}, 196: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 197: {158, 71}, 198: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 199: {160, 190}, 200: {161, 66, 193, 167, 73, 204, 14}, 201: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 202: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 203: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 204: {165, 119}, 205: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 206: {161, 66, 193, 167, 73, 204, 14}, 207: {9, 12, 16, 162, 168, 176, 54, 185, 191, 65, 68, 70, 198, 200, 201, 74, 206, 79, 80, 97, 120, 127}, 208: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 209: {170, 173}, 210: {129, 132, 11, 139, 15, 17, 145, 19, 148, 23, 151, 157, 31, 159, 163, 164, 38, 166, 169, 42, 171, 46, 174, 180, 53, 184, 57, 187, 60, 188, 63, 194, 67, 195, 196, 72, 75, 203, 205, 78, 82, 84, 108, 109, 110, 112, 113, 114, 123}, 211: {172}})
Equivalent! frozenset({99, 101, 86, 103}) {98, 100, 85, 102}
Equivalent! frozenset({104, 100, 102, 87}) {99, 101, 86, 103}
Equivalent! frozenset({175, 98, 115, 111, 207}) {97, 163, 133, 110, 114}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2385f652f0>, {0: {0}, 1: {7}, 2: {9}, 3: {10}, 4: {11}, 5: {6}, 6: {12}, 7: {13}, 8: {14}, 9: {15}, 10: {16}, 11: {17}, 12: {18}, 13: {19}, 14: {20}, 15: {21}, 16: {22}, 17: {23}, 18: {24}, 19: {25}, 20: {26}, 21: {27}, 22: {28}, 23: {29}, 24: {30}, 25: {31}, 26: {32}, 27: {33}, 28: {34}, 29: {35}, 30: {36}, 31: {37}, 32: {38}, 33: {39}, 34: {40}, 35: {41}, 36: {42}, 37: {43}, 38: {44}, 39: {45}, 40: {46}, 41: {47}, 42: {48}, 43: {49}, 44: {50}, 45: {51}, 46: {52}, 47: {53}, 48: {8}, 49: set(), 50: set(), 51: set(), 52: set(), 53: set(), 54: {55}, 55: set(), 56: set(), 57: {58}, 58: {59}, 59: {60}, 60: {61}, 61: {62}, 62: {63}, 63: {64}, 64: {65}, 65: {66}, 66: {67}, 67: {68}, 68: {69}, 69: {70}, 70: {71}, 71: {72}, 72: {73}, 73: {74}, 74: {75}, 75: {76}, 76: {77}, 77: {78}, 78: {79}, 79: {79, 80}, 80: {81}, 81: {82}, 82: {83}, 83: {84}, 84: {85}, 85: {86}, 86: {102}, 87: {88}, 88: {89}, 89: {90}, 90: {91}, 91: {92}, 92: {93}, 93: {94}, 94: {95}, 95: {96}, 96: {97}, 97: {175}, 98: {99}, 99: {104}, 100: {101}, 101: {100}, 102: {103}, 103: {87}, 104: {105}, 105: {106}, 106: {107}, 107: {108}, 108: {109}, 109: {110}, 110: {111}, 111: {112, 53, 157}, 112: {113, 46, 151}, 113: {145, 114, 38}, 114: {207}, 115: {116}, 116: {117}, 117: {118}, 118: {119}, 119: {120}, 120: {121}, 121: {122}, 122: {123}, 123: {124}, 124: {176}, 125: {177}, 126: {178}, 127: {179}, 128: {180}, 129: {181}, 130: {182}, 131: {173}, 132: {174}, 133: {115}, 134: {183}, 135: {5}, 136: {184}, 137: {4}, 138: {185}, 139: {186}, 140: {187}, 141: {1}, 142: {2}, 143: {188}, 144: {189}, 145: {190}, 146: {191}, 147: {192}, 148: {193}, 149: {194}, 150: {195}, 151: {196}, 152: {197}, 153: {3}, 154: {198}, 155: {199}, 156: {200}, 157: {201}, 158: {202}, 159: {203}, 160: {204}, 161: {205}, 162: {206}, 163: {98}, 164: {125}, 165: {126}, 166: {127}, 167: {128}, 168: {129}, 169: {130}, 170: {131}, 171: {132}, 172: {133}, 173: {134}, 174: {135}, 175: {136}, 176: {137}, 177: {138}, 178: {139}, 179: {140}, 180: {141}, 181: {142}, 182: {143}, 183: {144}, 184: {145}, 185: {146}, 186: {147}, 187: {148}, 188: {149}, 189: {150}, 190: {151}, 191: {152}, 192: {153}, 193: {154}, 194: {155}, 195: {156}, 196: {157}, 197: {158}, 198: {159}, 199: {160}, 200: {161}, 201: {162}, 202: {163}, 203: {164}, 204: {165}, 205: {166}, 206: {167}, 207: {168}, 208: {169}, 209: {170}, 210: {171}, 211: {172}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
NO MATCH 49
NO MATCH 50
NO MATCH 51
NO MATCH 52
NO MATCH 53
EXACT 54 bitcast bitcast
NO MATCH 55
NO MATCH 56
EXACT 57 getelementptr getelementptr
EXACT 58 bitcast bitcast
EXACT 59 store store
EXACT 60 add add
EXACT 61 add add
EXACT 62 store store
EXACT 63 getelementptr getelementptr
EXACT 64 load load
EXACT 65 inttoptr inttoptr
EXACT 66 store store
EXACT 67 load load
EXACT 68 add add
EXACT 69 load load
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 load load
EXACT 74 store store
EXACT 75 getelementptr getelementptr
EXACT 76 bitcast bitcast
EXACT 77 store store
EXACT 78 load load
MORE 79 POT: 2
EXACT 80 fmul fmul
EXACT 81 store store
EXACT 82 add add
EXACT 83 store store
EXACT 84 bitcast bitcast
EXACT 85 fcmp fcmp
EXACT 86 br br
EXACT 87 fadd fadd
EXACT 88 bitcast bitcast
EXACT 89 and and
EXACT 90 icmp icmp
EXACT 91 and and
EXACT 92 icmp icmp
EXACT 93 and and
EXACT 94 br br
EXACT 95 tail tail
EXACT 96 load load
EXACT 97 br br
EXACT 98 fcmp fcmp
EXACT 99 br br
EXACT 100 fcmp fcmp
EXACT 101 br br
EXACT 102 fcmp fcmp
EXACT 103 br br
EXACT 104 phi phi
EXACT 105 phi phi
EXACT 106 phi phi
EXACT 107 store store
EXACT 108 store store
EXACT 109 store store
EXACT 110 br br
MORE 111 POT: 3
MORE 112 POT: 3
MORE 113 POT: 3
EXACT 114 br br
EXACT 115 phi phi
EXACT 116 phi phi
EXACT 117 add add
EXACT 118 add add
EXACT 119 load load
EXACT 120 icmp icmp
EXACT 121 select select
EXACT 122 store store
EXACT 123 br br
EXACT 124 load load
EXACT 125 icmp icmp
EXACT 126 select select
EXACT 127 add add
EXACT 128 store store
EXACT 129 icmp icmp
EXACT 130 br br
EXACT 131 add add
EXACT 132 store store
EXACT 133 br br
EXACT 134 phi phi
EXACT 135 getelementptr getelementptr
EXACT 136 store store
EXACT 137 getelementptr getelementptr
EXACT 138 load load
EXACT 139 zext zext
EXACT 140 store store
EXACT 141 getelementptr getelementptr
EXACT 142 bitcast bitcast
EXACT 143 store store
EXACT 144 add add
EXACT 145 add add
EXACT 146 load load
EXACT 147 add add
EXACT 148 inttoptr inttoptr
EXACT 149 store store
EXACT 150 store store
EXACT 151 store store
EXACT 152 tail tail
EXACT 153 bitcast bitcast
EXACT 154 load load
EXACT 155 add add
EXACT 156 load load
EXACT 157 load load
EXACT 158 add add
EXACT 159 store store
EXACT 160 inttoptr inttoptr
EXACT 161 store store
EXACT 162 load load
EXACT 163 br br
EXACT 164 phi phi
EXACT 165 phi phi
EXACT 166 load load
EXACT 167 add add
EXACT 168 store store
EXACT 169 icmp icmp
EXACT 170 zext zext
EXACT 171 store store
EXACT 172 trunc trunc
EXACT 173 and and
EXACT 174 tail tail
EXACT 175 trunc trunc
EXACT 176 and and
EXACT 177 xor xor
EXACT 178 store store
EXACT 179 xor xor
EXACT 180 xor xor
EXACT 181 lshr lshr
EXACT 182 trunc trunc
EXACT 183 and and
EXACT 184 store store
EXACT 185 icmp icmp
EXACT 186 zext zext
EXACT 187 store store
EXACT 188 lshr lshr
EXACT 189 trunc trunc
EXACT 190 store store
EXACT 191 lshr lshr
EXACT 192 xor xor
EXACT 193 add add
EXACT 194 icmp icmp
EXACT 195 zext zext
EXACT 196 store store
EXACT 197 add add
EXACT 198 store store
EXACT 199 add add
EXACT 200 inttoptr inttoptr
EXACT 201 load load
EXACT 202 store store
EXACT 203 store store
EXACT 204 add add
EXACT 205 store store
EXACT 206 inttoptr inttoptr
EXACT 207 load load
EXACT 208 store store
EXACT 209 add add
EXACT 210 store store
EXACT 211 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 5 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 6 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 7 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 8 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 9 %5 = load i64, i64* %RBP, align 8
- 10 %6 = add i64 %1, 1
- 11 store i64 %6, i64* %PC, align 8
- 12 %7 = load i64, i64* %RSP, align 8
- 13 %8 = add i64 %7, -8
- 14 %9 = inttoptr i64 %8 to i64*
- 15 store i64 %5, i64* %9, align 8
- 16 %10 = load i64, i64* %PC, align 8
- 17 store i64 %8, i64* %RBP, align 8
- 18 %11 = add i64 %7, -24
- 19 store i64 %11, i64* %RSP, align 8
- 20 %12 = icmp ult i64 %8, 16
- 21 %13 = zext i1 %12 to i8
- 22 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 23 store i8 %13, i8* %14, align 1
- 24 %15 = trunc i64 %11 to i32
- 25 %16 = and i32 %15, 255
- 26 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 27 %18 = trunc i32 %17 to i8
- 28 %19 = and i8 %18, 1
- 29 %20 = xor i8 %19, 1
- 30 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 31 store i8 %20, i8* %21, align 1
- 32 %22 = xor i64 %8, 16
- 33 %23 = xor i64 %22, %11
- 34 %24 = lshr i64 %23, 4
- 35 %25 = trunc i64 %24 to i8
- 36 %26 = and i8 %25, 1
- 37 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 38 store i8 %26, i8* %27, align 1
- 39 %28 = icmp eq i64 %11, 0
- 40 %29 = zext i1 %28 to i8
- 41 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 42 store i8 %29, i8* %30, align 1
- 43 %31 = lshr i64 %11, 63
- 44 %32 = trunc i64 %31 to i8
- 45 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 46 store i8 %32, i8* %33, align 1
- 47 %34 = lshr i64 %8, 63
- 48 %35 = xor i64 %31, %34
- 49 %36 = add nuw nsw i64 %35, %34
- 50 %37 = icmp eq i64 %36, 2
- 51 %38 = zext i1 %37 to i8
- 52 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 53 store i8 %38, i8* %39, align 1
- 54 %40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 16) to i64*), align 16
- 55 %41 = bitcast %union.VectorReg* %4 to double*
- 56 %42 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
- 57 store i64 %40, i64* %42, align 1
- 58 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 59 %44 = bitcast i64* %43 to double*
- 60 store double 0.000000e+00, double* %44, align 1
- 61 %45 = add i64 %7, -16
- 62 %46 = add i64 %10, 20
- 63 store i64 %46, i64* %PC, align 8
- 64 %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 65 %48 = load i64, i64* %47, align 1
- 66 %49 = inttoptr i64 %45 to i64*
- 67 store i64 %48, i64* %49, align 8
- 68 %50 = load i64, i64* %RBP, align 8
- 69 %51 = add i64 %50, -8
- 70 %52 = load i64, i64* %PC, align 8
- 71 %53 = add i64 %52, 5
- 72 store i64 %53, i64* %PC, align 8
- 73 %54 = inttoptr i64 %51 to i64*
- 74 %55 = load i64, i64* %54, align 8
- 75 store i64 %55, i64* %47, align 1
- 76 %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 77 %57 = bitcast i64* %56 to double*
- 78 store double 0.000000e+00, double* %57, align 1
- 79 %58 = load double, double* %41, align 1
- 80 %59 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
- 81 %60 = fmul double %58, %59
- 82 store double %60, double* %41, align 1
- 83 %61 = add i64 %52, 18
- 84 store i64 %61, i64* %PC, align 8
- 85 %62 = bitcast i64 %55 to double
- 86 %63 = fcmp uno double %62, %60
- 87 \<badref\> = br i1 %63, label %64, label %74
- 88 %65 = fadd double %60, %62
- 89 %66 = bitcast double %65 to i64
- 90 %67 = and i64 %66, 9221120237041090560
- 91 %68 = icmp eq i64 %67, 9218868437227405312
- 92 %69 = and i64 %66, 2251799813685247
- 93 %70 = icmp ne i64 %69, 0
- 94 %71 = and i1 %68, %70
- 95 \<badref\> = br i1 %71, label %72, label %80
- 96 %73 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %61, %struct.Memory* %2) #13
- 97 %.pre = load i64, i64* %PC, align 8
- 98 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 99 %75 = fcmp ogt double %62, %60
- 100 \<badref\> = br i1 %75, label %80, label %76
- 101 %77 = fcmp olt double %62, %60
- 102 \<badref\> = br i1 %77, label %80, label %78
- 103 %79 = fcmp oeq double %62, %60
- 104 \<badref\> = br i1 %79, label %80, label %84
- 105 %81 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 1, %78 ], [ 1, %64 ]
- 106 %82 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 0, %78 ], [ 1, %64 ]
- 107 %83 = phi i8 [ 0, %74 ], [ 1, %76 ], [ 0, %78 ], [ 1, %64 ]
- 108 store i8 %81, i8* %30, align 1
- 109 store i8 %82, i8* %21, align 1
- 110 store i8 %83, i8* %14, align 1
- 111 \<badref\> = br label %84
- 112 store i8 0, i8* %39, align 1
- 113 store i8 0, i8* %33, align 1
- 114 store i8 0, i8* %27, align 1
- 115 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 116 %85 = phi i64 [ %.pre, %72 ], [ %61, %84 ]
- 117 %86 = phi %struct.Memory* [ %73, %72 ], [ %2, %84 ]
- 118 %87 = add i64 %85, 17
- 119 %88 = add i64 %85, 6
- 120 %89 = load i8, i8* %30, align 1
- 121 %90 = icmp eq i8 %89, 0
- 122 %91 = select i1 %90, i64 %87, i64 %88
- 123 store i64 %91, i64* %PC, align 8
- 124 \<badref\> = br i1 %90, label %block_405e38, label %block_405e2d
- 125 %92 = phi i64 [ %.pre2, %block_405e38 ], [ %125, %block_405e33 ]
- 126 %MEMORY.0 = phi %struct.Memory* [ %138, %block_405e38 ], [ %86, %block_405e33 ]
- 127 %93 = load i64, i64* %RSP, align 8
- 128 %94 = add i64 %93, 16
- 129 store i64 %94, i64* %RSP, align 8
- 130 %95 = icmp ugt i64 %93, -17
- 131 %96 = zext i1 %95 to i8
- 132 store i8 %96, i8* %14, align 1
- 133 %97 = trunc i64 %94 to i32
- 134 %98 = and i32 %97, 255
- 135 %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #12
- 136 %100 = trunc i32 %99 to i8
- 137 %101 = and i8 %100, 1
- 138 %102 = xor i8 %101, 1
- 139 store i8 %102, i8* %21, align 1
- 140 %103 = xor i64 %93, 16
- 141 %104 = xor i64 %103, %94
- 142 %105 = lshr i64 %104, 4
- 143 %106 = trunc i64 %105 to i8
- 144 %107 = and i8 %106, 1
- 145 store i8 %107, i8* %27, align 1
- 146 %108 = icmp eq i64 %94, 0
- 147 %109 = zext i1 %108 to i8
- 148 store i8 %109, i8* %30, align 1
- 149 %110 = lshr i64 %94, 63
- 150 %111 = trunc i64 %110 to i8
- 151 store i8 %111, i8* %33, align 1
- 152 %112 = lshr i64 %93, 63
- 153 %113 = xor i64 %110, %112
- 154 %114 = add nuw nsw i64 %113, %110
- 155 %115 = icmp eq i64 %114, 2
- 156 %116 = zext i1 %115 to i8
- 157 store i8 %116, i8* %39, align 1
- 158 %117 = add i64 %92, 5
- 159 store i64 %117, i64* %PC, align 8
- 160 %118 = add i64 %93, 24
- 161 %119 = inttoptr i64 %94 to i64*
- 162 %120 = load i64, i64* %119, align 8
- 163 store i64 %120, i64* %RBP, align 8
- 164 store i64 %118, i64* %RSP, align 8
- 165 %121 = add i64 %92, 6
- 166 store i64 %121, i64* %PC, align 8
- 167 %122 = inttoptr i64 %118 to i64*
- 168 %123 = load i64, i64* %122, align 8
- 169 store i64 %123, i64* %PC, align 8
- 170 %124 = add i64 %93, 32
- 171 store i64 %124, i64* %RSP, align 8
- 172 ret %struct.Memory* %MEMORY.0
- 173 %125 = add i64 %128, 32
- 174 store i64 %125, i64* %PC, align 8
- 175 \<badref\> = br label %block_405e53
- 176 %126 = load i8, i8* %21, align 1
- 177 %127 = icmp ne i8 %126, 0
- 178 %.v = select i1 %127, i64 11, i64 6
- 179 %128 = add i64 %91, %.v
- 180 store i64 %128, i64* %PC, align 8
- 181 %129 = icmp eq i8 %126, 1
- 182 \<badref\> = br i1 %129, label %block_405e38, label %block_405e33
- 183 %130 = phi i64 [ %128, %block_405e2d ], [ %87, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
- 184 store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1033), i64* %RDI, align 8
- 185 %131 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
- 186 %132 = zext i32 %131 to i64
- 187 store i64 %132, i64* %RSI, align 8
- 188 store i8 0, i8* %AL, align 1
- 189 %133 = add i64 %130, -22328
- 190 %134 = add i64 %130, 24
- 191 %135 = load i64, i64* %RSP, align 8
- 192 %136 = add i64 %135, -8
- 193 %137 = inttoptr i64 %136 to i64*
- 194 store i64 %134, i64* %137, align 8
- 195 store i64 %136, i64* %RSP, align 8
- 196 store i64 %133, i64* %PC, align 8
- 197 %138 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %86)
- 198 %139 = load i64, i64* %RBP, align 8
- 199 %140 = add i64 %139, -12
- 200 %141 = load i32, i32* %EAX, align 4
- 201 %142 = load i64, i64* %PC, align 8
- 202 %143 = add i64 %142, 3
- 203 store i64 %143, i64* %PC, align 8
- 204 %144 = inttoptr i64 %140 to i32*
- 205 store i32 %141, i32* %144, align 4
- 206 %.pre2 = load i64, i64* %PC, align 8
- 207 \<badref\> = br label %block_405e53
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2385f65158>, {0: {0}, 1: {141}, 2: {76, 142, 84, 54, 88, 153, 58}, 3: {76, 142, 84, 54, 88, 153, 58}, 4: {137}, 5: {135}, 6: {5}, 7: {1}, 8: {48}, 9: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 10: {3}, 11: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 12: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 13: {147, 68, 7}, 14: {160, 65, 8, 72, 200, 206, 52, 148}, 15: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 16: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 17: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 18: {12}, 19: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 20: {14}, 21: {34, 195, 170, 139, 45, 15, 186}, 22: {16}, 23: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 24: {38, 172, 175, 18, 21, 182, 189, 29}, 25: {19, 173}, 26: {152, 20, 174, 95}, 27: {38, 172, 175, 18, 21, 182, 189, 29}, 28: {176, 183, 22, 30}, 29: {177, 23}, 30: {24}, 31: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 32: {26, 179}, 33: {192, 42, 27, 180}, 34: {28, 181}, 35: {38, 172, 175, 18, 21, 182, 189, 29}, 36: {176, 183, 22, 30}, 37: {31}, 38: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 39: {33, 120, 185, 92, 125}, 40: {34, 195, 170, 139, 45, 15, 186}, 41: {35}, 42: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 43: {41, 188, 37, 191}, 44: {38, 172, 175, 18, 21, 182, 189, 29}, 45: {39}, 46: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 47: {41, 188, 37, 191}, 48: {192, 42, 27, 180}, 49: {49, 43, 193, 127}, 50: {194, 44}, 51: {34, 195, 170, 139, 45, 15, 186}, 52: {46}, 53: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 54: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 55: {76, 142, 84, 54, 88, 153, 58}, 56: {55}, 57: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 58: {57}, 59: {76, 142, 84, 54, 88, 153, 58}, 60: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 61: {60}, 62: {61}, 63: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 64: {63}, 65: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 66: {160, 65, 8, 72, 200, 206, 52, 148}, 67: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 68: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 69: {147, 68, 7}, 70: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 71: {197, 70}, 72: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 73: {160, 65, 8, 72, 200, 206, 52, 148}, 74: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 75: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 76: {75}, 77: {76, 142, 84, 54, 88, 153, 58}, 78: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 79: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 80: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 81: {80}, 82: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 83: {82}, 84: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 85: {76, 142, 84, 54, 88, 153, 58}, 86: {98, 100, 85, 102}, 87: {130, 99, 101, 103, 86, 123, 94}, 88: {87}, 89: {76, 142, 84, 54, 88, 153, 58}, 90: {89}, 91: {90}, 92: {91}, 93: {33, 120, 185, 92, 125}, 94: {93}, 95: {130, 99, 101, 103, 86, 123, 94}, 96: {152, 20, 174, 95}, 97: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 98: {97, 163, 133, 110, 114}, 99: {98, 100, 85, 102}, 100: {130, 99, 101, 103, 86, 123, 94}, 101: {98, 100, 85, 102}, 102: {130, 99, 101, 103, 86, 123, 94}, 103: {98, 100, 85, 102}, 104: {130, 99, 101, 103, 86, 123, 94}, 105: {104}, 106: {105}, 107: {106}, 108: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 109: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 110: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 111: {97, 163, 133, 110, 114}, 112: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 113: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 114: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 115: {97, 163, 133, 110, 114}, 116: {164, 165, 134, 115, 116}, 117: {164, 165, 134, 115, 116}, 118: {117}, 119: {204, 118}, 120: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 121: {33, 120, 185, 92, 125}, 122: {121}, 123: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 124: {130, 99, 101, 103, 86, 123, 94}, 125: {164, 165, 134, 115, 116}, 126: {164, 165, 134, 115, 116}, 127: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 128: {167}, 129: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 130: {169}, 131: {34, 195, 170, 139, 45, 15, 186}, 132: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 133: {38, 172, 175, 18, 21, 182, 189, 29}, 134: {19, 173}, 135: {152, 20, 174, 95}, 136: {38, 172, 175, 18, 21, 182, 189, 29}, 137: {176, 183, 22, 30}, 138: {177, 23}, 139: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 140: {26, 179}, 141: {192, 42, 27, 180}, 142: {28, 181}, 143: {38, 172, 175, 18, 21, 182, 189, 29}, 144: {176, 183, 22, 30}, 145: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 146: {33, 120, 185, 92, 125}, 147: {34, 195, 170, 139, 45, 15, 186}, 148: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 149: {41, 188, 37, 191}, 150: {38, 172, 175, 18, 21, 182, 189, 29}, 151: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 152: {41, 188, 37, 191}, 153: {192, 42, 27, 180}, 154: {49, 43, 193, 127}, 155: {194, 44}, 156: {34, 195, 170, 139, 45, 15, 186}, 157: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 158: {197, 70}, 159: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 160: {145, 199}, 161: {160, 65, 8, 72, 200, 206, 52, 148}, 162: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 163: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 164: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 165: {204, 118}, 166: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 167: {160, 65, 8, 72, 200, 206, 52, 148}, 168: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 169: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 170: {209, 131}, 171: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 172: {211}, 173: {209, 131}, 174: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 175: {97, 163, 133, 110, 114}, 176: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 177: {33, 120, 185, 92, 125}, 178: {126}, 179: {49, 43, 193, 127}, 180: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 181: {129}, 182: {130, 99, 101, 103, 86, 123, 94}, 183: {164, 165, 134, 115, 116}, 184: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 185: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 186: {34, 195, 170, 139, 45, 15, 186}, 187: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 188: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 189: {144}, 190: {145, 199}, 191: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 192: {147, 68, 7}, 193: {160, 65, 8, 72, 200, 206, 52, 148}, 194: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 195: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 196: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 197: {152, 20, 174, 95}, 198: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 199: {155}, 200: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 201: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 202: {158}, 203: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 204: {160, 65, 8, 72, 200, 206, 52, 148}, 205: {128, 4, 132, 136, 9, 11, 140, 13, 143, 17, 149, 150, 151, 25, 159, 32, 161, 36, 40, 168, 171, 47, 178, 51, 56, 184, 59, 187, 62, 190, 66, 196, 198, 71, 74, 202, 203, 77, 205, 208, 81, 210, 83, 107, 108, 109, 111, 112, 113, 122}, 206: {2, 6, 10, 138, 146, 154, 156, 157, 162, 166, 53, 64, 67, 69, 73, 201, 78, 79, 207, 96, 119, 124}, 207: {97, 163, 133, 110, 114}})
Equivalent! frozenset({98, 100, 85, 102}) {99, 101, 86, 103}
Equivalent! frozenset({99, 101, 86, 103}) {104, 100, 102, 87}
Equivalent! frozenset({97, 114, 163, 133, 110}) {98, 207, 175, 111, 115}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2385f65158>, {0: {0}, 1: {141}, 2: {142}, 3: {153}, 4: {137}, 5: {135}, 6: {5}, 7: {1}, 8: {48}, 9: {2}, 10: {3}, 11: {4}, 12: {6}, 13: {7}, 14: {8}, 15: {9}, 16: {10}, 17: {11}, 18: {12}, 19: {13}, 20: {14}, 21: {15}, 22: {16}, 23: {17}, 24: {18}, 25: {19}, 26: {20}, 27: {21}, 28: {22}, 29: {23}, 30: {24}, 31: {25}, 32: {26}, 33: {27}, 34: {28}, 35: {29}, 36: {30}, 37: {31}, 38: {32}, 39: {33}, 40: {34}, 41: {35}, 42: {36}, 43: {37}, 44: {38}, 45: {39}, 46: {40}, 47: {41}, 48: {42}, 49: {43}, 50: {44}, 51: {45}, 52: {46}, 53: {47}, 54: {53}, 55: {54}, 56: {55}, 57: {56}, 58: {57}, 59: {58}, 60: {59}, 61: {60}, 62: {61}, 63: {62}, 64: {63}, 65: {64}, 66: {65}, 67: {66}, 68: {67}, 69: {68}, 70: {69}, 71: {70}, 72: {71}, 73: {72}, 74: {73}, 75: {74}, 76: {75}, 77: {76}, 78: {77}, 79: {78}, 80: {78, 79}, 81: {80}, 82: {81}, 83: {82}, 84: {83}, 85: {84}, 86: {85}, 87: {103}, 88: {87}, 89: {88}, 90: {89}, 91: {90}, 92: {91}, 93: {92}, 94: {93}, 95: {94}, 96: {95}, 97: {96}, 98: {97}, 99: {98}, 100: {101}, 101: {100}, 102: {86}, 103: {102}, 104: {99}, 105: {104}, 106: {105}, 107: {106}, 108: {107}, 109: {108}, 110: {109}, 111: {133}, 112: {196, 47, 111}, 113: {112, 40, 190}, 114: {184, 113, 32}, 115: {110}, 116: {115}, 117: {116}, 118: {117}, 119: {118}, 120: {119}, 121: {120}, 122: {121}, 123: {122}, 124: {123}, 125: {164}, 126: {165}, 127: {166}, 128: {167}, 129: {168}, 130: {169}, 131: {170}, 132: {171}, 133: {172}, 134: {173}, 135: {174}, 136: {175}, 137: {176}, 138: {177}, 139: {178}, 140: {179}, 141: {180}, 142: {181}, 143: {182}, 144: {183}, 145: {184}, 146: {185}, 147: {186}, 148: {187}, 149: {188}, 150: {189}, 151: {190}, 152: {191}, 153: {192}, 154: {193}, 155: {194}, 156: {195}, 157: {196}, 158: {197}, 159: {198}, 160: {199}, 161: {200}, 162: {201}, 163: {202}, 164: {203}, 165: {204}, 166: {205}, 167: {206}, 168: {207}, 169: {208}, 170: {209}, 171: {210}, 172: {211}, 173: {131}, 174: {132}, 175: {163}, 176: {124}, 177: {125}, 178: {126}, 179: {127}, 180: {128}, 181: {129}, 182: {130}, 183: {134}, 184: {136}, 185: {138}, 186: {139}, 187: {140}, 188: {143}, 189: {144}, 190: {145}, 191: {146}, 192: {147}, 193: {148}, 194: {149}, 195: {150}, 196: {151}, 197: {152}, 198: {154}, 199: {155}, 200: {156}, 201: {157}, 202: {158}, 203: {159}, 204: {160}, 205: {161}, 206: {162}, 207: {114}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 load load
EXACT 10 add add
EXACT 11 store store
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 store store
EXACT 16 load load
EXACT 17 store store
EXACT 18 add add
EXACT 19 store store
EXACT 20 icmp icmp
EXACT 21 zext zext
EXACT 22 getelementptr getelementptr
EXACT 23 store store
EXACT 24 trunc trunc
EXACT 25 and and
EXACT 26 tail tail
EXACT 27 trunc trunc
EXACT 28 and and
EXACT 29 xor xor
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 xor xor
EXACT 33 xor xor
EXACT 34 lshr lshr
EXACT 35 trunc trunc
EXACT 36 and and
EXACT 37 getelementptr getelementptr
EXACT 38 store store
EXACT 39 icmp icmp
EXACT 40 zext zext
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 lshr lshr
EXACT 44 trunc trunc
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 xor xor
EXACT 49 add add
EXACT 50 icmp icmp
EXACT 51 zext zext
EXACT 52 getelementptr getelementptr
EXACT 53 store store
EXACT 54 load load
EXACT 55 bitcast bitcast
EXACT 56 getelementptr getelementptr
EXACT 57 store store
EXACT 58 getelementptr getelementptr
EXACT 59 bitcast bitcast
EXACT 60 store store
EXACT 61 add add
EXACT 62 add add
EXACT 63 store store
EXACT 64 getelementptr getelementptr
EXACT 65 load load
EXACT 66 inttoptr inttoptr
EXACT 67 store store
EXACT 68 load load
EXACT 69 add add
EXACT 70 load load
EXACT 71 add add
EXACT 72 store store
EXACT 73 inttoptr inttoptr
EXACT 74 load load
EXACT 75 store store
EXACT 76 getelementptr getelementptr
EXACT 77 bitcast bitcast
EXACT 78 store store
EXACT 79 load load
MORE 80 POT: 2
EXACT 81 fmul fmul
EXACT 82 store store
EXACT 83 add add
EXACT 84 store store
EXACT 85 bitcast bitcast
EXACT 86 fcmp fcmp
EXACT 87 br br
EXACT 88 fadd fadd
EXACT 89 bitcast bitcast
EXACT 90 and and
EXACT 91 icmp icmp
EXACT 92 and and
EXACT 93 icmp icmp
EXACT 94 and and
EXACT 95 br br
EXACT 96 tail tail
EXACT 97 load load
EXACT 98 br br
EXACT 99 fcmp fcmp
EXACT 100 br br
EXACT 101 fcmp fcmp
EXACT 102 br br
EXACT 103 fcmp fcmp
EXACT 104 br br
EXACT 105 phi phi
EXACT 106 phi phi
EXACT 107 phi phi
EXACT 108 store store
EXACT 109 store store
EXACT 110 store store
EXACT 111 br br
MORE 112 POT: 3
MORE 113 POT: 3
MORE 114 POT: 3
EXACT 115 br br
EXACT 116 phi phi
EXACT 117 phi phi
EXACT 118 add add
EXACT 119 add add
EXACT 120 load load
EXACT 121 icmp icmp
EXACT 122 select select
EXACT 123 store store
EXACT 124 br br
EXACT 125 phi phi
EXACT 126 phi phi
EXACT 127 load load
EXACT 128 add add
EXACT 129 store store
EXACT 130 icmp icmp
EXACT 131 zext zext
EXACT 132 store store
EXACT 133 trunc trunc
EXACT 134 and and
EXACT 135 tail tail
EXACT 136 trunc trunc
EXACT 137 and and
EXACT 138 xor xor
EXACT 139 store store
EXACT 140 xor xor
EXACT 141 xor xor
EXACT 142 lshr lshr
EXACT 143 trunc trunc
EXACT 144 and and
EXACT 145 store store
EXACT 146 icmp icmp
EXACT 147 zext zext
EXACT 148 store store
EXACT 149 lshr lshr
EXACT 150 trunc trunc
EXACT 151 store store
EXACT 152 lshr lshr
EXACT 153 xor xor
EXACT 154 add add
EXACT 155 icmp icmp
EXACT 156 zext zext
EXACT 157 store store
EXACT 158 add add
EXACT 159 store store
EXACT 160 add add
EXACT 161 inttoptr inttoptr
EXACT 162 load load
EXACT 163 store store
EXACT 164 store store
EXACT 165 add add
EXACT 166 store store
EXACT 167 inttoptr inttoptr
EXACT 168 load load
EXACT 169 store store
EXACT 170 add add
EXACT 171 store store
EXACT 172 ret ret
EXACT 173 add add
EXACT 174 store store
EXACT 175 br br
EXACT 176 load load
EXACT 177 icmp icmp
EXACT 178 select select
EXACT 179 add add
EXACT 180 store store
EXACT 181 icmp icmp
EXACT 182 br br
EXACT 183 phi phi
EXACT 184 store store
EXACT 185 load load
EXACT 186 zext zext
EXACT 187 store store
EXACT 188 store store
EXACT 189 add add
EXACT 190 add add
EXACT 191 load load
EXACT 192 add add
EXACT 193 inttoptr inttoptr
EXACT 194 store store
EXACT 195 store store
EXACT 196 store store
EXACT 197 tail tail
EXACT 198 load load
EXACT 199 add add
EXACT 200 load load
EXACT 201 load load
EXACT 202 add add
EXACT 203 store store
EXACT 204 inttoptr inttoptr
EXACT 205 store store
EXACT 206 load load
EXACT 207 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%48 = bitcast i64* %47 to double*', 'store double 0.000000e+00, double* %48, align 1', '%49 = add i64 %7, -16', '%50 = add i64 %10, 20', 'store i64 %50, i64* %3, align 8', '%51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%52 = load i64, i64* %51, align 1', '%53 = inttoptr i64 %49 to i64*', 'store i64 %52, i64* %53, align 8', '%56 = load i64, i64* %3, align 8', '%57 = add i64 %56, 5', 'store i64 %57, i64* %3, align 8', 'store i64 %59, i64* %51, align 1', '%60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%61 = bitcast i64* %60 to double*', 'store double 0.000000e+00, double* %61, align 1', 'store double %64, double* %45, align 1', '%65 = add i64 %56, 18', 'store i64 %65, i64* %3, align 8', '%77 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %65, %struct.Memory* %2)', '%.pre = load i64, i64* %3, align 8', '%85 = phi i8 [ 0, %78 ], [ 0, %80 ], [ 1, %82 ], [ 1, %68 ]', '%86 = phi i8 [ 0, %78 ], [ 0, %80 ], [ 0, %82 ], [ 1, %68 ]', '%87 = phi i8 [ 0, %78 ], [ 1, %80 ], [ 0, %82 ], [ 1, %68 ]', 'store i8 %85, i8* %30, align 1', 'store i8 %86, i8* %21, align 1', 'store i8 %87, i8* %14, align 1', '%89 = phi i64 [ %.pre, %76 ], [ %65, %88 ]', '%90 = phi %struct.Memory* [ %77, %76 ], [ %2, %88 ]', '%91 = add i64 %89, 17', '%92 = add i64 %89, 6', '%95 = select i1 %94, i64 %91, i64 %92', 'store i64 %95, i64* %3, align 8', '%97 = icmp ne i8 %96, 0', '%.v = select i1 %97, i64 11, i64 6', '%98 = add i64 %95, %.v', 'store i64 %98, i64* %3, align 8', '%99 = add i64 %98, 32', 'store i64 %99, i64* %3, align 8', '%100 = phi i64 [ %98, %block_405e2d ], [ %91, %routine_ucomisd__xmm1___xmm0.exit ]', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 ptrtoint (%G__0x406b59_type* @G__0x406b59 to i64), i64* %RDI.i, align 8', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%101 = load i32, i32* bitcast (%G_0x609118_type* @G_0x609118 to i32*), align 8', '%102 = zext i32 %101 to i64', 'store i64 %102, i64* %RSI.i, align 8', '%103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i = bitcast %union.anon* %103 to i8*', 'store i8 0, i8* %AL.i, align 1', '%104 = add i64 %100, -22328', '%105 = add i64 %100, 24', '%106 = load i64, i64* %6, align 8', '%107 = add i64 %106, -8', '%108 = inttoptr i64 %107 to i64*', 'store i64 %105, i64* %108, align 8', 'store i64 %107, i64* %6, align 8', 'store i64 %104, i64* %3, align 8', '%109 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %90)', '%EAX.i = bitcast %union.anon* %103 to i32*', '%110 = load i64, i64* %RBP.i, align 8', '%111 = add i64 %110, -12', '%112 = load i32, i32* %EAX.i, align 4', '%113 = load i64, i64* %3, align 8', '%114 = add i64 %113, 3', 'store i64 %114, i64* %3, align 8', '%115 = inttoptr i64 %111 to i32*', 'store i32 %112, i32* %115, align 4', '%.pre2 = load i64, i64* %3, align 8', '%116 = phi i64 [ %.pre2, %block_.L_405e38 ], [ %99, %block_405e33 ]', '%MEMORY.1 = phi %struct.Memory* [ %109, %block_.L_405e38 ], [ %90, %block_405e33 ]', '%117 = load i64, i64* %6, align 8', '%118 = add i64 %117, 16', 'store i64 %118, i64* %6, align 8', '%119 = icmp ugt i64 %117, -17', '%120 = zext i1 %119 to i8', 'store i8 %120, i8* %14, align 1', '%121 = trunc i64 %118 to i32', '%122 = and i32 %121, 255', '%123 = tail call i32 @llvm.ctpop.i32(i32 %122)', '%124 = trunc i32 %123 to i8', '%125 = and i8 %124, 1', '%126 = xor i8 %125, 1', 'store i8 %126, i8* %21, align 1', '%127 = xor i64 %117, 16', '%128 = xor i64 %127, %118', '%129 = lshr i64 %128, 4', '%130 = trunc i64 %129 to i8', '%131 = and i8 %130, 1', 'store i8 %131, i8* %27, align 1', '%132 = icmp eq i64 %118, 0', '%133 = zext i1 %132 to i8', 'store i8 %133, i8* %30, align 1', '%134 = lshr i64 %118, 63', '%135 = trunc i64 %134 to i8', 'store i8 %135, i8* %33, align 1', '%136 = lshr i64 %117, 63', '%137 = xor i64 %134, %136', '%138 = add nuw nsw i64 %137, %134', '%139 = icmp eq i64 %138, 2', '%140 = zext i1 %139 to i8', 'store i8 %140, i8* %39, align 1', '%141 = add i64 %116, 5', 'store i64 %141, i64* %3, align 8', '%142 = add i64 %117, 24', '%143 = inttoptr i64 %118 to i64*', '%144 = load i64, i64* %143, align 8', 'store i64 %144, i64* %RBP.i, align 8', 'store i64 %142, i64* %6, align 8', '%145 = add i64 %116, 6', 'store i64 %145, i64* %3, align 8', '%146 = inttoptr i64 %142 to i64*', '%147 = load i64, i64* %146, align 8', 'store i64 %147, i64* %3, align 8', '%148 = add i64 %117, 32', 'store i64 %148, i64* %6, align 8', 'ret %struct.Memory* %MEMORY.1'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Keep: %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Keep: %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Keep: %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Keep: %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %41 = add i64 %10, add (i64 ptrtoint (%G_0x950__rip__type* @G_0x950__rip_ to i64), i64 7)
Keep: %42 = add i64 %10, 15
Keep: store i64 %42, i64* %3, align 8
Keep: %43 = inttoptr i64 %41 to i64*
Keep: %44 = load i64, i64* %43, align 8
Keep: %45 = bitcast %union.VectorReg* %40 to double*
Keep: %46 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %40, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %44, i64* %46, align 1
Found line to remove! %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %48 = bitcast i64* %47 to double*
Found line to remove! store double 0.000000e+00, double* %48, align 1
Found line to remove! %49 = add i64 %7, -16
Found line to remove! %50 = add i64 %10, 20
Found line to remove! store i64 %50, i64* %3, align 8
Found line to remove! %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %52 = load i64, i64* %51, align 1
Found line to remove! %53 = inttoptr i64 %49 to i64*
Found line to remove! store i64 %52, i64* %53, align 8
Keep: %54 = load i64, i64* %RBP.i, align 8
Keep: %55 = add i64 %54, -8
Found line to remove! %56 = load i64, i64* %3, align 8
Found line to remove! %57 = add i64 %56, 5
Found line to remove! store i64 %57, i64* %3, align 8
Keep: %58 = inttoptr i64 %55 to i64*
Keep: %59 = load i64, i64* %58, align 8
Found line to remove! store i64 %59, i64* %51, align 1
Found line to remove! %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %61 = bitcast i64* %60 to double*
Found line to remove! store double 0.000000e+00, double* %61, align 1
Keep: %62 = load double, double* %45, align 1
Keep: %63 = load double, double* bitcast (%G_0x609090_type* @G_0x609090 to double*), align 8
Keep: %64 = fmul double %62, %63
Found line to remove! store double %64, double* %45, align 1
Found line to remove! %65 = add i64 %56, 18
Found line to remove! store i64 %65, i64* %3, align 8
Keep: %66 = bitcast i64 %59 to double
Keep: %67 = fcmp uno double %66, %64
Keep: br i1 %67, label %68, label %78
Keep: 
Keep: ; <label>:68:                                     ; preds = %entry
Keep: %69 = fadd double %64, %66
Keep: %70 = bitcast double %69 to i64
Keep: %71 = and i64 %70, 9221120237041090560
Keep: %72 = icmp eq i64 %71, 9218868437227405312
Keep: %73 = and i64 %70, 2251799813685247
Keep: %74 = icmp ne i64 %73, 0
Keep: %75 = and i1 %72, %74
Keep: br i1 %75, label %76, label %84
Keep: 
Keep: ; <label>:76:                                     ; preds = %68
Found line to remove! %77 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %65, %struct.Memory* %2)
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: ; <label>:78:                                     ; preds = %entry
Keep: %79 = fcmp ogt double %66, %64
Keep: br i1 %79, label %84, label %80
Keep: 
Keep: ; <label>:80:                                     ; preds = %78
Keep: %81 = fcmp olt double %66, %64
Keep: br i1 %81, label %84, label %82
Keep: 
Keep: ; <label>:82:                                     ; preds = %80
Keep: %83 = fcmp oeq double %66, %64
Keep: br i1 %83, label %84, label %88
Keep: 
Keep: ; <label>:84:                                     ; preds = %82, %80, %78, %68
Found line to remove! %85 = phi i8 [ 0, %78 ], [ 0, %80 ], [ 1, %82 ], [ 1, %68 ]
Found line to remove! %86 = phi i8 [ 0, %78 ], [ 0, %80 ], [ 0, %82 ], [ 1, %68 ]
Found line to remove! %87 = phi i8 [ 0, %78 ], [ 1, %80 ], [ 0, %82 ], [ 1, %68 ]
Found line to remove! store i8 %85, i8* %30, align 1
Found line to remove! store i8 %86, i8* %21, align 1
Found line to remove! store i8 %87, i8* %14, align 1
Keep: br label %88
Keep: 
Keep: ; <label>:88:                                     ; preds = %84, %82
Keep: store i8 0, i8* %39, align 1
Keep: store i8 0, i8* %33, align 1
Keep: store i8 0, i8* %27, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %88, %76
Found line to remove! %89 = phi i64 [ %.pre, %76 ], [ %65, %88 ]
Found line to remove! %90 = phi %struct.Memory* [ %77, %76 ], [ %2, %88 ]
Found line to remove! %91 = add i64 %89, 17
Found line to remove! %92 = add i64 %89, 6
Keep: %93 = load i8, i8* %30, align 1
Keep: %94 = icmp eq i8 %93, 0
Found line to remove! %95 = select i1 %94, i64 %91, i64 %92
Found line to remove! store i64 %95, i64* %3, align 8
Keep: br i1 %94, label %block_.L_405e38, label %block_405e2d
Keep: 
Keep: block_405e2d:                                     ; preds = %routine_ucomisd__xmm1___xmm0.exit
Keep: %96 = load i8, i8* %21, align 1
Found line to remove! %97 = icmp ne i8 %96, 0
Found line to remove! %.v = select i1 %97, i64 11, i64 6
Found line to remove! %98 = add i64 %95, %.v
Found line to remove! store i64 %98, i64* %3, align 8
Keep: %cmpBr_405e2d = icmp eq i8 %96, 1
Keep: br i1 %cmpBr_405e2d, label %block_.L_405e38, label %block_405e33
Keep: 
Keep: block_405e33:                                     ; preds = %block_405e2d
Found line to remove! %99 = add i64 %98, 32
Found line to remove! store i64 %99, i64* %3, align 8
Keep: br label %block_.L_405e53
Keep: 
Keep: block_.L_405e38:                                  ; preds = %block_405e2d, %routine_ucomisd__xmm1___xmm0.exit
Found line to remove! %100 = phi i64 [ %98, %block_405e2d ], [ %91, %routine_ucomisd__xmm1___xmm0.exit ]
Found line to remove! %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x406b59_type* @G__0x406b59 to i64), i64* %RDI.i, align 8
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %101 = load i32, i32* bitcast (%G_0x609118_type* @G_0x609118 to i32*), align 8
Found line to remove! %102 = zext i32 %101 to i64
Found line to remove! store i64 %102, i64* %RSI.i, align 8
Found line to remove! %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %103 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %104 = add i64 %100, -22328
Found line to remove! %105 = add i64 %100, 24
Found line to remove! %106 = load i64, i64* %6, align 8
Found line to remove! %107 = add i64 %106, -8
Found line to remove! %108 = inttoptr i64 %107 to i64*
Found line to remove! store i64 %105, i64* %108, align 8
Found line to remove! store i64 %107, i64* %6, align 8
Found line to remove! store i64 %104, i64* %3, align 8
Found line to remove! %109 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %90)
Found line to remove! %EAX.i = bitcast %union.anon* %103 to i32*
Found line to remove! %110 = load i64, i64* %RBP.i, align 8
Found line to remove! %111 = add i64 %110, -12
Found line to remove! %112 = load i32, i32* %EAX.i, align 4
Found line to remove! %113 = load i64, i64* %3, align 8
Found line to remove! %114 = add i64 %113, 3
Found line to remove! store i64 %114, i64* %3, align 8
Found line to remove! %115 = inttoptr i64 %111 to i32*
Found line to remove! store i32 %112, i32* %115, align 4
Found line to remove! %.pre2 = load i64, i64* %3, align 8
Keep: br label %block_.L_405e53
Keep: 
Keep: block_.L_405e53:                                  ; preds = %block_.L_405e38, %block_405e33
Found line to remove! %116 = phi i64 [ %.pre2, %block_.L_405e38 ], [ %99, %block_405e33 ]
Found line to remove! %MEMORY.1 = phi %struct.Memory* [ %109, %block_.L_405e38 ], [ %90, %block_405e33 ]
Found line to remove! %117 = load i64, i64* %6, align 8
Found line to remove! %118 = add i64 %117, 16
Found line to remove! store i64 %118, i64* %6, align 8
Found line to remove! %119 = icmp ugt i64 %117, -17
Found line to remove! %120 = zext i1 %119 to i8
Found line to remove! store i8 %120, i8* %14, align 1
Found line to remove! %121 = trunc i64 %118 to i32
Found line to remove! %122 = and i32 %121, 255
Found line to remove! %123 = tail call i32 @llvm.ctpop.i32(i32 %122)
Found line to remove! %124 = trunc i32 %123 to i8
Found line to remove! %125 = and i8 %124, 1
Found line to remove! %126 = xor i8 %125, 1
Found line to remove! store i8 %126, i8* %21, align 1
Found line to remove! %127 = xor i64 %117, 16
Found line to remove! %128 = xor i64 %127, %118
Found line to remove! %129 = lshr i64 %128, 4
Found line to remove! %130 = trunc i64 %129 to i8
Found line to remove! %131 = and i8 %130, 1
Found line to remove! store i8 %131, i8* %27, align 1
Found line to remove! %132 = icmp eq i64 %118, 0
Found line to remove! %133 = zext i1 %132 to i8
Found line to remove! store i8 %133, i8* %30, align 1
Found line to remove! %134 = lshr i64 %118, 63
Found line to remove! %135 = trunc i64 %134 to i8
Found line to remove! store i8 %135, i8* %33, align 1
Found line to remove! %136 = lshr i64 %117, 63
Found line to remove! %137 = xor i64 %134, %136
Found line to remove! %138 = add nuw nsw i64 %137, %134
Found line to remove! %139 = icmp eq i64 %138, 2
Found line to remove! %140 = zext i1 %139 to i8
Found line to remove! store i8 %140, i8* %39, align 1
Found line to remove! %141 = add i64 %116, 5
Found line to remove! store i64 %141, i64* %3, align 8
Found line to remove! %142 = add i64 %117, 24
Found line to remove! %143 = inttoptr i64 %118 to i64*
Found line to remove! %144 = load i64, i64* %143, align 8
Found line to remove! store i64 %144, i64* %RBP.i, align 8
Found line to remove! store i64 %142, i64* %6, align 8
Found line to remove! %145 = add i64 %116, 6
Found line to remove! store i64 %145, i64* %3, align 8
Found line to remove! %146 = inttoptr i64 %142 to i64*
Found line to remove! %147 = load i64, i64* %146, align 8
Found line to remove! store i64 %147, i64* %3, align 8
Found line to remove! %148 = add i64 %117, 32
Found line to remove! store i64 %148, i64* %6, align 8
Found line to remove! ret %struct.Memory* %MEMORY.1
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 16) to i64*), align 16', '%42 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %40, i64* %42, align 1', '%43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%44 = bitcast i64* %43 to double*', 'store double 0.000000e+00, double* %44, align 1', '%45 = add i64 %7, -16', '%46 = add i64 %10, 20', 'store i64 %46, i64* %PC, align 8', '%47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%48 = load i64, i64* %47, align 1', '%49 = inttoptr i64 %45 to i64*', 'store i64 %48, i64* %49, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 5', 'store i64 %53, i64* %PC, align 8', 'store i64 %55, i64* %47, align 1', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%57 = bitcast i64* %56 to double*', 'store double 0.000000e+00, double* %57, align 1', 'store double %60, double* %41, align 1', '%61 = add i64 %52, 18', 'store i64 %61, i64* %PC, align 8', '%73 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %61, %struct.Memory* %2) #13', '%.pre = load i64, i64* %PC, align 8', '%81 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 1, %78 ], [ 1, %64 ]', '%82 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 0, %78 ], [ 1, %64 ]', '%83 = phi i8 [ 0, %74 ], [ 1, %76 ], [ 0, %78 ], [ 1, %64 ]', 'store i8 %81, i8* %30, align 1', 'store i8 %82, i8* %21, align 1', 'store i8 %83, i8* %14, align 1', '%85 = phi i64 [ %.pre, %72 ], [ %61, %84 ]', '%86 = phi %struct.Memory* [ %73, %72 ], [ %2, %84 ]', '%87 = add i64 %85, 17', '%88 = add i64 %85, 6', '%91 = select i1 %90, i64 %87, i64 %88', 'store i64 %91, i64* %PC, align 8', '%92 = phi i64 [ %.pre2, %block_405e38 ], [ %125, %block_405e33 ]', '%MEMORY.0 = phi %struct.Memory* [ %138, %block_405e38 ], [ %86, %block_405e33 ]', '%93 = load i64, i64* %RSP, align 8', '%94 = add i64 %93, 16', 'store i64 %94, i64* %RSP, align 8', '%95 = icmp ugt i64 %93, -17', '%96 = zext i1 %95 to i8', 'store i8 %96, i8* %14, align 1', '%97 = trunc i64 %94 to i32', '%98 = and i32 %97, 255', '%99 = tail call i32 @llvm.ctpop.i32(i32 %98) #12', '%100 = trunc i32 %99 to i8', '%101 = and i8 %100, 1', '%102 = xor i8 %101, 1', 'store i8 %102, i8* %21, align 1', '%103 = xor i64 %93, 16', '%104 = xor i64 %103, %94', '%105 = lshr i64 %104, 4', '%106 = trunc i64 %105 to i8', '%107 = and i8 %106, 1', 'store i8 %107, i8* %27, align 1', '%108 = icmp eq i64 %94, 0', '%109 = zext i1 %108 to i8', 'store i8 %109, i8* %30, align 1', '%110 = lshr i64 %94, 63', '%111 = trunc i64 %110 to i8', 'store i8 %111, i8* %33, align 1', '%112 = lshr i64 %93, 63', '%113 = xor i64 %110, %112', '%114 = add nuw nsw i64 %113, %110', '%115 = icmp eq i64 %114, 2', '%116 = zext i1 %115 to i8', 'store i8 %116, i8* %39, align 1', '%117 = add i64 %92, 5', 'store i64 %117, i64* %PC, align 8', '%118 = add i64 %93, 24', '%119 = inttoptr i64 %94 to i64*', '%120 = load i64, i64* %119, align 8', 'store i64 %120, i64* %RBP, align 8', 'store i64 %118, i64* %RSP, align 8', '%121 = add i64 %92, 6', 'store i64 %121, i64* %PC, align 8', '%122 = inttoptr i64 %118 to i64*', '%123 = load i64, i64* %122, align 8', 'store i64 %123, i64* %PC, align 8', '%124 = add i64 %93, 32', 'store i64 %124, i64* %RSP, align 8', 'ret %struct.Memory* %MEMORY.0', '%125 = add i64 %128, 32', 'store i64 %125, i64* %PC, align 8', '%127 = icmp ne i8 %126, 0', '%.v = select i1 %127, i64 11, i64 6', '%128 = add i64 %91, %.v', 'store i64 %128, i64* %PC, align 8', '%130 = phi i64 [ %128, %block_405e2d ], [ %87, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]', 'store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1033), i64* %RDI, align 8', '%131 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8', '%132 = zext i32 %131 to i64', 'store i64 %132, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%133 = add i64 %130, -22328', '%134 = add i64 %130, 24', '%135 = load i64, i64* %RSP, align 8', '%136 = add i64 %135, -8', '%137 = inttoptr i64 %136 to i64*', 'store i64 %134, i64* %137, align 8', 'store i64 %136, i64* %RSP, align 8', 'store i64 %133, i64* %PC, align 8', '%138 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %86)', '%139 = load i64, i64* %RBP, align 8', '%140 = add i64 %139, -12', '%141 = load i32, i32* %EAX, align 4', '%142 = load i64, i64* %PC, align 8', '%143 = add i64 %142, 3', 'store i64 %143, i64* %PC, align 8', '%144 = inttoptr i64 %140 to i32*', 'store i32 %141, i32* %144, align 4', '%.pre2 = load i64, i64* %PC, align 8'])
Keep: block_405e00:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Keep: %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Keep: %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Keep: %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 16) to i64*), align 16
Keep: %41 = bitcast %union.VectorReg* %4 to double*
Found line to remove! %42 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %40, i64* %42, align 1
Found line to remove! %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %44 = bitcast i64* %43 to double*
Found line to remove! store double 0.000000e+00, double* %44, align 1
Found line to remove! %45 = add i64 %7, -16
Found line to remove! %46 = add i64 %10, 20
Found line to remove! store i64 %46, i64* %PC, align 8
Found line to remove! %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %48 = load i64, i64* %47, align 1
Found line to remove! %49 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %48, i64* %49, align 8
Keep: %50 = load i64, i64* %RBP, align 8
Keep: %51 = add i64 %50, -8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 5
Found line to remove! store i64 %53, i64* %PC, align 8
Keep: %54 = inttoptr i64 %51 to i64*
Keep: %55 = load i64, i64* %54, align 8
Found line to remove! store i64 %55, i64* %47, align 1
Found line to remove! %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %57 = bitcast i64* %56 to double*
Found line to remove! store double 0.000000e+00, double* %57, align 1
Keep: %58 = load double, double* %41, align 1
Keep: %59 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
Keep: %60 = fmul double %58, %59
Found line to remove! store double %60, double* %41, align 1
Found line to remove! %61 = add i64 %52, 18
Found line to remove! store i64 %61, i64* %PC, align 8
Keep: %62 = bitcast i64 %55 to double
Keep: %63 = fcmp uno double %62, %60
Keep: br i1 %63, label %64, label %74
Keep: 
Keep: ; <label>:64:                                     ; preds = %block_405e00
Keep: %65 = fadd double %60, %62
Keep: %66 = bitcast double %65 to i64
Keep: %67 = and i64 %66, 9221120237041090560
Keep: %68 = icmp eq i64 %67, 9218868437227405312
Keep: %69 = and i64 %66, 2251799813685247
Keep: %70 = icmp ne i64 %69, 0
Keep: %71 = and i1 %68, %70
Keep: br i1 %71, label %72, label %80
Keep: 
Keep: ; <label>:72:                                     ; preds = %64
Found line to remove! %73 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %61, %struct.Memory* %2) #13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: ; <label>:74:                                     ; preds = %block_405e00
Keep: %75 = fcmp ogt double %62, %60
Keep: br i1 %75, label %80, label %76
Keep: 
Keep: ; <label>:76:                                     ; preds = %74
Keep: %77 = fcmp olt double %62, %60
Keep: br i1 %77, label %80, label %78
Keep: 
Keep: ; <label>:78:                                     ; preds = %76
Keep: %79 = fcmp oeq double %62, %60
Keep: br i1 %79, label %80, label %84
Keep: 
Keep: ; <label>:80:                                     ; preds = %78, %76, %74, %64
Found line to remove! %81 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 1, %78 ], [ 1, %64 ]
Found line to remove! %82 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 0, %78 ], [ 1, %64 ]
Found line to remove! %83 = phi i8 [ 0, %74 ], [ 1, %76 ], [ 0, %78 ], [ 1, %64 ]
Found line to remove! store i8 %81, i8* %30, align 1
Found line to remove! store i8 %82, i8* %21, align 1
Found line to remove! store i8 %83, i8* %14, align 1
Keep: br label %84
Keep: 
Keep: ; <label>:84:                                     ; preds = %80, %78
Keep: store i8 0, i8* %39, align 1
Keep: store i8 0, i8* %33, align 1
Keep: store i8 0, i8* %27, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %84, %72
Found line to remove! %85 = phi i64 [ %.pre, %72 ], [ %61, %84 ]
Found line to remove! %86 = phi %struct.Memory* [ %73, %72 ], [ %2, %84 ]
Found line to remove! %87 = add i64 %85, 17
Found line to remove! %88 = add i64 %85, 6
Keep: %89 = load i8, i8* %30, align 1
Keep: %90 = icmp eq i8 %89, 0
Found line to remove! %91 = select i1 %90, i64 %87, i64 %88
Found line to remove! store i64 %91, i64* %PC, align 8
Keep: br i1 %90, label %block_405e38, label %block_405e2d
Keep: 
Keep: block_405e53:                                     ; preds = %block_405e38, %block_405e33Writing '/tmp/tmpu1m6a4xn.dot'...
Writing '/tmp/tmpu1m6a4xn.dot':Done

Reading LLVM: /tmp/tmpye_20f_m-query.ll
Extracting function [_Z9check_sumd] from /tmp/tmpye_20f_m-query.ll
Dot file generated!
Writing '/tmp/tmp87kiqnj5.dot'...
Writing '/tmp/tmp87kiqnj5.dot':Done

Reading LLVM: /tmp/tmp47vjd0xj-target.ll
Extracting function [_Z9check_sumd] from /tmp/tmp47vjd0xj-target.ll
Dot file generated!

Found line to remove! %92 = phi i64 [ %.pre2, %block_405e38 ], [ %125, %block_405e33 ]
Found line to remove! %MEMORY.0 = phi %struct.Memory* [ %138, %block_405e38 ], [ %86, %block_405e33 ]
Found line to remove! %93 = load i64, i64* %RSP, align 8
Found line to remove! %94 = add i64 %93, 16
Found line to remove! store i64 %94, i64* %RSP, align 8
Found line to remove! %95 = icmp ugt i64 %93, -17
Found line to remove! %96 = zext i1 %95 to i8
Found line to remove! store i8 %96, i8* %14, align 1
Found line to remove! %97 = trunc i64 %94 to i32
Found line to remove! %98 = and i32 %97, 255
Found line to remove! %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #12
Found line to remove! %100 = trunc i32 %99 to i8
Found line to remove! %101 = and i8 %100, 1
Found line to remove! %102 = xor i8 %101, 1
Found line to remove! store i8 %102, i8* %21, align 1
Found line to remove! %103 = xor i64 %93, 16
Found line to remove! %104 = xor i64 %103, %94
Found line to remove! %105 = lshr i64 %104, 4
Found line to remove! %106 = trunc i64 %105 to i8
Found line to remove! %107 = and i8 %106, 1
Found line to remove! store i8 %107, i8* %27, align 1
Found line to remove! %108 = icmp eq i64 %94, 0
Found line to remove! %109 = zext i1 %108 to i8
Found line to remove! store i8 %109, i8* %30, align 1
Found line to remove! %110 = lshr i64 %94, 63
Found line to remove! %111 = trunc i64 %110 to i8
Found line to remove! store i8 %111, i8* %33, align 1
Found line to remove! %112 = lshr i64 %93, 63
Found line to remove! %113 = xor i64 %110, %112
Found line to remove! %114 = add nuw nsw i64 %113, %110
Found line to remove! %115 = icmp eq i64 %114, 2
Found line to remove! %116 = zext i1 %115 to i8
Found line to remove! store i8 %116, i8* %39, align 1
Found line to remove! %117 = add i64 %92, 5
Found line to remove! store i64 %117, i64* %PC, align 8
Found line to remove! %118 = add i64 %93, 24
Found line to remove! %119 = inttoptr i64 %94 to i64*
Found line to remove! %120 = load i64, i64* %119, align 8
Found line to remove! store i64 %120, i64* %RBP, align 8
Found line to remove! store i64 %118, i64* %RSP, align 8
Found line to remove! %121 = add i64 %92, 6
Found line to remove! store i64 %121, i64* %PC, align 8
Found line to remove! %122 = inttoptr i64 %118 to i64*
Found line to remove! %123 = load i64, i64* %122, align 8
Found line to remove! store i64 %123, i64* %PC, align 8
Found line to remove! %124 = add i64 %93, 32
Found line to remove! store i64 %124, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %MEMORY.0
Keep: 
Keep: block_405e33:                                     ; preds = %block_405e2d
Found line to remove! %125 = add i64 %128, 32
Found line to remove! store i64 %125, i64* %PC, align 8
Keep: br label %block_405e53
Keep: 
Keep: block_405e2d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: %126 = load i8, i8* %21, align 1
Found line to remove! %127 = icmp ne i8 %126, 0
Found line to remove! %.v = select i1 %127, i64 11, i64 6
Found line to remove! %128 = add i64 %91, %.v
Found line to remove! store i64 %128, i64* %PC, align 8
Keep: %129 = icmp eq i8 %126, 1
Keep: br i1 %129, label %block_405e38, label %block_405e33
Keep: 
Keep: block_405e38:                                     ; preds = %block_405e2d, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Found line to remove! %130 = phi i64 [ %128, %block_405e2d ], [ %87, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
Found line to remove! store i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 1033), i64* %RDI, align 8
Found line to remove! %131 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
Found line to remove! %132 = zext i32 %131 to i64
Found line to remove! store i64 %132, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %133 = add i64 %130, -22328
Found line to remove! %134 = add i64 %130, 24
Found line to remove! %135 = load i64, i64* %RSP, align 8
Found line to remove! %136 = add i64 %135, -8
Found line to remove! %137 = inttoptr i64 %136 to i64*
Found line to remove! store i64 %134, i64* %137, align 8
Found line to remove! store i64 %136, i64* %RSP, align 8
Found line to remove! store i64 %133, i64* %PC, align 8
Found line to remove! %138 = tail call fastcc %struct.Memory* @ext_6208b0_printf(%struct.State* nonnull %0, %struct.Memory* %86)
Found line to remove! %139 = load i64, i64* %RBP, align 8
Found line to remove! %140 = add i64 %139, -12
Found line to remove! %141 = load i32, i32* %EAX, align 4
Found line to remove! %142 = load i64, i64* %PC, align 8
Found line to remove! %143 = add i64 %142, 3
Found line to remove! store i64 %143, i64* %PC, align 8
Found line to remove! %144 = inttoptr i64 %140 to i32*
Found line to remove! store i32 %141, i32* %144, align 4
Found line to remove! %.pre2 = load i64, i64* %PC, align 8
Keep: br label %block_405e53
================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_10 = load i64, i64* %var_2_3, align 8
- 3 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 4 %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 5 %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 6 %var_2_41 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x950__rip__type* @G_0x950__rip_ to i64), i64 7)
- 7 %var_2_42 = add i64 %var_2_10, 15
- 8 store i64 %var_2_42, i64* %var_2_3, align 8
- 9 %var_2_43 = inttoptr i64 %var_2_41 to i64*
- 10 %var_2_44 = load i64, i64* %var_2_43, align 8
- 11 %var_2_46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
- 12 store i64 %var_2_44, i64* %var_2_46, align 1
- 13 %var_2_54 = load i64, i64* %RBP.i, align 8
- 14 %var_2_55 = add i64 %var_2_54, -8
- 15 %3 = inttoptr i64 %var_2_55 to double*
- 16 %var_2_592 = load double, double* %3, align 8
- 17 %var_2_62.cast = bitcast i64 %var_2_44 to double
- 18 %var_2_63 = load double, double* bitcast (%G_0x609090_type* @G_0x609090 to double*), align 8
- 19 %var_2_64 = fmul double %var_2_62.cast, %var_2_63
- 20 %var_2_67 = fcmp uno double %var_2_592, %var_2_64
- 21 \<badref\> = br i1 %var_2_67, label %var_2_68, label %var_2_88
- 22 %var_2_69 = fadd double %var_2_592, %var_2_64
- 23 %var_2_70 = bitcast double %var_2_69 to i64
- 24 %var_2_71 = and i64 %var_2_70, 9221120237041090560
- 25 %var_2_72 = icmp eq i64 %var_2_71, 9218868437227405312
- 26 %var_2_73 = and i64 %var_2_70, 2251799813685247
- 27 %var_2_74 = icmp ne i64 %var_2_73, 0
- 28 %var_2_75 = and i1 %var_2_72, %var_2_74
- 29 \<badref\> = br i1 %var_2_75, label %routine_ucomisd__xmm1___xmm0.exit, label %var_2_88
- 30 store i8 0, i8* %var_2_39, align 1
- 31 store i8 0, i8* %var_2_33, align 1
- 32 store i8 0, i8* %var_2_27, align 1
- 33 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 34 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2385ab1e18>, {0: set(), 1: {0}, 2: {9, 10, 11, 6}, 3: {2}, 4: {3}, 5: {4}, 6: set(), 7: set(), 8: {24, 25, 23}, 9: {8}, 10: {9, 10, 11, 6}, 11: set(), 12: {24, 25, 23}, 13: {9, 10, 11, 6}, 14: {7}, 15: {8}, 16: {9, 10, 11, 6}, 17: {16, 5}, 18: {9, 10, 11, 6}, 19: {12}, 20: {13}, 21: {14, 22}, 22: {15}, 23: {16, 5}, 24: {17}, 25: {18}, 26: {19}, 27: {20}, 28: {21}, 29: {14, 22}, 30: {24, 25, 23}, 31: {24, 25, 23}, 32: {24, 25, 23}, 33: {26}, 34: {27}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2385ab1e18>, {0: set(), 1: set(), 2: set(), 3: {2}, 4: {3}, 5: {4}, 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: {23}, 31: {24}, 32: {25}, 33: {26}, 34: {27}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
EXACT 30 store store
EXACT 31 store store
EXACT 32 store store
EXACT 33 br br
EXACT 34 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 2 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 3 %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 4 %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 5 %var_2_41 = bitcast %union.VectorReg* %var_2_4 to double*
- 6 %var_2_50 = load i64, i64* %RBP, align 8
- 7 %var_2_51 = add i64 %var_2_50, -8
- 8 %3 = inttoptr i64 %var_2_51 to double*
- 9 %var_2_553 = load double, double* %3, align 8
- 10 %var_2_58 = load double, double* %var_2_41, align 1
- 11 %var_2_59 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
- 12 %var_2_60 = fmul double %var_2_58, %var_2_59
- 13 %var_2_63 = fcmp uno double %var_2_553, %var_2_60
- 14 \<badref\> = br i1 %var_2_63, label %var_2_64, label %var_2_84
- 15 %var_2_65 = fadd double %var_2_553, %var_2_60
- 16 %var_2_66 = bitcast double %var_2_65 to i64
- 17 %var_2_67 = and i64 %var_2_66, 9221120237041090560
- 18 %var_2_68 = icmp eq i64 %var_2_67, 9218868437227405312
- 19 %var_2_69 = and i64 %var_2_66, 2251799813685247
- 20 %var_2_70 = icmp ne i64 %var_2_69, 0
- 21 %var_2_71 = and i1 %var_2_68, %var_2_70
- 22 \<badref\> = br i1 %var_2_71, label %block_405e53, label %var_2_84
- 23 store i8 0, i8* %var_2_39, align 1
- 24 store i8 0, i8* %var_2_33, align 1
- 25 store i8 0, i8* %var_2_27, align 1
- 26 \<badref\> = br label %block_405e53
- 27 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f23856ee400>, {0: {1}, 1: set(), 2: {3}, 3: {4}, 4: {5}, 5: {17, 23}, 6: {2, 10, 13, 16, 18}, 7: {14}, 8: {9, 15}, 9: {2, 10, 13, 16, 18}, 10: {2, 10, 13, 16, 18}, 11: {2, 10, 13, 16, 18}, 12: {19}, 13: {20}, 14: {29, 21}, 15: {22}, 16: {17, 23}, 17: {24}, 18: {25}, 19: {26}, 20: {27}, 21: {28}, 22: {29, 21}, 23: {32, 8, 12, 30, 31}, 24: {32, 8, 12, 30, 31}, 25: {32, 8, 12, 30, 31}, 26: {33}, 27: {34}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f23856ee400>, {0: set(), 1: set(), 2: {3}, 3: {4}, 4: {5}, 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: {30}, 24: {31}, 25: {32}, 26: {33}, 27: {34}})
NO MATCH 0
NO MATCH 1
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
EXACT 23 store store
EXACT 24 store store
EXACT 25 store store
EXACT 26 br br
EXACT 27 ret ret
FP: 63 2.0 False
TO REMOVE: dict_keys(['store i8 0, i8* %var_2_27, align 1', 'ret %struct.Memory* %2', '%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_33, align 1'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_10 = load i64, i64* %var_2_3, align 8
Found line to remove! %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_41 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x950__rip__type* @G_0x950__rip_ to i64), i64 7)
Keep: %var_2_42 = add i64 %var_2_10, 15
Keep: store i64 %var_2_42, i64* %var_2_3, align 8
Keep: %var_2_43 = inttoptr i64 %var_2_41 to i64*
Keep: %var_2_44 = load i64, i64* %var_2_43, align 8
Keep: %var_2_46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_44, i64* %var_2_46, align 1
Keep: %var_2_54 = load i64, i64* %RBP.i, align 8
Keep: %var_2_55 = add i64 %var_2_54, -8
Keep: %3 = inttoptr i64 %var_2_55 to double*
Keep: %var_2_592 = load double, double* %3, align 8
Keep: %var_2_62.cast = bitcast i64 %var_2_44 to double
Keep: %var_2_63 = load double, double* bitcast (%G_0x609090_type* @G_0x609090 to double*), align 8
Keep: %var_2_64 = fmul double %var_2_62.cast, %var_2_63
Keep: %var_2_67 = fcmp uno double %var_2_592, %var_2_64
Keep: br i1 %var_2_67, label %var_2_68, label %var_2_88
Keep: 
Keep: var_2_68:                                         ; preds = %entry
Keep: %var_2_69 = fadd double %var_2_592, %var_2_64
Keep: %var_2_70 = bitcast double %var_2_69 to i64
Keep: %var_2_71 = and i64 %var_2_70, 9221120237041090560
Keep: %var_2_72 = icmp eq i64 %var_2_71, 9218868437227405312
Keep: %var_2_73 = and i64 %var_2_70, 2251799813685247
Keep: %var_2_74 = icmp ne i64 %var_2_73, 0
Keep: %var_2_75 = and i1 %var_2_72, %var_2_74
Keep: br i1 %var_2_75, label %routine_ucomisd__xmm1___xmm0.exit, label %var_2_88
Keep: 
Keep: var_2_88:                                         ; preds = %entry, %var_2_68
Found line to remove! store i8 0, i8* %var_2_39, align 1
Found line to remove! store i8 0, i8* %var_2_33, align 1
Found line to remove! store i8 0, i8* %var_2_27, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %var_2_68, %var_2_88
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_27, align 1', 'ret %struct.Memory* %2'])
Keep: block_405e00:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_41 = bitcast %union.VectorReg* %var_2_4 to double*
Keep: %var_2_50 = load i64, i64* %RBP, align 8
Keep: %var_2_51 = add i64 %var_2_50, -8
Keep: %3 = inttoptr i64 %var_2_51 to double*
Keep: %var_2_553 = load double, double* %3, align 8
Keep: %var_2_58 = load double, double* %var_2_41, align 1
Keep: %var_2_59 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
Keep: %var_2_60 = fmul double %var_2_58, %var_2_59
Keep: %var_2_63 = fcmp uno double %var_2_553, %var_2_60
Keep: br i1 %var_2_63, label %var_2_64, label %var_2_84
Keep: 
Keep: var_2_64:                                         ; preds = %block_405e00Writing '/tmp/tmpgpzv4r_f.dot'...
Writing '/tmp/tmpgpzv4r_f.dot':Done

Reading LLVM: /tmp/tmpye_20f_m-query.ll
Extracting function [_Z9check_sumd] from /tmp/tmpye_20f_m-query.ll
Dot file generated!
Writing '/tmp/tmpqt4fufmo.dot'...
Writing '/tmp/tmpqt4fufmo.dot':Done

Reading LLVM: /tmp/tmp47vjd0xj-target.ll
Extracting function [_Z9check_sumd] from /tmp/tmp47vjd0xj-target.ll
Dot file generated!

Keep: %var_2_65 = fadd double %var_2_553, %var_2_60
Keep: %var_2_66 = bitcast double %var_2_65 to i64
Keep: %var_2_67 = and i64 %var_2_66, 9221120237041090560
Keep: %var_2_68 = icmp eq i64 %var_2_67, 9218868437227405312
Keep: %var_2_69 = and i64 %var_2_66, 2251799813685247
Keep: %var_2_70 = icmp ne i64 %var_2_69, 0
Keep: %var_2_71 = and i1 %var_2_68, %var_2_70
Keep: br i1 %var_2_71, label %block_405e53, label %var_2_84
Keep: 
Keep: var_2_84:                                         ; preds = %block_405e00, %var_2_64
Found line to remove! store i8 0, i8* %var_2_39, align 1
Found line to remove! store i8 0, i8* %var_2_33, align 1
Found line to remove! store i8 0, i8* %var_2_27, align 1
Keep: br label %block_405e53
Keep: 
Keep: block_405e53:                                     ; preds = %var_2_84, %var_2_64
Found line to remove! ret %struct.Memory* %2
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_10 = load i64, i64* %var_2_3, align 8
- 2 %var_2_41 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x950__rip__type* @G_0x950__rip_ to i64), i64 7)
- 3 %var_2_42 = add i64 %var_2_10, 15
- 4 store i64 %var_2_42, i64* %var_2_3, align 8
- 5 %var_2_43 = inttoptr i64 %var_2_41 to i64*
- 6 %var_2_44 = load i64, i64* %var_2_43, align 8
- 7 %var_2_46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
- 8 store i64 %var_2_44, i64* %var_2_46, align 1
- 9 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2385b3e6a8>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2385b3e6a8>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: {0}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
EXACT 9 ret ret
================ Starting round 5
MAPPING:
- 0 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f23856dd620>, {0: {9}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f23856dd620>, {0: {9}})
EXACT 0 ret ret
FP: 63 3.0 False
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_10 = load i64, i64* %var_2_3, align 8
Keep: %var_2_41 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x950__rip__type* @G_0x950__rip_ to i64), i64 7)
Keep: %var_2_42 = add i64 %var_2_10, 15
Keep: store i64 %var_2_42, i64* %var_2_3, align 8
Keep: %var_2_43 = inttoptr i64 %var_2_41 to i64*
Keep: %var_2_44 = load i64, i64* %var_2_43, align 8
Keep: %var_2_46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_44, i64* %var_2_46, align 1
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: block_405e00:
Found line to remove! ret %struct.Memory* %2
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/_Z9check_sumd/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/binary/test.mcsema.calls_renamed.ll _Z9check_sumd
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/_Z9check_sumd/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
